{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE DeriveGeneric #-}

module StripeAPI.CyclicTypes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.Types.AccountCapabilities
import StripeAPI.Types.AccountDashboardSettings
import StripeAPI.Types.AccountDeclineChargeOn
import StripeAPI.Types.AccountLink
import StripeAPI.Types.AccountPaymentsSettings
import StripeAPI.Types.AccountRequirementsError
import StripeAPI.Types.AccountTosAcceptance
import StripeAPI.Types.Address
import StripeAPI.Types.ApplePayDomain
import StripeAPI.Types.Application
import StripeAPI.Types.BalanceAmountBySourceType
import StripeAPI.Types.BitcoinTransaction
import StripeAPI.Types.CardMandatePaymentMethodDetails
import StripeAPI.Types.ChargeFraudDetails
import StripeAPI.Types.CheckoutSessionCustomDisplayItemDescription
import StripeAPI.Types.CountrySpecVerificationFieldDetails
import StripeAPI.Types.Coupon
import StripeAPI.Types.DeletedAccount
import StripeAPI.Types.DeletedAlipayAccount
import StripeAPI.Types.DeletedApplePayDomain
import StripeAPI.Types.DeletedBankAccount
import StripeAPI.Types.DeletedBitcoinReceiver
import StripeAPI.Types.DeletedCard
import StripeAPI.Types.DeletedCoupon
import StripeAPI.Types.DeletedCustomer
import StripeAPI.Types.DeletedDiscount
import StripeAPI.Types.DeletedInvoice
import StripeAPI.Types.DeletedInvoiceitem
import StripeAPI.Types.DeletedPerson
import StripeAPI.Types.DeletedPlan
import StripeAPI.Types.DeletedProduct
import StripeAPI.Types.DeletedRadarValueList
import StripeAPI.Types.DeletedRadarValueListItem
import StripeAPI.Types.DeletedRecipient
import StripeAPI.Types.DeletedSku
import StripeAPI.Types.DeletedSubscriptionItem
import StripeAPI.Types.DeletedTaxId
import StripeAPI.Types.DeletedTerminalLocation
import StripeAPI.Types.DeletedTerminalReader
import StripeAPI.Types.DeletedWebhookEndpoint
import StripeAPI.Types.DeliveryEstimate
import StripeAPI.Types.DisputeEvidenceDetails
import StripeAPI.Types.EphemeralKey
import StripeAPI.Types.ExchangeRate
import StripeAPI.Types.Fee
import StripeAPI.Types.FinancialReportingFinanceReportRunRunParameters
import StripeAPI.Types.Inventory
import StripeAPI.Types.InvoiceItemThresholdReason
import StripeAPI.Types.InvoiceLineItemPeriod
import StripeAPI.Types.InvoiceSettingCustomField
import StripeAPI.Types.InvoiceSettingSubscriptionScheduleSetting
import StripeAPI.Types.InvoicesResourceInvoiceTaxId
import StripeAPI.Types.InvoicesStatusTransitions
import StripeAPI.Types.IssuingSettlement
import StripeAPI.Types.IssuingVerification
import StripeAPI.Types.IssuingAuthorizationMerchantData
import StripeAPI.Types.IssuingAuthorizationVerificationData
import StripeAPI.Types.IssuingAuthorizationViolatedAuthControl
import StripeAPI.Types.IssuingCardPin
import StripeAPI.Types.IssuingCardSpendingLimit
import StripeAPI.Types.IssuingCardholderCompany
import StripeAPI.Types.IssuingCardholderIndividualDob
import StripeAPI.Types.IssuingCardholderRequirements
import StripeAPI.Types.IssuingCardholderSpendingLimit
import StripeAPI.Types.LegalEntityDob
import StripeAPI.Types.LegalEntityJapanAddress
import StripeAPI.Types.LightAccountLogout
import StripeAPI.Types.LoginLink
import StripeAPI.Types.MandateMultiUse
import StripeAPI.Types.MandateSepaDebit
import StripeAPI.Types.MandateSingleUse
import StripeAPI.Types.NotificationEventData
import StripeAPI.Types.NotificationEventRequest
import StripeAPI.Types.OfflineAcceptance
import StripeAPI.Types.OnlineAcceptance
import StripeAPI.Types.PackageDimensions
import StripeAPI.Types.PaymentIntentNextActionRedirectToUrl
import StripeAPI.Types.PaymentMethodCardChecks
import StripeAPI.Types.PaymentMethodCardPresent
import StripeAPI.Types.PaymentMethodCardWalletAmexExpressCheckout
import StripeAPI.Types.PaymentMethodCardWalletApplePay
import StripeAPI.Types.PaymentMethodCardWalletGooglePay
import StripeAPI.Types.PaymentMethodCardWalletSamsungPay
import StripeAPI.Types.PaymentMethodDetailsAchCreditTransfer
import StripeAPI.Types.PaymentMethodDetailsAchDebit
import StripeAPI.Types.PaymentMethodDetailsAlipay
import StripeAPI.Types.PaymentMethodDetailsBancontact
import StripeAPI.Types.PaymentMethodDetailsCardChecks
import StripeAPI.Types.PaymentMethodDetailsCardInstallmentsPlan
import StripeAPI.Types.PaymentMethodDetailsCardPresentReceipt
import StripeAPI.Types.PaymentMethodDetailsCardWalletAmexExpressCheckout
import StripeAPI.Types.PaymentMethodDetailsCardWalletApplePay
import StripeAPI.Types.PaymentMethodDetailsCardWalletGooglePay
import StripeAPI.Types.PaymentMethodDetailsCardWalletSamsungPay
import StripeAPI.Types.PaymentMethodDetailsEps
import StripeAPI.Types.PaymentMethodDetailsFpx
import StripeAPI.Types.PaymentMethodDetailsGiropay
import StripeAPI.Types.PaymentMethodDetailsIdeal
import StripeAPI.Types.PaymentMethodDetailsKlarna
import StripeAPI.Types.PaymentMethodDetailsMultibanco
import StripeAPI.Types.PaymentMethodDetailsP24
import StripeAPI.Types.PaymentMethodDetailsSepaDebit
import StripeAPI.Types.PaymentMethodDetailsSofort
import StripeAPI.Types.PaymentMethodDetailsStripeAccount
import StripeAPI.Types.PaymentMethodDetailsWechat
import StripeAPI.Types.PaymentMethodFpx
import StripeAPI.Types.PaymentMethodIdeal
import StripeAPI.Types.PaymentMethodSepaDebit
import StripeAPI.Types.Period
import StripeAPI.Types.PersonRelationship
import StripeAPI.Types.PlanTier
import StripeAPI.Types.PlatformTaxFee
import StripeAPI.Types.RadarValueListItem
import StripeAPI.Types.RadarReviewResourceLocation
import StripeAPI.Types.RadarReviewResourceSession
import StripeAPI.Types.ReportingReportType
import StripeAPI.Types.ReserveTransaction
import StripeAPI.Types.Rule
import StripeAPI.Types.SetupIntentNextActionRedirectToUrl
import StripeAPI.Types.SetupIntentPaymentMethodOptionsCard
import StripeAPI.Types.SigmaScheduledQueryRunError
import StripeAPI.Types.SourceCodeVerificationFlow
import StripeAPI.Types.SourceMandateNotificationBacsDebitData
import StripeAPI.Types.SourceMandateNotificationSepaDebitData
import StripeAPI.Types.SourceOrderItem
import StripeAPI.Types.SourceReceiverFlow
import StripeAPI.Types.SourceRedirectFlow
import StripeAPI.Types.SourceTransactionAchCreditTransferData
import StripeAPI.Types.SourceTransactionChfCreditTransferData
import StripeAPI.Types.SourceTransactionGbpCreditTransferData
import StripeAPI.Types.SourceTransactionPaperCheckData
import StripeAPI.Types.SourceTransactionSepaCreditTransferData
import StripeAPI.Types.SourceTypeAchCreditTransfer
import StripeAPI.Types.SourceTypeAchDebit
import StripeAPI.Types.SourceTypeAlipay
import StripeAPI.Types.SourceTypeBancontact
import StripeAPI.Types.SourceTypeCard
import StripeAPI.Types.SourceTypeCardPresent
import StripeAPI.Types.SourceTypeEps
import StripeAPI.Types.SourceTypeGiropay
import StripeAPI.Types.SourceTypeIdeal
import StripeAPI.Types.SourceTypeKlarna
import StripeAPI.Types.SourceTypeMultibanco
import StripeAPI.Types.SourceTypeP24
import StripeAPI.Types.SourceTypeSepaDebit
import StripeAPI.Types.SourceTypeSofort
import StripeAPI.Types.SourceTypeThreeDSecure
import StripeAPI.Types.SourceTypeWechat
import StripeAPI.Types.StatusTransitions
import StripeAPI.Types.SubscriptionBillingThresholds
import StripeAPI.Types.SubscriptionItemBillingThresholds
import StripeAPI.Types.SubscriptionPendingInvoiceItemInterval
import StripeAPI.Types.SubscriptionScheduleCurrentPhase
import StripeAPI.Types.TaxDeductedAtSource
import StripeAPI.Types.TaxIdVerification
import StripeAPI.Types.TaxRate
import StripeAPI.Types.TerminalConnectionToken
import StripeAPI.Types.TerminalReader
import StripeAPI.Types.ThreeDSecureDetails
import StripeAPI.Types.ThreeDSecureUsage
import StripeAPI.Types.TransferSchedule
import StripeAPI.Types.TransformUsage
import StripeAPI.Types.UsageRecord
import StripeAPI.Types.WebhookEndpoint
import StripeAPI.Types.AccountCapabilityRequirements
import StripeAPI.Types.AccountCardPaymentsSettings
import StripeAPI.Types.AccountPayoutSettings
import StripeAPI.Types.AccountRequirements
import StripeAPI.Types.BalanceAmount
import StripeAPI.Types.BitcoinReceiver
import StripeAPI.Types.ChargeOutcome
import StripeAPI.Types.CountrySpecVerificationFields
import StripeAPI.Types.CreditNoteTaxAmount
import StripeAPI.Types.CustomerAcceptance
import StripeAPI.Types.InvoiceTaxAmount
import StripeAPI.Types.InvoiceThresholdReason
import StripeAPI.Types.IssuingAuthorizationRequest
import StripeAPI.Types.IssuingCardAuthorizationControls
import StripeAPI.Types.IssuingCardShipping
import StripeAPI.Types.IssuingCardholderAddress
import StripeAPI.Types.IssuingCardholderAuthorizationControls
import StripeAPI.Types.MandatePaymentMethodDetails
import StripeAPI.Types.PaymentIntentNextAction
import StripeAPI.Types.PersonRequirements
import StripeAPI.Types.RadarValueList
import StripeAPI.Types.SetupIntentNextAction
import StripeAPI.Types.SetupIntentPaymentMethodOptions
import StripeAPI.Types.Shipping
import StripeAPI.Types.SourceTransaction
import StripeAPI.Types.TerminalLocation
import StripeAPI.Types.UsageRecordSummary
import StripeAPI.Types.Balance
import StripeAPI.Types.CountrySpec
import StripeAPI.Types.CreditNoteLineItem
import StripeAPI.Types.SourceOrder

data Account
    = Account {accountBusinessProfile :: (GHC.Maybe.Maybe AccountBusinessProfile'),
               accountBusinessType :: (GHC.Maybe.Maybe AccountBusinessType'),
               accountCapabilities :: (GHC.Maybe.Maybe AccountCapabilities),
               accountChargesEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
               accountCompany :: (GHC.Maybe.Maybe LegalEntityCompany),
               accountCountry :: (GHC.Maybe.Maybe GHC.Base.String),
               accountCreated :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
               accountDefaultCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
               accountDetailsSubmitted :: (GHC.Maybe.Maybe GHC.Types.Bool),
               accountEmail :: (GHC.Maybe.Maybe GHC.Base.String),
               accountExternalAccounts :: (GHC.Maybe.Maybe AccountExternalAccounts'),
               accountId :: GHC.Base.String,
               accountIndividual :: (GHC.Maybe.Maybe Person),
               accountMetadata :: (GHC.Maybe.Maybe AccountMetadata'),
               accountObject :: AccountObject',
               accountPayoutsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
               accountRequirements :: (GHC.Maybe.Maybe AccountRequirements),
               accountSettings :: (GHC.Maybe.Maybe AccountSettings'),
               accountTosAcceptance :: (GHC.Maybe.Maybe AccountTosAcceptance),
               accountType :: (GHC.Maybe.Maybe AccountType')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data AccountBusinessProfile'
    = AccountBusinessProfile' {accountBusinessProfile'Mcc :: (GHC.Maybe.Maybe GHC.Base.String),
                               accountBusinessProfile'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                               accountBusinessProfile'ProductDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                               accountBusinessProfile'SupportAddress :: (GHC.Maybe.Maybe AccountBusinessProfile'SupportAddress'),
                               accountBusinessProfile'SupportEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                               accountBusinessProfile'SupportPhone :: (GHC.Maybe.Maybe GHC.Base.String),
                               accountBusinessProfile'SupportUrl :: (GHC.Maybe.Maybe GHC.Base.String),
                               accountBusinessProfile'Url :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data AccountBusinessProfile'SupportAddress'
    = AccountBusinessProfile'SupportAddress' {accountBusinessProfile'SupportAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                              accountBusinessProfile'SupportAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                              accountBusinessProfile'SupportAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                              accountBusinessProfile'SupportAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                              accountBusinessProfile'SupportAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                              accountBusinessProfile'SupportAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountBusinessProfile'SupportAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (accountBusinessProfile'SupportAddress'City obj) : (Data.Aeson..=) "country" (accountBusinessProfile'SupportAddress'Country obj) : (Data.Aeson..=) "line1" (accountBusinessProfile'SupportAddress'Line1 obj) : (Data.Aeson..=) "line2" (accountBusinessProfile'SupportAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (accountBusinessProfile'SupportAddress'PostalCode obj) : (Data.Aeson..=) "state" (accountBusinessProfile'SupportAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (accountBusinessProfile'SupportAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (accountBusinessProfile'SupportAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (accountBusinessProfile'SupportAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (accountBusinessProfile'SupportAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (accountBusinessProfile'SupportAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (accountBusinessProfile'SupportAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON AccountBusinessProfile'SupportAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBusinessProfile'SupportAddress'" (\obj -> (((((GHC.Base.pure AccountBusinessProfile'SupportAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON AccountBusinessProfile'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "mcc" (accountBusinessProfile'Mcc obj) : (Data.Aeson..=) "name" (accountBusinessProfile'Name obj) : (Data.Aeson..=) "product_description" (accountBusinessProfile'ProductDescription obj) : (Data.Aeson..=) "support_address" (accountBusinessProfile'SupportAddress obj) : (Data.Aeson..=) "support_email" (accountBusinessProfile'SupportEmail obj) : (Data.Aeson..=) "support_phone" (accountBusinessProfile'SupportPhone obj) : (Data.Aeson..=) "support_url" (accountBusinessProfile'SupportUrl obj) : (Data.Aeson..=) "url" (accountBusinessProfile'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "mcc" (accountBusinessProfile'Mcc obj) GHC.Base.<> ((Data.Aeson..=) "name" (accountBusinessProfile'Name obj) GHC.Base.<> ((Data.Aeson..=) "product_description" (accountBusinessProfile'ProductDescription obj) GHC.Base.<> ((Data.Aeson..=) "support_address" (accountBusinessProfile'SupportAddress obj) GHC.Base.<> ((Data.Aeson..=) "support_email" (accountBusinessProfile'SupportEmail obj) GHC.Base.<> ((Data.Aeson..=) "support_phone" (accountBusinessProfile'SupportPhone obj) GHC.Base.<> ((Data.Aeson..=) "support_url" (accountBusinessProfile'SupportUrl obj) GHC.Base.<> (Data.Aeson..=) "url" (accountBusinessProfile'Url obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON AccountBusinessProfile'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBusinessProfile'" (\obj -> (((((((GHC.Base.pure AccountBusinessProfile' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mcc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
data AccountBusinessType'
    = AccountBusinessType'EnumOther Data.Aeson.Types.Internal.Value
    | AccountBusinessType'EnumTyped GHC.Base.String
    | AccountBusinessType'EnumStringCompany
    | AccountBusinessType'EnumStringGovernmentEntity
    | AccountBusinessType'EnumStringIndividual
    | AccountBusinessType'EnumStringNonProfit
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountBusinessType'
    where toJSON (AccountBusinessType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountBusinessType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountBusinessType'EnumStringCompany) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "company"
          toJSON (AccountBusinessType'EnumStringGovernmentEntity) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_entity"
          toJSON (AccountBusinessType'EnumStringIndividual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual"
          toJSON (AccountBusinessType'EnumStringNonProfit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_profit"
instance Data.Aeson.FromJSON AccountBusinessType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "company")
                                          then AccountBusinessType'EnumStringCompany
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_entity")
                                                then AccountBusinessType'EnumStringGovernmentEntity
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual")
                                                      then AccountBusinessType'EnumStringIndividual
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_profit")
                                                            then AccountBusinessType'EnumStringNonProfit
                                                            else AccountBusinessType'EnumOther val)
data AccountExternalAccounts'
    = AccountExternalAccounts' {accountExternalAccounts'Data :: ([] AccountExternalAccounts'Data'),
                                accountExternalAccounts'HasMore :: GHC.Types.Bool,
                                accountExternalAccounts'Object :: AccountExternalAccounts'Object',
                                accountExternalAccounts'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data AccountExternalAccounts'Data'
    = AccountExternalAccounts'Data' {accountExternalAccounts'Data'Account :: (GHC.Maybe.Maybe AccountExternalAccounts'Data'Account'Variants),
                                     accountExternalAccounts'Data'AccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AddressCity :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AddressCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AddressLine1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AddressLine2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AddressState :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AddressZip :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AddressZipCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([] AccountExternalAccounts'Data'AvailablePayoutMethods')),
                                     accountExternalAccounts'Data'BankName :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Brand :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Customer :: (GHC.Maybe.Maybe AccountExternalAccounts'Data'Customer'Variants),
                                     accountExternalAccounts'Data'CvcCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                                     accountExternalAccounts'Data'DynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                     accountExternalAccounts'Data'ExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                     accountExternalAccounts'Data'Fingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Funding :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Last4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Metadata :: (GHC.Maybe.Maybe AccountExternalAccounts'Data'Metadata'),
                                     accountExternalAccounts'Data'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Object :: (GHC.Maybe.Maybe AccountExternalAccounts'Data'Object'),
                                     accountExternalAccounts'Data'Recipient :: (GHC.Maybe.Maybe AccountExternalAccounts'Data'Recipient'Variants),
                                     accountExternalAccounts'Data'RoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'Status :: (GHC.Maybe.Maybe GHC.Base.String),
                                     accountExternalAccounts'Data'TokenizationMethod :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data AccountExternalAccounts'Data'Account'Variants
    = AccountExternalAccounts'Data'Account'Variant1 Account
    | AccountExternalAccounts'Data'Account'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON AccountExternalAccounts'Data'Account'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON AccountExternalAccounts'Data'Account'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data AccountExternalAccounts'Data'AvailablePayoutMethods'
    = AccountExternalAccounts'Data'AvailablePayoutMethods'EnumOther Data.Aeson.Types.Internal.Value
    | AccountExternalAccounts'Data'AvailablePayoutMethods'EnumTyped GHC.Base.String
    | AccountExternalAccounts'Data'AvailablePayoutMethods'EnumStringInstant
    | AccountExternalAccounts'Data'AvailablePayoutMethods'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountExternalAccounts'Data'AvailablePayoutMethods'
    where toJSON (AccountExternalAccounts'Data'AvailablePayoutMethods'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountExternalAccounts'Data'AvailablePayoutMethods'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountExternalAccounts'Data'AvailablePayoutMethods'EnumStringInstant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant"
          toJSON (AccountExternalAccounts'Data'AvailablePayoutMethods'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON AccountExternalAccounts'Data'AvailablePayoutMethods'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant")
                                          then AccountExternalAccounts'Data'AvailablePayoutMethods'EnumStringInstant
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                then AccountExternalAccounts'Data'AvailablePayoutMethods'EnumStringStandard
                                                else AccountExternalAccounts'Data'AvailablePayoutMethods'EnumOther val)
data AccountExternalAccounts'Data'Customer'Variants
    = AccountExternalAccounts'Data'Customer'Variant1 Customer
    | AccountExternalAccounts'Data'Customer'Variant2 DeletedCustomer
    | AccountExternalAccounts'Data'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON AccountExternalAccounts'Data'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON AccountExternalAccounts'Data'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data AccountExternalAccounts'Data'Metadata'
    = AccountExternalAccounts'Data'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountExternalAccounts'Data'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountExternalAccounts'Data'Metadata'" (\obj -> GHC.Base.pure AccountExternalAccounts'Data'Metadata')
data AccountExternalAccounts'Data'Object'
    = AccountExternalAccounts'Data'Object'EnumOther Data.Aeson.Types.Internal.Value
    | AccountExternalAccounts'Data'Object'EnumTyped GHC.Base.String
    | AccountExternalAccounts'Data'Object'EnumStringBankAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountExternalAccounts'Data'Object'
    where toJSON (AccountExternalAccounts'Data'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountExternalAccounts'Data'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountExternalAccounts'Data'Object'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
instance Data.Aeson.FromJSON AccountExternalAccounts'Data'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then AccountExternalAccounts'Data'Object'EnumStringBankAccount
                                          else AccountExternalAccounts'Data'Object'EnumOther val)
data AccountExternalAccounts'Data'Recipient'Variants
    = AccountExternalAccounts'Data'Recipient'Variant1 Recipient
    | AccountExternalAccounts'Data'Recipient'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON AccountExternalAccounts'Data'Recipient'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON AccountExternalAccounts'Data'Recipient'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON AccountExternalAccounts'Data'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (accountExternalAccounts'Data'Account obj) : (Data.Aeson..=) "account_holder_name" (accountExternalAccounts'Data'AccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (accountExternalAccounts'Data'AccountHolderType obj) : (Data.Aeson..=) "address_city" (accountExternalAccounts'Data'AddressCity obj) : (Data.Aeson..=) "address_country" (accountExternalAccounts'Data'AddressCountry obj) : (Data.Aeson..=) "address_line1" (accountExternalAccounts'Data'AddressLine1 obj) : (Data.Aeson..=) "address_line1_check" (accountExternalAccounts'Data'AddressLine1Check obj) : (Data.Aeson..=) "address_line2" (accountExternalAccounts'Data'AddressLine2 obj) : (Data.Aeson..=) "address_state" (accountExternalAccounts'Data'AddressState obj) : (Data.Aeson..=) "address_zip" (accountExternalAccounts'Data'AddressZip obj) : (Data.Aeson..=) "address_zip_check" (accountExternalAccounts'Data'AddressZipCheck obj) : (Data.Aeson..=) "available_payout_methods" (accountExternalAccounts'Data'AvailablePayoutMethods obj) : (Data.Aeson..=) "bank_name" (accountExternalAccounts'Data'BankName obj) : (Data.Aeson..=) "brand" (accountExternalAccounts'Data'Brand obj) : (Data.Aeson..=) "country" (accountExternalAccounts'Data'Country obj) : (Data.Aeson..=) "currency" (accountExternalAccounts'Data'Currency obj) : (Data.Aeson..=) "customer" (accountExternalAccounts'Data'Customer obj) : (Data.Aeson..=) "cvc_check" (accountExternalAccounts'Data'CvcCheck obj) : (Data.Aeson..=) "default_for_currency" (accountExternalAccounts'Data'DefaultForCurrency obj) : (Data.Aeson..=) "dynamic_last4" (accountExternalAccounts'Data'DynamicLast4 obj) : (Data.Aeson..=) "exp_month" (accountExternalAccounts'Data'ExpMonth obj) : (Data.Aeson..=) "exp_year" (accountExternalAccounts'Data'ExpYear obj) : (Data.Aeson..=) "fingerprint" (accountExternalAccounts'Data'Fingerprint obj) : (Data.Aeson..=) "funding" (accountExternalAccounts'Data'Funding obj) : (Data.Aeson..=) "id" (accountExternalAccounts'Data'Id obj) : (Data.Aeson..=) "last4" (accountExternalAccounts'Data'Last4 obj) : (Data.Aeson..=) "metadata" (accountExternalAccounts'Data'Metadata obj) : (Data.Aeson..=) "name" (accountExternalAccounts'Data'Name obj) : (Data.Aeson..=) "object" (accountExternalAccounts'Data'Object obj) : (Data.Aeson..=) "recipient" (accountExternalAccounts'Data'Recipient obj) : (Data.Aeson..=) "routing_number" (accountExternalAccounts'Data'RoutingNumber obj) : (Data.Aeson..=) "status" (accountExternalAccounts'Data'Status obj) : (Data.Aeson..=) "tokenization_method" (accountExternalAccounts'Data'TokenizationMethod obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (accountExternalAccounts'Data'Account obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (accountExternalAccounts'Data'AccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (accountExternalAccounts'Data'AccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "address_city" (accountExternalAccounts'Data'AddressCity obj) GHC.Base.<> ((Data.Aeson..=) "address_country" (accountExternalAccounts'Data'AddressCountry obj) GHC.Base.<> ((Data.Aeson..=) "address_line1" (accountExternalAccounts'Data'AddressLine1 obj) GHC.Base.<> ((Data.Aeson..=) "address_line1_check" (accountExternalAccounts'Data'AddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_line2" (accountExternalAccounts'Data'AddressLine2 obj) GHC.Base.<> ((Data.Aeson..=) "address_state" (accountExternalAccounts'Data'AddressState obj) GHC.Base.<> ((Data.Aeson..=) "address_zip" (accountExternalAccounts'Data'AddressZip obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (accountExternalAccounts'Data'AddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "available_payout_methods" (accountExternalAccounts'Data'AvailablePayoutMethods obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (accountExternalAccounts'Data'BankName obj) GHC.Base.<> ((Data.Aeson..=) "brand" (accountExternalAccounts'Data'Brand obj) GHC.Base.<> ((Data.Aeson..=) "country" (accountExternalAccounts'Data'Country obj) GHC.Base.<> ((Data.Aeson..=) "currency" (accountExternalAccounts'Data'Currency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (accountExternalAccounts'Data'Customer obj) GHC.Base.<> ((Data.Aeson..=) "cvc_check" (accountExternalAccounts'Data'CvcCheck obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (accountExternalAccounts'Data'DefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (accountExternalAccounts'Data'DynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (accountExternalAccounts'Data'ExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (accountExternalAccounts'Data'ExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (accountExternalAccounts'Data'Fingerprint obj) GHC.Base.<> ((Data.Aeson..=) "funding" (accountExternalAccounts'Data'Funding obj) GHC.Base.<> ((Data.Aeson..=) "id" (accountExternalAccounts'Data'Id obj) GHC.Base.<> ((Data.Aeson..=) "last4" (accountExternalAccounts'Data'Last4 obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (accountExternalAccounts'Data'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "name" (accountExternalAccounts'Data'Name obj) GHC.Base.<> ((Data.Aeson..=) "object" (accountExternalAccounts'Data'Object obj) GHC.Base.<> ((Data.Aeson..=) "recipient" (accountExternalAccounts'Data'Recipient obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (accountExternalAccounts'Data'RoutingNumber obj) GHC.Base.<> ((Data.Aeson..=) "status" (accountExternalAccounts'Data'Status obj) GHC.Base.<> (Data.Aeson..=) "tokenization_method" (accountExternalAccounts'Data'TokenizationMethod obj)))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'Data'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountExternalAccounts'Data'" (\obj -> ((((((((((((((((((((((((((((((((GHC.Base.pure AccountExternalAccounts'Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method"))
data AccountExternalAccounts'Object'
    = AccountExternalAccounts'Object'EnumOther Data.Aeson.Types.Internal.Value
    | AccountExternalAccounts'Object'EnumTyped GHC.Base.String
    | AccountExternalAccounts'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountExternalAccounts'Object'
    where toJSON (AccountExternalAccounts'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountExternalAccounts'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountExternalAccounts'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON AccountExternalAccounts'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then AccountExternalAccounts'Object'EnumStringList
                                          else AccountExternalAccounts'Object'EnumOther val)
instance Data.Aeson.ToJSON AccountExternalAccounts'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (accountExternalAccounts'Data obj) : (Data.Aeson..=) "has_more" (accountExternalAccounts'HasMore obj) : (Data.Aeson..=) "object" (accountExternalAccounts'Object obj) : (Data.Aeson..=) "url" (accountExternalAccounts'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (accountExternalAccounts'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (accountExternalAccounts'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (accountExternalAccounts'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (accountExternalAccounts'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON AccountExternalAccounts'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountExternalAccounts'" (\obj -> (((GHC.Base.pure AccountExternalAccounts' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data AccountMetadata'
    = AccountMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON AccountMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountMetadata'" (\obj -> GHC.Base.pure AccountMetadata')
data AccountObject'
    = AccountObject'EnumOther Data.Aeson.Types.Internal.Value
    | AccountObject'EnumTyped GHC.Base.String
    | AccountObject'EnumStringAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountObject'
    where toJSON (AccountObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountObject'EnumStringAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account"
instance Data.Aeson.FromJSON AccountObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account")
                                          then AccountObject'EnumStringAccount
                                          else AccountObject'EnumOther val)
data AccountSettings'
    = AccountSettings' {accountSettings'Branding :: (GHC.Maybe.Maybe AccountBrandingSettings),
                        accountSettings'CardPayments :: (GHC.Maybe.Maybe AccountCardPaymentsSettings),
                        accountSettings'Dashboard :: (GHC.Maybe.Maybe AccountDashboardSettings),
                        accountSettings'Payments :: (GHC.Maybe.Maybe AccountPaymentsSettings),
                        accountSettings'Payouts :: (GHC.Maybe.Maybe AccountPayoutSettings)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountSettings'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "branding" (accountSettings'Branding obj) : (Data.Aeson..=) "card_payments" (accountSettings'CardPayments obj) : (Data.Aeson..=) "dashboard" (accountSettings'Dashboard obj) : (Data.Aeson..=) "payments" (accountSettings'Payments obj) : (Data.Aeson..=) "payouts" (accountSettings'Payouts obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "branding" (accountSettings'Branding obj) GHC.Base.<> ((Data.Aeson..=) "card_payments" (accountSettings'CardPayments obj) GHC.Base.<> ((Data.Aeson..=) "dashboard" (accountSettings'Dashboard obj) GHC.Base.<> ((Data.Aeson..=) "payments" (accountSettings'Payments obj) GHC.Base.<> (Data.Aeson..=) "payouts" (accountSettings'Payouts obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON AccountSettings'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountSettings'" (\obj -> ((((GHC.Base.pure AccountSettings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "branding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dashboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts"))
data AccountType'
    = AccountType'EnumOther Data.Aeson.Types.Internal.Value
    | AccountType'EnumTyped GHC.Base.String
    | AccountType'EnumStringCustom
    | AccountType'EnumStringExpress
    | AccountType'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountType'
    where toJSON (AccountType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AccountType'EnumStringCustom) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "custom"
          toJSON (AccountType'EnumStringExpress) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "express"
          toJSON (AccountType'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON AccountType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "custom")
                                          then AccountType'EnumStringCustom
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "express")
                                                then AccountType'EnumStringExpress
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                      then AccountType'EnumStringStandard
                                                      else AccountType'EnumOther val)
instance Data.Aeson.ToJSON Account
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "business_profile" (accountBusinessProfile obj) : (Data.Aeson..=) "business_type" (accountBusinessType obj) : (Data.Aeson..=) "capabilities" (accountCapabilities obj) : (Data.Aeson..=) "charges_enabled" (accountChargesEnabled obj) : (Data.Aeson..=) "company" (accountCompany obj) : (Data.Aeson..=) "country" (accountCountry obj) : (Data.Aeson..=) "created" (accountCreated obj) : (Data.Aeson..=) "default_currency" (accountDefaultCurrency obj) : (Data.Aeson..=) "details_submitted" (accountDetailsSubmitted obj) : (Data.Aeson..=) "email" (accountEmail obj) : (Data.Aeson..=) "external_accounts" (accountExternalAccounts obj) : (Data.Aeson..=) "id" (accountId obj) : (Data.Aeson..=) "individual" (accountIndividual obj) : (Data.Aeson..=) "metadata" (accountMetadata obj) : (Data.Aeson..=) "object" (accountObject obj) : (Data.Aeson..=) "payouts_enabled" (accountPayoutsEnabled obj) : (Data.Aeson..=) "requirements" (accountRequirements obj) : (Data.Aeson..=) "settings" (accountSettings obj) : (Data.Aeson..=) "tos_acceptance" (accountTosAcceptance obj) : (Data.Aeson..=) "type" (accountType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "business_profile" (accountBusinessProfile obj) GHC.Base.<> ((Data.Aeson..=) "business_type" (accountBusinessType obj) GHC.Base.<> ((Data.Aeson..=) "capabilities" (accountCapabilities obj) GHC.Base.<> ((Data.Aeson..=) "charges_enabled" (accountChargesEnabled obj) GHC.Base.<> ((Data.Aeson..=) "company" (accountCompany obj) GHC.Base.<> ((Data.Aeson..=) "country" (accountCountry obj) GHC.Base.<> ((Data.Aeson..=) "created" (accountCreated obj) GHC.Base.<> ((Data.Aeson..=) "default_currency" (accountDefaultCurrency obj) GHC.Base.<> ((Data.Aeson..=) "details_submitted" (accountDetailsSubmitted obj) GHC.Base.<> ((Data.Aeson..=) "email" (accountEmail obj) GHC.Base.<> ((Data.Aeson..=) "external_accounts" (accountExternalAccounts obj) GHC.Base.<> ((Data.Aeson..=) "id" (accountId obj) GHC.Base.<> ((Data.Aeson..=) "individual" (accountIndividual obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (accountMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (accountObject obj) GHC.Base.<> ((Data.Aeson..=) "payouts_enabled" (accountPayoutsEnabled obj) GHC.Base.<> ((Data.Aeson..=) "requirements" (accountRequirements obj) GHC.Base.<> ((Data.Aeson..=) "settings" (accountSettings obj) GHC.Base.<> ((Data.Aeson..=) "tos_acceptance" (accountTosAcceptance obj) GHC.Base.<> (Data.Aeson..=) "type" (accountType obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Account
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Account" (\obj -> (((((((((((((((((((GHC.Base.pure Account GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_profile")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "capabilities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charges_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details_submitted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "external_accounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "individual")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tos_acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
data AccountBrandingSettings
    = AccountBrandingSettings {accountBrandingSettingsIcon :: (GHC.Maybe.Maybe AccountBrandingSettingsIcon'Variants),
                               accountBrandingSettingsLogo :: (GHC.Maybe.Maybe AccountBrandingSettingsLogo'Variants),
                               accountBrandingSettingsPrimaryColor :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data AccountBrandingSettingsIcon'Variants
    = AccountBrandingSettingsIcon'Variant1 File
    | AccountBrandingSettingsIcon'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON AccountBrandingSettingsIcon'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON AccountBrandingSettingsIcon'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data AccountBrandingSettingsLogo'Variants
    = AccountBrandingSettingsLogo'Variant1 File
    | AccountBrandingSettingsLogo'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON AccountBrandingSettingsLogo'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON AccountBrandingSettingsLogo'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON AccountBrandingSettings
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "icon" (accountBrandingSettingsIcon obj) : (Data.Aeson..=) "logo" (accountBrandingSettingsLogo obj) : (Data.Aeson..=) "primary_color" (accountBrandingSettingsPrimaryColor obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "icon" (accountBrandingSettingsIcon obj) GHC.Base.<> ((Data.Aeson..=) "logo" (accountBrandingSettingsLogo obj) GHC.Base.<> (Data.Aeson..=) "primary_color" (accountBrandingSettingsPrimaryColor obj)))
instance Data.Aeson.Types.FromJSON.FromJSON AccountBrandingSettings
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBrandingSettings" (\obj -> ((GHC.Base.pure AccountBrandingSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "icon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "logo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "primary_color"))
data AccountBusinessProfile
    = AccountBusinessProfile {accountBusinessProfileMcc :: (GHC.Maybe.Maybe GHC.Base.String),
                              accountBusinessProfileName :: (GHC.Maybe.Maybe GHC.Base.String),
                              accountBusinessProfileProductDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                              accountBusinessProfileSupportAddress :: (GHC.Maybe.Maybe AccountBusinessProfileSupportAddress'),
                              accountBusinessProfileSupportEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                              accountBusinessProfileSupportPhone :: (GHC.Maybe.Maybe GHC.Base.String),
                              accountBusinessProfileSupportUrl :: (GHC.Maybe.Maybe GHC.Base.String),
                              accountBusinessProfileUrl :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data AccountBusinessProfileSupportAddress'
    = AccountBusinessProfileSupportAddress' {accountBusinessProfileSupportAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                             accountBusinessProfileSupportAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                             accountBusinessProfileSupportAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                             accountBusinessProfileSupportAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                             accountBusinessProfileSupportAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                             accountBusinessProfileSupportAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountBusinessProfileSupportAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (accountBusinessProfileSupportAddress'City obj) : (Data.Aeson..=) "country" (accountBusinessProfileSupportAddress'Country obj) : (Data.Aeson..=) "line1" (accountBusinessProfileSupportAddress'Line1 obj) : (Data.Aeson..=) "line2" (accountBusinessProfileSupportAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (accountBusinessProfileSupportAddress'PostalCode obj) : (Data.Aeson..=) "state" (accountBusinessProfileSupportAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (accountBusinessProfileSupportAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (accountBusinessProfileSupportAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (accountBusinessProfileSupportAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (accountBusinessProfileSupportAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (accountBusinessProfileSupportAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (accountBusinessProfileSupportAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON AccountBusinessProfileSupportAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBusinessProfileSupportAddress'" (\obj -> (((((GHC.Base.pure AccountBusinessProfileSupportAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON AccountBusinessProfile
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "mcc" (accountBusinessProfileMcc obj) : (Data.Aeson..=) "name" (accountBusinessProfileName obj) : (Data.Aeson..=) "product_description" (accountBusinessProfileProductDescription obj) : (Data.Aeson..=) "support_address" (accountBusinessProfileSupportAddress obj) : (Data.Aeson..=) "support_email" (accountBusinessProfileSupportEmail obj) : (Data.Aeson..=) "support_phone" (accountBusinessProfileSupportPhone obj) : (Data.Aeson..=) "support_url" (accountBusinessProfileSupportUrl obj) : (Data.Aeson..=) "url" (accountBusinessProfileUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "mcc" (accountBusinessProfileMcc obj) GHC.Base.<> ((Data.Aeson..=) "name" (accountBusinessProfileName obj) GHC.Base.<> ((Data.Aeson..=) "product_description" (accountBusinessProfileProductDescription obj) GHC.Base.<> ((Data.Aeson..=) "support_address" (accountBusinessProfileSupportAddress obj) GHC.Base.<> ((Data.Aeson..=) "support_email" (accountBusinessProfileSupportEmail obj) GHC.Base.<> ((Data.Aeson..=) "support_phone" (accountBusinessProfileSupportPhone obj) GHC.Base.<> ((Data.Aeson..=) "support_url" (accountBusinessProfileSupportUrl obj) GHC.Base.<> (Data.Aeson..=) "url" (accountBusinessProfileUrl obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON AccountBusinessProfile
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBusinessProfile" (\obj -> (((((((GHC.Base.pure AccountBusinessProfile GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mcc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
data AccountSettings
    = AccountSettings {accountSettingsBranding :: AccountBrandingSettings,
                       accountSettingsCardPayments :: AccountCardPaymentsSettings,
                       accountSettingsDashboard :: AccountDashboardSettings,
                       accountSettingsPayments :: AccountPaymentsSettings,
                       accountSettingsPayouts :: (GHC.Maybe.Maybe AccountPayoutSettings)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AccountSettings
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "branding" (accountSettingsBranding obj) : (Data.Aeson..=) "card_payments" (accountSettingsCardPayments obj) : (Data.Aeson..=) "dashboard" (accountSettingsDashboard obj) : (Data.Aeson..=) "payments" (accountSettingsPayments obj) : (Data.Aeson..=) "payouts" (accountSettingsPayouts obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "branding" (accountSettingsBranding obj) GHC.Base.<> ((Data.Aeson..=) "card_payments" (accountSettingsCardPayments obj) GHC.Base.<> ((Data.Aeson..=) "dashboard" (accountSettingsDashboard obj) GHC.Base.<> ((Data.Aeson..=) "payments" (accountSettingsPayments obj) GHC.Base.<> (Data.Aeson..=) "payouts" (accountSettingsPayouts obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON AccountSettings
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountSettings" (\obj -> ((((GHC.Base.pure AccountSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "branding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dashboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts"))
data AlipayAccount
    = AlipayAccount {alipayAccountCreated :: GHC.Integer.Type.Integer,
                     alipayAccountCustomer :: (GHC.Maybe.Maybe AlipayAccountCustomer'Variants),
                     alipayAccountFingerprint :: GHC.Base.String,
                     alipayAccountId :: GHC.Base.String,
                     alipayAccountLivemode :: GHC.Types.Bool,
                     alipayAccountMetadata :: (GHC.Maybe.Maybe AlipayAccountMetadata'),
                     alipayAccountObject :: AlipayAccountObject',
                     alipayAccountPaymentAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     alipayAccountPaymentCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                     alipayAccountReusable :: GHC.Types.Bool,
                     alipayAccountUsed :: GHC.Types.Bool,
                     alipayAccountUsername :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data AlipayAccountCustomer'Variants
    = AlipayAccountCustomer'Variant1 Customer
    | AlipayAccountCustomer'Variant2 DeletedCustomer
    | AlipayAccountCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON AlipayAccountCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON AlipayAccountCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data AlipayAccountMetadata'
    = AlipayAccountMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AlipayAccountMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON AlipayAccountMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AlipayAccountMetadata'" (\obj -> GHC.Base.pure AlipayAccountMetadata')
data AlipayAccountObject'
    = AlipayAccountObject'EnumOther Data.Aeson.Types.Internal.Value
    | AlipayAccountObject'EnumTyped GHC.Base.String
    | AlipayAccountObject'EnumStringAlipayAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON AlipayAccountObject'
    where toJSON (AlipayAccountObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AlipayAccountObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (AlipayAccountObject'EnumStringAlipayAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay_account"
instance Data.Aeson.FromJSON AlipayAccountObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay_account")
                                          then AlipayAccountObject'EnumStringAlipayAccount
                                          else AlipayAccountObject'EnumOther val)
instance Data.Aeson.ToJSON AlipayAccount
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (alipayAccountCreated obj) : (Data.Aeson..=) "customer" (alipayAccountCustomer obj) : (Data.Aeson..=) "fingerprint" (alipayAccountFingerprint obj) : (Data.Aeson..=) "id" (alipayAccountId obj) : (Data.Aeson..=) "livemode" (alipayAccountLivemode obj) : (Data.Aeson..=) "metadata" (alipayAccountMetadata obj) : (Data.Aeson..=) "object" (alipayAccountObject obj) : (Data.Aeson..=) "payment_amount" (alipayAccountPaymentAmount obj) : (Data.Aeson..=) "payment_currency" (alipayAccountPaymentCurrency obj) : (Data.Aeson..=) "reusable" (alipayAccountReusable obj) : (Data.Aeson..=) "used" (alipayAccountUsed obj) : (Data.Aeson..=) "username" (alipayAccountUsername obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (alipayAccountCreated obj) GHC.Base.<> ((Data.Aeson..=) "customer" (alipayAccountCustomer obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (alipayAccountFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "id" (alipayAccountId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (alipayAccountLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (alipayAccountMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (alipayAccountObject obj) GHC.Base.<> ((Data.Aeson..=) "payment_amount" (alipayAccountPaymentAmount obj) GHC.Base.<> ((Data.Aeson..=) "payment_currency" (alipayAccountPaymentCurrency obj) GHC.Base.<> ((Data.Aeson..=) "reusable" (alipayAccountReusable obj) GHC.Base.<> ((Data.Aeson..=) "used" (alipayAccountUsed obj) GHC.Base.<> (Data.Aeson..=) "username" (alipayAccountUsername obj))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON AlipayAccount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "AlipayAccount" (\obj -> (((((((((((GHC.Base.pure AlipayAccount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reusable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "used")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "username"))
data ApiErrors
    = ApiErrors {apiErrorsCharge :: (GHC.Maybe.Maybe GHC.Base.String),
                 apiErrorsCode :: (GHC.Maybe.Maybe GHC.Base.String),
                 apiErrorsDeclineCode :: (GHC.Maybe.Maybe GHC.Base.String),
                 apiErrorsDocUrl :: (GHC.Maybe.Maybe GHC.Base.String),
                 apiErrorsMessage :: (GHC.Maybe.Maybe GHC.Base.String),
                 apiErrorsParam :: (GHC.Maybe.Maybe GHC.Base.String),
                 apiErrorsPaymentIntent :: (GHC.Maybe.Maybe PaymentIntent),
                 apiErrorsPaymentMethod :: (GHC.Maybe.Maybe PaymentMethod),
                 apiErrorsSetupIntent :: (GHC.Maybe.Maybe SetupIntent),
                 apiErrorsSource :: (GHC.Maybe.Maybe ApiErrorsSource'),
                 apiErrorsType :: ApiErrorsType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ApiErrorsSource'
    = ApiErrorsSource' {apiErrorsSource'Account :: (GHC.Maybe.Maybe ApiErrorsSource'Account'Variants),
                        apiErrorsSource'AccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'AccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'AchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
                        apiErrorsSource'AchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
                        apiErrorsSource'AddressCity :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'AddressCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'AddressLine1 :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'AddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'AddressLine2 :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'AddressState :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'AddressZip :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'AddressZipCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Alipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
                        apiErrorsSource'Amount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        apiErrorsSource'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([] ApiErrorsSource'AvailablePayoutMethods')),
                        apiErrorsSource'Bancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
                        apiErrorsSource'BankName :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Brand :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Card :: (GHC.Maybe.Maybe SourceTypeCard),
                        apiErrorsSource'CardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
                        apiErrorsSource'ClientSecret :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'CodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
                        apiErrorsSource'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        apiErrorsSource'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Customer :: (GHC.Maybe.Maybe ApiErrorsSource'Customer'Variants),
                        apiErrorsSource'CvcCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                        apiErrorsSource'DynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Eps :: (GHC.Maybe.Maybe SourceTypeEps),
                        apiErrorsSource'ExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        apiErrorsSource'ExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        apiErrorsSource'Fingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Flow :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Funding :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Giropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
                        apiErrorsSource'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Ideal :: (GHC.Maybe.Maybe SourceTypeIdeal),
                        apiErrorsSource'Klarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
                        apiErrorsSource'Last4 :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
                        apiErrorsSource'Metadata :: (GHC.Maybe.Maybe ApiErrorsSource'Metadata'),
                        apiErrorsSource'Multibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
                        apiErrorsSource'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Object :: (GHC.Maybe.Maybe ApiErrorsSource'Object'),
                        apiErrorsSource'Owner :: (GHC.Maybe.Maybe ApiErrorsSource'Owner'),
                        apiErrorsSource'P24 :: (GHC.Maybe.Maybe SourceTypeP24),
                        apiErrorsSource'Receiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
                        apiErrorsSource'Recipient :: (GHC.Maybe.Maybe ApiErrorsSource'Recipient'Variants),
                        apiErrorsSource'Redirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
                        apiErrorsSource'RoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'SepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
                        apiErrorsSource'Sofort :: (GHC.Maybe.Maybe SourceTypeSofort),
                        apiErrorsSource'SourceOrder :: (GHC.Maybe.Maybe SourceOrder),
                        apiErrorsSource'StatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Status :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'ThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
                        apiErrorsSource'TokenizationMethod :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Type :: (GHC.Maybe.Maybe ApiErrorsSource'Type'),
                        apiErrorsSource'Usage :: (GHC.Maybe.Maybe GHC.Base.String),
                        apiErrorsSource'Wechat :: (GHC.Maybe.Maybe SourceTypeWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ApiErrorsSource'Account'Variants
    = ApiErrorsSource'Account'Variant1 Account
    | ApiErrorsSource'Account'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ApiErrorsSource'Account'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ApiErrorsSource'Account'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ApiErrorsSource'AvailablePayoutMethods'
    = ApiErrorsSource'AvailablePayoutMethods'EnumOther Data.Aeson.Types.Internal.Value
    | ApiErrorsSource'AvailablePayoutMethods'EnumTyped GHC.Base.String
    | ApiErrorsSource'AvailablePayoutMethods'EnumStringInstant
    | ApiErrorsSource'AvailablePayoutMethods'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ApiErrorsSource'AvailablePayoutMethods'
    where toJSON (ApiErrorsSource'AvailablePayoutMethods'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApiErrorsSource'AvailablePayoutMethods'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApiErrorsSource'AvailablePayoutMethods'EnumStringInstant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant"
          toJSON (ApiErrorsSource'AvailablePayoutMethods'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON ApiErrorsSource'AvailablePayoutMethods'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant")
                                          then ApiErrorsSource'AvailablePayoutMethods'EnumStringInstant
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                then ApiErrorsSource'AvailablePayoutMethods'EnumStringStandard
                                                else ApiErrorsSource'AvailablePayoutMethods'EnumOther val)
data ApiErrorsSource'Customer'Variants
    = ApiErrorsSource'Customer'Variant1 Customer
    | ApiErrorsSource'Customer'Variant2 DeletedCustomer
    | ApiErrorsSource'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ApiErrorsSource'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ApiErrorsSource'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ApiErrorsSource'Metadata'
    = ApiErrorsSource'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ApiErrorsSource'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON ApiErrorsSource'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApiErrorsSource'Metadata'" (\obj -> GHC.Base.pure ApiErrorsSource'Metadata')
data ApiErrorsSource'Object'
    = ApiErrorsSource'Object'EnumOther Data.Aeson.Types.Internal.Value
    | ApiErrorsSource'Object'EnumTyped GHC.Base.String
    | ApiErrorsSource'Object'EnumStringBankAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ApiErrorsSource'Object'
    where toJSON (ApiErrorsSource'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApiErrorsSource'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApiErrorsSource'Object'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
instance Data.Aeson.FromJSON ApiErrorsSource'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then ApiErrorsSource'Object'EnumStringBankAccount
                                          else ApiErrorsSource'Object'EnumOther val)
data ApiErrorsSource'Owner'
    = ApiErrorsSource'Owner' {apiErrorsSource'Owner'Address :: (GHC.Maybe.Maybe ApiErrorsSource'Owner'Address'),
                              apiErrorsSource'Owner'Email :: (GHC.Maybe.Maybe GHC.Base.String),
                              apiErrorsSource'Owner'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                              apiErrorsSource'Owner'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                              apiErrorsSource'Owner'VerifiedAddress :: (GHC.Maybe.Maybe ApiErrorsSource'Owner'VerifiedAddress'),
                              apiErrorsSource'Owner'VerifiedEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                              apiErrorsSource'Owner'VerifiedName :: (GHC.Maybe.Maybe GHC.Base.String),
                              apiErrorsSource'Owner'VerifiedPhone :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ApiErrorsSource'Owner'Address'
    = ApiErrorsSource'Owner'Address' {apiErrorsSource'Owner'Address'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                      apiErrorsSource'Owner'Address'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                      apiErrorsSource'Owner'Address'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                      apiErrorsSource'Owner'Address'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                      apiErrorsSource'Owner'Address'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                      apiErrorsSource'Owner'Address'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ApiErrorsSource'Owner'Address'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (apiErrorsSource'Owner'Address'City obj) : (Data.Aeson..=) "country" (apiErrorsSource'Owner'Address'Country obj) : (Data.Aeson..=) "line1" (apiErrorsSource'Owner'Address'Line1 obj) : (Data.Aeson..=) "line2" (apiErrorsSource'Owner'Address'Line2 obj) : (Data.Aeson..=) "postal_code" (apiErrorsSource'Owner'Address'PostalCode obj) : (Data.Aeson..=) "state" (apiErrorsSource'Owner'Address'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (apiErrorsSource'Owner'Address'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (apiErrorsSource'Owner'Address'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (apiErrorsSource'Owner'Address'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (apiErrorsSource'Owner'Address'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (apiErrorsSource'Owner'Address'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (apiErrorsSource'Owner'Address'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON ApiErrorsSource'Owner'Address'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApiErrorsSource'Owner'Address'" (\obj -> (((((GHC.Base.pure ApiErrorsSource'Owner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data ApiErrorsSource'Owner'VerifiedAddress'
    = ApiErrorsSource'Owner'VerifiedAddress' {apiErrorsSource'Owner'VerifiedAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                              apiErrorsSource'Owner'VerifiedAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                              apiErrorsSource'Owner'VerifiedAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                              apiErrorsSource'Owner'VerifiedAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                              apiErrorsSource'Owner'VerifiedAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                              apiErrorsSource'Owner'VerifiedAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ApiErrorsSource'Owner'VerifiedAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (apiErrorsSource'Owner'VerifiedAddress'City obj) : (Data.Aeson..=) "country" (apiErrorsSource'Owner'VerifiedAddress'Country obj) : (Data.Aeson..=) "line1" (apiErrorsSource'Owner'VerifiedAddress'Line1 obj) : (Data.Aeson..=) "line2" (apiErrorsSource'Owner'VerifiedAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (apiErrorsSource'Owner'VerifiedAddress'PostalCode obj) : (Data.Aeson..=) "state" (apiErrorsSource'Owner'VerifiedAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (apiErrorsSource'Owner'VerifiedAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (apiErrorsSource'Owner'VerifiedAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (apiErrorsSource'Owner'VerifiedAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (apiErrorsSource'Owner'VerifiedAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (apiErrorsSource'Owner'VerifiedAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (apiErrorsSource'Owner'VerifiedAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON ApiErrorsSource'Owner'VerifiedAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApiErrorsSource'Owner'VerifiedAddress'" (\obj -> (((((GHC.Base.pure ApiErrorsSource'Owner'VerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON ApiErrorsSource'Owner'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (apiErrorsSource'Owner'Address obj) : (Data.Aeson..=) "email" (apiErrorsSource'Owner'Email obj) : (Data.Aeson..=) "name" (apiErrorsSource'Owner'Name obj) : (Data.Aeson..=) "phone" (apiErrorsSource'Owner'Phone obj) : (Data.Aeson..=) "verified_address" (apiErrorsSource'Owner'VerifiedAddress obj) : (Data.Aeson..=) "verified_email" (apiErrorsSource'Owner'VerifiedEmail obj) : (Data.Aeson..=) "verified_name" (apiErrorsSource'Owner'VerifiedName obj) : (Data.Aeson..=) "verified_phone" (apiErrorsSource'Owner'VerifiedPhone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (apiErrorsSource'Owner'Address obj) GHC.Base.<> ((Data.Aeson..=) "email" (apiErrorsSource'Owner'Email obj) GHC.Base.<> ((Data.Aeson..=) "name" (apiErrorsSource'Owner'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (apiErrorsSource'Owner'Phone obj) GHC.Base.<> ((Data.Aeson..=) "verified_address" (apiErrorsSource'Owner'VerifiedAddress obj) GHC.Base.<> ((Data.Aeson..=) "verified_email" (apiErrorsSource'Owner'VerifiedEmail obj) GHC.Base.<> ((Data.Aeson..=) "verified_name" (apiErrorsSource'Owner'VerifiedName obj) GHC.Base.<> (Data.Aeson..=) "verified_phone" (apiErrorsSource'Owner'VerifiedPhone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ApiErrorsSource'Owner'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApiErrorsSource'Owner'" (\obj -> (((((((GHC.Base.pure ApiErrorsSource'Owner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))
data ApiErrorsSource'Recipient'Variants
    = ApiErrorsSource'Recipient'Variant1 Recipient
    | ApiErrorsSource'Recipient'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ApiErrorsSource'Recipient'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ApiErrorsSource'Recipient'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ApiErrorsSource'Type'
    = ApiErrorsSource'Type'EnumOther Data.Aeson.Types.Internal.Value
    | ApiErrorsSource'Type'EnumTyped GHC.Base.String
    | ApiErrorsSource'Type'EnumStringAchCreditTransfer
    | ApiErrorsSource'Type'EnumStringAchDebit
    | ApiErrorsSource'Type'EnumStringAlipay
    | ApiErrorsSource'Type'EnumStringBancontact
    | ApiErrorsSource'Type'EnumStringCard
    | ApiErrorsSource'Type'EnumStringCardPresent
    | ApiErrorsSource'Type'EnumStringEps
    | ApiErrorsSource'Type'EnumStringGiropay
    | ApiErrorsSource'Type'EnumStringIdeal
    | ApiErrorsSource'Type'EnumStringKlarna
    | ApiErrorsSource'Type'EnumStringMultibanco
    | ApiErrorsSource'Type'EnumStringP24
    | ApiErrorsSource'Type'EnumStringSepaDebit
    | ApiErrorsSource'Type'EnumStringSofort
    | ApiErrorsSource'Type'EnumStringThreeDSecure
    | ApiErrorsSource'Type'EnumStringWechat
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ApiErrorsSource'Type'
    where toJSON (ApiErrorsSource'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApiErrorsSource'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApiErrorsSource'Type'EnumStringAchCreditTransfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer"
          toJSON (ApiErrorsSource'Type'EnumStringAchDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit"
          toJSON (ApiErrorsSource'Type'EnumStringAlipay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay"
          toJSON (ApiErrorsSource'Type'EnumStringBancontact) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact"
          toJSON (ApiErrorsSource'Type'EnumStringCard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card"
          toJSON (ApiErrorsSource'Type'EnumStringCardPresent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present"
          toJSON (ApiErrorsSource'Type'EnumStringEps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps"
          toJSON (ApiErrorsSource'Type'EnumStringGiropay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay"
          toJSON (ApiErrorsSource'Type'EnumStringIdeal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal"
          toJSON (ApiErrorsSource'Type'EnumStringKlarna) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna"
          toJSON (ApiErrorsSource'Type'EnumStringMultibanco) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco"
          toJSON (ApiErrorsSource'Type'EnumStringP24) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24"
          toJSON (ApiErrorsSource'Type'EnumStringSepaDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit"
          toJSON (ApiErrorsSource'Type'EnumStringSofort) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort"
          toJSON (ApiErrorsSource'Type'EnumStringThreeDSecure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure"
          toJSON (ApiErrorsSource'Type'EnumStringWechat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat"
instance Data.Aeson.FromJSON ApiErrorsSource'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer")
                                          then ApiErrorsSource'Type'EnumStringAchCreditTransfer
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit")
                                                then ApiErrorsSource'Type'EnumStringAchDebit
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay")
                                                      then ApiErrorsSource'Type'EnumStringAlipay
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact")
                                                            then ApiErrorsSource'Type'EnumStringBancontact
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card")
                                                                  then ApiErrorsSource'Type'EnumStringCard
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present")
                                                                        then ApiErrorsSource'Type'EnumStringCardPresent
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps")
                                                                              then ApiErrorsSource'Type'EnumStringEps
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay")
                                                                                    then ApiErrorsSource'Type'EnumStringGiropay
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal")
                                                                                          then ApiErrorsSource'Type'EnumStringIdeal
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna")
                                                                                                then ApiErrorsSource'Type'EnumStringKlarna
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco")
                                                                                                      then ApiErrorsSource'Type'EnumStringMultibanco
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24")
                                                                                                            then ApiErrorsSource'Type'EnumStringP24
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit")
                                                                                                                  then ApiErrorsSource'Type'EnumStringSepaDebit
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort")
                                                                                                                        then ApiErrorsSource'Type'EnumStringSofort
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure")
                                                                                                                              then ApiErrorsSource'Type'EnumStringThreeDSecure
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat")
                                                                                                                                    then ApiErrorsSource'Type'EnumStringWechat
                                                                                                                                    else ApiErrorsSource'Type'EnumOther val)
instance Data.Aeson.ToJSON ApiErrorsSource'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (apiErrorsSource'Account obj) : (Data.Aeson..=) "account_holder_name" (apiErrorsSource'AccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (apiErrorsSource'AccountHolderType obj) : (Data.Aeson..=) "ach_credit_transfer" (apiErrorsSource'AchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (apiErrorsSource'AchDebit obj) : (Data.Aeson..=) "address_city" (apiErrorsSource'AddressCity obj) : (Data.Aeson..=) "address_country" (apiErrorsSource'AddressCountry obj) : (Data.Aeson..=) "address_line1" (apiErrorsSource'AddressLine1 obj) : (Data.Aeson..=) "address_line1_check" (apiErrorsSource'AddressLine1Check obj) : (Data.Aeson..=) "address_line2" (apiErrorsSource'AddressLine2 obj) : (Data.Aeson..=) "address_state" (apiErrorsSource'AddressState obj) : (Data.Aeson..=) "address_zip" (apiErrorsSource'AddressZip obj) : (Data.Aeson..=) "address_zip_check" (apiErrorsSource'AddressZipCheck obj) : (Data.Aeson..=) "alipay" (apiErrorsSource'Alipay obj) : (Data.Aeson..=) "amount" (apiErrorsSource'Amount obj) : (Data.Aeson..=) "available_payout_methods" (apiErrorsSource'AvailablePayoutMethods obj) : (Data.Aeson..=) "bancontact" (apiErrorsSource'Bancontact obj) : (Data.Aeson..=) "bank_name" (apiErrorsSource'BankName obj) : (Data.Aeson..=) "brand" (apiErrorsSource'Brand obj) : (Data.Aeson..=) "card" (apiErrorsSource'Card obj) : (Data.Aeson..=) "card_present" (apiErrorsSource'CardPresent obj) : (Data.Aeson..=) "client_secret" (apiErrorsSource'ClientSecret obj) : (Data.Aeson..=) "code_verification" (apiErrorsSource'CodeVerification obj) : (Data.Aeson..=) "country" (apiErrorsSource'Country obj) : (Data.Aeson..=) "created" (apiErrorsSource'Created obj) : (Data.Aeson..=) "currency" (apiErrorsSource'Currency obj) : (Data.Aeson..=) "customer" (apiErrorsSource'Customer obj) : (Data.Aeson..=) "cvc_check" (apiErrorsSource'CvcCheck obj) : (Data.Aeson..=) "default_for_currency" (apiErrorsSource'DefaultForCurrency obj) : (Data.Aeson..=) "dynamic_last4" (apiErrorsSource'DynamicLast4 obj) : (Data.Aeson..=) "eps" (apiErrorsSource'Eps obj) : (Data.Aeson..=) "exp_month" (apiErrorsSource'ExpMonth obj) : (Data.Aeson..=) "exp_year" (apiErrorsSource'ExpYear obj) : (Data.Aeson..=) "fingerprint" (apiErrorsSource'Fingerprint obj) : (Data.Aeson..=) "flow" (apiErrorsSource'Flow obj) : (Data.Aeson..=) "funding" (apiErrorsSource'Funding obj) : (Data.Aeson..=) "giropay" (apiErrorsSource'Giropay obj) : (Data.Aeson..=) "id" (apiErrorsSource'Id obj) : (Data.Aeson..=) "ideal" (apiErrorsSource'Ideal obj) : (Data.Aeson..=) "klarna" (apiErrorsSource'Klarna obj) : (Data.Aeson..=) "last4" (apiErrorsSource'Last4 obj) : (Data.Aeson..=) "livemode" (apiErrorsSource'Livemode obj) : (Data.Aeson..=) "metadata" (apiErrorsSource'Metadata obj) : (Data.Aeson..=) "multibanco" (apiErrorsSource'Multibanco obj) : (Data.Aeson..=) "name" (apiErrorsSource'Name obj) : (Data.Aeson..=) "object" (apiErrorsSource'Object obj) : (Data.Aeson..=) "owner" (apiErrorsSource'Owner obj) : (Data.Aeson..=) "p24" (apiErrorsSource'P24 obj) : (Data.Aeson..=) "receiver" (apiErrorsSource'Receiver obj) : (Data.Aeson..=) "recipient" (apiErrorsSource'Recipient obj) : (Data.Aeson..=) "redirect" (apiErrorsSource'Redirect obj) : (Data.Aeson..=) "routing_number" (apiErrorsSource'RoutingNumber obj) : (Data.Aeson..=) "sepa_debit" (apiErrorsSource'SepaDebit obj) : (Data.Aeson..=) "sofort" (apiErrorsSource'Sofort obj) : (Data.Aeson..=) "source_order" (apiErrorsSource'SourceOrder obj) : (Data.Aeson..=) "statement_descriptor" (apiErrorsSource'StatementDescriptor obj) : (Data.Aeson..=) "status" (apiErrorsSource'Status obj) : (Data.Aeson..=) "three_d_secure" (apiErrorsSource'ThreeDSecure obj) : (Data.Aeson..=) "tokenization_method" (apiErrorsSource'TokenizationMethod obj) : (Data.Aeson..=) "type" (apiErrorsSource'Type obj) : (Data.Aeson..=) "usage" (apiErrorsSource'Usage obj) : (Data.Aeson..=) "wechat" (apiErrorsSource'Wechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (apiErrorsSource'Account obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (apiErrorsSource'AccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (apiErrorsSource'AccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "ach_credit_transfer" (apiErrorsSource'AchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (apiErrorsSource'AchDebit obj) GHC.Base.<> ((Data.Aeson..=) "address_city" (apiErrorsSource'AddressCity obj) GHC.Base.<> ((Data.Aeson..=) "address_country" (apiErrorsSource'AddressCountry obj) GHC.Base.<> ((Data.Aeson..=) "address_line1" (apiErrorsSource'AddressLine1 obj) GHC.Base.<> ((Data.Aeson..=) "address_line1_check" (apiErrorsSource'AddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_line2" (apiErrorsSource'AddressLine2 obj) GHC.Base.<> ((Data.Aeson..=) "address_state" (apiErrorsSource'AddressState obj) GHC.Base.<> ((Data.Aeson..=) "address_zip" (apiErrorsSource'AddressZip obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (apiErrorsSource'AddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (apiErrorsSource'Alipay obj) GHC.Base.<> ((Data.Aeson..=) "amount" (apiErrorsSource'Amount obj) GHC.Base.<> ((Data.Aeson..=) "available_payout_methods" (apiErrorsSource'AvailablePayoutMethods obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (apiErrorsSource'Bancontact obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (apiErrorsSource'BankName obj) GHC.Base.<> ((Data.Aeson..=) "brand" (apiErrorsSource'Brand obj) GHC.Base.<> ((Data.Aeson..=) "card" (apiErrorsSource'Card obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (apiErrorsSource'CardPresent obj) GHC.Base.<> ((Data.Aeson..=) "client_secret" (apiErrorsSource'ClientSecret obj) GHC.Base.<> ((Data.Aeson..=) "code_verification" (apiErrorsSource'CodeVerification obj) GHC.Base.<> ((Data.Aeson..=) "country" (apiErrorsSource'Country obj) GHC.Base.<> ((Data.Aeson..=) "created" (apiErrorsSource'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (apiErrorsSource'Currency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (apiErrorsSource'Customer obj) GHC.Base.<> ((Data.Aeson..=) "cvc_check" (apiErrorsSource'CvcCheck obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (apiErrorsSource'DefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (apiErrorsSource'DynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "eps" (apiErrorsSource'Eps obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (apiErrorsSource'ExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (apiErrorsSource'ExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (apiErrorsSource'Fingerprint obj) GHC.Base.<> ((Data.Aeson..=) "flow" (apiErrorsSource'Flow obj) GHC.Base.<> ((Data.Aeson..=) "funding" (apiErrorsSource'Funding obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (apiErrorsSource'Giropay obj) GHC.Base.<> ((Data.Aeson..=) "id" (apiErrorsSource'Id obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (apiErrorsSource'Ideal obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (apiErrorsSource'Klarna obj) GHC.Base.<> ((Data.Aeson..=) "last4" (apiErrorsSource'Last4 obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (apiErrorsSource'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (apiErrorsSource'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (apiErrorsSource'Multibanco obj) GHC.Base.<> ((Data.Aeson..=) "name" (apiErrorsSource'Name obj) GHC.Base.<> ((Data.Aeson..=) "object" (apiErrorsSource'Object obj) GHC.Base.<> ((Data.Aeson..=) "owner" (apiErrorsSource'Owner obj) GHC.Base.<> ((Data.Aeson..=) "p24" (apiErrorsSource'P24 obj) GHC.Base.<> ((Data.Aeson..=) "receiver" (apiErrorsSource'Receiver obj) GHC.Base.<> ((Data.Aeson..=) "recipient" (apiErrorsSource'Recipient obj) GHC.Base.<> ((Data.Aeson..=) "redirect" (apiErrorsSource'Redirect obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (apiErrorsSource'RoutingNumber obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (apiErrorsSource'SepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (apiErrorsSource'Sofort obj) GHC.Base.<> ((Data.Aeson..=) "source_order" (apiErrorsSource'SourceOrder obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (apiErrorsSource'StatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (apiErrorsSource'Status obj) GHC.Base.<> ((Data.Aeson..=) "three_d_secure" (apiErrorsSource'ThreeDSecure obj) GHC.Base.<> ((Data.Aeson..=) "tokenization_method" (apiErrorsSource'TokenizationMethod obj) GHC.Base.<> ((Data.Aeson..=) "type" (apiErrorsSource'Type obj) GHC.Base.<> ((Data.Aeson..=) "usage" (apiErrorsSource'Usage obj) GHC.Base.<> (Data.Aeson..=) "wechat" (apiErrorsSource'Wechat obj))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ApiErrorsSource'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApiErrorsSource'" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure ApiErrorsSource' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
data ApiErrorsType'
    = ApiErrorsType'EnumOther Data.Aeson.Types.Internal.Value
    | ApiErrorsType'EnumTyped GHC.Base.String
    | ApiErrorsType'EnumStringApiConnectionError
    | ApiErrorsType'EnumStringApiError
    | ApiErrorsType'EnumStringAuthenticationError
    | ApiErrorsType'EnumStringCardError
    | ApiErrorsType'EnumStringIdempotencyError
    | ApiErrorsType'EnumStringInvalidRequestError
    | ApiErrorsType'EnumStringRateLimitError
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ApiErrorsType'
    where toJSON (ApiErrorsType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApiErrorsType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApiErrorsType'EnumStringApiConnectionError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_connection_error"
          toJSON (ApiErrorsType'EnumStringApiError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_error"
          toJSON (ApiErrorsType'EnumStringAuthenticationError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authentication_error"
          toJSON (ApiErrorsType'EnumStringCardError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_error"
          toJSON (ApiErrorsType'EnumStringIdempotencyError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "idempotency_error"
          toJSON (ApiErrorsType'EnumStringInvalidRequestError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invalid_request_error"
          toJSON (ApiErrorsType'EnumStringRateLimitError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "rate_limit_error"
instance Data.Aeson.FromJSON ApiErrorsType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_connection_error")
                                          then ApiErrorsType'EnumStringApiConnectionError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_error")
                                                then ApiErrorsType'EnumStringApiError
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authentication_error")
                                                      then ApiErrorsType'EnumStringAuthenticationError
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_error")
                                                            then ApiErrorsType'EnumStringCardError
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "idempotency_error")
                                                                  then ApiErrorsType'EnumStringIdempotencyError
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invalid_request_error")
                                                                        then ApiErrorsType'EnumStringInvalidRequestError
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "rate_limit_error")
                                                                              then ApiErrorsType'EnumStringRateLimitError
                                                                              else ApiErrorsType'EnumOther val)
instance Data.Aeson.ToJSON ApiErrors
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "charge" (apiErrorsCharge obj) : (Data.Aeson..=) "code" (apiErrorsCode obj) : (Data.Aeson..=) "decline_code" (apiErrorsDeclineCode obj) : (Data.Aeson..=) "doc_url" (apiErrorsDocUrl obj) : (Data.Aeson..=) "message" (apiErrorsMessage obj) : (Data.Aeson..=) "param" (apiErrorsParam obj) : (Data.Aeson..=) "payment_intent" (apiErrorsPaymentIntent obj) : (Data.Aeson..=) "payment_method" (apiErrorsPaymentMethod obj) : (Data.Aeson..=) "setup_intent" (apiErrorsSetupIntent obj) : (Data.Aeson..=) "source" (apiErrorsSource obj) : (Data.Aeson..=) "type" (apiErrorsType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "charge" (apiErrorsCharge obj) GHC.Base.<> ((Data.Aeson..=) "code" (apiErrorsCode obj) GHC.Base.<> ((Data.Aeson..=) "decline_code" (apiErrorsDeclineCode obj) GHC.Base.<> ((Data.Aeson..=) "doc_url" (apiErrorsDocUrl obj) GHC.Base.<> ((Data.Aeson..=) "message" (apiErrorsMessage obj) GHC.Base.<> ((Data.Aeson..=) "param" (apiErrorsParam obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (apiErrorsPaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "payment_method" (apiErrorsPaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "setup_intent" (apiErrorsSetupIntent obj) GHC.Base.<> ((Data.Aeson..=) "source" (apiErrorsSource obj) GHC.Base.<> (Data.Aeson..=) "type" (apiErrorsType obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ApiErrors
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApiErrors" (\obj -> ((((((((((GHC.Base.pure ApiErrors GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "decline_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "doc_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "param")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data ApplicationFee
    = ApplicationFee {applicationFeeAccount :: ApplicationFeeAccount'Variants,
                      applicationFeeAmount :: GHC.Integer.Type.Integer,
                      applicationFeeAmountRefunded :: GHC.Integer.Type.Integer,
                      applicationFeeApplication :: ApplicationFeeApplication'Variants,
                      applicationFeeBalanceTransaction :: (GHC.Maybe.Maybe ApplicationFeeBalanceTransaction'Variants),
                      applicationFeeCharge :: ApplicationFeeCharge'Variants,
                      applicationFeeCreated :: GHC.Integer.Type.Integer,
                      applicationFeeCurrency :: GHC.Base.String,
                      applicationFeeId :: GHC.Base.String,
                      applicationFeeLivemode :: GHC.Types.Bool,
                      applicationFeeObject :: ApplicationFeeObject',
                      applicationFeeOriginatingTransaction :: (GHC.Maybe.Maybe ApplicationFeeOriginatingTransaction'Variants),
                      applicationFeeRefunded :: GHC.Types.Bool,
                      applicationFeeRefunds :: ApplicationFeeRefunds'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ApplicationFeeAccount'Variants
    = ApplicationFeeAccount'Variant1 Account
    | ApplicationFeeAccount'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ApplicationFeeAccount'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ApplicationFeeAccount'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ApplicationFeeApplication'Variants
    = ApplicationFeeApplication'Variant1 Application
    | ApplicationFeeApplication'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ApplicationFeeApplication'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ApplicationFeeApplication'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ApplicationFeeBalanceTransaction'Variants
    = ApplicationFeeBalanceTransaction'Variant1 BalanceTransaction
    | ApplicationFeeBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ApplicationFeeBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ApplicationFeeBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ApplicationFeeCharge'Variants
    = ApplicationFeeCharge'Variant1 Charge
    | ApplicationFeeCharge'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ApplicationFeeCharge'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ApplicationFeeCharge'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ApplicationFeeObject'
    = ApplicationFeeObject'EnumOther Data.Aeson.Types.Internal.Value
    | ApplicationFeeObject'EnumTyped GHC.Base.String
    | ApplicationFeeObject'EnumStringApplicationFee
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ApplicationFeeObject'
    where toJSON (ApplicationFeeObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApplicationFeeObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApplicationFeeObject'EnumStringApplicationFee) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "application_fee"
instance Data.Aeson.FromJSON ApplicationFeeObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "application_fee")
                                          then ApplicationFeeObject'EnumStringApplicationFee
                                          else ApplicationFeeObject'EnumOther val)
data ApplicationFeeOriginatingTransaction'Variants
    = ApplicationFeeOriginatingTransaction'Variant1 Charge
    | ApplicationFeeOriginatingTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ApplicationFeeOriginatingTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ApplicationFeeOriginatingTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ApplicationFeeRefunds'
    = ApplicationFeeRefunds' {applicationFeeRefunds'Data :: ([] FeeRefund),
                              applicationFeeRefunds'HasMore :: GHC.Types.Bool,
                              applicationFeeRefunds'Object :: ApplicationFeeRefunds'Object',
                              applicationFeeRefunds'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ApplicationFeeRefunds'Object'
    = ApplicationFeeRefunds'Object'EnumOther Data.Aeson.Types.Internal.Value
    | ApplicationFeeRefunds'Object'EnumTyped GHC.Base.String
    | ApplicationFeeRefunds'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ApplicationFeeRefunds'Object'
    where toJSON (ApplicationFeeRefunds'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApplicationFeeRefunds'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ApplicationFeeRefunds'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON ApplicationFeeRefunds'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then ApplicationFeeRefunds'Object'EnumStringList
                                          else ApplicationFeeRefunds'Object'EnumOther val)
instance Data.Aeson.ToJSON ApplicationFeeRefunds'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (applicationFeeRefunds'Data obj) : (Data.Aeson..=) "has_more" (applicationFeeRefunds'HasMore obj) : (Data.Aeson..=) "object" (applicationFeeRefunds'Object obj) : (Data.Aeson..=) "url" (applicationFeeRefunds'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (applicationFeeRefunds'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (applicationFeeRefunds'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (applicationFeeRefunds'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (applicationFeeRefunds'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ApplicationFeeRefunds'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApplicationFeeRefunds'" (\obj -> (((GHC.Base.pure ApplicationFeeRefunds' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
instance Data.Aeson.ToJSON ApplicationFee
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (applicationFeeAccount obj) : (Data.Aeson..=) "amount" (applicationFeeAmount obj) : (Data.Aeson..=) "amount_refunded" (applicationFeeAmountRefunded obj) : (Data.Aeson..=) "application" (applicationFeeApplication obj) : (Data.Aeson..=) "balance_transaction" (applicationFeeBalanceTransaction obj) : (Data.Aeson..=) "charge" (applicationFeeCharge obj) : (Data.Aeson..=) "created" (applicationFeeCreated obj) : (Data.Aeson..=) "currency" (applicationFeeCurrency obj) : (Data.Aeson..=) "id" (applicationFeeId obj) : (Data.Aeson..=) "livemode" (applicationFeeLivemode obj) : (Data.Aeson..=) "object" (applicationFeeObject obj) : (Data.Aeson..=) "originating_transaction" (applicationFeeOriginatingTransaction obj) : (Data.Aeson..=) "refunded" (applicationFeeRefunded obj) : (Data.Aeson..=) "refunds" (applicationFeeRefunds obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (applicationFeeAccount obj) GHC.Base.<> ((Data.Aeson..=) "amount" (applicationFeeAmount obj) GHC.Base.<> ((Data.Aeson..=) "amount_refunded" (applicationFeeAmountRefunded obj) GHC.Base.<> ((Data.Aeson..=) "application" (applicationFeeApplication obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (applicationFeeBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "charge" (applicationFeeCharge obj) GHC.Base.<> ((Data.Aeson..=) "created" (applicationFeeCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (applicationFeeCurrency obj) GHC.Base.<> ((Data.Aeson..=) "id" (applicationFeeId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (applicationFeeLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (applicationFeeObject obj) GHC.Base.<> ((Data.Aeson..=) "originating_transaction" (applicationFeeOriginatingTransaction obj) GHC.Base.<> ((Data.Aeson..=) "refunded" (applicationFeeRefunded obj) GHC.Base.<> (Data.Aeson..=) "refunds" (applicationFeeRefunds obj))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ApplicationFee
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ApplicationFee" (\obj -> (((((((((((((GHC.Base.pure ApplicationFee GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_refunded")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "originating_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refunded")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refunds"))
data BalanceTransaction
    = BalanceTransaction {balanceTransactionAmount :: GHC.Integer.Type.Integer,
                          balanceTransactionAvailableOn :: GHC.Integer.Type.Integer,
                          balanceTransactionCreated :: GHC.Integer.Type.Integer,
                          balanceTransactionCurrency :: GHC.Base.String,
                          balanceTransactionDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                          balanceTransactionExchangeRate :: (GHC.Maybe.Maybe GHC.Types.Double),
                          balanceTransactionFee :: GHC.Integer.Type.Integer,
                          balanceTransactionFeeDetails :: ([] Fee),
                          balanceTransactionId :: GHC.Base.String,
                          balanceTransactionNet :: GHC.Integer.Type.Integer,
                          balanceTransactionObject :: BalanceTransactionObject',
                          balanceTransactionReportingCategory :: GHC.Base.String,
                          balanceTransactionSource :: (GHC.Maybe.Maybe BalanceTransactionSource'Variants),
                          balanceTransactionStatus :: GHC.Base.String,
                          balanceTransactionType :: BalanceTransactionType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data BalanceTransactionObject'
    = BalanceTransactionObject'EnumOther Data.Aeson.Types.Internal.Value
    | BalanceTransactionObject'EnumTyped GHC.Base.String
    | BalanceTransactionObject'EnumStringBalanceTransaction
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON BalanceTransactionObject'
    where toJSON (BalanceTransactionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (BalanceTransactionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (BalanceTransactionObject'EnumStringBalanceTransaction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "balance_transaction"
instance Data.Aeson.FromJSON BalanceTransactionObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "balance_transaction")
                                          then BalanceTransactionObject'EnumStringBalanceTransaction
                                          else BalanceTransactionObject'EnumOther val)
data BalanceTransactionSource'Variants
    = BalanceTransactionSource'Variant1 ApplicationFee
    | BalanceTransactionSource'Variant2 Charge
    | BalanceTransactionSource'Variant3 ConnectCollectionTransfer
    | BalanceTransactionSource'Variant4 Dispute
    | BalanceTransactionSource'Variant5 FeeRefund
    | BalanceTransactionSource'Variant6 Issuing'authorization
    | BalanceTransactionSource'Variant7 Issuing'transaction
    | BalanceTransactionSource'Variant8 Payout
    | BalanceTransactionSource'Variant9 PlatformTaxFee
    | BalanceTransactionSource'Variant10 Refund
    | BalanceTransactionSource'Variant11 ReserveTransaction
    | BalanceTransactionSource'Variant12 TaxDeductedAtSource
    | BalanceTransactionSource'Variant13 Topup
    | BalanceTransactionSource'Variant14 Transfer
    | BalanceTransactionSource'Variant15 TransferReversal
    | BalanceTransactionSource'Variant16 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON BalanceTransactionSource'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON BalanceTransactionSource'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data BalanceTransactionType'
    = BalanceTransactionType'EnumOther Data.Aeson.Types.Internal.Value
    | BalanceTransactionType'EnumTyped GHC.Base.String
    | BalanceTransactionType'EnumStringAdjustment
    | BalanceTransactionType'EnumStringAdvance
    | BalanceTransactionType'EnumStringAdvanceFunding
    | BalanceTransactionType'EnumStringApplicationFee
    | BalanceTransactionType'EnumStringApplicationFeeRefund
    | BalanceTransactionType'EnumStringCharge
    | BalanceTransactionType'EnumStringConnectCollectionTransfer
    | BalanceTransactionType'EnumStringIssuingAuthorizationHold
    | BalanceTransactionType'EnumStringIssuingAuthorizationRelease
    | BalanceTransactionType'EnumStringIssuingTransaction
    | BalanceTransactionType'EnumStringPayment
    | BalanceTransactionType'EnumStringPaymentFailureRefund
    | BalanceTransactionType'EnumStringPaymentRefund
    | BalanceTransactionType'EnumStringPayout
    | BalanceTransactionType'EnumStringPayoutCancel
    | BalanceTransactionType'EnumStringPayoutFailure
    | BalanceTransactionType'EnumStringRefund
    | BalanceTransactionType'EnumStringRefundFailure
    | BalanceTransactionType'EnumStringReserveTransaction
    | BalanceTransactionType'EnumStringReservedFunds
    | BalanceTransactionType'EnumStringStripeFee
    | BalanceTransactionType'EnumStringStripeFxFee
    | BalanceTransactionType'EnumStringTaxFee
    | BalanceTransactionType'EnumStringTopup
    | BalanceTransactionType'EnumStringTopupReversal
    | BalanceTransactionType'EnumStringTransfer
    | BalanceTransactionType'EnumStringTransferCancel
    | BalanceTransactionType'EnumStringTransferFailure
    | BalanceTransactionType'EnumStringTransferRefund
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON BalanceTransactionType'
    where toJSON (BalanceTransactionType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (BalanceTransactionType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (BalanceTransactionType'EnumStringAdjustment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "adjustment"
          toJSON (BalanceTransactionType'EnumStringAdvance) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advance"
          toJSON (BalanceTransactionType'EnumStringAdvanceFunding) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advance_funding"
          toJSON (BalanceTransactionType'EnumStringApplicationFee) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "application_fee"
          toJSON (BalanceTransactionType'EnumStringApplicationFeeRefund) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "application_fee_refund"
          toJSON (BalanceTransactionType'EnumStringCharge) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge"
          toJSON (BalanceTransactionType'EnumStringConnectCollectionTransfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "connect_collection_transfer"
          toJSON (BalanceTransactionType'EnumStringIssuingAuthorizationHold) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing_authorization_hold"
          toJSON (BalanceTransactionType'EnumStringIssuingAuthorizationRelease) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing_authorization_release"
          toJSON (BalanceTransactionType'EnumStringIssuingTransaction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing_transaction"
          toJSON (BalanceTransactionType'EnumStringPayment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment"
          toJSON (BalanceTransactionType'EnumStringPaymentFailureRefund) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_failure_refund"
          toJSON (BalanceTransactionType'EnumStringPaymentRefund) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_refund"
          toJSON (BalanceTransactionType'EnumStringPayout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payout"
          toJSON (BalanceTransactionType'EnumStringPayoutCancel) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payout_cancel"
          toJSON (BalanceTransactionType'EnumStringPayoutFailure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payout_failure"
          toJSON (BalanceTransactionType'EnumStringRefund) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund"
          toJSON (BalanceTransactionType'EnumStringRefundFailure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund_failure"
          toJSON (BalanceTransactionType'EnumStringReserveTransaction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reserve_transaction"
          toJSON (BalanceTransactionType'EnumStringReservedFunds) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reserved_funds"
          toJSON (BalanceTransactionType'EnumStringStripeFee) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stripe_fee"
          toJSON (BalanceTransactionType'EnumStringStripeFxFee) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stripe_fx_fee"
          toJSON (BalanceTransactionType'EnumStringTaxFee) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_fee"
          toJSON (BalanceTransactionType'EnumStringTopup) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "topup"
          toJSON (BalanceTransactionType'EnumStringTopupReversal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "topup_reversal"
          toJSON (BalanceTransactionType'EnumStringTransfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer"
          toJSON (BalanceTransactionType'EnumStringTransferCancel) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_cancel"
          toJSON (BalanceTransactionType'EnumStringTransferFailure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_failure"
          toJSON (BalanceTransactionType'EnumStringTransferRefund) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_refund"
instance Data.Aeson.FromJSON BalanceTransactionType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "adjustment")
                                          then BalanceTransactionType'EnumStringAdjustment
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advance")
                                                then BalanceTransactionType'EnumStringAdvance
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advance_funding")
                                                      then BalanceTransactionType'EnumStringAdvanceFunding
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "application_fee")
                                                            then BalanceTransactionType'EnumStringApplicationFee
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "application_fee_refund")
                                                                  then BalanceTransactionType'EnumStringApplicationFeeRefund
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge")
                                                                        then BalanceTransactionType'EnumStringCharge
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "connect_collection_transfer")
                                                                              then BalanceTransactionType'EnumStringConnectCollectionTransfer
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing_authorization_hold")
                                                                                    then BalanceTransactionType'EnumStringIssuingAuthorizationHold
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing_authorization_release")
                                                                                          then BalanceTransactionType'EnumStringIssuingAuthorizationRelease
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing_transaction")
                                                                                                then BalanceTransactionType'EnumStringIssuingTransaction
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment")
                                                                                                      then BalanceTransactionType'EnumStringPayment
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_failure_refund")
                                                                                                            then BalanceTransactionType'EnumStringPaymentFailureRefund
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_refund")
                                                                                                                  then BalanceTransactionType'EnumStringPaymentRefund
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payout")
                                                                                                                        then BalanceTransactionType'EnumStringPayout
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payout_cancel")
                                                                                                                              then BalanceTransactionType'EnumStringPayoutCancel
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payout_failure")
                                                                                                                                    then BalanceTransactionType'EnumStringPayoutFailure
                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund")
                                                                                                                                          then BalanceTransactionType'EnumStringRefund
                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund_failure")
                                                                                                                                                then BalanceTransactionType'EnumStringRefundFailure
                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reserve_transaction")
                                                                                                                                                      then BalanceTransactionType'EnumStringReserveTransaction
                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reserved_funds")
                                                                                                                                                            then BalanceTransactionType'EnumStringReservedFunds
                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stripe_fee")
                                                                                                                                                                  then BalanceTransactionType'EnumStringStripeFee
                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stripe_fx_fee")
                                                                                                                                                                        then BalanceTransactionType'EnumStringStripeFxFee
                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_fee")
                                                                                                                                                                              then BalanceTransactionType'EnumStringTaxFee
                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "topup")
                                                                                                                                                                                    then BalanceTransactionType'EnumStringTopup
                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "topup_reversal")
                                                                                                                                                                                          then BalanceTransactionType'EnumStringTopupReversal
                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer")
                                                                                                                                                                                                then BalanceTransactionType'EnumStringTransfer
                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_cancel")
                                                                                                                                                                                                      then BalanceTransactionType'EnumStringTransferCancel
                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_failure")
                                                                                                                                                                                                            then BalanceTransactionType'EnumStringTransferFailure
                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_refund")
                                                                                                                                                                                                                  then BalanceTransactionType'EnumStringTransferRefund
                                                                                                                                                                                                                  else BalanceTransactionType'EnumOther val)
instance Data.Aeson.ToJSON BalanceTransaction
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (balanceTransactionAmount obj) : (Data.Aeson..=) "available_on" (balanceTransactionAvailableOn obj) : (Data.Aeson..=) "created" (balanceTransactionCreated obj) : (Data.Aeson..=) "currency" (balanceTransactionCurrency obj) : (Data.Aeson..=) "description" (balanceTransactionDescription obj) : (Data.Aeson..=) "exchange_rate" (balanceTransactionExchangeRate obj) : (Data.Aeson..=) "fee" (balanceTransactionFee obj) : (Data.Aeson..=) "fee_details" (balanceTransactionFeeDetails obj) : (Data.Aeson..=) "id" (balanceTransactionId obj) : (Data.Aeson..=) "net" (balanceTransactionNet obj) : (Data.Aeson..=) "object" (balanceTransactionObject obj) : (Data.Aeson..=) "reporting_category" (balanceTransactionReportingCategory obj) : (Data.Aeson..=) "source" (balanceTransactionSource obj) : (Data.Aeson..=) "status" (balanceTransactionStatus obj) : (Data.Aeson..=) "type" (balanceTransactionType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (balanceTransactionAmount obj) GHC.Base.<> ((Data.Aeson..=) "available_on" (balanceTransactionAvailableOn obj) GHC.Base.<> ((Data.Aeson..=) "created" (balanceTransactionCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (balanceTransactionCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (balanceTransactionDescription obj) GHC.Base.<> ((Data.Aeson..=) "exchange_rate" (balanceTransactionExchangeRate obj) GHC.Base.<> ((Data.Aeson..=) "fee" (balanceTransactionFee obj) GHC.Base.<> ((Data.Aeson..=) "fee_details" (balanceTransactionFeeDetails obj) GHC.Base.<> ((Data.Aeson..=) "id" (balanceTransactionId obj) GHC.Base.<> ((Data.Aeson..=) "net" (balanceTransactionNet obj) GHC.Base.<> ((Data.Aeson..=) "object" (balanceTransactionObject obj) GHC.Base.<> ((Data.Aeson..=) "reporting_category" (balanceTransactionReportingCategory obj) GHC.Base.<> ((Data.Aeson..=) "source" (balanceTransactionSource obj) GHC.Base.<> ((Data.Aeson..=) "status" (balanceTransactionStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (balanceTransactionType obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON BalanceTransaction
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BalanceTransaction" (\obj -> ((((((((((((((GHC.Base.pure BalanceTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available_on")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exchange_rate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reporting_category")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data BankAccount
    = BankAccount {bankAccountAccount :: (GHC.Maybe.Maybe BankAccountAccount'Variants),
                   bankAccountAccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                   bankAccountAccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                   bankAccountBankName :: (GHC.Maybe.Maybe GHC.Base.String),
                   bankAccountCountry :: GHC.Base.String,
                   bankAccountCurrency :: GHC.Base.String,
                   bankAccountCustomer :: (GHC.Maybe.Maybe BankAccountCustomer'Variants),
                   bankAccountDefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                   bankAccountFingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                   bankAccountId :: GHC.Base.String,
                   bankAccountLast4 :: GHC.Base.String,
                   bankAccountMetadata :: (GHC.Maybe.Maybe BankAccountMetadata'),
                   bankAccountObject :: BankAccountObject',
                   bankAccountRoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                   bankAccountStatus :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data BankAccountAccount'Variants
    = BankAccountAccount'Variant1 Account
    | BankAccountAccount'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON BankAccountAccount'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON BankAccountAccount'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data BankAccountCustomer'Variants
    = BankAccountCustomer'Variant1 Customer
    | BankAccountCustomer'Variant2 DeletedCustomer
    | BankAccountCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON BankAccountCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON BankAccountCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data BankAccountMetadata'
    = BankAccountMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON BankAccountMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON BankAccountMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BankAccountMetadata'" (\obj -> GHC.Base.pure BankAccountMetadata')
data BankAccountObject'
    = BankAccountObject'EnumOther Data.Aeson.Types.Internal.Value
    | BankAccountObject'EnumTyped GHC.Base.String
    | BankAccountObject'EnumStringBankAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON BankAccountObject'
    where toJSON (BankAccountObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (BankAccountObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (BankAccountObject'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
instance Data.Aeson.FromJSON BankAccountObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then BankAccountObject'EnumStringBankAccount
                                          else BankAccountObject'EnumOther val)
instance Data.Aeson.ToJSON BankAccount
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (bankAccountAccount obj) : (Data.Aeson..=) "account_holder_name" (bankAccountAccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (bankAccountAccountHolderType obj) : (Data.Aeson..=) "bank_name" (bankAccountBankName obj) : (Data.Aeson..=) "country" (bankAccountCountry obj) : (Data.Aeson..=) "currency" (bankAccountCurrency obj) : (Data.Aeson..=) "customer" (bankAccountCustomer obj) : (Data.Aeson..=) "default_for_currency" (bankAccountDefaultForCurrency obj) : (Data.Aeson..=) "fingerprint" (bankAccountFingerprint obj) : (Data.Aeson..=) "id" (bankAccountId obj) : (Data.Aeson..=) "last4" (bankAccountLast4 obj) : (Data.Aeson..=) "metadata" (bankAccountMetadata obj) : (Data.Aeson..=) "object" (bankAccountObject obj) : (Data.Aeson..=) "routing_number" (bankAccountRoutingNumber obj) : (Data.Aeson..=) "status" (bankAccountStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (bankAccountAccount obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (bankAccountAccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (bankAccountAccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (bankAccountBankName obj) GHC.Base.<> ((Data.Aeson..=) "country" (bankAccountCountry obj) GHC.Base.<> ((Data.Aeson..=) "currency" (bankAccountCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (bankAccountCustomer obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (bankAccountDefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (bankAccountFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "id" (bankAccountId obj) GHC.Base.<> ((Data.Aeson..=) "last4" (bankAccountLast4 obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (bankAccountMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (bankAccountObject obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (bankAccountRoutingNumber obj) GHC.Base.<> (Data.Aeson..=) "status" (bankAccountStatus obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON BankAccount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BankAccount" (\obj -> ((((((((((((((GHC.Base.pure BankAccount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
data BillingDetails
    = BillingDetails {billingDetailsAddress :: (GHC.Maybe.Maybe BillingDetailsAddress'),
                      billingDetailsEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                      billingDetailsName :: (GHC.Maybe.Maybe GHC.Base.String),
                      billingDetailsPhone :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data BillingDetailsAddress'
    = BillingDetailsAddress' {billingDetailsAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                              billingDetailsAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                              billingDetailsAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                              billingDetailsAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                              billingDetailsAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                              billingDetailsAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON BillingDetailsAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (billingDetailsAddress'City obj) : (Data.Aeson..=) "country" (billingDetailsAddress'Country obj) : (Data.Aeson..=) "line1" (billingDetailsAddress'Line1 obj) : (Data.Aeson..=) "line2" (billingDetailsAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (billingDetailsAddress'PostalCode obj) : (Data.Aeson..=) "state" (billingDetailsAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (billingDetailsAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (billingDetailsAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (billingDetailsAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (billingDetailsAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (billingDetailsAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (billingDetailsAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON BillingDetailsAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BillingDetailsAddress'" (\obj -> (((((GHC.Base.pure BillingDetailsAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON BillingDetails
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (billingDetailsAddress obj) : (Data.Aeson..=) "email" (billingDetailsEmail obj) : (Data.Aeson..=) "name" (billingDetailsName obj) : (Data.Aeson..=) "phone" (billingDetailsPhone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (billingDetailsAddress obj) GHC.Base.<> ((Data.Aeson..=) "email" (billingDetailsEmail obj) GHC.Base.<> ((Data.Aeson..=) "name" (billingDetailsName obj) GHC.Base.<> (Data.Aeson..=) "phone" (billingDetailsPhone obj))))
instance Data.Aeson.Types.FromJSON.FromJSON BillingDetails
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "BillingDetails" (\obj -> (((GHC.Base.pure BillingDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone"))
data Capability
    = Capability {capabilityAccount :: CapabilityAccount'Variants,
                  capabilityId :: GHC.Base.String,
                  capabilityObject :: CapabilityObject',
                  capabilityRequested :: GHC.Types.Bool,
                  capabilityRequestedAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                  capabilityRequirements :: (GHC.Maybe.Maybe AccountCapabilityRequirements),
                  capabilityStatus :: CapabilityStatus'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CapabilityAccount'Variants
    = CapabilityAccount'Variant1 Account
    | CapabilityAccount'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CapabilityAccount'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CapabilityAccount'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CapabilityObject'
    = CapabilityObject'EnumOther Data.Aeson.Types.Internal.Value
    | CapabilityObject'EnumTyped GHC.Base.String
    | CapabilityObject'EnumStringCapability
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CapabilityObject'
    where toJSON (CapabilityObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CapabilityObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CapabilityObject'EnumStringCapability) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "capability"
instance Data.Aeson.FromJSON CapabilityObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "capability")
                                          then CapabilityObject'EnumStringCapability
                                          else CapabilityObject'EnumOther val)
data CapabilityStatus'
    = CapabilityStatus'EnumOther Data.Aeson.Types.Internal.Value
    | CapabilityStatus'EnumTyped GHC.Base.String
    | CapabilityStatus'EnumStringActive
    | CapabilityStatus'EnumStringDisabled
    | CapabilityStatus'EnumStringInactive
    | CapabilityStatus'EnumStringPending
    | CapabilityStatus'EnumStringUnrequested
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CapabilityStatus'
    where toJSON (CapabilityStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CapabilityStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CapabilityStatus'EnumStringActive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
          toJSON (CapabilityStatus'EnumStringDisabled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled"
          toJSON (CapabilityStatus'EnumStringInactive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive"
          toJSON (CapabilityStatus'EnumStringPending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (CapabilityStatus'EnumStringUnrequested) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unrequested"
instance Data.Aeson.FromJSON CapabilityStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
                                          then CapabilityStatus'EnumStringActive
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disabled")
                                                then CapabilityStatus'EnumStringDisabled
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive")
                                                      then CapabilityStatus'EnumStringInactive
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                            then CapabilityStatus'EnumStringPending
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unrequested")
                                                                  then CapabilityStatus'EnumStringUnrequested
                                                                  else CapabilityStatus'EnumOther val)
instance Data.Aeson.ToJSON Capability
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (capabilityAccount obj) : (Data.Aeson..=) "id" (capabilityId obj) : (Data.Aeson..=) "object" (capabilityObject obj) : (Data.Aeson..=) "requested" (capabilityRequested obj) : (Data.Aeson..=) "requested_at" (capabilityRequestedAt obj) : (Data.Aeson..=) "requirements" (capabilityRequirements obj) : (Data.Aeson..=) "status" (capabilityStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (capabilityAccount obj) GHC.Base.<> ((Data.Aeson..=) "id" (capabilityId obj) GHC.Base.<> ((Data.Aeson..=) "object" (capabilityObject obj) GHC.Base.<> ((Data.Aeson..=) "requested" (capabilityRequested obj) GHC.Base.<> ((Data.Aeson..=) "requested_at" (capabilityRequestedAt obj) GHC.Base.<> ((Data.Aeson..=) "requirements" (capabilityRequirements obj) GHC.Base.<> (Data.Aeson..=) "status" (capabilityStatus obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON Capability
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Capability" (\obj -> ((((((GHC.Base.pure Capability GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "requested")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requested_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
data Card
    = Card {cardAccount :: (GHC.Maybe.Maybe CardAccount'Variants),
            cardAddressCity :: (GHC.Maybe.Maybe GHC.Base.String),
            cardAddressCountry :: (GHC.Maybe.Maybe GHC.Base.String),
            cardAddressLine1 :: (GHC.Maybe.Maybe GHC.Base.String),
            cardAddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
            cardAddressLine2 :: (GHC.Maybe.Maybe GHC.Base.String),
            cardAddressState :: (GHC.Maybe.Maybe GHC.Base.String),
            cardAddressZip :: (GHC.Maybe.Maybe GHC.Base.String),
            cardAddressZipCheck :: (GHC.Maybe.Maybe GHC.Base.String),
            cardAvailablePayoutMethods :: (GHC.Maybe.Maybe ([] CardAvailablePayoutMethods')),
            cardBrand :: GHC.Base.String,
            cardCountry :: (GHC.Maybe.Maybe GHC.Base.String),
            cardCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
            cardCustomer :: (GHC.Maybe.Maybe CardCustomer'Variants),
            cardCvcCheck :: (GHC.Maybe.Maybe GHC.Base.String),
            cardDefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
            cardDynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
            cardExpMonth :: GHC.Integer.Type.Integer,
            cardExpYear :: GHC.Integer.Type.Integer,
            cardFingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
            cardFunding :: GHC.Base.String,
            cardId :: GHC.Base.String,
            cardLast4 :: GHC.Base.String,
            cardMetadata :: CardMetadata',
            cardName :: (GHC.Maybe.Maybe GHC.Base.String),
            cardObject :: CardObject',
            cardRecipient :: (GHC.Maybe.Maybe CardRecipient'Variants),
            cardTokenizationMethod :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CardAccount'Variants
    = CardAccount'Variant1 Account
    | CardAccount'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CardAccount'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CardAccount'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CardAvailablePayoutMethods'
    = CardAvailablePayoutMethods'EnumOther Data.Aeson.Types.Internal.Value
    | CardAvailablePayoutMethods'EnumTyped GHC.Base.String
    | CardAvailablePayoutMethods'EnumStringInstant
    | CardAvailablePayoutMethods'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CardAvailablePayoutMethods'
    where toJSON (CardAvailablePayoutMethods'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CardAvailablePayoutMethods'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CardAvailablePayoutMethods'EnumStringInstant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant"
          toJSON (CardAvailablePayoutMethods'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON CardAvailablePayoutMethods'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant")
                                          then CardAvailablePayoutMethods'EnumStringInstant
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                then CardAvailablePayoutMethods'EnumStringStandard
                                                else CardAvailablePayoutMethods'EnumOther val)
data CardCustomer'Variants
    = CardCustomer'Variant1 Customer
    | CardCustomer'Variant2 DeletedCustomer
    | CardCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CardCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CardCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CardMetadata'
    = CardMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CardMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON CardMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CardMetadata'" (\obj -> GHC.Base.pure CardMetadata')
data CardObject'
    = CardObject'EnumOther Data.Aeson.Types.Internal.Value
    | CardObject'EnumTyped GHC.Base.String
    | CardObject'EnumStringCard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CardObject'
    where toJSON (CardObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CardObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CardObject'EnumStringCard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card"
instance Data.Aeson.FromJSON CardObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card")
                                          then CardObject'EnumStringCard
                                          else CardObject'EnumOther val)
data CardRecipient'Variants
    = CardRecipient'Variant1 Recipient
    | CardRecipient'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CardRecipient'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CardRecipient'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Card
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (cardAccount obj) : (Data.Aeson..=) "address_city" (cardAddressCity obj) : (Data.Aeson..=) "address_country" (cardAddressCountry obj) : (Data.Aeson..=) "address_line1" (cardAddressLine1 obj) : (Data.Aeson..=) "address_line1_check" (cardAddressLine1Check obj) : (Data.Aeson..=) "address_line2" (cardAddressLine2 obj) : (Data.Aeson..=) "address_state" (cardAddressState obj) : (Data.Aeson..=) "address_zip" (cardAddressZip obj) : (Data.Aeson..=) "address_zip_check" (cardAddressZipCheck obj) : (Data.Aeson..=) "available_payout_methods" (cardAvailablePayoutMethods obj) : (Data.Aeson..=) "brand" (cardBrand obj) : (Data.Aeson..=) "country" (cardCountry obj) : (Data.Aeson..=) "currency" (cardCurrency obj) : (Data.Aeson..=) "customer" (cardCustomer obj) : (Data.Aeson..=) "cvc_check" (cardCvcCheck obj) : (Data.Aeson..=) "default_for_currency" (cardDefaultForCurrency obj) : (Data.Aeson..=) "dynamic_last4" (cardDynamicLast4 obj) : (Data.Aeson..=) "exp_month" (cardExpMonth obj) : (Data.Aeson..=) "exp_year" (cardExpYear obj) : (Data.Aeson..=) "fingerprint" (cardFingerprint obj) : (Data.Aeson..=) "funding" (cardFunding obj) : (Data.Aeson..=) "id" (cardId obj) : (Data.Aeson..=) "last4" (cardLast4 obj) : (Data.Aeson..=) "metadata" (cardMetadata obj) : (Data.Aeson..=) "name" (cardName obj) : (Data.Aeson..=) "object" (cardObject obj) : (Data.Aeson..=) "recipient" (cardRecipient obj) : (Data.Aeson..=) "tokenization_method" (cardTokenizationMethod obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (cardAccount obj) GHC.Base.<> ((Data.Aeson..=) "address_city" (cardAddressCity obj) GHC.Base.<> ((Data.Aeson..=) "address_country" (cardAddressCountry obj) GHC.Base.<> ((Data.Aeson..=) "address_line1" (cardAddressLine1 obj) GHC.Base.<> ((Data.Aeson..=) "address_line1_check" (cardAddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_line2" (cardAddressLine2 obj) GHC.Base.<> ((Data.Aeson..=) "address_state" (cardAddressState obj) GHC.Base.<> ((Data.Aeson..=) "address_zip" (cardAddressZip obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (cardAddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "available_payout_methods" (cardAvailablePayoutMethods obj) GHC.Base.<> ((Data.Aeson..=) "brand" (cardBrand obj) GHC.Base.<> ((Data.Aeson..=) "country" (cardCountry obj) GHC.Base.<> ((Data.Aeson..=) "currency" (cardCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (cardCustomer obj) GHC.Base.<> ((Data.Aeson..=) "cvc_check" (cardCvcCheck obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (cardDefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (cardDynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (cardExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (cardExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (cardFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "funding" (cardFunding obj) GHC.Base.<> ((Data.Aeson..=) "id" (cardId obj) GHC.Base.<> ((Data.Aeson..=) "last4" (cardLast4 obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (cardMetadata obj) GHC.Base.<> ((Data.Aeson..=) "name" (cardName obj) GHC.Base.<> ((Data.Aeson..=) "object" (cardObject obj) GHC.Base.<> ((Data.Aeson..=) "recipient" (cardRecipient obj) GHC.Base.<> (Data.Aeson..=) "tokenization_method" (cardTokenizationMethod obj))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Card
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Card" (\obj -> (((((((((((((((((((((((((((GHC.Base.pure Card GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method"))
data Charge
    = Charge {chargeAmount :: GHC.Integer.Type.Integer,
              chargeAmountRefunded :: GHC.Integer.Type.Integer,
              chargeApplication :: (GHC.Maybe.Maybe ChargeApplication'Variants),
              chargeApplicationFee :: (GHC.Maybe.Maybe ChargeApplicationFee'Variants),
              chargeApplicationFeeAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
              chargeBalanceTransaction :: (GHC.Maybe.Maybe ChargeBalanceTransaction'Variants),
              chargeBillingDetails :: BillingDetails,
              chargeCaptured :: GHC.Types.Bool,
              chargeCreated :: GHC.Integer.Type.Integer,
              chargeCurrency :: GHC.Base.String,
              chargeCustomer :: (GHC.Maybe.Maybe ChargeCustomer'Variants),
              chargeDescription :: (GHC.Maybe.Maybe GHC.Base.String),
              chargeDisputed :: GHC.Types.Bool,
              chargeFailureCode :: (GHC.Maybe.Maybe GHC.Base.String),
              chargeFailureMessage :: (GHC.Maybe.Maybe GHC.Base.String),
              chargeFraudDetails :: (GHC.Maybe.Maybe ChargeFraudDetails'),
              chargeId :: GHC.Base.String,
              chargeInvoice :: (GHC.Maybe.Maybe ChargeInvoice'Variants),
              chargeLivemode :: GHC.Types.Bool,
              chargeMetadata :: ChargeMetadata',
              chargeObject :: ChargeObject',
              chargeOnBehalfOf :: (GHC.Maybe.Maybe ChargeOnBehalfOf'Variants),
              chargeOrder :: (GHC.Maybe.Maybe ChargeOrder'Variants),
              chargeOutcome :: (GHC.Maybe.Maybe ChargeOutcome'),
              chargePaid :: GHC.Types.Bool,
              chargePaymentIntent :: (GHC.Maybe.Maybe GHC.Base.String),
              chargePaymentMethod :: (GHC.Maybe.Maybe GHC.Base.String),
              chargePaymentMethodDetails :: (GHC.Maybe.Maybe ChargePaymentMethodDetails'),
              chargeReceiptEmail :: (GHC.Maybe.Maybe GHC.Base.String),
              chargeReceiptNumber :: (GHC.Maybe.Maybe GHC.Base.String),
              chargeReceiptUrl :: GHC.Base.String,
              chargeRefunded :: GHC.Types.Bool,
              chargeRefunds :: ChargeRefunds',
              chargeReview :: (GHC.Maybe.Maybe ChargeReview'Variants),
              chargeShipping :: (GHC.Maybe.Maybe ChargeShipping'),
              chargeSourceTransfer :: (GHC.Maybe.Maybe ChargeSourceTransfer'Variants),
              chargeStatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
              chargeStatementDescriptorSuffix :: (GHC.Maybe.Maybe GHC.Base.String),
              chargeStatus :: GHC.Base.String,
              chargeTransfer :: (GHC.Maybe.Maybe ChargeTransfer'Variants),
              chargeTransferData :: (GHC.Maybe.Maybe ChargeTransferData'),
              chargeTransferGroup :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ChargeApplication'Variants
    = ChargeApplication'Variant1 Application
    | ChargeApplication'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeApplication'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeApplication'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeApplicationFee'Variants
    = ChargeApplicationFee'Variant1 ApplicationFee
    | ChargeApplicationFee'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeApplicationFee'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeApplicationFee'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeBalanceTransaction'Variants
    = ChargeBalanceTransaction'Variant1 BalanceTransaction
    | ChargeBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeCustomer'Variants
    = ChargeCustomer'Variant1 Customer
    | ChargeCustomer'Variant2 DeletedCustomer
    | ChargeCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeFraudDetails'
    = ChargeFraudDetails' {chargeFraudDetails'StripeReport :: (GHC.Maybe.Maybe GHC.Base.String),
                           chargeFraudDetails'UserReport :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ChargeFraudDetails'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "stripe_report" (chargeFraudDetails'StripeReport obj) : (Data.Aeson..=) "user_report" (chargeFraudDetails'UserReport obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "stripe_report" (chargeFraudDetails'StripeReport obj) GHC.Base.<> (Data.Aeson..=) "user_report" (chargeFraudDetails'UserReport obj))
instance Data.Aeson.Types.FromJSON.FromJSON ChargeFraudDetails'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeFraudDetails'" (\obj -> (GHC.Base.pure ChargeFraudDetails' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stripe_report")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "user_report"))
data ChargeInvoice'Variants
    = ChargeInvoice'Variant1 Invoice
    | ChargeInvoice'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeInvoice'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeInvoice'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeMetadata'
    = ChargeMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ChargeMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON ChargeMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeMetadata'" (\obj -> GHC.Base.pure ChargeMetadata')
data ChargeObject'
    = ChargeObject'EnumOther Data.Aeson.Types.Internal.Value
    | ChargeObject'EnumTyped GHC.Base.String
    | ChargeObject'EnumStringCharge
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ChargeObject'
    where toJSON (ChargeObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ChargeObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ChargeObject'EnumStringCharge) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge"
instance Data.Aeson.FromJSON ChargeObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge")
                                          then ChargeObject'EnumStringCharge
                                          else ChargeObject'EnumOther val)
data ChargeOnBehalfOf'Variants
    = ChargeOnBehalfOf'Variant1 Account
    | ChargeOnBehalfOf'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeOnBehalfOf'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeOnBehalfOf'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeOrder'Variants
    = ChargeOrder'Variant1 Order | ChargeOrder'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeOrder'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeOrder'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeOutcome'
    = ChargeOutcome' {chargeOutcome'NetworkStatus :: (GHC.Maybe.Maybe GHC.Base.String),
                      chargeOutcome'Reason :: (GHC.Maybe.Maybe GHC.Base.String),
                      chargeOutcome'RiskLevel :: (GHC.Maybe.Maybe GHC.Base.String),
                      chargeOutcome'RiskScore :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                      chargeOutcome'Rule :: (GHC.Maybe.Maybe ChargeOutcome'Rule'Variants),
                      chargeOutcome'SellerMessage :: (GHC.Maybe.Maybe GHC.Base.String),
                      chargeOutcome'Type :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ChargeOutcome'Rule'Variants
    = ChargeOutcome'Rule'Variant1 Rule
    | ChargeOutcome'Rule'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeOutcome'Rule'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeOutcome'Rule'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON ChargeOutcome'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "network_status" (chargeOutcome'NetworkStatus obj) : (Data.Aeson..=) "reason" (chargeOutcome'Reason obj) : (Data.Aeson..=) "risk_level" (chargeOutcome'RiskLevel obj) : (Data.Aeson..=) "risk_score" (chargeOutcome'RiskScore obj) : (Data.Aeson..=) "rule" (chargeOutcome'Rule obj) : (Data.Aeson..=) "seller_message" (chargeOutcome'SellerMessage obj) : (Data.Aeson..=) "type" (chargeOutcome'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "network_status" (chargeOutcome'NetworkStatus obj) GHC.Base.<> ((Data.Aeson..=) "reason" (chargeOutcome'Reason obj) GHC.Base.<> ((Data.Aeson..=) "risk_level" (chargeOutcome'RiskLevel obj) GHC.Base.<> ((Data.Aeson..=) "risk_score" (chargeOutcome'RiskScore obj) GHC.Base.<> ((Data.Aeson..=) "rule" (chargeOutcome'Rule obj) GHC.Base.<> ((Data.Aeson..=) "seller_message" (chargeOutcome'SellerMessage obj) GHC.Base.<> (Data.Aeson..=) "type" (chargeOutcome'Type obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON ChargeOutcome'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeOutcome'" (\obj -> ((((((GHC.Base.pure ChargeOutcome' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "risk_level")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "risk_score")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rule")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "seller_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
data ChargePaymentMethodDetails'
    = ChargePaymentMethodDetails' {chargePaymentMethodDetails'AchCreditTransfer :: (GHC.Maybe.Maybe PaymentMethodDetailsAchCreditTransfer),
                                   chargePaymentMethodDetails'AchDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsAchDebit),
                                   chargePaymentMethodDetails'Alipay :: (GHC.Maybe.Maybe PaymentMethodDetailsAlipay),
                                   chargePaymentMethodDetails'Bancontact :: (GHC.Maybe.Maybe PaymentMethodDetailsBancontact),
                                   chargePaymentMethodDetails'Card :: (GHC.Maybe.Maybe PaymentMethodDetailsCard),
                                   chargePaymentMethodDetails'CardPresent :: (GHC.Maybe.Maybe PaymentMethodDetailsCardPresent),
                                   chargePaymentMethodDetails'Eps :: (GHC.Maybe.Maybe PaymentMethodDetailsEps),
                                   chargePaymentMethodDetails'Fpx :: (GHC.Maybe.Maybe PaymentMethodDetailsFpx),
                                   chargePaymentMethodDetails'Giropay :: (GHC.Maybe.Maybe PaymentMethodDetailsGiropay),
                                   chargePaymentMethodDetails'Ideal :: (GHC.Maybe.Maybe PaymentMethodDetailsIdeal),
                                   chargePaymentMethodDetails'Klarna :: (GHC.Maybe.Maybe PaymentMethodDetailsKlarna),
                                   chargePaymentMethodDetails'Multibanco :: (GHC.Maybe.Maybe PaymentMethodDetailsMultibanco),
                                   chargePaymentMethodDetails'P24 :: (GHC.Maybe.Maybe PaymentMethodDetailsP24),
                                   chargePaymentMethodDetails'SepaDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsSepaDebit),
                                   chargePaymentMethodDetails'Sofort :: (GHC.Maybe.Maybe PaymentMethodDetailsSofort),
                                   chargePaymentMethodDetails'StripeAccount :: (GHC.Maybe.Maybe PaymentMethodDetailsStripeAccount),
                                   chargePaymentMethodDetails'Type :: (GHC.Maybe.Maybe GHC.Base.String),
                                   chargePaymentMethodDetails'Wechat :: (GHC.Maybe.Maybe PaymentMethodDetailsWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ChargePaymentMethodDetails'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ach_credit_transfer" (chargePaymentMethodDetails'AchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (chargePaymentMethodDetails'AchDebit obj) : (Data.Aeson..=) "alipay" (chargePaymentMethodDetails'Alipay obj) : (Data.Aeson..=) "bancontact" (chargePaymentMethodDetails'Bancontact obj) : (Data.Aeson..=) "card" (chargePaymentMethodDetails'Card obj) : (Data.Aeson..=) "card_present" (chargePaymentMethodDetails'CardPresent obj) : (Data.Aeson..=) "eps" (chargePaymentMethodDetails'Eps obj) : (Data.Aeson..=) "fpx" (chargePaymentMethodDetails'Fpx obj) : (Data.Aeson..=) "giropay" (chargePaymentMethodDetails'Giropay obj) : (Data.Aeson..=) "ideal" (chargePaymentMethodDetails'Ideal obj) : (Data.Aeson..=) "klarna" (chargePaymentMethodDetails'Klarna obj) : (Data.Aeson..=) "multibanco" (chargePaymentMethodDetails'Multibanco obj) : (Data.Aeson..=) "p24" (chargePaymentMethodDetails'P24 obj) : (Data.Aeson..=) "sepa_debit" (chargePaymentMethodDetails'SepaDebit obj) : (Data.Aeson..=) "sofort" (chargePaymentMethodDetails'Sofort obj) : (Data.Aeson..=) "stripe_account" (chargePaymentMethodDetails'StripeAccount obj) : (Data.Aeson..=) "type" (chargePaymentMethodDetails'Type obj) : (Data.Aeson..=) "wechat" (chargePaymentMethodDetails'Wechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ach_credit_transfer" (chargePaymentMethodDetails'AchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (chargePaymentMethodDetails'AchDebit obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (chargePaymentMethodDetails'Alipay obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (chargePaymentMethodDetails'Bancontact obj) GHC.Base.<> ((Data.Aeson..=) "card" (chargePaymentMethodDetails'Card obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (chargePaymentMethodDetails'CardPresent obj) GHC.Base.<> ((Data.Aeson..=) "eps" (chargePaymentMethodDetails'Eps obj) GHC.Base.<> ((Data.Aeson..=) "fpx" (chargePaymentMethodDetails'Fpx obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (chargePaymentMethodDetails'Giropay obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (chargePaymentMethodDetails'Ideal obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (chargePaymentMethodDetails'Klarna obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (chargePaymentMethodDetails'Multibanco obj) GHC.Base.<> ((Data.Aeson..=) "p24" (chargePaymentMethodDetails'P24 obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (chargePaymentMethodDetails'SepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (chargePaymentMethodDetails'Sofort obj) GHC.Base.<> ((Data.Aeson..=) "stripe_account" (chargePaymentMethodDetails'StripeAccount obj) GHC.Base.<> ((Data.Aeson..=) "type" (chargePaymentMethodDetails'Type obj) GHC.Base.<> (Data.Aeson..=) "wechat" (chargePaymentMethodDetails'Wechat obj))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ChargePaymentMethodDetails'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargePaymentMethodDetails'" (\obj -> (((((((((((((((((GHC.Base.pure ChargePaymentMethodDetails' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fpx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stripe_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
data ChargeRefunds'
    = ChargeRefunds' {chargeRefunds'Data :: ([] Refund),
                      chargeRefunds'HasMore :: GHC.Types.Bool,
                      chargeRefunds'Object :: ChargeRefunds'Object',
                      chargeRefunds'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ChargeRefunds'Object'
    = ChargeRefunds'Object'EnumOther Data.Aeson.Types.Internal.Value
    | ChargeRefunds'Object'EnumTyped GHC.Base.String
    | ChargeRefunds'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ChargeRefunds'Object'
    where toJSON (ChargeRefunds'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ChargeRefunds'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ChargeRefunds'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON ChargeRefunds'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then ChargeRefunds'Object'EnumStringList
                                          else ChargeRefunds'Object'EnumOther val)
instance Data.Aeson.ToJSON ChargeRefunds'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (chargeRefunds'Data obj) : (Data.Aeson..=) "has_more" (chargeRefunds'HasMore obj) : (Data.Aeson..=) "object" (chargeRefunds'Object obj) : (Data.Aeson..=) "url" (chargeRefunds'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (chargeRefunds'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (chargeRefunds'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (chargeRefunds'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (chargeRefunds'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ChargeRefunds'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeRefunds'" (\obj -> (((GHC.Base.pure ChargeRefunds' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data ChargeReview'Variants
    = ChargeReview'Variant1 Review
    | ChargeReview'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeReview'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeReview'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeShipping'
    = ChargeShipping' {chargeShipping'Address :: (GHC.Maybe.Maybe Address),
                       chargeShipping'Carrier :: (GHC.Maybe.Maybe GHC.Base.String),
                       chargeShipping'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                       chargeShipping'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                       chargeShipping'TrackingNumber :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ChargeShipping'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (chargeShipping'Address obj) : (Data.Aeson..=) "carrier" (chargeShipping'Carrier obj) : (Data.Aeson..=) "name" (chargeShipping'Name obj) : (Data.Aeson..=) "phone" (chargeShipping'Phone obj) : (Data.Aeson..=) "tracking_number" (chargeShipping'TrackingNumber obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (chargeShipping'Address obj) GHC.Base.<> ((Data.Aeson..=) "carrier" (chargeShipping'Carrier obj) GHC.Base.<> ((Data.Aeson..=) "name" (chargeShipping'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (chargeShipping'Phone obj) GHC.Base.<> (Data.Aeson..=) "tracking_number" (chargeShipping'TrackingNumber obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON ChargeShipping'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeShipping'" (\obj -> ((((GHC.Base.pure ChargeShipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number"))
data ChargeSourceTransfer'Variants
    = ChargeSourceTransfer'Variant1 Transfer
    | ChargeSourceTransfer'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeSourceTransfer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeSourceTransfer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeTransfer'Variants
    = ChargeTransfer'Variant1 Transfer
    | ChargeTransfer'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeTransfer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeTransfer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ChargeTransferData'
    = ChargeTransferData' {chargeTransferData'Amount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                           chargeTransferData'Destination :: (GHC.Maybe.Maybe ChargeTransferData'Destination'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ChargeTransferData'Destination'Variants
    = ChargeTransferData'Destination'Variant1 Account
    | ChargeTransferData'Destination'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeTransferData'Destination'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeTransferData'Destination'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON ChargeTransferData'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (chargeTransferData'Amount obj) : (Data.Aeson..=) "destination" (chargeTransferData'Destination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (chargeTransferData'Amount obj) GHC.Base.<> (Data.Aeson..=) "destination" (chargeTransferData'Destination obj))
instance Data.Aeson.Types.FromJSON.FromJSON ChargeTransferData'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeTransferData'" (\obj -> (GHC.Base.pure ChargeTransferData' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination"))
instance Data.Aeson.ToJSON Charge
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (chargeAmount obj) : (Data.Aeson..=) "amount_refunded" (chargeAmountRefunded obj) : (Data.Aeson..=) "application" (chargeApplication obj) : (Data.Aeson..=) "application_fee" (chargeApplicationFee obj) : (Data.Aeson..=) "application_fee_amount" (chargeApplicationFeeAmount obj) : (Data.Aeson..=) "balance_transaction" (chargeBalanceTransaction obj) : (Data.Aeson..=) "billing_details" (chargeBillingDetails obj) : (Data.Aeson..=) "captured" (chargeCaptured obj) : (Data.Aeson..=) "created" (chargeCreated obj) : (Data.Aeson..=) "currency" (chargeCurrency obj) : (Data.Aeson..=) "customer" (chargeCustomer obj) : (Data.Aeson..=) "description" (chargeDescription obj) : (Data.Aeson..=) "disputed" (chargeDisputed obj) : (Data.Aeson..=) "failure_code" (chargeFailureCode obj) : (Data.Aeson..=) "failure_message" (chargeFailureMessage obj) : (Data.Aeson..=) "fraud_details" (chargeFraudDetails obj) : (Data.Aeson..=) "id" (chargeId obj) : (Data.Aeson..=) "invoice" (chargeInvoice obj) : (Data.Aeson..=) "livemode" (chargeLivemode obj) : (Data.Aeson..=) "metadata" (chargeMetadata obj) : (Data.Aeson..=) "object" (chargeObject obj) : (Data.Aeson..=) "on_behalf_of" (chargeOnBehalfOf obj) : (Data.Aeson..=) "order" (chargeOrder obj) : (Data.Aeson..=) "outcome" (chargeOutcome obj) : (Data.Aeson..=) "paid" (chargePaid obj) : (Data.Aeson..=) "payment_intent" (chargePaymentIntent obj) : (Data.Aeson..=) "payment_method" (chargePaymentMethod obj) : (Data.Aeson..=) "payment_method_details" (chargePaymentMethodDetails obj) : (Data.Aeson..=) "receipt_email" (chargeReceiptEmail obj) : (Data.Aeson..=) "receipt_number" (chargeReceiptNumber obj) : (Data.Aeson..=) "receipt_url" (chargeReceiptUrl obj) : (Data.Aeson..=) "refunded" (chargeRefunded obj) : (Data.Aeson..=) "refunds" (chargeRefunds obj) : (Data.Aeson..=) "review" (chargeReview obj) : (Data.Aeson..=) "shipping" (chargeShipping obj) : (Data.Aeson..=) "source_transfer" (chargeSourceTransfer obj) : (Data.Aeson..=) "statement_descriptor" (chargeStatementDescriptor obj) : (Data.Aeson..=) "statement_descriptor_suffix" (chargeStatementDescriptorSuffix obj) : (Data.Aeson..=) "status" (chargeStatus obj) : (Data.Aeson..=) "transfer" (chargeTransfer obj) : (Data.Aeson..=) "transfer_data" (chargeTransferData obj) : (Data.Aeson..=) "transfer_group" (chargeTransferGroup obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (chargeAmount obj) GHC.Base.<> ((Data.Aeson..=) "amount_refunded" (chargeAmountRefunded obj) GHC.Base.<> ((Data.Aeson..=) "application" (chargeApplication obj) GHC.Base.<> ((Data.Aeson..=) "application_fee" (chargeApplicationFee obj) GHC.Base.<> ((Data.Aeson..=) "application_fee_amount" (chargeApplicationFeeAmount obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (chargeBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "billing_details" (chargeBillingDetails obj) GHC.Base.<> ((Data.Aeson..=) "captured" (chargeCaptured obj) GHC.Base.<> ((Data.Aeson..=) "created" (chargeCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (chargeCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (chargeCustomer obj) GHC.Base.<> ((Data.Aeson..=) "description" (chargeDescription obj) GHC.Base.<> ((Data.Aeson..=) "disputed" (chargeDisputed obj) GHC.Base.<> ((Data.Aeson..=) "failure_code" (chargeFailureCode obj) GHC.Base.<> ((Data.Aeson..=) "failure_message" (chargeFailureMessage obj) GHC.Base.<> ((Data.Aeson..=) "fraud_details" (chargeFraudDetails obj) GHC.Base.<> ((Data.Aeson..=) "id" (chargeId obj) GHC.Base.<> ((Data.Aeson..=) "invoice" (chargeInvoice obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (chargeLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (chargeMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (chargeObject obj) GHC.Base.<> ((Data.Aeson..=) "on_behalf_of" (chargeOnBehalfOf obj) GHC.Base.<> ((Data.Aeson..=) "order" (chargeOrder obj) GHC.Base.<> ((Data.Aeson..=) "outcome" (chargeOutcome obj) GHC.Base.<> ((Data.Aeson..=) "paid" (chargePaid obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (chargePaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "payment_method" (chargePaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "payment_method_details" (chargePaymentMethodDetails obj) GHC.Base.<> ((Data.Aeson..=) "receipt_email" (chargeReceiptEmail obj) GHC.Base.<> ((Data.Aeson..=) "receipt_number" (chargeReceiptNumber obj) GHC.Base.<> ((Data.Aeson..=) "receipt_url" (chargeReceiptUrl obj) GHC.Base.<> ((Data.Aeson..=) "refunded" (chargeRefunded obj) GHC.Base.<> ((Data.Aeson..=) "refunds" (chargeRefunds obj) GHC.Base.<> ((Data.Aeson..=) "review" (chargeReview obj) GHC.Base.<> ((Data.Aeson..=) "shipping" (chargeShipping obj) GHC.Base.<> ((Data.Aeson..=) "source_transfer" (chargeSourceTransfer obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (chargeStatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor_suffix" (chargeStatementDescriptorSuffix obj) GHC.Base.<> ((Data.Aeson..=) "status" (chargeStatus obj) GHC.Base.<> ((Data.Aeson..=) "transfer" (chargeTransfer obj) GHC.Base.<> ((Data.Aeson..=) "transfer_data" (chargeTransferData obj) GHC.Base.<> (Data.Aeson..=) "transfer_group" (chargeTransferGroup obj))))))))))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Charge
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Charge" (\obj -> (((((((((((((((((((((((((((((((((((((((((GHC.Base.pure Charge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_refunded")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "billing_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "captured")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disputed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fraud_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "outcome")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "paid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "receipt_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refunded")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refunds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "review")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor_suffix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_group"))
data ChargeTransferData
    = ChargeTransferData {chargeTransferDataAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                          chargeTransferDataDestination :: ChargeTransferDataDestination'Variants}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ChargeTransferDataDestination'Variants
    = ChargeTransferDataDestination'Variant1 Account
    | ChargeTransferDataDestination'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ChargeTransferDataDestination'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ChargeTransferDataDestination'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON ChargeTransferData
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (chargeTransferDataAmount obj) : (Data.Aeson..=) "destination" (chargeTransferDataDestination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (chargeTransferDataAmount obj) GHC.Base.<> (Data.Aeson..=) "destination" (chargeTransferDataDestination obj))
instance Data.Aeson.Types.FromJSON.FromJSON ChargeTransferData
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeTransferData" (\obj -> (GHC.Base.pure ChargeTransferData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination"))
data Checkout'session
    = Checkout'session {checkout'sessionBillingAddressCollection :: (GHC.Maybe.Maybe GHC.Base.String),
                        checkout'sessionCancelUrl :: GHC.Base.String,
                        checkout'sessionClientReferenceId :: (GHC.Maybe.Maybe GHC.Base.String),
                        checkout'sessionCustomer :: (GHC.Maybe.Maybe Checkout'sessionCustomer'Variants),
                        checkout'sessionCustomerEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                        checkout'sessionDisplayItems :: (GHC.Maybe.Maybe ([] CheckoutSessionDisplayItem)),
                        checkout'sessionId :: GHC.Base.String,
                        checkout'sessionLivemode :: GHC.Types.Bool,
                        checkout'sessionLocale :: (GHC.Maybe.Maybe Checkout'sessionLocale'),
                        checkout'sessionMetadata :: (GHC.Maybe.Maybe Checkout'sessionMetadata'),
                        checkout'sessionMode :: (GHC.Maybe.Maybe Checkout'sessionMode'),
                        checkout'sessionObject :: Checkout'sessionObject',
                        checkout'sessionPaymentIntent :: (GHC.Maybe.Maybe Checkout'sessionPaymentIntent'Variants),
                        checkout'sessionPaymentMethodTypes :: ([] GHC.Base.String),
                        checkout'sessionSetupIntent :: (GHC.Maybe.Maybe Checkout'sessionSetupIntent'Variants),
                        checkout'sessionSubmitType :: (GHC.Maybe.Maybe Checkout'sessionSubmitType'),
                        checkout'sessionSubscription :: (GHC.Maybe.Maybe Checkout'sessionSubscription'Variants),
                        checkout'sessionSuccessUrl :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Checkout'sessionCustomer'Variants
    = Checkout'sessionCustomer'Variant1 Customer
    | Checkout'sessionCustomer'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Checkout'sessionCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Checkout'sessionCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Checkout'sessionLocale'
    = Checkout'sessionLocale'EnumOther Data.Aeson.Types.Internal.Value
    | Checkout'sessionLocale'EnumTyped GHC.Base.String
    | Checkout'sessionLocale'EnumStringAuto
    | Checkout'sessionLocale'EnumStringDa
    | Checkout'sessionLocale'EnumStringDe
    | Checkout'sessionLocale'EnumStringEn
    | Checkout'sessionLocale'EnumStringEs
    | Checkout'sessionLocale'EnumStringFi
    | Checkout'sessionLocale'EnumStringFr
    | Checkout'sessionLocale'EnumStringIt
    | Checkout'sessionLocale'EnumStringJa
    | Checkout'sessionLocale'EnumStringMs
    | Checkout'sessionLocale'EnumStringNb
    | Checkout'sessionLocale'EnumStringNl
    | Checkout'sessionLocale'EnumStringPl
    | Checkout'sessionLocale'EnumStringPt
    | Checkout'sessionLocale'EnumStringSv
    | Checkout'sessionLocale'EnumStringZh
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Checkout'sessionLocale'
    where toJSON (Checkout'sessionLocale'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Checkout'sessionLocale'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Checkout'sessionLocale'EnumStringAuto) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto"
          toJSON (Checkout'sessionLocale'EnumStringDa) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "da"
          toJSON (Checkout'sessionLocale'EnumStringDe) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "de"
          toJSON (Checkout'sessionLocale'EnumStringEn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "en"
          toJSON (Checkout'sessionLocale'EnumStringEs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "es"
          toJSON (Checkout'sessionLocale'EnumStringFi) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fi"
          toJSON (Checkout'sessionLocale'EnumStringFr) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fr"
          toJSON (Checkout'sessionLocale'EnumStringIt) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "it"
          toJSON (Checkout'sessionLocale'EnumStringJa) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ja"
          toJSON (Checkout'sessionLocale'EnumStringMs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ms"
          toJSON (Checkout'sessionLocale'EnumStringNb) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nb"
          toJSON (Checkout'sessionLocale'EnumStringNl) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nl"
          toJSON (Checkout'sessionLocale'EnumStringPl) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pl"
          toJSON (Checkout'sessionLocale'EnumStringPt) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pt"
          toJSON (Checkout'sessionLocale'EnumStringSv) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sv"
          toJSON (Checkout'sessionLocale'EnumStringZh) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "zh"
instance Data.Aeson.FromJSON Checkout'sessionLocale'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto")
                                          then Checkout'sessionLocale'EnumStringAuto
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "da")
                                                then Checkout'sessionLocale'EnumStringDa
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "de")
                                                      then Checkout'sessionLocale'EnumStringDe
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "en")
                                                            then Checkout'sessionLocale'EnumStringEn
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "es")
                                                                  then Checkout'sessionLocale'EnumStringEs
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fi")
                                                                        then Checkout'sessionLocale'EnumStringFi
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fr")
                                                                              then Checkout'sessionLocale'EnumStringFr
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "it")
                                                                                    then Checkout'sessionLocale'EnumStringIt
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ja")
                                                                                          then Checkout'sessionLocale'EnumStringJa
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ms")
                                                                                                then Checkout'sessionLocale'EnumStringMs
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nb")
                                                                                                      then Checkout'sessionLocale'EnumStringNb
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nl")
                                                                                                            then Checkout'sessionLocale'EnumStringNl
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pl")
                                                                                                                  then Checkout'sessionLocale'EnumStringPl
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pt")
                                                                                                                        then Checkout'sessionLocale'EnumStringPt
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sv")
                                                                                                                              then Checkout'sessionLocale'EnumStringSv
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "zh")
                                                                                                                                    then Checkout'sessionLocale'EnumStringZh
                                                                                                                                    else Checkout'sessionLocale'EnumOther val)
data Checkout'sessionMetadata'
    = Checkout'sessionMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Checkout'sessionMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON Checkout'sessionMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Checkout'sessionMetadata'" (\obj -> GHC.Base.pure Checkout'sessionMetadata')
data Checkout'sessionMode'
    = Checkout'sessionMode'EnumOther Data.Aeson.Types.Internal.Value
    | Checkout'sessionMode'EnumTyped GHC.Base.String
    | Checkout'sessionMode'EnumStringPayment
    | Checkout'sessionMode'EnumStringSetup
    | Checkout'sessionMode'EnumStringSubscription
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Checkout'sessionMode'
    where toJSON (Checkout'sessionMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Checkout'sessionMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Checkout'sessionMode'EnumStringPayment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment"
          toJSON (Checkout'sessionMode'EnumStringSetup) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "setup"
          toJSON (Checkout'sessionMode'EnumStringSubscription) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription"
instance Data.Aeson.FromJSON Checkout'sessionMode'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment")
                                          then Checkout'sessionMode'EnumStringPayment
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "setup")
                                                then Checkout'sessionMode'EnumStringSetup
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription")
                                                      then Checkout'sessionMode'EnumStringSubscription
                                                      else Checkout'sessionMode'EnumOther val)
data Checkout'sessionObject'
    = Checkout'sessionObject'EnumOther Data.Aeson.Types.Internal.Value
    | Checkout'sessionObject'EnumTyped GHC.Base.String
    | Checkout'sessionObject'EnumStringCheckout'session
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Checkout'sessionObject'
    where toJSON (Checkout'sessionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Checkout'sessionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Checkout'sessionObject'EnumStringCheckout'session) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "checkout.session"
instance Data.Aeson.FromJSON Checkout'sessionObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "checkout.session")
                                          then Checkout'sessionObject'EnumStringCheckout'session
                                          else Checkout'sessionObject'EnumOther val)
data Checkout'sessionPaymentIntent'Variants
    = Checkout'sessionPaymentIntent'Variant1 PaymentIntent
    | Checkout'sessionPaymentIntent'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Checkout'sessionPaymentIntent'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Checkout'sessionPaymentIntent'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Checkout'sessionSetupIntent'Variants
    = Checkout'sessionSetupIntent'Variant1 SetupIntent
    | Checkout'sessionSetupIntent'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Checkout'sessionSetupIntent'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Checkout'sessionSetupIntent'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Checkout'sessionSubmitType'
    = Checkout'sessionSubmitType'EnumOther Data.Aeson.Types.Internal.Value
    | Checkout'sessionSubmitType'EnumTyped GHC.Base.String
    | Checkout'sessionSubmitType'EnumStringAuto
    | Checkout'sessionSubmitType'EnumStringBook
    | Checkout'sessionSubmitType'EnumStringDonate
    | Checkout'sessionSubmitType'EnumStringPay
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Checkout'sessionSubmitType'
    where toJSON (Checkout'sessionSubmitType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Checkout'sessionSubmitType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Checkout'sessionSubmitType'EnumStringAuto) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto"
          toJSON (Checkout'sessionSubmitType'EnumStringBook) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book"
          toJSON (Checkout'sessionSubmitType'EnumStringDonate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "donate"
          toJSON (Checkout'sessionSubmitType'EnumStringPay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pay"
instance Data.Aeson.FromJSON Checkout'sessionSubmitType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto")
                                          then Checkout'sessionSubmitType'EnumStringAuto
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book")
                                                then Checkout'sessionSubmitType'EnumStringBook
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "donate")
                                                      then Checkout'sessionSubmitType'EnumStringDonate
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pay")
                                                            then Checkout'sessionSubmitType'EnumStringPay
                                                            else Checkout'sessionSubmitType'EnumOther val)
data Checkout'sessionSubscription'Variants
    = Checkout'sessionSubscription'Variant1 Subscription
    | Checkout'sessionSubscription'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Checkout'sessionSubscription'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Checkout'sessionSubscription'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Checkout'session
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_address_collection" (checkout'sessionBillingAddressCollection obj) : (Data.Aeson..=) "cancel_url" (checkout'sessionCancelUrl obj) : (Data.Aeson..=) "client_reference_id" (checkout'sessionClientReferenceId obj) : (Data.Aeson..=) "customer" (checkout'sessionCustomer obj) : (Data.Aeson..=) "customer_email" (checkout'sessionCustomerEmail obj) : (Data.Aeson..=) "display_items" (checkout'sessionDisplayItems obj) : (Data.Aeson..=) "id" (checkout'sessionId obj) : (Data.Aeson..=) "livemode" (checkout'sessionLivemode obj) : (Data.Aeson..=) "locale" (checkout'sessionLocale obj) : (Data.Aeson..=) "metadata" (checkout'sessionMetadata obj) : (Data.Aeson..=) "mode" (checkout'sessionMode obj) : (Data.Aeson..=) "object" (checkout'sessionObject obj) : (Data.Aeson..=) "payment_intent" (checkout'sessionPaymentIntent obj) : (Data.Aeson..=) "payment_method_types" (checkout'sessionPaymentMethodTypes obj) : (Data.Aeson..=) "setup_intent" (checkout'sessionSetupIntent obj) : (Data.Aeson..=) "submit_type" (checkout'sessionSubmitType obj) : (Data.Aeson..=) "subscription" (checkout'sessionSubscription obj) : (Data.Aeson..=) "success_url" (checkout'sessionSuccessUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_address_collection" (checkout'sessionBillingAddressCollection obj) GHC.Base.<> ((Data.Aeson..=) "cancel_url" (checkout'sessionCancelUrl obj) GHC.Base.<> ((Data.Aeson..=) "client_reference_id" (checkout'sessionClientReferenceId obj) GHC.Base.<> ((Data.Aeson..=) "customer" (checkout'sessionCustomer obj) GHC.Base.<> ((Data.Aeson..=) "customer_email" (checkout'sessionCustomerEmail obj) GHC.Base.<> ((Data.Aeson..=) "display_items" (checkout'sessionDisplayItems obj) GHC.Base.<> ((Data.Aeson..=) "id" (checkout'sessionId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (checkout'sessionLivemode obj) GHC.Base.<> ((Data.Aeson..=) "locale" (checkout'sessionLocale obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (checkout'sessionMetadata obj) GHC.Base.<> ((Data.Aeson..=) "mode" (checkout'sessionMode obj) GHC.Base.<> ((Data.Aeson..=) "object" (checkout'sessionObject obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (checkout'sessionPaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "payment_method_types" (checkout'sessionPaymentMethodTypes obj) GHC.Base.<> ((Data.Aeson..=) "setup_intent" (checkout'sessionSetupIntent obj) GHC.Base.<> ((Data.Aeson..=) "submit_type" (checkout'sessionSubmitType obj) GHC.Base.<> ((Data.Aeson..=) "subscription" (checkout'sessionSubscription obj) GHC.Base.<> (Data.Aeson..=) "success_url" (checkout'sessionSuccessUrl obj))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Checkout'session
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Checkout'session" (\obj -> (((((((((((((((((GHC.Base.pure Checkout'session GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_address_collection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cancel_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_reference_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "display_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "submit_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success_url"))
data CheckoutSessionDisplayItem
    = CheckoutSessionDisplayItem {checkoutSessionDisplayItemAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                  checkoutSessionDisplayItemCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                                  checkoutSessionDisplayItemCustom :: (GHC.Maybe.Maybe CheckoutSessionCustomDisplayItemDescription),
                                  checkoutSessionDisplayItemPlan :: (GHC.Maybe.Maybe Plan),
                                  checkoutSessionDisplayItemQuantity :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                  checkoutSessionDisplayItemSku :: (GHC.Maybe.Maybe Sku),
                                  checkoutSessionDisplayItemType :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CheckoutSessionDisplayItem
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (checkoutSessionDisplayItemAmount obj) : (Data.Aeson..=) "currency" (checkoutSessionDisplayItemCurrency obj) : (Data.Aeson..=) "custom" (checkoutSessionDisplayItemCustom obj) : (Data.Aeson..=) "plan" (checkoutSessionDisplayItemPlan obj) : (Data.Aeson..=) "quantity" (checkoutSessionDisplayItemQuantity obj) : (Data.Aeson..=) "sku" (checkoutSessionDisplayItemSku obj) : (Data.Aeson..=) "type" (checkoutSessionDisplayItemType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (checkoutSessionDisplayItemAmount obj) GHC.Base.<> ((Data.Aeson..=) "currency" (checkoutSessionDisplayItemCurrency obj) GHC.Base.<> ((Data.Aeson..=) "custom" (checkoutSessionDisplayItemCustom obj) GHC.Base.<> ((Data.Aeson..=) "plan" (checkoutSessionDisplayItemPlan obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (checkoutSessionDisplayItemQuantity obj) GHC.Base.<> ((Data.Aeson..=) "sku" (checkoutSessionDisplayItemSku obj) GHC.Base.<> (Data.Aeson..=) "type" (checkoutSessionDisplayItemType obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON CheckoutSessionDisplayItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CheckoutSessionDisplayItem" (\obj -> ((((((GHC.Base.pure CheckoutSessionDisplayItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sku")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
data ConnectCollectionTransfer
    = ConnectCollectionTransfer {connectCollectionTransferAmount :: GHC.Integer.Type.Integer,
                                 connectCollectionTransferCurrency :: GHC.Base.String,
                                 connectCollectionTransferDestination :: ConnectCollectionTransferDestination'Variants,
                                 connectCollectionTransferId :: GHC.Base.String,
                                 connectCollectionTransferLivemode :: GHC.Types.Bool,
                                 connectCollectionTransferObject :: ConnectCollectionTransferObject'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ConnectCollectionTransferDestination'Variants
    = ConnectCollectionTransferDestination'Variant1 Account
    | ConnectCollectionTransferDestination'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ConnectCollectionTransferDestination'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ConnectCollectionTransferDestination'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ConnectCollectionTransferObject'
    = ConnectCollectionTransferObject'EnumOther Data.Aeson.Types.Internal.Value
    | ConnectCollectionTransferObject'EnumTyped GHC.Base.String
    | ConnectCollectionTransferObject'EnumStringConnectCollectionTransfer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ConnectCollectionTransferObject'
    where toJSON (ConnectCollectionTransferObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ConnectCollectionTransferObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ConnectCollectionTransferObject'EnumStringConnectCollectionTransfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "connect_collection_transfer"
instance Data.Aeson.FromJSON ConnectCollectionTransferObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "connect_collection_transfer")
                                          then ConnectCollectionTransferObject'EnumStringConnectCollectionTransfer
                                          else ConnectCollectionTransferObject'EnumOther val)
instance Data.Aeson.ToJSON ConnectCollectionTransfer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (connectCollectionTransferAmount obj) : (Data.Aeson..=) "currency" (connectCollectionTransferCurrency obj) : (Data.Aeson..=) "destination" (connectCollectionTransferDestination obj) : (Data.Aeson..=) "id" (connectCollectionTransferId obj) : (Data.Aeson..=) "livemode" (connectCollectionTransferLivemode obj) : (Data.Aeson..=) "object" (connectCollectionTransferObject obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (connectCollectionTransferAmount obj) GHC.Base.<> ((Data.Aeson..=) "currency" (connectCollectionTransferCurrency obj) GHC.Base.<> ((Data.Aeson..=) "destination" (connectCollectionTransferDestination obj) GHC.Base.<> ((Data.Aeson..=) "id" (connectCollectionTransferId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (connectCollectionTransferLivemode obj) GHC.Base.<> (Data.Aeson..=) "object" (connectCollectionTransferObject obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON ConnectCollectionTransfer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ConnectCollectionTransfer" (\obj -> (((((GHC.Base.pure ConnectCollectionTransfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object"))
data CreditNote
    = CreditNote {creditNoteAmount :: GHC.Integer.Type.Integer,
                  creditNoteCreated :: GHC.Integer.Type.Integer,
                  creditNoteCurrency :: GHC.Base.String,
                  creditNoteCustomer :: CreditNoteCustomer'Variants,
                  creditNoteCustomerBalanceTransaction :: (GHC.Maybe.Maybe CreditNoteCustomerBalanceTransaction'Variants),
                  creditNoteDiscountAmount :: GHC.Integer.Type.Integer,
                  creditNoteId :: GHC.Base.String,
                  creditNoteInvoice :: CreditNoteInvoice'Variants,
                  creditNoteLines :: CreditNoteLines',
                  creditNoteLivemode :: GHC.Types.Bool,
                  creditNoteMemo :: (GHC.Maybe.Maybe GHC.Base.String),
                  creditNoteMetadata :: CreditNoteMetadata',
                  creditNoteNumber :: GHC.Base.String,
                  creditNoteObject :: CreditNoteObject',
                  creditNoteOutOfBandAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                  creditNotePdf :: GHC.Base.String,
                  creditNoteReason :: (GHC.Maybe.Maybe CreditNoteReason'),
                  creditNoteRefund :: (GHC.Maybe.Maybe CreditNoteRefund'Variants),
                  creditNoteStatus :: CreditNoteStatus',
                  creditNoteSubtotal :: GHC.Integer.Type.Integer,
                  creditNoteTaxAmounts :: ([] CreditNoteTaxAmount),
                  creditNoteTotal :: GHC.Integer.Type.Integer,
                  creditNoteType :: CreditNoteType',
                  creditNoteVoidedAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CreditNoteCustomer'Variants
    = CreditNoteCustomer'Variant1 Customer
    | CreditNoteCustomer'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CreditNoteCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CreditNoteCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CreditNoteCustomerBalanceTransaction'Variants
    = CreditNoteCustomerBalanceTransaction'Variant1 CustomerBalanceTransaction
    | CreditNoteCustomerBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CreditNoteCustomerBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CreditNoteCustomerBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CreditNoteInvoice'Variants
    = CreditNoteInvoice'Variant1 Invoice
    | CreditNoteInvoice'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CreditNoteInvoice'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CreditNoteInvoice'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CreditNoteLines'
    = CreditNoteLines' {creditNoteLines'Data :: ([] CreditNoteLineItem),
                        creditNoteLines'HasMore :: GHC.Types.Bool,
                        creditNoteLines'Object :: CreditNoteLines'Object',
                        creditNoteLines'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CreditNoteLines'Object'
    = CreditNoteLines'Object'EnumOther Data.Aeson.Types.Internal.Value
    | CreditNoteLines'Object'EnumTyped GHC.Base.String
    | CreditNoteLines'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreditNoteLines'Object'
    where toJSON (CreditNoteLines'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteLines'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteLines'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON CreditNoteLines'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then CreditNoteLines'Object'EnumStringList
                                          else CreditNoteLines'Object'EnumOther val)
instance Data.Aeson.ToJSON CreditNoteLines'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (creditNoteLines'Data obj) : (Data.Aeson..=) "has_more" (creditNoteLines'HasMore obj) : (Data.Aeson..=) "object" (creditNoteLines'Object obj) : (Data.Aeson..=) "url" (creditNoteLines'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (creditNoteLines'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (creditNoteLines'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (creditNoteLines'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (creditNoteLines'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteLines'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreditNoteLines'" (\obj -> (((GHC.Base.pure CreditNoteLines' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data CreditNoteMetadata'
    = CreditNoteMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreditNoteMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreditNoteMetadata'" (\obj -> GHC.Base.pure CreditNoteMetadata')
data CreditNoteObject'
    = CreditNoteObject'EnumOther Data.Aeson.Types.Internal.Value
    | CreditNoteObject'EnumTyped GHC.Base.String
    | CreditNoteObject'EnumStringCreditNote
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreditNoteObject'
    where toJSON (CreditNoteObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteObject'EnumStringCreditNote) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_note"
instance Data.Aeson.FromJSON CreditNoteObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_note")
                                          then CreditNoteObject'EnumStringCreditNote
                                          else CreditNoteObject'EnumOther val)
data CreditNoteReason'
    = CreditNoteReason'EnumOther Data.Aeson.Types.Internal.Value
    | CreditNoteReason'EnumTyped GHC.Base.String
    | CreditNoteReason'EnumStringDuplicate
    | CreditNoteReason'EnumStringFraudulent
    | CreditNoteReason'EnumStringOrderChange
    | CreditNoteReason'EnumStringProductUnsatisfactory
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreditNoteReason'
    where toJSON (CreditNoteReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteReason'EnumStringDuplicate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duplicate"
          toJSON (CreditNoteReason'EnumStringFraudulent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fraudulent"
          toJSON (CreditNoteReason'EnumStringOrderChange) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "order_change"
          toJSON (CreditNoteReason'EnumStringProductUnsatisfactory) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "product_unsatisfactory"
instance Data.Aeson.FromJSON CreditNoteReason'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duplicate")
                                          then CreditNoteReason'EnumStringDuplicate
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fraudulent")
                                                then CreditNoteReason'EnumStringFraudulent
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "order_change")
                                                      then CreditNoteReason'EnumStringOrderChange
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "product_unsatisfactory")
                                                            then CreditNoteReason'EnumStringProductUnsatisfactory
                                                            else CreditNoteReason'EnumOther val)
data CreditNoteRefund'Variants
    = CreditNoteRefund'Variant1 Refund
    | CreditNoteRefund'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CreditNoteRefund'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CreditNoteRefund'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CreditNoteStatus'
    = CreditNoteStatus'EnumOther Data.Aeson.Types.Internal.Value
    | CreditNoteStatus'EnumTyped GHC.Base.String
    | CreditNoteStatus'EnumStringIssued
    | CreditNoteStatus'EnumStringVoid
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreditNoteStatus'
    where toJSON (CreditNoteStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteStatus'EnumStringIssued) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issued"
          toJSON (CreditNoteStatus'EnumStringVoid) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "void"
instance Data.Aeson.FromJSON CreditNoteStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issued")
                                          then CreditNoteStatus'EnumStringIssued
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "void")
                                                then CreditNoteStatus'EnumStringVoid
                                                else CreditNoteStatus'EnumOther val)
data CreditNoteType'
    = CreditNoteType'EnumOther Data.Aeson.Types.Internal.Value
    | CreditNoteType'EnumTyped GHC.Base.String
    | CreditNoteType'EnumStringPostPayment
    | CreditNoteType'EnumStringPrePayment
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CreditNoteType'
    where toJSON (CreditNoteType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CreditNoteType'EnumStringPostPayment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "post_payment"
          toJSON (CreditNoteType'EnumStringPrePayment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pre_payment"
instance Data.Aeson.FromJSON CreditNoteType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "post_payment")
                                          then CreditNoteType'EnumStringPostPayment
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pre_payment")
                                                then CreditNoteType'EnumStringPrePayment
                                                else CreditNoteType'EnumOther val)
instance Data.Aeson.ToJSON CreditNote
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (creditNoteAmount obj) : (Data.Aeson..=) "created" (creditNoteCreated obj) : (Data.Aeson..=) "currency" (creditNoteCurrency obj) : (Data.Aeson..=) "customer" (creditNoteCustomer obj) : (Data.Aeson..=) "customer_balance_transaction" (creditNoteCustomerBalanceTransaction obj) : (Data.Aeson..=) "discount_amount" (creditNoteDiscountAmount obj) : (Data.Aeson..=) "id" (creditNoteId obj) : (Data.Aeson..=) "invoice" (creditNoteInvoice obj) : (Data.Aeson..=) "lines" (creditNoteLines obj) : (Data.Aeson..=) "livemode" (creditNoteLivemode obj) : (Data.Aeson..=) "memo" (creditNoteMemo obj) : (Data.Aeson..=) "metadata" (creditNoteMetadata obj) : (Data.Aeson..=) "number" (creditNoteNumber obj) : (Data.Aeson..=) "object" (creditNoteObject obj) : (Data.Aeson..=) "out_of_band_amount" (creditNoteOutOfBandAmount obj) : (Data.Aeson..=) "pdf" (creditNotePdf obj) : (Data.Aeson..=) "reason" (creditNoteReason obj) : (Data.Aeson..=) "refund" (creditNoteRefund obj) : (Data.Aeson..=) "status" (creditNoteStatus obj) : (Data.Aeson..=) "subtotal" (creditNoteSubtotal obj) : (Data.Aeson..=) "tax_amounts" (creditNoteTaxAmounts obj) : (Data.Aeson..=) "total" (creditNoteTotal obj) : (Data.Aeson..=) "type" (creditNoteType obj) : (Data.Aeson..=) "voided_at" (creditNoteVoidedAt obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (creditNoteAmount obj) GHC.Base.<> ((Data.Aeson..=) "created" (creditNoteCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (creditNoteCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (creditNoteCustomer obj) GHC.Base.<> ((Data.Aeson..=) "customer_balance_transaction" (creditNoteCustomerBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "discount_amount" (creditNoteDiscountAmount obj) GHC.Base.<> ((Data.Aeson..=) "id" (creditNoteId obj) GHC.Base.<> ((Data.Aeson..=) "invoice" (creditNoteInvoice obj) GHC.Base.<> ((Data.Aeson..=) "lines" (creditNoteLines obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (creditNoteLivemode obj) GHC.Base.<> ((Data.Aeson..=) "memo" (creditNoteMemo obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (creditNoteMetadata obj) GHC.Base.<> ((Data.Aeson..=) "number" (creditNoteNumber obj) GHC.Base.<> ((Data.Aeson..=) "object" (creditNoteObject obj) GHC.Base.<> ((Data.Aeson..=) "out_of_band_amount" (creditNoteOutOfBandAmount obj) GHC.Base.<> ((Data.Aeson..=) "pdf" (creditNotePdf obj) GHC.Base.<> ((Data.Aeson..=) "reason" (creditNoteReason obj) GHC.Base.<> ((Data.Aeson..=) "refund" (creditNoteRefund obj) GHC.Base.<> ((Data.Aeson..=) "status" (creditNoteStatus obj) GHC.Base.<> ((Data.Aeson..=) "subtotal" (creditNoteSubtotal obj) GHC.Base.<> ((Data.Aeson..=) "tax_amounts" (creditNoteTaxAmounts obj) GHC.Base.<> ((Data.Aeson..=) "total" (creditNoteTotal obj) GHC.Base.<> ((Data.Aeson..=) "type" (creditNoteType obj) GHC.Base.<> (Data.Aeson..=) "voided_at" (creditNoteVoidedAt obj))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON CreditNote
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CreditNote" (\obj -> (((((((((((((((((((((((GHC.Base.pure CreditNote GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discount_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lines")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "memo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "out_of_band_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pdf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_amounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "voided_at"))
data Customer
    = Customer {customerAddress :: (GHC.Maybe.Maybe CustomerAddress'),
                customerBalance :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                customerCreated :: GHC.Integer.Type.Integer,
                customerCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                customerDefaultSource :: (GHC.Maybe.Maybe CustomerDefaultSource'Variants),
                customerDelinquent :: (GHC.Maybe.Maybe GHC.Types.Bool),
                customerDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                customerDiscount :: (GHC.Maybe.Maybe CustomerDiscount'),
                customerEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                customerId :: GHC.Base.String,
                customerInvoicePrefix :: (GHC.Maybe.Maybe GHC.Base.String),
                customerInvoiceSettings :: (GHC.Maybe.Maybe InvoiceSettingCustomerSetting),
                customerLivemode :: GHC.Types.Bool,
                customerMetadata :: (GHC.Maybe.Maybe CustomerMetadata'),
                customerName :: (GHC.Maybe.Maybe GHC.Base.String),
                customerNextInvoiceSequence :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                customerObject :: CustomerObject',
                customerPhone :: (GHC.Maybe.Maybe GHC.Base.String),
                customerPreferredLocales :: (GHC.Maybe.Maybe ([] GHC.Base.String)),
                customerShipping :: (GHC.Maybe.Maybe CustomerShipping'),
                customerSources :: CustomerSources',
                customerSubscriptions :: (GHC.Maybe.Maybe CustomerSubscriptions'),
                customerTaxExempt :: (GHC.Maybe.Maybe CustomerTaxExempt'),
                customerTaxIds :: (GHC.Maybe.Maybe CustomerTaxIds')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CustomerAddress'
    = CustomerAddress' {customerAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                        customerAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                        customerAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                        customerAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                        customerAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                        customerAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (customerAddress'City obj) : (Data.Aeson..=) "country" (customerAddress'Country obj) : (Data.Aeson..=) "line1" (customerAddress'Line1 obj) : (Data.Aeson..=) "line2" (customerAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (customerAddress'PostalCode obj) : (Data.Aeson..=) "state" (customerAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (customerAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (customerAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (customerAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (customerAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (customerAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (customerAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerAddress'" (\obj -> (((((GHC.Base.pure CustomerAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data CustomerDefaultSource'Variants
    = CustomerDefaultSource'Variant1 AlipayAccount
    | CustomerDefaultSource'Variant2 BankAccount
    | CustomerDefaultSource'Variant3 BitcoinReceiver
    | CustomerDefaultSource'Variant4 Card
    | CustomerDefaultSource'Variant5 Source
    | CustomerDefaultSource'Variant6 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CustomerDefaultSource'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CustomerDefaultSource'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CustomerDiscount'
    = CustomerDiscount' {customerDiscount'Coupon :: (GHC.Maybe.Maybe Coupon),
                         customerDiscount'Customer :: (GHC.Maybe.Maybe CustomerDiscount'Customer'Variants),
                         customerDiscount'End :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                         customerDiscount'Object :: (GHC.Maybe.Maybe CustomerDiscount'Object'),
                         customerDiscount'Start :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                         customerDiscount'Subscription :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CustomerDiscount'Customer'Variants
    = CustomerDiscount'Customer'Variant1 Customer
    | CustomerDiscount'Customer'Variant2 DeletedCustomer
    | CustomerDiscount'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CustomerDiscount'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CustomerDiscount'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CustomerDiscount'Object'
    = CustomerDiscount'Object'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerDiscount'Object'EnumTyped GHC.Base.String
    | CustomerDiscount'Object'EnumStringDiscount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerDiscount'Object'
    where toJSON (CustomerDiscount'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerDiscount'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerDiscount'Object'EnumStringDiscount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount"
instance Data.Aeson.FromJSON CustomerDiscount'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount")
                                          then CustomerDiscount'Object'EnumStringDiscount
                                          else CustomerDiscount'Object'EnumOther val)
instance Data.Aeson.ToJSON CustomerDiscount'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "coupon" (customerDiscount'Coupon obj) : (Data.Aeson..=) "customer" (customerDiscount'Customer obj) : (Data.Aeson..=) "end" (customerDiscount'End obj) : (Data.Aeson..=) "object" (customerDiscount'Object obj) : (Data.Aeson..=) "start" (customerDiscount'Start obj) : (Data.Aeson..=) "subscription" (customerDiscount'Subscription obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "coupon" (customerDiscount'Coupon obj) GHC.Base.<> ((Data.Aeson..=) "customer" (customerDiscount'Customer obj) GHC.Base.<> ((Data.Aeson..=) "end" (customerDiscount'End obj) GHC.Base.<> ((Data.Aeson..=) "object" (customerDiscount'Object obj) GHC.Base.<> ((Data.Aeson..=) "start" (customerDiscount'Start obj) GHC.Base.<> (Data.Aeson..=) "subscription" (customerDiscount'Subscription obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerDiscount'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerDiscount'" (\obj -> (((((GHC.Base.pure CustomerDiscount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription"))
data CustomerMetadata'
    = CustomerMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerMetadata'" (\obj -> GHC.Base.pure CustomerMetadata')
data CustomerObject'
    = CustomerObject'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerObject'EnumTyped GHC.Base.String
    | CustomerObject'EnumStringCustomer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerObject'
    where toJSON (CustomerObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerObject'EnumStringCustomer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "customer"
instance Data.Aeson.FromJSON CustomerObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "customer")
                                          then CustomerObject'EnumStringCustomer
                                          else CustomerObject'EnumOther val)
data CustomerShipping'
    = CustomerShipping' {customerShipping'Address :: (GHC.Maybe.Maybe Address),
                         customerShipping'Carrier :: (GHC.Maybe.Maybe GHC.Base.String),
                         customerShipping'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                         customerShipping'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                         customerShipping'TrackingNumber :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerShipping'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (customerShipping'Address obj) : (Data.Aeson..=) "carrier" (customerShipping'Carrier obj) : (Data.Aeson..=) "name" (customerShipping'Name obj) : (Data.Aeson..=) "phone" (customerShipping'Phone obj) : (Data.Aeson..=) "tracking_number" (customerShipping'TrackingNumber obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (customerShipping'Address obj) GHC.Base.<> ((Data.Aeson..=) "carrier" (customerShipping'Carrier obj) GHC.Base.<> ((Data.Aeson..=) "name" (customerShipping'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (customerShipping'Phone obj) GHC.Base.<> (Data.Aeson..=) "tracking_number" (customerShipping'TrackingNumber obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerShipping'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerShipping'" (\obj -> ((((GHC.Base.pure CustomerShipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number"))
data CustomerSources'
    = CustomerSources' {customerSources'Data :: ([] CustomerSources'Data'),
                        customerSources'HasMore :: GHC.Types.Bool,
                        customerSources'Object :: CustomerSources'Object',
                        customerSources'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CustomerSources'Data'
    = CustomerSources'Data' {customerSources'Data'Account :: (GHC.Maybe.Maybe CustomerSources'Data'Account'Variants),
                             customerSources'Data'AccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'AccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'AchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
                             customerSources'Data'AchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
                             customerSources'Data'Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
                             customerSources'Data'AddressCity :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'AddressCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'AddressLine1 :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'AddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'AddressLine2 :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'AddressState :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'AddressZip :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'AddressZipCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Alipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
                             customerSources'Data'Amount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             customerSources'Data'AmountReceived :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             customerSources'Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([] CustomerSources'Data'AvailablePayoutMethods')),
                             customerSources'Data'Bancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
                             customerSources'Data'BankName :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'BitcoinAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             customerSources'Data'BitcoinAmountReceived :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             customerSources'Data'BitcoinUri :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Brand :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Card :: (GHC.Maybe.Maybe SourceTypeCard),
                             customerSources'Data'CardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
                             customerSources'Data'ClientSecret :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'CodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
                             customerSources'Data'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             customerSources'Data'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Customer :: (GHC.Maybe.Maybe CustomerSources'Data'Customer'Variants),
                             customerSources'Data'CvcCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                             customerSources'Data'Description :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'DynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Email :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Eps :: (GHC.Maybe.Maybe SourceTypeEps),
                             customerSources'Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             customerSources'Data'ExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             customerSources'Data'Filled :: (GHC.Maybe.Maybe GHC.Types.Bool),
                             customerSources'Data'Fingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Flow :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Funding :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Giropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
                             customerSources'Data'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Ideal :: (GHC.Maybe.Maybe SourceTypeIdeal),
                             customerSources'Data'InboundAddress :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Klarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
                             customerSources'Data'Last4 :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
                             customerSources'Data'Metadata :: (GHC.Maybe.Maybe CustomerSources'Data'Metadata'),
                             customerSources'Data'Multibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
                             customerSources'Data'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Object :: (GHC.Maybe.Maybe CustomerSources'Data'Object'),
                             customerSources'Data'Owner :: (GHC.Maybe.Maybe CustomerSources'Data'Owner'),
                             customerSources'Data'P24 :: (GHC.Maybe.Maybe SourceTypeP24),
                             customerSources'Data'Payment :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'PaymentAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             customerSources'Data'PaymentCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Receiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
                             customerSources'Data'Recipient :: (GHC.Maybe.Maybe CustomerSources'Data'Recipient'Variants),
                             customerSources'Data'Redirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
                             customerSources'Data'RefundAddress :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Reusable :: (GHC.Maybe.Maybe GHC.Types.Bool),
                             customerSources'Data'RoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'SepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
                             customerSources'Data'Sofort :: (GHC.Maybe.Maybe SourceTypeSofort),
                             customerSources'Data'SourceOrder :: (GHC.Maybe.Maybe SourceOrder),
                             customerSources'Data'StatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Status :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'ThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
                             customerSources'Data'TokenizationMethod :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Transactions :: (GHC.Maybe.Maybe CustomerSources'Data'Transactions'),
                             customerSources'Data'Type :: (GHC.Maybe.Maybe CustomerSources'Data'Type'),
                             customerSources'Data'UncapturedFunds :: (GHC.Maybe.Maybe GHC.Types.Bool),
                             customerSources'Data'Usage :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Used :: (GHC.Maybe.Maybe GHC.Types.Bool),
                             customerSources'Data'UsedForPayment :: (GHC.Maybe.Maybe GHC.Types.Bool),
                             customerSources'Data'Username :: (GHC.Maybe.Maybe GHC.Base.String),
                             customerSources'Data'Wechat :: (GHC.Maybe.Maybe SourceTypeWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CustomerSources'Data'Account'Variants
    = CustomerSources'Data'Account'Variant1 Account
    | CustomerSources'Data'Account'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CustomerSources'Data'Account'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CustomerSources'Data'Account'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CustomerSources'Data'AvailablePayoutMethods'
    = CustomerSources'Data'AvailablePayoutMethods'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerSources'Data'AvailablePayoutMethods'EnumTyped GHC.Base.String
    | CustomerSources'Data'AvailablePayoutMethods'EnumStringInstant
    | CustomerSources'Data'AvailablePayoutMethods'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerSources'Data'AvailablePayoutMethods'
    where toJSON (CustomerSources'Data'AvailablePayoutMethods'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Data'AvailablePayoutMethods'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Data'AvailablePayoutMethods'EnumStringInstant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant"
          toJSON (CustomerSources'Data'AvailablePayoutMethods'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON CustomerSources'Data'AvailablePayoutMethods'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant")
                                          then CustomerSources'Data'AvailablePayoutMethods'EnumStringInstant
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                then CustomerSources'Data'AvailablePayoutMethods'EnumStringStandard
                                                else CustomerSources'Data'AvailablePayoutMethods'EnumOther val)
data CustomerSources'Data'Customer'Variants
    = CustomerSources'Data'Customer'Variant1 Customer
    | CustomerSources'Data'Customer'Variant2 DeletedCustomer
    | CustomerSources'Data'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CustomerSources'Data'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CustomerSources'Data'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CustomerSources'Data'Metadata'
    = CustomerSources'Data'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerSources'Data'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSources'Data'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerSources'Data'Metadata'" (\obj -> GHC.Base.pure CustomerSources'Data'Metadata')
data CustomerSources'Data'Object'
    = CustomerSources'Data'Object'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerSources'Data'Object'EnumTyped GHC.Base.String
    | CustomerSources'Data'Object'EnumStringAlipayAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerSources'Data'Object'
    where toJSON (CustomerSources'Data'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Data'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Data'Object'EnumStringAlipayAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay_account"
instance Data.Aeson.FromJSON CustomerSources'Data'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay_account")
                                          then CustomerSources'Data'Object'EnumStringAlipayAccount
                                          else CustomerSources'Data'Object'EnumOther val)
data CustomerSources'Data'Owner'
    = CustomerSources'Data'Owner' {customerSources'Data'Owner'Address :: (GHC.Maybe.Maybe CustomerSources'Data'Owner'Address'),
                                   customerSources'Data'Owner'Email :: (GHC.Maybe.Maybe GHC.Base.String),
                                   customerSources'Data'Owner'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                                   customerSources'Data'Owner'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                                   customerSources'Data'Owner'VerifiedAddress :: (GHC.Maybe.Maybe CustomerSources'Data'Owner'VerifiedAddress'),
                                   customerSources'Data'Owner'VerifiedEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                                   customerSources'Data'Owner'VerifiedName :: (GHC.Maybe.Maybe GHC.Base.String),
                                   customerSources'Data'Owner'VerifiedPhone :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CustomerSources'Data'Owner'Address'
    = CustomerSources'Data'Owner'Address' {customerSources'Data'Owner'Address'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                           customerSources'Data'Owner'Address'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                           customerSources'Data'Owner'Address'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                           customerSources'Data'Owner'Address'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                           customerSources'Data'Owner'Address'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                           customerSources'Data'Owner'Address'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerSources'Data'Owner'Address'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (customerSources'Data'Owner'Address'City obj) : (Data.Aeson..=) "country" (customerSources'Data'Owner'Address'Country obj) : (Data.Aeson..=) "line1" (customerSources'Data'Owner'Address'Line1 obj) : (Data.Aeson..=) "line2" (customerSources'Data'Owner'Address'Line2 obj) : (Data.Aeson..=) "postal_code" (customerSources'Data'Owner'Address'PostalCode obj) : (Data.Aeson..=) "state" (customerSources'Data'Owner'Address'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (customerSources'Data'Owner'Address'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (customerSources'Data'Owner'Address'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (customerSources'Data'Owner'Address'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (customerSources'Data'Owner'Address'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (customerSources'Data'Owner'Address'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (customerSources'Data'Owner'Address'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSources'Data'Owner'Address'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerSources'Data'Owner'Address'" (\obj -> (((((GHC.Base.pure CustomerSources'Data'Owner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data CustomerSources'Data'Owner'VerifiedAddress'
    = CustomerSources'Data'Owner'VerifiedAddress' {customerSources'Data'Owner'VerifiedAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   customerSources'Data'Owner'VerifiedAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   customerSources'Data'Owner'VerifiedAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   customerSources'Data'Owner'VerifiedAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   customerSources'Data'Owner'VerifiedAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   customerSources'Data'Owner'VerifiedAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerSources'Data'Owner'VerifiedAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (customerSources'Data'Owner'VerifiedAddress'City obj) : (Data.Aeson..=) "country" (customerSources'Data'Owner'VerifiedAddress'Country obj) : (Data.Aeson..=) "line1" (customerSources'Data'Owner'VerifiedAddress'Line1 obj) : (Data.Aeson..=) "line2" (customerSources'Data'Owner'VerifiedAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (customerSources'Data'Owner'VerifiedAddress'PostalCode obj) : (Data.Aeson..=) "state" (customerSources'Data'Owner'VerifiedAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (customerSources'Data'Owner'VerifiedAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (customerSources'Data'Owner'VerifiedAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (customerSources'Data'Owner'VerifiedAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (customerSources'Data'Owner'VerifiedAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (customerSources'Data'Owner'VerifiedAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (customerSources'Data'Owner'VerifiedAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSources'Data'Owner'VerifiedAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerSources'Data'Owner'VerifiedAddress'" (\obj -> (((((GHC.Base.pure CustomerSources'Data'Owner'VerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON CustomerSources'Data'Owner'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (customerSources'Data'Owner'Address obj) : (Data.Aeson..=) "email" (customerSources'Data'Owner'Email obj) : (Data.Aeson..=) "name" (customerSources'Data'Owner'Name obj) : (Data.Aeson..=) "phone" (customerSources'Data'Owner'Phone obj) : (Data.Aeson..=) "verified_address" (customerSources'Data'Owner'VerifiedAddress obj) : (Data.Aeson..=) "verified_email" (customerSources'Data'Owner'VerifiedEmail obj) : (Data.Aeson..=) "verified_name" (customerSources'Data'Owner'VerifiedName obj) : (Data.Aeson..=) "verified_phone" (customerSources'Data'Owner'VerifiedPhone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (customerSources'Data'Owner'Address obj) GHC.Base.<> ((Data.Aeson..=) "email" (customerSources'Data'Owner'Email obj) GHC.Base.<> ((Data.Aeson..=) "name" (customerSources'Data'Owner'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (customerSources'Data'Owner'Phone obj) GHC.Base.<> ((Data.Aeson..=) "verified_address" (customerSources'Data'Owner'VerifiedAddress obj) GHC.Base.<> ((Data.Aeson..=) "verified_email" (customerSources'Data'Owner'VerifiedEmail obj) GHC.Base.<> ((Data.Aeson..=) "verified_name" (customerSources'Data'Owner'VerifiedName obj) GHC.Base.<> (Data.Aeson..=) "verified_phone" (customerSources'Data'Owner'VerifiedPhone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSources'Data'Owner'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerSources'Data'Owner'" (\obj -> (((((((GHC.Base.pure CustomerSources'Data'Owner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))
data CustomerSources'Data'Recipient'Variants
    = CustomerSources'Data'Recipient'Variant1 Recipient
    | CustomerSources'Data'Recipient'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CustomerSources'Data'Recipient'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CustomerSources'Data'Recipient'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CustomerSources'Data'Transactions'
    = CustomerSources'Data'Transactions' {customerSources'Data'Transactions'Data :: ([] BitcoinTransaction),
                                          customerSources'Data'Transactions'HasMore :: GHC.Types.Bool,
                                          customerSources'Data'Transactions'Object :: CustomerSources'Data'Transactions'Object',
                                          customerSources'Data'Transactions'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CustomerSources'Data'Transactions'Object'
    = CustomerSources'Data'Transactions'Object'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerSources'Data'Transactions'Object'EnumTyped GHC.Base.String
    | CustomerSources'Data'Transactions'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerSources'Data'Transactions'Object'
    where toJSON (CustomerSources'Data'Transactions'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Data'Transactions'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Data'Transactions'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON CustomerSources'Data'Transactions'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then CustomerSources'Data'Transactions'Object'EnumStringList
                                          else CustomerSources'Data'Transactions'Object'EnumOther val)
instance Data.Aeson.ToJSON CustomerSources'Data'Transactions'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (customerSources'Data'Transactions'Data obj) : (Data.Aeson..=) "has_more" (customerSources'Data'Transactions'HasMore obj) : (Data.Aeson..=) "object" (customerSources'Data'Transactions'Object obj) : (Data.Aeson..=) "url" (customerSources'Data'Transactions'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (customerSources'Data'Transactions'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (customerSources'Data'Transactions'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (customerSources'Data'Transactions'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (customerSources'Data'Transactions'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSources'Data'Transactions'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerSources'Data'Transactions'" (\obj -> (((GHC.Base.pure CustomerSources'Data'Transactions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data CustomerSources'Data'Type'
    = CustomerSources'Data'Type'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerSources'Data'Type'EnumTyped GHC.Base.String
    | CustomerSources'Data'Type'EnumStringAchCreditTransfer
    | CustomerSources'Data'Type'EnumStringAchDebit
    | CustomerSources'Data'Type'EnumStringAlipay
    | CustomerSources'Data'Type'EnumStringBancontact
    | CustomerSources'Data'Type'EnumStringCard
    | CustomerSources'Data'Type'EnumStringCardPresent
    | CustomerSources'Data'Type'EnumStringEps
    | CustomerSources'Data'Type'EnumStringGiropay
    | CustomerSources'Data'Type'EnumStringIdeal
    | CustomerSources'Data'Type'EnumStringKlarna
    | CustomerSources'Data'Type'EnumStringMultibanco
    | CustomerSources'Data'Type'EnumStringP24
    | CustomerSources'Data'Type'EnumStringSepaDebit
    | CustomerSources'Data'Type'EnumStringSofort
    | CustomerSources'Data'Type'EnumStringThreeDSecure
    | CustomerSources'Data'Type'EnumStringWechat
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerSources'Data'Type'
    where toJSON (CustomerSources'Data'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Data'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Data'Type'EnumStringAchCreditTransfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer"
          toJSON (CustomerSources'Data'Type'EnumStringAchDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit"
          toJSON (CustomerSources'Data'Type'EnumStringAlipay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay"
          toJSON (CustomerSources'Data'Type'EnumStringBancontact) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact"
          toJSON (CustomerSources'Data'Type'EnumStringCard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card"
          toJSON (CustomerSources'Data'Type'EnumStringCardPresent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present"
          toJSON (CustomerSources'Data'Type'EnumStringEps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps"
          toJSON (CustomerSources'Data'Type'EnumStringGiropay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay"
          toJSON (CustomerSources'Data'Type'EnumStringIdeal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal"
          toJSON (CustomerSources'Data'Type'EnumStringKlarna) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna"
          toJSON (CustomerSources'Data'Type'EnumStringMultibanco) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco"
          toJSON (CustomerSources'Data'Type'EnumStringP24) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24"
          toJSON (CustomerSources'Data'Type'EnumStringSepaDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit"
          toJSON (CustomerSources'Data'Type'EnumStringSofort) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort"
          toJSON (CustomerSources'Data'Type'EnumStringThreeDSecure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure"
          toJSON (CustomerSources'Data'Type'EnumStringWechat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat"
instance Data.Aeson.FromJSON CustomerSources'Data'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer")
                                          then CustomerSources'Data'Type'EnumStringAchCreditTransfer
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit")
                                                then CustomerSources'Data'Type'EnumStringAchDebit
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay")
                                                      then CustomerSources'Data'Type'EnumStringAlipay
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact")
                                                            then CustomerSources'Data'Type'EnumStringBancontact
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card")
                                                                  then CustomerSources'Data'Type'EnumStringCard
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present")
                                                                        then CustomerSources'Data'Type'EnumStringCardPresent
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps")
                                                                              then CustomerSources'Data'Type'EnumStringEps
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay")
                                                                                    then CustomerSources'Data'Type'EnumStringGiropay
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal")
                                                                                          then CustomerSources'Data'Type'EnumStringIdeal
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna")
                                                                                                then CustomerSources'Data'Type'EnumStringKlarna
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco")
                                                                                                      then CustomerSources'Data'Type'EnumStringMultibanco
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24")
                                                                                                            then CustomerSources'Data'Type'EnumStringP24
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit")
                                                                                                                  then CustomerSources'Data'Type'EnumStringSepaDebit
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort")
                                                                                                                        then CustomerSources'Data'Type'EnumStringSofort
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure")
                                                                                                                              then CustomerSources'Data'Type'EnumStringThreeDSecure
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat")
                                                                                                                                    then CustomerSources'Data'Type'EnumStringWechat
                                                                                                                                    else CustomerSources'Data'Type'EnumOther val)
instance Data.Aeson.ToJSON CustomerSources'Data'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (customerSources'Data'Account obj) : (Data.Aeson..=) "account_holder_name" (customerSources'Data'AccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (customerSources'Data'AccountHolderType obj) : (Data.Aeson..=) "ach_credit_transfer" (customerSources'Data'AchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (customerSources'Data'AchDebit obj) : (Data.Aeson..=) "active" (customerSources'Data'Active obj) : (Data.Aeson..=) "address_city" (customerSources'Data'AddressCity obj) : (Data.Aeson..=) "address_country" (customerSources'Data'AddressCountry obj) : (Data.Aeson..=) "address_line1" (customerSources'Data'AddressLine1 obj) : (Data.Aeson..=) "address_line1_check" (customerSources'Data'AddressLine1Check obj) : (Data.Aeson..=) "address_line2" (customerSources'Data'AddressLine2 obj) : (Data.Aeson..=) "address_state" (customerSources'Data'AddressState obj) : (Data.Aeson..=) "address_zip" (customerSources'Data'AddressZip obj) : (Data.Aeson..=) "address_zip_check" (customerSources'Data'AddressZipCheck obj) : (Data.Aeson..=) "alipay" (customerSources'Data'Alipay obj) : (Data.Aeson..=) "amount" (customerSources'Data'Amount obj) : (Data.Aeson..=) "amount_received" (customerSources'Data'AmountReceived obj) : (Data.Aeson..=) "available_payout_methods" (customerSources'Data'AvailablePayoutMethods obj) : (Data.Aeson..=) "bancontact" (customerSources'Data'Bancontact obj) : (Data.Aeson..=) "bank_name" (customerSources'Data'BankName obj) : (Data.Aeson..=) "bitcoin_amount" (customerSources'Data'BitcoinAmount obj) : (Data.Aeson..=) "bitcoin_amount_received" (customerSources'Data'BitcoinAmountReceived obj) : (Data.Aeson..=) "bitcoin_uri" (customerSources'Data'BitcoinUri obj) : (Data.Aeson..=) "brand" (customerSources'Data'Brand obj) : (Data.Aeson..=) "card" (customerSources'Data'Card obj) : (Data.Aeson..=) "card_present" (customerSources'Data'CardPresent obj) : (Data.Aeson..=) "client_secret" (customerSources'Data'ClientSecret obj) : (Data.Aeson..=) "code_verification" (customerSources'Data'CodeVerification obj) : (Data.Aeson..=) "country" (customerSources'Data'Country obj) : (Data.Aeson..=) "created" (customerSources'Data'Created obj) : (Data.Aeson..=) "currency" (customerSources'Data'Currency obj) : (Data.Aeson..=) "customer" (customerSources'Data'Customer obj) : (Data.Aeson..=) "cvc_check" (customerSources'Data'CvcCheck obj) : (Data.Aeson..=) "default_for_currency" (customerSources'Data'DefaultForCurrency obj) : (Data.Aeson..=) "description" (customerSources'Data'Description obj) : (Data.Aeson..=) "dynamic_last4" (customerSources'Data'DynamicLast4 obj) : (Data.Aeson..=) "email" (customerSources'Data'Email obj) : (Data.Aeson..=) "eps" (customerSources'Data'Eps obj) : (Data.Aeson..=) "exp_month" (customerSources'Data'ExpMonth obj) : (Data.Aeson..=) "exp_year" (customerSources'Data'ExpYear obj) : (Data.Aeson..=) "filled" (customerSources'Data'Filled obj) : (Data.Aeson..=) "fingerprint" (customerSources'Data'Fingerprint obj) : (Data.Aeson..=) "flow" (customerSources'Data'Flow obj) : (Data.Aeson..=) "funding" (customerSources'Data'Funding obj) : (Data.Aeson..=) "giropay" (customerSources'Data'Giropay obj) : (Data.Aeson..=) "id" (customerSources'Data'Id obj) : (Data.Aeson..=) "ideal" (customerSources'Data'Ideal obj) : (Data.Aeson..=) "inbound_address" (customerSources'Data'InboundAddress obj) : (Data.Aeson..=) "klarna" (customerSources'Data'Klarna obj) : (Data.Aeson..=) "last4" (customerSources'Data'Last4 obj) : (Data.Aeson..=) "livemode" (customerSources'Data'Livemode obj) : (Data.Aeson..=) "metadata" (customerSources'Data'Metadata obj) : (Data.Aeson..=) "multibanco" (customerSources'Data'Multibanco obj) : (Data.Aeson..=) "name" (customerSources'Data'Name obj) : (Data.Aeson..=) "object" (customerSources'Data'Object obj) : (Data.Aeson..=) "owner" (customerSources'Data'Owner obj) : (Data.Aeson..=) "p24" (customerSources'Data'P24 obj) : (Data.Aeson..=) "payment" (customerSources'Data'Payment obj) : (Data.Aeson..=) "payment_amount" (customerSources'Data'PaymentAmount obj) : (Data.Aeson..=) "payment_currency" (customerSources'Data'PaymentCurrency obj) : (Data.Aeson..=) "receiver" (customerSources'Data'Receiver obj) : (Data.Aeson..=) "recipient" (customerSources'Data'Recipient obj) : (Data.Aeson..=) "redirect" (customerSources'Data'Redirect obj) : (Data.Aeson..=) "refund_address" (customerSources'Data'RefundAddress obj) : (Data.Aeson..=) "reusable" (customerSources'Data'Reusable obj) : (Data.Aeson..=) "routing_number" (customerSources'Data'RoutingNumber obj) : (Data.Aeson..=) "sepa_debit" (customerSources'Data'SepaDebit obj) : (Data.Aeson..=) "sofort" (customerSources'Data'Sofort obj) : (Data.Aeson..=) "source_order" (customerSources'Data'SourceOrder obj) : (Data.Aeson..=) "statement_descriptor" (customerSources'Data'StatementDescriptor obj) : (Data.Aeson..=) "status" (customerSources'Data'Status obj) : (Data.Aeson..=) "three_d_secure" (customerSources'Data'ThreeDSecure obj) : (Data.Aeson..=) "tokenization_method" (customerSources'Data'TokenizationMethod obj) : (Data.Aeson..=) "transactions" (customerSources'Data'Transactions obj) : (Data.Aeson..=) "type" (customerSources'Data'Type obj) : (Data.Aeson..=) "uncaptured_funds" (customerSources'Data'UncapturedFunds obj) : (Data.Aeson..=) "usage" (customerSources'Data'Usage obj) : (Data.Aeson..=) "used" (customerSources'Data'Used obj) : (Data.Aeson..=) "used_for_payment" (customerSources'Data'UsedForPayment obj) : (Data.Aeson..=) "username" (customerSources'Data'Username obj) : (Data.Aeson..=) "wechat" (customerSources'Data'Wechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (customerSources'Data'Account obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (customerSources'Data'AccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (customerSources'Data'AccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "ach_credit_transfer" (customerSources'Data'AchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (customerSources'Data'AchDebit obj) GHC.Base.<> ((Data.Aeson..=) "active" (customerSources'Data'Active obj) GHC.Base.<> ((Data.Aeson..=) "address_city" (customerSources'Data'AddressCity obj) GHC.Base.<> ((Data.Aeson..=) "address_country" (customerSources'Data'AddressCountry obj) GHC.Base.<> ((Data.Aeson..=) "address_line1" (customerSources'Data'AddressLine1 obj) GHC.Base.<> ((Data.Aeson..=) "address_line1_check" (customerSources'Data'AddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_line2" (customerSources'Data'AddressLine2 obj) GHC.Base.<> ((Data.Aeson..=) "address_state" (customerSources'Data'AddressState obj) GHC.Base.<> ((Data.Aeson..=) "address_zip" (customerSources'Data'AddressZip obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (customerSources'Data'AddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (customerSources'Data'Alipay obj) GHC.Base.<> ((Data.Aeson..=) "amount" (customerSources'Data'Amount obj) GHC.Base.<> ((Data.Aeson..=) "amount_received" (customerSources'Data'AmountReceived obj) GHC.Base.<> ((Data.Aeson..=) "available_payout_methods" (customerSources'Data'AvailablePayoutMethods obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (customerSources'Data'Bancontact obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (customerSources'Data'BankName obj) GHC.Base.<> ((Data.Aeson..=) "bitcoin_amount" (customerSources'Data'BitcoinAmount obj) GHC.Base.<> ((Data.Aeson..=) "bitcoin_amount_received" (customerSources'Data'BitcoinAmountReceived obj) GHC.Base.<> ((Data.Aeson..=) "bitcoin_uri" (customerSources'Data'BitcoinUri obj) GHC.Base.<> ((Data.Aeson..=) "brand" (customerSources'Data'Brand obj) GHC.Base.<> ((Data.Aeson..=) "card" (customerSources'Data'Card obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (customerSources'Data'CardPresent obj) GHC.Base.<> ((Data.Aeson..=) "client_secret" (customerSources'Data'ClientSecret obj) GHC.Base.<> ((Data.Aeson..=) "code_verification" (customerSources'Data'CodeVerification obj) GHC.Base.<> ((Data.Aeson..=) "country" (customerSources'Data'Country obj) GHC.Base.<> ((Data.Aeson..=) "created" (customerSources'Data'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (customerSources'Data'Currency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (customerSources'Data'Customer obj) GHC.Base.<> ((Data.Aeson..=) "cvc_check" (customerSources'Data'CvcCheck obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (customerSources'Data'DefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (customerSources'Data'Description obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (customerSources'Data'DynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "email" (customerSources'Data'Email obj) GHC.Base.<> ((Data.Aeson..=) "eps" (customerSources'Data'Eps obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (customerSources'Data'ExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (customerSources'Data'ExpYear obj) GHC.Base.<> ((Data.Aeson..=) "filled" (customerSources'Data'Filled obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (customerSources'Data'Fingerprint obj) GHC.Base.<> ((Data.Aeson..=) "flow" (customerSources'Data'Flow obj) GHC.Base.<> ((Data.Aeson..=) "funding" (customerSources'Data'Funding obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (customerSources'Data'Giropay obj) GHC.Base.<> ((Data.Aeson..=) "id" (customerSources'Data'Id obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (customerSources'Data'Ideal obj) GHC.Base.<> ((Data.Aeson..=) "inbound_address" (customerSources'Data'InboundAddress obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (customerSources'Data'Klarna obj) GHC.Base.<> ((Data.Aeson..=) "last4" (customerSources'Data'Last4 obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (customerSources'Data'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (customerSources'Data'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (customerSources'Data'Multibanco obj) GHC.Base.<> ((Data.Aeson..=) "name" (customerSources'Data'Name obj) GHC.Base.<> ((Data.Aeson..=) "object" (customerSources'Data'Object obj) GHC.Base.<> ((Data.Aeson..=) "owner" (customerSources'Data'Owner obj) GHC.Base.<> ((Data.Aeson..=) "p24" (customerSources'Data'P24 obj) GHC.Base.<> ((Data.Aeson..=) "payment" (customerSources'Data'Payment obj) GHC.Base.<> ((Data.Aeson..=) "payment_amount" (customerSources'Data'PaymentAmount obj) GHC.Base.<> ((Data.Aeson..=) "payment_currency" (customerSources'Data'PaymentCurrency obj) GHC.Base.<> ((Data.Aeson..=) "receiver" (customerSources'Data'Receiver obj) GHC.Base.<> ((Data.Aeson..=) "recipient" (customerSources'Data'Recipient obj) GHC.Base.<> ((Data.Aeson..=) "redirect" (customerSources'Data'Redirect obj) GHC.Base.<> ((Data.Aeson..=) "refund_address" (customerSources'Data'RefundAddress obj) GHC.Base.<> ((Data.Aeson..=) "reusable" (customerSources'Data'Reusable obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (customerSources'Data'RoutingNumber obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (customerSources'Data'SepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (customerSources'Data'Sofort obj) GHC.Base.<> ((Data.Aeson..=) "source_order" (customerSources'Data'SourceOrder obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (customerSources'Data'StatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (customerSources'Data'Status obj) GHC.Base.<> ((Data.Aeson..=) "three_d_secure" (customerSources'Data'ThreeDSecure obj) GHC.Base.<> ((Data.Aeson..=) "tokenization_method" (customerSources'Data'TokenizationMethod obj) GHC.Base.<> ((Data.Aeson..=) "transactions" (customerSources'Data'Transactions obj) GHC.Base.<> ((Data.Aeson..=) "type" (customerSources'Data'Type obj) GHC.Base.<> ((Data.Aeson..=) "uncaptured_funds" (customerSources'Data'UncapturedFunds obj) GHC.Base.<> ((Data.Aeson..=) "usage" (customerSources'Data'Usage obj) GHC.Base.<> ((Data.Aeson..=) "used" (customerSources'Data'Used obj) GHC.Base.<> ((Data.Aeson..=) "used_for_payment" (customerSources'Data'UsedForPayment obj) GHC.Base.<> ((Data.Aeson..=) "username" (customerSources'Data'Username obj) GHC.Base.<> (Data.Aeson..=) "wechat" (customerSources'Data'Wechat obj)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSources'Data'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerSources'Data'" (\obj -> ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure CustomerSources'Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_uri")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reusable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncaptured_funds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used_for_payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
data CustomerSources'Object'
    = CustomerSources'Object'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerSources'Object'EnumTyped GHC.Base.String
    | CustomerSources'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerSources'Object'
    where toJSON (CustomerSources'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSources'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON CustomerSources'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then CustomerSources'Object'EnumStringList
                                          else CustomerSources'Object'EnumOther val)
instance Data.Aeson.ToJSON CustomerSources'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (customerSources'Data obj) : (Data.Aeson..=) "has_more" (customerSources'HasMore obj) : (Data.Aeson..=) "object" (customerSources'Object obj) : (Data.Aeson..=) "url" (customerSources'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (customerSources'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (customerSources'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (customerSources'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (customerSources'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSources'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerSources'" (\obj -> (((GHC.Base.pure CustomerSources' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data CustomerSubscriptions'
    = CustomerSubscriptions' {customerSubscriptions'Data :: ([] Subscription),
                              customerSubscriptions'HasMore :: GHC.Types.Bool,
                              customerSubscriptions'Object :: CustomerSubscriptions'Object',
                              customerSubscriptions'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CustomerSubscriptions'Object'
    = CustomerSubscriptions'Object'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerSubscriptions'Object'EnumTyped GHC.Base.String
    | CustomerSubscriptions'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerSubscriptions'Object'
    where toJSON (CustomerSubscriptions'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSubscriptions'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerSubscriptions'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON CustomerSubscriptions'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then CustomerSubscriptions'Object'EnumStringList
                                          else CustomerSubscriptions'Object'EnumOther val)
instance Data.Aeson.ToJSON CustomerSubscriptions'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (customerSubscriptions'Data obj) : (Data.Aeson..=) "has_more" (customerSubscriptions'HasMore obj) : (Data.Aeson..=) "object" (customerSubscriptions'Object obj) : (Data.Aeson..=) "url" (customerSubscriptions'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (customerSubscriptions'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (customerSubscriptions'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (customerSubscriptions'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (customerSubscriptions'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerSubscriptions'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerSubscriptions'" (\obj -> (((GHC.Base.pure CustomerSubscriptions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data CustomerTaxExempt'
    = CustomerTaxExempt'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerTaxExempt'EnumTyped GHC.Base.String
    | CustomerTaxExempt'EnumStringExempt
    | CustomerTaxExempt'EnumStringNone
    | CustomerTaxExempt'EnumStringReverse
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerTaxExempt'
    where toJSON (CustomerTaxExempt'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerTaxExempt'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerTaxExempt'EnumStringExempt) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exempt"
          toJSON (CustomerTaxExempt'EnumStringNone) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
          toJSON (CustomerTaxExempt'EnumStringReverse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reverse"
instance Data.Aeson.FromJSON CustomerTaxExempt'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exempt")
                                          then CustomerTaxExempt'EnumStringExempt
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                                then CustomerTaxExempt'EnumStringNone
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reverse")
                                                      then CustomerTaxExempt'EnumStringReverse
                                                      else CustomerTaxExempt'EnumOther val)
data CustomerTaxIds'
    = CustomerTaxIds' {customerTaxIds'Data :: ([] TaxId),
                       customerTaxIds'HasMore :: GHC.Types.Bool,
                       customerTaxIds'Object :: CustomerTaxIds'Object',
                       customerTaxIds'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CustomerTaxIds'Object'
    = CustomerTaxIds'Object'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerTaxIds'Object'EnumTyped GHC.Base.String
    | CustomerTaxIds'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerTaxIds'Object'
    where toJSON (CustomerTaxIds'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerTaxIds'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerTaxIds'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON CustomerTaxIds'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then CustomerTaxIds'Object'EnumStringList
                                          else CustomerTaxIds'Object'EnumOther val)
instance Data.Aeson.ToJSON CustomerTaxIds'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (customerTaxIds'Data obj) : (Data.Aeson..=) "has_more" (customerTaxIds'HasMore obj) : (Data.Aeson..=) "object" (customerTaxIds'Object obj) : (Data.Aeson..=) "url" (customerTaxIds'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (customerTaxIds'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (customerTaxIds'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (customerTaxIds'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (customerTaxIds'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerTaxIds'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerTaxIds'" (\obj -> (((GHC.Base.pure CustomerTaxIds' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
instance Data.Aeson.ToJSON Customer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (customerAddress obj) : (Data.Aeson..=) "balance" (customerBalance obj) : (Data.Aeson..=) "created" (customerCreated obj) : (Data.Aeson..=) "currency" (customerCurrency obj) : (Data.Aeson..=) "default_source" (customerDefaultSource obj) : (Data.Aeson..=) "delinquent" (customerDelinquent obj) : (Data.Aeson..=) "description" (customerDescription obj) : (Data.Aeson..=) "discount" (customerDiscount obj) : (Data.Aeson..=) "email" (customerEmail obj) : (Data.Aeson..=) "id" (customerId obj) : (Data.Aeson..=) "invoice_prefix" (customerInvoicePrefix obj) : (Data.Aeson..=) "invoice_settings" (customerInvoiceSettings obj) : (Data.Aeson..=) "livemode" (customerLivemode obj) : (Data.Aeson..=) "metadata" (customerMetadata obj) : (Data.Aeson..=) "name" (customerName obj) : (Data.Aeson..=) "next_invoice_sequence" (customerNextInvoiceSequence obj) : (Data.Aeson..=) "object" (customerObject obj) : (Data.Aeson..=) "phone" (customerPhone obj) : (Data.Aeson..=) "preferred_locales" (customerPreferredLocales obj) : (Data.Aeson..=) "shipping" (customerShipping obj) : (Data.Aeson..=) "sources" (customerSources obj) : (Data.Aeson..=) "subscriptions" (customerSubscriptions obj) : (Data.Aeson..=) "tax_exempt" (customerTaxExempt obj) : (Data.Aeson..=) "tax_ids" (customerTaxIds obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (customerAddress obj) GHC.Base.<> ((Data.Aeson..=) "balance" (customerBalance obj) GHC.Base.<> ((Data.Aeson..=) "created" (customerCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (customerCurrency obj) GHC.Base.<> ((Data.Aeson..=) "default_source" (customerDefaultSource obj) GHC.Base.<> ((Data.Aeson..=) "delinquent" (customerDelinquent obj) GHC.Base.<> ((Data.Aeson..=) "description" (customerDescription obj) GHC.Base.<> ((Data.Aeson..=) "discount" (customerDiscount obj) GHC.Base.<> ((Data.Aeson..=) "email" (customerEmail obj) GHC.Base.<> ((Data.Aeson..=) "id" (customerId obj) GHC.Base.<> ((Data.Aeson..=) "invoice_prefix" (customerInvoicePrefix obj) GHC.Base.<> ((Data.Aeson..=) "invoice_settings" (customerInvoiceSettings obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (customerLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (customerMetadata obj) GHC.Base.<> ((Data.Aeson..=) "name" (customerName obj) GHC.Base.<> ((Data.Aeson..=) "next_invoice_sequence" (customerNextInvoiceSequence obj) GHC.Base.<> ((Data.Aeson..=) "object" (customerObject obj) GHC.Base.<> ((Data.Aeson..=) "phone" (customerPhone obj) GHC.Base.<> ((Data.Aeson..=) "preferred_locales" (customerPreferredLocales obj) GHC.Base.<> ((Data.Aeson..=) "shipping" (customerShipping obj) GHC.Base.<> ((Data.Aeson..=) "sources" (customerSources obj) GHC.Base.<> ((Data.Aeson..=) "subscriptions" (customerSubscriptions obj) GHC.Base.<> ((Data.Aeson..=) "tax_exempt" (customerTaxExempt obj) GHC.Base.<> (Data.Aeson..=) "tax_ids" (customerTaxIds obj))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Customer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Customer" (\obj -> (((((((((((((((((((((((GHC.Base.pure Customer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "delinquent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "discount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_prefix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "next_invoice_sequence")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "preferred_locales")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sources")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscriptions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_exempt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_ids"))
data CustomerBalanceTransaction
    = CustomerBalanceTransaction {customerBalanceTransactionAmount :: GHC.Integer.Type.Integer,
                                  customerBalanceTransactionCreated :: GHC.Integer.Type.Integer,
                                  customerBalanceTransactionCreditNote :: (GHC.Maybe.Maybe CustomerBalanceTransactionCreditNote'Variants),
                                  customerBalanceTransactionCurrency :: GHC.Base.String,
                                  customerBalanceTransactionCustomer :: CustomerBalanceTransactionCustomer'Variants,
                                  customerBalanceTransactionDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                                  customerBalanceTransactionEndingBalance :: GHC.Integer.Type.Integer,
                                  customerBalanceTransactionId :: GHC.Base.String,
                                  customerBalanceTransactionInvoice :: (GHC.Maybe.Maybe CustomerBalanceTransactionInvoice'Variants),
                                  customerBalanceTransactionLivemode :: GHC.Types.Bool,
                                  customerBalanceTransactionMetadata :: (GHC.Maybe.Maybe CustomerBalanceTransactionMetadata'),
                                  customerBalanceTransactionObject :: CustomerBalanceTransactionObject',
                                  customerBalanceTransactionType :: CustomerBalanceTransactionType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data CustomerBalanceTransactionCreditNote'Variants
    = CustomerBalanceTransactionCreditNote'Variant1 CreditNote
    | CustomerBalanceTransactionCreditNote'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CustomerBalanceTransactionCreditNote'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CustomerBalanceTransactionCreditNote'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CustomerBalanceTransactionCustomer'Variants
    = CustomerBalanceTransactionCustomer'Variant1 Customer
    | CustomerBalanceTransactionCustomer'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CustomerBalanceTransactionCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CustomerBalanceTransactionCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CustomerBalanceTransactionInvoice'Variants
    = CustomerBalanceTransactionInvoice'Variant1 Invoice
    | CustomerBalanceTransactionInvoice'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON CustomerBalanceTransactionInvoice'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON CustomerBalanceTransactionInvoice'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data CustomerBalanceTransactionMetadata'
    = CustomerBalanceTransactionMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerBalanceTransactionMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceTransactionMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerBalanceTransactionMetadata'" (\obj -> GHC.Base.pure CustomerBalanceTransactionMetadata')
data CustomerBalanceTransactionObject'
    = CustomerBalanceTransactionObject'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerBalanceTransactionObject'EnumTyped GHC.Base.String
    | CustomerBalanceTransactionObject'EnumStringCustomerBalanceTransaction
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerBalanceTransactionObject'
    where toJSON (CustomerBalanceTransactionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerBalanceTransactionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerBalanceTransactionObject'EnumStringCustomerBalanceTransaction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "customer_balance_transaction"
instance Data.Aeson.FromJSON CustomerBalanceTransactionObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "customer_balance_transaction")
                                          then CustomerBalanceTransactionObject'EnumStringCustomerBalanceTransaction
                                          else CustomerBalanceTransactionObject'EnumOther val)
data CustomerBalanceTransactionType'
    = CustomerBalanceTransactionType'EnumOther Data.Aeson.Types.Internal.Value
    | CustomerBalanceTransactionType'EnumTyped GHC.Base.String
    | CustomerBalanceTransactionType'EnumStringAdjustment
    | CustomerBalanceTransactionType'EnumStringAppliedToInvoice
    | CustomerBalanceTransactionType'EnumStringCreditNote
    | CustomerBalanceTransactionType'EnumStringInitial
    | CustomerBalanceTransactionType'EnumStringInvoiceTooLarge
    | CustomerBalanceTransactionType'EnumStringInvoiceTooSmall
    | CustomerBalanceTransactionType'EnumStringMigration
    | CustomerBalanceTransactionType'EnumStringUnappliedFromInvoice
    | CustomerBalanceTransactionType'EnumStringUnspentReceiverCredit
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON CustomerBalanceTransactionType'
    where toJSON (CustomerBalanceTransactionType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerBalanceTransactionType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (CustomerBalanceTransactionType'EnumStringAdjustment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "adjustment"
          toJSON (CustomerBalanceTransactionType'EnumStringAppliedToInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "applied_to_invoice"
          toJSON (CustomerBalanceTransactionType'EnumStringCreditNote) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_note"
          toJSON (CustomerBalanceTransactionType'EnumStringInitial) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "initial"
          toJSON (CustomerBalanceTransactionType'EnumStringInvoiceTooLarge) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoice_too_large"
          toJSON (CustomerBalanceTransactionType'EnumStringInvoiceTooSmall) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoice_too_small"
          toJSON (CustomerBalanceTransactionType'EnumStringMigration) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "migration"
          toJSON (CustomerBalanceTransactionType'EnumStringUnappliedFromInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unapplied_from_invoice"
          toJSON (CustomerBalanceTransactionType'EnumStringUnspentReceiverCredit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unspent_receiver_credit"
instance Data.Aeson.FromJSON CustomerBalanceTransactionType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "adjustment")
                                          then CustomerBalanceTransactionType'EnumStringAdjustment
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "applied_to_invoice")
                                                then CustomerBalanceTransactionType'EnumStringAppliedToInvoice
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_note")
                                                      then CustomerBalanceTransactionType'EnumStringCreditNote
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "initial")
                                                            then CustomerBalanceTransactionType'EnumStringInitial
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoice_too_large")
                                                                  then CustomerBalanceTransactionType'EnumStringInvoiceTooLarge
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoice_too_small")
                                                                        then CustomerBalanceTransactionType'EnumStringInvoiceTooSmall
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "migration")
                                                                              then CustomerBalanceTransactionType'EnumStringMigration
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unapplied_from_invoice")
                                                                                    then CustomerBalanceTransactionType'EnumStringUnappliedFromInvoice
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unspent_receiver_credit")
                                                                                          then CustomerBalanceTransactionType'EnumStringUnspentReceiverCredit
                                                                                          else CustomerBalanceTransactionType'EnumOther val)
instance Data.Aeson.ToJSON CustomerBalanceTransaction
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (customerBalanceTransactionAmount obj) : (Data.Aeson..=) "created" (customerBalanceTransactionCreated obj) : (Data.Aeson..=) "credit_note" (customerBalanceTransactionCreditNote obj) : (Data.Aeson..=) "currency" (customerBalanceTransactionCurrency obj) : (Data.Aeson..=) "customer" (customerBalanceTransactionCustomer obj) : (Data.Aeson..=) "description" (customerBalanceTransactionDescription obj) : (Data.Aeson..=) "ending_balance" (customerBalanceTransactionEndingBalance obj) : (Data.Aeson..=) "id" (customerBalanceTransactionId obj) : (Data.Aeson..=) "invoice" (customerBalanceTransactionInvoice obj) : (Data.Aeson..=) "livemode" (customerBalanceTransactionLivemode obj) : (Data.Aeson..=) "metadata" (customerBalanceTransactionMetadata obj) : (Data.Aeson..=) "object" (customerBalanceTransactionObject obj) : (Data.Aeson..=) "type" (customerBalanceTransactionType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (customerBalanceTransactionAmount obj) GHC.Base.<> ((Data.Aeson..=) "created" (customerBalanceTransactionCreated obj) GHC.Base.<> ((Data.Aeson..=) "credit_note" (customerBalanceTransactionCreditNote obj) GHC.Base.<> ((Data.Aeson..=) "currency" (customerBalanceTransactionCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (customerBalanceTransactionCustomer obj) GHC.Base.<> ((Data.Aeson..=) "description" (customerBalanceTransactionDescription obj) GHC.Base.<> ((Data.Aeson..=) "ending_balance" (customerBalanceTransactionEndingBalance obj) GHC.Base.<> ((Data.Aeson..=) "id" (customerBalanceTransactionId obj) GHC.Base.<> ((Data.Aeson..=) "invoice" (customerBalanceTransactionInvoice obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (customerBalanceTransactionLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (customerBalanceTransactionMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (customerBalanceTransactionObject obj) GHC.Base.<> (Data.Aeson..=) "type" (customerBalanceTransactionType obj)))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceTransaction
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerBalanceTransaction" (\obj -> ((((((((((((GHC.Base.pure CustomerBalanceTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_note")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ending_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data DeletedExternalAccount
    = DeletedExternalAccount {deletedExternalAccountCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                              deletedExternalAccountDeleted :: (GHC.Maybe.Maybe DeletedExternalAccountDeleted'),
                              deletedExternalAccountId :: (GHC.Maybe.Maybe GHC.Base.String),
                              deletedExternalAccountObject :: (GHC.Maybe.Maybe DeletedExternalAccountObject')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data DeletedExternalAccountDeleted'
    = DeletedExternalAccountDeleted'EnumOther Data.Aeson.Types.Internal.Value
    | DeletedExternalAccountDeleted'EnumTyped GHC.Types.Bool
    | DeletedExternalAccountDeleted'EnumBoolTrue
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON DeletedExternalAccountDeleted'
    where toJSON (DeletedExternalAccountDeleted'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DeletedExternalAccountDeleted'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DeletedExternalAccountDeleted'EnumBoolTrue) = Data.Aeson.Types.Internal.Bool GHC.Types.True
instance Data.Aeson.FromJSON DeletedExternalAccountDeleted'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== Data.Aeson.Types.Internal.Bool GHC.Types.True
                                          then DeletedExternalAccountDeleted'EnumBoolTrue
                                          else DeletedExternalAccountDeleted'EnumOther val)
data DeletedExternalAccountObject'
    = DeletedExternalAccountObject'EnumOther Data.Aeson.Types.Internal.Value
    | DeletedExternalAccountObject'EnumTyped GHC.Base.String
    | DeletedExternalAccountObject'EnumStringBankAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON DeletedExternalAccountObject'
    where toJSON (DeletedExternalAccountObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DeletedExternalAccountObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DeletedExternalAccountObject'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
instance Data.Aeson.FromJSON DeletedExternalAccountObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then DeletedExternalAccountObject'EnumStringBankAccount
                                          else DeletedExternalAccountObject'EnumOther val)
instance Data.Aeson.ToJSON DeletedExternalAccount
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "currency" (deletedExternalAccountCurrency obj) : (Data.Aeson..=) "deleted" (deletedExternalAccountDeleted obj) : (Data.Aeson..=) "id" (deletedExternalAccountId obj) : (Data.Aeson..=) "object" (deletedExternalAccountObject obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "currency" (deletedExternalAccountCurrency obj) GHC.Base.<> ((Data.Aeson..=) "deleted" (deletedExternalAccountDeleted obj) GHC.Base.<> ((Data.Aeson..=) "id" (deletedExternalAccountId obj) GHC.Base.<> (Data.Aeson..=) "object" (deletedExternalAccountObject obj))))
instance Data.Aeson.Types.FromJSON.FromJSON DeletedExternalAccount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeletedExternalAccount" (\obj -> (((GHC.Base.pure DeletedExternalAccount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deleted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object"))
data DeletedPaymentSource
    = DeletedPaymentSource {deletedPaymentSourceCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                            deletedPaymentSourceDeleted :: (GHC.Maybe.Maybe DeletedPaymentSourceDeleted'),
                            deletedPaymentSourceId :: (GHC.Maybe.Maybe GHC.Base.String),
                            deletedPaymentSourceObject :: (GHC.Maybe.Maybe DeletedPaymentSourceObject')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data DeletedPaymentSourceDeleted'
    = DeletedPaymentSourceDeleted'EnumOther Data.Aeson.Types.Internal.Value
    | DeletedPaymentSourceDeleted'EnumTyped GHC.Types.Bool
    | DeletedPaymentSourceDeleted'EnumBoolTrue
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON DeletedPaymentSourceDeleted'
    where toJSON (DeletedPaymentSourceDeleted'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DeletedPaymentSourceDeleted'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DeletedPaymentSourceDeleted'EnumBoolTrue) = Data.Aeson.Types.Internal.Bool GHC.Types.True
instance Data.Aeson.FromJSON DeletedPaymentSourceDeleted'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== Data.Aeson.Types.Internal.Bool GHC.Types.True
                                          then DeletedPaymentSourceDeleted'EnumBoolTrue
                                          else DeletedPaymentSourceDeleted'EnumOther val)
data DeletedPaymentSourceObject'
    = DeletedPaymentSourceObject'EnumOther Data.Aeson.Types.Internal.Value
    | DeletedPaymentSourceObject'EnumTyped GHC.Base.String
    | DeletedPaymentSourceObject'EnumStringAlipayAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON DeletedPaymentSourceObject'
    where toJSON (DeletedPaymentSourceObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DeletedPaymentSourceObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DeletedPaymentSourceObject'EnumStringAlipayAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay_account"
instance Data.Aeson.FromJSON DeletedPaymentSourceObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay_account")
                                          then DeletedPaymentSourceObject'EnumStringAlipayAccount
                                          else DeletedPaymentSourceObject'EnumOther val)
instance Data.Aeson.ToJSON DeletedPaymentSource
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "currency" (deletedPaymentSourceCurrency obj) : (Data.Aeson..=) "deleted" (deletedPaymentSourceDeleted obj) : (Data.Aeson..=) "id" (deletedPaymentSourceId obj) : (Data.Aeson..=) "object" (deletedPaymentSourceObject obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "currency" (deletedPaymentSourceCurrency obj) GHC.Base.<> ((Data.Aeson..=) "deleted" (deletedPaymentSourceDeleted obj) GHC.Base.<> ((Data.Aeson..=) "id" (deletedPaymentSourceId obj) GHC.Base.<> (Data.Aeson..=) "object" (deletedPaymentSourceObject obj))))
instance Data.Aeson.Types.FromJSON.FromJSON DeletedPaymentSource
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DeletedPaymentSource" (\obj -> (((GHC.Base.pure DeletedPaymentSource GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deleted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object"))
data Discount
    = Discount {discountCoupon :: Coupon,
                discountCustomer :: (GHC.Maybe.Maybe DiscountCustomer'Variants),
                discountEnd :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                discountObject :: DiscountObject',
                discountStart :: GHC.Integer.Type.Integer,
                discountSubscription :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data DiscountCustomer'Variants
    = DiscountCustomer'Variant1 Customer
    | DiscountCustomer'Variant2 DeletedCustomer
    | DiscountCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DiscountCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DiscountCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DiscountObject'
    = DiscountObject'EnumOther Data.Aeson.Types.Internal.Value
    | DiscountObject'EnumTyped GHC.Base.String
    | DiscountObject'EnumStringDiscount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON DiscountObject'
    where toJSON (DiscountObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DiscountObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DiscountObject'EnumStringDiscount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount"
instance Data.Aeson.FromJSON DiscountObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount")
                                          then DiscountObject'EnumStringDiscount
                                          else DiscountObject'EnumOther val)
instance Data.Aeson.ToJSON Discount
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "coupon" (discountCoupon obj) : (Data.Aeson..=) "customer" (discountCustomer obj) : (Data.Aeson..=) "end" (discountEnd obj) : (Data.Aeson..=) "object" (discountObject obj) : (Data.Aeson..=) "start" (discountStart obj) : (Data.Aeson..=) "subscription" (discountSubscription obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "coupon" (discountCoupon obj) GHC.Base.<> ((Data.Aeson..=) "customer" (discountCustomer obj) GHC.Base.<> ((Data.Aeson..=) "end" (discountEnd obj) GHC.Base.<> ((Data.Aeson..=) "object" (discountObject obj) GHC.Base.<> ((Data.Aeson..=) "start" (discountStart obj) GHC.Base.<> (Data.Aeson..=) "subscription" (discountSubscription obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON Discount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Discount" (\obj -> (((((GHC.Base.pure Discount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription"))
data Dispute
    = Dispute {disputeAmount :: GHC.Integer.Type.Integer,
               disputeBalanceTransactions :: ([] BalanceTransaction),
               disputeCharge :: DisputeCharge'Variants,
               disputeCreated :: GHC.Integer.Type.Integer,
               disputeCurrency :: GHC.Base.String,
               disputeEvidence :: DisputeEvidence,
               disputeEvidenceDetails :: DisputeEvidenceDetails,
               disputeId :: GHC.Base.String,
               disputeIsChargeRefundable :: GHC.Types.Bool,
               disputeLivemode :: GHC.Types.Bool,
               disputeMetadata :: DisputeMetadata',
               disputeObject :: DisputeObject',
               disputePaymentIntent :: (GHC.Maybe.Maybe DisputePaymentIntent'Variants),
               disputeReason :: GHC.Base.String,
               disputeStatus :: DisputeStatus'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data DisputeCharge'Variants
    = DisputeCharge'Variant1 Charge
    | DisputeCharge'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeCharge'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeCharge'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeMetadata'
    = DisputeMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON DisputeMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON DisputeMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputeMetadata'" (\obj -> GHC.Base.pure DisputeMetadata')
data DisputeObject'
    = DisputeObject'EnumOther Data.Aeson.Types.Internal.Value
    | DisputeObject'EnumTyped GHC.Base.String
    | DisputeObject'EnumStringDispute
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON DisputeObject'
    where toJSON (DisputeObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DisputeObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DisputeObject'EnumStringDispute) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dispute"
instance Data.Aeson.FromJSON DisputeObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dispute")
                                          then DisputeObject'EnumStringDispute
                                          else DisputeObject'EnumOther val)
data DisputePaymentIntent'Variants
    = DisputePaymentIntent'Variant1 PaymentIntent
    | DisputePaymentIntent'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputePaymentIntent'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputePaymentIntent'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeStatus'
    = DisputeStatus'EnumOther Data.Aeson.Types.Internal.Value
    | DisputeStatus'EnumTyped GHC.Base.String
    | DisputeStatus'EnumStringChargeRefunded
    | DisputeStatus'EnumStringLost
    | DisputeStatus'EnumStringNeedsResponse
    | DisputeStatus'EnumStringUnderReview
    | DisputeStatus'EnumStringWarningClosed
    | DisputeStatus'EnumStringWarningNeedsResponse
    | DisputeStatus'EnumStringWarningUnderReview
    | DisputeStatus'EnumStringWon
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON DisputeStatus'
    where toJSON (DisputeStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DisputeStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (DisputeStatus'EnumStringChargeRefunded) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_refunded"
          toJSON (DisputeStatus'EnumStringLost) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lost"
          toJSON (DisputeStatus'EnumStringNeedsResponse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "needs_response"
          toJSON (DisputeStatus'EnumStringUnderReview) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "under_review"
          toJSON (DisputeStatus'EnumStringWarningClosed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "warning_closed"
          toJSON (DisputeStatus'EnumStringWarningNeedsResponse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "warning_needs_response"
          toJSON (DisputeStatus'EnumStringWarningUnderReview) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "warning_under_review"
          toJSON (DisputeStatus'EnumStringWon) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "won"
instance Data.Aeson.FromJSON DisputeStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_refunded")
                                          then DisputeStatus'EnumStringChargeRefunded
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lost")
                                                then DisputeStatus'EnumStringLost
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "needs_response")
                                                      then DisputeStatus'EnumStringNeedsResponse
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "under_review")
                                                            then DisputeStatus'EnumStringUnderReview
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "warning_closed")
                                                                  then DisputeStatus'EnumStringWarningClosed
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "warning_needs_response")
                                                                        then DisputeStatus'EnumStringWarningNeedsResponse
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "warning_under_review")
                                                                              then DisputeStatus'EnumStringWarningUnderReview
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "won")
                                                                                    then DisputeStatus'EnumStringWon
                                                                                    else DisputeStatus'EnumOther val)
instance Data.Aeson.ToJSON Dispute
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (disputeAmount obj) : (Data.Aeson..=) "balance_transactions" (disputeBalanceTransactions obj) : (Data.Aeson..=) "charge" (disputeCharge obj) : (Data.Aeson..=) "created" (disputeCreated obj) : (Data.Aeson..=) "currency" (disputeCurrency obj) : (Data.Aeson..=) "evidence" (disputeEvidence obj) : (Data.Aeson..=) "evidence_details" (disputeEvidenceDetails obj) : (Data.Aeson..=) "id" (disputeId obj) : (Data.Aeson..=) "is_charge_refundable" (disputeIsChargeRefundable obj) : (Data.Aeson..=) "livemode" (disputeLivemode obj) : (Data.Aeson..=) "metadata" (disputeMetadata obj) : (Data.Aeson..=) "object" (disputeObject obj) : (Data.Aeson..=) "payment_intent" (disputePaymentIntent obj) : (Data.Aeson..=) "reason" (disputeReason obj) : (Data.Aeson..=) "status" (disputeStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (disputeAmount obj) GHC.Base.<> ((Data.Aeson..=) "balance_transactions" (disputeBalanceTransactions obj) GHC.Base.<> ((Data.Aeson..=) "charge" (disputeCharge obj) GHC.Base.<> ((Data.Aeson..=) "created" (disputeCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (disputeCurrency obj) GHC.Base.<> ((Data.Aeson..=) "evidence" (disputeEvidence obj) GHC.Base.<> ((Data.Aeson..=) "evidence_details" (disputeEvidenceDetails obj) GHC.Base.<> ((Data.Aeson..=) "id" (disputeId obj) GHC.Base.<> ((Data.Aeson..=) "is_charge_refundable" (disputeIsChargeRefundable obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (disputeLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (disputeMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (disputeObject obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (disputePaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "reason" (disputeReason obj) GHC.Base.<> (Data.Aeson..=) "status" (disputeStatus obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Dispute
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Dispute" (\obj -> ((((((((((((((GHC.Base.pure Dispute GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance_transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "evidence")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "evidence_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_charge_refundable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
data DisputeEvidence
    = DisputeEvidence {disputeEvidenceAccessActivityLog :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceBillingAddress :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceCancellationPolicy :: (GHC.Maybe.Maybe DisputeEvidenceCancellationPolicy'Variants),
                       disputeEvidenceCancellationPolicyDisclosure :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceCancellationRebuttal :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceCustomerCommunication :: (GHC.Maybe.Maybe DisputeEvidenceCustomerCommunication'Variants),
                       disputeEvidenceCustomerEmailAddress :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceCustomerName :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceCustomerPurchaseIp :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceCustomerSignature :: (GHC.Maybe.Maybe DisputeEvidenceCustomerSignature'Variants),
                       disputeEvidenceDuplicateChargeDocumentation :: (GHC.Maybe.Maybe DisputeEvidenceDuplicateChargeDocumentation'Variants),
                       disputeEvidenceDuplicateChargeExplanation :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceDuplicateChargeId :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceProductDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceReceipt :: (GHC.Maybe.Maybe DisputeEvidenceReceipt'Variants),
                       disputeEvidenceRefundPolicy :: (GHC.Maybe.Maybe DisputeEvidenceRefundPolicy'Variants),
                       disputeEvidenceRefundPolicyDisclosure :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceRefundRefusalExplanation :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceServiceDate :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceServiceDocumentation :: (GHC.Maybe.Maybe DisputeEvidenceServiceDocumentation'Variants),
                       disputeEvidenceShippingAddress :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceShippingCarrier :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceShippingDate :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceShippingDocumentation :: (GHC.Maybe.Maybe DisputeEvidenceShippingDocumentation'Variants),
                       disputeEvidenceShippingTrackingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                       disputeEvidenceUncategorizedFile :: (GHC.Maybe.Maybe DisputeEvidenceUncategorizedFile'Variants),
                       disputeEvidenceUncategorizedText :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data DisputeEvidenceCancellationPolicy'Variants
    = DisputeEvidenceCancellationPolicy'Variant1 File
    | DisputeEvidenceCancellationPolicy'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeEvidenceCancellationPolicy'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeEvidenceCancellationPolicy'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeEvidenceCustomerCommunication'Variants
    = DisputeEvidenceCustomerCommunication'Variant1 File
    | DisputeEvidenceCustomerCommunication'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeEvidenceCustomerCommunication'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeEvidenceCustomerCommunication'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeEvidenceCustomerSignature'Variants
    = DisputeEvidenceCustomerSignature'Variant1 File
    | DisputeEvidenceCustomerSignature'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeEvidenceCustomerSignature'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeEvidenceCustomerSignature'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeEvidenceDuplicateChargeDocumentation'Variants
    = DisputeEvidenceDuplicateChargeDocumentation'Variant1 File
    | DisputeEvidenceDuplicateChargeDocumentation'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeEvidenceDuplicateChargeDocumentation'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeEvidenceDuplicateChargeDocumentation'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeEvidenceReceipt'Variants
    = DisputeEvidenceReceipt'Variant1 File
    | DisputeEvidenceReceipt'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeEvidenceReceipt'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeEvidenceReceipt'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeEvidenceRefundPolicy'Variants
    = DisputeEvidenceRefundPolicy'Variant1 File
    | DisputeEvidenceRefundPolicy'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeEvidenceRefundPolicy'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeEvidenceRefundPolicy'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeEvidenceServiceDocumentation'Variants
    = DisputeEvidenceServiceDocumentation'Variant1 File
    | DisputeEvidenceServiceDocumentation'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeEvidenceServiceDocumentation'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeEvidenceServiceDocumentation'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeEvidenceShippingDocumentation'Variants
    = DisputeEvidenceShippingDocumentation'Variant1 File
    | DisputeEvidenceShippingDocumentation'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeEvidenceShippingDocumentation'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeEvidenceShippingDocumentation'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data DisputeEvidenceUncategorizedFile'Variants
    = DisputeEvidenceUncategorizedFile'Variant1 File
    | DisputeEvidenceUncategorizedFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON DisputeEvidenceUncategorizedFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON DisputeEvidenceUncategorizedFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON DisputeEvidence
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "access_activity_log" (disputeEvidenceAccessActivityLog obj) : (Data.Aeson..=) "billing_address" (disputeEvidenceBillingAddress obj) : (Data.Aeson..=) "cancellation_policy" (disputeEvidenceCancellationPolicy obj) : (Data.Aeson..=) "cancellation_policy_disclosure" (disputeEvidenceCancellationPolicyDisclosure obj) : (Data.Aeson..=) "cancellation_rebuttal" (disputeEvidenceCancellationRebuttal obj) : (Data.Aeson..=) "customer_communication" (disputeEvidenceCustomerCommunication obj) : (Data.Aeson..=) "customer_email_address" (disputeEvidenceCustomerEmailAddress obj) : (Data.Aeson..=) "customer_name" (disputeEvidenceCustomerName obj) : (Data.Aeson..=) "customer_purchase_ip" (disputeEvidenceCustomerPurchaseIp obj) : (Data.Aeson..=) "customer_signature" (disputeEvidenceCustomerSignature obj) : (Data.Aeson..=) "duplicate_charge_documentation" (disputeEvidenceDuplicateChargeDocumentation obj) : (Data.Aeson..=) "duplicate_charge_explanation" (disputeEvidenceDuplicateChargeExplanation obj) : (Data.Aeson..=) "duplicate_charge_id" (disputeEvidenceDuplicateChargeId obj) : (Data.Aeson..=) "product_description" (disputeEvidenceProductDescription obj) : (Data.Aeson..=) "receipt" (disputeEvidenceReceipt obj) : (Data.Aeson..=) "refund_policy" (disputeEvidenceRefundPolicy obj) : (Data.Aeson..=) "refund_policy_disclosure" (disputeEvidenceRefundPolicyDisclosure obj) : (Data.Aeson..=) "refund_refusal_explanation" (disputeEvidenceRefundRefusalExplanation obj) : (Data.Aeson..=) "service_date" (disputeEvidenceServiceDate obj) : (Data.Aeson..=) "service_documentation" (disputeEvidenceServiceDocumentation obj) : (Data.Aeson..=) "shipping_address" (disputeEvidenceShippingAddress obj) : (Data.Aeson..=) "shipping_carrier" (disputeEvidenceShippingCarrier obj) : (Data.Aeson..=) "shipping_date" (disputeEvidenceShippingDate obj) : (Data.Aeson..=) "shipping_documentation" (disputeEvidenceShippingDocumentation obj) : (Data.Aeson..=) "shipping_tracking_number" (disputeEvidenceShippingTrackingNumber obj) : (Data.Aeson..=) "uncategorized_file" (disputeEvidenceUncategorizedFile obj) : (Data.Aeson..=) "uncategorized_text" (disputeEvidenceUncategorizedText obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "access_activity_log" (disputeEvidenceAccessActivityLog obj) GHC.Base.<> ((Data.Aeson..=) "billing_address" (disputeEvidenceBillingAddress obj) GHC.Base.<> ((Data.Aeson..=) "cancellation_policy" (disputeEvidenceCancellationPolicy obj) GHC.Base.<> ((Data.Aeson..=) "cancellation_policy_disclosure" (disputeEvidenceCancellationPolicyDisclosure obj) GHC.Base.<> ((Data.Aeson..=) "cancellation_rebuttal" (disputeEvidenceCancellationRebuttal obj) GHC.Base.<> ((Data.Aeson..=) "customer_communication" (disputeEvidenceCustomerCommunication obj) GHC.Base.<> ((Data.Aeson..=) "customer_email_address" (disputeEvidenceCustomerEmailAddress obj) GHC.Base.<> ((Data.Aeson..=) "customer_name" (disputeEvidenceCustomerName obj) GHC.Base.<> ((Data.Aeson..=) "customer_purchase_ip" (disputeEvidenceCustomerPurchaseIp obj) GHC.Base.<> ((Data.Aeson..=) "customer_signature" (disputeEvidenceCustomerSignature obj) GHC.Base.<> ((Data.Aeson..=) "duplicate_charge_documentation" (disputeEvidenceDuplicateChargeDocumentation obj) GHC.Base.<> ((Data.Aeson..=) "duplicate_charge_explanation" (disputeEvidenceDuplicateChargeExplanation obj) GHC.Base.<> ((Data.Aeson..=) "duplicate_charge_id" (disputeEvidenceDuplicateChargeId obj) GHC.Base.<> ((Data.Aeson..=) "product_description" (disputeEvidenceProductDescription obj) GHC.Base.<> ((Data.Aeson..=) "receipt" (disputeEvidenceReceipt obj) GHC.Base.<> ((Data.Aeson..=) "refund_policy" (disputeEvidenceRefundPolicy obj) GHC.Base.<> ((Data.Aeson..=) "refund_policy_disclosure" (disputeEvidenceRefundPolicyDisclosure obj) GHC.Base.<> ((Data.Aeson..=) "refund_refusal_explanation" (disputeEvidenceRefundRefusalExplanation obj) GHC.Base.<> ((Data.Aeson..=) "service_date" (disputeEvidenceServiceDate obj) GHC.Base.<> ((Data.Aeson..=) "service_documentation" (disputeEvidenceServiceDocumentation obj) GHC.Base.<> ((Data.Aeson..=) "shipping_address" (disputeEvidenceShippingAddress obj) GHC.Base.<> ((Data.Aeson..=) "shipping_carrier" (disputeEvidenceShippingCarrier obj) GHC.Base.<> ((Data.Aeson..=) "shipping_date" (disputeEvidenceShippingDate obj) GHC.Base.<> ((Data.Aeson..=) "shipping_documentation" (disputeEvidenceShippingDocumentation obj) GHC.Base.<> ((Data.Aeson..=) "shipping_tracking_number" (disputeEvidenceShippingTrackingNumber obj) GHC.Base.<> ((Data.Aeson..=) "uncategorized_file" (disputeEvidenceUncategorizedFile obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_text" (disputeEvidenceUncategorizedText obj)))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON DisputeEvidence
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputeEvidence" (\obj -> ((((((((((((((((((((((((((GHC.Base.pure DisputeEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "access_activity_log")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cancellation_policy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cancellation_policy_disclosure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cancellation_rebuttal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_communication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_email_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_purchase_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_signature")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "duplicate_charge_documentation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "duplicate_charge_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "duplicate_charge_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_policy")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_policy_disclosure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_refusal_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "service_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "service_documentation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_documentation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_tracking_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_text"))
data Error
    = Error {errorError :: ApiErrors}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Error
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "error" (errorError obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "error" (errorError obj))
instance Data.Aeson.Types.FromJSON.FromJSON Error
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Error" (\obj -> GHC.Base.pure Error GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "error"))
data Event
    = Event {eventAccount :: (GHC.Maybe.Maybe GHC.Base.String),
             eventApiVersion :: (GHC.Maybe.Maybe GHC.Base.String),
             eventCreated :: GHC.Integer.Type.Integer,
             eventData :: NotificationEventData,
             eventId :: GHC.Base.String,
             eventLivemode :: GHC.Types.Bool,
             eventObject :: EventObject',
             eventPendingWebhooks :: GHC.Integer.Type.Integer,
             eventRequest :: (GHC.Maybe.Maybe EventRequest'),
             eventType :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data EventObject'
    = EventObject'EnumOther Data.Aeson.Types.Internal.Value
    | EventObject'EnumTyped GHC.Base.String
    | EventObject'EnumStringEvent
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON EventObject'
    where toJSON (EventObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EventObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (EventObject'EnumStringEvent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "event"
instance Data.Aeson.FromJSON EventObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "event")
                                          then EventObject'EnumStringEvent
                                          else EventObject'EnumOther val)
data EventRequest'
    = EventRequest' {eventRequest'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                     eventRequest'IdempotencyKey :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON EventRequest'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "id" (eventRequest'Id obj) : (Data.Aeson..=) "idempotency_key" (eventRequest'IdempotencyKey obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "id" (eventRequest'Id obj) GHC.Base.<> (Data.Aeson..=) "idempotency_key" (eventRequest'IdempotencyKey obj))
instance Data.Aeson.Types.FromJSON.FromJSON EventRequest'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "EventRequest'" (\obj -> (GHC.Base.pure EventRequest' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "idempotency_key"))
instance Data.Aeson.ToJSON Event
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (eventAccount obj) : (Data.Aeson..=) "api_version" (eventApiVersion obj) : (Data.Aeson..=) "created" (eventCreated obj) : (Data.Aeson..=) "data" (eventData obj) : (Data.Aeson..=) "id" (eventId obj) : (Data.Aeson..=) "livemode" (eventLivemode obj) : (Data.Aeson..=) "object" (eventObject obj) : (Data.Aeson..=) "pending_webhooks" (eventPendingWebhooks obj) : (Data.Aeson..=) "request" (eventRequest obj) : (Data.Aeson..=) "type" (eventType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (eventAccount obj) GHC.Base.<> ((Data.Aeson..=) "api_version" (eventApiVersion obj) GHC.Base.<> ((Data.Aeson..=) "created" (eventCreated obj) GHC.Base.<> ((Data.Aeson..=) "data" (eventData obj) GHC.Base.<> ((Data.Aeson..=) "id" (eventId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (eventLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (eventObject obj) GHC.Base.<> ((Data.Aeson..=) "pending_webhooks" (eventPendingWebhooks obj) GHC.Base.<> ((Data.Aeson..=) "request" (eventRequest obj) GHC.Base.<> (Data.Aeson..=) "type" (eventType obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Event
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Event" (\obj -> (((((((((GHC.Base.pure Event GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "api_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_webhooks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "request")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data ExternalAccount
    = ExternalAccount {externalAccountAccount :: (GHC.Maybe.Maybe ExternalAccountAccount'Variants),
                       externalAccountAccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAddressCity :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAddressCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAddressLine1 :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAddressLine2 :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAddressState :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAddressZip :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAddressZipCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountAvailablePayoutMethods :: (GHC.Maybe.Maybe ([] ExternalAccountAvailablePayoutMethods')),
                       externalAccountBankName :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountBrand :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountCustomer :: (GHC.Maybe.Maybe ExternalAccountCustomer'Variants),
                       externalAccountCvcCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountDefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                       externalAccountDynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                       externalAccountExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                       externalAccountFingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountFunding :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountId :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountMetadata :: (GHC.Maybe.Maybe ExternalAccountMetadata'),
                       externalAccountName :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountObject :: (GHC.Maybe.Maybe ExternalAccountObject'),
                       externalAccountRecipient :: (GHC.Maybe.Maybe ExternalAccountRecipient'Variants),
                       externalAccountRoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountStatus :: (GHC.Maybe.Maybe GHC.Base.String),
                       externalAccountTokenizationMethod :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ExternalAccountAccount'Variants
    = ExternalAccountAccount'Variant1 Account
    | ExternalAccountAccount'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ExternalAccountAccount'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ExternalAccountAccount'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ExternalAccountAvailablePayoutMethods'
    = ExternalAccountAvailablePayoutMethods'EnumOther Data.Aeson.Types.Internal.Value
    | ExternalAccountAvailablePayoutMethods'EnumTyped GHC.Base.String
    | ExternalAccountAvailablePayoutMethods'EnumStringInstant
    | ExternalAccountAvailablePayoutMethods'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ExternalAccountAvailablePayoutMethods'
    where toJSON (ExternalAccountAvailablePayoutMethods'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ExternalAccountAvailablePayoutMethods'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ExternalAccountAvailablePayoutMethods'EnumStringInstant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant"
          toJSON (ExternalAccountAvailablePayoutMethods'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON ExternalAccountAvailablePayoutMethods'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant")
                                          then ExternalAccountAvailablePayoutMethods'EnumStringInstant
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                then ExternalAccountAvailablePayoutMethods'EnumStringStandard
                                                else ExternalAccountAvailablePayoutMethods'EnumOther val)
data ExternalAccountCustomer'Variants
    = ExternalAccountCustomer'Variant1 Customer
    | ExternalAccountCustomer'Variant2 DeletedCustomer
    | ExternalAccountCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ExternalAccountCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ExternalAccountCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ExternalAccountMetadata'
    = ExternalAccountMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ExternalAccountMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON ExternalAccountMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ExternalAccountMetadata'" (\obj -> GHC.Base.pure ExternalAccountMetadata')
data ExternalAccountObject'
    = ExternalAccountObject'EnumOther Data.Aeson.Types.Internal.Value
    | ExternalAccountObject'EnumTyped GHC.Base.String
    | ExternalAccountObject'EnumStringBankAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ExternalAccountObject'
    where toJSON (ExternalAccountObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ExternalAccountObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ExternalAccountObject'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
instance Data.Aeson.FromJSON ExternalAccountObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then ExternalAccountObject'EnumStringBankAccount
                                          else ExternalAccountObject'EnumOther val)
data ExternalAccountRecipient'Variants
    = ExternalAccountRecipient'Variant1 Recipient
    | ExternalAccountRecipient'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ExternalAccountRecipient'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ExternalAccountRecipient'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON ExternalAccount
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (externalAccountAccount obj) : (Data.Aeson..=) "account_holder_name" (externalAccountAccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (externalAccountAccountHolderType obj) : (Data.Aeson..=) "address_city" (externalAccountAddressCity obj) : (Data.Aeson..=) "address_country" (externalAccountAddressCountry obj) : (Data.Aeson..=) "address_line1" (externalAccountAddressLine1 obj) : (Data.Aeson..=) "address_line1_check" (externalAccountAddressLine1Check obj) : (Data.Aeson..=) "address_line2" (externalAccountAddressLine2 obj) : (Data.Aeson..=) "address_state" (externalAccountAddressState obj) : (Data.Aeson..=) "address_zip" (externalAccountAddressZip obj) : (Data.Aeson..=) "address_zip_check" (externalAccountAddressZipCheck obj) : (Data.Aeson..=) "available_payout_methods" (externalAccountAvailablePayoutMethods obj) : (Data.Aeson..=) "bank_name" (externalAccountBankName obj) : (Data.Aeson..=) "brand" (externalAccountBrand obj) : (Data.Aeson..=) "country" (externalAccountCountry obj) : (Data.Aeson..=) "currency" (externalAccountCurrency obj) : (Data.Aeson..=) "customer" (externalAccountCustomer obj) : (Data.Aeson..=) "cvc_check" (externalAccountCvcCheck obj) : (Data.Aeson..=) "default_for_currency" (externalAccountDefaultForCurrency obj) : (Data.Aeson..=) "dynamic_last4" (externalAccountDynamicLast4 obj) : (Data.Aeson..=) "exp_month" (externalAccountExpMonth obj) : (Data.Aeson..=) "exp_year" (externalAccountExpYear obj) : (Data.Aeson..=) "fingerprint" (externalAccountFingerprint obj) : (Data.Aeson..=) "funding" (externalAccountFunding obj) : (Data.Aeson..=) "id" (externalAccountId obj) : (Data.Aeson..=) "last4" (externalAccountLast4 obj) : (Data.Aeson..=) "metadata" (externalAccountMetadata obj) : (Data.Aeson..=) "name" (externalAccountName obj) : (Data.Aeson..=) "object" (externalAccountObject obj) : (Data.Aeson..=) "recipient" (externalAccountRecipient obj) : (Data.Aeson..=) "routing_number" (externalAccountRoutingNumber obj) : (Data.Aeson..=) "status" (externalAccountStatus obj) : (Data.Aeson..=) "tokenization_method" (externalAccountTokenizationMethod obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (externalAccountAccount obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (externalAccountAccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (externalAccountAccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "address_city" (externalAccountAddressCity obj) GHC.Base.<> ((Data.Aeson..=) "address_country" (externalAccountAddressCountry obj) GHC.Base.<> ((Data.Aeson..=) "address_line1" (externalAccountAddressLine1 obj) GHC.Base.<> ((Data.Aeson..=) "address_line1_check" (externalAccountAddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_line2" (externalAccountAddressLine2 obj) GHC.Base.<> ((Data.Aeson..=) "address_state" (externalAccountAddressState obj) GHC.Base.<> ((Data.Aeson..=) "address_zip" (externalAccountAddressZip obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (externalAccountAddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "available_payout_methods" (externalAccountAvailablePayoutMethods obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (externalAccountBankName obj) GHC.Base.<> ((Data.Aeson..=) "brand" (externalAccountBrand obj) GHC.Base.<> ((Data.Aeson..=) "country" (externalAccountCountry obj) GHC.Base.<> ((Data.Aeson..=) "currency" (externalAccountCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (externalAccountCustomer obj) GHC.Base.<> ((Data.Aeson..=) "cvc_check" (externalAccountCvcCheck obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (externalAccountDefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (externalAccountDynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (externalAccountExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (externalAccountExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (externalAccountFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "funding" (externalAccountFunding obj) GHC.Base.<> ((Data.Aeson..=) "id" (externalAccountId obj) GHC.Base.<> ((Data.Aeson..=) "last4" (externalAccountLast4 obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (externalAccountMetadata obj) GHC.Base.<> ((Data.Aeson..=) "name" (externalAccountName obj) GHC.Base.<> ((Data.Aeson..=) "object" (externalAccountObject obj) GHC.Base.<> ((Data.Aeson..=) "recipient" (externalAccountRecipient obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (externalAccountRoutingNumber obj) GHC.Base.<> ((Data.Aeson..=) "status" (externalAccountStatus obj) GHC.Base.<> (Data.Aeson..=) "tokenization_method" (externalAccountTokenizationMethod obj)))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ExternalAccount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ExternalAccount" (\obj -> ((((((((((((((((((((((((((((((((GHC.Base.pure ExternalAccount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method"))
data FeeRefund
    = FeeRefund {feeRefundAmount :: GHC.Integer.Type.Integer,
                 feeRefundBalanceTransaction :: (GHC.Maybe.Maybe FeeRefundBalanceTransaction'Variants),
                 feeRefundCreated :: GHC.Integer.Type.Integer,
                 feeRefundCurrency :: GHC.Base.String,
                 feeRefundFee :: FeeRefundFee'Variants,
                 feeRefundId :: GHC.Base.String,
                 feeRefundMetadata :: FeeRefundMetadata',
                 feeRefundObject :: FeeRefundObject'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data FeeRefundBalanceTransaction'Variants
    = FeeRefundBalanceTransaction'Variant1 BalanceTransaction
    | FeeRefundBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON FeeRefundBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON FeeRefundBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data FeeRefundFee'Variants
    = FeeRefundFee'Variant1 ApplicationFee
    | FeeRefundFee'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON FeeRefundFee'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON FeeRefundFee'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data FeeRefundMetadata'
    = FeeRefundMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON FeeRefundMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON FeeRefundMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "FeeRefundMetadata'" (\obj -> GHC.Base.pure FeeRefundMetadata')
data FeeRefundObject'
    = FeeRefundObject'EnumOther Data.Aeson.Types.Internal.Value
    | FeeRefundObject'EnumTyped GHC.Base.String
    | FeeRefundObject'EnumStringFeeRefund
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON FeeRefundObject'
    where toJSON (FeeRefundObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FeeRefundObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FeeRefundObject'EnumStringFeeRefund) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fee_refund"
instance Data.Aeson.FromJSON FeeRefundObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fee_refund")
                                          then FeeRefundObject'EnumStringFeeRefund
                                          else FeeRefundObject'EnumOther val)
instance Data.Aeson.ToJSON FeeRefund
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (feeRefundAmount obj) : (Data.Aeson..=) "balance_transaction" (feeRefundBalanceTransaction obj) : (Data.Aeson..=) "created" (feeRefundCreated obj) : (Data.Aeson..=) "currency" (feeRefundCurrency obj) : (Data.Aeson..=) "fee" (feeRefundFee obj) : (Data.Aeson..=) "id" (feeRefundId obj) : (Data.Aeson..=) "metadata" (feeRefundMetadata obj) : (Data.Aeson..=) "object" (feeRefundObject obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (feeRefundAmount obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (feeRefundBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "created" (feeRefundCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (feeRefundCurrency obj) GHC.Base.<> ((Data.Aeson..=) "fee" (feeRefundFee obj) GHC.Base.<> ((Data.Aeson..=) "id" (feeRefundId obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (feeRefundMetadata obj) GHC.Base.<> (Data.Aeson..=) "object" (feeRefundObject obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON FeeRefund
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "FeeRefund" (\obj -> (((((((GHC.Base.pure FeeRefund GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object"))
data File
    = File {fileCreated :: GHC.Integer.Type.Integer,
            fileFilename :: (GHC.Maybe.Maybe GHC.Base.String),
            fileId :: GHC.Base.String,
            fileLinks :: (GHC.Maybe.Maybe FileLinks'),
            fileObject :: FileObject',
            filePurpose :: GHC.Base.String,
            fileSize :: GHC.Integer.Type.Integer,
            fileTitle :: (GHC.Maybe.Maybe GHC.Base.String),
            fileType :: (GHC.Maybe.Maybe GHC.Base.String),
            fileUrl :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data FileLinks'
    = FileLinks' {fileLinks'Data :: ([] FileLink),
                  fileLinks'HasMore :: GHC.Types.Bool,
                  fileLinks'Object :: FileLinks'Object',
                  fileLinks'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data FileLinks'Object'
    = FileLinks'Object'EnumOther Data.Aeson.Types.Internal.Value
    | FileLinks'Object'EnumTyped GHC.Base.String
    | FileLinks'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON FileLinks'Object'
    where toJSON (FileLinks'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FileLinks'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FileLinks'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON FileLinks'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then FileLinks'Object'EnumStringList
                                          else FileLinks'Object'EnumOther val)
instance Data.Aeson.ToJSON FileLinks'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (fileLinks'Data obj) : (Data.Aeson..=) "has_more" (fileLinks'HasMore obj) : (Data.Aeson..=) "object" (fileLinks'Object obj) : (Data.Aeson..=) "url" (fileLinks'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (fileLinks'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (fileLinks'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (fileLinks'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (fileLinks'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON FileLinks'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "FileLinks'" (\obj -> (((GHC.Base.pure FileLinks' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data FileObject'
    = FileObject'EnumOther Data.Aeson.Types.Internal.Value
    | FileObject'EnumTyped GHC.Base.String
    | FileObject'EnumStringFile
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON FileObject'
    where toJSON (FileObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FileObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FileObject'EnumStringFile) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "file"
instance Data.Aeson.FromJSON FileObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "file")
                                          then FileObject'EnumStringFile
                                          else FileObject'EnumOther val)
instance Data.Aeson.ToJSON File
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (fileCreated obj) : (Data.Aeson..=) "filename" (fileFilename obj) : (Data.Aeson..=) "id" (fileId obj) : (Data.Aeson..=) "links" (fileLinks obj) : (Data.Aeson..=) "object" (fileObject obj) : (Data.Aeson..=) "purpose" (filePurpose obj) : (Data.Aeson..=) "size" (fileSize obj) : (Data.Aeson..=) "title" (fileTitle obj) : (Data.Aeson..=) "type" (fileType obj) : (Data.Aeson..=) "url" (fileUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (fileCreated obj) GHC.Base.<> ((Data.Aeson..=) "filename" (fileFilename obj) GHC.Base.<> ((Data.Aeson..=) "id" (fileId obj) GHC.Base.<> ((Data.Aeson..=) "links" (fileLinks obj) GHC.Base.<> ((Data.Aeson..=) "object" (fileObject obj) GHC.Base.<> ((Data.Aeson..=) "purpose" (filePurpose obj) GHC.Base.<> ((Data.Aeson..=) "size" (fileSize obj) GHC.Base.<> ((Data.Aeson..=) "title" (fileTitle obj) GHC.Base.<> ((Data.Aeson..=) "type" (fileType obj) GHC.Base.<> (Data.Aeson..=) "url" (fileUrl obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON File
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "File" (\obj -> (((((((((GHC.Base.pure File GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filename")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "links")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "purpose")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
data FileLink
    = FileLink {fileLinkCreated :: GHC.Integer.Type.Integer,
                fileLinkExpired :: GHC.Types.Bool,
                fileLinkExpiresAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                fileLinkFile :: FileLinkFile'Variants,
                fileLinkId :: GHC.Base.String,
                fileLinkLivemode :: GHC.Types.Bool,
                fileLinkMetadata :: FileLinkMetadata',
                fileLinkObject :: FileLinkObject',
                fileLinkUrl :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data FileLinkFile'Variants
    = FileLinkFile'Variant1 File
    | FileLinkFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON FileLinkFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON FileLinkFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data FileLinkMetadata'
    = FileLinkMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON FileLinkMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON FileLinkMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "FileLinkMetadata'" (\obj -> GHC.Base.pure FileLinkMetadata')
data FileLinkObject'
    = FileLinkObject'EnumOther Data.Aeson.Types.Internal.Value
    | FileLinkObject'EnumTyped GHC.Base.String
    | FileLinkObject'EnumStringFileLink
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON FileLinkObject'
    where toJSON (FileLinkObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FileLinkObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (FileLinkObject'EnumStringFileLink) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "file_link"
instance Data.Aeson.FromJSON FileLinkObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "file_link")
                                          then FileLinkObject'EnumStringFileLink
                                          else FileLinkObject'EnumOther val)
instance Data.Aeson.ToJSON FileLink
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (fileLinkCreated obj) : (Data.Aeson..=) "expired" (fileLinkExpired obj) : (Data.Aeson..=) "expires_at" (fileLinkExpiresAt obj) : (Data.Aeson..=) "file" (fileLinkFile obj) : (Data.Aeson..=) "id" (fileLinkId obj) : (Data.Aeson..=) "livemode" (fileLinkLivemode obj) : (Data.Aeson..=) "metadata" (fileLinkMetadata obj) : (Data.Aeson..=) "object" (fileLinkObject obj) : (Data.Aeson..=) "url" (fileLinkUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (fileLinkCreated obj) GHC.Base.<> ((Data.Aeson..=) "expired" (fileLinkExpired obj) GHC.Base.<> ((Data.Aeson..=) "expires_at" (fileLinkExpiresAt obj) GHC.Base.<> ((Data.Aeson..=) "file" (fileLinkFile obj) GHC.Base.<> ((Data.Aeson..=) "id" (fileLinkId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (fileLinkLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (fileLinkMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (fileLinkObject obj) GHC.Base.<> (Data.Aeson..=) "url" (fileLinkUrl obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON FileLink
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "FileLink" (\obj -> ((((((((GHC.Base.pure FileLink GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expired")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "file")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
data Invoice
    = Invoice {invoiceAccountCountry :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceAccountName :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceAmountDue :: GHC.Integer.Type.Integer,
               invoiceAmountPaid :: GHC.Integer.Type.Integer,
               invoiceAmountRemaining :: GHC.Integer.Type.Integer,
               invoiceApplicationFeeAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
               invoiceAttemptCount :: GHC.Integer.Type.Integer,
               invoiceAttempted :: GHC.Types.Bool,
               invoiceAutoAdvance :: (GHC.Maybe.Maybe GHC.Types.Bool),
               invoiceBillingReason :: (GHC.Maybe.Maybe InvoiceBillingReason'),
               invoiceCharge :: (GHC.Maybe.Maybe InvoiceCharge'Variants),
               invoiceCollectionMethod :: (GHC.Maybe.Maybe InvoiceCollectionMethod'),
               invoiceCreated :: GHC.Integer.Type.Integer,
               invoiceCurrency :: GHC.Base.String,
               invoiceCustomFields :: (GHC.Maybe.Maybe ([] InvoiceSettingCustomField)),
               invoiceCustomer :: InvoiceCustomer'Variants,
               invoiceCustomerAddress :: (GHC.Maybe.Maybe InvoiceCustomerAddress'),
               invoiceCustomerEmail :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceCustomerName :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceCustomerPhone :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceCustomerShipping :: (GHC.Maybe.Maybe InvoiceCustomerShipping'),
               invoiceCustomerTaxExempt :: (GHC.Maybe.Maybe InvoiceCustomerTaxExempt'),
               invoiceCustomerTaxIds :: (GHC.Maybe.Maybe ([] InvoicesResourceInvoiceTaxId)),
               invoiceDefaultPaymentMethod :: (GHC.Maybe.Maybe InvoiceDefaultPaymentMethod'Variants),
               invoiceDefaultSource :: (GHC.Maybe.Maybe InvoiceDefaultSource'Variants),
               invoiceDefaultTaxRates :: (GHC.Maybe.Maybe ([] TaxRate)),
               invoiceDescription :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceDiscount :: (GHC.Maybe.Maybe InvoiceDiscount'),
               invoiceDueDate :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
               invoiceEndingBalance :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
               invoiceFooter :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceHostedInvoiceUrl :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceId :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceInvoicePdf :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceLines :: InvoiceLines',
               invoiceLivemode :: GHC.Types.Bool,
               invoiceMetadata :: (GHC.Maybe.Maybe InvoiceMetadata'),
               invoiceNextPaymentAttempt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
               invoiceNumber :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceObject :: InvoiceObject',
               invoicePaid :: GHC.Types.Bool,
               invoicePaymentIntent :: (GHC.Maybe.Maybe InvoicePaymentIntent'Variants),
               invoicePeriodEnd :: GHC.Integer.Type.Integer,
               invoicePeriodStart :: GHC.Integer.Type.Integer,
               invoicePostPaymentCreditNotesAmount :: GHC.Integer.Type.Integer,
               invoicePrePaymentCreditNotesAmount :: GHC.Integer.Type.Integer,
               invoiceReceiptNumber :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceStartingBalance :: GHC.Integer.Type.Integer,
               invoiceStatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
               invoiceStatus :: (GHC.Maybe.Maybe InvoiceStatus'),
               invoiceStatusTransitions :: InvoicesStatusTransitions,
               invoiceSubscription :: (GHC.Maybe.Maybe InvoiceSubscription'Variants),
               invoiceSubscriptionProrationDate :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
               invoiceSubtotal :: GHC.Integer.Type.Integer,
               invoiceTax :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
               invoiceTaxPercent :: (GHC.Maybe.Maybe GHC.Types.Double),
               invoiceThresholdReason :: (GHC.Maybe.Maybe InvoiceThresholdReason),
               invoiceTotal :: GHC.Integer.Type.Integer,
               invoiceTotalTaxAmounts :: (GHC.Maybe.Maybe ([] InvoiceTaxAmount)),
               invoiceWebhooksDeliveredAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data InvoiceBillingReason'
    = InvoiceBillingReason'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceBillingReason'EnumTyped GHC.Base.String
    | InvoiceBillingReason'EnumStringAutomaticPendingInvoiceItemInvoice
    | InvoiceBillingReason'EnumStringManual
    | InvoiceBillingReason'EnumStringSubscription
    | InvoiceBillingReason'EnumStringSubscriptionCreate
    | InvoiceBillingReason'EnumStringSubscriptionCycle
    | InvoiceBillingReason'EnumStringSubscriptionThreshold
    | InvoiceBillingReason'EnumStringSubscriptionUpdate
    | InvoiceBillingReason'EnumStringUpcoming
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceBillingReason'
    where toJSON (InvoiceBillingReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceBillingReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceBillingReason'EnumStringAutomaticPendingInvoiceItemInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic_pending_invoice_item_invoice"
          toJSON (InvoiceBillingReason'EnumStringManual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual"
          toJSON (InvoiceBillingReason'EnumStringSubscription) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription"
          toJSON (InvoiceBillingReason'EnumStringSubscriptionCreate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_create"
          toJSON (InvoiceBillingReason'EnumStringSubscriptionCycle) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_cycle"
          toJSON (InvoiceBillingReason'EnumStringSubscriptionThreshold) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_threshold"
          toJSON (InvoiceBillingReason'EnumStringSubscriptionUpdate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_update"
          toJSON (InvoiceBillingReason'EnumStringUpcoming) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "upcoming"
instance Data.Aeson.FromJSON InvoiceBillingReason'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic_pending_invoice_item_invoice")
                                          then InvoiceBillingReason'EnumStringAutomaticPendingInvoiceItemInvoice
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual")
                                                then InvoiceBillingReason'EnumStringManual
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription")
                                                      then InvoiceBillingReason'EnumStringSubscription
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_create")
                                                            then InvoiceBillingReason'EnumStringSubscriptionCreate
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_cycle")
                                                                  then InvoiceBillingReason'EnumStringSubscriptionCycle
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_threshold")
                                                                        then InvoiceBillingReason'EnumStringSubscriptionThreshold
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_update")
                                                                              then InvoiceBillingReason'EnumStringSubscriptionUpdate
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "upcoming")
                                                                                    then InvoiceBillingReason'EnumStringUpcoming
                                                                                    else InvoiceBillingReason'EnumOther val)
data InvoiceCharge'Variants
    = InvoiceCharge'Variant1 Charge
    | InvoiceCharge'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceCharge'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceCharge'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data InvoiceCollectionMethod'
    = InvoiceCollectionMethod'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceCollectionMethod'EnumTyped GHC.Base.String
    | InvoiceCollectionMethod'EnumStringChargeAutomatically
    | InvoiceCollectionMethod'EnumStringSendInvoice
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceCollectionMethod'
    where toJSON (InvoiceCollectionMethod'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceCollectionMethod'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceCollectionMethod'EnumStringChargeAutomatically) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_automatically"
          toJSON (InvoiceCollectionMethod'EnumStringSendInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "send_invoice"
instance Data.Aeson.FromJSON InvoiceCollectionMethod'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_automatically")
                                          then InvoiceCollectionMethod'EnumStringChargeAutomatically
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "send_invoice")
                                                then InvoiceCollectionMethod'EnumStringSendInvoice
                                                else InvoiceCollectionMethod'EnumOther val)
data InvoiceCustomer'Variants
    = InvoiceCustomer'Variant1 Customer
    | InvoiceCustomer'Variant2 DeletedCustomer
    | InvoiceCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data InvoiceCustomerAddress'
    = InvoiceCustomerAddress' {invoiceCustomerAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                               invoiceCustomerAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                               invoiceCustomerAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                               invoiceCustomerAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                               invoiceCustomerAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                               invoiceCustomerAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceCustomerAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (invoiceCustomerAddress'City obj) : (Data.Aeson..=) "country" (invoiceCustomerAddress'Country obj) : (Data.Aeson..=) "line1" (invoiceCustomerAddress'Line1 obj) : (Data.Aeson..=) "line2" (invoiceCustomerAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (invoiceCustomerAddress'PostalCode obj) : (Data.Aeson..=) "state" (invoiceCustomerAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (invoiceCustomerAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (invoiceCustomerAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (invoiceCustomerAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (invoiceCustomerAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (invoiceCustomerAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (invoiceCustomerAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCustomerAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceCustomerAddress'" (\obj -> (((((GHC.Base.pure InvoiceCustomerAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data InvoiceCustomerShipping'
    = InvoiceCustomerShipping' {invoiceCustomerShipping'Address :: (GHC.Maybe.Maybe Address),
                                invoiceCustomerShipping'Carrier :: (GHC.Maybe.Maybe GHC.Base.String),
                                invoiceCustomerShipping'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                                invoiceCustomerShipping'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                                invoiceCustomerShipping'TrackingNumber :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceCustomerShipping'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (invoiceCustomerShipping'Address obj) : (Data.Aeson..=) "carrier" (invoiceCustomerShipping'Carrier obj) : (Data.Aeson..=) "name" (invoiceCustomerShipping'Name obj) : (Data.Aeson..=) "phone" (invoiceCustomerShipping'Phone obj) : (Data.Aeson..=) "tracking_number" (invoiceCustomerShipping'TrackingNumber obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (invoiceCustomerShipping'Address obj) GHC.Base.<> ((Data.Aeson..=) "carrier" (invoiceCustomerShipping'Carrier obj) GHC.Base.<> ((Data.Aeson..=) "name" (invoiceCustomerShipping'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (invoiceCustomerShipping'Phone obj) GHC.Base.<> (Data.Aeson..=) "tracking_number" (invoiceCustomerShipping'TrackingNumber obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCustomerShipping'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceCustomerShipping'" (\obj -> ((((GHC.Base.pure InvoiceCustomerShipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number"))
data InvoiceCustomerTaxExempt'
    = InvoiceCustomerTaxExempt'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceCustomerTaxExempt'EnumTyped GHC.Base.String
    | InvoiceCustomerTaxExempt'EnumStringExempt
    | InvoiceCustomerTaxExempt'EnumStringNone
    | InvoiceCustomerTaxExempt'EnumStringReverse
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceCustomerTaxExempt'
    where toJSON (InvoiceCustomerTaxExempt'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceCustomerTaxExempt'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceCustomerTaxExempt'EnumStringExempt) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exempt"
          toJSON (InvoiceCustomerTaxExempt'EnumStringNone) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
          toJSON (InvoiceCustomerTaxExempt'EnumStringReverse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reverse"
instance Data.Aeson.FromJSON InvoiceCustomerTaxExempt'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exempt")
                                          then InvoiceCustomerTaxExempt'EnumStringExempt
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                                then InvoiceCustomerTaxExempt'EnumStringNone
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reverse")
                                                      then InvoiceCustomerTaxExempt'EnumStringReverse
                                                      else InvoiceCustomerTaxExempt'EnumOther val)
data InvoiceDefaultPaymentMethod'Variants
    = InvoiceDefaultPaymentMethod'Variant1 PaymentMethod
    | InvoiceDefaultPaymentMethod'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceDefaultPaymentMethod'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceDefaultPaymentMethod'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data InvoiceDefaultSource'Variants
    = InvoiceDefaultSource'Variant1 AlipayAccount
    | InvoiceDefaultSource'Variant2 BankAccount
    | InvoiceDefaultSource'Variant3 BitcoinReceiver
    | InvoiceDefaultSource'Variant4 Card
    | InvoiceDefaultSource'Variant5 Source
    | InvoiceDefaultSource'Variant6 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceDefaultSource'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceDefaultSource'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data InvoiceDiscount'
    = InvoiceDiscount' {invoiceDiscount'Coupon :: (GHC.Maybe.Maybe Coupon),
                        invoiceDiscount'Customer :: (GHC.Maybe.Maybe InvoiceDiscount'Customer'Variants),
                        invoiceDiscount'End :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        invoiceDiscount'Object :: (GHC.Maybe.Maybe InvoiceDiscount'Object'),
                        invoiceDiscount'Start :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        invoiceDiscount'Subscription :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data InvoiceDiscount'Customer'Variants
    = InvoiceDiscount'Customer'Variant1 Customer
    | InvoiceDiscount'Customer'Variant2 DeletedCustomer
    | InvoiceDiscount'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceDiscount'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceDiscount'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data InvoiceDiscount'Object'
    = InvoiceDiscount'Object'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceDiscount'Object'EnumTyped GHC.Base.String
    | InvoiceDiscount'Object'EnumStringDiscount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceDiscount'Object'
    where toJSON (InvoiceDiscount'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceDiscount'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceDiscount'Object'EnumStringDiscount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount"
instance Data.Aeson.FromJSON InvoiceDiscount'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount")
                                          then InvoiceDiscount'Object'EnumStringDiscount
                                          else InvoiceDiscount'Object'EnumOther val)
instance Data.Aeson.ToJSON InvoiceDiscount'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "coupon" (invoiceDiscount'Coupon obj) : (Data.Aeson..=) "customer" (invoiceDiscount'Customer obj) : (Data.Aeson..=) "end" (invoiceDiscount'End obj) : (Data.Aeson..=) "object" (invoiceDiscount'Object obj) : (Data.Aeson..=) "start" (invoiceDiscount'Start obj) : (Data.Aeson..=) "subscription" (invoiceDiscount'Subscription obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "coupon" (invoiceDiscount'Coupon obj) GHC.Base.<> ((Data.Aeson..=) "customer" (invoiceDiscount'Customer obj) GHC.Base.<> ((Data.Aeson..=) "end" (invoiceDiscount'End obj) GHC.Base.<> ((Data.Aeson..=) "object" (invoiceDiscount'Object obj) GHC.Base.<> ((Data.Aeson..=) "start" (invoiceDiscount'Start obj) GHC.Base.<> (Data.Aeson..=) "subscription" (invoiceDiscount'Subscription obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceDiscount'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceDiscount'" (\obj -> (((((GHC.Base.pure InvoiceDiscount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription"))
data InvoiceLines'
    = InvoiceLines' {invoiceLines'Data :: ([] LineItem),
                     invoiceLines'HasMore :: GHC.Types.Bool,
                     invoiceLines'Object :: InvoiceLines'Object',
                     invoiceLines'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data InvoiceLines'Object'
    = InvoiceLines'Object'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceLines'Object'EnumTyped GHC.Base.String
    | InvoiceLines'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceLines'Object'
    where toJSON (InvoiceLines'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceLines'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceLines'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON InvoiceLines'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then InvoiceLines'Object'EnumStringList
                                          else InvoiceLines'Object'EnumOther val)
instance Data.Aeson.ToJSON InvoiceLines'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (invoiceLines'Data obj) : (Data.Aeson..=) "has_more" (invoiceLines'HasMore obj) : (Data.Aeson..=) "object" (invoiceLines'Object obj) : (Data.Aeson..=) "url" (invoiceLines'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (invoiceLines'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (invoiceLines'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (invoiceLines'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (invoiceLines'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceLines'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceLines'" (\obj -> (((GHC.Base.pure InvoiceLines' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data InvoiceMetadata'
    = InvoiceMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceMetadata'" (\obj -> GHC.Base.pure InvoiceMetadata')
data InvoiceObject'
    = InvoiceObject'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceObject'EnumTyped GHC.Base.String
    | InvoiceObject'EnumStringInvoice
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceObject'
    where toJSON (InvoiceObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceObject'EnumStringInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoice"
instance Data.Aeson.FromJSON InvoiceObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoice")
                                          then InvoiceObject'EnumStringInvoice
                                          else InvoiceObject'EnumOther val)
data InvoicePaymentIntent'Variants
    = InvoicePaymentIntent'Variant1 PaymentIntent
    | InvoicePaymentIntent'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoicePaymentIntent'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoicePaymentIntent'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data InvoiceStatus'
    = InvoiceStatus'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceStatus'EnumTyped GHC.Base.String
    | InvoiceStatus'EnumStringDeleted
    | InvoiceStatus'EnumStringDraft
    | InvoiceStatus'EnumStringOpen
    | InvoiceStatus'EnumStringPaid
    | InvoiceStatus'EnumStringUncollectible
    | InvoiceStatus'EnumStringVoid
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceStatus'
    where toJSON (InvoiceStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceStatus'EnumStringDeleted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "deleted"
          toJSON (InvoiceStatus'EnumStringDraft) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "draft"
          toJSON (InvoiceStatus'EnumStringOpen) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "open"
          toJSON (InvoiceStatus'EnumStringPaid) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paid"
          toJSON (InvoiceStatus'EnumStringUncollectible) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uncollectible"
          toJSON (InvoiceStatus'EnumStringVoid) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "void"
instance Data.Aeson.FromJSON InvoiceStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "deleted")
                                          then InvoiceStatus'EnumStringDeleted
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "draft")
                                                then InvoiceStatus'EnumStringDraft
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "open")
                                                      then InvoiceStatus'EnumStringOpen
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paid")
                                                            then InvoiceStatus'EnumStringPaid
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uncollectible")
                                                                  then InvoiceStatus'EnumStringUncollectible
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "void")
                                                                        then InvoiceStatus'EnumStringVoid
                                                                        else InvoiceStatus'EnumOther val)
data InvoiceSubscription'Variants
    = InvoiceSubscription'Variant1 Subscription
    | InvoiceSubscription'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceSubscription'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceSubscription'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Invoice
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account_country" (invoiceAccountCountry obj) : (Data.Aeson..=) "account_name" (invoiceAccountName obj) : (Data.Aeson..=) "amount_due" (invoiceAmountDue obj) : (Data.Aeson..=) "amount_paid" (invoiceAmountPaid obj) : (Data.Aeson..=) "amount_remaining" (invoiceAmountRemaining obj) : (Data.Aeson..=) "application_fee_amount" (invoiceApplicationFeeAmount obj) : (Data.Aeson..=) "attempt_count" (invoiceAttemptCount obj) : (Data.Aeson..=) "attempted" (invoiceAttempted obj) : (Data.Aeson..=) "auto_advance" (invoiceAutoAdvance obj) : (Data.Aeson..=) "billing_reason" (invoiceBillingReason obj) : (Data.Aeson..=) "charge" (invoiceCharge obj) : (Data.Aeson..=) "collection_method" (invoiceCollectionMethod obj) : (Data.Aeson..=) "created" (invoiceCreated obj) : (Data.Aeson..=) "currency" (invoiceCurrency obj) : (Data.Aeson..=) "custom_fields" (invoiceCustomFields obj) : (Data.Aeson..=) "customer" (invoiceCustomer obj) : (Data.Aeson..=) "customer_address" (invoiceCustomerAddress obj) : (Data.Aeson..=) "customer_email" (invoiceCustomerEmail obj) : (Data.Aeson..=) "customer_name" (invoiceCustomerName obj) : (Data.Aeson..=) "customer_phone" (invoiceCustomerPhone obj) : (Data.Aeson..=) "customer_shipping" (invoiceCustomerShipping obj) : (Data.Aeson..=) "customer_tax_exempt" (invoiceCustomerTaxExempt obj) : (Data.Aeson..=) "customer_tax_ids" (invoiceCustomerTaxIds obj) : (Data.Aeson..=) "default_payment_method" (invoiceDefaultPaymentMethod obj) : (Data.Aeson..=) "default_source" (invoiceDefaultSource obj) : (Data.Aeson..=) "default_tax_rates" (invoiceDefaultTaxRates obj) : (Data.Aeson..=) "description" (invoiceDescription obj) : (Data.Aeson..=) "discount" (invoiceDiscount obj) : (Data.Aeson..=) "due_date" (invoiceDueDate obj) : (Data.Aeson..=) "ending_balance" (invoiceEndingBalance obj) : (Data.Aeson..=) "footer" (invoiceFooter obj) : (Data.Aeson..=) "hosted_invoice_url" (invoiceHostedInvoiceUrl obj) : (Data.Aeson..=) "id" (invoiceId obj) : (Data.Aeson..=) "invoice_pdf" (invoiceInvoicePdf obj) : (Data.Aeson..=) "lines" (invoiceLines obj) : (Data.Aeson..=) "livemode" (invoiceLivemode obj) : (Data.Aeson..=) "metadata" (invoiceMetadata obj) : (Data.Aeson..=) "next_payment_attempt" (invoiceNextPaymentAttempt obj) : (Data.Aeson..=) "number" (invoiceNumber obj) : (Data.Aeson..=) "object" (invoiceObject obj) : (Data.Aeson..=) "paid" (invoicePaid obj) : (Data.Aeson..=) "payment_intent" (invoicePaymentIntent obj) : (Data.Aeson..=) "period_end" (invoicePeriodEnd obj) : (Data.Aeson..=) "period_start" (invoicePeriodStart obj) : (Data.Aeson..=) "post_payment_credit_notes_amount" (invoicePostPaymentCreditNotesAmount obj) : (Data.Aeson..=) "pre_payment_credit_notes_amount" (invoicePrePaymentCreditNotesAmount obj) : (Data.Aeson..=) "receipt_number" (invoiceReceiptNumber obj) : (Data.Aeson..=) "starting_balance" (invoiceStartingBalance obj) : (Data.Aeson..=) "statement_descriptor" (invoiceStatementDescriptor obj) : (Data.Aeson..=) "status" (invoiceStatus obj) : (Data.Aeson..=) "status_transitions" (invoiceStatusTransitions obj) : (Data.Aeson..=) "subscription" (invoiceSubscription obj) : (Data.Aeson..=) "subscription_proration_date" (invoiceSubscriptionProrationDate obj) : (Data.Aeson..=) "subtotal" (invoiceSubtotal obj) : (Data.Aeson..=) "tax" (invoiceTax obj) : (Data.Aeson..=) "tax_percent" (invoiceTaxPercent obj) : (Data.Aeson..=) "threshold_reason" (invoiceThresholdReason obj) : (Data.Aeson..=) "total" (invoiceTotal obj) : (Data.Aeson..=) "total_tax_amounts" (invoiceTotalTaxAmounts obj) : (Data.Aeson..=) "webhooks_delivered_at" (invoiceWebhooksDeliveredAt obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account_country" (invoiceAccountCountry obj) GHC.Base.<> ((Data.Aeson..=) "account_name" (invoiceAccountName obj) GHC.Base.<> ((Data.Aeson..=) "amount_due" (invoiceAmountDue obj) GHC.Base.<> ((Data.Aeson..=) "amount_paid" (invoiceAmountPaid obj) GHC.Base.<> ((Data.Aeson..=) "amount_remaining" (invoiceAmountRemaining obj) GHC.Base.<> ((Data.Aeson..=) "application_fee_amount" (invoiceApplicationFeeAmount obj) GHC.Base.<> ((Data.Aeson..=) "attempt_count" (invoiceAttemptCount obj) GHC.Base.<> ((Data.Aeson..=) "attempted" (invoiceAttempted obj) GHC.Base.<> ((Data.Aeson..=) "auto_advance" (invoiceAutoAdvance obj) GHC.Base.<> ((Data.Aeson..=) "billing_reason" (invoiceBillingReason obj) GHC.Base.<> ((Data.Aeson..=) "charge" (invoiceCharge obj) GHC.Base.<> ((Data.Aeson..=) "collection_method" (invoiceCollectionMethod obj) GHC.Base.<> ((Data.Aeson..=) "created" (invoiceCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (invoiceCurrency obj) GHC.Base.<> ((Data.Aeson..=) "custom_fields" (invoiceCustomFields obj) GHC.Base.<> ((Data.Aeson..=) "customer" (invoiceCustomer obj) GHC.Base.<> ((Data.Aeson..=) "customer_address" (invoiceCustomerAddress obj) GHC.Base.<> ((Data.Aeson..=) "customer_email" (invoiceCustomerEmail obj) GHC.Base.<> ((Data.Aeson..=) "customer_name" (invoiceCustomerName obj) GHC.Base.<> ((Data.Aeson..=) "customer_phone" (invoiceCustomerPhone obj) GHC.Base.<> ((Data.Aeson..=) "customer_shipping" (invoiceCustomerShipping obj) GHC.Base.<> ((Data.Aeson..=) "customer_tax_exempt" (invoiceCustomerTaxExempt obj) GHC.Base.<> ((Data.Aeson..=) "customer_tax_ids" (invoiceCustomerTaxIds obj) GHC.Base.<> ((Data.Aeson..=) "default_payment_method" (invoiceDefaultPaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "default_source" (invoiceDefaultSource obj) GHC.Base.<> ((Data.Aeson..=) "default_tax_rates" (invoiceDefaultTaxRates obj) GHC.Base.<> ((Data.Aeson..=) "description" (invoiceDescription obj) GHC.Base.<> ((Data.Aeson..=) "discount" (invoiceDiscount obj) GHC.Base.<> ((Data.Aeson..=) "due_date" (invoiceDueDate obj) GHC.Base.<> ((Data.Aeson..=) "ending_balance" (invoiceEndingBalance obj) GHC.Base.<> ((Data.Aeson..=) "footer" (invoiceFooter obj) GHC.Base.<> ((Data.Aeson..=) "hosted_invoice_url" (invoiceHostedInvoiceUrl obj) GHC.Base.<> ((Data.Aeson..=) "id" (invoiceId obj) GHC.Base.<> ((Data.Aeson..=) "invoice_pdf" (invoiceInvoicePdf obj) GHC.Base.<> ((Data.Aeson..=) "lines" (invoiceLines obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (invoiceLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (invoiceMetadata obj) GHC.Base.<> ((Data.Aeson..=) "next_payment_attempt" (invoiceNextPaymentAttempt obj) GHC.Base.<> ((Data.Aeson..=) "number" (invoiceNumber obj) GHC.Base.<> ((Data.Aeson..=) "object" (invoiceObject obj) GHC.Base.<> ((Data.Aeson..=) "paid" (invoicePaid obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (invoicePaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "period_end" (invoicePeriodEnd obj) GHC.Base.<> ((Data.Aeson..=) "period_start" (invoicePeriodStart obj) GHC.Base.<> ((Data.Aeson..=) "post_payment_credit_notes_amount" (invoicePostPaymentCreditNotesAmount obj) GHC.Base.<> ((Data.Aeson..=) "pre_payment_credit_notes_amount" (invoicePrePaymentCreditNotesAmount obj) GHC.Base.<> ((Data.Aeson..=) "receipt_number" (invoiceReceiptNumber obj) GHC.Base.<> ((Data.Aeson..=) "starting_balance" (invoiceStartingBalance obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (invoiceStatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (invoiceStatus obj) GHC.Base.<> ((Data.Aeson..=) "status_transitions" (invoiceStatusTransitions obj) GHC.Base.<> ((Data.Aeson..=) "subscription" (invoiceSubscription obj) GHC.Base.<> ((Data.Aeson..=) "subscription_proration_date" (invoiceSubscriptionProrationDate obj) GHC.Base.<> ((Data.Aeson..=) "subtotal" (invoiceSubtotal obj) GHC.Base.<> ((Data.Aeson..=) "tax" (invoiceTax obj) GHC.Base.<> ((Data.Aeson..=) "tax_percent" (invoiceTaxPercent obj) GHC.Base.<> ((Data.Aeson..=) "threshold_reason" (invoiceThresholdReason obj) GHC.Base.<> ((Data.Aeson..=) "total" (invoiceTotal obj) GHC.Base.<> ((Data.Aeson..=) "total_tax_amounts" (invoiceTotalTaxAmounts obj) GHC.Base.<> (Data.Aeson..=) "webhooks_delivered_at" (invoiceWebhooksDeliveredAt obj))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Invoice
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Invoice" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure Invoice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_paid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_remaining")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "attempt_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "attempted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "auto_advance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_tax_exempt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_tax_ids")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "discount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "due_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ending_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "footer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hosted_invoice_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_pdf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lines")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "next_payment_attempt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "paid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period_start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "post_payment_credit_notes_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pre_payment_credit_notes_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "starting_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_transitions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_proration_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "threshold_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total_tax_amounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "webhooks_delivered_at"))
data InvoiceSettingCustomerSetting
    = InvoiceSettingCustomerSetting {invoiceSettingCustomerSettingCustomFields :: (GHC.Maybe.Maybe ([] InvoiceSettingCustomField)),
                                     invoiceSettingCustomerSettingDefaultPaymentMethod :: (GHC.Maybe.Maybe InvoiceSettingCustomerSettingDefaultPaymentMethod'Variants),
                                     invoiceSettingCustomerSettingFooter :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data InvoiceSettingCustomerSettingDefaultPaymentMethod'Variants
    = InvoiceSettingCustomerSettingDefaultPaymentMethod'Variant1 PaymentMethod
    | InvoiceSettingCustomerSettingDefaultPaymentMethod'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceSettingCustomerSettingDefaultPaymentMethod'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceSettingCustomerSettingDefaultPaymentMethod'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON InvoiceSettingCustomerSetting
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "custom_fields" (invoiceSettingCustomerSettingCustomFields obj) : (Data.Aeson..=) "default_payment_method" (invoiceSettingCustomerSettingDefaultPaymentMethod obj) : (Data.Aeson..=) "footer" (invoiceSettingCustomerSettingFooter obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "custom_fields" (invoiceSettingCustomerSettingCustomFields obj) GHC.Base.<> ((Data.Aeson..=) "default_payment_method" (invoiceSettingCustomerSettingDefaultPaymentMethod obj) GHC.Base.<> (Data.Aeson..=) "footer" (invoiceSettingCustomerSettingFooter obj)))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceSettingCustomerSetting
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceSettingCustomerSetting" (\obj -> ((GHC.Base.pure InvoiceSettingCustomerSetting GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "footer"))
data Invoiceitem
    = Invoiceitem {invoiceitemAmount :: GHC.Integer.Type.Integer,
                   invoiceitemCurrency :: GHC.Base.String,
                   invoiceitemCustomer :: InvoiceitemCustomer'Variants,
                   invoiceitemDate :: GHC.Integer.Type.Integer,
                   invoiceitemDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                   invoiceitemDiscountable :: GHC.Types.Bool,
                   invoiceitemId :: GHC.Base.String,
                   invoiceitemInvoice :: (GHC.Maybe.Maybe InvoiceitemInvoice'Variants),
                   invoiceitemLivemode :: GHC.Types.Bool,
                   invoiceitemMetadata :: InvoiceitemMetadata',
                   invoiceitemObject :: InvoiceitemObject',
                   invoiceitemPeriod :: InvoiceLineItemPeriod,
                   invoiceitemPlan :: (GHC.Maybe.Maybe InvoiceitemPlan'),
                   invoiceitemProration :: GHC.Types.Bool,
                   invoiceitemQuantity :: GHC.Integer.Type.Integer,
                   invoiceitemSubscription :: (GHC.Maybe.Maybe InvoiceitemSubscription'Variants),
                   invoiceitemSubscriptionItem :: (GHC.Maybe.Maybe GHC.Base.String),
                   invoiceitemTaxRates :: (GHC.Maybe.Maybe ([] TaxRate)),
                   invoiceitemUnitAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                   invoiceitemUnitAmountDecimal :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data InvoiceitemCustomer'Variants
    = InvoiceitemCustomer'Variant1 Customer
    | InvoiceitemCustomer'Variant2 DeletedCustomer
    | InvoiceitemCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceitemCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceitemCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data InvoiceitemInvoice'Variants
    = InvoiceitemInvoice'Variant1 Invoice
    | InvoiceitemInvoice'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceitemInvoice'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceitemInvoice'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data InvoiceitemMetadata'
    = InvoiceitemMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceitemMetadata'" (\obj -> GHC.Base.pure InvoiceitemMetadata')
data InvoiceitemObject'
    = InvoiceitemObject'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceitemObject'EnumTyped GHC.Base.String
    | InvoiceitemObject'EnumStringInvoiceitem
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemObject'
    where toJSON (InvoiceitemObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemObject'EnumStringInvoiceitem) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoiceitem"
instance Data.Aeson.FromJSON InvoiceitemObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoiceitem")
                                          then InvoiceitemObject'EnumStringInvoiceitem
                                          else InvoiceitemObject'EnumOther val)
data InvoiceitemPlan'
    = InvoiceitemPlan' {invoiceitemPlan'Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
                        invoiceitemPlan'AggregateUsage :: (GHC.Maybe.Maybe InvoiceitemPlan'AggregateUsage'),
                        invoiceitemPlan'Amount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        invoiceitemPlan'AmountDecimal :: (GHC.Maybe.Maybe GHC.Base.String),
                        invoiceitemPlan'BillingScheme :: (GHC.Maybe.Maybe InvoiceitemPlan'BillingScheme'),
                        invoiceitemPlan'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        invoiceitemPlan'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                        invoiceitemPlan'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                        invoiceitemPlan'Interval :: (GHC.Maybe.Maybe InvoiceitemPlan'Interval'),
                        invoiceitemPlan'IntervalCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        invoiceitemPlan'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
                        invoiceitemPlan'Metadata :: (GHC.Maybe.Maybe InvoiceitemPlan'Metadata'),
                        invoiceitemPlan'Nickname :: (GHC.Maybe.Maybe GHC.Base.String),
                        invoiceitemPlan'Object :: (GHC.Maybe.Maybe InvoiceitemPlan'Object'),
                        invoiceitemPlan'Product :: (GHC.Maybe.Maybe InvoiceitemPlan'Product'Variants),
                        invoiceitemPlan'Tiers :: (GHC.Maybe.Maybe ([] PlanTier)),
                        invoiceitemPlan'TiersMode :: (GHC.Maybe.Maybe InvoiceitemPlan'TiersMode'),
                        invoiceitemPlan'TransformUsage :: (GHC.Maybe.Maybe InvoiceitemPlan'TransformUsage'),
                        invoiceitemPlan'TrialPeriodDays :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        invoiceitemPlan'UsageType :: (GHC.Maybe.Maybe InvoiceitemPlan'UsageType')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data InvoiceitemPlan'AggregateUsage'
    = InvoiceitemPlan'AggregateUsage'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceitemPlan'AggregateUsage'EnumTyped GHC.Base.String
    | InvoiceitemPlan'AggregateUsage'EnumStringLastDuringPeriod
    | InvoiceitemPlan'AggregateUsage'EnumStringLastEver
    | InvoiceitemPlan'AggregateUsage'EnumStringMax
    | InvoiceitemPlan'AggregateUsage'EnumStringSum
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemPlan'AggregateUsage'
    where toJSON (InvoiceitemPlan'AggregateUsage'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'AggregateUsage'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'AggregateUsage'EnumStringLastDuringPeriod) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_during_period"
          toJSON (InvoiceitemPlan'AggregateUsage'EnumStringLastEver) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_ever"
          toJSON (InvoiceitemPlan'AggregateUsage'EnumStringMax) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "max"
          toJSON (InvoiceitemPlan'AggregateUsage'EnumStringSum) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sum"
instance Data.Aeson.FromJSON InvoiceitemPlan'AggregateUsage'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_during_period")
                                          then InvoiceitemPlan'AggregateUsage'EnumStringLastDuringPeriod
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_ever")
                                                then InvoiceitemPlan'AggregateUsage'EnumStringLastEver
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "max")
                                                      then InvoiceitemPlan'AggregateUsage'EnumStringMax
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sum")
                                                            then InvoiceitemPlan'AggregateUsage'EnumStringSum
                                                            else InvoiceitemPlan'AggregateUsage'EnumOther val)
data InvoiceitemPlan'BillingScheme'
    = InvoiceitemPlan'BillingScheme'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceitemPlan'BillingScheme'EnumTyped GHC.Base.String
    | InvoiceitemPlan'BillingScheme'EnumStringPerUnit
    | InvoiceitemPlan'BillingScheme'EnumStringTiered
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemPlan'BillingScheme'
    where toJSON (InvoiceitemPlan'BillingScheme'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'BillingScheme'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'BillingScheme'EnumStringPerUnit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "per_unit"
          toJSON (InvoiceitemPlan'BillingScheme'EnumStringTiered) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tiered"
instance Data.Aeson.FromJSON InvoiceitemPlan'BillingScheme'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "per_unit")
                                          then InvoiceitemPlan'BillingScheme'EnumStringPerUnit
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tiered")
                                                then InvoiceitemPlan'BillingScheme'EnumStringTiered
                                                else InvoiceitemPlan'BillingScheme'EnumOther val)
data InvoiceitemPlan'Interval'
    = InvoiceitemPlan'Interval'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceitemPlan'Interval'EnumTyped GHC.Base.String
    | InvoiceitemPlan'Interval'EnumStringDay
    | InvoiceitemPlan'Interval'EnumStringMonth
    | InvoiceitemPlan'Interval'EnumStringWeek
    | InvoiceitemPlan'Interval'EnumStringYear
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemPlan'Interval'
    where toJSON (InvoiceitemPlan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'Interval'EnumStringDay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day"
          toJSON (InvoiceitemPlan'Interval'EnumStringMonth) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month"
          toJSON (InvoiceitemPlan'Interval'EnumStringWeek) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week"
          toJSON (InvoiceitemPlan'Interval'EnumStringYear) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year"
instance Data.Aeson.FromJSON InvoiceitemPlan'Interval'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day")
                                          then InvoiceitemPlan'Interval'EnumStringDay
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month")
                                                then InvoiceitemPlan'Interval'EnumStringMonth
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week")
                                                      then InvoiceitemPlan'Interval'EnumStringWeek
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year")
                                                            then InvoiceitemPlan'Interval'EnumStringYear
                                                            else InvoiceitemPlan'Interval'EnumOther val)
data InvoiceitemPlan'Metadata'
    = InvoiceitemPlan'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemPlan'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceitemPlan'Metadata'" (\obj -> GHC.Base.pure InvoiceitemPlan'Metadata')
data InvoiceitemPlan'Object'
    = InvoiceitemPlan'Object'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceitemPlan'Object'EnumTyped GHC.Base.String
    | InvoiceitemPlan'Object'EnumStringPlan
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemPlan'Object'
    where toJSON (InvoiceitemPlan'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'Object'EnumStringPlan) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plan"
instance Data.Aeson.FromJSON InvoiceitemPlan'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plan")
                                          then InvoiceitemPlan'Object'EnumStringPlan
                                          else InvoiceitemPlan'Object'EnumOther val)
data InvoiceitemPlan'Product'Variants
    = InvoiceitemPlan'Product'Variant1 DeletedProduct
    | InvoiceitemPlan'Product'Variant2 Product
    | InvoiceitemPlan'Product'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceitemPlan'Product'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceitemPlan'Product'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data InvoiceitemPlan'TiersMode'
    = InvoiceitemPlan'TiersMode'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceitemPlan'TiersMode'EnumTyped GHC.Base.String
    | InvoiceitemPlan'TiersMode'EnumStringGraduated
    | InvoiceitemPlan'TiersMode'EnumStringVolume
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemPlan'TiersMode'
    where toJSON (InvoiceitemPlan'TiersMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'TiersMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'TiersMode'EnumStringGraduated) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "graduated"
          toJSON (InvoiceitemPlan'TiersMode'EnumStringVolume) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume"
instance Data.Aeson.FromJSON InvoiceitemPlan'TiersMode'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "graduated")
                                          then InvoiceitemPlan'TiersMode'EnumStringGraduated
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume")
                                                then InvoiceitemPlan'TiersMode'EnumStringVolume
                                                else InvoiceitemPlan'TiersMode'EnumOther val)
data InvoiceitemPlan'TransformUsage'
    = InvoiceitemPlan'TransformUsage' {invoiceitemPlan'TransformUsage'DivideBy :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                       invoiceitemPlan'TransformUsage'Round :: (GHC.Maybe.Maybe InvoiceitemPlan'TransformUsage'Round')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data InvoiceitemPlan'TransformUsage'Round'
    = InvoiceitemPlan'TransformUsage'Round'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceitemPlan'TransformUsage'Round'EnumTyped GHC.Base.String
    | InvoiceitemPlan'TransformUsage'Round'EnumStringDown
    | InvoiceitemPlan'TransformUsage'Round'EnumStringUp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemPlan'TransformUsage'Round'
    where toJSON (InvoiceitemPlan'TransformUsage'Round'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'TransformUsage'Round'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'TransformUsage'Round'EnumStringDown) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "down"
          toJSON (InvoiceitemPlan'TransformUsage'Round'EnumStringUp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "up"
instance Data.Aeson.FromJSON InvoiceitemPlan'TransformUsage'Round'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "down")
                                          then InvoiceitemPlan'TransformUsage'Round'EnumStringDown
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "up")
                                                then InvoiceitemPlan'TransformUsage'Round'EnumStringUp
                                                else InvoiceitemPlan'TransformUsage'Round'EnumOther val)
instance Data.Aeson.ToJSON InvoiceitemPlan'TransformUsage'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "divide_by" (invoiceitemPlan'TransformUsage'DivideBy obj) : (Data.Aeson..=) "round" (invoiceitemPlan'TransformUsage'Round obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "divide_by" (invoiceitemPlan'TransformUsage'DivideBy obj) GHC.Base.<> (Data.Aeson..=) "round" (invoiceitemPlan'TransformUsage'Round obj))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'TransformUsage'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceitemPlan'TransformUsage'" (\obj -> (GHC.Base.pure InvoiceitemPlan'TransformUsage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "divide_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "round"))
data InvoiceitemPlan'UsageType'
    = InvoiceitemPlan'UsageType'EnumOther Data.Aeson.Types.Internal.Value
    | InvoiceitemPlan'UsageType'EnumTyped GHC.Base.String
    | InvoiceitemPlan'UsageType'EnumStringLicensed
    | InvoiceitemPlan'UsageType'EnumStringMetered
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON InvoiceitemPlan'UsageType'
    where toJSON (InvoiceitemPlan'UsageType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'UsageType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (InvoiceitemPlan'UsageType'EnumStringLicensed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "licensed"
          toJSON (InvoiceitemPlan'UsageType'EnumStringMetered) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metered"
instance Data.Aeson.FromJSON InvoiceitemPlan'UsageType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "licensed")
                                          then InvoiceitemPlan'UsageType'EnumStringLicensed
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metered")
                                                then InvoiceitemPlan'UsageType'EnumStringMetered
                                                else InvoiceitemPlan'UsageType'EnumOther val)
instance Data.Aeson.ToJSON InvoiceitemPlan'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (invoiceitemPlan'Active obj) : (Data.Aeson..=) "aggregate_usage" (invoiceitemPlan'AggregateUsage obj) : (Data.Aeson..=) "amount" (invoiceitemPlan'Amount obj) : (Data.Aeson..=) "amount_decimal" (invoiceitemPlan'AmountDecimal obj) : (Data.Aeson..=) "billing_scheme" (invoiceitemPlan'BillingScheme obj) : (Data.Aeson..=) "created" (invoiceitemPlan'Created obj) : (Data.Aeson..=) "currency" (invoiceitemPlan'Currency obj) : (Data.Aeson..=) "id" (invoiceitemPlan'Id obj) : (Data.Aeson..=) "interval" (invoiceitemPlan'Interval obj) : (Data.Aeson..=) "interval_count" (invoiceitemPlan'IntervalCount obj) : (Data.Aeson..=) "livemode" (invoiceitemPlan'Livemode obj) : (Data.Aeson..=) "metadata" (invoiceitemPlan'Metadata obj) : (Data.Aeson..=) "nickname" (invoiceitemPlan'Nickname obj) : (Data.Aeson..=) "object" (invoiceitemPlan'Object obj) : (Data.Aeson..=) "product" (invoiceitemPlan'Product obj) : (Data.Aeson..=) "tiers" (invoiceitemPlan'Tiers obj) : (Data.Aeson..=) "tiers_mode" (invoiceitemPlan'TiersMode obj) : (Data.Aeson..=) "transform_usage" (invoiceitemPlan'TransformUsage obj) : (Data.Aeson..=) "trial_period_days" (invoiceitemPlan'TrialPeriodDays obj) : (Data.Aeson..=) "usage_type" (invoiceitemPlan'UsageType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (invoiceitemPlan'Active obj) GHC.Base.<> ((Data.Aeson..=) "aggregate_usage" (invoiceitemPlan'AggregateUsage obj) GHC.Base.<> ((Data.Aeson..=) "amount" (invoiceitemPlan'Amount obj) GHC.Base.<> ((Data.Aeson..=) "amount_decimal" (invoiceitemPlan'AmountDecimal obj) GHC.Base.<> ((Data.Aeson..=) "billing_scheme" (invoiceitemPlan'BillingScheme obj) GHC.Base.<> ((Data.Aeson..=) "created" (invoiceitemPlan'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (invoiceitemPlan'Currency obj) GHC.Base.<> ((Data.Aeson..=) "id" (invoiceitemPlan'Id obj) GHC.Base.<> ((Data.Aeson..=) "interval" (invoiceitemPlan'Interval obj) GHC.Base.<> ((Data.Aeson..=) "interval_count" (invoiceitemPlan'IntervalCount obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (invoiceitemPlan'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (invoiceitemPlan'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "nickname" (invoiceitemPlan'Nickname obj) GHC.Base.<> ((Data.Aeson..=) "object" (invoiceitemPlan'Object obj) GHC.Base.<> ((Data.Aeson..=) "product" (invoiceitemPlan'Product obj) GHC.Base.<> ((Data.Aeson..=) "tiers" (invoiceitemPlan'Tiers obj) GHC.Base.<> ((Data.Aeson..=) "tiers_mode" (invoiceitemPlan'TiersMode obj) GHC.Base.<> ((Data.Aeson..=) "transform_usage" (invoiceitemPlan'TransformUsage obj) GHC.Base.<> ((Data.Aeson..=) "trial_period_days" (invoiceitemPlan'TrialPeriodDays obj) GHC.Base.<> (Data.Aeson..=) "usage_type" (invoiceitemPlan'UsageType obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceitemPlan'" (\obj -> (((((((((((((((((((GHC.Base.pure InvoiceitemPlan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "aggregate_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_scheme")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transform_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_period_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_type"))
data InvoiceitemSubscription'Variants
    = InvoiceitemSubscription'Variant1 Subscription
    | InvoiceitemSubscription'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON InvoiceitemSubscription'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON InvoiceitemSubscription'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Invoiceitem
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (invoiceitemAmount obj) : (Data.Aeson..=) "currency" (invoiceitemCurrency obj) : (Data.Aeson..=) "customer" (invoiceitemCustomer obj) : (Data.Aeson..=) "date" (invoiceitemDate obj) : (Data.Aeson..=) "description" (invoiceitemDescription obj) : (Data.Aeson..=) "discountable" (invoiceitemDiscountable obj) : (Data.Aeson..=) "id" (invoiceitemId obj) : (Data.Aeson..=) "invoice" (invoiceitemInvoice obj) : (Data.Aeson..=) "livemode" (invoiceitemLivemode obj) : (Data.Aeson..=) "metadata" (invoiceitemMetadata obj) : (Data.Aeson..=) "object" (invoiceitemObject obj) : (Data.Aeson..=) "period" (invoiceitemPeriod obj) : (Data.Aeson..=) "plan" (invoiceitemPlan obj) : (Data.Aeson..=) "proration" (invoiceitemProration obj) : (Data.Aeson..=) "quantity" (invoiceitemQuantity obj) : (Data.Aeson..=) "subscription" (invoiceitemSubscription obj) : (Data.Aeson..=) "subscription_item" (invoiceitemSubscriptionItem obj) : (Data.Aeson..=) "tax_rates" (invoiceitemTaxRates obj) : (Data.Aeson..=) "unit_amount" (invoiceitemUnitAmount obj) : (Data.Aeson..=) "unit_amount_decimal" (invoiceitemUnitAmountDecimal obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (invoiceitemAmount obj) GHC.Base.<> ((Data.Aeson..=) "currency" (invoiceitemCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (invoiceitemCustomer obj) GHC.Base.<> ((Data.Aeson..=) "date" (invoiceitemDate obj) GHC.Base.<> ((Data.Aeson..=) "description" (invoiceitemDescription obj) GHC.Base.<> ((Data.Aeson..=) "discountable" (invoiceitemDiscountable obj) GHC.Base.<> ((Data.Aeson..=) "id" (invoiceitemId obj) GHC.Base.<> ((Data.Aeson..=) "invoice" (invoiceitemInvoice obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (invoiceitemLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (invoiceitemMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (invoiceitemObject obj) GHC.Base.<> ((Data.Aeson..=) "period" (invoiceitemPeriod obj) GHC.Base.<> ((Data.Aeson..=) "plan" (invoiceitemPlan obj) GHC.Base.<> ((Data.Aeson..=) "proration" (invoiceitemProration obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (invoiceitemQuantity obj) GHC.Base.<> ((Data.Aeson..=) "subscription" (invoiceitemSubscription obj) GHC.Base.<> ((Data.Aeson..=) "subscription_item" (invoiceitemSubscriptionItem obj) GHC.Base.<> ((Data.Aeson..=) "tax_rates" (invoiceitemTaxRates obj) GHC.Base.<> ((Data.Aeson..=) "unit_amount" (invoiceitemUnitAmount obj) GHC.Base.<> (Data.Aeson..=) "unit_amount_decimal" (invoiceitemUnitAmountDecimal obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Invoiceitem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Invoiceitem" (\obj -> (((((((((((((((((((GHC.Base.pure Invoiceitem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discountable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_item")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_amount_decimal"))
data IssuerFraudRecord
    = IssuerFraudRecord {issuerFraudRecordActionable :: GHC.Types.Bool,
                         issuerFraudRecordCharge :: IssuerFraudRecordCharge'Variants,
                         issuerFraudRecordCreated :: GHC.Integer.Type.Integer,
                         issuerFraudRecordFraudType :: GHC.Base.String,
                         issuerFraudRecordHasLiabilityShift :: GHC.Types.Bool,
                         issuerFraudRecordId :: GHC.Base.String,
                         issuerFraudRecordLivemode :: GHC.Types.Bool,
                         issuerFraudRecordObject :: IssuerFraudRecordObject',
                         issuerFraudRecordPostDate :: GHC.Integer.Type.Integer}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuerFraudRecordCharge'Variants
    = IssuerFraudRecordCharge'Variant1 Charge
    | IssuerFraudRecordCharge'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuerFraudRecordCharge'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuerFraudRecordCharge'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data IssuerFraudRecordObject'
    = IssuerFraudRecordObject'EnumOther Data.Aeson.Types.Internal.Value
    | IssuerFraudRecordObject'EnumTyped GHC.Base.String
    | IssuerFraudRecordObject'EnumStringIssuerFraudRecord
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON IssuerFraudRecordObject'
    where toJSON (IssuerFraudRecordObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (IssuerFraudRecordObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (IssuerFraudRecordObject'EnumStringIssuerFraudRecord) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuer_fraud_record"
instance Data.Aeson.FromJSON IssuerFraudRecordObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuer_fraud_record")
                                          then IssuerFraudRecordObject'EnumStringIssuerFraudRecord
                                          else IssuerFraudRecordObject'EnumOther val)
instance Data.Aeson.ToJSON IssuerFraudRecord
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "actionable" (issuerFraudRecordActionable obj) : (Data.Aeson..=) "charge" (issuerFraudRecordCharge obj) : (Data.Aeson..=) "created" (issuerFraudRecordCreated obj) : (Data.Aeson..=) "fraud_type" (issuerFraudRecordFraudType obj) : (Data.Aeson..=) "has_liability_shift" (issuerFraudRecordHasLiabilityShift obj) : (Data.Aeson..=) "id" (issuerFraudRecordId obj) : (Data.Aeson..=) "livemode" (issuerFraudRecordLivemode obj) : (Data.Aeson..=) "object" (issuerFraudRecordObject obj) : (Data.Aeson..=) "post_date" (issuerFraudRecordPostDate obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "actionable" (issuerFraudRecordActionable obj) GHC.Base.<> ((Data.Aeson..=) "charge" (issuerFraudRecordCharge obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuerFraudRecordCreated obj) GHC.Base.<> ((Data.Aeson..=) "fraud_type" (issuerFraudRecordFraudType obj) GHC.Base.<> ((Data.Aeson..=) "has_liability_shift" (issuerFraudRecordHasLiabilityShift obj) GHC.Base.<> ((Data.Aeson..=) "id" (issuerFraudRecordId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (issuerFraudRecordLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuerFraudRecordObject obj) GHC.Base.<> (Data.Aeson..=) "post_date" (issuerFraudRecordPostDate obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON IssuerFraudRecord
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuerFraudRecord" (\obj -> ((((((((GHC.Base.pure IssuerFraudRecord GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "actionable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fraud_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_liability_shift")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "post_date"))
data Issuing'authorization
    = Issuing'authorization {issuing'authorizationApproved :: GHC.Types.Bool,
                             issuing'authorizationAuthorizationMethod :: Issuing'authorizationAuthorizationMethod',
                             issuing'authorizationAuthorizedAmount :: GHC.Integer.Type.Integer,
                             issuing'authorizationAuthorizedCurrency :: GHC.Base.String,
                             issuing'authorizationBalanceTransactions :: ([] BalanceTransaction),
                             issuing'authorizationCard :: Issuing'card,
                             issuing'authorizationCardholder :: (GHC.Maybe.Maybe Issuing'authorizationCardholder'Variants),
                             issuing'authorizationCreated :: GHC.Integer.Type.Integer,
                             issuing'authorizationHeldAmount :: GHC.Integer.Type.Integer,
                             issuing'authorizationHeldCurrency :: GHC.Base.String,
                             issuing'authorizationId :: GHC.Base.String,
                             issuing'authorizationIsHeldAmountControllable :: GHC.Types.Bool,
                             issuing'authorizationLivemode :: GHC.Types.Bool,
                             issuing'authorizationMerchantData :: IssuingAuthorizationMerchantData,
                             issuing'authorizationMetadata :: Issuing'authorizationMetadata',
                             issuing'authorizationObject :: Issuing'authorizationObject',
                             issuing'authorizationPendingAuthorizedAmount :: GHC.Integer.Type.Integer,
                             issuing'authorizationPendingHeldAmount :: GHC.Integer.Type.Integer,
                             issuing'authorizationRequestHistory :: ([] IssuingAuthorizationRequest),
                             issuing'authorizationStatus :: Issuing'authorizationStatus',
                             issuing'authorizationTransactions :: ([] Issuing'transaction),
                             issuing'authorizationVerificationData :: IssuingAuthorizationVerificationData,
                             issuing'authorizationWalletProvider :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'authorizationAuthorizationMethod'
    = Issuing'authorizationAuthorizationMethod'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'authorizationAuthorizationMethod'EnumTyped GHC.Base.String
    | Issuing'authorizationAuthorizationMethod'EnumStringChip
    | Issuing'authorizationAuthorizationMethod'EnumStringContactless
    | Issuing'authorizationAuthorizationMethod'EnumStringKeyedIn
    | Issuing'authorizationAuthorizationMethod'EnumStringOnline
    | Issuing'authorizationAuthorizationMethod'EnumStringSwipe
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'authorizationAuthorizationMethod'
    where toJSON (Issuing'authorizationAuthorizationMethod'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'authorizationAuthorizationMethod'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'authorizationAuthorizationMethod'EnumStringChip) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chip"
          toJSON (Issuing'authorizationAuthorizationMethod'EnumStringContactless) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "contactless"
          toJSON (Issuing'authorizationAuthorizationMethod'EnumStringKeyedIn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "keyed_in"
          toJSON (Issuing'authorizationAuthorizationMethod'EnumStringOnline) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "online"
          toJSON (Issuing'authorizationAuthorizationMethod'EnumStringSwipe) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swipe"
instance Data.Aeson.FromJSON Issuing'authorizationAuthorizationMethod'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chip")
                                          then Issuing'authorizationAuthorizationMethod'EnumStringChip
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "contactless")
                                                then Issuing'authorizationAuthorizationMethod'EnumStringContactless
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "keyed_in")
                                                      then Issuing'authorizationAuthorizationMethod'EnumStringKeyedIn
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "online")
                                                            then Issuing'authorizationAuthorizationMethod'EnumStringOnline
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swipe")
                                                                  then Issuing'authorizationAuthorizationMethod'EnumStringSwipe
                                                                  else Issuing'authorizationAuthorizationMethod'EnumOther val)
data Issuing'authorizationCardholder'Variants
    = Issuing'authorizationCardholder'Variant1 Issuing'cardholder
    | Issuing'authorizationCardholder'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'authorizationCardholder'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'authorizationCardholder'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'authorizationMetadata'
    = Issuing'authorizationMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'authorizationMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'authorizationMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'authorizationMetadata'" (\obj -> GHC.Base.pure Issuing'authorizationMetadata')
data Issuing'authorizationObject'
    = Issuing'authorizationObject'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'authorizationObject'EnumTyped GHC.Base.String
    | Issuing'authorizationObject'EnumStringIssuing'authorization
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'authorizationObject'
    where toJSON (Issuing'authorizationObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'authorizationObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'authorizationObject'EnumStringIssuing'authorization) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.authorization"
instance Data.Aeson.FromJSON Issuing'authorizationObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.authorization")
                                          then Issuing'authorizationObject'EnumStringIssuing'authorization
                                          else Issuing'authorizationObject'EnumOther val)
data Issuing'authorizationStatus'
    = Issuing'authorizationStatus'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'authorizationStatus'EnumTyped GHC.Base.String
    | Issuing'authorizationStatus'EnumStringClosed
    | Issuing'authorizationStatus'EnumStringPending
    | Issuing'authorizationStatus'EnumStringReversed
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'authorizationStatus'
    where toJSON (Issuing'authorizationStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'authorizationStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'authorizationStatus'EnumStringClosed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "closed"
          toJSON (Issuing'authorizationStatus'EnumStringPending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (Issuing'authorizationStatus'EnumStringReversed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reversed"
instance Data.Aeson.FromJSON Issuing'authorizationStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "closed")
                                          then Issuing'authorizationStatus'EnumStringClosed
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                then Issuing'authorizationStatus'EnumStringPending
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reversed")
                                                      then Issuing'authorizationStatus'EnumStringReversed
                                                      else Issuing'authorizationStatus'EnumOther val)
instance Data.Aeson.ToJSON Issuing'authorization
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "approved" (issuing'authorizationApproved obj) : (Data.Aeson..=) "authorization_method" (issuing'authorizationAuthorizationMethod obj) : (Data.Aeson..=) "authorized_amount" (issuing'authorizationAuthorizedAmount obj) : (Data.Aeson..=) "authorized_currency" (issuing'authorizationAuthorizedCurrency obj) : (Data.Aeson..=) "balance_transactions" (issuing'authorizationBalanceTransactions obj) : (Data.Aeson..=) "card" (issuing'authorizationCard obj) : (Data.Aeson..=) "cardholder" (issuing'authorizationCardholder obj) : (Data.Aeson..=) "created" (issuing'authorizationCreated obj) : (Data.Aeson..=) "held_amount" (issuing'authorizationHeldAmount obj) : (Data.Aeson..=) "held_currency" (issuing'authorizationHeldCurrency obj) : (Data.Aeson..=) "id" (issuing'authorizationId obj) : (Data.Aeson..=) "is_held_amount_controllable" (issuing'authorizationIsHeldAmountControllable obj) : (Data.Aeson..=) "livemode" (issuing'authorizationLivemode obj) : (Data.Aeson..=) "merchant_data" (issuing'authorizationMerchantData obj) : (Data.Aeson..=) "metadata" (issuing'authorizationMetadata obj) : (Data.Aeson..=) "object" (issuing'authorizationObject obj) : (Data.Aeson..=) "pending_authorized_amount" (issuing'authorizationPendingAuthorizedAmount obj) : (Data.Aeson..=) "pending_held_amount" (issuing'authorizationPendingHeldAmount obj) : (Data.Aeson..=) "request_history" (issuing'authorizationRequestHistory obj) : (Data.Aeson..=) "status" (issuing'authorizationStatus obj) : (Data.Aeson..=) "transactions" (issuing'authorizationTransactions obj) : (Data.Aeson..=) "verification_data" (issuing'authorizationVerificationData obj) : (Data.Aeson..=) "wallet_provider" (issuing'authorizationWalletProvider obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "approved" (issuing'authorizationApproved obj) GHC.Base.<> ((Data.Aeson..=) "authorization_method" (issuing'authorizationAuthorizationMethod obj) GHC.Base.<> ((Data.Aeson..=) "authorized_amount" (issuing'authorizationAuthorizedAmount obj) GHC.Base.<> ((Data.Aeson..=) "authorized_currency" (issuing'authorizationAuthorizedCurrency obj) GHC.Base.<> ((Data.Aeson..=) "balance_transactions" (issuing'authorizationBalanceTransactions obj) GHC.Base.<> ((Data.Aeson..=) "card" (issuing'authorizationCard obj) GHC.Base.<> ((Data.Aeson..=) "cardholder" (issuing'authorizationCardholder obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuing'authorizationCreated obj) GHC.Base.<> ((Data.Aeson..=) "held_amount" (issuing'authorizationHeldAmount obj) GHC.Base.<> ((Data.Aeson..=) "held_currency" (issuing'authorizationHeldCurrency obj) GHC.Base.<> ((Data.Aeson..=) "id" (issuing'authorizationId obj) GHC.Base.<> ((Data.Aeson..=) "is_held_amount_controllable" (issuing'authorizationIsHeldAmountControllable obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (issuing'authorizationLivemode obj) GHC.Base.<> ((Data.Aeson..=) "merchant_data" (issuing'authorizationMerchantData obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (issuing'authorizationMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuing'authorizationObject obj) GHC.Base.<> ((Data.Aeson..=) "pending_authorized_amount" (issuing'authorizationPendingAuthorizedAmount obj) GHC.Base.<> ((Data.Aeson..=) "pending_held_amount" (issuing'authorizationPendingHeldAmount obj) GHC.Base.<> ((Data.Aeson..=) "request_history" (issuing'authorizationRequestHistory obj) GHC.Base.<> ((Data.Aeson..=) "status" (issuing'authorizationStatus obj) GHC.Base.<> ((Data.Aeson..=) "transactions" (issuing'authorizationTransactions obj) GHC.Base.<> ((Data.Aeson..=) "verification_data" (issuing'authorizationVerificationData obj) GHC.Base.<> (Data.Aeson..=) "wallet_provider" (issuing'authorizationWalletProvider obj)))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'authorization
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'authorization" (\obj -> ((((((((((((((((((((((GHC.Base.pure Issuing'authorization GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "approved")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorized_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorized_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance_transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cardholder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "held_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "held_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_held_amount_controllable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_authorized_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_held_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "request_history")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verification_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wallet_provider"))
data Issuing'card
    = Issuing'card {issuing'cardAuthorizationControls :: IssuingCardAuthorizationControls,
                    issuing'cardBrand :: GHC.Base.String,
                    issuing'cardCardholder :: (GHC.Maybe.Maybe Issuing'cardCardholder'),
                    issuing'cardCreated :: GHC.Integer.Type.Integer,
                    issuing'cardCurrency :: GHC.Base.String,
                    issuing'cardExpMonth :: GHC.Integer.Type.Integer,
                    issuing'cardExpYear :: GHC.Integer.Type.Integer,
                    issuing'cardId :: GHC.Base.String,
                    issuing'cardLast4 :: GHC.Base.String,
                    issuing'cardLivemode :: GHC.Types.Bool,
                    issuing'cardMetadata :: Issuing'cardMetadata',
                    issuing'cardName :: GHC.Base.String,
                    issuing'cardObject :: Issuing'cardObject',
                    issuing'cardPin :: (GHC.Maybe.Maybe Issuing'cardPin'),
                    issuing'cardReplacementFor :: (GHC.Maybe.Maybe Issuing'cardReplacementFor'Variants),
                    issuing'cardReplacementReason :: (GHC.Maybe.Maybe Issuing'cardReplacementReason'),
                    issuing'cardShipping :: (GHC.Maybe.Maybe Issuing'cardShipping'),
                    issuing'cardStatus :: Issuing'cardStatus',
                    issuing'cardType :: Issuing'cardType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardCardholder'
    = Issuing'cardCardholder' {issuing'cardCardholder'AuthorizationControls :: (GHC.Maybe.Maybe Issuing'cardCardholder'AuthorizationControls'),
                               issuing'cardCardholder'Billing :: (GHC.Maybe.Maybe IssuingCardholderAddress),
                               issuing'cardCardholder'Company :: (GHC.Maybe.Maybe Issuing'cardCardholder'Company'),
                               issuing'cardCardholder'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                               issuing'cardCardholder'Email :: (GHC.Maybe.Maybe GHC.Base.String),
                               issuing'cardCardholder'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                               issuing'cardCardholder'Individual :: (GHC.Maybe.Maybe Issuing'cardCardholder'Individual'),
                               issuing'cardCardholder'IsDefault :: (GHC.Maybe.Maybe GHC.Types.Bool),
                               issuing'cardCardholder'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
                               issuing'cardCardholder'Metadata :: (GHC.Maybe.Maybe Issuing'cardCardholder'Metadata'),
                               issuing'cardCardholder'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                               issuing'cardCardholder'Object :: (GHC.Maybe.Maybe Issuing'cardCardholder'Object'),
                               issuing'cardCardholder'PhoneNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                               issuing'cardCardholder'Requirements :: (GHC.Maybe.Maybe IssuingCardholderRequirements),
                               issuing'cardCardholder'Status :: (GHC.Maybe.Maybe Issuing'cardCardholder'Status'),
                               issuing'cardCardholder'Type :: (GHC.Maybe.Maybe Issuing'cardCardholder'Type')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardCardholder'AuthorizationControls'
    = Issuing'cardCardholder'AuthorizationControls' {issuing'cardCardholder'AuthorizationControls'AllowedCategories :: (GHC.Maybe.Maybe ([] Issuing'cardCardholder'AuthorizationControls'AllowedCategories')),
                                                     issuing'cardCardholder'AuthorizationControls'BlockedCategories :: (GHC.Maybe.Maybe ([] Issuing'cardCardholder'AuthorizationControls'BlockedCategories')),
                                                     issuing'cardCardholder'AuthorizationControls'SpendingLimits :: (GHC.Maybe.Maybe ([] IssuingCardholderSpendingLimit)),
                                                     issuing'cardCardholder'AuthorizationControls'SpendingLimitsCurrency :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardCardholder'AuthorizationControls'AllowedCategories'
    = Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumTyped GHC.Base.String
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAcRefrigerationRepair
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAccountingBookkeepingServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAdvertisingServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAgriculturalCooperative
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAirlinesAirCarriers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAirportsFlyingFields
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAmbulanceServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAmusementParksCarnivals
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAntiqueReproductions
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAntiqueShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAquariums
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringArchitecturalSurveyingServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringArtDealersAndGalleries
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringArtistsSupplyAndCraftShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoAndHomeSupplyStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoBodyRepairShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoPaintShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoServiceShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomatedCashDisburse
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomatedFuelDispensers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomobileAssociations
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomotivePartsAndAccessoriesStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomotiveTireStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBailAndBondPayments
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBakeries
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBandsOrchestras
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBarberAndBeautyShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBettingCasinoGambling
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBicycleShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBilliardPoolEstablishments
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBoatDealers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBoatRentalsAndLeases
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBookStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBooksPeriodicalsAndNewspapers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBowlingAlleys
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBusLines
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBusinessSecretarialSchools
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBuyingShoppingServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCameraAndPhotographicSupplyStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCandyNutAndConfectioneryStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersNewUsed
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersUsedOnly
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarRentalAgencies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarWashes
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarpentryServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarpetUpholsteryCleaning
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCaterers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChemicalsAndAlliedProducts
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChildCareServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChildrensAndInfantsWearStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChiropodistsPodiatrists
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChiropractors
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCigarStoresAndStands
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCivicSocialFraternalAssociations
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCleaningAndMaintenance
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringClothingRental
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCollegesUniversities
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommercialEquipment
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommercialFootwear
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommercialPhotographyArtAndGraphics
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommuterTransportAndFerries
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerNetworkServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerProgramming
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerRepair
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerSoftwareStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputersPeripheralsAndSoftware
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringConcreteWorkServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringConstructionMaterials
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringConsultingPublicRelations
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCorrespondenceSchools
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCosmeticStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCounselingServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCountryClubs
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCourierServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCourtCosts
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCreditReportingAgencies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCruiseLines
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDairyProductsStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDanceHallStudiosSchools
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDatingEscortServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDentistsOrthodontists
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDepartmentStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDetectiveAgencies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsApplications
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsGames
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsLargeVolume
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsMedia
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingCatalogMerchant
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingInboundTelemarketing
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingInsuranceServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingOther
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingOutboundTelemarketing
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingSubscription
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingTravel
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDiscountStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDoctors
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDoorToDoorSales
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDrinkingPlaces
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDrugStoresAndPharmacies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDryCleaners
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDurableGoods
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDutyFreeStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEatingPlacesRestaurants
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEducationalServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectricRazorStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectricalPartsAndEquipment
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectricalServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectronicsRepairShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectronicsStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElementarySecondarySchools
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEmploymentTempAgencies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEquipmentRental
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringExterminatingServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFamilyClothingStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFastFoodRestaurants
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFinancialInstitutions
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFinesGovernmentAdministrativeEntities
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFloorCoveringStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFlorists
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFreezerAndLockerMeatProvisioners
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFuelDealersNonAutomotive
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFuneralServicesCrematories
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFurnitureRepairRefinishing
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFurriersAndFurShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGeneralServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGiftCardNoveltyAndSouvenirShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGlassPaintAndWallpaperStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGlasswareCrystalStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGolfCoursesPublic
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGovernmentServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGroceryStoresSupermarkets
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHardwareEquipmentAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHardwareStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHealthAndBeautySpas
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHearingAidsSalesAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHeatingPlumbingAC
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHobbyToyAndGameShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHomeSupplyWarehouseStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHospitals
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHotelsMotelsAndResorts
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHouseholdApplianceStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringIndustrialSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringInformationRetrievalServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringInsuranceDefault
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringInsuranceUnderwritingPremiums
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringIntraCompanyPurchases
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLandscapingServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLaundries
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLaundryCleaningServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLegalServicesAttorneys
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLuggageAndLeatherGoodsStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLumberBuildingMaterialsStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringManualCashDisburse
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMarinasServiceAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMasonryStoneworkAndPlaster
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMassageParlors
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMedicalAndDentalLabs
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMedicalServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMembershipOrganizations
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMensWomensClothingStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMetalServiceCenters
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneous
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousApparelAndAccessoryShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousAutoDealers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousBusinessServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousFoodStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralMerchandise
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousPublishingAndPrinting
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousRecreationServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousRepairShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousSpecialtyRetail
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMobileHomeDealers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotionPictureTheaters
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorFreightCarriersAndTrucking
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorHomesDealers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorVehicleSuppliesAndNewParts
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsAndDealers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsDealers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNewsDealersAndNewsstands
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNonFiMoneyOrders
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNonFiStoredValueCardPurchaseLoad
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNondurableGoods
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNurseriesLawnAndGardenSupplyStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNursingPersonalCare
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOfficeAndCommercialFurniture
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOpticiansEyeglasses
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOptometristsOphthalmologist
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOrthopedicGoodsProstheticDevices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOsteopaths
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPackageStoresBeerWineAndLiquor
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPaintsVarnishesAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringParkingLotsGarages
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPassengerRailways
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPawnShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPetShopsPetFoodAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPetroleumAndPetroleumProducts
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPhotoDeveloping
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPhotographicStudios
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPictureVideoProduction
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPoliticalOrganizations
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPostalServicesGovernmentOnly
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringProfessionalServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPublicWarehousingAndStorage
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringQuickCopyReproAndBlueprint
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRailroads
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRealEstateAgentsAndManagersRentals
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRecordStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRecreationalVehicleRentals
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringReligiousGoodsStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringReligiousOrganizations
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRoofingSidingSheetMetal
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSecretarialSupportServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSecurityBrokersDealers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringServiceStations
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringShoeRepairHatCleaning
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringShoeStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSmallApplianceRepair
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSnowmobileDealers
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSpecialTradeServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSpecialtyCleaning
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportingGoodsStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportingRecreationCamps
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportsAndRidingApparelStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportsClubsFields
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringStampAndCoinStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSwimmingPoolsSales
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTUiTravelGermany
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTailorsAlterations
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTaxPaymentsGovernmentAgencies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTaxPreparationServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTaxicabsLimousines
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTelecommunicationServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTelegraphServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTentAndAwningShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTestingLaboratories
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTheatricalTicketAgencies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTimeshares
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTireRetreadingAndRepair
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTollsBridgeFees
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTouristAttractionsAndExhibits
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTowingServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTrailerParksCampgrounds
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTransportationServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTravelAgenciesTourOperators
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTruckStopIteration
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTruckUtilityTrailerRentals
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTypesettingPlateMakingAndRelatedServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTypewriterStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUniformsCommercialClothing
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUsedMerchandiseAndSecondhandStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUtilities
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVarietyStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVeterinaryServices
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVideoAmusementGameSupplies
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVideoGameArcades
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVideoTapeRentalStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVocationalTradeSchools
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWatchJewelryRepair
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWeldingRepair
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWholesaleClubs
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWigAndToupeeStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWiresMoneyOrders
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWomensAccessoryAndSpecialtyShops
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWomensReadyToWearStores
    | Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWreckingAndSalvageYards
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardCardholder'AuthorizationControls'AllowedCategories'
    where toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAcRefrigerationRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ac_refrigeration_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAccountingBookkeepingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accounting_bookkeeping_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAdvertisingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advertising_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAgriculturalCooperative) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "agricultural_cooperative"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAirlinesAirCarriers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airlines_air_carriers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAirportsFlyingFields) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airports_flying_fields"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAmbulanceServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ambulance_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAmusementParksCarnivals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amusement_parks_carnivals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAntiqueReproductions) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_reproductions"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAntiqueShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAquariums) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "aquariums"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringArchitecturalSurveyingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "architectural_surveying_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringArtDealersAndGalleries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "art_dealers_and_galleries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringArtistsSupplyAndCraftShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "artists_supply_and_craft_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoAndHomeSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_and_home_supply_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoBodyRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_body_repair_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoPaintShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_paint_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoServiceShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_service_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomatedCashDisburse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_cash_disburse"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomatedFuelDispensers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_fuel_dispensers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomobileAssociations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automobile_associations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomotivePartsAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_parts_and_accessories_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomotiveTireStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_tire_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBailAndBondPayments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bail_and_bond_payments"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBakeries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bakeries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBandsOrchestras) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bands_orchestras"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBarberAndBeautyShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "barber_and_beauty_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBettingCasinoGambling) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "betting_casino_gambling"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBicycleShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bicycle_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBilliardPoolEstablishments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "billiard_pool_establishments"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBoatDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBoatRentalsAndLeases) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_rentals_and_leases"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBookStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBooksPeriodicalsAndNewspapers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "books_periodicals_and_newspapers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBowlingAlleys) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bowling_alleys"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBusLines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bus_lines"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBusinessSecretarialSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_secretarial_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBuyingShoppingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "buying_shopping_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cable_satellite_and_other_pay_television_and_radio"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCameraAndPhotographicSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "camera_and_photographic_supply_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCandyNutAndConfectioneryStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "candy_nut_and_confectionery_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersNewUsed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_new_used"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersUsedOnly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_used_only"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarRentalAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_rental_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarWashes) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_washes"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarpentryServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpentry_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarpetUpholsteryCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpet_upholstery_cleaning"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCaterers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "caterers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charitable_and_social_service_organizations_fundraising"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChemicalsAndAlliedProducts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chemicals_and_allied_products"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChildCareServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "child_care_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChildrensAndInfantsWearStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "childrens_and_infants_wear_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChiropodistsPodiatrists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropodists_podiatrists"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChiropractors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropractors"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCigarStoresAndStands) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cigar_stores_and_stands"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCivicSocialFraternalAssociations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "civic_social_fraternal_associations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCleaningAndMaintenance) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cleaning_and_maintenance"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringClothingRental) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "clothing_rental"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCollegesUniversities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "colleges_universities"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommercialEquipment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_equipment"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommercialFootwear) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_footwear"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommercialPhotographyArtAndGraphics) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_photography_art_and_graphics"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommuterTransportAndFerries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commuter_transport_and_ferries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerNetworkServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_network_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerProgramming) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_programming"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerSoftwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_software_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputersPeripheralsAndSoftware) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computers_peripherals_and_software"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringConcreteWorkServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "concrete_work_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringConstructionMaterials) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "construction_materials"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringConsultingPublicRelations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "consulting_public_relations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCorrespondenceSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "correspondence_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCosmeticStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cosmetic_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCounselingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "counseling_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCountryClubs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "country_clubs"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCourierServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "courier_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCourtCosts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "court_costs"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCreditReportingAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_reporting_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCruiseLines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cruise_lines"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDairyProductsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dairy_products_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDanceHallStudiosSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dance_hall_studios_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDatingEscortServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dating_escort_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDentistsOrthodontists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dentists_orthodontists"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDepartmentStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "department_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDetectiveAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "detective_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsApplications) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_applications"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsGames) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_games"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsLargeVolume) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_large_volume"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsMedia) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_media"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingCatalogMerchant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_catalog_merchant"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_combination_catalog_and_retail_merchant"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingInboundTelemarketing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_inbound_telemarketing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingInsuranceServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_insurance_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingOther) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_other"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingOutboundTelemarketing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_outbound_telemarketing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingSubscription) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_subscription"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingTravel) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_travel"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDiscountStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDoctors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "doctors"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDoorToDoorSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "door_to_door_sales"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drapery_window_covering_and_upholstery_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDrinkingPlaces) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drinking_places"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDrugStoresAndPharmacies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drug_stores_and_pharmacies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drugs_drug_proprietaries_and_druggist_sundries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDryCleaners) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dry_cleaners"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDurableGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "durable_goods"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDutyFreeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duty_free_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEatingPlacesRestaurants) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eating_places_restaurants"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEducationalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "educational_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectricRazorStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electric_razor_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectricalPartsAndEquipment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_parts_and_equipment"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectricalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectronicsRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_repair_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectronicsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElementarySecondarySchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "elementary_secondary_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEmploymentTempAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "employment_temp_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEquipmentRental) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "equipment_rental"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringExterminatingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exterminating_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFamilyClothingStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "family_clothing_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFastFoodRestaurants) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fast_food_restaurants"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFinancialInstitutions) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "financial_institutions"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFinesGovernmentAdministrativeEntities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fines_government_administrative_entities"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fireplace_fireplace_screens_and_accessories_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFloorCoveringStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "floor_covering_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFlorists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists_supplies_nursery_stock_and_flowers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFreezerAndLockerMeatProvisioners) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freezer_and_locker_meat_provisioners"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFuelDealersNonAutomotive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fuel_dealers_non_automotive"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFuneralServicesCrematories) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "funeral_services_crematories"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_home_furnishings_and_equipment_stores_except_appliances"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFurnitureRepairRefinishing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_repair_refinishing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFurriersAndFurShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furriers_and_fur_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGeneralServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "general_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGiftCardNoveltyAndSouvenirShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gift_card_novelty_and_souvenir_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGlassPaintAndWallpaperStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glass_paint_and_wallpaper_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGlasswareCrystalStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glassware_crystal_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGolfCoursesPublic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "golf_courses_public"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGovernmentServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGroceryStoresSupermarkets) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "grocery_stores_supermarkets"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHardwareEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_equipment_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHardwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHealthAndBeautySpas) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "health_and_beauty_spas"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHearingAidsSalesAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hearing_aids_sales_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHeatingPlumbingAC) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "heating_plumbing_a_c"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHobbyToyAndGameShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hobby_toy_and_game_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHomeSupplyWarehouseStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "home_supply_warehouse_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHospitals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hospitals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHotelsMotelsAndResorts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hotels_motels_and_resorts"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHouseholdApplianceStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "household_appliance_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringIndustrialSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "industrial_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringInformationRetrievalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "information_retrieval_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringInsuranceDefault) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_default"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringInsuranceUnderwritingPremiums) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_underwriting_premiums"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringIntraCompanyPurchases) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "intra_company_purchases"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jewelry_stores_watches_clocks_and_silverware_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLandscapingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "landscaping_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLaundries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLaundryCleaningServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundry_cleaning_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLegalServicesAttorneys) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legal_services_attorneys"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLuggageAndLeatherGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "luggage_and_leather_goods_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLumberBuildingMaterialsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lumber_building_materials_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringManualCashDisburse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual_cash_disburse"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMarinasServiceAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "marinas_service_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMasonryStoneworkAndPlaster) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masonry_stonework_and_plaster"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMassageParlors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "massage_parlors"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMedicalAndDentalLabs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_and_dental_labs"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMedicalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMembershipOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "membership_organizations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_and_boys_clothing_and_accessories_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMensWomensClothingStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_womens_clothing_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMetalServiceCenters) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metal_service_centers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneous) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousApparelAndAccessoryShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_apparel_and_accessory_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousAutoDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_auto_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousBusinessServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_business_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousFoodStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_food_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralMerchandise) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_merchandise"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_home_furnishing_specialty_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousPublishingAndPrinting) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_publishing_and_printing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousRecreationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_recreation_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_repair_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousSpecialtyRetail) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_specialty_retail"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMobileHomeDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mobile_home_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotionPictureTheaters) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motion_picture_theaters"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorFreightCarriersAndTrucking) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_freight_carriers_and_trucking"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorHomesDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_homes_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorVehicleSuppliesAndNewParts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_vehicle_supplies_and_new_parts"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsAndDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_and_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "music_stores_musical_instruments_pianos_and_sheet_music"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNewsDealersAndNewsstands) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "news_dealers_and_newsstands"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNonFiMoneyOrders) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_money_orders"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNonFiStoredValueCardPurchaseLoad) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_stored_value_card_purchase_load"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNondurableGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nondurable_goods"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNurseriesLawnAndGardenSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nurseries_lawn_and_garden_supply_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNursingPersonalCare) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nursing_personal_care"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOfficeAndCommercialFurniture) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "office_and_commercial_furniture"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOpticiansEyeglasses) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "opticians_eyeglasses"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOptometristsOphthalmologist) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "optometrists_ophthalmologist"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOrthopedicGoodsProstheticDevices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "orthopedic_goods_prosthetic_devices"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOsteopaths) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "osteopaths"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPackageStoresBeerWineAndLiquor) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "package_stores_beer_wine_and_liquor"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPaintsVarnishesAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paints_varnishes_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringParkingLotsGarages) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "parking_lots_garages"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPassengerRailways) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "passenger_railways"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPawnShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pawn_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPetShopsPetFoodAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pet_shops_pet_food_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPetroleumAndPetroleumProducts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "petroleum_and_petroleum_products"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPhotoDeveloping) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photo_developing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_photocopy_microfilm_equipment_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPhotographicStudios) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_studios"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPictureVideoProduction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "picture_video_production"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "piece_goods_notions_and_other_dry_goods"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plumbing_heating_equipment_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPoliticalOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "political_organizations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPostalServicesGovernmentOnly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "postal_services_government_only"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "precious_stones_and_metals_watches_and_jewelry"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringProfessionalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "professional_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPublicWarehousingAndStorage) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_warehousing_and_storage"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringQuickCopyReproAndBlueprint) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "quick_copy_repro_and_blueprint"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRailroads) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "railroads"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRealEstateAgentsAndManagersRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "real_estate_agents_and_managers_rentals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRecordStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "record_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRecreationalVehicleRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recreational_vehicle_rentals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringReligiousGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_goods_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringReligiousOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_organizations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRoofingSidingSheetMetal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roofing_siding_sheet_metal"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSecretarialSupportServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "secretarial_support_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSecurityBrokersDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "security_brokers_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringServiceStations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service_stations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sewing_needlework_fabric_and_piece_goods_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringShoeRepairHatCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_repair_hat_cleaning"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringShoeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSmallApplianceRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "small_appliance_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSnowmobileDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snowmobile_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSpecialTradeServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "special_trade_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSpecialtyCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "specialty_cleaning"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportingGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_goods_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportingRecreationCamps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_recreation_camps"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportsAndRidingApparelStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_and_riding_apparel_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportsClubsFields) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_clubs_fields"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringStampAndCoinStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stamp_and_coin_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationary_office_supplies_printing_and_writing_paper"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationery_stores_office_and_school_supply_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSwimmingPoolsSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swimming_pools_sales"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTUiTravelGermany) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "t_ui_travel_germany"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTailorsAlterations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tailors_alterations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTaxPaymentsGovernmentAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_payments_government_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTaxPreparationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_preparation_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTaxicabsLimousines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "taxicabs_limousines"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_equipment_and_telephone_sales"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTelecommunicationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTelegraphServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telegraph_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTentAndAwningShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tent_and_awning_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTestingLaboratories) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "testing_laboratories"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTheatricalTicketAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theatrical_ticket_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTimeshares) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "timeshares"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTireRetreadingAndRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tire_retreading_and_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTollsBridgeFees) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tolls_bridge_fees"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTouristAttractionsAndExhibits) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tourist_attractions_and_exhibits"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTowingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "towing_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTrailerParksCampgrounds) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trailer_parks_campgrounds"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTransportationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transportation_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTravelAgenciesTourOperators) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "travel_agencies_tour_operators"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTruckStopIteration) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_stop_iteration"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTruckUtilityTrailerRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_utility_trailer_rentals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTypesettingPlateMakingAndRelatedServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typesetting_plate_making_and_related_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTypewriterStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typewriter_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "u_s_federal_government_agencies_or_departments"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUniformsCommercialClothing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uniforms_commercial_clothing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUsedMerchandiseAndSecondhandStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "used_merchandise_and_secondhand_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUtilities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "utilities"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVarietyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "variety_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVeterinaryServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "veterinary_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVideoAmusementGameSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_amusement_game_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVideoGameArcades) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_game_arcades"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVideoTapeRentalStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_tape_rental_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVocationalTradeSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vocational_trade_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWatchJewelryRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "watch_jewelry_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWeldingRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "welding_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWholesaleClubs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wholesale_clubs"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWigAndToupeeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wig_and_toupee_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWiresMoneyOrders) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wires_money_orders"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWomensAccessoryAndSpecialtyShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_accessory_and_specialty_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWomensReadyToWearStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_ready_to_wear_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWreckingAndSalvageYards) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wrecking_and_salvage_yards"
instance Data.Aeson.FromJSON Issuing'cardCardholder'AuthorizationControls'AllowedCategories'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ac_refrigeration_repair")
                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAcRefrigerationRepair
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accounting_bookkeeping_services")
                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAccountingBookkeepingServices
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advertising_services")
                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAdvertisingServices
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "agricultural_cooperative")
                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAgriculturalCooperative
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airlines_air_carriers")
                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAirlinesAirCarriers
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airports_flying_fields")
                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAirportsFlyingFields
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ambulance_services")
                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAmbulanceServices
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amusement_parks_carnivals")
                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAmusementParksCarnivals
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_reproductions")
                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAntiqueReproductions
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_shops")
                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAntiqueShops
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "aquariums")
                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAquariums
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "architectural_surveying_services")
                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringArchitecturalSurveyingServices
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "art_dealers_and_galleries")
                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringArtDealersAndGalleries
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "artists_supply_and_craft_shops")
                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringArtistsSupplyAndCraftShops
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_and_home_supply_stores")
                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoAndHomeSupplyStores
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_body_repair_shops")
                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoBodyRepairShops
                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_paint_shops")
                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoPaintShops
                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_service_shops")
                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutoServiceShops
                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_cash_disburse")
                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomatedCashDisburse
                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_fuel_dispensers")
                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomatedFuelDispensers
                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automobile_associations")
                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomobileAssociations
                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_parts_and_accessories_stores")
                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomotivePartsAndAccessoriesStores
                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_tire_stores")
                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringAutomotiveTireStores
                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bail_and_bond_payments")
                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBailAndBondPayments
                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bakeries")
                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBakeries
                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bands_orchestras")
                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBandsOrchestras
                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "barber_and_beauty_shops")
                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBarberAndBeautyShops
                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "betting_casino_gambling")
                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBettingCasinoGambling
                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bicycle_shops")
                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBicycleShops
                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "billiard_pool_establishments")
                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBilliardPoolEstablishments
                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_dealers")
                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBoatDealers
                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_rentals_and_leases")
                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBoatRentalsAndLeases
                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book_stores")
                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBookStores
                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "books_periodicals_and_newspapers")
                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBooksPeriodicalsAndNewspapers
                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bowling_alleys")
                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBowlingAlleys
                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bus_lines")
                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBusLines
                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_secretarial_schools")
                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBusinessSecretarialSchools
                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "buying_shopping_services")
                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringBuyingShoppingServices
                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cable_satellite_and_other_pay_television_and_radio")
                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio
                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "camera_and_photographic_supply_stores")
                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCameraAndPhotographicSupplyStores
                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "candy_nut_and_confectionery_stores")
                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCandyNutAndConfectioneryStores
                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_new_used")
                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersNewUsed
                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_used_only")
                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersUsedOnly
                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_rental_agencies")
                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarRentalAgencies
                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_washes")
                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarWashes
                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpentry_services")
                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarpentryServices
                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpet_upholstery_cleaning")
                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCarpetUpholsteryCleaning
                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "caterers")
                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCaterers
                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charitable_and_social_service_organizations_fundraising")
                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising
                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chemicals_and_allied_products")
                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChemicalsAndAlliedProducts
                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "child_care_services")
                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChildCareServices
                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "childrens_and_infants_wear_stores")
                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChildrensAndInfantsWearStores
                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropodists_podiatrists")
                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChiropodistsPodiatrists
                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropractors")
                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringChiropractors
                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cigar_stores_and_stands")
                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCigarStoresAndStands
                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "civic_social_fraternal_associations")
                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCivicSocialFraternalAssociations
                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cleaning_and_maintenance")
                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCleaningAndMaintenance
                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "clothing_rental")
                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringClothingRental
                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "colleges_universities")
                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCollegesUniversities
                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_equipment")
                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommercialEquipment
                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_footwear")
                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommercialFootwear
                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_photography_art_and_graphics")
                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommercialPhotographyArtAndGraphics
                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commuter_transport_and_ferries")
                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCommuterTransportAndFerries
                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_network_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerNetworkServices
                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_programming")
                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerProgramming
                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_repair")
                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerRepair
                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_software_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputerSoftwareStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computers_peripherals_and_software")
                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringComputersPeripheralsAndSoftware
                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "concrete_work_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringConcreteWorkServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "construction_materials")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringConstructionMaterials
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "consulting_public_relations")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringConsultingPublicRelations
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "correspondence_schools")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCorrespondenceSchools
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cosmetic_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCosmeticStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "counseling_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCounselingServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "country_clubs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCountryClubs
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "courier_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCourierServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "court_costs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCourtCosts
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_reporting_agencies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCreditReportingAgencies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cruise_lines")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringCruiseLines
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dairy_products_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDairyProductsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dance_hall_studios_schools")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDanceHallStudiosSchools
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dating_escort_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDatingEscortServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dentists_orthodontists")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDentistsOrthodontists
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "department_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDepartmentStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "detective_agencies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDetectiveAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_applications")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsApplications
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_games")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsGames
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_large_volume")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsLargeVolume
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_media")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDigitalGoodsMedia
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_catalog_merchant")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingCatalogMerchant
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_combination_catalog_and_retail_merchant")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_inbound_telemarketing")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingInboundTelemarketing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_insurance_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingInsuranceServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_other")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingOther
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_outbound_telemarketing")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingOutboundTelemarketing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_subscription")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingSubscription
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_travel")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDirectMarketingTravel
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDiscountStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "doctors")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDoctors
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "door_to_door_sales")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDoorToDoorSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drapery_window_covering_and_upholstery_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drinking_places")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDrinkingPlaces
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drug_stores_and_pharmacies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDrugStoresAndPharmacies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drugs_drug_proprietaries_and_druggist_sundries")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dry_cleaners")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDryCleaners
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "durable_goods")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDurableGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duty_free_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringDutyFreeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eating_places_restaurants")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEatingPlacesRestaurants
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "educational_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEducationalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electric_razor_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectricRazorStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_parts_and_equipment")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectricalPartsAndEquipment
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectricalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_repair_shops")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectronicsRepairShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElectronicsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "elementary_secondary_schools")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringElementarySecondarySchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "employment_temp_agencies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEmploymentTempAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "equipment_rental")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringEquipmentRental
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exterminating_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringExterminatingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "family_clothing_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFamilyClothingStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fast_food_restaurants")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFastFoodRestaurants
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "financial_institutions")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFinancialInstitutions
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fines_government_administrative_entities")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFinesGovernmentAdministrativeEntities
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fireplace_fireplace_screens_and_accessories_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "floor_covering_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFloorCoveringStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFlorists
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists_supplies_nursery_stock_and_flowers")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freezer_and_locker_meat_provisioners")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFreezerAndLockerMeatProvisioners
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fuel_dealers_non_automotive")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFuelDealersNonAutomotive
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "funeral_services_crematories")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFuneralServicesCrematories
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_home_furnishings_and_equipment_stores_except_appliances")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_repair_refinishing")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFurnitureRepairRefinishing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furriers_and_fur_shops")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringFurriersAndFurShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "general_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGeneralServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gift_card_novelty_and_souvenir_shops")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGiftCardNoveltyAndSouvenirShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glass_paint_and_wallpaper_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGlassPaintAndWallpaperStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glassware_crystal_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGlasswareCrystalStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "golf_courses_public")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGolfCoursesPublic
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGovernmentServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "grocery_stores_supermarkets")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringGroceryStoresSupermarkets
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_equipment_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHardwareEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHardwareStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "health_and_beauty_spas")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHealthAndBeautySpas
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hearing_aids_sales_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHearingAidsSalesAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "heating_plumbing_a_c")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHeatingPlumbingAC
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hobby_toy_and_game_shops")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHobbyToyAndGameShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "home_supply_warehouse_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHomeSupplyWarehouseStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hospitals")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHospitals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hotels_motels_and_resorts")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHotelsMotelsAndResorts
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "household_appliance_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringHouseholdApplianceStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "industrial_supplies")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringIndustrialSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "information_retrieval_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringInformationRetrievalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_default")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringInsuranceDefault
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_underwriting_premiums")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringInsuranceUnderwritingPremiums
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "intra_company_purchases")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringIntraCompanyPurchases
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jewelry_stores_watches_clocks_and_silverware_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "landscaping_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLandscapingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundries")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLaundries
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundry_cleaning_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLaundryCleaningServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legal_services_attorneys")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLegalServicesAttorneys
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "luggage_and_leather_goods_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLuggageAndLeatherGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lumber_building_materials_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringLumberBuildingMaterialsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual_cash_disburse")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringManualCashDisburse
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "marinas_service_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMarinasServiceAndSupplies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masonry_stonework_and_plaster")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMasonryStoneworkAndPlaster
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "massage_parlors")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMassageParlors
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_and_dental_labs")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMedicalAndDentalLabs
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_dental_ophthalmic_and_hospital_equipment_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMedicalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "membership_organizations")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMembershipOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_and_boys_clothing_and_accessories_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_womens_clothing_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMensWomensClothingStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metal_service_centers")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMetalServiceCenters
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneous
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_apparel_and_accessory_shops")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousApparelAndAccessoryShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_auto_dealers")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousAutoDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_business_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousBusinessServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_food_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousFoodStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_merchandise")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralMerchandise
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_home_furnishing_specialty_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_publishing_and_printing")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousPublishingAndPrinting
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_recreation_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousRecreationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_repair_shops")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousRepairShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_specialty_retail")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMiscellaneousSpecialtyRetail
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mobile_home_dealers")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMobileHomeDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motion_picture_theaters")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotionPictureTheaters
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_freight_carriers_and_trucking")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorFreightCarriersAndTrucking
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_homes_dealers")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorHomesDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_vehicle_supplies_and_new_parts")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorVehicleSuppliesAndNewParts
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_and_dealers")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsAndDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_dealers")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "music_stores_musical_instruments_pianos_and_sheet_music")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "news_dealers_and_newsstands")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNewsDealersAndNewsstands
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_money_orders")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNonFiMoneyOrders
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_stored_value_card_purchase_load")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNonFiStoredValueCardPurchaseLoad
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nondurable_goods")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNondurableGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nurseries_lawn_and_garden_supply_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNurseriesLawnAndGardenSupplyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nursing_personal_care")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringNursingPersonalCare
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "office_and_commercial_furniture")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOfficeAndCommercialFurniture
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "opticians_eyeglasses")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOpticiansEyeglasses
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "optometrists_ophthalmologist")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOptometristsOphthalmologist
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "orthopedic_goods_prosthetic_devices")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOrthopedicGoodsProstheticDevices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "osteopaths")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringOsteopaths
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "package_stores_beer_wine_and_liquor")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPackageStoresBeerWineAndLiquor
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paints_varnishes_and_supplies")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPaintsVarnishesAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "parking_lots_garages")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringParkingLotsGarages
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "passenger_railways")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPassengerRailways
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pawn_shops")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPawnShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pet_shops_pet_food_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPetShopsPetFoodAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "petroleum_and_petroleum_products")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPetroleumAndPetroleumProducts
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photo_developing")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPhotoDeveloping
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_photocopy_microfilm_equipment_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_studios")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPhotographicStudios
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "picture_video_production")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPictureVideoProduction
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "piece_goods_notions_and_other_dry_goods")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plumbing_heating_equipment_and_supplies")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "political_organizations")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPoliticalOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "postal_services_government_only")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPostalServicesGovernmentOnly
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "precious_stones_and_metals_watches_and_jewelry")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "professional_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringProfessionalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_warehousing_and_storage")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringPublicWarehousingAndStorage
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "quick_copy_repro_and_blueprint")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringQuickCopyReproAndBlueprint
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "railroads")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRailroads
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "real_estate_agents_and_managers_rentals")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRealEstateAgentsAndManagersRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "record_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRecordStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recreational_vehicle_rentals")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRecreationalVehicleRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_goods_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringReligiousGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_organizations")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringReligiousOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roofing_siding_sheet_metal")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringRoofingSidingSheetMetal
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "secretarial_support_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSecretarialSupportServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "security_brokers_dealers")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSecurityBrokersDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service_stations")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringServiceStations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sewing_needlework_fabric_and_piece_goods_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_repair_hat_cleaning")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringShoeRepairHatCleaning
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringShoeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "small_appliance_repair")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSmallApplianceRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snowmobile_dealers")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSnowmobileDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "special_trade_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSpecialTradeServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "specialty_cleaning")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSpecialtyCleaning
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_goods_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportingGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_recreation_camps")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportingRecreationCamps
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_and_riding_apparel_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportsAndRidingApparelStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_clubs_fields")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSportsClubsFields
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stamp_and_coin_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringStampAndCoinStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationary_office_supplies_printing_and_writing_paper")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationery_stores_office_and_school_supply_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swimming_pools_sales")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringSwimmingPoolsSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "t_ui_travel_germany")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTUiTravelGermany
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tailors_alterations")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTailorsAlterations
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_payments_government_agencies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTaxPaymentsGovernmentAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_preparation_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTaxPreparationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "taxicabs_limousines")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTaxicabsLimousines
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_equipment_and_telephone_sales")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTelecommunicationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telegraph_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTelegraphServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tent_and_awning_shops")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTentAndAwningShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "testing_laboratories")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTestingLaboratories
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theatrical_ticket_agencies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTheatricalTicketAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "timeshares")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTimeshares
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tire_retreading_and_repair")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTireRetreadingAndRepair
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tolls_bridge_fees")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTollsBridgeFees
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tourist_attractions_and_exhibits")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTouristAttractionsAndExhibits
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "towing_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTowingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trailer_parks_campgrounds")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTrailerParksCampgrounds
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transportation_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTransportationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "travel_agencies_tour_operators")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTravelAgenciesTourOperators
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_stop_iteration")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTruckStopIteration
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_utility_trailer_rentals")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTruckUtilityTrailerRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typesetting_plate_making_and_related_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTypesettingPlateMakingAndRelatedServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typewriter_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringTypewriterStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "u_s_federal_government_agencies_or_departments")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uniforms_commercial_clothing")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUniformsCommercialClothing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "used_merchandise_and_secondhand_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUsedMerchandiseAndSecondhandStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "utilities")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringUtilities
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "variety_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVarietyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "veterinary_services")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVeterinaryServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_amusement_game_supplies")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVideoAmusementGameSupplies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_game_arcades")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVideoGameArcades
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_tape_rental_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVideoTapeRentalStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vocational_trade_schools")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringVocationalTradeSchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "watch_jewelry_repair")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWatchJewelryRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "welding_repair")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWeldingRepair
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wholesale_clubs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWholesaleClubs
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wig_and_toupee_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWigAndToupeeStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wires_money_orders")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWiresMoneyOrders
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_accessory_and_specialty_shops")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWomensAccessoryAndSpecialtyShops
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_ready_to_wear_stores")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWomensReadyToWearStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wrecking_and_salvage_yards")
then Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumStringWreckingAndSalvageYards
else Issuing'cardCardholder'AuthorizationControls'AllowedCategories'EnumOther val)
data Issuing'cardCardholder'AuthorizationControls'BlockedCategories'
    = Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumTyped GHC.Base.String
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAcRefrigerationRepair
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAccountingBookkeepingServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAdvertisingServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAgriculturalCooperative
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAirlinesAirCarriers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAirportsFlyingFields
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAmbulanceServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAmusementParksCarnivals
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAntiqueReproductions
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAntiqueShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAquariums
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringArchitecturalSurveyingServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringArtDealersAndGalleries
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringArtistsSupplyAndCraftShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoAndHomeSupplyStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoBodyRepairShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoPaintShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoServiceShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomatedCashDisburse
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomatedFuelDispensers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomobileAssociations
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomotivePartsAndAccessoriesStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomotiveTireStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBailAndBondPayments
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBakeries
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBandsOrchestras
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBarberAndBeautyShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBettingCasinoGambling
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBicycleShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBilliardPoolEstablishments
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBoatDealers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBoatRentalsAndLeases
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBookStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBooksPeriodicalsAndNewspapers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBowlingAlleys
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBusLines
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBusinessSecretarialSchools
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBuyingShoppingServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCameraAndPhotographicSupplyStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCandyNutAndConfectioneryStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersNewUsed
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersUsedOnly
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarRentalAgencies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarWashes
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarpentryServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarpetUpholsteryCleaning
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCaterers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChemicalsAndAlliedProducts
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChildCareServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChildrensAndInfantsWearStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChiropodistsPodiatrists
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChiropractors
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCigarStoresAndStands
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCivicSocialFraternalAssociations
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCleaningAndMaintenance
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringClothingRental
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCollegesUniversities
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommercialEquipment
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommercialFootwear
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommercialPhotographyArtAndGraphics
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommuterTransportAndFerries
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerNetworkServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerProgramming
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerRepair
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerSoftwareStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputersPeripheralsAndSoftware
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringConcreteWorkServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringConstructionMaterials
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringConsultingPublicRelations
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCorrespondenceSchools
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCosmeticStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCounselingServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCountryClubs
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCourierServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCourtCosts
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCreditReportingAgencies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCruiseLines
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDairyProductsStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDanceHallStudiosSchools
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDatingEscortServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDentistsOrthodontists
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDepartmentStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDetectiveAgencies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsApplications
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsGames
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsLargeVolume
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsMedia
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingCatalogMerchant
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingInboundTelemarketing
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingInsuranceServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingOther
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingOutboundTelemarketing
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingSubscription
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingTravel
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDiscountStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDoctors
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDoorToDoorSales
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDrinkingPlaces
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDrugStoresAndPharmacies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDryCleaners
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDurableGoods
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDutyFreeStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEatingPlacesRestaurants
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEducationalServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectricRazorStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectricalPartsAndEquipment
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectricalServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectronicsRepairShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectronicsStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElementarySecondarySchools
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEmploymentTempAgencies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEquipmentRental
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringExterminatingServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFamilyClothingStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFastFoodRestaurants
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFinancialInstitutions
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFinesGovernmentAdministrativeEntities
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFloorCoveringStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFlorists
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFreezerAndLockerMeatProvisioners
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFuelDealersNonAutomotive
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFuneralServicesCrematories
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFurnitureRepairRefinishing
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFurriersAndFurShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGeneralServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGiftCardNoveltyAndSouvenirShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGlassPaintAndWallpaperStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGlasswareCrystalStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGolfCoursesPublic
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGovernmentServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGroceryStoresSupermarkets
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHardwareEquipmentAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHardwareStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHealthAndBeautySpas
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHearingAidsSalesAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHeatingPlumbingAC
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHobbyToyAndGameShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHomeSupplyWarehouseStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHospitals
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHotelsMotelsAndResorts
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHouseholdApplianceStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringIndustrialSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringInformationRetrievalServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringInsuranceDefault
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringInsuranceUnderwritingPremiums
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringIntraCompanyPurchases
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLandscapingServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLaundries
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLaundryCleaningServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLegalServicesAttorneys
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLuggageAndLeatherGoodsStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLumberBuildingMaterialsStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringManualCashDisburse
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMarinasServiceAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMasonryStoneworkAndPlaster
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMassageParlors
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMedicalAndDentalLabs
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMedicalServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMembershipOrganizations
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMensWomensClothingStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMetalServiceCenters
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneous
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousApparelAndAccessoryShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousAutoDealers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousBusinessServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousFoodStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralMerchandise
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousPublishingAndPrinting
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousRecreationServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousRepairShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousSpecialtyRetail
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMobileHomeDealers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotionPictureTheaters
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorFreightCarriersAndTrucking
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorHomesDealers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorVehicleSuppliesAndNewParts
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsAndDealers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsDealers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNewsDealersAndNewsstands
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNonFiMoneyOrders
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNonFiStoredValueCardPurchaseLoad
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNondurableGoods
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNurseriesLawnAndGardenSupplyStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNursingPersonalCare
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOfficeAndCommercialFurniture
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOpticiansEyeglasses
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOptometristsOphthalmologist
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOrthopedicGoodsProstheticDevices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOsteopaths
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPackageStoresBeerWineAndLiquor
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPaintsVarnishesAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringParkingLotsGarages
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPassengerRailways
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPawnShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPetShopsPetFoodAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPetroleumAndPetroleumProducts
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPhotoDeveloping
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPhotographicStudios
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPictureVideoProduction
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPoliticalOrganizations
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPostalServicesGovernmentOnly
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringProfessionalServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPublicWarehousingAndStorage
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringQuickCopyReproAndBlueprint
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRailroads
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRealEstateAgentsAndManagersRentals
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRecordStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRecreationalVehicleRentals
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringReligiousGoodsStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringReligiousOrganizations
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRoofingSidingSheetMetal
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSecretarialSupportServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSecurityBrokersDealers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringServiceStations
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringShoeRepairHatCleaning
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringShoeStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSmallApplianceRepair
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSnowmobileDealers
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSpecialTradeServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSpecialtyCleaning
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportingGoodsStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportingRecreationCamps
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportsAndRidingApparelStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportsClubsFields
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringStampAndCoinStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSwimmingPoolsSales
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTUiTravelGermany
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTailorsAlterations
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTaxPaymentsGovernmentAgencies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTaxPreparationServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTaxicabsLimousines
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTelecommunicationServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTelegraphServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTentAndAwningShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTestingLaboratories
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTheatricalTicketAgencies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTimeshares
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTireRetreadingAndRepair
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTollsBridgeFees
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTouristAttractionsAndExhibits
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTowingServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTrailerParksCampgrounds
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTransportationServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTravelAgenciesTourOperators
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTruckStopIteration
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTruckUtilityTrailerRentals
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTypesettingPlateMakingAndRelatedServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTypewriterStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUniformsCommercialClothing
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUsedMerchandiseAndSecondhandStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUtilities
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVarietyStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVeterinaryServices
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVideoAmusementGameSupplies
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVideoGameArcades
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVideoTapeRentalStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVocationalTradeSchools
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWatchJewelryRepair
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWeldingRepair
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWholesaleClubs
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWigAndToupeeStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWiresMoneyOrders
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWomensAccessoryAndSpecialtyShops
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWomensReadyToWearStores
    | Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWreckingAndSalvageYards
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardCardholder'AuthorizationControls'BlockedCategories'
    where toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAcRefrigerationRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ac_refrigeration_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAccountingBookkeepingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accounting_bookkeeping_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAdvertisingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advertising_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAgriculturalCooperative) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "agricultural_cooperative"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAirlinesAirCarriers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airlines_air_carriers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAirportsFlyingFields) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airports_flying_fields"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAmbulanceServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ambulance_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAmusementParksCarnivals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amusement_parks_carnivals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAntiqueReproductions) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_reproductions"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAntiqueShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAquariums) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "aquariums"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringArchitecturalSurveyingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "architectural_surveying_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringArtDealersAndGalleries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "art_dealers_and_galleries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringArtistsSupplyAndCraftShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "artists_supply_and_craft_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoAndHomeSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_and_home_supply_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoBodyRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_body_repair_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoPaintShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_paint_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoServiceShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_service_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomatedCashDisburse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_cash_disburse"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomatedFuelDispensers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_fuel_dispensers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomobileAssociations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automobile_associations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomotivePartsAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_parts_and_accessories_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomotiveTireStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_tire_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBailAndBondPayments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bail_and_bond_payments"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBakeries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bakeries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBandsOrchestras) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bands_orchestras"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBarberAndBeautyShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "barber_and_beauty_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBettingCasinoGambling) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "betting_casino_gambling"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBicycleShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bicycle_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBilliardPoolEstablishments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "billiard_pool_establishments"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBoatDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBoatRentalsAndLeases) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_rentals_and_leases"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBookStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBooksPeriodicalsAndNewspapers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "books_periodicals_and_newspapers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBowlingAlleys) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bowling_alleys"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBusLines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bus_lines"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBusinessSecretarialSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_secretarial_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBuyingShoppingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "buying_shopping_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cable_satellite_and_other_pay_television_and_radio"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCameraAndPhotographicSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "camera_and_photographic_supply_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCandyNutAndConfectioneryStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "candy_nut_and_confectionery_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersNewUsed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_new_used"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersUsedOnly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_used_only"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarRentalAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_rental_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarWashes) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_washes"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarpentryServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpentry_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarpetUpholsteryCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpet_upholstery_cleaning"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCaterers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "caterers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charitable_and_social_service_organizations_fundraising"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChemicalsAndAlliedProducts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chemicals_and_allied_products"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChildCareServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "child_care_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChildrensAndInfantsWearStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "childrens_and_infants_wear_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChiropodistsPodiatrists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropodists_podiatrists"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChiropractors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropractors"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCigarStoresAndStands) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cigar_stores_and_stands"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCivicSocialFraternalAssociations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "civic_social_fraternal_associations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCleaningAndMaintenance) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cleaning_and_maintenance"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringClothingRental) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "clothing_rental"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCollegesUniversities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "colleges_universities"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommercialEquipment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_equipment"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommercialFootwear) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_footwear"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommercialPhotographyArtAndGraphics) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_photography_art_and_graphics"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommuterTransportAndFerries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commuter_transport_and_ferries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerNetworkServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_network_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerProgramming) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_programming"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerSoftwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_software_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputersPeripheralsAndSoftware) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computers_peripherals_and_software"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringConcreteWorkServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "concrete_work_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringConstructionMaterials) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "construction_materials"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringConsultingPublicRelations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "consulting_public_relations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCorrespondenceSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "correspondence_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCosmeticStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cosmetic_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCounselingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "counseling_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCountryClubs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "country_clubs"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCourierServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "courier_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCourtCosts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "court_costs"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCreditReportingAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_reporting_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCruiseLines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cruise_lines"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDairyProductsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dairy_products_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDanceHallStudiosSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dance_hall_studios_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDatingEscortServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dating_escort_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDentistsOrthodontists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dentists_orthodontists"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDepartmentStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "department_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDetectiveAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "detective_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsApplications) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_applications"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsGames) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_games"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsLargeVolume) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_large_volume"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsMedia) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_media"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingCatalogMerchant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_catalog_merchant"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_combination_catalog_and_retail_merchant"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingInboundTelemarketing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_inbound_telemarketing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingInsuranceServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_insurance_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingOther) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_other"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingOutboundTelemarketing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_outbound_telemarketing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingSubscription) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_subscription"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingTravel) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_travel"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDiscountStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDoctors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "doctors"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDoorToDoorSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "door_to_door_sales"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drapery_window_covering_and_upholstery_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDrinkingPlaces) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drinking_places"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDrugStoresAndPharmacies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drug_stores_and_pharmacies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drugs_drug_proprietaries_and_druggist_sundries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDryCleaners) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dry_cleaners"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDurableGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "durable_goods"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDutyFreeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duty_free_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEatingPlacesRestaurants) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eating_places_restaurants"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEducationalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "educational_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectricRazorStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electric_razor_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectricalPartsAndEquipment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_parts_and_equipment"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectricalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectronicsRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_repair_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectronicsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElementarySecondarySchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "elementary_secondary_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEmploymentTempAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "employment_temp_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEquipmentRental) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "equipment_rental"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringExterminatingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exterminating_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFamilyClothingStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "family_clothing_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFastFoodRestaurants) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fast_food_restaurants"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFinancialInstitutions) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "financial_institutions"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFinesGovernmentAdministrativeEntities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fines_government_administrative_entities"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fireplace_fireplace_screens_and_accessories_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFloorCoveringStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "floor_covering_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFlorists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists_supplies_nursery_stock_and_flowers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFreezerAndLockerMeatProvisioners) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freezer_and_locker_meat_provisioners"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFuelDealersNonAutomotive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fuel_dealers_non_automotive"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFuneralServicesCrematories) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "funeral_services_crematories"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_home_furnishings_and_equipment_stores_except_appliances"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFurnitureRepairRefinishing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_repair_refinishing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFurriersAndFurShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furriers_and_fur_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGeneralServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "general_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGiftCardNoveltyAndSouvenirShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gift_card_novelty_and_souvenir_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGlassPaintAndWallpaperStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glass_paint_and_wallpaper_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGlasswareCrystalStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glassware_crystal_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGolfCoursesPublic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "golf_courses_public"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGovernmentServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGroceryStoresSupermarkets) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "grocery_stores_supermarkets"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHardwareEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_equipment_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHardwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHealthAndBeautySpas) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "health_and_beauty_spas"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHearingAidsSalesAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hearing_aids_sales_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHeatingPlumbingAC) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "heating_plumbing_a_c"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHobbyToyAndGameShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hobby_toy_and_game_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHomeSupplyWarehouseStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "home_supply_warehouse_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHospitals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hospitals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHotelsMotelsAndResorts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hotels_motels_and_resorts"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHouseholdApplianceStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "household_appliance_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringIndustrialSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "industrial_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringInformationRetrievalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "information_retrieval_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringInsuranceDefault) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_default"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringInsuranceUnderwritingPremiums) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_underwriting_premiums"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringIntraCompanyPurchases) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "intra_company_purchases"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jewelry_stores_watches_clocks_and_silverware_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLandscapingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "landscaping_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLaundries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundries"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLaundryCleaningServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundry_cleaning_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLegalServicesAttorneys) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legal_services_attorneys"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLuggageAndLeatherGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "luggage_and_leather_goods_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLumberBuildingMaterialsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lumber_building_materials_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringManualCashDisburse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual_cash_disburse"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMarinasServiceAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "marinas_service_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMasonryStoneworkAndPlaster) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masonry_stonework_and_plaster"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMassageParlors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "massage_parlors"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMedicalAndDentalLabs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_and_dental_labs"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMedicalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMembershipOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "membership_organizations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_and_boys_clothing_and_accessories_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMensWomensClothingStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_womens_clothing_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMetalServiceCenters) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metal_service_centers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneous) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousApparelAndAccessoryShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_apparel_and_accessory_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousAutoDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_auto_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousBusinessServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_business_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousFoodStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_food_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralMerchandise) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_merchandise"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_home_furnishing_specialty_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousPublishingAndPrinting) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_publishing_and_printing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousRecreationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_recreation_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_repair_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousSpecialtyRetail) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_specialty_retail"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMobileHomeDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mobile_home_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotionPictureTheaters) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motion_picture_theaters"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorFreightCarriersAndTrucking) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_freight_carriers_and_trucking"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorHomesDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_homes_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorVehicleSuppliesAndNewParts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_vehicle_supplies_and_new_parts"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsAndDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_and_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "music_stores_musical_instruments_pianos_and_sheet_music"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNewsDealersAndNewsstands) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "news_dealers_and_newsstands"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNonFiMoneyOrders) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_money_orders"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNonFiStoredValueCardPurchaseLoad) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_stored_value_card_purchase_load"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNondurableGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nondurable_goods"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNurseriesLawnAndGardenSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nurseries_lawn_and_garden_supply_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNursingPersonalCare) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nursing_personal_care"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOfficeAndCommercialFurniture) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "office_and_commercial_furniture"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOpticiansEyeglasses) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "opticians_eyeglasses"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOptometristsOphthalmologist) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "optometrists_ophthalmologist"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOrthopedicGoodsProstheticDevices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "orthopedic_goods_prosthetic_devices"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOsteopaths) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "osteopaths"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPackageStoresBeerWineAndLiquor) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "package_stores_beer_wine_and_liquor"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPaintsVarnishesAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paints_varnishes_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringParkingLotsGarages) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "parking_lots_garages"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPassengerRailways) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "passenger_railways"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPawnShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pawn_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPetShopsPetFoodAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pet_shops_pet_food_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPetroleumAndPetroleumProducts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "petroleum_and_petroleum_products"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPhotoDeveloping) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photo_developing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_photocopy_microfilm_equipment_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPhotographicStudios) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_studios"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPictureVideoProduction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "picture_video_production"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "piece_goods_notions_and_other_dry_goods"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plumbing_heating_equipment_and_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPoliticalOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "political_organizations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPostalServicesGovernmentOnly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "postal_services_government_only"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "precious_stones_and_metals_watches_and_jewelry"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringProfessionalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "professional_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPublicWarehousingAndStorage) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_warehousing_and_storage"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringQuickCopyReproAndBlueprint) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "quick_copy_repro_and_blueprint"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRailroads) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "railroads"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRealEstateAgentsAndManagersRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "real_estate_agents_and_managers_rentals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRecordStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "record_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRecreationalVehicleRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recreational_vehicle_rentals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringReligiousGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_goods_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringReligiousOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_organizations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRoofingSidingSheetMetal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roofing_siding_sheet_metal"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSecretarialSupportServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "secretarial_support_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSecurityBrokersDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "security_brokers_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringServiceStations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service_stations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sewing_needlework_fabric_and_piece_goods_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringShoeRepairHatCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_repair_hat_cleaning"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringShoeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSmallApplianceRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "small_appliance_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSnowmobileDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snowmobile_dealers"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSpecialTradeServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "special_trade_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSpecialtyCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "specialty_cleaning"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportingGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_goods_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportingRecreationCamps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_recreation_camps"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportsAndRidingApparelStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_and_riding_apparel_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportsClubsFields) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_clubs_fields"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringStampAndCoinStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stamp_and_coin_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationary_office_supplies_printing_and_writing_paper"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationery_stores_office_and_school_supply_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSwimmingPoolsSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swimming_pools_sales"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTUiTravelGermany) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "t_ui_travel_germany"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTailorsAlterations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tailors_alterations"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTaxPaymentsGovernmentAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_payments_government_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTaxPreparationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_preparation_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTaxicabsLimousines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "taxicabs_limousines"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_equipment_and_telephone_sales"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTelecommunicationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTelegraphServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telegraph_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTentAndAwningShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tent_and_awning_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTestingLaboratories) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "testing_laboratories"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTheatricalTicketAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theatrical_ticket_agencies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTimeshares) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "timeshares"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTireRetreadingAndRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tire_retreading_and_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTollsBridgeFees) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tolls_bridge_fees"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTouristAttractionsAndExhibits) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tourist_attractions_and_exhibits"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTowingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "towing_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTrailerParksCampgrounds) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trailer_parks_campgrounds"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTransportationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transportation_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTravelAgenciesTourOperators) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "travel_agencies_tour_operators"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTruckStopIteration) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_stop_iteration"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTruckUtilityTrailerRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_utility_trailer_rentals"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTypesettingPlateMakingAndRelatedServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typesetting_plate_making_and_related_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTypewriterStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typewriter_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "u_s_federal_government_agencies_or_departments"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUniformsCommercialClothing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uniforms_commercial_clothing"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUsedMerchandiseAndSecondhandStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "used_merchandise_and_secondhand_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUtilities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "utilities"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVarietyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "variety_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVeterinaryServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "veterinary_services"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVideoAmusementGameSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_amusement_game_supplies"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVideoGameArcades) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_game_arcades"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVideoTapeRentalStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_tape_rental_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVocationalTradeSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vocational_trade_schools"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWatchJewelryRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "watch_jewelry_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWeldingRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "welding_repair"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWholesaleClubs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wholesale_clubs"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWigAndToupeeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wig_and_toupee_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWiresMoneyOrders) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wires_money_orders"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWomensAccessoryAndSpecialtyShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_accessory_and_specialty_shops"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWomensReadyToWearStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_ready_to_wear_stores"
          toJSON (Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWreckingAndSalvageYards) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wrecking_and_salvage_yards"
instance Data.Aeson.FromJSON Issuing'cardCardholder'AuthorizationControls'BlockedCategories'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ac_refrigeration_repair")
                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAcRefrigerationRepair
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accounting_bookkeeping_services")
                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAccountingBookkeepingServices
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advertising_services")
                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAdvertisingServices
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "agricultural_cooperative")
                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAgriculturalCooperative
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airlines_air_carriers")
                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAirlinesAirCarriers
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airports_flying_fields")
                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAirportsFlyingFields
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ambulance_services")
                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAmbulanceServices
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amusement_parks_carnivals")
                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAmusementParksCarnivals
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_reproductions")
                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAntiqueReproductions
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_shops")
                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAntiqueShops
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "aquariums")
                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAquariums
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "architectural_surveying_services")
                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringArchitecturalSurveyingServices
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "art_dealers_and_galleries")
                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringArtDealersAndGalleries
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "artists_supply_and_craft_shops")
                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringArtistsSupplyAndCraftShops
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_and_home_supply_stores")
                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoAndHomeSupplyStores
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_body_repair_shops")
                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoBodyRepairShops
                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_paint_shops")
                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoPaintShops
                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_service_shops")
                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutoServiceShops
                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_cash_disburse")
                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomatedCashDisburse
                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_fuel_dispensers")
                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomatedFuelDispensers
                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automobile_associations")
                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomobileAssociations
                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_parts_and_accessories_stores")
                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomotivePartsAndAccessoriesStores
                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_tire_stores")
                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringAutomotiveTireStores
                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bail_and_bond_payments")
                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBailAndBondPayments
                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bakeries")
                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBakeries
                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bands_orchestras")
                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBandsOrchestras
                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "barber_and_beauty_shops")
                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBarberAndBeautyShops
                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "betting_casino_gambling")
                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBettingCasinoGambling
                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bicycle_shops")
                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBicycleShops
                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "billiard_pool_establishments")
                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBilliardPoolEstablishments
                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_dealers")
                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBoatDealers
                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_rentals_and_leases")
                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBoatRentalsAndLeases
                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book_stores")
                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBookStores
                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "books_periodicals_and_newspapers")
                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBooksPeriodicalsAndNewspapers
                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bowling_alleys")
                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBowlingAlleys
                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bus_lines")
                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBusLines
                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_secretarial_schools")
                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBusinessSecretarialSchools
                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "buying_shopping_services")
                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringBuyingShoppingServices
                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cable_satellite_and_other_pay_television_and_radio")
                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio
                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "camera_and_photographic_supply_stores")
                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCameraAndPhotographicSupplyStores
                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "candy_nut_and_confectionery_stores")
                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCandyNutAndConfectioneryStores
                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_new_used")
                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersNewUsed
                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_used_only")
                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersUsedOnly
                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_rental_agencies")
                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarRentalAgencies
                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_washes")
                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarWashes
                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpentry_services")
                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarpentryServices
                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpet_upholstery_cleaning")
                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCarpetUpholsteryCleaning
                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "caterers")
                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCaterers
                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charitable_and_social_service_organizations_fundraising")
                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising
                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chemicals_and_allied_products")
                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChemicalsAndAlliedProducts
                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "child_care_services")
                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChildCareServices
                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "childrens_and_infants_wear_stores")
                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChildrensAndInfantsWearStores
                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropodists_podiatrists")
                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChiropodistsPodiatrists
                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropractors")
                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringChiropractors
                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cigar_stores_and_stands")
                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCigarStoresAndStands
                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "civic_social_fraternal_associations")
                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCivicSocialFraternalAssociations
                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cleaning_and_maintenance")
                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCleaningAndMaintenance
                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "clothing_rental")
                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringClothingRental
                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "colleges_universities")
                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCollegesUniversities
                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_equipment")
                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommercialEquipment
                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_footwear")
                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommercialFootwear
                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_photography_art_and_graphics")
                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommercialPhotographyArtAndGraphics
                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commuter_transport_and_ferries")
                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCommuterTransportAndFerries
                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_network_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerNetworkServices
                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_programming")
                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerProgramming
                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_repair")
                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerRepair
                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_software_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputerSoftwareStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computers_peripherals_and_software")
                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringComputersPeripheralsAndSoftware
                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "concrete_work_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringConcreteWorkServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "construction_materials")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringConstructionMaterials
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "consulting_public_relations")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringConsultingPublicRelations
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "correspondence_schools")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCorrespondenceSchools
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cosmetic_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCosmeticStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "counseling_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCounselingServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "country_clubs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCountryClubs
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "courier_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCourierServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "court_costs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCourtCosts
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_reporting_agencies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCreditReportingAgencies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cruise_lines")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringCruiseLines
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dairy_products_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDairyProductsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dance_hall_studios_schools")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDanceHallStudiosSchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dating_escort_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDatingEscortServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dentists_orthodontists")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDentistsOrthodontists
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "department_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDepartmentStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "detective_agencies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDetectiveAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_applications")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsApplications
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_games")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsGames
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_large_volume")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsLargeVolume
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_media")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDigitalGoodsMedia
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_catalog_merchant")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingCatalogMerchant
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_combination_catalog_and_retail_merchant")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_inbound_telemarketing")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingInboundTelemarketing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_insurance_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingInsuranceServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_other")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingOther
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_outbound_telemarketing")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingOutboundTelemarketing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_subscription")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingSubscription
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_travel")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDirectMarketingTravel
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDiscountStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "doctors")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDoctors
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "door_to_door_sales")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDoorToDoorSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drapery_window_covering_and_upholstery_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drinking_places")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDrinkingPlaces
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drug_stores_and_pharmacies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDrugStoresAndPharmacies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drugs_drug_proprietaries_and_druggist_sundries")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dry_cleaners")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDryCleaners
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "durable_goods")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDurableGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duty_free_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringDutyFreeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eating_places_restaurants")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEatingPlacesRestaurants
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "educational_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEducationalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electric_razor_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectricRazorStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_parts_and_equipment")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectricalPartsAndEquipment
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectricalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_repair_shops")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectronicsRepairShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElectronicsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "elementary_secondary_schools")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringElementarySecondarySchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "employment_temp_agencies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEmploymentTempAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "equipment_rental")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringEquipmentRental
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exterminating_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringExterminatingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "family_clothing_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFamilyClothingStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fast_food_restaurants")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFastFoodRestaurants
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "financial_institutions")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFinancialInstitutions
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fines_government_administrative_entities")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFinesGovernmentAdministrativeEntities
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fireplace_fireplace_screens_and_accessories_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "floor_covering_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFloorCoveringStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFlorists
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists_supplies_nursery_stock_and_flowers")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freezer_and_locker_meat_provisioners")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFreezerAndLockerMeatProvisioners
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fuel_dealers_non_automotive")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFuelDealersNonAutomotive
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "funeral_services_crematories")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFuneralServicesCrematories
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_home_furnishings_and_equipment_stores_except_appliances")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_repair_refinishing")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFurnitureRepairRefinishing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furriers_and_fur_shops")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringFurriersAndFurShops
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "general_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGeneralServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gift_card_novelty_and_souvenir_shops")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGiftCardNoveltyAndSouvenirShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glass_paint_and_wallpaper_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGlassPaintAndWallpaperStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glassware_crystal_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGlasswareCrystalStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "golf_courses_public")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGolfCoursesPublic
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGovernmentServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "grocery_stores_supermarkets")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringGroceryStoresSupermarkets
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_equipment_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHardwareEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHardwareStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "health_and_beauty_spas")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHealthAndBeautySpas
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hearing_aids_sales_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHearingAidsSalesAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "heating_plumbing_a_c")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHeatingPlumbingAC
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hobby_toy_and_game_shops")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHobbyToyAndGameShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "home_supply_warehouse_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHomeSupplyWarehouseStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hospitals")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHospitals
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hotels_motels_and_resorts")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHotelsMotelsAndResorts
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "household_appliance_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringHouseholdApplianceStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "industrial_supplies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringIndustrialSupplies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "information_retrieval_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringInformationRetrievalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_default")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringInsuranceDefault
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_underwriting_premiums")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringInsuranceUnderwritingPremiums
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "intra_company_purchases")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringIntraCompanyPurchases
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jewelry_stores_watches_clocks_and_silverware_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "landscaping_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLandscapingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundries")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLaundries
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundry_cleaning_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLaundryCleaningServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legal_services_attorneys")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLegalServicesAttorneys
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "luggage_and_leather_goods_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLuggageAndLeatherGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lumber_building_materials_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringLumberBuildingMaterialsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual_cash_disburse")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringManualCashDisburse
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "marinas_service_and_supplies")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMarinasServiceAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masonry_stonework_and_plaster")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMasonryStoneworkAndPlaster
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "massage_parlors")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMassageParlors
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_and_dental_labs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMedicalAndDentalLabs
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_dental_ophthalmic_and_hospital_equipment_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMedicalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "membership_organizations")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMembershipOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_and_boys_clothing_and_accessories_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_womens_clothing_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMensWomensClothingStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metal_service_centers")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMetalServiceCenters
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneous
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_apparel_and_accessory_shops")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousApparelAndAccessoryShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_auto_dealers")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousAutoDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_business_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousBusinessServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_food_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousFoodStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_merchandise")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralMerchandise
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_home_furnishing_specialty_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_publishing_and_printing")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousPublishingAndPrinting
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_recreation_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousRecreationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_repair_shops")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousRepairShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_specialty_retail")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMiscellaneousSpecialtyRetail
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mobile_home_dealers")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMobileHomeDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motion_picture_theaters")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotionPictureTheaters
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_freight_carriers_and_trucking")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorFreightCarriersAndTrucking
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_homes_dealers")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorHomesDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_vehicle_supplies_and_new_parts")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorVehicleSuppliesAndNewParts
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_and_dealers")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsAndDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_dealers")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "music_stores_musical_instruments_pianos_and_sheet_music")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "news_dealers_and_newsstands")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNewsDealersAndNewsstands
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_money_orders")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNonFiMoneyOrders
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_stored_value_card_purchase_load")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNonFiStoredValueCardPurchaseLoad
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nondurable_goods")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNondurableGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nurseries_lawn_and_garden_supply_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNurseriesLawnAndGardenSupplyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nursing_personal_care")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringNursingPersonalCare
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "office_and_commercial_furniture")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOfficeAndCommercialFurniture
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "opticians_eyeglasses")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOpticiansEyeglasses
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "optometrists_ophthalmologist")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOptometristsOphthalmologist
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "orthopedic_goods_prosthetic_devices")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOrthopedicGoodsProstheticDevices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "osteopaths")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringOsteopaths
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "package_stores_beer_wine_and_liquor")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPackageStoresBeerWineAndLiquor
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paints_varnishes_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPaintsVarnishesAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "parking_lots_garages")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringParkingLotsGarages
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "passenger_railways")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPassengerRailways
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pawn_shops")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPawnShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pet_shops_pet_food_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPetShopsPetFoodAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "petroleum_and_petroleum_products")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPetroleumAndPetroleumProducts
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photo_developing")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPhotoDeveloping
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_photocopy_microfilm_equipment_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_studios")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPhotographicStudios
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "picture_video_production")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPictureVideoProduction
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "piece_goods_notions_and_other_dry_goods")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plumbing_heating_equipment_and_supplies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "political_organizations")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPoliticalOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "postal_services_government_only")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPostalServicesGovernmentOnly
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "precious_stones_and_metals_watches_and_jewelry")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "professional_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringProfessionalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_warehousing_and_storage")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringPublicWarehousingAndStorage
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "quick_copy_repro_and_blueprint")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringQuickCopyReproAndBlueprint
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "railroads")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRailroads
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "real_estate_agents_and_managers_rentals")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRealEstateAgentsAndManagersRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "record_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRecordStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recreational_vehicle_rentals")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRecreationalVehicleRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_goods_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringReligiousGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_organizations")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringReligiousOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roofing_siding_sheet_metal")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringRoofingSidingSheetMetal
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "secretarial_support_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSecretarialSupportServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "security_brokers_dealers")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSecurityBrokersDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service_stations")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringServiceStations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sewing_needlework_fabric_and_piece_goods_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_repair_hat_cleaning")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringShoeRepairHatCleaning
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringShoeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "small_appliance_repair")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSmallApplianceRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snowmobile_dealers")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSnowmobileDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "special_trade_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSpecialTradeServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "specialty_cleaning")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSpecialtyCleaning
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_goods_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportingGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_recreation_camps")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportingRecreationCamps
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_and_riding_apparel_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportsAndRidingApparelStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_clubs_fields")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSportsClubsFields
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stamp_and_coin_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringStampAndCoinStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationary_office_supplies_printing_and_writing_paper")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationery_stores_office_and_school_supply_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swimming_pools_sales")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringSwimmingPoolsSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "t_ui_travel_germany")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTUiTravelGermany
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tailors_alterations")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTailorsAlterations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_payments_government_agencies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTaxPaymentsGovernmentAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_preparation_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTaxPreparationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "taxicabs_limousines")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTaxicabsLimousines
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_equipment_and_telephone_sales")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTelecommunicationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telegraph_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTelegraphServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tent_and_awning_shops")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTentAndAwningShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "testing_laboratories")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTestingLaboratories
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theatrical_ticket_agencies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTheatricalTicketAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "timeshares")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTimeshares
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tire_retreading_and_repair")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTireRetreadingAndRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tolls_bridge_fees")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTollsBridgeFees
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tourist_attractions_and_exhibits")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTouristAttractionsAndExhibits
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "towing_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTowingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trailer_parks_campgrounds")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTrailerParksCampgrounds
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transportation_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTransportationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "travel_agencies_tour_operators")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTravelAgenciesTourOperators
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_stop_iteration")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTruckStopIteration
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_utility_trailer_rentals")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTruckUtilityTrailerRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typesetting_plate_making_and_related_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTypesettingPlateMakingAndRelatedServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typewriter_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringTypewriterStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "u_s_federal_government_agencies_or_departments")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uniforms_commercial_clothing")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUniformsCommercialClothing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "used_merchandise_and_secondhand_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUsedMerchandiseAndSecondhandStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "utilities")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringUtilities
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "variety_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVarietyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "veterinary_services")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVeterinaryServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_amusement_game_supplies")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVideoAmusementGameSupplies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_game_arcades")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVideoGameArcades
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_tape_rental_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVideoTapeRentalStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vocational_trade_schools")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringVocationalTradeSchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "watch_jewelry_repair")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWatchJewelryRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "welding_repair")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWeldingRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wholesale_clubs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWholesaleClubs
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wig_and_toupee_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWigAndToupeeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wires_money_orders")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWiresMoneyOrders
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_accessory_and_specialty_shops")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWomensAccessoryAndSpecialtyShops
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_ready_to_wear_stores")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWomensReadyToWearStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wrecking_and_salvage_yards")
then Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumStringWreckingAndSalvageYards
else Issuing'cardCardholder'AuthorizationControls'BlockedCategories'EnumOther val)
instance Data.Aeson.ToJSON Issuing'cardCardholder'AuthorizationControls'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "allowed_categories" (issuing'cardCardholder'AuthorizationControls'AllowedCategories obj) : (Data.Aeson..=) "blocked_categories" (issuing'cardCardholder'AuthorizationControls'BlockedCategories obj) : (Data.Aeson..=) "spending_limits" (issuing'cardCardholder'AuthorizationControls'SpendingLimits obj) : (Data.Aeson..=) "spending_limits_currency" (issuing'cardCardholder'AuthorizationControls'SpendingLimitsCurrency obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "allowed_categories" (issuing'cardCardholder'AuthorizationControls'AllowedCategories obj) GHC.Base.<> ((Data.Aeson..=) "blocked_categories" (issuing'cardCardholder'AuthorizationControls'BlockedCategories obj) GHC.Base.<> ((Data.Aeson..=) "spending_limits" (issuing'cardCardholder'AuthorizationControls'SpendingLimits obj) GHC.Base.<> (Data.Aeson..=) "spending_limits_currency" (issuing'cardCardholder'AuthorizationControls'SpendingLimitsCurrency obj))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardCardholder'AuthorizationControls'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardCardholder'AuthorizationControls'" (\obj -> (((GHC.Base.pure Issuing'cardCardholder'AuthorizationControls' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allowed_categories")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "blocked_categories")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "spending_limits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "spending_limits_currency"))
data Issuing'cardCardholder'Company'
    = Issuing'cardCardholder'Company' {issuing'cardCardholder'Company'TaxIdProvided :: (GHC.Maybe.Maybe GHC.Types.Bool)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardCardholder'Company'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "tax_id_provided" (issuing'cardCardholder'Company'TaxIdProvided obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "tax_id_provided" (issuing'cardCardholder'Company'TaxIdProvided obj))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardCardholder'Company'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardCardholder'Company'" (\obj -> GHC.Base.pure Issuing'cardCardholder'Company' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_id_provided"))
data Issuing'cardCardholder'Individual'
    = Issuing'cardCardholder'Individual' {issuing'cardCardholder'Individual'Dob :: (GHC.Maybe.Maybe Issuing'cardCardholder'Individual'Dob'),
                                          issuing'cardCardholder'Individual'FirstName :: (GHC.Maybe.Maybe GHC.Base.String),
                                          issuing'cardCardholder'Individual'LastName :: (GHC.Maybe.Maybe GHC.Base.String),
                                          issuing'cardCardholder'Individual'Verification :: (GHC.Maybe.Maybe Issuing'cardCardholder'Individual'Verification')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardCardholder'Individual'Dob'
    = Issuing'cardCardholder'Individual'Dob' {issuing'cardCardholder'Individual'Dob'Day :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                              issuing'cardCardholder'Individual'Dob'Month :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                              issuing'cardCardholder'Individual'Dob'Year :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardCardholder'Individual'Dob'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "day" (issuing'cardCardholder'Individual'Dob'Day obj) : (Data.Aeson..=) "month" (issuing'cardCardholder'Individual'Dob'Month obj) : (Data.Aeson..=) "year" (issuing'cardCardholder'Individual'Dob'Year obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "day" (issuing'cardCardholder'Individual'Dob'Day obj) GHC.Base.<> ((Data.Aeson..=) "month" (issuing'cardCardholder'Individual'Dob'Month obj) GHC.Base.<> (Data.Aeson..=) "year" (issuing'cardCardholder'Individual'Dob'Year obj)))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardCardholder'Individual'Dob'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardCardholder'Individual'Dob'" (\obj -> ((GHC.Base.pure Issuing'cardCardholder'Individual'Dob' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "day")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "year"))
data Issuing'cardCardholder'Individual'Verification'
    = Issuing'cardCardholder'Individual'Verification' {issuing'cardCardholder'Individual'Verification'Document :: (GHC.Maybe.Maybe Issuing'cardCardholder'Individual'Verification'Document')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardCardholder'Individual'Verification'Document'
    = Issuing'cardCardholder'Individual'Verification'Document' {issuing'cardCardholder'Individual'Verification'Document'Back :: (GHC.Maybe.Maybe Issuing'cardCardholder'Individual'Verification'Document'Back'Variants),
                                                                issuing'cardCardholder'Individual'Verification'Document'Front :: (GHC.Maybe.Maybe Issuing'cardCardholder'Individual'Verification'Document'Front'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardCardholder'Individual'Verification'Document'Back'Variants
    = Issuing'cardCardholder'Individual'Verification'Document'Back'Variant1 File
    | Issuing'cardCardholder'Individual'Verification'Document'Back'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'cardCardholder'Individual'Verification'Document'Back'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'cardCardholder'Individual'Verification'Document'Back'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'cardCardholder'Individual'Verification'Document'Front'Variants
    = Issuing'cardCardholder'Individual'Verification'Document'Front'Variant1 File
    | Issuing'cardCardholder'Individual'Verification'Document'Front'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'cardCardholder'Individual'Verification'Document'Front'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'cardCardholder'Individual'Verification'Document'Front'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Issuing'cardCardholder'Individual'Verification'Document'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "back" (issuing'cardCardholder'Individual'Verification'Document'Back obj) : (Data.Aeson..=) "front" (issuing'cardCardholder'Individual'Verification'Document'Front obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "back" (issuing'cardCardholder'Individual'Verification'Document'Back obj) GHC.Base.<> (Data.Aeson..=) "front" (issuing'cardCardholder'Individual'Verification'Document'Front obj))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardCardholder'Individual'Verification'Document'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardCardholder'Individual'Verification'Document'" (\obj -> (GHC.Base.pure Issuing'cardCardholder'Individual'Verification'Document' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "front"))
instance Data.Aeson.ToJSON Issuing'cardCardholder'Individual'Verification'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "document" (issuing'cardCardholder'Individual'Verification'Document obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "document" (issuing'cardCardholder'Individual'Verification'Document obj))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardCardholder'Individual'Verification'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardCardholder'Individual'Verification'" (\obj -> GHC.Base.pure Issuing'cardCardholder'Individual'Verification' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "document"))
instance Data.Aeson.ToJSON Issuing'cardCardholder'Individual'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dob" (issuing'cardCardholder'Individual'Dob obj) : (Data.Aeson..=) "first_name" (issuing'cardCardholder'Individual'FirstName obj) : (Data.Aeson..=) "last_name" (issuing'cardCardholder'Individual'LastName obj) : (Data.Aeson..=) "verification" (issuing'cardCardholder'Individual'Verification obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dob" (issuing'cardCardholder'Individual'Dob obj) GHC.Base.<> ((Data.Aeson..=) "first_name" (issuing'cardCardholder'Individual'FirstName obj) GHC.Base.<> ((Data.Aeson..=) "last_name" (issuing'cardCardholder'Individual'LastName obj) GHC.Base.<> (Data.Aeson..=) "verification" (issuing'cardCardholder'Individual'Verification obj))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardCardholder'Individual'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardCardholder'Individual'" (\obj -> (((GHC.Base.pure Issuing'cardCardholder'Individual' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dob")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verification"))
data Issuing'cardCardholder'Metadata'
    = Issuing'cardCardholder'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardCardholder'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardCardholder'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardCardholder'Metadata'" (\obj -> GHC.Base.pure Issuing'cardCardholder'Metadata')
data Issuing'cardCardholder'Object'
    = Issuing'cardCardholder'Object'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardCardholder'Object'EnumTyped GHC.Base.String
    | Issuing'cardCardholder'Object'EnumStringIssuing'cardholder
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardCardholder'Object'
    where toJSON (Issuing'cardCardholder'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'Object'EnumStringIssuing'cardholder) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.cardholder"
instance Data.Aeson.FromJSON Issuing'cardCardholder'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.cardholder")
                                          then Issuing'cardCardholder'Object'EnumStringIssuing'cardholder
                                          else Issuing'cardCardholder'Object'EnumOther val)
data Issuing'cardCardholder'Status'
    = Issuing'cardCardholder'Status'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardCardholder'Status'EnumTyped GHC.Base.String
    | Issuing'cardCardholder'Status'EnumStringActive
    | Issuing'cardCardholder'Status'EnumStringBlocked
    | Issuing'cardCardholder'Status'EnumStringInactive
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardCardholder'Status'
    where toJSON (Issuing'cardCardholder'Status'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'Status'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'Status'EnumStringActive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
          toJSON (Issuing'cardCardholder'Status'EnumStringBlocked) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blocked"
          toJSON (Issuing'cardCardholder'Status'EnumStringInactive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive"
instance Data.Aeson.FromJSON Issuing'cardCardholder'Status'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
                                          then Issuing'cardCardholder'Status'EnumStringActive
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blocked")
                                                then Issuing'cardCardholder'Status'EnumStringBlocked
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive")
                                                      then Issuing'cardCardholder'Status'EnumStringInactive
                                                      else Issuing'cardCardholder'Status'EnumOther val)
data Issuing'cardCardholder'Type'
    = Issuing'cardCardholder'Type'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardCardholder'Type'EnumTyped GHC.Base.String
    | Issuing'cardCardholder'Type'EnumStringBusinessEntity
    | Issuing'cardCardholder'Type'EnumStringIndividual
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardCardholder'Type'
    where toJSON (Issuing'cardCardholder'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardCardholder'Type'EnumStringBusinessEntity) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_entity"
          toJSON (Issuing'cardCardholder'Type'EnumStringIndividual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual"
instance Data.Aeson.FromJSON Issuing'cardCardholder'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_entity")
                                          then Issuing'cardCardholder'Type'EnumStringBusinessEntity
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual")
                                                then Issuing'cardCardholder'Type'EnumStringIndividual
                                                else Issuing'cardCardholder'Type'EnumOther val)
instance Data.Aeson.ToJSON Issuing'cardCardholder'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "authorization_controls" (issuing'cardCardholder'AuthorizationControls obj) : (Data.Aeson..=) "billing" (issuing'cardCardholder'Billing obj) : (Data.Aeson..=) "company" (issuing'cardCardholder'Company obj) : (Data.Aeson..=) "created" (issuing'cardCardholder'Created obj) : (Data.Aeson..=) "email" (issuing'cardCardholder'Email obj) : (Data.Aeson..=) "id" (issuing'cardCardholder'Id obj) : (Data.Aeson..=) "individual" (issuing'cardCardholder'Individual obj) : (Data.Aeson..=) "is_default" (issuing'cardCardholder'IsDefault obj) : (Data.Aeson..=) "livemode" (issuing'cardCardholder'Livemode obj) : (Data.Aeson..=) "metadata" (issuing'cardCardholder'Metadata obj) : (Data.Aeson..=) "name" (issuing'cardCardholder'Name obj) : (Data.Aeson..=) "object" (issuing'cardCardholder'Object obj) : (Data.Aeson..=) "phone_number" (issuing'cardCardholder'PhoneNumber obj) : (Data.Aeson..=) "requirements" (issuing'cardCardholder'Requirements obj) : (Data.Aeson..=) "status" (issuing'cardCardholder'Status obj) : (Data.Aeson..=) "type" (issuing'cardCardholder'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "authorization_controls" (issuing'cardCardholder'AuthorizationControls obj) GHC.Base.<> ((Data.Aeson..=) "billing" (issuing'cardCardholder'Billing obj) GHC.Base.<> ((Data.Aeson..=) "company" (issuing'cardCardholder'Company obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuing'cardCardholder'Created obj) GHC.Base.<> ((Data.Aeson..=) "email" (issuing'cardCardholder'Email obj) GHC.Base.<> ((Data.Aeson..=) "id" (issuing'cardCardholder'Id obj) GHC.Base.<> ((Data.Aeson..=) "individual" (issuing'cardCardholder'Individual obj) GHC.Base.<> ((Data.Aeson..=) "is_default" (issuing'cardCardholder'IsDefault obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (issuing'cardCardholder'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (issuing'cardCardholder'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "name" (issuing'cardCardholder'Name obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuing'cardCardholder'Object obj) GHC.Base.<> ((Data.Aeson..=) "phone_number" (issuing'cardCardholder'PhoneNumber obj) GHC.Base.<> ((Data.Aeson..=) "requirements" (issuing'cardCardholder'Requirements obj) GHC.Base.<> ((Data.Aeson..=) "status" (issuing'cardCardholder'Status obj) GHC.Base.<> (Data.Aeson..=) "type" (issuing'cardCardholder'Type obj))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardCardholder'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardCardholder'" (\obj -> (((((((((((((((GHC.Base.pure Issuing'cardCardholder' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorization_controls")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "individual")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "is_default")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
data Issuing'cardMetadata'
    = Issuing'cardMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardMetadata'" (\obj -> GHC.Base.pure Issuing'cardMetadata')
data Issuing'cardObject'
    = Issuing'cardObject'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardObject'EnumTyped GHC.Base.String
    | Issuing'cardObject'EnumStringIssuing'card
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardObject'
    where toJSON (Issuing'cardObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardObject'EnumStringIssuing'card) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.card"
instance Data.Aeson.FromJSON Issuing'cardObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.card")
                                          then Issuing'cardObject'EnumStringIssuing'card
                                          else Issuing'cardObject'EnumOther val)
data Issuing'cardPin'
    = Issuing'cardPin' {issuing'cardPin'Status :: (GHC.Maybe.Maybe Issuing'cardPin'Status')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardPin'Status'
    = Issuing'cardPin'Status'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardPin'Status'EnumTyped GHC.Base.String
    | Issuing'cardPin'Status'EnumStringActive
    | Issuing'cardPin'Status'EnumStringBlocked
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardPin'Status'
    where toJSON (Issuing'cardPin'Status'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardPin'Status'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardPin'Status'EnumStringActive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
          toJSON (Issuing'cardPin'Status'EnumStringBlocked) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blocked"
instance Data.Aeson.FromJSON Issuing'cardPin'Status'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
                                          then Issuing'cardPin'Status'EnumStringActive
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blocked")
                                                then Issuing'cardPin'Status'EnumStringBlocked
                                                else Issuing'cardPin'Status'EnumOther val)
instance Data.Aeson.ToJSON Issuing'cardPin'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "status" (issuing'cardPin'Status obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "status" (issuing'cardPin'Status obj))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardPin'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardPin'" (\obj -> GHC.Base.pure Issuing'cardPin' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
data Issuing'cardReplacementFor'Variants
    = Issuing'cardReplacementFor'Variant1 Issuing'card
    | Issuing'cardReplacementFor'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'cardReplacementFor'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'cardReplacementFor'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'cardReplacementReason'
    = Issuing'cardReplacementReason'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardReplacementReason'EnumTyped GHC.Base.String
    | Issuing'cardReplacementReason'EnumStringDamage
    | Issuing'cardReplacementReason'EnumStringExpiration
    | Issuing'cardReplacementReason'EnumStringLoss
    | Issuing'cardReplacementReason'EnumStringTheft
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardReplacementReason'
    where toJSON (Issuing'cardReplacementReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardReplacementReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardReplacementReason'EnumStringDamage) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "damage"
          toJSON (Issuing'cardReplacementReason'EnumStringExpiration) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "expiration"
          toJSON (Issuing'cardReplacementReason'EnumStringLoss) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "loss"
          toJSON (Issuing'cardReplacementReason'EnumStringTheft) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theft"
instance Data.Aeson.FromJSON Issuing'cardReplacementReason'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "damage")
                                          then Issuing'cardReplacementReason'EnumStringDamage
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "expiration")
                                                then Issuing'cardReplacementReason'EnumStringExpiration
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "loss")
                                                      then Issuing'cardReplacementReason'EnumStringLoss
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theft")
                                                            then Issuing'cardReplacementReason'EnumStringTheft
                                                            else Issuing'cardReplacementReason'EnumOther val)
data Issuing'cardShipping'
    = Issuing'cardShipping' {issuing'cardShipping'Address :: (GHC.Maybe.Maybe Address),
                             issuing'cardShipping'Carrier :: (GHC.Maybe.Maybe Issuing'cardShipping'Carrier'),
                             issuing'cardShipping'Eta :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             issuing'cardShipping'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                             issuing'cardShipping'Speed :: (GHC.Maybe.Maybe Issuing'cardShipping'Speed'),
                             issuing'cardShipping'Status :: (GHC.Maybe.Maybe Issuing'cardShipping'Status'),
                             issuing'cardShipping'TrackingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                             issuing'cardShipping'TrackingUrl :: (GHC.Maybe.Maybe GHC.Base.String),
                             issuing'cardShipping'Type :: (GHC.Maybe.Maybe Issuing'cardShipping'Type')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardShipping'Carrier'
    = Issuing'cardShipping'Carrier'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardShipping'Carrier'EnumTyped GHC.Base.String
    | Issuing'cardShipping'Carrier'EnumStringFedex
    | Issuing'cardShipping'Carrier'EnumStringUsps
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardShipping'Carrier'
    where toJSON (Issuing'cardShipping'Carrier'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardShipping'Carrier'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardShipping'Carrier'EnumStringFedex) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fedex"
          toJSON (Issuing'cardShipping'Carrier'EnumStringUsps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "usps"
instance Data.Aeson.FromJSON Issuing'cardShipping'Carrier'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fedex")
                                          then Issuing'cardShipping'Carrier'EnumStringFedex
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "usps")
                                                then Issuing'cardShipping'Carrier'EnumStringUsps
                                                else Issuing'cardShipping'Carrier'EnumOther val)
data Issuing'cardShipping'Speed'
    = Issuing'cardShipping'Speed'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardShipping'Speed'EnumTyped GHC.Base.String
    | Issuing'cardShipping'Speed'EnumStringExpress
    | Issuing'cardShipping'Speed'EnumStringOvernight
    | Issuing'cardShipping'Speed'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardShipping'Speed'
    where toJSON (Issuing'cardShipping'Speed'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardShipping'Speed'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardShipping'Speed'EnumStringExpress) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "express"
          toJSON (Issuing'cardShipping'Speed'EnumStringOvernight) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "overnight"
          toJSON (Issuing'cardShipping'Speed'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON Issuing'cardShipping'Speed'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "express")
                                          then Issuing'cardShipping'Speed'EnumStringExpress
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "overnight")
                                                then Issuing'cardShipping'Speed'EnumStringOvernight
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                      then Issuing'cardShipping'Speed'EnumStringStandard
                                                      else Issuing'cardShipping'Speed'EnumOther val)
data Issuing'cardShipping'Status'
    = Issuing'cardShipping'Status'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardShipping'Status'EnumTyped GHC.Base.String
    | Issuing'cardShipping'Status'EnumStringCanceled
    | Issuing'cardShipping'Status'EnumStringDelivered
    | Issuing'cardShipping'Status'EnumStringFailure
    | Issuing'cardShipping'Status'EnumStringPending
    | Issuing'cardShipping'Status'EnumStringReturned
    | Issuing'cardShipping'Status'EnumStringShipped
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardShipping'Status'
    where toJSON (Issuing'cardShipping'Status'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardShipping'Status'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardShipping'Status'EnumStringCanceled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled"
          toJSON (Issuing'cardShipping'Status'EnumStringDelivered) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "delivered"
          toJSON (Issuing'cardShipping'Status'EnumStringFailure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failure"
          toJSON (Issuing'cardShipping'Status'EnumStringPending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (Issuing'cardShipping'Status'EnumStringReturned) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "returned"
          toJSON (Issuing'cardShipping'Status'EnumStringShipped) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shipped"
instance Data.Aeson.FromJSON Issuing'cardShipping'Status'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled")
                                          then Issuing'cardShipping'Status'EnumStringCanceled
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "delivered")
                                                then Issuing'cardShipping'Status'EnumStringDelivered
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failure")
                                                      then Issuing'cardShipping'Status'EnumStringFailure
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                            then Issuing'cardShipping'Status'EnumStringPending
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "returned")
                                                                  then Issuing'cardShipping'Status'EnumStringReturned
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shipped")
                                                                        then Issuing'cardShipping'Status'EnumStringShipped
                                                                        else Issuing'cardShipping'Status'EnumOther val)
data Issuing'cardShipping'Type'
    = Issuing'cardShipping'Type'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardShipping'Type'EnumTyped GHC.Base.String
    | Issuing'cardShipping'Type'EnumStringBulk
    | Issuing'cardShipping'Type'EnumStringIndividual
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardShipping'Type'
    where toJSON (Issuing'cardShipping'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardShipping'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardShipping'Type'EnumStringBulk) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bulk"
          toJSON (Issuing'cardShipping'Type'EnumStringIndividual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual"
instance Data.Aeson.FromJSON Issuing'cardShipping'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bulk")
                                          then Issuing'cardShipping'Type'EnumStringBulk
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual")
                                                then Issuing'cardShipping'Type'EnumStringIndividual
                                                else Issuing'cardShipping'Type'EnumOther val)
instance Data.Aeson.ToJSON Issuing'cardShipping'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (issuing'cardShipping'Address obj) : (Data.Aeson..=) "carrier" (issuing'cardShipping'Carrier obj) : (Data.Aeson..=) "eta" (issuing'cardShipping'Eta obj) : (Data.Aeson..=) "name" (issuing'cardShipping'Name obj) : (Data.Aeson..=) "speed" (issuing'cardShipping'Speed obj) : (Data.Aeson..=) "status" (issuing'cardShipping'Status obj) : (Data.Aeson..=) "tracking_number" (issuing'cardShipping'TrackingNumber obj) : (Data.Aeson..=) "tracking_url" (issuing'cardShipping'TrackingUrl obj) : (Data.Aeson..=) "type" (issuing'cardShipping'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (issuing'cardShipping'Address obj) GHC.Base.<> ((Data.Aeson..=) "carrier" (issuing'cardShipping'Carrier obj) GHC.Base.<> ((Data.Aeson..=) "eta" (issuing'cardShipping'Eta obj) GHC.Base.<> ((Data.Aeson..=) "name" (issuing'cardShipping'Name obj) GHC.Base.<> ((Data.Aeson..=) "speed" (issuing'cardShipping'Speed obj) GHC.Base.<> ((Data.Aeson..=) "status" (issuing'cardShipping'Status obj) GHC.Base.<> ((Data.Aeson..=) "tracking_number" (issuing'cardShipping'TrackingNumber obj) GHC.Base.<> ((Data.Aeson..=) "tracking_url" (issuing'cardShipping'TrackingUrl obj) GHC.Base.<> (Data.Aeson..=) "type" (issuing'cardShipping'Type obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardShipping'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardShipping'" (\obj -> ((((((((GHC.Base.pure Issuing'cardShipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eta")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "speed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
data Issuing'cardStatus'
    = Issuing'cardStatus'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardStatus'EnumTyped GHC.Base.String
    | Issuing'cardStatus'EnumStringActive
    | Issuing'cardStatus'EnumStringCanceled
    | Issuing'cardStatus'EnumStringInactive
    | Issuing'cardStatus'EnumStringLost
    | Issuing'cardStatus'EnumStringStolen
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardStatus'
    where toJSON (Issuing'cardStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardStatus'EnumStringActive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
          toJSON (Issuing'cardStatus'EnumStringCanceled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled"
          toJSON (Issuing'cardStatus'EnumStringInactive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive"
          toJSON (Issuing'cardStatus'EnumStringLost) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lost"
          toJSON (Issuing'cardStatus'EnumStringStolen) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stolen"
instance Data.Aeson.FromJSON Issuing'cardStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
                                          then Issuing'cardStatus'EnumStringActive
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled")
                                                then Issuing'cardStatus'EnumStringCanceled
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive")
                                                      then Issuing'cardStatus'EnumStringInactive
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lost")
                                                            then Issuing'cardStatus'EnumStringLost
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stolen")
                                                                  then Issuing'cardStatus'EnumStringStolen
                                                                  else Issuing'cardStatus'EnumOther val)
data Issuing'cardType'
    = Issuing'cardType'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardType'EnumTyped GHC.Base.String
    | Issuing'cardType'EnumStringPhysical
    | Issuing'cardType'EnumStringVirtual
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardType'
    where toJSON (Issuing'cardType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardType'EnumStringPhysical) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "physical"
          toJSON (Issuing'cardType'EnumStringVirtual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "virtual"
instance Data.Aeson.FromJSON Issuing'cardType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "physical")
                                          then Issuing'cardType'EnumStringPhysical
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "virtual")
                                                then Issuing'cardType'EnumStringVirtual
                                                else Issuing'cardType'EnumOther val)
instance Data.Aeson.ToJSON Issuing'card
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "authorization_controls" (issuing'cardAuthorizationControls obj) : (Data.Aeson..=) "brand" (issuing'cardBrand obj) : (Data.Aeson..=) "cardholder" (issuing'cardCardholder obj) : (Data.Aeson..=) "created" (issuing'cardCreated obj) : (Data.Aeson..=) "currency" (issuing'cardCurrency obj) : (Data.Aeson..=) "exp_month" (issuing'cardExpMonth obj) : (Data.Aeson..=) "exp_year" (issuing'cardExpYear obj) : (Data.Aeson..=) "id" (issuing'cardId obj) : (Data.Aeson..=) "last4" (issuing'cardLast4 obj) : (Data.Aeson..=) "livemode" (issuing'cardLivemode obj) : (Data.Aeson..=) "metadata" (issuing'cardMetadata obj) : (Data.Aeson..=) "name" (issuing'cardName obj) : (Data.Aeson..=) "object" (issuing'cardObject obj) : (Data.Aeson..=) "pin" (issuing'cardPin obj) : (Data.Aeson..=) "replacement_for" (issuing'cardReplacementFor obj) : (Data.Aeson..=) "replacement_reason" (issuing'cardReplacementReason obj) : (Data.Aeson..=) "shipping" (issuing'cardShipping obj) : (Data.Aeson..=) "status" (issuing'cardStatus obj) : (Data.Aeson..=) "type" (issuing'cardType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "authorization_controls" (issuing'cardAuthorizationControls obj) GHC.Base.<> ((Data.Aeson..=) "brand" (issuing'cardBrand obj) GHC.Base.<> ((Data.Aeson..=) "cardholder" (issuing'cardCardholder obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuing'cardCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (issuing'cardCurrency obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (issuing'cardExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (issuing'cardExpYear obj) GHC.Base.<> ((Data.Aeson..=) "id" (issuing'cardId obj) GHC.Base.<> ((Data.Aeson..=) "last4" (issuing'cardLast4 obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (issuing'cardLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (issuing'cardMetadata obj) GHC.Base.<> ((Data.Aeson..=) "name" (issuing'cardName obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuing'cardObject obj) GHC.Base.<> ((Data.Aeson..=) "pin" (issuing'cardPin obj) GHC.Base.<> ((Data.Aeson..=) "replacement_for" (issuing'cardReplacementFor obj) GHC.Base.<> ((Data.Aeson..=) "replacement_reason" (issuing'cardReplacementReason obj) GHC.Base.<> ((Data.Aeson..=) "shipping" (issuing'cardShipping obj) GHC.Base.<> ((Data.Aeson..=) "status" (issuing'cardStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (issuing'cardType obj)))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'card
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'card" (\obj -> ((((((((((((((((((GHC.Base.pure Issuing'card GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_controls")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cardholder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pin")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "replacement_for")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "replacement_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data Issuing'cardDetails
    = Issuing'cardDetails {issuing'cardDetailsCard :: Issuing'card,
                           issuing'cardDetailsCvc :: GHC.Base.String,
                           issuing'cardDetailsExpMonth :: GHC.Integer.Type.Integer,
                           issuing'cardDetailsExpYear :: GHC.Integer.Type.Integer,
                           issuing'cardDetailsNumber :: GHC.Base.String,
                           issuing'cardDetailsObject :: Issuing'cardDetailsObject'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardDetailsObject'
    = Issuing'cardDetailsObject'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardDetailsObject'EnumTyped GHC.Base.String
    | Issuing'cardDetailsObject'EnumStringIssuing'cardDetails
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardDetailsObject'
    where toJSON (Issuing'cardDetailsObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardDetailsObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardDetailsObject'EnumStringIssuing'cardDetails) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.card_details"
instance Data.Aeson.FromJSON Issuing'cardDetailsObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.card_details")
                                          then Issuing'cardDetailsObject'EnumStringIssuing'cardDetails
                                          else Issuing'cardDetailsObject'EnumOther val)
instance Data.Aeson.ToJSON Issuing'cardDetails
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "card" (issuing'cardDetailsCard obj) : (Data.Aeson..=) "cvc" (issuing'cardDetailsCvc obj) : (Data.Aeson..=) "exp_month" (issuing'cardDetailsExpMonth obj) : (Data.Aeson..=) "exp_year" (issuing'cardDetailsExpYear obj) : (Data.Aeson..=) "number" (issuing'cardDetailsNumber obj) : (Data.Aeson..=) "object" (issuing'cardDetailsObject obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "card" (issuing'cardDetailsCard obj) GHC.Base.<> ((Data.Aeson..=) "cvc" (issuing'cardDetailsCvc obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (issuing'cardDetailsExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (issuing'cardDetailsExpYear obj) GHC.Base.<> ((Data.Aeson..=) "number" (issuing'cardDetailsNumber obj) GHC.Base.<> (Data.Aeson..=) "object" (issuing'cardDetailsObject obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardDetails
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardDetails" (\obj -> (((((GHC.Base.pure Issuing'cardDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cvc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object"))
data Issuing'cardPin
    = Issuing'cardPin {issuing'cardPinCard :: Issuing'card,
                       issuing'cardPinObject :: Issuing'cardPinObject',
                       issuing'cardPinPin :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardPinObject'
    = Issuing'cardPinObject'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardPinObject'EnumTyped GHC.Base.String
    | Issuing'cardPinObject'EnumStringIssuing'cardPin
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardPinObject'
    where toJSON (Issuing'cardPinObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardPinObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardPinObject'EnumStringIssuing'cardPin) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.card_pin"
instance Data.Aeson.FromJSON Issuing'cardPinObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.card_pin")
                                          then Issuing'cardPinObject'EnumStringIssuing'cardPin
                                          else Issuing'cardPinObject'EnumOther val)
instance Data.Aeson.ToJSON Issuing'cardPin
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "card" (issuing'cardPinCard obj) : (Data.Aeson..=) "object" (issuing'cardPinObject obj) : (Data.Aeson..=) "pin" (issuing'cardPinPin obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "card" (issuing'cardPinCard obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuing'cardPinObject obj) GHC.Base.<> (Data.Aeson..=) "pin" (issuing'cardPinPin obj)))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardPin
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardPin" (\obj -> ((GHC.Base.pure Issuing'cardPin GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pin"))
data Issuing'cardholder
    = Issuing'cardholder {issuing'cardholderAuthorizationControls :: (GHC.Maybe.Maybe Issuing'cardholderAuthorizationControls'),
                          issuing'cardholderBilling :: IssuingCardholderAddress,
                          issuing'cardholderCompany :: (GHC.Maybe.Maybe Issuing'cardholderCompany'),
                          issuing'cardholderCreated :: GHC.Integer.Type.Integer,
                          issuing'cardholderEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                          issuing'cardholderId :: GHC.Base.String,
                          issuing'cardholderIndividual :: (GHC.Maybe.Maybe Issuing'cardholderIndividual'),
                          issuing'cardholderIsDefault :: GHC.Types.Bool,
                          issuing'cardholderLivemode :: GHC.Types.Bool,
                          issuing'cardholderMetadata :: Issuing'cardholderMetadata',
                          issuing'cardholderName :: GHC.Base.String,
                          issuing'cardholderObject :: Issuing'cardholderObject',
                          issuing'cardholderPhoneNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                          issuing'cardholderRequirements :: IssuingCardholderRequirements,
                          issuing'cardholderStatus :: Issuing'cardholderStatus',
                          issuing'cardholderType :: Issuing'cardholderType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardholderAuthorizationControls'
    = Issuing'cardholderAuthorizationControls' {issuing'cardholderAuthorizationControls'AllowedCategories :: (GHC.Maybe.Maybe ([] Issuing'cardholderAuthorizationControls'AllowedCategories')),
                                                issuing'cardholderAuthorizationControls'BlockedCategories :: (GHC.Maybe.Maybe ([] Issuing'cardholderAuthorizationControls'BlockedCategories')),
                                                issuing'cardholderAuthorizationControls'SpendingLimits :: (GHC.Maybe.Maybe ([] IssuingCardholderSpendingLimit)),
                                                issuing'cardholderAuthorizationControls'SpendingLimitsCurrency :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardholderAuthorizationControls'AllowedCategories'
    = Issuing'cardholderAuthorizationControls'AllowedCategories'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumTyped GHC.Base.String
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAcRefrigerationRepair
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAccountingBookkeepingServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAdvertisingServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAgriculturalCooperative
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAirlinesAirCarriers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAirportsFlyingFields
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAmbulanceServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAmusementParksCarnivals
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAntiqueReproductions
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAntiqueShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAquariums
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringArchitecturalSurveyingServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringArtDealersAndGalleries
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringArtistsSupplyAndCraftShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoAndHomeSupplyStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoBodyRepairShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoPaintShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoServiceShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomatedCashDisburse
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomatedFuelDispensers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomobileAssociations
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomotivePartsAndAccessoriesStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomotiveTireStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBailAndBondPayments
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBakeries
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBandsOrchestras
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBarberAndBeautyShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBettingCasinoGambling
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBicycleShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBilliardPoolEstablishments
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBoatDealers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBoatRentalsAndLeases
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBookStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBooksPeriodicalsAndNewspapers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBowlingAlleys
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBusLines
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBusinessSecretarialSchools
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBuyingShoppingServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCameraAndPhotographicSupplyStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCandyNutAndConfectioneryStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersNewUsed
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersUsedOnly
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarRentalAgencies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarWashes
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarpentryServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarpetUpholsteryCleaning
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCaterers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChemicalsAndAlliedProducts
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChildCareServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChildrensAndInfantsWearStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChiropodistsPodiatrists
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChiropractors
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCigarStoresAndStands
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCivicSocialFraternalAssociations
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCleaningAndMaintenance
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringClothingRental
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCollegesUniversities
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommercialEquipment
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommercialFootwear
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommercialPhotographyArtAndGraphics
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommuterTransportAndFerries
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerNetworkServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerProgramming
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerRepair
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerSoftwareStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputersPeripheralsAndSoftware
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringConcreteWorkServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringConstructionMaterials
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringConsultingPublicRelations
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCorrespondenceSchools
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCosmeticStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCounselingServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCountryClubs
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCourierServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCourtCosts
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCreditReportingAgencies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCruiseLines
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDairyProductsStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDanceHallStudiosSchools
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDatingEscortServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDentistsOrthodontists
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDepartmentStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDetectiveAgencies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsApplications
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsGames
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsLargeVolume
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsMedia
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingCatalogMerchant
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingInboundTelemarketing
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingInsuranceServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingOther
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingOutboundTelemarketing
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingSubscription
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingTravel
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDiscountStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDoctors
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDoorToDoorSales
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDrinkingPlaces
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDrugStoresAndPharmacies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDryCleaners
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDurableGoods
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDutyFreeStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEatingPlacesRestaurants
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEducationalServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectricRazorStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectricalPartsAndEquipment
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectricalServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectronicsRepairShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectronicsStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElementarySecondarySchools
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEmploymentTempAgencies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEquipmentRental
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringExterminatingServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFamilyClothingStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFastFoodRestaurants
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFinancialInstitutions
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFinesGovernmentAdministrativeEntities
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFloorCoveringStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFlorists
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFreezerAndLockerMeatProvisioners
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFuelDealersNonAutomotive
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFuneralServicesCrematories
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFurnitureRepairRefinishing
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFurriersAndFurShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGeneralServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGiftCardNoveltyAndSouvenirShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGlassPaintAndWallpaperStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGlasswareCrystalStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGolfCoursesPublic
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGovernmentServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGroceryStoresSupermarkets
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHardwareEquipmentAndSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHardwareStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHealthAndBeautySpas
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHearingAidsSalesAndSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHeatingPlumbingAC
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHobbyToyAndGameShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHomeSupplyWarehouseStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHospitals
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHotelsMotelsAndResorts
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHouseholdApplianceStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringIndustrialSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringInformationRetrievalServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringInsuranceDefault
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringInsuranceUnderwritingPremiums
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringIntraCompanyPurchases
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLandscapingServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLaundries
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLaundryCleaningServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLegalServicesAttorneys
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLuggageAndLeatherGoodsStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLumberBuildingMaterialsStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringManualCashDisburse
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMarinasServiceAndSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMasonryStoneworkAndPlaster
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMassageParlors
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMedicalAndDentalLabs
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMedicalServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMembershipOrganizations
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMensWomensClothingStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMetalServiceCenters
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneous
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousApparelAndAccessoryShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousAutoDealers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousBusinessServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousFoodStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralMerchandise
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousPublishingAndPrinting
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousRecreationServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousRepairShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousSpecialtyRetail
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMobileHomeDealers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotionPictureTheaters
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorFreightCarriersAndTrucking
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorHomesDealers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorVehicleSuppliesAndNewParts
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsAndDealers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsDealers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNewsDealersAndNewsstands
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNonFiMoneyOrders
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNonFiStoredValueCardPurchaseLoad
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNondurableGoods
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNurseriesLawnAndGardenSupplyStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNursingPersonalCare
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOfficeAndCommercialFurniture
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOpticiansEyeglasses
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOptometristsOphthalmologist
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOrthopedicGoodsProstheticDevices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOsteopaths
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPackageStoresBeerWineAndLiquor
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPaintsVarnishesAndSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringParkingLotsGarages
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPassengerRailways
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPawnShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPetShopsPetFoodAndSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPetroleumAndPetroleumProducts
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPhotoDeveloping
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPhotographicStudios
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPictureVideoProduction
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPoliticalOrganizations
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPostalServicesGovernmentOnly
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringProfessionalServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPublicWarehousingAndStorage
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringQuickCopyReproAndBlueprint
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRailroads
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRealEstateAgentsAndManagersRentals
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRecordStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRecreationalVehicleRentals
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringReligiousGoodsStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringReligiousOrganizations
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRoofingSidingSheetMetal
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSecretarialSupportServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSecurityBrokersDealers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringServiceStations
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringShoeRepairHatCleaning
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringShoeStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSmallApplianceRepair
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSnowmobileDealers
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSpecialTradeServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSpecialtyCleaning
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportingGoodsStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportingRecreationCamps
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportsAndRidingApparelStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportsClubsFields
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringStampAndCoinStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSwimmingPoolsSales
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTUiTravelGermany
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTailorsAlterations
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTaxPaymentsGovernmentAgencies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTaxPreparationServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTaxicabsLimousines
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTelecommunicationServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTelegraphServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTentAndAwningShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTestingLaboratories
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTheatricalTicketAgencies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTimeshares
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTireRetreadingAndRepair
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTollsBridgeFees
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTouristAttractionsAndExhibits
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTowingServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTrailerParksCampgrounds
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTransportationServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTravelAgenciesTourOperators
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTruckStopIteration
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTruckUtilityTrailerRentals
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTypesettingPlateMakingAndRelatedServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTypewriterStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUniformsCommercialClothing
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUsedMerchandiseAndSecondhandStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUtilities
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVarietyStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVeterinaryServices
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVideoAmusementGameSupplies
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVideoGameArcades
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVideoTapeRentalStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVocationalTradeSchools
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWatchJewelryRepair
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWeldingRepair
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWholesaleClubs
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWigAndToupeeStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWiresMoneyOrders
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWomensAccessoryAndSpecialtyShops
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWomensReadyToWearStores
    | Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWreckingAndSalvageYards
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardholderAuthorizationControls'AllowedCategories'
    where toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAcRefrigerationRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ac_refrigeration_repair"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAccountingBookkeepingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accounting_bookkeeping_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAdvertisingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advertising_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAgriculturalCooperative) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "agricultural_cooperative"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAirlinesAirCarriers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airlines_air_carriers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAirportsFlyingFields) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airports_flying_fields"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAmbulanceServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ambulance_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAmusementParksCarnivals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amusement_parks_carnivals"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAntiqueReproductions) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_reproductions"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAntiqueShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAquariums) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "aquariums"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringArchitecturalSurveyingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "architectural_surveying_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringArtDealersAndGalleries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "art_dealers_and_galleries"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringArtistsSupplyAndCraftShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "artists_supply_and_craft_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoAndHomeSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_and_home_supply_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoBodyRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_body_repair_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoPaintShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_paint_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoServiceShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_service_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomatedCashDisburse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_cash_disburse"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomatedFuelDispensers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_fuel_dispensers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomobileAssociations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automobile_associations"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomotivePartsAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_parts_and_accessories_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomotiveTireStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_tire_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBailAndBondPayments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bail_and_bond_payments"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBakeries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bakeries"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBandsOrchestras) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bands_orchestras"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBarberAndBeautyShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "barber_and_beauty_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBettingCasinoGambling) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "betting_casino_gambling"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBicycleShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bicycle_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBilliardPoolEstablishments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "billiard_pool_establishments"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBoatDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBoatRentalsAndLeases) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_rentals_and_leases"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBookStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBooksPeriodicalsAndNewspapers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "books_periodicals_and_newspapers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBowlingAlleys) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bowling_alleys"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBusLines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bus_lines"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBusinessSecretarialSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_secretarial_schools"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBuyingShoppingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "buying_shopping_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cable_satellite_and_other_pay_television_and_radio"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCameraAndPhotographicSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "camera_and_photographic_supply_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCandyNutAndConfectioneryStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "candy_nut_and_confectionery_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersNewUsed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_new_used"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersUsedOnly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_used_only"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarRentalAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_rental_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarWashes) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_washes"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarpentryServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpentry_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarpetUpholsteryCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpet_upholstery_cleaning"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCaterers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "caterers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charitable_and_social_service_organizations_fundraising"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChemicalsAndAlliedProducts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chemicals_and_allied_products"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChildCareServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "child_care_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChildrensAndInfantsWearStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "childrens_and_infants_wear_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChiropodistsPodiatrists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropodists_podiatrists"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChiropractors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropractors"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCigarStoresAndStands) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cigar_stores_and_stands"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCivicSocialFraternalAssociations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "civic_social_fraternal_associations"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCleaningAndMaintenance) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cleaning_and_maintenance"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringClothingRental) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "clothing_rental"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCollegesUniversities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "colleges_universities"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommercialEquipment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_equipment"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommercialFootwear) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_footwear"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommercialPhotographyArtAndGraphics) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_photography_art_and_graphics"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommuterTransportAndFerries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commuter_transport_and_ferries"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerNetworkServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_network_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerProgramming) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_programming"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_repair"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerSoftwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_software_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputersPeripheralsAndSoftware) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computers_peripherals_and_software"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringConcreteWorkServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "concrete_work_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringConstructionMaterials) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "construction_materials"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringConsultingPublicRelations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "consulting_public_relations"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCorrespondenceSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "correspondence_schools"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCosmeticStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cosmetic_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCounselingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "counseling_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCountryClubs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "country_clubs"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCourierServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "courier_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCourtCosts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "court_costs"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCreditReportingAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_reporting_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCruiseLines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cruise_lines"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDairyProductsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dairy_products_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDanceHallStudiosSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dance_hall_studios_schools"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDatingEscortServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dating_escort_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDentistsOrthodontists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dentists_orthodontists"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDepartmentStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "department_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDetectiveAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "detective_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsApplications) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_applications"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsGames) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_games"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsLargeVolume) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_large_volume"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsMedia) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_media"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingCatalogMerchant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_catalog_merchant"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_combination_catalog_and_retail_merchant"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingInboundTelemarketing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_inbound_telemarketing"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingInsuranceServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_insurance_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingOther) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_other"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingOutboundTelemarketing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_outbound_telemarketing"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingSubscription) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_subscription"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingTravel) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_travel"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDiscountStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDoctors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "doctors"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDoorToDoorSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "door_to_door_sales"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drapery_window_covering_and_upholstery_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDrinkingPlaces) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drinking_places"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDrugStoresAndPharmacies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drug_stores_and_pharmacies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drugs_drug_proprietaries_and_druggist_sundries"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDryCleaners) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dry_cleaners"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDurableGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "durable_goods"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDutyFreeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duty_free_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEatingPlacesRestaurants) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eating_places_restaurants"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEducationalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "educational_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectricRazorStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electric_razor_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectricalPartsAndEquipment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_parts_and_equipment"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectricalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectronicsRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_repair_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectronicsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElementarySecondarySchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "elementary_secondary_schools"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEmploymentTempAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "employment_temp_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEquipmentRental) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "equipment_rental"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringExterminatingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exterminating_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFamilyClothingStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "family_clothing_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFastFoodRestaurants) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fast_food_restaurants"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFinancialInstitutions) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "financial_institutions"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFinesGovernmentAdministrativeEntities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fines_government_administrative_entities"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fireplace_fireplace_screens_and_accessories_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFloorCoveringStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "floor_covering_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFlorists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists_supplies_nursery_stock_and_flowers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFreezerAndLockerMeatProvisioners) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freezer_and_locker_meat_provisioners"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFuelDealersNonAutomotive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fuel_dealers_non_automotive"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFuneralServicesCrematories) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "funeral_services_crematories"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_home_furnishings_and_equipment_stores_except_appliances"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFurnitureRepairRefinishing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_repair_refinishing"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFurriersAndFurShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furriers_and_fur_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGeneralServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "general_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGiftCardNoveltyAndSouvenirShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gift_card_novelty_and_souvenir_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGlassPaintAndWallpaperStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glass_paint_and_wallpaper_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGlasswareCrystalStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glassware_crystal_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGolfCoursesPublic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "golf_courses_public"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGovernmentServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGroceryStoresSupermarkets) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "grocery_stores_supermarkets"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHardwareEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_equipment_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHardwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHealthAndBeautySpas) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "health_and_beauty_spas"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHearingAidsSalesAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hearing_aids_sales_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHeatingPlumbingAC) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "heating_plumbing_a_c"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHobbyToyAndGameShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hobby_toy_and_game_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHomeSupplyWarehouseStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "home_supply_warehouse_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHospitals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hospitals"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHotelsMotelsAndResorts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hotels_motels_and_resorts"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHouseholdApplianceStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "household_appliance_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringIndustrialSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "industrial_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringInformationRetrievalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "information_retrieval_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringInsuranceDefault) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_default"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringInsuranceUnderwritingPremiums) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_underwriting_premiums"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringIntraCompanyPurchases) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "intra_company_purchases"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jewelry_stores_watches_clocks_and_silverware_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLandscapingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "landscaping_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLaundries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundries"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLaundryCleaningServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundry_cleaning_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLegalServicesAttorneys) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legal_services_attorneys"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLuggageAndLeatherGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "luggage_and_leather_goods_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLumberBuildingMaterialsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lumber_building_materials_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringManualCashDisburse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual_cash_disburse"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMarinasServiceAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "marinas_service_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMasonryStoneworkAndPlaster) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masonry_stonework_and_plaster"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMassageParlors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "massage_parlors"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMedicalAndDentalLabs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_and_dental_labs"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMedicalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMembershipOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "membership_organizations"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_and_boys_clothing_and_accessories_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMensWomensClothingStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_womens_clothing_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMetalServiceCenters) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metal_service_centers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneous) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousApparelAndAccessoryShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_apparel_and_accessory_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousAutoDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_auto_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousBusinessServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_business_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousFoodStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_food_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralMerchandise) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_merchandise"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_home_furnishing_specialty_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousPublishingAndPrinting) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_publishing_and_printing"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousRecreationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_recreation_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_repair_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousSpecialtyRetail) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_specialty_retail"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMobileHomeDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mobile_home_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotionPictureTheaters) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motion_picture_theaters"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorFreightCarriersAndTrucking) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_freight_carriers_and_trucking"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorHomesDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_homes_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorVehicleSuppliesAndNewParts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_vehicle_supplies_and_new_parts"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsAndDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_and_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "music_stores_musical_instruments_pianos_and_sheet_music"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNewsDealersAndNewsstands) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "news_dealers_and_newsstands"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNonFiMoneyOrders) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_money_orders"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNonFiStoredValueCardPurchaseLoad) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_stored_value_card_purchase_load"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNondurableGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nondurable_goods"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNurseriesLawnAndGardenSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nurseries_lawn_and_garden_supply_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNursingPersonalCare) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nursing_personal_care"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOfficeAndCommercialFurniture) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "office_and_commercial_furniture"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOpticiansEyeglasses) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "opticians_eyeglasses"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOptometristsOphthalmologist) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "optometrists_ophthalmologist"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOrthopedicGoodsProstheticDevices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "orthopedic_goods_prosthetic_devices"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOsteopaths) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "osteopaths"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPackageStoresBeerWineAndLiquor) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "package_stores_beer_wine_and_liquor"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPaintsVarnishesAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paints_varnishes_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringParkingLotsGarages) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "parking_lots_garages"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPassengerRailways) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "passenger_railways"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPawnShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pawn_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPetShopsPetFoodAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pet_shops_pet_food_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPetroleumAndPetroleumProducts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "petroleum_and_petroleum_products"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPhotoDeveloping) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photo_developing"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_photocopy_microfilm_equipment_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPhotographicStudios) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_studios"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPictureVideoProduction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "picture_video_production"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "piece_goods_notions_and_other_dry_goods"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plumbing_heating_equipment_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPoliticalOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "political_organizations"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPostalServicesGovernmentOnly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "postal_services_government_only"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "precious_stones_and_metals_watches_and_jewelry"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringProfessionalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "professional_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPublicWarehousingAndStorage) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_warehousing_and_storage"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringQuickCopyReproAndBlueprint) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "quick_copy_repro_and_blueprint"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRailroads) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "railroads"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRealEstateAgentsAndManagersRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "real_estate_agents_and_managers_rentals"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRecordStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "record_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRecreationalVehicleRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recreational_vehicle_rentals"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringReligiousGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_goods_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringReligiousOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_organizations"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRoofingSidingSheetMetal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roofing_siding_sheet_metal"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSecretarialSupportServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "secretarial_support_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSecurityBrokersDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "security_brokers_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringServiceStations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service_stations"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sewing_needlework_fabric_and_piece_goods_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringShoeRepairHatCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_repair_hat_cleaning"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringShoeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSmallApplianceRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "small_appliance_repair"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSnowmobileDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snowmobile_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSpecialTradeServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "special_trade_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSpecialtyCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "specialty_cleaning"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportingGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_goods_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportingRecreationCamps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_recreation_camps"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportsAndRidingApparelStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_and_riding_apparel_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportsClubsFields) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_clubs_fields"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringStampAndCoinStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stamp_and_coin_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationary_office_supplies_printing_and_writing_paper"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationery_stores_office_and_school_supply_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSwimmingPoolsSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swimming_pools_sales"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTUiTravelGermany) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "t_ui_travel_germany"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTailorsAlterations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tailors_alterations"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTaxPaymentsGovernmentAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_payments_government_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTaxPreparationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_preparation_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTaxicabsLimousines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "taxicabs_limousines"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_equipment_and_telephone_sales"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTelecommunicationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTelegraphServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telegraph_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTentAndAwningShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tent_and_awning_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTestingLaboratories) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "testing_laboratories"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTheatricalTicketAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theatrical_ticket_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTimeshares) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "timeshares"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTireRetreadingAndRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tire_retreading_and_repair"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTollsBridgeFees) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tolls_bridge_fees"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTouristAttractionsAndExhibits) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tourist_attractions_and_exhibits"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTowingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "towing_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTrailerParksCampgrounds) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trailer_parks_campgrounds"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTransportationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transportation_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTravelAgenciesTourOperators) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "travel_agencies_tour_operators"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTruckStopIteration) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_stop_iteration"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTruckUtilityTrailerRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_utility_trailer_rentals"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTypesettingPlateMakingAndRelatedServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typesetting_plate_making_and_related_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTypewriterStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typewriter_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "u_s_federal_government_agencies_or_departments"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUniformsCommercialClothing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uniforms_commercial_clothing"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUsedMerchandiseAndSecondhandStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "used_merchandise_and_secondhand_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUtilities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "utilities"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVarietyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "variety_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVeterinaryServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "veterinary_services"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVideoAmusementGameSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_amusement_game_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVideoGameArcades) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_game_arcades"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVideoTapeRentalStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_tape_rental_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVocationalTradeSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vocational_trade_schools"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWatchJewelryRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "watch_jewelry_repair"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWeldingRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "welding_repair"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWholesaleClubs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wholesale_clubs"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWigAndToupeeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wig_and_toupee_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWiresMoneyOrders) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wires_money_orders"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWomensAccessoryAndSpecialtyShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_accessory_and_specialty_shops"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWomensReadyToWearStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_ready_to_wear_stores"
          toJSON (Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWreckingAndSalvageYards) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wrecking_and_salvage_yards"
instance Data.Aeson.FromJSON Issuing'cardholderAuthorizationControls'AllowedCategories'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ac_refrigeration_repair")
                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAcRefrigerationRepair
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accounting_bookkeeping_services")
                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAccountingBookkeepingServices
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advertising_services")
                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAdvertisingServices
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "agricultural_cooperative")
                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAgriculturalCooperative
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airlines_air_carriers")
                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAirlinesAirCarriers
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airports_flying_fields")
                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAirportsFlyingFields
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ambulance_services")
                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAmbulanceServices
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amusement_parks_carnivals")
                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAmusementParksCarnivals
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_reproductions")
                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAntiqueReproductions
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_shops")
                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAntiqueShops
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "aquariums")
                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAquariums
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "architectural_surveying_services")
                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringArchitecturalSurveyingServices
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "art_dealers_and_galleries")
                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringArtDealersAndGalleries
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "artists_supply_and_craft_shops")
                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringArtistsSupplyAndCraftShops
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_and_home_supply_stores")
                                                                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoAndHomeSupplyStores
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_body_repair_shops")
                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoBodyRepairShops
                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_paint_shops")
                                                                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoPaintShops
                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_service_shops")
                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutoServiceShops
                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_cash_disburse")
                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomatedCashDisburse
                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_fuel_dispensers")
                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomatedFuelDispensers
                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automobile_associations")
                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomobileAssociations
                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_parts_and_accessories_stores")
                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomotivePartsAndAccessoriesStores
                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_tire_stores")
                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringAutomotiveTireStores
                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bail_and_bond_payments")
                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBailAndBondPayments
                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bakeries")
                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBakeries
                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bands_orchestras")
                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBandsOrchestras
                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "barber_and_beauty_shops")
                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBarberAndBeautyShops
                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "betting_casino_gambling")
                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBettingCasinoGambling
                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bicycle_shops")
                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBicycleShops
                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "billiard_pool_establishments")
                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBilliardPoolEstablishments
                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_dealers")
                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBoatDealers
                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_rentals_and_leases")
                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBoatRentalsAndLeases
                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book_stores")
                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBookStores
                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "books_periodicals_and_newspapers")
                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBooksPeriodicalsAndNewspapers
                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bowling_alleys")
                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBowlingAlleys
                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bus_lines")
                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBusLines
                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_secretarial_schools")
                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBusinessSecretarialSchools
                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "buying_shopping_services")
                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringBuyingShoppingServices
                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cable_satellite_and_other_pay_television_and_radio")
                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio
                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "camera_and_photographic_supply_stores")
                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCameraAndPhotographicSupplyStores
                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "candy_nut_and_confectionery_stores")
                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCandyNutAndConfectioneryStores
                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_new_used")
                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersNewUsed
                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_used_only")
                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarAndTruckDealersUsedOnly
                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_rental_agencies")
                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarRentalAgencies
                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_washes")
                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarWashes
                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpentry_services")
                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarpentryServices
                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpet_upholstery_cleaning")
                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCarpetUpholsteryCleaning
                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "caterers")
                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCaterers
                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charitable_and_social_service_organizations_fundraising")
                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising
                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chemicals_and_allied_products")
                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChemicalsAndAlliedProducts
                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "child_care_services")
                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChildCareServices
                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "childrens_and_infants_wear_stores")
                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChildrensAndInfantsWearStores
                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropodists_podiatrists")
                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChiropodistsPodiatrists
                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropractors")
                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringChiropractors
                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cigar_stores_and_stands")
                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCigarStoresAndStands
                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "civic_social_fraternal_associations")
                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCivicSocialFraternalAssociations
                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cleaning_and_maintenance")
                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCleaningAndMaintenance
                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "clothing_rental")
                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringClothingRental
                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "colleges_universities")
                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCollegesUniversities
                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_equipment")
                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommercialEquipment
                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_footwear")
                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommercialFootwear
                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_photography_art_and_graphics")
                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommercialPhotographyArtAndGraphics
                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commuter_transport_and_ferries")
                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCommuterTransportAndFerries
                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_network_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerNetworkServices
                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_programming")
                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerProgramming
                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_repair")
                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerRepair
                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_software_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputerSoftwareStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computers_peripherals_and_software")
                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringComputersPeripheralsAndSoftware
                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "concrete_work_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringConcreteWorkServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "construction_materials")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringConstructionMaterials
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "consulting_public_relations")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringConsultingPublicRelations
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "correspondence_schools")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCorrespondenceSchools
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cosmetic_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCosmeticStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "counseling_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCounselingServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "country_clubs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCountryClubs
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "courier_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCourierServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "court_costs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCourtCosts
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_reporting_agencies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCreditReportingAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cruise_lines")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringCruiseLines
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dairy_products_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDairyProductsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dance_hall_studios_schools")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDanceHallStudiosSchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dating_escort_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDatingEscortServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dentists_orthodontists")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDentistsOrthodontists
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "department_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDepartmentStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "detective_agencies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDetectiveAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_applications")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsApplications
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_games")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsGames
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_large_volume")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsLargeVolume
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_media")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDigitalGoodsMedia
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_catalog_merchant")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingCatalogMerchant
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_combination_catalog_and_retail_merchant")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_inbound_telemarketing")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingInboundTelemarketing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_insurance_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingInsuranceServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_other")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingOther
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_outbound_telemarketing")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingOutboundTelemarketing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_subscription")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingSubscription
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_travel")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDirectMarketingTravel
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDiscountStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "doctors")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDoctors
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "door_to_door_sales")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDoorToDoorSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drapery_window_covering_and_upholstery_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drinking_places")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDrinkingPlaces
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drug_stores_and_pharmacies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDrugStoresAndPharmacies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drugs_drug_proprietaries_and_druggist_sundries")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dry_cleaners")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDryCleaners
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "durable_goods")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDurableGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duty_free_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringDutyFreeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eating_places_restaurants")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEatingPlacesRestaurants
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "educational_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEducationalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electric_razor_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectricRazorStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_parts_and_equipment")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectricalPartsAndEquipment
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectricalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_repair_shops")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectronicsRepairShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElectronicsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "elementary_secondary_schools")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringElementarySecondarySchools
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "employment_temp_agencies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEmploymentTempAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "equipment_rental")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringEquipmentRental
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exterminating_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringExterminatingServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "family_clothing_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFamilyClothingStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fast_food_restaurants")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFastFoodRestaurants
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "financial_institutions")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFinancialInstitutions
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fines_government_administrative_entities")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFinesGovernmentAdministrativeEntities
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fireplace_fireplace_screens_and_accessories_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "floor_covering_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFloorCoveringStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFlorists
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists_supplies_nursery_stock_and_flowers")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freezer_and_locker_meat_provisioners")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFreezerAndLockerMeatProvisioners
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fuel_dealers_non_automotive")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFuelDealersNonAutomotive
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "funeral_services_crematories")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFuneralServicesCrematories
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_home_furnishings_and_equipment_stores_except_appliances")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_repair_refinishing")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFurnitureRepairRefinishing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furriers_and_fur_shops")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringFurriersAndFurShops
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "general_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGeneralServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gift_card_novelty_and_souvenir_shops")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGiftCardNoveltyAndSouvenirShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glass_paint_and_wallpaper_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGlassPaintAndWallpaperStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glassware_crystal_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGlasswareCrystalStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "golf_courses_public")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGolfCoursesPublic
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGovernmentServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "grocery_stores_supermarkets")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringGroceryStoresSupermarkets
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_equipment_and_supplies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHardwareEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHardwareStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "health_and_beauty_spas")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHealthAndBeautySpas
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hearing_aids_sales_and_supplies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHearingAidsSalesAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "heating_plumbing_a_c")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHeatingPlumbingAC
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hobby_toy_and_game_shops")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHobbyToyAndGameShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "home_supply_warehouse_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHomeSupplyWarehouseStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hospitals")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHospitals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hotels_motels_and_resorts")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHotelsMotelsAndResorts
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "household_appliance_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringHouseholdApplianceStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "industrial_supplies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringIndustrialSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "information_retrieval_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringInformationRetrievalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_default")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringInsuranceDefault
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_underwriting_premiums")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringInsuranceUnderwritingPremiums
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "intra_company_purchases")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringIntraCompanyPurchases
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jewelry_stores_watches_clocks_and_silverware_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "landscaping_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLandscapingServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundries")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLaundries
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundry_cleaning_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLaundryCleaningServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legal_services_attorneys")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLegalServicesAttorneys
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "luggage_and_leather_goods_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLuggageAndLeatherGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lumber_building_materials_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringLumberBuildingMaterialsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual_cash_disburse")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringManualCashDisburse
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "marinas_service_and_supplies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMarinasServiceAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masonry_stonework_and_plaster")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMasonryStoneworkAndPlaster
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "massage_parlors")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMassageParlors
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_and_dental_labs")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMedicalAndDentalLabs
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_dental_ophthalmic_and_hospital_equipment_and_supplies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMedicalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "membership_organizations")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMembershipOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_and_boys_clothing_and_accessories_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_womens_clothing_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMensWomensClothingStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metal_service_centers")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMetalServiceCenters
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneous
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_apparel_and_accessory_shops")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousApparelAndAccessoryShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_auto_dealers")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousAutoDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_business_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousBusinessServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_food_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousFoodStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_merchandise")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralMerchandise
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousGeneralServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_home_furnishing_specialty_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_publishing_and_printing")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousPublishingAndPrinting
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_recreation_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousRecreationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_repair_shops")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousRepairShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_specialty_retail")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMiscellaneousSpecialtyRetail
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mobile_home_dealers")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMobileHomeDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motion_picture_theaters")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotionPictureTheaters
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_freight_carriers_and_trucking")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorFreightCarriersAndTrucking
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_homes_dealers")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorHomesDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_vehicle_supplies_and_new_parts")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorVehicleSuppliesAndNewParts
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_and_dealers")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsAndDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_dealers")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMotorcycleShopsDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "music_stores_musical_instruments_pianos_and_sheet_music")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "news_dealers_and_newsstands")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNewsDealersAndNewsstands
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_money_orders")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNonFiMoneyOrders
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_stored_value_card_purchase_load")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNonFiStoredValueCardPurchaseLoad
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nondurable_goods")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNondurableGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nurseries_lawn_and_garden_supply_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNurseriesLawnAndGardenSupplyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nursing_personal_care")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringNursingPersonalCare
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "office_and_commercial_furniture")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOfficeAndCommercialFurniture
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "opticians_eyeglasses")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOpticiansEyeglasses
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "optometrists_ophthalmologist")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOptometristsOphthalmologist
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "orthopedic_goods_prosthetic_devices")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOrthopedicGoodsProstheticDevices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "osteopaths")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringOsteopaths
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "package_stores_beer_wine_and_liquor")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPackageStoresBeerWineAndLiquor
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paints_varnishes_and_supplies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPaintsVarnishesAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "parking_lots_garages")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringParkingLotsGarages
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "passenger_railways")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPassengerRailways
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pawn_shops")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPawnShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pet_shops_pet_food_and_supplies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPetShopsPetFoodAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "petroleum_and_petroleum_products")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPetroleumAndPetroleumProducts
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photo_developing")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPhotoDeveloping
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_photocopy_microfilm_equipment_and_supplies")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_studios")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPhotographicStudios
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "picture_video_production")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPictureVideoProduction
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "piece_goods_notions_and_other_dry_goods")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plumbing_heating_equipment_and_supplies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "political_organizations")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPoliticalOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "postal_services_government_only")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPostalServicesGovernmentOnly
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "precious_stones_and_metals_watches_and_jewelry")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "professional_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringProfessionalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_warehousing_and_storage")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringPublicWarehousingAndStorage
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "quick_copy_repro_and_blueprint")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringQuickCopyReproAndBlueprint
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "railroads")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRailroads
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "real_estate_agents_and_managers_rentals")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRealEstateAgentsAndManagersRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "record_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRecordStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recreational_vehicle_rentals")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRecreationalVehicleRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_goods_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringReligiousGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_organizations")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringReligiousOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roofing_siding_sheet_metal")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringRoofingSidingSheetMetal
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "secretarial_support_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSecretarialSupportServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "security_brokers_dealers")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSecurityBrokersDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service_stations")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringServiceStations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sewing_needlework_fabric_and_piece_goods_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_repair_hat_cleaning")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringShoeRepairHatCleaning
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringShoeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "small_appliance_repair")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSmallApplianceRepair
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snowmobile_dealers")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSnowmobileDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "special_trade_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSpecialTradeServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "specialty_cleaning")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSpecialtyCleaning
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_goods_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportingGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_recreation_camps")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportingRecreationCamps
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_and_riding_apparel_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportsAndRidingApparelStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_clubs_fields")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSportsClubsFields
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stamp_and_coin_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringStampAndCoinStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationary_office_supplies_printing_and_writing_paper")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationery_stores_office_and_school_supply_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swimming_pools_sales")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringSwimmingPoolsSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "t_ui_travel_germany")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTUiTravelGermany
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tailors_alterations")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTailorsAlterations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_payments_government_agencies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTaxPaymentsGovernmentAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_preparation_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTaxPreparationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "taxicabs_limousines")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTaxicabsLimousines
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_equipment_and_telephone_sales")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTelecommunicationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telegraph_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTelegraphServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tent_and_awning_shops")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTentAndAwningShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "testing_laboratories")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTestingLaboratories
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theatrical_ticket_agencies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTheatricalTicketAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "timeshares")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTimeshares
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tire_retreading_and_repair")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTireRetreadingAndRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tolls_bridge_fees")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTollsBridgeFees
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tourist_attractions_and_exhibits")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTouristAttractionsAndExhibits
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "towing_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTowingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trailer_parks_campgrounds")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTrailerParksCampgrounds
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transportation_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTransportationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "travel_agencies_tour_operators")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTravelAgenciesTourOperators
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_stop_iteration")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTruckStopIteration
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_utility_trailer_rentals")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTruckUtilityTrailerRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typesetting_plate_making_and_related_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTypesettingPlateMakingAndRelatedServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typewriter_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringTypewriterStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "u_s_federal_government_agencies_or_departments")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uniforms_commercial_clothing")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUniformsCommercialClothing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "used_merchandise_and_secondhand_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUsedMerchandiseAndSecondhandStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "utilities")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringUtilities
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "variety_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVarietyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "veterinary_services")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVeterinaryServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_amusement_game_supplies")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVideoAmusementGameSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_game_arcades")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVideoGameArcades
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_tape_rental_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVideoTapeRentalStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vocational_trade_schools")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringVocationalTradeSchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "watch_jewelry_repair")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWatchJewelryRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "welding_repair")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWeldingRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wholesale_clubs")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWholesaleClubs
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wig_and_toupee_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWigAndToupeeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wires_money_orders")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWiresMoneyOrders
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_accessory_and_specialty_shops")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWomensAccessoryAndSpecialtyShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_ready_to_wear_stores")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWomensReadyToWearStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wrecking_and_salvage_yards")
then Issuing'cardholderAuthorizationControls'AllowedCategories'EnumStringWreckingAndSalvageYards
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else Issuing'cardholderAuthorizationControls'AllowedCategories'EnumOther val)
data Issuing'cardholderAuthorizationControls'BlockedCategories'
    = Issuing'cardholderAuthorizationControls'BlockedCategories'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumTyped GHC.Base.String
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAcRefrigerationRepair
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAccountingBookkeepingServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAdvertisingServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAgriculturalCooperative
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAirlinesAirCarriers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAirportsFlyingFields
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAmbulanceServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAmusementParksCarnivals
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAntiqueReproductions
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAntiqueShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAquariums
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringArchitecturalSurveyingServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringArtDealersAndGalleries
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringArtistsSupplyAndCraftShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoAndHomeSupplyStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoBodyRepairShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoPaintShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoServiceShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomatedCashDisburse
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomatedFuelDispensers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomobileAssociations
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomotivePartsAndAccessoriesStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomotiveTireStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBailAndBondPayments
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBakeries
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBandsOrchestras
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBarberAndBeautyShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBettingCasinoGambling
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBicycleShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBilliardPoolEstablishments
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBoatDealers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBoatRentalsAndLeases
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBookStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBooksPeriodicalsAndNewspapers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBowlingAlleys
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBusLines
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBusinessSecretarialSchools
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBuyingShoppingServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCameraAndPhotographicSupplyStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCandyNutAndConfectioneryStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersNewUsed
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersUsedOnly
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarRentalAgencies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarWashes
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarpentryServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarpetUpholsteryCleaning
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCaterers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChemicalsAndAlliedProducts
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChildCareServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChildrensAndInfantsWearStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChiropodistsPodiatrists
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChiropractors
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCigarStoresAndStands
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCivicSocialFraternalAssociations
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCleaningAndMaintenance
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringClothingRental
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCollegesUniversities
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommercialEquipment
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommercialFootwear
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommercialPhotographyArtAndGraphics
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommuterTransportAndFerries
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerNetworkServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerProgramming
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerRepair
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerSoftwareStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputersPeripheralsAndSoftware
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringConcreteWorkServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringConstructionMaterials
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringConsultingPublicRelations
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCorrespondenceSchools
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCosmeticStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCounselingServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCountryClubs
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCourierServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCourtCosts
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCreditReportingAgencies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCruiseLines
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDairyProductsStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDanceHallStudiosSchools
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDatingEscortServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDentistsOrthodontists
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDepartmentStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDetectiveAgencies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsApplications
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsGames
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsLargeVolume
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsMedia
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingCatalogMerchant
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingInboundTelemarketing
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingInsuranceServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingOther
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingOutboundTelemarketing
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingSubscription
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingTravel
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDiscountStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDoctors
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDoorToDoorSales
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDrinkingPlaces
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDrugStoresAndPharmacies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDryCleaners
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDurableGoods
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDutyFreeStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEatingPlacesRestaurants
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEducationalServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectricRazorStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectricalPartsAndEquipment
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectricalServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectronicsRepairShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectronicsStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElementarySecondarySchools
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEmploymentTempAgencies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEquipmentRental
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringExterminatingServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFamilyClothingStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFastFoodRestaurants
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFinancialInstitutions
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFinesGovernmentAdministrativeEntities
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFloorCoveringStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFlorists
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFreezerAndLockerMeatProvisioners
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFuelDealersNonAutomotive
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFuneralServicesCrematories
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFurnitureRepairRefinishing
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFurriersAndFurShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGeneralServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGiftCardNoveltyAndSouvenirShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGlassPaintAndWallpaperStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGlasswareCrystalStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGolfCoursesPublic
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGovernmentServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGroceryStoresSupermarkets
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHardwareEquipmentAndSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHardwareStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHealthAndBeautySpas
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHearingAidsSalesAndSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHeatingPlumbingAC
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHobbyToyAndGameShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHomeSupplyWarehouseStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHospitals
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHotelsMotelsAndResorts
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHouseholdApplianceStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringIndustrialSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringInformationRetrievalServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringInsuranceDefault
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringInsuranceUnderwritingPremiums
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringIntraCompanyPurchases
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLandscapingServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLaundries
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLaundryCleaningServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLegalServicesAttorneys
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLuggageAndLeatherGoodsStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLumberBuildingMaterialsStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringManualCashDisburse
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMarinasServiceAndSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMasonryStoneworkAndPlaster
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMassageParlors
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMedicalAndDentalLabs
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMedicalServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMembershipOrganizations
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMensWomensClothingStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMetalServiceCenters
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneous
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousApparelAndAccessoryShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousAutoDealers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousBusinessServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousFoodStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralMerchandise
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousPublishingAndPrinting
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousRecreationServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousRepairShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousSpecialtyRetail
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMobileHomeDealers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotionPictureTheaters
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorFreightCarriersAndTrucking
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorHomesDealers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorVehicleSuppliesAndNewParts
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsAndDealers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsDealers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNewsDealersAndNewsstands
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNonFiMoneyOrders
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNonFiStoredValueCardPurchaseLoad
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNondurableGoods
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNurseriesLawnAndGardenSupplyStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNursingPersonalCare
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOfficeAndCommercialFurniture
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOpticiansEyeglasses
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOptometristsOphthalmologist
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOrthopedicGoodsProstheticDevices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOsteopaths
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPackageStoresBeerWineAndLiquor
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPaintsVarnishesAndSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringParkingLotsGarages
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPassengerRailways
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPawnShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPetShopsPetFoodAndSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPetroleumAndPetroleumProducts
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPhotoDeveloping
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPhotographicStudios
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPictureVideoProduction
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPoliticalOrganizations
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPostalServicesGovernmentOnly
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringProfessionalServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPublicWarehousingAndStorage
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringQuickCopyReproAndBlueprint
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRailroads
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRealEstateAgentsAndManagersRentals
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRecordStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRecreationalVehicleRentals
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringReligiousGoodsStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringReligiousOrganizations
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRoofingSidingSheetMetal
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSecretarialSupportServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSecurityBrokersDealers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringServiceStations
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringShoeRepairHatCleaning
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringShoeStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSmallApplianceRepair
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSnowmobileDealers
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSpecialTradeServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSpecialtyCleaning
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportingGoodsStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportingRecreationCamps
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportsAndRidingApparelStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportsClubsFields
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringStampAndCoinStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSwimmingPoolsSales
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTUiTravelGermany
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTailorsAlterations
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTaxPaymentsGovernmentAgencies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTaxPreparationServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTaxicabsLimousines
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTelecommunicationServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTelegraphServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTentAndAwningShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTestingLaboratories
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTheatricalTicketAgencies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTimeshares
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTireRetreadingAndRepair
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTollsBridgeFees
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTouristAttractionsAndExhibits
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTowingServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTrailerParksCampgrounds
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTransportationServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTravelAgenciesTourOperators
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTruckStopIteration
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTruckUtilityTrailerRentals
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTypesettingPlateMakingAndRelatedServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTypewriterStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUniformsCommercialClothing
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUsedMerchandiseAndSecondhandStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUtilities
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVarietyStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVeterinaryServices
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVideoAmusementGameSupplies
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVideoGameArcades
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVideoTapeRentalStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVocationalTradeSchools
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWatchJewelryRepair
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWeldingRepair
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWholesaleClubs
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWigAndToupeeStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWiresMoneyOrders
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWomensAccessoryAndSpecialtyShops
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWomensReadyToWearStores
    | Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWreckingAndSalvageYards
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardholderAuthorizationControls'BlockedCategories'
    where toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAcRefrigerationRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ac_refrigeration_repair"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAccountingBookkeepingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accounting_bookkeeping_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAdvertisingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advertising_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAgriculturalCooperative) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "agricultural_cooperative"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAirlinesAirCarriers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airlines_air_carriers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAirportsFlyingFields) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airports_flying_fields"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAmbulanceServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ambulance_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAmusementParksCarnivals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amusement_parks_carnivals"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAntiqueReproductions) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_reproductions"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAntiqueShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAquariums) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "aquariums"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringArchitecturalSurveyingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "architectural_surveying_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringArtDealersAndGalleries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "art_dealers_and_galleries"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringArtistsSupplyAndCraftShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "artists_supply_and_craft_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoAndHomeSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_and_home_supply_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoBodyRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_body_repair_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoPaintShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_paint_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoServiceShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_service_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomatedCashDisburse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_cash_disburse"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomatedFuelDispensers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_fuel_dispensers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomobileAssociations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automobile_associations"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomotivePartsAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_parts_and_accessories_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomotiveTireStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_tire_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBailAndBondPayments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bail_and_bond_payments"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBakeries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bakeries"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBandsOrchestras) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bands_orchestras"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBarberAndBeautyShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "barber_and_beauty_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBettingCasinoGambling) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "betting_casino_gambling"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBicycleShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bicycle_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBilliardPoolEstablishments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "billiard_pool_establishments"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBoatDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBoatRentalsAndLeases) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_rentals_and_leases"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBookStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBooksPeriodicalsAndNewspapers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "books_periodicals_and_newspapers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBowlingAlleys) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bowling_alleys"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBusLines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bus_lines"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBusinessSecretarialSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_secretarial_schools"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBuyingShoppingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "buying_shopping_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cable_satellite_and_other_pay_television_and_radio"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCameraAndPhotographicSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "camera_and_photographic_supply_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCandyNutAndConfectioneryStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "candy_nut_and_confectionery_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersNewUsed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_new_used"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersUsedOnly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_used_only"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarRentalAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_rental_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarWashes) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_washes"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarpentryServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpentry_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarpetUpholsteryCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpet_upholstery_cleaning"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCaterers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "caterers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charitable_and_social_service_organizations_fundraising"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChemicalsAndAlliedProducts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chemicals_and_allied_products"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChildCareServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "child_care_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChildrensAndInfantsWearStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "childrens_and_infants_wear_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChiropodistsPodiatrists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropodists_podiatrists"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChiropractors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropractors"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCigarStoresAndStands) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cigar_stores_and_stands"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCivicSocialFraternalAssociations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "civic_social_fraternal_associations"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCleaningAndMaintenance) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cleaning_and_maintenance"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringClothingRental) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "clothing_rental"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCollegesUniversities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "colleges_universities"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommercialEquipment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_equipment"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommercialFootwear) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_footwear"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommercialPhotographyArtAndGraphics) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_photography_art_and_graphics"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommuterTransportAndFerries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commuter_transport_and_ferries"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerNetworkServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_network_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerProgramming) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_programming"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_repair"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerSoftwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_software_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputersPeripheralsAndSoftware) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computers_peripherals_and_software"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringConcreteWorkServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "concrete_work_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringConstructionMaterials) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "construction_materials"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringConsultingPublicRelations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "consulting_public_relations"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCorrespondenceSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "correspondence_schools"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCosmeticStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cosmetic_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCounselingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "counseling_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCountryClubs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "country_clubs"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCourierServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "courier_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCourtCosts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "court_costs"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCreditReportingAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_reporting_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCruiseLines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cruise_lines"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDairyProductsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dairy_products_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDanceHallStudiosSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dance_hall_studios_schools"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDatingEscortServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dating_escort_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDentistsOrthodontists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dentists_orthodontists"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDepartmentStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "department_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDetectiveAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "detective_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsApplications) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_applications"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsGames) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_games"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsLargeVolume) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_large_volume"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsMedia) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_media"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingCatalogMerchant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_catalog_merchant"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_combination_catalog_and_retail_merchant"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingInboundTelemarketing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_inbound_telemarketing"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingInsuranceServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_insurance_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingOther) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_other"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingOutboundTelemarketing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_outbound_telemarketing"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingSubscription) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_subscription"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingTravel) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_travel"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDiscountStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDoctors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "doctors"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDoorToDoorSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "door_to_door_sales"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drapery_window_covering_and_upholstery_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDrinkingPlaces) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drinking_places"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDrugStoresAndPharmacies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drug_stores_and_pharmacies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drugs_drug_proprietaries_and_druggist_sundries"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDryCleaners) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dry_cleaners"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDurableGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "durable_goods"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDutyFreeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duty_free_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEatingPlacesRestaurants) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eating_places_restaurants"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEducationalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "educational_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectricRazorStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electric_razor_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectricalPartsAndEquipment) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_parts_and_equipment"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectricalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectronicsRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_repair_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectronicsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElementarySecondarySchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "elementary_secondary_schools"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEmploymentTempAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "employment_temp_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEquipmentRental) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "equipment_rental"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringExterminatingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exterminating_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFamilyClothingStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "family_clothing_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFastFoodRestaurants) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fast_food_restaurants"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFinancialInstitutions) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "financial_institutions"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFinesGovernmentAdministrativeEntities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fines_government_administrative_entities"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fireplace_fireplace_screens_and_accessories_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFloorCoveringStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "floor_covering_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFlorists) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists_supplies_nursery_stock_and_flowers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFreezerAndLockerMeatProvisioners) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freezer_and_locker_meat_provisioners"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFuelDealersNonAutomotive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fuel_dealers_non_automotive"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFuneralServicesCrematories) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "funeral_services_crematories"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_home_furnishings_and_equipment_stores_except_appliances"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFurnitureRepairRefinishing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_repair_refinishing"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFurriersAndFurShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furriers_and_fur_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGeneralServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "general_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGiftCardNoveltyAndSouvenirShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gift_card_novelty_and_souvenir_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGlassPaintAndWallpaperStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glass_paint_and_wallpaper_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGlasswareCrystalStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glassware_crystal_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGolfCoursesPublic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "golf_courses_public"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGovernmentServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGroceryStoresSupermarkets) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "grocery_stores_supermarkets"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHardwareEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_equipment_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHardwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHealthAndBeautySpas) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "health_and_beauty_spas"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHearingAidsSalesAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hearing_aids_sales_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHeatingPlumbingAC) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "heating_plumbing_a_c"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHobbyToyAndGameShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hobby_toy_and_game_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHomeSupplyWarehouseStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "home_supply_warehouse_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHospitals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hospitals"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHotelsMotelsAndResorts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hotels_motels_and_resorts"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHouseholdApplianceStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "household_appliance_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringIndustrialSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "industrial_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringInformationRetrievalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "information_retrieval_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringInsuranceDefault) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_default"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringInsuranceUnderwritingPremiums) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_underwriting_premiums"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringIntraCompanyPurchases) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "intra_company_purchases"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jewelry_stores_watches_clocks_and_silverware_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLandscapingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "landscaping_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLaundries) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundries"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLaundryCleaningServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundry_cleaning_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLegalServicesAttorneys) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legal_services_attorneys"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLuggageAndLeatherGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "luggage_and_leather_goods_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLumberBuildingMaterialsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lumber_building_materials_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringManualCashDisburse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual_cash_disburse"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMarinasServiceAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "marinas_service_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMasonryStoneworkAndPlaster) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masonry_stonework_and_plaster"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMassageParlors) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "massage_parlors"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMedicalAndDentalLabs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_and_dental_labs"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMedicalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMembershipOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "membership_organizations"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_and_boys_clothing_and_accessories_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMensWomensClothingStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_womens_clothing_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMetalServiceCenters) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metal_service_centers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneous) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousApparelAndAccessoryShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_apparel_and_accessory_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousAutoDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_auto_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousBusinessServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_business_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousFoodStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_food_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralMerchandise) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_merchandise"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_home_furnishing_specialty_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousPublishingAndPrinting) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_publishing_and_printing"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousRecreationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_recreation_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousRepairShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_repair_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousSpecialtyRetail) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_specialty_retail"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMobileHomeDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mobile_home_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotionPictureTheaters) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motion_picture_theaters"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorFreightCarriersAndTrucking) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_freight_carriers_and_trucking"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorHomesDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_homes_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorVehicleSuppliesAndNewParts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_vehicle_supplies_and_new_parts"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsAndDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_and_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "music_stores_musical_instruments_pianos_and_sheet_music"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNewsDealersAndNewsstands) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "news_dealers_and_newsstands"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNonFiMoneyOrders) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_money_orders"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNonFiStoredValueCardPurchaseLoad) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_stored_value_card_purchase_load"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNondurableGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nondurable_goods"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNurseriesLawnAndGardenSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nurseries_lawn_and_garden_supply_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNursingPersonalCare) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nursing_personal_care"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOfficeAndCommercialFurniture) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "office_and_commercial_furniture"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOpticiansEyeglasses) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "opticians_eyeglasses"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOptometristsOphthalmologist) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "optometrists_ophthalmologist"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOrthopedicGoodsProstheticDevices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "orthopedic_goods_prosthetic_devices"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOsteopaths) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "osteopaths"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPackageStoresBeerWineAndLiquor) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "package_stores_beer_wine_and_liquor"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPaintsVarnishesAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paints_varnishes_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringParkingLotsGarages) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "parking_lots_garages"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPassengerRailways) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "passenger_railways"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPawnShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pawn_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPetShopsPetFoodAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pet_shops_pet_food_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPetroleumAndPetroleumProducts) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "petroleum_and_petroleum_products"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPhotoDeveloping) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photo_developing"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_photocopy_microfilm_equipment_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPhotographicStudios) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_studios"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPictureVideoProduction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "picture_video_production"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "piece_goods_notions_and_other_dry_goods"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plumbing_heating_equipment_and_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPoliticalOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "political_organizations"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPostalServicesGovernmentOnly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "postal_services_government_only"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "precious_stones_and_metals_watches_and_jewelry"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringProfessionalServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "professional_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPublicWarehousingAndStorage) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_warehousing_and_storage"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringQuickCopyReproAndBlueprint) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "quick_copy_repro_and_blueprint"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRailroads) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "railroads"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRealEstateAgentsAndManagersRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "real_estate_agents_and_managers_rentals"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRecordStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "record_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRecreationalVehicleRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recreational_vehicle_rentals"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringReligiousGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_goods_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringReligiousOrganizations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_organizations"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRoofingSidingSheetMetal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roofing_siding_sheet_metal"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSecretarialSupportServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "secretarial_support_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSecurityBrokersDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "security_brokers_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringServiceStations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service_stations"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sewing_needlework_fabric_and_piece_goods_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringShoeRepairHatCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_repair_hat_cleaning"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringShoeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSmallApplianceRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "small_appliance_repair"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSnowmobileDealers) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snowmobile_dealers"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSpecialTradeServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "special_trade_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSpecialtyCleaning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "specialty_cleaning"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportingGoodsStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_goods_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportingRecreationCamps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_recreation_camps"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportsAndRidingApparelStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_and_riding_apparel_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportsClubsFields) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_clubs_fields"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringStampAndCoinStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stamp_and_coin_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationary_office_supplies_printing_and_writing_paper"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationery_stores_office_and_school_supply_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSwimmingPoolsSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swimming_pools_sales"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTUiTravelGermany) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "t_ui_travel_germany"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTailorsAlterations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tailors_alterations"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTaxPaymentsGovernmentAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_payments_government_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTaxPreparationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_preparation_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTaxicabsLimousines) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "taxicabs_limousines"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_equipment_and_telephone_sales"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTelecommunicationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTelegraphServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telegraph_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTentAndAwningShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tent_and_awning_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTestingLaboratories) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "testing_laboratories"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTheatricalTicketAgencies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theatrical_ticket_agencies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTimeshares) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "timeshares"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTireRetreadingAndRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tire_retreading_and_repair"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTollsBridgeFees) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tolls_bridge_fees"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTouristAttractionsAndExhibits) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tourist_attractions_and_exhibits"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTowingServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "towing_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTrailerParksCampgrounds) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trailer_parks_campgrounds"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTransportationServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transportation_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTravelAgenciesTourOperators) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "travel_agencies_tour_operators"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTruckStopIteration) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_stop_iteration"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTruckUtilityTrailerRentals) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_utility_trailer_rentals"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTypesettingPlateMakingAndRelatedServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typesetting_plate_making_and_related_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTypewriterStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typewriter_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "u_s_federal_government_agencies_or_departments"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUniformsCommercialClothing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uniforms_commercial_clothing"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUsedMerchandiseAndSecondhandStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "used_merchandise_and_secondhand_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUtilities) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "utilities"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVarietyStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "variety_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVeterinaryServices) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "veterinary_services"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVideoAmusementGameSupplies) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_amusement_game_supplies"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVideoGameArcades) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_game_arcades"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVideoTapeRentalStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_tape_rental_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVocationalTradeSchools) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vocational_trade_schools"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWatchJewelryRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "watch_jewelry_repair"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWeldingRepair) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "welding_repair"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWholesaleClubs) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wholesale_clubs"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWigAndToupeeStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wig_and_toupee_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWiresMoneyOrders) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wires_money_orders"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWomensAccessoryAndSpecialtyShops) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_accessory_and_specialty_shops"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWomensReadyToWearStores) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_ready_to_wear_stores"
          toJSON (Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWreckingAndSalvageYards) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wrecking_and_salvage_yards"
instance Data.Aeson.FromJSON Issuing'cardholderAuthorizationControls'BlockedCategories'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ac_refrigeration_repair")
                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAcRefrigerationRepair
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "accounting_bookkeeping_services")
                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAccountingBookkeepingServices
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "advertising_services")
                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAdvertisingServices
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "agricultural_cooperative")
                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAgriculturalCooperative
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airlines_air_carriers")
                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAirlinesAirCarriers
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "airports_flying_fields")
                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAirportsFlyingFields
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ambulance_services")
                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAmbulanceServices
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amusement_parks_carnivals")
                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAmusementParksCarnivals
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_reproductions")
                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAntiqueReproductions
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "antique_shops")
                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAntiqueShops
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "aquariums")
                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAquariums
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "architectural_surveying_services")
                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringArchitecturalSurveyingServices
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "art_dealers_and_galleries")
                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringArtDealersAndGalleries
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "artists_supply_and_craft_shops")
                                                                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringArtistsSupplyAndCraftShops
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_and_home_supply_stores")
                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoAndHomeSupplyStores
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_body_repair_shops")
                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoBodyRepairShops
                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_paint_shops")
                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoPaintShops
                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "auto_service_shops")
                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutoServiceShops
                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_cash_disburse")
                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomatedCashDisburse
                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automated_fuel_dispensers")
                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomatedFuelDispensers
                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automobile_associations")
                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomobileAssociations
                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_parts_and_accessories_stores")
                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomotivePartsAndAccessoriesStores
                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automotive_tire_stores")
                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringAutomotiveTireStores
                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bail_and_bond_payments")
                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBailAndBondPayments
                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bakeries")
                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBakeries
                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bands_orchestras")
                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBandsOrchestras
                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "barber_and_beauty_shops")
                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBarberAndBeautyShops
                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "betting_casino_gambling")
                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBettingCasinoGambling
                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bicycle_shops")
                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBicycleShops
                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "billiard_pool_establishments")
                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBilliardPoolEstablishments
                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_dealers")
                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBoatDealers
                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "boat_rentals_and_leases")
                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBoatRentalsAndLeases
                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "book_stores")
                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBookStores
                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "books_periodicals_and_newspapers")
                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBooksPeriodicalsAndNewspapers
                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bowling_alleys")
                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBowlingAlleys
                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bus_lines")
                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBusLines
                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_secretarial_schools")
                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBusinessSecretarialSchools
                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "buying_shopping_services")
                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringBuyingShoppingServices
                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cable_satellite_and_other_pay_television_and_radio")
                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCableSatelliteAndOtherPayTelevisionAndRadio
                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "camera_and_photographic_supply_stores")
                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCameraAndPhotographicSupplyStores
                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "candy_nut_and_confectionery_stores")
                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCandyNutAndConfectioneryStores
                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_new_used")
                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersNewUsed
                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_and_truck_dealers_used_only")
                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarAndTruckDealersUsedOnly
                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_rental_agencies")
                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarRentalAgencies
                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "car_washes")
                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarWashes
                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpentry_services")
                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarpentryServices
                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "carpet_upholstery_cleaning")
                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCarpetUpholsteryCleaning
                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "caterers")
                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCaterers
                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charitable_and_social_service_organizations_fundraising")
                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCharitableAndSocialServiceOrganizationsFundraising
                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chemicals_and_allied_products")
                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChemicalsAndAlliedProducts
                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "child_care_services")
                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChildCareServices
                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "childrens_and_infants_wear_stores")
                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChildrensAndInfantsWearStores
                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropodists_podiatrists")
                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChiropodistsPodiatrists
                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "chiropractors")
                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringChiropractors
                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cigar_stores_and_stands")
                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCigarStoresAndStands
                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "civic_social_fraternal_associations")
                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCivicSocialFraternalAssociations
                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cleaning_and_maintenance")
                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCleaningAndMaintenance
                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "clothing_rental")
                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringClothingRental
                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "colleges_universities")
                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCollegesUniversities
                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_equipment")
                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommercialEquipment
                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_footwear")
                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommercialFootwear
                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commercial_photography_art_and_graphics")
                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommercialPhotographyArtAndGraphics
                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "commuter_transport_and_ferries")
                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCommuterTransportAndFerries
                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_network_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerNetworkServices
                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_programming")
                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerProgramming
                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_repair")
                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerRepair
                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computer_software_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputerSoftwareStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "computers_peripherals_and_software")
                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringComputersPeripheralsAndSoftware
                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "concrete_work_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringConcreteWorkServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "construction_materials")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringConstructionMaterials
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "consulting_public_relations")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringConsultingPublicRelations
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "correspondence_schools")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCorrespondenceSchools
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cosmetic_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCosmeticStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "counseling_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCounselingServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "country_clubs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCountryClubs
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "courier_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCourierServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "court_costs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCourtCosts
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "credit_reporting_agencies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCreditReportingAgencies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cruise_lines")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringCruiseLines
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dairy_products_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDairyProductsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dance_hall_studios_schools")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDanceHallStudiosSchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dating_escort_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDatingEscortServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dentists_orthodontists")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDentistsOrthodontists
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "department_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDepartmentStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "detective_agencies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDetectiveAgencies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_applications")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsApplications
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_games")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsGames
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_large_volume")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsLargeVolume
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "digital_goods_media")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDigitalGoodsMedia
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_catalog_merchant")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingCatalogMerchant
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_combination_catalog_and_retail_merchant")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingCombinationCatalogAndRetailMerchant
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_inbound_telemarketing")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingInboundTelemarketing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_insurance_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingInsuranceServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_other")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingOther
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_outbound_telemarketing")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingOutboundTelemarketing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_subscription")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingSubscription
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "direct_marketing_travel")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDirectMarketingTravel
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDiscountStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "doctors")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDoctors
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "door_to_door_sales")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDoorToDoorSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drapery_window_covering_and_upholstery_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDraperyWindowCoveringAndUpholsteryStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drinking_places")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDrinkingPlaces
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drug_stores_and_pharmacies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDrugStoresAndPharmacies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "drugs_drug_proprietaries_and_druggist_sundries")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDrugsDrugProprietariesAndDruggistSundries
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dry_cleaners")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDryCleaners
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "durable_goods")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDurableGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duty_free_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringDutyFreeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eating_places_restaurants")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEatingPlacesRestaurants
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "educational_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEducationalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electric_razor_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectricRazorStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_parts_and_equipment")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectricalPartsAndEquipment
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electrical_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectricalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_repair_shops")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectronicsRepairShops
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "electronics_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElectronicsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "elementary_secondary_schools")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringElementarySecondarySchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "employment_temp_agencies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEmploymentTempAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "equipment_rental")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringEquipmentRental
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "exterminating_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringExterminatingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "family_clothing_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFamilyClothingStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fast_food_restaurants")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFastFoodRestaurants
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "financial_institutions")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFinancialInstitutions
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fines_government_administrative_entities")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFinesGovernmentAdministrativeEntities
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fireplace_fireplace_screens_and_accessories_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFireplaceFireplaceScreensAndAccessoriesStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "floor_covering_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFloorCoveringStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFlorists
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "florists_supplies_nursery_stock_and_flowers")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFloristsSuppliesNurseryStockAndFlowers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "freezer_and_locker_meat_provisioners")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFreezerAndLockerMeatProvisioners
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fuel_dealers_non_automotive")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFuelDealersNonAutomotive
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "funeral_services_crematories")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFuneralServicesCrematories
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_home_furnishings_and_equipment_stores_except_appliances")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFurnitureHomeFurnishingsAndEquipmentStoresExceptAppliances
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furniture_repair_refinishing")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFurnitureRepairRefinishing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "furriers_and_fur_shops")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringFurriersAndFurShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "general_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGeneralServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "gift_card_novelty_and_souvenir_shops")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGiftCardNoveltyAndSouvenirShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glass_paint_and_wallpaper_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGlassPaintAndWallpaperStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "glassware_crystal_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGlasswareCrystalStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "golf_courses_public")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGolfCoursesPublic
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGovernmentServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "grocery_stores_supermarkets")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringGroceryStoresSupermarkets
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_equipment_and_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHardwareEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hardware_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHardwareStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "health_and_beauty_spas")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHealthAndBeautySpas
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hearing_aids_sales_and_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHearingAidsSalesAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "heating_plumbing_a_c")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHeatingPlumbingAC
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hobby_toy_and_game_shops")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHobbyToyAndGameShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "home_supply_warehouse_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHomeSupplyWarehouseStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hospitals")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHospitals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hotels_motels_and_resorts")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHotelsMotelsAndResorts
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "household_appliance_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringHouseholdApplianceStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "industrial_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringIndustrialSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "information_retrieval_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringInformationRetrievalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_default")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringInsuranceDefault
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "insurance_underwriting_premiums")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringInsuranceUnderwritingPremiums
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "intra_company_purchases")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringIntraCompanyPurchases
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jewelry_stores_watches_clocks_and_silverware_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringJewelryStoresWatchesClocksAndSilverwareStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "landscaping_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLandscapingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundries")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLaundries
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "laundry_cleaning_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLaundryCleaningServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "legal_services_attorneys")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLegalServicesAttorneys
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "luggage_and_leather_goods_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLuggageAndLeatherGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lumber_building_materials_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringLumberBuildingMaterialsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual_cash_disburse")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringManualCashDisburse
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "marinas_service_and_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMarinasServiceAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masonry_stonework_and_plaster")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMasonryStoneworkAndPlaster
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "massage_parlors")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMassageParlors
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_and_dental_labs")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMedicalAndDentalLabs
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_dental_ophthalmic_and_hospital_equipment_and_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMedicalDentalOphthalmicAndHospitalEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "medical_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMedicalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "membership_organizations")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMembershipOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_and_boys_clothing_and_accessories_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMensAndBoysClothingAndAccessoriesStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mens_womens_clothing_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMensWomensClothingStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metal_service_centers")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMetalServiceCenters
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneous
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_apparel_and_accessory_shops")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousApparelAndAccessoryShops
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_auto_dealers")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousAutoDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_business_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousBusinessServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_food_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousFoodStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_merchandise")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralMerchandise
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_general_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousGeneralServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_home_furnishing_specialty_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousHomeFurnishingSpecialtyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_publishing_and_printing")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousPublishingAndPrinting
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_recreation_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousRecreationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_repair_shops")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousRepairShops
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "miscellaneous_specialty_retail")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMiscellaneousSpecialtyRetail
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mobile_home_dealers")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMobileHomeDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motion_picture_theaters")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotionPictureTheaters
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_freight_carriers_and_trucking")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorFreightCarriersAndTrucking
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_homes_dealers")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorHomesDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motor_vehicle_supplies_and_new_parts")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorVehicleSuppliesAndNewParts
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_and_dealers")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsAndDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "motorcycle_shops_dealers")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMotorcycleShopsDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "music_stores_musical_instruments_pianos_and_sheet_music")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringMusicStoresMusicalInstrumentsPianosAndSheetMusic
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "news_dealers_and_newsstands")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNewsDealersAndNewsstands
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_money_orders")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNonFiMoneyOrders
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_fi_stored_value_card_purchase_load")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNonFiStoredValueCardPurchaseLoad
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nondurable_goods")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNondurableGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nurseries_lawn_and_garden_supply_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNurseriesLawnAndGardenSupplyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nursing_personal_care")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringNursingPersonalCare
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "office_and_commercial_furniture")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOfficeAndCommercialFurniture
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "opticians_eyeglasses")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOpticiansEyeglasses
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "optometrists_ophthalmologist")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOptometristsOphthalmologist
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "orthopedic_goods_prosthetic_devices")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOrthopedicGoodsProstheticDevices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "osteopaths")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringOsteopaths
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "package_stores_beer_wine_and_liquor")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPackageStoresBeerWineAndLiquor
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "paints_varnishes_and_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPaintsVarnishesAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "parking_lots_garages")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringParkingLotsGarages
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "passenger_railways")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPassengerRailways
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pawn_shops")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPawnShops
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pet_shops_pet_food_and_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPetShopsPetFoodAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "petroleum_and_petroleum_products")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPetroleumAndPetroleumProducts
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photo_developing")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPhotoDeveloping
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_photocopy_microfilm_equipment_and_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPhotographicPhotocopyMicrofilmEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "photographic_studios")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPhotographicStudios
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "picture_video_production")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPictureVideoProduction
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "piece_goods_notions_and_other_dry_goods")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPieceGoodsNotionsAndOtherDryGoods
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plumbing_heating_equipment_and_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPlumbingHeatingEquipmentAndSupplies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "political_organizations")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPoliticalOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "postal_services_government_only")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPostalServicesGovernmentOnly
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "precious_stones_and_metals_watches_and_jewelry")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPreciousStonesAndMetalsWatchesAndJewelry
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "professional_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringProfessionalServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_warehousing_and_storage")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringPublicWarehousingAndStorage
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "quick_copy_repro_and_blueprint")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringQuickCopyReproAndBlueprint
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "railroads")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRailroads
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "real_estate_agents_and_managers_rentals")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRealEstateAgentsAndManagersRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "record_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRecordStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recreational_vehicle_rentals")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRecreationalVehicleRentals
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_goods_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringReligiousGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "religious_organizations")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringReligiousOrganizations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "roofing_siding_sheet_metal")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringRoofingSidingSheetMetal
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "secretarial_support_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSecretarialSupportServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "security_brokers_dealers")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSecurityBrokersDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service_stations")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringServiceStations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sewing_needlework_fabric_and_piece_goods_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSewingNeedleworkFabricAndPieceGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_repair_hat_cleaning")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringShoeRepairHatCleaning
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "shoe_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringShoeStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "small_appliance_repair")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSmallApplianceRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "snowmobile_dealers")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSnowmobileDealers
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "special_trade_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSpecialTradeServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "specialty_cleaning")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSpecialtyCleaning
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_goods_stores")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportingGoodsStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sporting_recreation_camps")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportingRecreationCamps
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_and_riding_apparel_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportsAndRidingApparelStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sports_clubs_fields")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSportsClubsFields
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stamp_and_coin_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringStampAndCoinStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationary_office_supplies_printing_and_writing_paper")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringStationaryOfficeSuppliesPrintingAndWritingPaper
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "stationery_stores_office_and_school_supply_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringStationeryStoresOfficeAndSchoolSupplyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "swimming_pools_sales")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringSwimmingPoolsSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "t_ui_travel_germany")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTUiTravelGermany
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tailors_alterations")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTailorsAlterations
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_payments_government_agencies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTaxPaymentsGovernmentAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_preparation_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTaxPreparationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "taxicabs_limousines")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTaxicabsLimousines
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_equipment_and_telephone_sales")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTelecommunicationEquipmentAndTelephoneSales
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telecommunication_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTelecommunicationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "telegraph_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTelegraphServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tent_and_awning_shops")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTentAndAwningShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "testing_laboratories")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTestingLaboratories
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "theatrical_ticket_agencies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTheatricalTicketAgencies
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "timeshares")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTimeshares
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tire_retreading_and_repair")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTireRetreadingAndRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tolls_bridge_fees")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTollsBridgeFees
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tourist_attractions_and_exhibits")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTouristAttractionsAndExhibits
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "towing_services")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTowingServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trailer_parks_campgrounds")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTrailerParksCampgrounds
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transportation_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTransportationServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "travel_agencies_tour_operators")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTravelAgenciesTourOperators
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_stop_iteration")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTruckStopIteration
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "truck_utility_trailer_rentals")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTruckUtilityTrailerRentals
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typesetting_plate_making_and_related_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTypesettingPlateMakingAndRelatedServices
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "typewriter_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringTypewriterStores
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "u_s_federal_government_agencies_or_departments")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUSFederalGovernmentAgenciesOrDepartments
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "uniforms_commercial_clothing")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUniformsCommercialClothing
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "used_merchandise_and_secondhand_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUsedMerchandiseAndSecondhandStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "utilities")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringUtilities
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "variety_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVarietyStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "veterinary_services")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVeterinaryServices
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_amusement_game_supplies")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVideoAmusementGameSupplies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_game_arcades")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVideoGameArcades
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "video_tape_rental_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVideoTapeRentalStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "vocational_trade_schools")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringVocationalTradeSchools
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "watch_jewelry_repair")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWatchJewelryRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "welding_repair")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWeldingRepair
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wholesale_clubs")
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWholesaleClubs
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wig_and_toupee_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWigAndToupeeStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wires_money_orders")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWiresMoneyOrders
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_accessory_and_specialty_shops")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWomensAccessoryAndSpecialtyShops
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "womens_ready_to_wear_stores")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWomensReadyToWearStores
else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wrecking_and_salvage_yards")
then Issuing'cardholderAuthorizationControls'BlockedCategories'EnumStringWreckingAndSalvageYards
else Issuing'cardholderAuthorizationControls'BlockedCategories'EnumOther val)
instance Data.Aeson.ToJSON Issuing'cardholderAuthorizationControls'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "allowed_categories" (issuing'cardholderAuthorizationControls'AllowedCategories obj) : (Data.Aeson..=) "blocked_categories" (issuing'cardholderAuthorizationControls'BlockedCategories obj) : (Data.Aeson..=) "spending_limits" (issuing'cardholderAuthorizationControls'SpendingLimits obj) : (Data.Aeson..=) "spending_limits_currency" (issuing'cardholderAuthorizationControls'SpendingLimitsCurrency obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "allowed_categories" (issuing'cardholderAuthorizationControls'AllowedCategories obj) GHC.Base.<> ((Data.Aeson..=) "blocked_categories" (issuing'cardholderAuthorizationControls'BlockedCategories obj) GHC.Base.<> ((Data.Aeson..=) "spending_limits" (issuing'cardholderAuthorizationControls'SpendingLimits obj) GHC.Base.<> (Data.Aeson..=) "spending_limits_currency" (issuing'cardholderAuthorizationControls'SpendingLimitsCurrency obj))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardholderAuthorizationControls'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardholderAuthorizationControls'" (\obj -> (((GHC.Base.pure Issuing'cardholderAuthorizationControls' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allowed_categories")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "blocked_categories")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "spending_limits")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "spending_limits_currency"))
data Issuing'cardholderCompany'
    = Issuing'cardholderCompany' {issuing'cardholderCompany'TaxIdProvided :: (GHC.Maybe.Maybe GHC.Types.Bool)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardholderCompany'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "tax_id_provided" (issuing'cardholderCompany'TaxIdProvided obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "tax_id_provided" (issuing'cardholderCompany'TaxIdProvided obj))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardholderCompany'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardholderCompany'" (\obj -> GHC.Base.pure Issuing'cardholderCompany' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_id_provided"))
data Issuing'cardholderIndividual'
    = Issuing'cardholderIndividual' {issuing'cardholderIndividual'Dob :: (GHC.Maybe.Maybe Issuing'cardholderIndividual'Dob'),
                                     issuing'cardholderIndividual'FirstName :: (GHC.Maybe.Maybe GHC.Base.String),
                                     issuing'cardholderIndividual'LastName :: (GHC.Maybe.Maybe GHC.Base.String),
                                     issuing'cardholderIndividual'Verification :: (GHC.Maybe.Maybe Issuing'cardholderIndividual'Verification')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardholderIndividual'Dob'
    = Issuing'cardholderIndividual'Dob' {issuing'cardholderIndividual'Dob'Day :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                         issuing'cardholderIndividual'Dob'Month :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                         issuing'cardholderIndividual'Dob'Year :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardholderIndividual'Dob'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "day" (issuing'cardholderIndividual'Dob'Day obj) : (Data.Aeson..=) "month" (issuing'cardholderIndividual'Dob'Month obj) : (Data.Aeson..=) "year" (issuing'cardholderIndividual'Dob'Year obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "day" (issuing'cardholderIndividual'Dob'Day obj) GHC.Base.<> ((Data.Aeson..=) "month" (issuing'cardholderIndividual'Dob'Month obj) GHC.Base.<> (Data.Aeson..=) "year" (issuing'cardholderIndividual'Dob'Year obj)))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardholderIndividual'Dob'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardholderIndividual'Dob'" (\obj -> ((GHC.Base.pure Issuing'cardholderIndividual'Dob' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "day")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "year"))
data Issuing'cardholderIndividual'Verification'
    = Issuing'cardholderIndividual'Verification' {issuing'cardholderIndividual'Verification'Document :: (GHC.Maybe.Maybe Issuing'cardholderIndividual'Verification'Document')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardholderIndividual'Verification'Document'
    = Issuing'cardholderIndividual'Verification'Document' {issuing'cardholderIndividual'Verification'Document'Back :: (GHC.Maybe.Maybe Issuing'cardholderIndividual'Verification'Document'Back'Variants),
                                                           issuing'cardholderIndividual'Verification'Document'Front :: (GHC.Maybe.Maybe Issuing'cardholderIndividual'Verification'Document'Front'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'cardholderIndividual'Verification'Document'Back'Variants
    = Issuing'cardholderIndividual'Verification'Document'Back'Variant1 File
    | Issuing'cardholderIndividual'Verification'Document'Back'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'cardholderIndividual'Verification'Document'Back'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'cardholderIndividual'Verification'Document'Back'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'cardholderIndividual'Verification'Document'Front'Variants
    = Issuing'cardholderIndividual'Verification'Document'Front'Variant1 File
    | Issuing'cardholderIndividual'Verification'Document'Front'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'cardholderIndividual'Verification'Document'Front'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'cardholderIndividual'Verification'Document'Front'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Issuing'cardholderIndividual'Verification'Document'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "back" (issuing'cardholderIndividual'Verification'Document'Back obj) : (Data.Aeson..=) "front" (issuing'cardholderIndividual'Verification'Document'Front obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "back" (issuing'cardholderIndividual'Verification'Document'Back obj) GHC.Base.<> (Data.Aeson..=) "front" (issuing'cardholderIndividual'Verification'Document'Front obj))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardholderIndividual'Verification'Document'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardholderIndividual'Verification'Document'" (\obj -> (GHC.Base.pure Issuing'cardholderIndividual'Verification'Document' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "front"))
instance Data.Aeson.ToJSON Issuing'cardholderIndividual'Verification'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "document" (issuing'cardholderIndividual'Verification'Document obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "document" (issuing'cardholderIndividual'Verification'Document obj))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardholderIndividual'Verification'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardholderIndividual'Verification'" (\obj -> GHC.Base.pure Issuing'cardholderIndividual'Verification' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "document"))
instance Data.Aeson.ToJSON Issuing'cardholderIndividual'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dob" (issuing'cardholderIndividual'Dob obj) : (Data.Aeson..=) "first_name" (issuing'cardholderIndividual'FirstName obj) : (Data.Aeson..=) "last_name" (issuing'cardholderIndividual'LastName obj) : (Data.Aeson..=) "verification" (issuing'cardholderIndividual'Verification obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dob" (issuing'cardholderIndividual'Dob obj) GHC.Base.<> ((Data.Aeson..=) "first_name" (issuing'cardholderIndividual'FirstName obj) GHC.Base.<> ((Data.Aeson..=) "last_name" (issuing'cardholderIndividual'LastName obj) GHC.Base.<> (Data.Aeson..=) "verification" (issuing'cardholderIndividual'Verification obj))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardholderIndividual'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardholderIndividual'" (\obj -> (((GHC.Base.pure Issuing'cardholderIndividual' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dob")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verification"))
data Issuing'cardholderMetadata'
    = Issuing'cardholderMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardholderMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardholderMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardholderMetadata'" (\obj -> GHC.Base.pure Issuing'cardholderMetadata')
data Issuing'cardholderObject'
    = Issuing'cardholderObject'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardholderObject'EnumTyped GHC.Base.String
    | Issuing'cardholderObject'EnumStringIssuing'cardholder
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardholderObject'
    where toJSON (Issuing'cardholderObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderObject'EnumStringIssuing'cardholder) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.cardholder"
instance Data.Aeson.FromJSON Issuing'cardholderObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.cardholder")
                                          then Issuing'cardholderObject'EnumStringIssuing'cardholder
                                          else Issuing'cardholderObject'EnumOther val)
data Issuing'cardholderStatus'
    = Issuing'cardholderStatus'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardholderStatus'EnumTyped GHC.Base.String
    | Issuing'cardholderStatus'EnumStringActive
    | Issuing'cardholderStatus'EnumStringBlocked
    | Issuing'cardholderStatus'EnumStringInactive
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardholderStatus'
    where toJSON (Issuing'cardholderStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderStatus'EnumStringActive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
          toJSON (Issuing'cardholderStatus'EnumStringBlocked) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blocked"
          toJSON (Issuing'cardholderStatus'EnumStringInactive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive"
instance Data.Aeson.FromJSON Issuing'cardholderStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
                                          then Issuing'cardholderStatus'EnumStringActive
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blocked")
                                                then Issuing'cardholderStatus'EnumStringBlocked
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive")
                                                      then Issuing'cardholderStatus'EnumStringInactive
                                                      else Issuing'cardholderStatus'EnumOther val)
data Issuing'cardholderType'
    = Issuing'cardholderType'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'cardholderType'EnumTyped GHC.Base.String
    | Issuing'cardholderType'EnumStringBusinessEntity
    | Issuing'cardholderType'EnumStringIndividual
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'cardholderType'
    where toJSON (Issuing'cardholderType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'cardholderType'EnumStringBusinessEntity) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_entity"
          toJSON (Issuing'cardholderType'EnumStringIndividual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual"
instance Data.Aeson.FromJSON Issuing'cardholderType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "business_entity")
                                          then Issuing'cardholderType'EnumStringBusinessEntity
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual")
                                                then Issuing'cardholderType'EnumStringIndividual
                                                else Issuing'cardholderType'EnumOther val)
instance Data.Aeson.ToJSON Issuing'cardholder
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "authorization_controls" (issuing'cardholderAuthorizationControls obj) : (Data.Aeson..=) "billing" (issuing'cardholderBilling obj) : (Data.Aeson..=) "company" (issuing'cardholderCompany obj) : (Data.Aeson..=) "created" (issuing'cardholderCreated obj) : (Data.Aeson..=) "email" (issuing'cardholderEmail obj) : (Data.Aeson..=) "id" (issuing'cardholderId obj) : (Data.Aeson..=) "individual" (issuing'cardholderIndividual obj) : (Data.Aeson..=) "is_default" (issuing'cardholderIsDefault obj) : (Data.Aeson..=) "livemode" (issuing'cardholderLivemode obj) : (Data.Aeson..=) "metadata" (issuing'cardholderMetadata obj) : (Data.Aeson..=) "name" (issuing'cardholderName obj) : (Data.Aeson..=) "object" (issuing'cardholderObject obj) : (Data.Aeson..=) "phone_number" (issuing'cardholderPhoneNumber obj) : (Data.Aeson..=) "requirements" (issuing'cardholderRequirements obj) : (Data.Aeson..=) "status" (issuing'cardholderStatus obj) : (Data.Aeson..=) "type" (issuing'cardholderType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "authorization_controls" (issuing'cardholderAuthorizationControls obj) GHC.Base.<> ((Data.Aeson..=) "billing" (issuing'cardholderBilling obj) GHC.Base.<> ((Data.Aeson..=) "company" (issuing'cardholderCompany obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuing'cardholderCreated obj) GHC.Base.<> ((Data.Aeson..=) "email" (issuing'cardholderEmail obj) GHC.Base.<> ((Data.Aeson..=) "id" (issuing'cardholderId obj) GHC.Base.<> ((Data.Aeson..=) "individual" (issuing'cardholderIndividual obj) GHC.Base.<> ((Data.Aeson..=) "is_default" (issuing'cardholderIsDefault obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (issuing'cardholderLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (issuing'cardholderMetadata obj) GHC.Base.<> ((Data.Aeson..=) "name" (issuing'cardholderName obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuing'cardholderObject obj) GHC.Base.<> ((Data.Aeson..=) "phone_number" (issuing'cardholderPhoneNumber obj) GHC.Base.<> ((Data.Aeson..=) "requirements" (issuing'cardholderRequirements obj) GHC.Base.<> ((Data.Aeson..=) "status" (issuing'cardholderStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (issuing'cardholderType obj))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardholder
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardholder" (\obj -> (((((((((((((((GHC.Base.pure Issuing'cardholder GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorization_controls")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "billing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "individual")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_default")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data Issuing'dispute
    = Issuing'dispute {issuing'disputeAmount :: GHC.Integer.Type.Integer,
                       issuing'disputeCreated :: GHC.Integer.Type.Integer,
                       issuing'disputeCurrency :: GHC.Base.String,
                       issuing'disputeDisputedTransaction :: Issuing'disputeDisputedTransaction'Variants,
                       issuing'disputeEvidence :: IssuingDisputeEvidence,
                       issuing'disputeId :: GHC.Base.String,
                       issuing'disputeLivemode :: GHC.Types.Bool,
                       issuing'disputeMetadata :: Issuing'disputeMetadata',
                       issuing'disputeObject :: Issuing'disputeObject',
                       issuing'disputeReason :: GHC.Base.String,
                       issuing'disputeStatus :: Issuing'disputeStatus'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'disputeDisputedTransaction'Variants
    = Issuing'disputeDisputedTransaction'Variant1 Issuing'transaction
    | Issuing'disputeDisputedTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'disputeDisputedTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'disputeDisputedTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'disputeMetadata'
    = Issuing'disputeMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'disputeMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'disputeMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'disputeMetadata'" (\obj -> GHC.Base.pure Issuing'disputeMetadata')
data Issuing'disputeObject'
    = Issuing'disputeObject'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'disputeObject'EnumTyped GHC.Base.String
    | Issuing'disputeObject'EnumStringIssuing'dispute
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'disputeObject'
    where toJSON (Issuing'disputeObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'disputeObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'disputeObject'EnumStringIssuing'dispute) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.dispute"
instance Data.Aeson.FromJSON Issuing'disputeObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.dispute")
                                          then Issuing'disputeObject'EnumStringIssuing'dispute
                                          else Issuing'disputeObject'EnumOther val)
data Issuing'disputeStatus'
    = Issuing'disputeStatus'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'disputeStatus'EnumTyped GHC.Base.String
    | Issuing'disputeStatus'EnumStringLost
    | Issuing'disputeStatus'EnumStringUnderReview
    | Issuing'disputeStatus'EnumStringUnsubmitted
    | Issuing'disputeStatus'EnumStringWon
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'disputeStatus'
    where toJSON (Issuing'disputeStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'disputeStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'disputeStatus'EnumStringLost) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lost"
          toJSON (Issuing'disputeStatus'EnumStringUnderReview) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "under_review"
          toJSON (Issuing'disputeStatus'EnumStringUnsubmitted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unsubmitted"
          toJSON (Issuing'disputeStatus'EnumStringWon) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "won"
instance Data.Aeson.FromJSON Issuing'disputeStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "lost")
                                          then Issuing'disputeStatus'EnumStringLost
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "under_review")
                                                then Issuing'disputeStatus'EnumStringUnderReview
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unsubmitted")
                                                      then Issuing'disputeStatus'EnumStringUnsubmitted
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "won")
                                                            then Issuing'disputeStatus'EnumStringWon
                                                            else Issuing'disputeStatus'EnumOther val)
instance Data.Aeson.ToJSON Issuing'dispute
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (issuing'disputeAmount obj) : (Data.Aeson..=) "created" (issuing'disputeCreated obj) : (Data.Aeson..=) "currency" (issuing'disputeCurrency obj) : (Data.Aeson..=) "disputed_transaction" (issuing'disputeDisputedTransaction obj) : (Data.Aeson..=) "evidence" (issuing'disputeEvidence obj) : (Data.Aeson..=) "id" (issuing'disputeId obj) : (Data.Aeson..=) "livemode" (issuing'disputeLivemode obj) : (Data.Aeson..=) "metadata" (issuing'disputeMetadata obj) : (Data.Aeson..=) "object" (issuing'disputeObject obj) : (Data.Aeson..=) "reason" (issuing'disputeReason obj) : (Data.Aeson..=) "status" (issuing'disputeStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (issuing'disputeAmount obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuing'disputeCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (issuing'disputeCurrency obj) GHC.Base.<> ((Data.Aeson..=) "disputed_transaction" (issuing'disputeDisputedTransaction obj) GHC.Base.<> ((Data.Aeson..=) "evidence" (issuing'disputeEvidence obj) GHC.Base.<> ((Data.Aeson..=) "id" (issuing'disputeId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (issuing'disputeLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (issuing'disputeMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuing'disputeObject obj) GHC.Base.<> ((Data.Aeson..=) "reason" (issuing'disputeReason obj) GHC.Base.<> (Data.Aeson..=) "status" (issuing'disputeStatus obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'dispute
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'dispute" (\obj -> ((((((((((GHC.Base.pure Issuing'dispute GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disputed_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "evidence")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
data Issuing'transaction
    = Issuing'transaction {issuing'transactionAmount :: GHC.Integer.Type.Integer,
                           issuing'transactionAuthorization :: (GHC.Maybe.Maybe Issuing'transactionAuthorization'Variants),
                           issuing'transactionBalanceTransaction :: (GHC.Maybe.Maybe Issuing'transactionBalanceTransaction'Variants),
                           issuing'transactionCard :: Issuing'transactionCard'Variants,
                           issuing'transactionCardholder :: (GHC.Maybe.Maybe Issuing'transactionCardholder'Variants),
                           issuing'transactionCreated :: GHC.Integer.Type.Integer,
                           issuing'transactionCurrency :: GHC.Base.String,
                           issuing'transactionDispute :: (GHC.Maybe.Maybe Issuing'transactionDispute'Variants),
                           issuing'transactionId :: GHC.Base.String,
                           issuing'transactionLivemode :: GHC.Types.Bool,
                           issuing'transactionMerchantAmount :: GHC.Integer.Type.Integer,
                           issuing'transactionMerchantCurrency :: GHC.Base.String,
                           issuing'transactionMerchantData :: IssuingAuthorizationMerchantData,
                           issuing'transactionMetadata :: Issuing'transactionMetadata',
                           issuing'transactionObject :: Issuing'transactionObject',
                           issuing'transactionType :: Issuing'transactionType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Issuing'transactionAuthorization'Variants
    = Issuing'transactionAuthorization'Variant1 Issuing'authorization
    | Issuing'transactionAuthorization'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'transactionAuthorization'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'transactionAuthorization'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'transactionBalanceTransaction'Variants
    = Issuing'transactionBalanceTransaction'Variant1 BalanceTransaction
    | Issuing'transactionBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'transactionBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'transactionBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'transactionCard'Variants
    = Issuing'transactionCard'Variant1 Issuing'card
    | Issuing'transactionCard'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'transactionCard'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'transactionCard'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'transactionCardholder'Variants
    = Issuing'transactionCardholder'Variant1 Issuing'cardholder
    | Issuing'transactionCardholder'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'transactionCardholder'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'transactionCardholder'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'transactionDispute'Variants
    = Issuing'transactionDispute'Variant1 Issuing'dispute
    | Issuing'transactionDispute'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Issuing'transactionDispute'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Issuing'transactionDispute'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Issuing'transactionMetadata'
    = Issuing'transactionMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'transactionMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transactionMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'transactionMetadata'" (\obj -> GHC.Base.pure Issuing'transactionMetadata')
data Issuing'transactionObject'
    = Issuing'transactionObject'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'transactionObject'EnumTyped GHC.Base.String
    | Issuing'transactionObject'EnumStringIssuing'transaction
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'transactionObject'
    where toJSON (Issuing'transactionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'transactionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'transactionObject'EnumStringIssuing'transaction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.transaction"
instance Data.Aeson.FromJSON Issuing'transactionObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "issuing.transaction")
                                          then Issuing'transactionObject'EnumStringIssuing'transaction
                                          else Issuing'transactionObject'EnumOther val)
data Issuing'transactionType'
    = Issuing'transactionType'EnumOther Data.Aeson.Types.Internal.Value
    | Issuing'transactionType'EnumTyped GHC.Base.String
    | Issuing'transactionType'EnumStringCapture
    | Issuing'transactionType'EnumStringCashWithdrawal
    | Issuing'transactionType'EnumStringDispute
    | Issuing'transactionType'EnumStringDisputeLoss
    | Issuing'transactionType'EnumStringRefund
    | Issuing'transactionType'EnumStringRefundReversal
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Issuing'transactionType'
    where toJSON (Issuing'transactionType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'transactionType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Issuing'transactionType'EnumStringCapture) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "capture"
          toJSON (Issuing'transactionType'EnumStringCashWithdrawal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cash_withdrawal"
          toJSON (Issuing'transactionType'EnumStringDispute) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dispute"
          toJSON (Issuing'transactionType'EnumStringDisputeLoss) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dispute_loss"
          toJSON (Issuing'transactionType'EnumStringRefund) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund"
          toJSON (Issuing'transactionType'EnumStringRefundReversal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund_reversal"
instance Data.Aeson.FromJSON Issuing'transactionType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "capture")
                                          then Issuing'transactionType'EnumStringCapture
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cash_withdrawal")
                                                then Issuing'transactionType'EnumStringCashWithdrawal
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dispute")
                                                      then Issuing'transactionType'EnumStringDispute
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "dispute_loss")
                                                            then Issuing'transactionType'EnumStringDisputeLoss
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund")
                                                                  then Issuing'transactionType'EnumStringRefund
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund_reversal")
                                                                        then Issuing'transactionType'EnumStringRefundReversal
                                                                        else Issuing'transactionType'EnumOther val)
instance Data.Aeson.ToJSON Issuing'transaction
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (issuing'transactionAmount obj) : (Data.Aeson..=) "authorization" (issuing'transactionAuthorization obj) : (Data.Aeson..=) "balance_transaction" (issuing'transactionBalanceTransaction obj) : (Data.Aeson..=) "card" (issuing'transactionCard obj) : (Data.Aeson..=) "cardholder" (issuing'transactionCardholder obj) : (Data.Aeson..=) "created" (issuing'transactionCreated obj) : (Data.Aeson..=) "currency" (issuing'transactionCurrency obj) : (Data.Aeson..=) "dispute" (issuing'transactionDispute obj) : (Data.Aeson..=) "id" (issuing'transactionId obj) : (Data.Aeson..=) "livemode" (issuing'transactionLivemode obj) : (Data.Aeson..=) "merchant_amount" (issuing'transactionMerchantAmount obj) : (Data.Aeson..=) "merchant_currency" (issuing'transactionMerchantCurrency obj) : (Data.Aeson..=) "merchant_data" (issuing'transactionMerchantData obj) : (Data.Aeson..=) "metadata" (issuing'transactionMetadata obj) : (Data.Aeson..=) "object" (issuing'transactionObject obj) : (Data.Aeson..=) "type" (issuing'transactionType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (issuing'transactionAmount obj) GHC.Base.<> ((Data.Aeson..=) "authorization" (issuing'transactionAuthorization obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (issuing'transactionBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "card" (issuing'transactionCard obj) GHC.Base.<> ((Data.Aeson..=) "cardholder" (issuing'transactionCardholder obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuing'transactionCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (issuing'transactionCurrency obj) GHC.Base.<> ((Data.Aeson..=) "dispute" (issuing'transactionDispute obj) GHC.Base.<> ((Data.Aeson..=) "id" (issuing'transactionId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (issuing'transactionLivemode obj) GHC.Base.<> ((Data.Aeson..=) "merchant_amount" (issuing'transactionMerchantAmount obj) GHC.Base.<> ((Data.Aeson..=) "merchant_currency" (issuing'transactionMerchantCurrency obj) GHC.Base.<> ((Data.Aeson..=) "merchant_data" (issuing'transactionMerchantData obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (issuing'transactionMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuing'transactionObject obj) GHC.Base.<> (Data.Aeson..=) "type" (issuing'transactionType obj))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transaction
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'transaction" (\obj -> (((((((((((((((GHC.Base.pure Issuing'transaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cardholder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data IssuingCardholderIdDocument
    = IssuingCardholderIdDocument {issuingCardholderIdDocumentBack :: (GHC.Maybe.Maybe IssuingCardholderIdDocumentBack'Variants),
                                   issuingCardholderIdDocumentFront :: (GHC.Maybe.Maybe IssuingCardholderIdDocumentFront'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingCardholderIdDocumentBack'Variants
    = IssuingCardholderIdDocumentBack'Variant1 File
    | IssuingCardholderIdDocumentBack'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingCardholderIdDocumentBack'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingCardholderIdDocumentBack'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data IssuingCardholderIdDocumentFront'Variants
    = IssuingCardholderIdDocumentFront'Variant1 File
    | IssuingCardholderIdDocumentFront'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingCardholderIdDocumentFront'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingCardholderIdDocumentFront'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingCardholderIdDocument
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "back" (issuingCardholderIdDocumentBack obj) : (Data.Aeson..=) "front" (issuingCardholderIdDocumentFront obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "back" (issuingCardholderIdDocumentBack obj) GHC.Base.<> (Data.Aeson..=) "front" (issuingCardholderIdDocumentFront obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderIdDocument
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderIdDocument" (\obj -> (GHC.Base.pure IssuingCardholderIdDocument GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "front"))
data IssuingCardholderIndividual
    = IssuingCardholderIndividual {issuingCardholderIndividualDob :: (GHC.Maybe.Maybe IssuingCardholderIndividualDob'),
                                   issuingCardholderIndividualFirstName :: GHC.Base.String,
                                   issuingCardholderIndividualLastName :: GHC.Base.String,
                                   issuingCardholderIndividualVerification :: (GHC.Maybe.Maybe IssuingCardholderIndividualVerification')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingCardholderIndividualDob'
    = IssuingCardholderIndividualDob' {issuingCardholderIndividualDob'Day :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                       issuingCardholderIndividualDob'Month :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                       issuingCardholderIndividualDob'Year :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON IssuingCardholderIndividualDob'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "day" (issuingCardholderIndividualDob'Day obj) : (Data.Aeson..=) "month" (issuingCardholderIndividualDob'Month obj) : (Data.Aeson..=) "year" (issuingCardholderIndividualDob'Year obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "day" (issuingCardholderIndividualDob'Day obj) GHC.Base.<> ((Data.Aeson..=) "month" (issuingCardholderIndividualDob'Month obj) GHC.Base.<> (Data.Aeson..=) "year" (issuingCardholderIndividualDob'Year obj)))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderIndividualDob'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderIndividualDob'" (\obj -> ((GHC.Base.pure IssuingCardholderIndividualDob' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "day")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "year"))
data IssuingCardholderIndividualVerification'
    = IssuingCardholderIndividualVerification' {issuingCardholderIndividualVerification'Document :: (GHC.Maybe.Maybe IssuingCardholderIndividualVerification'Document')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingCardholderIndividualVerification'Document'
    = IssuingCardholderIndividualVerification'Document' {issuingCardholderIndividualVerification'Document'Back :: (GHC.Maybe.Maybe IssuingCardholderIndividualVerification'Document'Back'Variants),
                                                         issuingCardholderIndividualVerification'Document'Front :: (GHC.Maybe.Maybe IssuingCardholderIndividualVerification'Document'Front'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingCardholderIndividualVerification'Document'Back'Variants
    = IssuingCardholderIndividualVerification'Document'Back'Variant1 File
    | IssuingCardholderIndividualVerification'Document'Back'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingCardholderIndividualVerification'Document'Back'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingCardholderIndividualVerification'Document'Back'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data IssuingCardholderIndividualVerification'Document'Front'Variants
    = IssuingCardholderIndividualVerification'Document'Front'Variant1 File
    | IssuingCardholderIndividualVerification'Document'Front'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingCardholderIndividualVerification'Document'Front'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingCardholderIndividualVerification'Document'Front'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingCardholderIndividualVerification'Document'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "back" (issuingCardholderIndividualVerification'Document'Back obj) : (Data.Aeson..=) "front" (issuingCardholderIndividualVerification'Document'Front obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "back" (issuingCardholderIndividualVerification'Document'Back obj) GHC.Base.<> (Data.Aeson..=) "front" (issuingCardholderIndividualVerification'Document'Front obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderIndividualVerification'Document'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderIndividualVerification'Document'" (\obj -> (GHC.Base.pure IssuingCardholderIndividualVerification'Document' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "front"))
instance Data.Aeson.ToJSON IssuingCardholderIndividualVerification'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "document" (issuingCardholderIndividualVerification'Document obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "document" (issuingCardholderIndividualVerification'Document obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderIndividualVerification'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderIndividualVerification'" (\obj -> GHC.Base.pure IssuingCardholderIndividualVerification' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "document"))
instance Data.Aeson.ToJSON IssuingCardholderIndividual
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dob" (issuingCardholderIndividualDob obj) : (Data.Aeson..=) "first_name" (issuingCardholderIndividualFirstName obj) : (Data.Aeson..=) "last_name" (issuingCardholderIndividualLastName obj) : (Data.Aeson..=) "verification" (issuingCardholderIndividualVerification obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dob" (issuingCardholderIndividualDob obj) GHC.Base.<> ((Data.Aeson..=) "first_name" (issuingCardholderIndividualFirstName obj) GHC.Base.<> ((Data.Aeson..=) "last_name" (issuingCardholderIndividualLastName obj) GHC.Base.<> (Data.Aeson..=) "verification" (issuingCardholderIndividualVerification obj))))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderIndividual
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderIndividual" (\obj -> (((GHC.Base.pure IssuingCardholderIndividual GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dob")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verification"))
data IssuingCardholderVerification
    = IssuingCardholderVerification {issuingCardholderVerificationDocument :: (GHC.Maybe.Maybe IssuingCardholderVerificationDocument')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingCardholderVerificationDocument'
    = IssuingCardholderVerificationDocument' {issuingCardholderVerificationDocument'Back :: (GHC.Maybe.Maybe IssuingCardholderVerificationDocument'Back'Variants),
                                              issuingCardholderVerificationDocument'Front :: (GHC.Maybe.Maybe IssuingCardholderVerificationDocument'Front'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingCardholderVerificationDocument'Back'Variants
    = IssuingCardholderVerificationDocument'Back'Variant1 File
    | IssuingCardholderVerificationDocument'Back'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingCardholderVerificationDocument'Back'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingCardholderVerificationDocument'Back'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data IssuingCardholderVerificationDocument'Front'Variants
    = IssuingCardholderVerificationDocument'Front'Variant1 File
    | IssuingCardholderVerificationDocument'Front'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingCardholderVerificationDocument'Front'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingCardholderVerificationDocument'Front'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingCardholderVerificationDocument'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "back" (issuingCardholderVerificationDocument'Back obj) : (Data.Aeson..=) "front" (issuingCardholderVerificationDocument'Front obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "back" (issuingCardholderVerificationDocument'Back obj) GHC.Base.<> (Data.Aeson..=) "front" (issuingCardholderVerificationDocument'Front obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderVerificationDocument'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderVerificationDocument'" (\obj -> (GHC.Base.pure IssuingCardholderVerificationDocument' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "front"))
instance Data.Aeson.ToJSON IssuingCardholderVerification
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "document" (issuingCardholderVerificationDocument obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "document" (issuingCardholderVerificationDocument obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderVerification
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderVerification" (\obj -> GHC.Base.pure IssuingCardholderVerification GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "document"))
data IssuingDisputeDuplicateEvidence
    = IssuingDisputeDuplicateEvidence {issuingDisputeDuplicateEvidenceDisputeExplanation :: (GHC.Maybe.Maybe GHC.Base.String),
                                       issuingDisputeDuplicateEvidenceOriginalTransaction :: (GHC.Maybe.Maybe GHC.Base.String),
                                       issuingDisputeDuplicateEvidenceUncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeDuplicateEvidenceUncategorizedFile'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingDisputeDuplicateEvidenceUncategorizedFile'Variants
    = IssuingDisputeDuplicateEvidenceUncategorizedFile'Variant1 File
    | IssuingDisputeDuplicateEvidenceUncategorizedFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingDisputeDuplicateEvidenceUncategorizedFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingDisputeDuplicateEvidenceUncategorizedFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingDisputeDuplicateEvidence
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeDuplicateEvidenceDisputeExplanation obj) : (Data.Aeson..=) "original_transaction" (issuingDisputeDuplicateEvidenceOriginalTransaction obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeDuplicateEvidenceUncategorizedFile obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeDuplicateEvidenceDisputeExplanation obj) GHC.Base.<> ((Data.Aeson..=) "original_transaction" (issuingDisputeDuplicateEvidenceOriginalTransaction obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeDuplicateEvidenceUncategorizedFile obj)))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeDuplicateEvidence
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeDuplicateEvidence" (\obj -> ((GHC.Base.pure IssuingDisputeDuplicateEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "original_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))
data IssuingDisputeEvidence
    = IssuingDisputeEvidence {issuingDisputeEvidenceDuplicate :: (GHC.Maybe.Maybe IssuingDisputeEvidenceDuplicate'),
                              issuingDisputeEvidenceFraudulent :: (GHC.Maybe.Maybe IssuingDisputeEvidenceFraudulent'),
                              issuingDisputeEvidenceOther :: (GHC.Maybe.Maybe IssuingDisputeEvidenceOther'),
                              issuingDisputeEvidenceProductNotReceived :: (GHC.Maybe.Maybe IssuingDisputeEvidenceProductNotReceived')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingDisputeEvidenceDuplicate'
    = IssuingDisputeEvidenceDuplicate' {issuingDisputeEvidenceDuplicate'DisputeExplanation :: (GHC.Maybe.Maybe GHC.Base.String),
                                        issuingDisputeEvidenceDuplicate'OriginalTransaction :: (GHC.Maybe.Maybe GHC.Base.String),
                                        issuingDisputeEvidenceDuplicate'UncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variants
    = IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variant1 File
    | IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingDisputeEvidenceDuplicate'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceDuplicate'DisputeExplanation obj) : (Data.Aeson..=) "original_transaction" (issuingDisputeEvidenceDuplicate'OriginalTransaction obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceDuplicate'UncategorizedFile obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceDuplicate'DisputeExplanation obj) GHC.Base.<> ((Data.Aeson..=) "original_transaction" (issuingDisputeEvidenceDuplicate'OriginalTransaction obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceDuplicate'UncategorizedFile obj)))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceDuplicate'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidenceDuplicate'" (\obj -> ((GHC.Base.pure IssuingDisputeEvidenceDuplicate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "original_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))
data IssuingDisputeEvidenceFraudulent'
    = IssuingDisputeEvidenceFraudulent' {issuingDisputeEvidenceFraudulent'DisputeExplanation :: (GHC.Maybe.Maybe GHC.Base.String),
                                         issuingDisputeEvidenceFraudulent'UncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variants
    = IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variant1 File
    | IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingDisputeEvidenceFraudulent'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceFraudulent'DisputeExplanation obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceFraudulent'UncategorizedFile obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceFraudulent'DisputeExplanation obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceFraudulent'UncategorizedFile obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceFraudulent'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidenceFraudulent'" (\obj -> (GHC.Base.pure IssuingDisputeEvidenceFraudulent' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))
data IssuingDisputeEvidenceOther'
    = IssuingDisputeEvidenceOther' {issuingDisputeEvidenceOther'DisputeExplanation :: (GHC.Maybe.Maybe GHC.Base.String),
                                    issuingDisputeEvidenceOther'UncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeEvidenceOther'UncategorizedFile'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingDisputeEvidenceOther'UncategorizedFile'Variants
    = IssuingDisputeEvidenceOther'UncategorizedFile'Variant1 File
    | IssuingDisputeEvidenceOther'UncategorizedFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingDisputeEvidenceOther'UncategorizedFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingDisputeEvidenceOther'UncategorizedFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingDisputeEvidenceOther'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceOther'DisputeExplanation obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceOther'UncategorizedFile obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceOther'DisputeExplanation obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceOther'UncategorizedFile obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceOther'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidenceOther'" (\obj -> (GHC.Base.pure IssuingDisputeEvidenceOther' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))
data IssuingDisputeEvidenceProductNotReceived'
    = IssuingDisputeEvidenceProductNotReceived' {issuingDisputeEvidenceProductNotReceived'DisputeExplanation :: (GHC.Maybe.Maybe GHC.Base.String),
                                                 issuingDisputeEvidenceProductNotReceived'UncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variants
    = IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variant1 File
    | IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingDisputeEvidenceProductNotReceived'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceProductNotReceived'DisputeExplanation obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceProductNotReceived'UncategorizedFile obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceProductNotReceived'DisputeExplanation obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceProductNotReceived'UncategorizedFile obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceProductNotReceived'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidenceProductNotReceived'" (\obj -> (GHC.Base.pure IssuingDisputeEvidenceProductNotReceived' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))
instance Data.Aeson.ToJSON IssuingDisputeEvidence
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "duplicate" (issuingDisputeEvidenceDuplicate obj) : (Data.Aeson..=) "fraudulent" (issuingDisputeEvidenceFraudulent obj) : (Data.Aeson..=) "other" (issuingDisputeEvidenceOther obj) : (Data.Aeson..=) "product_not_received" (issuingDisputeEvidenceProductNotReceived obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "duplicate" (issuingDisputeEvidenceDuplicate obj) GHC.Base.<> ((Data.Aeson..=) "fraudulent" (issuingDisputeEvidenceFraudulent obj) GHC.Base.<> ((Data.Aeson..=) "other" (issuingDisputeEvidenceOther obj) GHC.Base.<> (Data.Aeson..=) "product_not_received" (issuingDisputeEvidenceProductNotReceived obj))))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidence
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidence" (\obj -> (((GHC.Base.pure IssuingDisputeEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "duplicate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fraudulent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "other")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_not_received"))
data IssuingDisputeFraudulentEvidence
    = IssuingDisputeFraudulentEvidence {issuingDisputeFraudulentEvidenceDisputeExplanation :: (GHC.Maybe.Maybe GHC.Base.String),
                                        issuingDisputeFraudulentEvidenceUncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeFraudulentEvidenceUncategorizedFile'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingDisputeFraudulentEvidenceUncategorizedFile'Variants
    = IssuingDisputeFraudulentEvidenceUncategorizedFile'Variant1 File
    | IssuingDisputeFraudulentEvidenceUncategorizedFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingDisputeFraudulentEvidenceUncategorizedFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingDisputeFraudulentEvidenceUncategorizedFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingDisputeFraudulentEvidence
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeFraudulentEvidenceDisputeExplanation obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeFraudulentEvidenceUncategorizedFile obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeFraudulentEvidenceDisputeExplanation obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeFraudulentEvidenceUncategorizedFile obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeFraudulentEvidence
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeFraudulentEvidence" (\obj -> (GHC.Base.pure IssuingDisputeFraudulentEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))
data IssuingDisputeOtherEvidence
    = IssuingDisputeOtherEvidence {issuingDisputeOtherEvidenceDisputeExplanation :: GHC.Base.String,
                                   issuingDisputeOtherEvidenceUncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeOtherEvidenceUncategorizedFile'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingDisputeOtherEvidenceUncategorizedFile'Variants
    = IssuingDisputeOtherEvidenceUncategorizedFile'Variant1 File
    | IssuingDisputeOtherEvidenceUncategorizedFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingDisputeOtherEvidenceUncategorizedFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingDisputeOtherEvidenceUncategorizedFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingDisputeOtherEvidence
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeOtherEvidenceDisputeExplanation obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeOtherEvidenceUncategorizedFile obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeOtherEvidenceDisputeExplanation obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeOtherEvidenceUncategorizedFile obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeOtherEvidence
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeOtherEvidence" (\obj -> (GHC.Base.pure IssuingDisputeOtherEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))
data IssuingDisputeProductNotReceivedEvidence
    = IssuingDisputeProductNotReceivedEvidence {issuingDisputeProductNotReceivedEvidenceDisputeExplanation :: (GHC.Maybe.Maybe GHC.Base.String),
                                                issuingDisputeProductNotReceivedEvidenceUncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeProductNotReceivedEvidenceUncategorizedFile'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data IssuingDisputeProductNotReceivedEvidenceUncategorizedFile'Variants
    = IssuingDisputeProductNotReceivedEvidenceUncategorizedFile'Variant1 File
    | IssuingDisputeProductNotReceivedEvidenceUncategorizedFile'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON IssuingDisputeProductNotReceivedEvidenceUncategorizedFile'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON IssuingDisputeProductNotReceivedEvidenceUncategorizedFile'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON IssuingDisputeProductNotReceivedEvidence
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeProductNotReceivedEvidenceDisputeExplanation obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeProductNotReceivedEvidenceUncategorizedFile obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeProductNotReceivedEvidenceDisputeExplanation obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeProductNotReceivedEvidenceUncategorizedFile obj))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeProductNotReceivedEvidence
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeProductNotReceivedEvidence" (\obj -> (GHC.Base.pure IssuingDisputeProductNotReceivedEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))
data LegalEntityCompany
    = LegalEntityCompany {legalEntityCompanyAddress :: (GHC.Maybe.Maybe Address),
                          legalEntityCompanyAddressKana :: (GHC.Maybe.Maybe LegalEntityCompanyAddressKana'),
                          legalEntityCompanyAddressKanji :: (GHC.Maybe.Maybe LegalEntityCompanyAddressKanji'),
                          legalEntityCompanyDirectorsProvided :: (GHC.Maybe.Maybe GHC.Types.Bool),
                          legalEntityCompanyExecutivesProvided :: (GHC.Maybe.Maybe GHC.Types.Bool),
                          legalEntityCompanyName :: (GHC.Maybe.Maybe GHC.Base.String),
                          legalEntityCompanyNameKana :: (GHC.Maybe.Maybe GHC.Base.String),
                          legalEntityCompanyNameKanji :: (GHC.Maybe.Maybe GHC.Base.String),
                          legalEntityCompanyOwnersProvided :: (GHC.Maybe.Maybe GHC.Types.Bool),
                          legalEntityCompanyPhone :: (GHC.Maybe.Maybe GHC.Base.String),
                          legalEntityCompanyStructure :: (GHC.Maybe.Maybe LegalEntityCompanyStructure'),
                          legalEntityCompanyTaxIdProvided :: (GHC.Maybe.Maybe GHC.Types.Bool),
                          legalEntityCompanyTaxIdRegistrar :: (GHC.Maybe.Maybe GHC.Base.String),
                          legalEntityCompanyVatIdProvided :: (GHC.Maybe.Maybe GHC.Types.Bool),
                          legalEntityCompanyVerification :: (GHC.Maybe.Maybe LegalEntityCompanyVerification')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data LegalEntityCompanyAddressKana'
    = LegalEntityCompanyAddressKana' {legalEntityCompanyAddressKana'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                      legalEntityCompanyAddressKana'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                      legalEntityCompanyAddressKana'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                      legalEntityCompanyAddressKana'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                      legalEntityCompanyAddressKana'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                      legalEntityCompanyAddressKana'State :: (GHC.Maybe.Maybe GHC.Base.String),
                                      legalEntityCompanyAddressKana'Town :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LegalEntityCompanyAddressKana'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (legalEntityCompanyAddressKana'City obj) : (Data.Aeson..=) "country" (legalEntityCompanyAddressKana'Country obj) : (Data.Aeson..=) "line1" (legalEntityCompanyAddressKana'Line1 obj) : (Data.Aeson..=) "line2" (legalEntityCompanyAddressKana'Line2 obj) : (Data.Aeson..=) "postal_code" (legalEntityCompanyAddressKana'PostalCode obj) : (Data.Aeson..=) "state" (legalEntityCompanyAddressKana'State obj) : (Data.Aeson..=) "town" (legalEntityCompanyAddressKana'Town obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (legalEntityCompanyAddressKana'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (legalEntityCompanyAddressKana'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (legalEntityCompanyAddressKana'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (legalEntityCompanyAddressKana'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (legalEntityCompanyAddressKana'PostalCode obj) GHC.Base.<> ((Data.Aeson..=) "state" (legalEntityCompanyAddressKana'State obj) GHC.Base.<> (Data.Aeson..=) "town" (legalEntityCompanyAddressKana'Town obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON LegalEntityCompanyAddressKana'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LegalEntityCompanyAddressKana'" (\obj -> ((((((GHC.Base.pure LegalEntityCompanyAddressKana' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "town"))
data LegalEntityCompanyAddressKanji'
    = LegalEntityCompanyAddressKanji' {legalEntityCompanyAddressKanji'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                       legalEntityCompanyAddressKanji'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                       legalEntityCompanyAddressKanji'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                       legalEntityCompanyAddressKanji'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                       legalEntityCompanyAddressKanji'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                       legalEntityCompanyAddressKanji'State :: (GHC.Maybe.Maybe GHC.Base.String),
                                       legalEntityCompanyAddressKanji'Town :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LegalEntityCompanyAddressKanji'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (legalEntityCompanyAddressKanji'City obj) : (Data.Aeson..=) "country" (legalEntityCompanyAddressKanji'Country obj) : (Data.Aeson..=) "line1" (legalEntityCompanyAddressKanji'Line1 obj) : (Data.Aeson..=) "line2" (legalEntityCompanyAddressKanji'Line2 obj) : (Data.Aeson..=) "postal_code" (legalEntityCompanyAddressKanji'PostalCode obj) : (Data.Aeson..=) "state" (legalEntityCompanyAddressKanji'State obj) : (Data.Aeson..=) "town" (legalEntityCompanyAddressKanji'Town obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (legalEntityCompanyAddressKanji'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (legalEntityCompanyAddressKanji'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (legalEntityCompanyAddressKanji'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (legalEntityCompanyAddressKanji'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (legalEntityCompanyAddressKanji'PostalCode obj) GHC.Base.<> ((Data.Aeson..=) "state" (legalEntityCompanyAddressKanji'State obj) GHC.Base.<> (Data.Aeson..=) "town" (legalEntityCompanyAddressKanji'Town obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON LegalEntityCompanyAddressKanji'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LegalEntityCompanyAddressKanji'" (\obj -> ((((((GHC.Base.pure LegalEntityCompanyAddressKanji' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "town"))
data LegalEntityCompanyStructure'
    = LegalEntityCompanyStructure'EnumOther Data.Aeson.Types.Internal.Value
    | LegalEntityCompanyStructure'EnumTyped GHC.Base.String
    | LegalEntityCompanyStructure'EnumStringGovernmentInstrumentality
    | LegalEntityCompanyStructure'EnumStringGovernmentalUnit
    | LegalEntityCompanyStructure'EnumStringIncorporatedNonProfit
    | LegalEntityCompanyStructure'EnumStringMultiMemberLlc
    | LegalEntityCompanyStructure'EnumStringPrivateCorporation
    | LegalEntityCompanyStructure'EnumStringPrivatePartnership
    | LegalEntityCompanyStructure'EnumStringPublicCorporation
    | LegalEntityCompanyStructure'EnumStringPublicPartnership
    | LegalEntityCompanyStructure'EnumStringTaxExemptGovernmentInstrumentality
    | LegalEntityCompanyStructure'EnumStringUnincorporatedAssociation
    | LegalEntityCompanyStructure'EnumStringUnincorporatedNonProfit
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LegalEntityCompanyStructure'
    where toJSON (LegalEntityCompanyStructure'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LegalEntityCompanyStructure'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LegalEntityCompanyStructure'EnumStringGovernmentInstrumentality) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_instrumentality"
          toJSON (LegalEntityCompanyStructure'EnumStringGovernmentalUnit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "governmental_unit"
          toJSON (LegalEntityCompanyStructure'EnumStringIncorporatedNonProfit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "incorporated_non_profit"
          toJSON (LegalEntityCompanyStructure'EnumStringMultiMemberLlc) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multi_member_llc"
          toJSON (LegalEntityCompanyStructure'EnumStringPrivateCorporation) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private_corporation"
          toJSON (LegalEntityCompanyStructure'EnumStringPrivatePartnership) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private_partnership"
          toJSON (LegalEntityCompanyStructure'EnumStringPublicCorporation) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_corporation"
          toJSON (LegalEntityCompanyStructure'EnumStringPublicPartnership) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_partnership"
          toJSON (LegalEntityCompanyStructure'EnumStringTaxExemptGovernmentInstrumentality) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_exempt_government_instrumentality"
          toJSON (LegalEntityCompanyStructure'EnumStringUnincorporatedAssociation) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unincorporated_association"
          toJSON (LegalEntityCompanyStructure'EnumStringUnincorporatedNonProfit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unincorporated_non_profit"
instance Data.Aeson.FromJSON LegalEntityCompanyStructure'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_instrumentality")
                                          then LegalEntityCompanyStructure'EnumStringGovernmentInstrumentality
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "governmental_unit")
                                                then LegalEntityCompanyStructure'EnumStringGovernmentalUnit
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "incorporated_non_profit")
                                                      then LegalEntityCompanyStructure'EnumStringIncorporatedNonProfit
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multi_member_llc")
                                                            then LegalEntityCompanyStructure'EnumStringMultiMemberLlc
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private_corporation")
                                                                  then LegalEntityCompanyStructure'EnumStringPrivateCorporation
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "private_partnership")
                                                                        then LegalEntityCompanyStructure'EnumStringPrivatePartnership
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_corporation")
                                                                              then LegalEntityCompanyStructure'EnumStringPublicCorporation
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "public_partnership")
                                                                                    then LegalEntityCompanyStructure'EnumStringPublicPartnership
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_exempt_government_instrumentality")
                                                                                          then LegalEntityCompanyStructure'EnumStringTaxExemptGovernmentInstrumentality
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unincorporated_association")
                                                                                                then LegalEntityCompanyStructure'EnumStringUnincorporatedAssociation
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unincorporated_non_profit")
                                                                                                      then LegalEntityCompanyStructure'EnumStringUnincorporatedNonProfit
                                                                                                      else LegalEntityCompanyStructure'EnumOther val)
data LegalEntityCompanyVerification'
    = LegalEntityCompanyVerification' {legalEntityCompanyVerification'Document :: (GHC.Maybe.Maybe LegalEntityCompanyVerificationDocument)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LegalEntityCompanyVerification'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "document" (legalEntityCompanyVerification'Document obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "document" (legalEntityCompanyVerification'Document obj))
instance Data.Aeson.Types.FromJSON.FromJSON LegalEntityCompanyVerification'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LegalEntityCompanyVerification'" (\obj -> GHC.Base.pure LegalEntityCompanyVerification' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "document"))
instance Data.Aeson.ToJSON LegalEntityCompany
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (legalEntityCompanyAddress obj) : (Data.Aeson..=) "address_kana" (legalEntityCompanyAddressKana obj) : (Data.Aeson..=) "address_kanji" (legalEntityCompanyAddressKanji obj) : (Data.Aeson..=) "directors_provided" (legalEntityCompanyDirectorsProvided obj) : (Data.Aeson..=) "executives_provided" (legalEntityCompanyExecutivesProvided obj) : (Data.Aeson..=) "name" (legalEntityCompanyName obj) : (Data.Aeson..=) "name_kana" (legalEntityCompanyNameKana obj) : (Data.Aeson..=) "name_kanji" (legalEntityCompanyNameKanji obj) : (Data.Aeson..=) "owners_provided" (legalEntityCompanyOwnersProvided obj) : (Data.Aeson..=) "phone" (legalEntityCompanyPhone obj) : (Data.Aeson..=) "structure" (legalEntityCompanyStructure obj) : (Data.Aeson..=) "tax_id_provided" (legalEntityCompanyTaxIdProvided obj) : (Data.Aeson..=) "tax_id_registrar" (legalEntityCompanyTaxIdRegistrar obj) : (Data.Aeson..=) "vat_id_provided" (legalEntityCompanyVatIdProvided obj) : (Data.Aeson..=) "verification" (legalEntityCompanyVerification obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (legalEntityCompanyAddress obj) GHC.Base.<> ((Data.Aeson..=) "address_kana" (legalEntityCompanyAddressKana obj) GHC.Base.<> ((Data.Aeson..=) "address_kanji" (legalEntityCompanyAddressKanji obj) GHC.Base.<> ((Data.Aeson..=) "directors_provided" (legalEntityCompanyDirectorsProvided obj) GHC.Base.<> ((Data.Aeson..=) "executives_provided" (legalEntityCompanyExecutivesProvided obj) GHC.Base.<> ((Data.Aeson..=) "name" (legalEntityCompanyName obj) GHC.Base.<> ((Data.Aeson..=) "name_kana" (legalEntityCompanyNameKana obj) GHC.Base.<> ((Data.Aeson..=) "name_kanji" (legalEntityCompanyNameKanji obj) GHC.Base.<> ((Data.Aeson..=) "owners_provided" (legalEntityCompanyOwnersProvided obj) GHC.Base.<> ((Data.Aeson..=) "phone" (legalEntityCompanyPhone obj) GHC.Base.<> ((Data.Aeson..=) "structure" (legalEntityCompanyStructure obj) GHC.Base.<> ((Data.Aeson..=) "tax_id_provided" (legalEntityCompanyTaxIdProvided obj) GHC.Base.<> ((Data.Aeson..=) "tax_id_registrar" (legalEntityCompanyTaxIdRegistrar obj) GHC.Base.<> ((Data.Aeson..=) "vat_id_provided" (legalEntityCompanyVatIdProvided obj) GHC.Base.<> (Data.Aeson..=) "verification" (legalEntityCompanyVerification obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON LegalEntityCompany
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LegalEntityCompany" (\obj -> ((((((((((((((GHC.Base.pure LegalEntityCompany GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "directors_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "executives_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owners_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "structure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_id_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_id_registrar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "vat_id_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verification"))
data LegalEntityCompanyVerification
    = LegalEntityCompanyVerification {legalEntityCompanyVerificationDocument :: LegalEntityCompanyVerificationDocument}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LegalEntityCompanyVerification
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "document" (legalEntityCompanyVerificationDocument obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "document" (legalEntityCompanyVerificationDocument obj))
instance Data.Aeson.Types.FromJSON.FromJSON LegalEntityCompanyVerification
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LegalEntityCompanyVerification" (\obj -> GHC.Base.pure LegalEntityCompanyVerification GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "document"))
data LegalEntityCompanyVerificationDocument
    = LegalEntityCompanyVerificationDocument {legalEntityCompanyVerificationDocumentBack :: (GHC.Maybe.Maybe LegalEntityCompanyVerificationDocumentBack'Variants),
                                              legalEntityCompanyVerificationDocumentDetails :: (GHC.Maybe.Maybe GHC.Base.String),
                                              legalEntityCompanyVerificationDocumentDetailsCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                              legalEntityCompanyVerificationDocumentFront :: (GHC.Maybe.Maybe LegalEntityCompanyVerificationDocumentFront'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data LegalEntityCompanyVerificationDocumentBack'Variants
    = LegalEntityCompanyVerificationDocumentBack'Variant1 File
    | LegalEntityCompanyVerificationDocumentBack'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON LegalEntityCompanyVerificationDocumentBack'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON LegalEntityCompanyVerificationDocumentBack'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data LegalEntityCompanyVerificationDocumentFront'Variants
    = LegalEntityCompanyVerificationDocumentFront'Variant1 File
    | LegalEntityCompanyVerificationDocumentFront'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON LegalEntityCompanyVerificationDocumentFront'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON LegalEntityCompanyVerificationDocumentFront'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON LegalEntityCompanyVerificationDocument
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "back" (legalEntityCompanyVerificationDocumentBack obj) : (Data.Aeson..=) "details" (legalEntityCompanyVerificationDocumentDetails obj) : (Data.Aeson..=) "details_code" (legalEntityCompanyVerificationDocumentDetailsCode obj) : (Data.Aeson..=) "front" (legalEntityCompanyVerificationDocumentFront obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "back" (legalEntityCompanyVerificationDocumentBack obj) GHC.Base.<> ((Data.Aeson..=) "details" (legalEntityCompanyVerificationDocumentDetails obj) GHC.Base.<> ((Data.Aeson..=) "details_code" (legalEntityCompanyVerificationDocumentDetailsCode obj) GHC.Base.<> (Data.Aeson..=) "front" (legalEntityCompanyVerificationDocumentFront obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LegalEntityCompanyVerificationDocument
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LegalEntityCompanyVerificationDocument" (\obj -> (((GHC.Base.pure LegalEntityCompanyVerificationDocument GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "front"))
data LegalEntityPersonVerification
    = LegalEntityPersonVerification {legalEntityPersonVerificationAdditionalDocument :: (GHC.Maybe.Maybe LegalEntityPersonVerificationAdditionalDocument'),
                                     legalEntityPersonVerificationDetails :: (GHC.Maybe.Maybe GHC.Base.String),
                                     legalEntityPersonVerificationDetailsCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                     legalEntityPersonVerificationDocument :: (GHC.Maybe.Maybe LegalEntityPersonVerificationDocument),
                                     legalEntityPersonVerificationStatus :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data LegalEntityPersonVerificationAdditionalDocument'
    = LegalEntityPersonVerificationAdditionalDocument' {legalEntityPersonVerificationAdditionalDocument'Back :: (GHC.Maybe.Maybe LegalEntityPersonVerificationAdditionalDocument'Back'Variants),
                                                        legalEntityPersonVerificationAdditionalDocument'Details :: (GHC.Maybe.Maybe GHC.Base.String),
                                                        legalEntityPersonVerificationAdditionalDocument'DetailsCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                        legalEntityPersonVerificationAdditionalDocument'Front :: (GHC.Maybe.Maybe LegalEntityPersonVerificationAdditionalDocument'Front'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data LegalEntityPersonVerificationAdditionalDocument'Back'Variants
    = LegalEntityPersonVerificationAdditionalDocument'Back'Variant1 File
    | LegalEntityPersonVerificationAdditionalDocument'Back'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON LegalEntityPersonVerificationAdditionalDocument'Back'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON LegalEntityPersonVerificationAdditionalDocument'Back'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data LegalEntityPersonVerificationAdditionalDocument'Front'Variants
    = LegalEntityPersonVerificationAdditionalDocument'Front'Variant1 File
    | LegalEntityPersonVerificationAdditionalDocument'Front'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON LegalEntityPersonVerificationAdditionalDocument'Front'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON LegalEntityPersonVerificationAdditionalDocument'Front'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON LegalEntityPersonVerificationAdditionalDocument'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "back" (legalEntityPersonVerificationAdditionalDocument'Back obj) : (Data.Aeson..=) "details" (legalEntityPersonVerificationAdditionalDocument'Details obj) : (Data.Aeson..=) "details_code" (legalEntityPersonVerificationAdditionalDocument'DetailsCode obj) : (Data.Aeson..=) "front" (legalEntityPersonVerificationAdditionalDocument'Front obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "back" (legalEntityPersonVerificationAdditionalDocument'Back obj) GHC.Base.<> ((Data.Aeson..=) "details" (legalEntityPersonVerificationAdditionalDocument'Details obj) GHC.Base.<> ((Data.Aeson..=) "details_code" (legalEntityPersonVerificationAdditionalDocument'DetailsCode obj) GHC.Base.<> (Data.Aeson..=) "front" (legalEntityPersonVerificationAdditionalDocument'Front obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LegalEntityPersonVerificationAdditionalDocument'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LegalEntityPersonVerificationAdditionalDocument'" (\obj -> (((GHC.Base.pure LegalEntityPersonVerificationAdditionalDocument' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "front"))
instance Data.Aeson.ToJSON LegalEntityPersonVerification
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "additional_document" (legalEntityPersonVerificationAdditionalDocument obj) : (Data.Aeson..=) "details" (legalEntityPersonVerificationDetails obj) : (Data.Aeson..=) "details_code" (legalEntityPersonVerificationDetailsCode obj) : (Data.Aeson..=) "document" (legalEntityPersonVerificationDocument obj) : (Data.Aeson..=) "status" (legalEntityPersonVerificationStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "additional_document" (legalEntityPersonVerificationAdditionalDocument obj) GHC.Base.<> ((Data.Aeson..=) "details" (legalEntityPersonVerificationDetails obj) GHC.Base.<> ((Data.Aeson..=) "details_code" (legalEntityPersonVerificationDetailsCode obj) GHC.Base.<> ((Data.Aeson..=) "document" (legalEntityPersonVerificationDocument obj) GHC.Base.<> (Data.Aeson..=) "status" (legalEntityPersonVerificationStatus obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON LegalEntityPersonVerification
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LegalEntityPersonVerification" (\obj -> ((((GHC.Base.pure LegalEntityPersonVerification GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "additional_document")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "document")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
data LegalEntityPersonVerificationDocument
    = LegalEntityPersonVerificationDocument {legalEntityPersonVerificationDocumentBack :: (GHC.Maybe.Maybe LegalEntityPersonVerificationDocumentBack'Variants),
                                             legalEntityPersonVerificationDocumentDetails :: (GHC.Maybe.Maybe GHC.Base.String),
                                             legalEntityPersonVerificationDocumentDetailsCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                             legalEntityPersonVerificationDocumentFront :: (GHC.Maybe.Maybe LegalEntityPersonVerificationDocumentFront'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data LegalEntityPersonVerificationDocumentBack'Variants
    = LegalEntityPersonVerificationDocumentBack'Variant1 File
    | LegalEntityPersonVerificationDocumentBack'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON LegalEntityPersonVerificationDocumentBack'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON LegalEntityPersonVerificationDocumentBack'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data LegalEntityPersonVerificationDocumentFront'Variants
    = LegalEntityPersonVerificationDocumentFront'Variant1 File
    | LegalEntityPersonVerificationDocumentFront'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON LegalEntityPersonVerificationDocumentFront'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON LegalEntityPersonVerificationDocumentFront'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON LegalEntityPersonVerificationDocument
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "back" (legalEntityPersonVerificationDocumentBack obj) : (Data.Aeson..=) "details" (legalEntityPersonVerificationDocumentDetails obj) : (Data.Aeson..=) "details_code" (legalEntityPersonVerificationDocumentDetailsCode obj) : (Data.Aeson..=) "front" (legalEntityPersonVerificationDocumentFront obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "back" (legalEntityPersonVerificationDocumentBack obj) GHC.Base.<> ((Data.Aeson..=) "details" (legalEntityPersonVerificationDocumentDetails obj) GHC.Base.<> ((Data.Aeson..=) "details_code" (legalEntityPersonVerificationDocumentDetailsCode obj) GHC.Base.<> (Data.Aeson..=) "front" (legalEntityPersonVerificationDocumentFront obj))))
instance Data.Aeson.Types.FromJSON.FromJSON LegalEntityPersonVerificationDocument
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LegalEntityPersonVerificationDocument" (\obj -> (((GHC.Base.pure LegalEntityPersonVerificationDocument GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "front"))
data LineItem
    = LineItem {lineItemAmount :: GHC.Integer.Type.Integer,
                lineItemCurrency :: GHC.Base.String,
                lineItemDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                lineItemDiscountable :: GHC.Types.Bool,
                lineItemId :: GHC.Base.String,
                lineItemInvoiceItem :: (GHC.Maybe.Maybe GHC.Base.String),
                lineItemLivemode :: GHC.Types.Bool,
                lineItemMetadata :: LineItemMetadata',
                lineItemObject :: LineItemObject',
                lineItemPeriod :: InvoiceLineItemPeriod,
                lineItemPlan :: (GHC.Maybe.Maybe LineItemPlan'),
                lineItemProration :: GHC.Types.Bool,
                lineItemQuantity :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                lineItemSubscription :: (GHC.Maybe.Maybe GHC.Base.String),
                lineItemSubscriptionItem :: (GHC.Maybe.Maybe GHC.Base.String),
                lineItemTaxAmounts :: (GHC.Maybe.Maybe ([] InvoiceTaxAmount)),
                lineItemTaxRates :: (GHC.Maybe.Maybe ([] TaxRate)),
                lineItemType :: LineItemType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data LineItemMetadata'
    = LineItemMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON LineItemMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LineItemMetadata'" (\obj -> GHC.Base.pure LineItemMetadata')
data LineItemObject'
    = LineItemObject'EnumOther Data.Aeson.Types.Internal.Value
    | LineItemObject'EnumTyped GHC.Base.String
    | LineItemObject'EnumStringLineItem
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemObject'
    where toJSON (LineItemObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemObject'EnumStringLineItem) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "line_item"
instance Data.Aeson.FromJSON LineItemObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "line_item")
                                          then LineItemObject'EnumStringLineItem
                                          else LineItemObject'EnumOther val)
data LineItemPlan'
    = LineItemPlan' {lineItemPlan'Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     lineItemPlan'AggregateUsage :: (GHC.Maybe.Maybe LineItemPlan'AggregateUsage'),
                     lineItemPlan'Amount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     lineItemPlan'AmountDecimal :: (GHC.Maybe.Maybe GHC.Base.String),
                     lineItemPlan'BillingScheme :: (GHC.Maybe.Maybe LineItemPlan'BillingScheme'),
                     lineItemPlan'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     lineItemPlan'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                     lineItemPlan'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                     lineItemPlan'Interval :: (GHC.Maybe.Maybe LineItemPlan'Interval'),
                     lineItemPlan'IntervalCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     lineItemPlan'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     lineItemPlan'Metadata :: (GHC.Maybe.Maybe LineItemPlan'Metadata'),
                     lineItemPlan'Nickname :: (GHC.Maybe.Maybe GHC.Base.String),
                     lineItemPlan'Object :: (GHC.Maybe.Maybe LineItemPlan'Object'),
                     lineItemPlan'Product :: (GHC.Maybe.Maybe LineItemPlan'Product'Variants),
                     lineItemPlan'Tiers :: (GHC.Maybe.Maybe ([] PlanTier)),
                     lineItemPlan'TiersMode :: (GHC.Maybe.Maybe LineItemPlan'TiersMode'),
                     lineItemPlan'TransformUsage :: (GHC.Maybe.Maybe LineItemPlan'TransformUsage'),
                     lineItemPlan'TrialPeriodDays :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     lineItemPlan'UsageType :: (GHC.Maybe.Maybe LineItemPlan'UsageType')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data LineItemPlan'AggregateUsage'
    = LineItemPlan'AggregateUsage'EnumOther Data.Aeson.Types.Internal.Value
    | LineItemPlan'AggregateUsage'EnumTyped GHC.Base.String
    | LineItemPlan'AggregateUsage'EnumStringLastDuringPeriod
    | LineItemPlan'AggregateUsage'EnumStringLastEver
    | LineItemPlan'AggregateUsage'EnumStringMax
    | LineItemPlan'AggregateUsage'EnumStringSum
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemPlan'AggregateUsage'
    where toJSON (LineItemPlan'AggregateUsage'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'AggregateUsage'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'AggregateUsage'EnumStringLastDuringPeriod) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_during_period"
          toJSON (LineItemPlan'AggregateUsage'EnumStringLastEver) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_ever"
          toJSON (LineItemPlan'AggregateUsage'EnumStringMax) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "max"
          toJSON (LineItemPlan'AggregateUsage'EnumStringSum) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sum"
instance Data.Aeson.FromJSON LineItemPlan'AggregateUsage'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_during_period")
                                          then LineItemPlan'AggregateUsage'EnumStringLastDuringPeriod
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_ever")
                                                then LineItemPlan'AggregateUsage'EnumStringLastEver
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "max")
                                                      then LineItemPlan'AggregateUsage'EnumStringMax
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sum")
                                                            then LineItemPlan'AggregateUsage'EnumStringSum
                                                            else LineItemPlan'AggregateUsage'EnumOther val)
data LineItemPlan'BillingScheme'
    = LineItemPlan'BillingScheme'EnumOther Data.Aeson.Types.Internal.Value
    | LineItemPlan'BillingScheme'EnumTyped GHC.Base.String
    | LineItemPlan'BillingScheme'EnumStringPerUnit
    | LineItemPlan'BillingScheme'EnumStringTiered
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemPlan'BillingScheme'
    where toJSON (LineItemPlan'BillingScheme'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'BillingScheme'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'BillingScheme'EnumStringPerUnit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "per_unit"
          toJSON (LineItemPlan'BillingScheme'EnumStringTiered) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tiered"
instance Data.Aeson.FromJSON LineItemPlan'BillingScheme'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "per_unit")
                                          then LineItemPlan'BillingScheme'EnumStringPerUnit
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tiered")
                                                then LineItemPlan'BillingScheme'EnumStringTiered
                                                else LineItemPlan'BillingScheme'EnumOther val)
data LineItemPlan'Interval'
    = LineItemPlan'Interval'EnumOther Data.Aeson.Types.Internal.Value
    | LineItemPlan'Interval'EnumTyped GHC.Base.String
    | LineItemPlan'Interval'EnumStringDay
    | LineItemPlan'Interval'EnumStringMonth
    | LineItemPlan'Interval'EnumStringWeek
    | LineItemPlan'Interval'EnumStringYear
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemPlan'Interval'
    where toJSON (LineItemPlan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'Interval'EnumStringDay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day"
          toJSON (LineItemPlan'Interval'EnumStringMonth) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month"
          toJSON (LineItemPlan'Interval'EnumStringWeek) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week"
          toJSON (LineItemPlan'Interval'EnumStringYear) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year"
instance Data.Aeson.FromJSON LineItemPlan'Interval'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day")
                                          then LineItemPlan'Interval'EnumStringDay
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month")
                                                then LineItemPlan'Interval'EnumStringMonth
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week")
                                                      then LineItemPlan'Interval'EnumStringWeek
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year")
                                                            then LineItemPlan'Interval'EnumStringYear
                                                            else LineItemPlan'Interval'EnumOther val)
data LineItemPlan'Metadata'
    = LineItemPlan'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemPlan'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LineItemPlan'Metadata'" (\obj -> GHC.Base.pure LineItemPlan'Metadata')
data LineItemPlan'Object'
    = LineItemPlan'Object'EnumOther Data.Aeson.Types.Internal.Value
    | LineItemPlan'Object'EnumTyped GHC.Base.String
    | LineItemPlan'Object'EnumStringPlan
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemPlan'Object'
    where toJSON (LineItemPlan'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'Object'EnumStringPlan) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plan"
instance Data.Aeson.FromJSON LineItemPlan'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plan")
                                          then LineItemPlan'Object'EnumStringPlan
                                          else LineItemPlan'Object'EnumOther val)
data LineItemPlan'Product'Variants
    = LineItemPlan'Product'Variant1 DeletedProduct
    | LineItemPlan'Product'Variant2 Product
    | LineItemPlan'Product'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON LineItemPlan'Product'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON LineItemPlan'Product'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data LineItemPlan'TiersMode'
    = LineItemPlan'TiersMode'EnumOther Data.Aeson.Types.Internal.Value
    | LineItemPlan'TiersMode'EnumTyped GHC.Base.String
    | LineItemPlan'TiersMode'EnumStringGraduated
    | LineItemPlan'TiersMode'EnumStringVolume
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemPlan'TiersMode'
    where toJSON (LineItemPlan'TiersMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'TiersMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'TiersMode'EnumStringGraduated) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "graduated"
          toJSON (LineItemPlan'TiersMode'EnumStringVolume) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume"
instance Data.Aeson.FromJSON LineItemPlan'TiersMode'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "graduated")
                                          then LineItemPlan'TiersMode'EnumStringGraduated
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume")
                                                then LineItemPlan'TiersMode'EnumStringVolume
                                                else LineItemPlan'TiersMode'EnumOther val)
data LineItemPlan'TransformUsage'
    = LineItemPlan'TransformUsage' {lineItemPlan'TransformUsage'DivideBy :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                    lineItemPlan'TransformUsage'Round :: (GHC.Maybe.Maybe LineItemPlan'TransformUsage'Round')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data LineItemPlan'TransformUsage'Round'
    = LineItemPlan'TransformUsage'Round'EnumOther Data.Aeson.Types.Internal.Value
    | LineItemPlan'TransformUsage'Round'EnumTyped GHC.Base.String
    | LineItemPlan'TransformUsage'Round'EnumStringDown
    | LineItemPlan'TransformUsage'Round'EnumStringUp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemPlan'TransformUsage'Round'
    where toJSON (LineItemPlan'TransformUsage'Round'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'TransformUsage'Round'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'TransformUsage'Round'EnumStringDown) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "down"
          toJSON (LineItemPlan'TransformUsage'Round'EnumStringUp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "up"
instance Data.Aeson.FromJSON LineItemPlan'TransformUsage'Round'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "down")
                                          then LineItemPlan'TransformUsage'Round'EnumStringDown
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "up")
                                                then LineItemPlan'TransformUsage'Round'EnumStringUp
                                                else LineItemPlan'TransformUsage'Round'EnumOther val)
instance Data.Aeson.ToJSON LineItemPlan'TransformUsage'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "divide_by" (lineItemPlan'TransformUsage'DivideBy obj) : (Data.Aeson..=) "round" (lineItemPlan'TransformUsage'Round obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "divide_by" (lineItemPlan'TransformUsage'DivideBy obj) GHC.Base.<> (Data.Aeson..=) "round" (lineItemPlan'TransformUsage'Round obj))
instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'TransformUsage'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LineItemPlan'TransformUsage'" (\obj -> (GHC.Base.pure LineItemPlan'TransformUsage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "divide_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "round"))
data LineItemPlan'UsageType'
    = LineItemPlan'UsageType'EnumOther Data.Aeson.Types.Internal.Value
    | LineItemPlan'UsageType'EnumTyped GHC.Base.String
    | LineItemPlan'UsageType'EnumStringLicensed
    | LineItemPlan'UsageType'EnumStringMetered
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemPlan'UsageType'
    where toJSON (LineItemPlan'UsageType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'UsageType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemPlan'UsageType'EnumStringLicensed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "licensed"
          toJSON (LineItemPlan'UsageType'EnumStringMetered) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metered"
instance Data.Aeson.FromJSON LineItemPlan'UsageType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "licensed")
                                          then LineItemPlan'UsageType'EnumStringLicensed
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metered")
                                                then LineItemPlan'UsageType'EnumStringMetered
                                                else LineItemPlan'UsageType'EnumOther val)
instance Data.Aeson.ToJSON LineItemPlan'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (lineItemPlan'Active obj) : (Data.Aeson..=) "aggregate_usage" (lineItemPlan'AggregateUsage obj) : (Data.Aeson..=) "amount" (lineItemPlan'Amount obj) : (Data.Aeson..=) "amount_decimal" (lineItemPlan'AmountDecimal obj) : (Data.Aeson..=) "billing_scheme" (lineItemPlan'BillingScheme obj) : (Data.Aeson..=) "created" (lineItemPlan'Created obj) : (Data.Aeson..=) "currency" (lineItemPlan'Currency obj) : (Data.Aeson..=) "id" (lineItemPlan'Id obj) : (Data.Aeson..=) "interval" (lineItemPlan'Interval obj) : (Data.Aeson..=) "interval_count" (lineItemPlan'IntervalCount obj) : (Data.Aeson..=) "livemode" (lineItemPlan'Livemode obj) : (Data.Aeson..=) "metadata" (lineItemPlan'Metadata obj) : (Data.Aeson..=) "nickname" (lineItemPlan'Nickname obj) : (Data.Aeson..=) "object" (lineItemPlan'Object obj) : (Data.Aeson..=) "product" (lineItemPlan'Product obj) : (Data.Aeson..=) "tiers" (lineItemPlan'Tiers obj) : (Data.Aeson..=) "tiers_mode" (lineItemPlan'TiersMode obj) : (Data.Aeson..=) "transform_usage" (lineItemPlan'TransformUsage obj) : (Data.Aeson..=) "trial_period_days" (lineItemPlan'TrialPeriodDays obj) : (Data.Aeson..=) "usage_type" (lineItemPlan'UsageType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (lineItemPlan'Active obj) GHC.Base.<> ((Data.Aeson..=) "aggregate_usage" (lineItemPlan'AggregateUsage obj) GHC.Base.<> ((Data.Aeson..=) "amount" (lineItemPlan'Amount obj) GHC.Base.<> ((Data.Aeson..=) "amount_decimal" (lineItemPlan'AmountDecimal obj) GHC.Base.<> ((Data.Aeson..=) "billing_scheme" (lineItemPlan'BillingScheme obj) GHC.Base.<> ((Data.Aeson..=) "created" (lineItemPlan'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (lineItemPlan'Currency obj) GHC.Base.<> ((Data.Aeson..=) "id" (lineItemPlan'Id obj) GHC.Base.<> ((Data.Aeson..=) "interval" (lineItemPlan'Interval obj) GHC.Base.<> ((Data.Aeson..=) "interval_count" (lineItemPlan'IntervalCount obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (lineItemPlan'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (lineItemPlan'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "nickname" (lineItemPlan'Nickname obj) GHC.Base.<> ((Data.Aeson..=) "object" (lineItemPlan'Object obj) GHC.Base.<> ((Data.Aeson..=) "product" (lineItemPlan'Product obj) GHC.Base.<> ((Data.Aeson..=) "tiers" (lineItemPlan'Tiers obj) GHC.Base.<> ((Data.Aeson..=) "tiers_mode" (lineItemPlan'TiersMode obj) GHC.Base.<> ((Data.Aeson..=) "transform_usage" (lineItemPlan'TransformUsage obj) GHC.Base.<> ((Data.Aeson..=) "trial_period_days" (lineItemPlan'TrialPeriodDays obj) GHC.Base.<> (Data.Aeson..=) "usage_type" (lineItemPlan'UsageType obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LineItemPlan'" (\obj -> (((((((((((((((((((GHC.Base.pure LineItemPlan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "aggregate_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_scheme")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transform_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_period_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_type"))
data LineItemType'
    = LineItemType'EnumOther Data.Aeson.Types.Internal.Value
    | LineItemType'EnumTyped GHC.Base.String
    | LineItemType'EnumStringInvoiceitem
    | LineItemType'EnumStringSubscription
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON LineItemType'
    where toJSON (LineItemType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (LineItemType'EnumStringInvoiceitem) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoiceitem"
          toJSON (LineItemType'EnumStringSubscription) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription"
instance Data.Aeson.FromJSON LineItemType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invoiceitem")
                                          then LineItemType'EnumStringInvoiceitem
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription")
                                                then LineItemType'EnumStringSubscription
                                                else LineItemType'EnumOther val)
instance Data.Aeson.ToJSON LineItem
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (lineItemAmount obj) : (Data.Aeson..=) "currency" (lineItemCurrency obj) : (Data.Aeson..=) "description" (lineItemDescription obj) : (Data.Aeson..=) "discountable" (lineItemDiscountable obj) : (Data.Aeson..=) "id" (lineItemId obj) : (Data.Aeson..=) "invoice_item" (lineItemInvoiceItem obj) : (Data.Aeson..=) "livemode" (lineItemLivemode obj) : (Data.Aeson..=) "metadata" (lineItemMetadata obj) : (Data.Aeson..=) "object" (lineItemObject obj) : (Data.Aeson..=) "period" (lineItemPeriod obj) : (Data.Aeson..=) "plan" (lineItemPlan obj) : (Data.Aeson..=) "proration" (lineItemProration obj) : (Data.Aeson..=) "quantity" (lineItemQuantity obj) : (Data.Aeson..=) "subscription" (lineItemSubscription obj) : (Data.Aeson..=) "subscription_item" (lineItemSubscriptionItem obj) : (Data.Aeson..=) "tax_amounts" (lineItemTaxAmounts obj) : (Data.Aeson..=) "tax_rates" (lineItemTaxRates obj) : (Data.Aeson..=) "type" (lineItemType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (lineItemAmount obj) GHC.Base.<> ((Data.Aeson..=) "currency" (lineItemCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (lineItemDescription obj) GHC.Base.<> ((Data.Aeson..=) "discountable" (lineItemDiscountable obj) GHC.Base.<> ((Data.Aeson..=) "id" (lineItemId obj) GHC.Base.<> ((Data.Aeson..=) "invoice_item" (lineItemInvoiceItem obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (lineItemLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (lineItemMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (lineItemObject obj) GHC.Base.<> ((Data.Aeson..=) "period" (lineItemPeriod obj) GHC.Base.<> ((Data.Aeson..=) "plan" (lineItemPlan obj) GHC.Base.<> ((Data.Aeson..=) "proration" (lineItemProration obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (lineItemQuantity obj) GHC.Base.<> ((Data.Aeson..=) "subscription" (lineItemSubscription obj) GHC.Base.<> ((Data.Aeson..=) "subscription_item" (lineItemSubscriptionItem obj) GHC.Base.<> ((Data.Aeson..=) "tax_amounts" (lineItemTaxAmounts obj) GHC.Base.<> ((Data.Aeson..=) "tax_rates" (lineItemTaxRates obj) GHC.Base.<> (Data.Aeson..=) "type" (lineItemType obj))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON LineItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LineItem" (\obj -> (((((((((((((((((GHC.Base.pure LineItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discountable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_item")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_item")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_amounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data Mandate
    = Mandate {mandateCustomerAcceptance :: CustomerAcceptance,
               mandateId :: GHC.Base.String,
               mandateLivemode :: GHC.Types.Bool,
               mandateMultiUse :: (GHC.Maybe.Maybe MandateMultiUse),
               mandateObject :: MandateObject',
               mandatePaymentMethod :: MandatePaymentMethod'Variants,
               mandatePaymentMethodDetails :: MandatePaymentMethodDetails,
               mandateSingleUse :: (GHC.Maybe.Maybe MandateSingleUse),
               mandateStatus :: MandateStatus',
               mandateType :: MandateType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data MandateObject'
    = MandateObject'EnumOther Data.Aeson.Types.Internal.Value
    | MandateObject'EnumTyped GHC.Base.String
    | MandateObject'EnumStringMandate
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON MandateObject'
    where toJSON (MandateObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MandateObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MandateObject'EnumStringMandate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mandate"
instance Data.Aeson.FromJSON MandateObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mandate")
                                          then MandateObject'EnumStringMandate
                                          else MandateObject'EnumOther val)
data MandatePaymentMethod'Variants
    = MandatePaymentMethod'Variant1 PaymentMethod
    | MandatePaymentMethod'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON MandatePaymentMethod'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON MandatePaymentMethod'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data MandateStatus'
    = MandateStatus'EnumOther Data.Aeson.Types.Internal.Value
    | MandateStatus'EnumTyped GHC.Base.String
    | MandateStatus'EnumStringActive
    | MandateStatus'EnumStringInactive
    | MandateStatus'EnumStringPending
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON MandateStatus'
    where toJSON (MandateStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MandateStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MandateStatus'EnumStringActive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
          toJSON (MandateStatus'EnumStringInactive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive"
          toJSON (MandateStatus'EnumStringPending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
instance Data.Aeson.FromJSON MandateStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
                                          then MandateStatus'EnumStringActive
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "inactive")
                                                then MandateStatus'EnumStringInactive
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                      then MandateStatus'EnumStringPending
                                                      else MandateStatus'EnumOther val)
data MandateType'
    = MandateType'EnumOther Data.Aeson.Types.Internal.Value
    | MandateType'EnumTyped GHC.Base.String
    | MandateType'EnumStringMultiUse
    | MandateType'EnumStringSingleUse
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON MandateType'
    where toJSON (MandateType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MandateType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (MandateType'EnumStringMultiUse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multi_use"
          toJSON (MandateType'EnumStringSingleUse) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "single_use"
instance Data.Aeson.FromJSON MandateType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multi_use")
                                          then MandateType'EnumStringMultiUse
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "single_use")
                                                then MandateType'EnumStringSingleUse
                                                else MandateType'EnumOther val)
instance Data.Aeson.ToJSON Mandate
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "customer_acceptance" (mandateCustomerAcceptance obj) : (Data.Aeson..=) "id" (mandateId obj) : (Data.Aeson..=) "livemode" (mandateLivemode obj) : (Data.Aeson..=) "multi_use" (mandateMultiUse obj) : (Data.Aeson..=) "object" (mandateObject obj) : (Data.Aeson..=) "payment_method" (mandatePaymentMethod obj) : (Data.Aeson..=) "payment_method_details" (mandatePaymentMethodDetails obj) : (Data.Aeson..=) "single_use" (mandateSingleUse obj) : (Data.Aeson..=) "status" (mandateStatus obj) : (Data.Aeson..=) "type" (mandateType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "customer_acceptance" (mandateCustomerAcceptance obj) GHC.Base.<> ((Data.Aeson..=) "id" (mandateId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (mandateLivemode obj) GHC.Base.<> ((Data.Aeson..=) "multi_use" (mandateMultiUse obj) GHC.Base.<> ((Data.Aeson..=) "object" (mandateObject obj) GHC.Base.<> ((Data.Aeson..=) "payment_method" (mandatePaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "payment_method_details" (mandatePaymentMethodDetails obj) GHC.Base.<> ((Data.Aeson..=) "single_use" (mandateSingleUse obj) GHC.Base.<> ((Data.Aeson..=) "status" (mandateStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (mandateType obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Mandate
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Mandate" (\obj -> (((((((((GHC.Base.pure Mandate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer_acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multi_use")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "single_use")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data Order
    = Order {orderAmount :: GHC.Integer.Type.Integer,
             orderAmountReturned :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
             orderApplication :: (GHC.Maybe.Maybe GHC.Base.String),
             orderApplicationFee :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
             orderCharge :: (GHC.Maybe.Maybe OrderCharge'Variants),
             orderCreated :: GHC.Integer.Type.Integer,
             orderCurrency :: GHC.Base.String,
             orderCustomer :: (GHC.Maybe.Maybe OrderCustomer'Variants),
             orderEmail :: (GHC.Maybe.Maybe GHC.Base.String),
             orderExternalCouponCode :: (GHC.Maybe.Maybe GHC.Base.String),
             orderId :: GHC.Base.String,
             orderItems :: ([] OrderItem),
             orderLivemode :: GHC.Types.Bool,
             orderMetadata :: OrderMetadata',
             orderObject :: OrderObject',
             orderReturns :: (GHC.Maybe.Maybe OrderReturns'),
             orderSelectedShippingMethod :: (GHC.Maybe.Maybe GHC.Base.String),
             orderShipping :: (GHC.Maybe.Maybe OrderShipping'),
             orderShippingMethods :: (GHC.Maybe.Maybe ([] ShippingMethod)),
             orderStatus :: GHC.Base.String,
             orderStatusTransitions :: (GHC.Maybe.Maybe OrderStatusTransitions'),
             orderUpdated :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
             orderUpstreamId :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data OrderCharge'Variants
    = OrderCharge'Variant1 Charge
    | OrderCharge'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON OrderCharge'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON OrderCharge'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data OrderCustomer'Variants
    = OrderCustomer'Variant1 Customer
    | OrderCustomer'Variant2 DeletedCustomer
    | OrderCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON OrderCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON OrderCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data OrderMetadata'
    = OrderMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON OrderMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON OrderMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderMetadata'" (\obj -> GHC.Base.pure OrderMetadata')
data OrderObject'
    = OrderObject'EnumOther Data.Aeson.Types.Internal.Value
    | OrderObject'EnumTyped GHC.Base.String
    | OrderObject'EnumStringOrder
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON OrderObject'
    where toJSON (OrderObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (OrderObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (OrderObject'EnumStringOrder) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "order"
instance Data.Aeson.FromJSON OrderObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "order")
                                          then OrderObject'EnumStringOrder
                                          else OrderObject'EnumOther val)
data OrderReturns'
    = OrderReturns' {orderReturns'Data :: ([] OrderReturn),
                     orderReturns'HasMore :: GHC.Types.Bool,
                     orderReturns'Object :: OrderReturns'Object',
                     orderReturns'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data OrderReturns'Object'
    = OrderReturns'Object'EnumOther Data.Aeson.Types.Internal.Value
    | OrderReturns'Object'EnumTyped GHC.Base.String
    | OrderReturns'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON OrderReturns'Object'
    where toJSON (OrderReturns'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (OrderReturns'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (OrderReturns'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON OrderReturns'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then OrderReturns'Object'EnumStringList
                                          else OrderReturns'Object'EnumOther val)
instance Data.Aeson.ToJSON OrderReturns'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (orderReturns'Data obj) : (Data.Aeson..=) "has_more" (orderReturns'HasMore obj) : (Data.Aeson..=) "object" (orderReturns'Object obj) : (Data.Aeson..=) "url" (orderReturns'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (orderReturns'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (orderReturns'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (orderReturns'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (orderReturns'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON OrderReturns'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderReturns'" (\obj -> (((GHC.Base.pure OrderReturns' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data OrderShipping'
    = OrderShipping' {orderShipping'Address :: (GHC.Maybe.Maybe Address),
                      orderShipping'Carrier :: (GHC.Maybe.Maybe GHC.Base.String),
                      orderShipping'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                      orderShipping'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                      orderShipping'TrackingNumber :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON OrderShipping'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (orderShipping'Address obj) : (Data.Aeson..=) "carrier" (orderShipping'Carrier obj) : (Data.Aeson..=) "name" (orderShipping'Name obj) : (Data.Aeson..=) "phone" (orderShipping'Phone obj) : (Data.Aeson..=) "tracking_number" (orderShipping'TrackingNumber obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (orderShipping'Address obj) GHC.Base.<> ((Data.Aeson..=) "carrier" (orderShipping'Carrier obj) GHC.Base.<> ((Data.Aeson..=) "name" (orderShipping'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (orderShipping'Phone obj) GHC.Base.<> (Data.Aeson..=) "tracking_number" (orderShipping'TrackingNumber obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON OrderShipping'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderShipping'" (\obj -> ((((GHC.Base.pure OrderShipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number"))
data OrderStatusTransitions'
    = OrderStatusTransitions' {orderStatusTransitions'Canceled :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                               orderStatusTransitions'Fulfiled :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                               orderStatusTransitions'Paid :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                               orderStatusTransitions'Returned :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON OrderStatusTransitions'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "canceled" (orderStatusTransitions'Canceled obj) : (Data.Aeson..=) "fulfiled" (orderStatusTransitions'Fulfiled obj) : (Data.Aeson..=) "paid" (orderStatusTransitions'Paid obj) : (Data.Aeson..=) "returned" (orderStatusTransitions'Returned obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "canceled" (orderStatusTransitions'Canceled obj) GHC.Base.<> ((Data.Aeson..=) "fulfiled" (orderStatusTransitions'Fulfiled obj) GHC.Base.<> ((Data.Aeson..=) "paid" (orderStatusTransitions'Paid obj) GHC.Base.<> (Data.Aeson..=) "returned" (orderStatusTransitions'Returned obj))))
instance Data.Aeson.Types.FromJSON.FromJSON OrderStatusTransitions'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderStatusTransitions'" (\obj -> (((GHC.Base.pure OrderStatusTransitions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "canceled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fulfiled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "paid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "returned"))
instance Data.Aeson.ToJSON Order
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (orderAmount obj) : (Data.Aeson..=) "amount_returned" (orderAmountReturned obj) : (Data.Aeson..=) "application" (orderApplication obj) : (Data.Aeson..=) "application_fee" (orderApplicationFee obj) : (Data.Aeson..=) "charge" (orderCharge obj) : (Data.Aeson..=) "created" (orderCreated obj) : (Data.Aeson..=) "currency" (orderCurrency obj) : (Data.Aeson..=) "customer" (orderCustomer obj) : (Data.Aeson..=) "email" (orderEmail obj) : (Data.Aeson..=) "external_coupon_code" (orderExternalCouponCode obj) : (Data.Aeson..=) "id" (orderId obj) : (Data.Aeson..=) "items" (orderItems obj) : (Data.Aeson..=) "livemode" (orderLivemode obj) : (Data.Aeson..=) "metadata" (orderMetadata obj) : (Data.Aeson..=) "object" (orderObject obj) : (Data.Aeson..=) "returns" (orderReturns obj) : (Data.Aeson..=) "selected_shipping_method" (orderSelectedShippingMethod obj) : (Data.Aeson..=) "shipping" (orderShipping obj) : (Data.Aeson..=) "shipping_methods" (orderShippingMethods obj) : (Data.Aeson..=) "status" (orderStatus obj) : (Data.Aeson..=) "status_transitions" (orderStatusTransitions obj) : (Data.Aeson..=) "updated" (orderUpdated obj) : (Data.Aeson..=) "upstream_id" (orderUpstreamId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (orderAmount obj) GHC.Base.<> ((Data.Aeson..=) "amount_returned" (orderAmountReturned obj) GHC.Base.<> ((Data.Aeson..=) "application" (orderApplication obj) GHC.Base.<> ((Data.Aeson..=) "application_fee" (orderApplicationFee obj) GHC.Base.<> ((Data.Aeson..=) "charge" (orderCharge obj) GHC.Base.<> ((Data.Aeson..=) "created" (orderCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (orderCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (orderCustomer obj) GHC.Base.<> ((Data.Aeson..=) "email" (orderEmail obj) GHC.Base.<> ((Data.Aeson..=) "external_coupon_code" (orderExternalCouponCode obj) GHC.Base.<> ((Data.Aeson..=) "id" (orderId obj) GHC.Base.<> ((Data.Aeson..=) "items" (orderItems obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (orderLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (orderMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (orderObject obj) GHC.Base.<> ((Data.Aeson..=) "returns" (orderReturns obj) GHC.Base.<> ((Data.Aeson..=) "selected_shipping_method" (orderSelectedShippingMethod obj) GHC.Base.<> ((Data.Aeson..=) "shipping" (orderShipping obj) GHC.Base.<> ((Data.Aeson..=) "shipping_methods" (orderShippingMethods obj) GHC.Base.<> ((Data.Aeson..=) "status" (orderStatus obj) GHC.Base.<> ((Data.Aeson..=) "status_transitions" (orderStatusTransitions obj) GHC.Base.<> ((Data.Aeson..=) "updated" (orderUpdated obj) GHC.Base.<> (Data.Aeson..=) "upstream_id" (orderUpstreamId obj)))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Order
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Order" (\obj -> ((((((((((((((((((((((GHC.Base.pure Order GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_returned")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "external_coupon_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "returns")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "selected_shipping_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status_transitions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "upstream_id"))
data OrderItem
    = OrderItem {orderItemAmount :: GHC.Integer.Type.Integer,
                 orderItemCurrency :: GHC.Base.String,
                 orderItemDescription :: GHC.Base.String,
                 orderItemObject :: OrderItemObject',
                 orderItemParent :: (GHC.Maybe.Maybe OrderItemParent'Variants),
                 orderItemQuantity :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                 orderItemType :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data OrderItemObject'
    = OrderItemObject'EnumOther Data.Aeson.Types.Internal.Value
    | OrderItemObject'EnumTyped GHC.Base.String
    | OrderItemObject'EnumStringOrderItem
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON OrderItemObject'
    where toJSON (OrderItemObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (OrderItemObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (OrderItemObject'EnumStringOrderItem) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "order_item"
instance Data.Aeson.FromJSON OrderItemObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "order_item")
                                          then OrderItemObject'EnumStringOrderItem
                                          else OrderItemObject'EnumOther val)
data OrderItemParent'Variants
    = OrderItemParent'Variant1 Sku
    | OrderItemParent'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON OrderItemParent'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON OrderItemParent'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON OrderItem
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (orderItemAmount obj) : (Data.Aeson..=) "currency" (orderItemCurrency obj) : (Data.Aeson..=) "description" (orderItemDescription obj) : (Data.Aeson..=) "object" (orderItemObject obj) : (Data.Aeson..=) "parent" (orderItemParent obj) : (Data.Aeson..=) "quantity" (orderItemQuantity obj) : (Data.Aeson..=) "type" (orderItemType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (orderItemAmount obj) GHC.Base.<> ((Data.Aeson..=) "currency" (orderItemCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (orderItemDescription obj) GHC.Base.<> ((Data.Aeson..=) "object" (orderItemObject obj) GHC.Base.<> ((Data.Aeson..=) "parent" (orderItemParent obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (orderItemQuantity obj) GHC.Base.<> (Data.Aeson..=) "type" (orderItemType obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON OrderItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderItem" (\obj -> ((((((GHC.Base.pure OrderItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data OrderReturn
    = OrderReturn {orderReturnAmount :: GHC.Integer.Type.Integer,
                   orderReturnCreated :: GHC.Integer.Type.Integer,
                   orderReturnCurrency :: GHC.Base.String,
                   orderReturnId :: GHC.Base.String,
                   orderReturnItems :: ([] OrderItem),
                   orderReturnLivemode :: GHC.Types.Bool,
                   orderReturnObject :: OrderReturnObject',
                   orderReturnOrder :: (GHC.Maybe.Maybe OrderReturnOrder'Variants),
                   orderReturnRefund :: (GHC.Maybe.Maybe OrderReturnRefund'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data OrderReturnObject'
    = OrderReturnObject'EnumOther Data.Aeson.Types.Internal.Value
    | OrderReturnObject'EnumTyped GHC.Base.String
    | OrderReturnObject'EnumStringOrderReturn
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON OrderReturnObject'
    where toJSON (OrderReturnObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (OrderReturnObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (OrderReturnObject'EnumStringOrderReturn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "order_return"
instance Data.Aeson.FromJSON OrderReturnObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "order_return")
                                          then OrderReturnObject'EnumStringOrderReturn
                                          else OrderReturnObject'EnumOther val)
data OrderReturnOrder'Variants
    = OrderReturnOrder'Variant1 Order
    | OrderReturnOrder'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON OrderReturnOrder'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON OrderReturnOrder'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data OrderReturnRefund'Variants
    = OrderReturnRefund'Variant1 Refund
    | OrderReturnRefund'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON OrderReturnRefund'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON OrderReturnRefund'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON OrderReturn
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (orderReturnAmount obj) : (Data.Aeson..=) "created" (orderReturnCreated obj) : (Data.Aeson..=) "currency" (orderReturnCurrency obj) : (Data.Aeson..=) "id" (orderReturnId obj) : (Data.Aeson..=) "items" (orderReturnItems obj) : (Data.Aeson..=) "livemode" (orderReturnLivemode obj) : (Data.Aeson..=) "object" (orderReturnObject obj) : (Data.Aeson..=) "order" (orderReturnOrder obj) : (Data.Aeson..=) "refund" (orderReturnRefund obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (orderReturnAmount obj) GHC.Base.<> ((Data.Aeson..=) "created" (orderReturnCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (orderReturnCurrency obj) GHC.Base.<> ((Data.Aeson..=) "id" (orderReturnId obj) GHC.Base.<> ((Data.Aeson..=) "items" (orderReturnItems obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (orderReturnLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (orderReturnObject obj) GHC.Base.<> ((Data.Aeson..=) "order" (orderReturnOrder obj) GHC.Base.<> (Data.Aeson..=) "refund" (orderReturnRefund obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON OrderReturn
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderReturn" (\obj -> ((((((((GHC.Base.pure OrderReturn GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund"))
data PaymentIntent
    = PaymentIntent {paymentIntentAmount :: GHC.Integer.Type.Integer,
                     paymentIntentAmountCapturable :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentIntentAmountReceived :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentIntentApplication :: (GHC.Maybe.Maybe PaymentIntentApplication'Variants),
                     paymentIntentApplicationFeeAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentIntentCanceledAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentIntentCancellationReason :: (GHC.Maybe.Maybe PaymentIntentCancellationReason'),
                     paymentIntentCaptureMethod :: PaymentIntentCaptureMethod',
                     paymentIntentCharges :: (GHC.Maybe.Maybe PaymentIntentCharges'),
                     paymentIntentClientSecret :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentIntentConfirmationMethod :: PaymentIntentConfirmationMethod',
                     paymentIntentCreated :: GHC.Integer.Type.Integer,
                     paymentIntentCurrency :: GHC.Base.String,
                     paymentIntentCustomer :: (GHC.Maybe.Maybe PaymentIntentCustomer'Variants),
                     paymentIntentDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentIntentId :: GHC.Base.String,
                     paymentIntentInvoice :: (GHC.Maybe.Maybe PaymentIntentInvoice'Variants),
                     paymentIntentLastPaymentError :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'),
                     paymentIntentLivemode :: GHC.Types.Bool,
                     paymentIntentMetadata :: (GHC.Maybe.Maybe PaymentIntentMetadata'),
                     paymentIntentNextAction :: (GHC.Maybe.Maybe PaymentIntentNextAction'),
                     paymentIntentObject :: PaymentIntentObject',
                     paymentIntentOnBehalfOf :: (GHC.Maybe.Maybe PaymentIntentOnBehalfOf'Variants),
                     paymentIntentPaymentMethod :: (GHC.Maybe.Maybe PaymentIntentPaymentMethod'Variants),
                     paymentIntentPaymentMethodOptions :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptions'),
                     paymentIntentPaymentMethodTypes :: ([] GHC.Base.String),
                     paymentIntentReceiptEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentIntentReview :: (GHC.Maybe.Maybe PaymentIntentReview'Variants),
                     paymentIntentSetupFutureUsage :: (GHC.Maybe.Maybe PaymentIntentSetupFutureUsage'),
                     paymentIntentShipping :: (GHC.Maybe.Maybe PaymentIntentShipping'),
                     paymentIntentStatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentIntentStatementDescriptorSuffix :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentIntentStatus :: PaymentIntentStatus',
                     paymentIntentTransferData :: (GHC.Maybe.Maybe PaymentIntentTransferData'),
                     paymentIntentTransferGroup :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentApplication'Variants
    = PaymentIntentApplication'Variant1 Application
    | PaymentIntentApplication'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentApplication'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentApplication'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentIntentCancellationReason'
    = PaymentIntentCancellationReason'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentCancellationReason'EnumTyped GHC.Base.String
    | PaymentIntentCancellationReason'EnumStringAbandoned
    | PaymentIntentCancellationReason'EnumStringAutomatic
    | PaymentIntentCancellationReason'EnumStringDuplicate
    | PaymentIntentCancellationReason'EnumStringFailedInvoice
    | PaymentIntentCancellationReason'EnumStringFraudulent
    | PaymentIntentCancellationReason'EnumStringRequestedByCustomer
    | PaymentIntentCancellationReason'EnumStringVoidInvoice
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentCancellationReason'
    where toJSON (PaymentIntentCancellationReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentCancellationReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentCancellationReason'EnumStringAbandoned) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "abandoned"
          toJSON (PaymentIntentCancellationReason'EnumStringAutomatic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic"
          toJSON (PaymentIntentCancellationReason'EnumStringDuplicate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duplicate"
          toJSON (PaymentIntentCancellationReason'EnumStringFailedInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed_invoice"
          toJSON (PaymentIntentCancellationReason'EnumStringFraudulent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fraudulent"
          toJSON (PaymentIntentCancellationReason'EnumStringRequestedByCustomer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requested_by_customer"
          toJSON (PaymentIntentCancellationReason'EnumStringVoidInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "void_invoice"
instance Data.Aeson.FromJSON PaymentIntentCancellationReason'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "abandoned")
                                          then PaymentIntentCancellationReason'EnumStringAbandoned
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic")
                                                then PaymentIntentCancellationReason'EnumStringAutomatic
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duplicate")
                                                      then PaymentIntentCancellationReason'EnumStringDuplicate
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed_invoice")
                                                            then PaymentIntentCancellationReason'EnumStringFailedInvoice
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fraudulent")
                                                                  then PaymentIntentCancellationReason'EnumStringFraudulent
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requested_by_customer")
                                                                        then PaymentIntentCancellationReason'EnumStringRequestedByCustomer
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "void_invoice")
                                                                              then PaymentIntentCancellationReason'EnumStringVoidInvoice
                                                                              else PaymentIntentCancellationReason'EnumOther val)
data PaymentIntentCaptureMethod'
    = PaymentIntentCaptureMethod'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentCaptureMethod'EnumTyped GHC.Base.String
    | PaymentIntentCaptureMethod'EnumStringAutomatic
    | PaymentIntentCaptureMethod'EnumStringManual
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentCaptureMethod'
    where toJSON (PaymentIntentCaptureMethod'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentCaptureMethod'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentCaptureMethod'EnumStringAutomatic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic"
          toJSON (PaymentIntentCaptureMethod'EnumStringManual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual"
instance Data.Aeson.FromJSON PaymentIntentCaptureMethod'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic")
                                          then PaymentIntentCaptureMethod'EnumStringAutomatic
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual")
                                                then PaymentIntentCaptureMethod'EnumStringManual
                                                else PaymentIntentCaptureMethod'EnumOther val)
data PaymentIntentCharges'
    = PaymentIntentCharges' {paymentIntentCharges'Data :: ([] Charge),
                             paymentIntentCharges'HasMore :: GHC.Types.Bool,
                             paymentIntentCharges'Object :: PaymentIntentCharges'Object',
                             paymentIntentCharges'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentCharges'Object'
    = PaymentIntentCharges'Object'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentCharges'Object'EnumTyped GHC.Base.String
    | PaymentIntentCharges'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentCharges'Object'
    where toJSON (PaymentIntentCharges'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentCharges'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentCharges'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON PaymentIntentCharges'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then PaymentIntentCharges'Object'EnumStringList
                                          else PaymentIntentCharges'Object'EnumOther val)
instance Data.Aeson.ToJSON PaymentIntentCharges'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (paymentIntentCharges'Data obj) : (Data.Aeson..=) "has_more" (paymentIntentCharges'HasMore obj) : (Data.Aeson..=) "object" (paymentIntentCharges'Object obj) : (Data.Aeson..=) "url" (paymentIntentCharges'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (paymentIntentCharges'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (paymentIntentCharges'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (paymentIntentCharges'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (paymentIntentCharges'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentCharges'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentCharges'" (\obj -> (((GHC.Base.pure PaymentIntentCharges' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data PaymentIntentConfirmationMethod'
    = PaymentIntentConfirmationMethod'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentConfirmationMethod'EnumTyped GHC.Base.String
    | PaymentIntentConfirmationMethod'EnumStringAutomatic
    | PaymentIntentConfirmationMethod'EnumStringManual
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentConfirmationMethod'
    where toJSON (PaymentIntentConfirmationMethod'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentConfirmationMethod'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentConfirmationMethod'EnumStringAutomatic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic"
          toJSON (PaymentIntentConfirmationMethod'EnumStringManual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual"
instance Data.Aeson.FromJSON PaymentIntentConfirmationMethod'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic")
                                          then PaymentIntentConfirmationMethod'EnumStringAutomatic
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual")
                                                then PaymentIntentConfirmationMethod'EnumStringManual
                                                else PaymentIntentConfirmationMethod'EnumOther val)
data PaymentIntentCustomer'Variants
    = PaymentIntentCustomer'Variant1 Customer
    | PaymentIntentCustomer'Variant2 DeletedCustomer
    | PaymentIntentCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentIntentInvoice'Variants
    = PaymentIntentInvoice'Variant1 Invoice
    | PaymentIntentInvoice'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentInvoice'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentInvoice'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentIntentLastPaymentError'
    = PaymentIntentLastPaymentError' {paymentIntentLastPaymentError'Charge :: (GHC.Maybe.Maybe GHC.Base.String),
                                      paymentIntentLastPaymentError'Code :: (GHC.Maybe.Maybe GHC.Base.String),
                                      paymentIntentLastPaymentError'DeclineCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                      paymentIntentLastPaymentError'DocUrl :: (GHC.Maybe.Maybe GHC.Base.String),
                                      paymentIntentLastPaymentError'Message :: (GHC.Maybe.Maybe GHC.Base.String),
                                      paymentIntentLastPaymentError'Param :: (GHC.Maybe.Maybe GHC.Base.String),
                                      paymentIntentLastPaymentError'PaymentIntent :: (GHC.Maybe.Maybe PaymentIntent),
                                      paymentIntentLastPaymentError'PaymentMethod :: (GHC.Maybe.Maybe PaymentMethod),
                                      paymentIntentLastPaymentError'SetupIntent :: (GHC.Maybe.Maybe SetupIntent),
                                      paymentIntentLastPaymentError'Source :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'),
                                      paymentIntentLastPaymentError'Type :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Type')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentLastPaymentError'Source'
    = PaymentIntentLastPaymentError'Source' {paymentIntentLastPaymentError'Source'Account :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'Account'Variants),
                                             paymentIntentLastPaymentError'Source'AccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'AccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'AchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
                                             paymentIntentLastPaymentError'Source'AchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
                                             paymentIntentLastPaymentError'Source'AddressCity :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'AddressCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'AddressLine1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'AddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'AddressLine2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'AddressState :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'AddressZip :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'AddressZipCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Alipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
                                             paymentIntentLastPaymentError'Source'Amount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                             paymentIntentLastPaymentError'Source'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([] PaymentIntentLastPaymentError'Source'AvailablePayoutMethods')),
                                             paymentIntentLastPaymentError'Source'Bancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
                                             paymentIntentLastPaymentError'Source'BankName :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Brand :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Card :: (GHC.Maybe.Maybe SourceTypeCard),
                                             paymentIntentLastPaymentError'Source'CardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
                                             paymentIntentLastPaymentError'Source'ClientSecret :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'CodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
                                             paymentIntentLastPaymentError'Source'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                             paymentIntentLastPaymentError'Source'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Customer :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'Customer'Variants),
                                             paymentIntentLastPaymentError'Source'CvcCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                                             paymentIntentLastPaymentError'Source'DynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Eps :: (GHC.Maybe.Maybe SourceTypeEps),
                                             paymentIntentLastPaymentError'Source'ExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                             paymentIntentLastPaymentError'Source'ExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                             paymentIntentLastPaymentError'Source'Fingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Flow :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Funding :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Giropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
                                             paymentIntentLastPaymentError'Source'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Ideal :: (GHC.Maybe.Maybe SourceTypeIdeal),
                                             paymentIntentLastPaymentError'Source'Klarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
                                             paymentIntentLastPaymentError'Source'Last4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
                                             paymentIntentLastPaymentError'Source'Metadata :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'Metadata'),
                                             paymentIntentLastPaymentError'Source'Multibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
                                             paymentIntentLastPaymentError'Source'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Object :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'Object'),
                                             paymentIntentLastPaymentError'Source'Owner :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'Owner'),
                                             paymentIntentLastPaymentError'Source'P24 :: (GHC.Maybe.Maybe SourceTypeP24),
                                             paymentIntentLastPaymentError'Source'Receiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
                                             paymentIntentLastPaymentError'Source'Recipient :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'Recipient'Variants),
                                             paymentIntentLastPaymentError'Source'Redirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
                                             paymentIntentLastPaymentError'Source'RoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'SepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
                                             paymentIntentLastPaymentError'Source'Sofort :: (GHC.Maybe.Maybe SourceTypeSofort),
                                             paymentIntentLastPaymentError'Source'SourceOrder :: (GHC.Maybe.Maybe SourceOrder),
                                             paymentIntentLastPaymentError'Source'StatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Status :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'ThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
                                             paymentIntentLastPaymentError'Source'TokenizationMethod :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Type :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'Type'),
                                             paymentIntentLastPaymentError'Source'Usage :: (GHC.Maybe.Maybe GHC.Base.String),
                                             paymentIntentLastPaymentError'Source'Wechat :: (GHC.Maybe.Maybe SourceTypeWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentLastPaymentError'Source'Account'Variants
    = PaymentIntentLastPaymentError'Source'Account'Variant1 Account
    | PaymentIntentLastPaymentError'Source'Account'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'Account'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentLastPaymentError'Source'Account'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'
    = PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumTyped GHC.Base.String
    | PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumStringInstant
    | PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'
    where toJSON (PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumStringInstant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant"
          toJSON (PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant")
                                          then PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumStringInstant
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                then PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumStringStandard
                                                else PaymentIntentLastPaymentError'Source'AvailablePayoutMethods'EnumOther val)
data PaymentIntentLastPaymentError'Source'Customer'Variants
    = PaymentIntentLastPaymentError'Source'Customer'Variant1 Customer
    | PaymentIntentLastPaymentError'Source'Customer'Variant2 DeletedCustomer
    | PaymentIntentLastPaymentError'Source'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentLastPaymentError'Source'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentIntentLastPaymentError'Source'Metadata'
    = PaymentIntentLastPaymentError'Source'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'Source'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'Source'Metadata'" (\obj -> GHC.Base.pure PaymentIntentLastPaymentError'Source'Metadata')
data PaymentIntentLastPaymentError'Source'Object'
    = PaymentIntentLastPaymentError'Source'Object'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentLastPaymentError'Source'Object'EnumTyped GHC.Base.String
    | PaymentIntentLastPaymentError'Source'Object'EnumStringBankAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'Object'
    where toJSON (PaymentIntentLastPaymentError'Source'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentLastPaymentError'Source'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentLastPaymentError'Source'Object'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
instance Data.Aeson.FromJSON PaymentIntentLastPaymentError'Source'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then PaymentIntentLastPaymentError'Source'Object'EnumStringBankAccount
                                          else PaymentIntentLastPaymentError'Source'Object'EnumOther val)
data PaymentIntentLastPaymentError'Source'Owner'
    = PaymentIntentLastPaymentError'Source'Owner' {paymentIntentLastPaymentError'Source'Owner'Address :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'Owner'Address'),
                                                   paymentIntentLastPaymentError'Source'Owner'Email :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   paymentIntentLastPaymentError'Source'Owner'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   paymentIntentLastPaymentError'Source'Owner'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   paymentIntentLastPaymentError'Source'Owner'VerifiedAddress :: (GHC.Maybe.Maybe PaymentIntentLastPaymentError'Source'Owner'VerifiedAddress'),
                                                   paymentIntentLastPaymentError'Source'Owner'VerifiedEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   paymentIntentLastPaymentError'Source'Owner'VerifiedName :: (GHC.Maybe.Maybe GHC.Base.String),
                                                   paymentIntentLastPaymentError'Source'Owner'VerifiedPhone :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentLastPaymentError'Source'Owner'Address'
    = PaymentIntentLastPaymentError'Source'Owner'Address' {paymentIntentLastPaymentError'Source'Owner'Address'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentIntentLastPaymentError'Source'Owner'Address'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentIntentLastPaymentError'Source'Owner'Address'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentIntentLastPaymentError'Source'Owner'Address'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentIntentLastPaymentError'Source'Owner'Address'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentIntentLastPaymentError'Source'Owner'Address'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'Owner'Address'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentIntentLastPaymentError'Source'Owner'Address'City obj) : (Data.Aeson..=) "country" (paymentIntentLastPaymentError'Source'Owner'Address'Country obj) : (Data.Aeson..=) "line1" (paymentIntentLastPaymentError'Source'Owner'Address'Line1 obj) : (Data.Aeson..=) "line2" (paymentIntentLastPaymentError'Source'Owner'Address'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentIntentLastPaymentError'Source'Owner'Address'PostalCode obj) : (Data.Aeson..=) "state" (paymentIntentLastPaymentError'Source'Owner'Address'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentIntentLastPaymentError'Source'Owner'Address'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentIntentLastPaymentError'Source'Owner'Address'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentIntentLastPaymentError'Source'Owner'Address'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentIntentLastPaymentError'Source'Owner'Address'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentIntentLastPaymentError'Source'Owner'Address'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentIntentLastPaymentError'Source'Owner'Address'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'Source'Owner'Address'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'Source'Owner'Address'" (\obj -> (((((GHC.Base.pure PaymentIntentLastPaymentError'Source'Owner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data PaymentIntentLastPaymentError'Source'Owner'VerifiedAddress'
    = PaymentIntentLastPaymentError'Source'Owner'VerifiedAddress' {paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                   paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                   paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                   paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                   paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                   paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'Owner'VerifiedAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'City obj) : (Data.Aeson..=) "country" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'Country obj) : (Data.Aeson..=) "line1" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'Source'Owner'VerifiedAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'Source'Owner'VerifiedAddress'" (\obj -> (((((GHC.Base.pure PaymentIntentLastPaymentError'Source'Owner'VerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'Owner'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (paymentIntentLastPaymentError'Source'Owner'Address obj) : (Data.Aeson..=) "email" (paymentIntentLastPaymentError'Source'Owner'Email obj) : (Data.Aeson..=) "name" (paymentIntentLastPaymentError'Source'Owner'Name obj) : (Data.Aeson..=) "phone" (paymentIntentLastPaymentError'Source'Owner'Phone obj) : (Data.Aeson..=) "verified_address" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress obj) : (Data.Aeson..=) "verified_email" (paymentIntentLastPaymentError'Source'Owner'VerifiedEmail obj) : (Data.Aeson..=) "verified_name" (paymentIntentLastPaymentError'Source'Owner'VerifiedName obj) : (Data.Aeson..=) "verified_phone" (paymentIntentLastPaymentError'Source'Owner'VerifiedPhone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (paymentIntentLastPaymentError'Source'Owner'Address obj) GHC.Base.<> ((Data.Aeson..=) "email" (paymentIntentLastPaymentError'Source'Owner'Email obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentIntentLastPaymentError'Source'Owner'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (paymentIntentLastPaymentError'Source'Owner'Phone obj) GHC.Base.<> ((Data.Aeson..=) "verified_address" (paymentIntentLastPaymentError'Source'Owner'VerifiedAddress obj) GHC.Base.<> ((Data.Aeson..=) "verified_email" (paymentIntentLastPaymentError'Source'Owner'VerifiedEmail obj) GHC.Base.<> ((Data.Aeson..=) "verified_name" (paymentIntentLastPaymentError'Source'Owner'VerifiedName obj) GHC.Base.<> (Data.Aeson..=) "verified_phone" (paymentIntentLastPaymentError'Source'Owner'VerifiedPhone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'Source'Owner'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'Source'Owner'" (\obj -> (((((((GHC.Base.pure PaymentIntentLastPaymentError'Source'Owner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))
data PaymentIntentLastPaymentError'Source'Recipient'Variants
    = PaymentIntentLastPaymentError'Source'Recipient'Variant1 Recipient
    | PaymentIntentLastPaymentError'Source'Recipient'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'Recipient'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentLastPaymentError'Source'Recipient'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentIntentLastPaymentError'Source'Type'
    = PaymentIntentLastPaymentError'Source'Type'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentLastPaymentError'Source'Type'EnumTyped GHC.Base.String
    | PaymentIntentLastPaymentError'Source'Type'EnumStringAchCreditTransfer
    | PaymentIntentLastPaymentError'Source'Type'EnumStringAchDebit
    | PaymentIntentLastPaymentError'Source'Type'EnumStringAlipay
    | PaymentIntentLastPaymentError'Source'Type'EnumStringBancontact
    | PaymentIntentLastPaymentError'Source'Type'EnumStringCard
    | PaymentIntentLastPaymentError'Source'Type'EnumStringCardPresent
    | PaymentIntentLastPaymentError'Source'Type'EnumStringEps
    | PaymentIntentLastPaymentError'Source'Type'EnumStringGiropay
    | PaymentIntentLastPaymentError'Source'Type'EnumStringIdeal
    | PaymentIntentLastPaymentError'Source'Type'EnumStringKlarna
    | PaymentIntentLastPaymentError'Source'Type'EnumStringMultibanco
    | PaymentIntentLastPaymentError'Source'Type'EnumStringP24
    | PaymentIntentLastPaymentError'Source'Type'EnumStringSepaDebit
    | PaymentIntentLastPaymentError'Source'Type'EnumStringSofort
    | PaymentIntentLastPaymentError'Source'Type'EnumStringThreeDSecure
    | PaymentIntentLastPaymentError'Source'Type'EnumStringWechat
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'Type'
    where toJSON (PaymentIntentLastPaymentError'Source'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringAchCreditTransfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringAchDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringAlipay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringBancontact) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringCard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringCardPresent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringEps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringGiropay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringIdeal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringKlarna) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringMultibanco) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringP24) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringSepaDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringSofort) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringThreeDSecure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure"
          toJSON (PaymentIntentLastPaymentError'Source'Type'EnumStringWechat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat"
instance Data.Aeson.FromJSON PaymentIntentLastPaymentError'Source'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer")
                                          then PaymentIntentLastPaymentError'Source'Type'EnumStringAchCreditTransfer
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit")
                                                then PaymentIntentLastPaymentError'Source'Type'EnumStringAchDebit
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay")
                                                      then PaymentIntentLastPaymentError'Source'Type'EnumStringAlipay
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact")
                                                            then PaymentIntentLastPaymentError'Source'Type'EnumStringBancontact
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card")
                                                                  then PaymentIntentLastPaymentError'Source'Type'EnumStringCard
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present")
                                                                        then PaymentIntentLastPaymentError'Source'Type'EnumStringCardPresent
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps")
                                                                              then PaymentIntentLastPaymentError'Source'Type'EnumStringEps
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay")
                                                                                    then PaymentIntentLastPaymentError'Source'Type'EnumStringGiropay
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal")
                                                                                          then PaymentIntentLastPaymentError'Source'Type'EnumStringIdeal
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna")
                                                                                                then PaymentIntentLastPaymentError'Source'Type'EnumStringKlarna
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco")
                                                                                                      then PaymentIntentLastPaymentError'Source'Type'EnumStringMultibanco
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24")
                                                                                                            then PaymentIntentLastPaymentError'Source'Type'EnumStringP24
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit")
                                                                                                                  then PaymentIntentLastPaymentError'Source'Type'EnumStringSepaDebit
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort")
                                                                                                                        then PaymentIntentLastPaymentError'Source'Type'EnumStringSofort
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure")
                                                                                                                              then PaymentIntentLastPaymentError'Source'Type'EnumStringThreeDSecure
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat")
                                                                                                                                    then PaymentIntentLastPaymentError'Source'Type'EnumStringWechat
                                                                                                                                    else PaymentIntentLastPaymentError'Source'Type'EnumOther val)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Source'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (paymentIntentLastPaymentError'Source'Account obj) : (Data.Aeson..=) "account_holder_name" (paymentIntentLastPaymentError'Source'AccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (paymentIntentLastPaymentError'Source'AccountHolderType obj) : (Data.Aeson..=) "ach_credit_transfer" (paymentIntentLastPaymentError'Source'AchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (paymentIntentLastPaymentError'Source'AchDebit obj) : (Data.Aeson..=) "address_city" (paymentIntentLastPaymentError'Source'AddressCity obj) : (Data.Aeson..=) "address_country" (paymentIntentLastPaymentError'Source'AddressCountry obj) : (Data.Aeson..=) "address_line1" (paymentIntentLastPaymentError'Source'AddressLine1 obj) : (Data.Aeson..=) "address_line1_check" (paymentIntentLastPaymentError'Source'AddressLine1Check obj) : (Data.Aeson..=) "address_line2" (paymentIntentLastPaymentError'Source'AddressLine2 obj) : (Data.Aeson..=) "address_state" (paymentIntentLastPaymentError'Source'AddressState obj) : (Data.Aeson..=) "address_zip" (paymentIntentLastPaymentError'Source'AddressZip obj) : (Data.Aeson..=) "address_zip_check" (paymentIntentLastPaymentError'Source'AddressZipCheck obj) : (Data.Aeson..=) "alipay" (paymentIntentLastPaymentError'Source'Alipay obj) : (Data.Aeson..=) "amount" (paymentIntentLastPaymentError'Source'Amount obj) : (Data.Aeson..=) "available_payout_methods" (paymentIntentLastPaymentError'Source'AvailablePayoutMethods obj) : (Data.Aeson..=) "bancontact" (paymentIntentLastPaymentError'Source'Bancontact obj) : (Data.Aeson..=) "bank_name" (paymentIntentLastPaymentError'Source'BankName obj) : (Data.Aeson..=) "brand" (paymentIntentLastPaymentError'Source'Brand obj) : (Data.Aeson..=) "card" (paymentIntentLastPaymentError'Source'Card obj) : (Data.Aeson..=) "card_present" (paymentIntentLastPaymentError'Source'CardPresent obj) : (Data.Aeson..=) "client_secret" (paymentIntentLastPaymentError'Source'ClientSecret obj) : (Data.Aeson..=) "code_verification" (paymentIntentLastPaymentError'Source'CodeVerification obj) : (Data.Aeson..=) "country" (paymentIntentLastPaymentError'Source'Country obj) : (Data.Aeson..=) "created" (paymentIntentLastPaymentError'Source'Created obj) : (Data.Aeson..=) "currency" (paymentIntentLastPaymentError'Source'Currency obj) : (Data.Aeson..=) "customer" (paymentIntentLastPaymentError'Source'Customer obj) : (Data.Aeson..=) "cvc_check" (paymentIntentLastPaymentError'Source'CvcCheck obj) : (Data.Aeson..=) "default_for_currency" (paymentIntentLastPaymentError'Source'DefaultForCurrency obj) : (Data.Aeson..=) "dynamic_last4" (paymentIntentLastPaymentError'Source'DynamicLast4 obj) : (Data.Aeson..=) "eps" (paymentIntentLastPaymentError'Source'Eps obj) : (Data.Aeson..=) "exp_month" (paymentIntentLastPaymentError'Source'ExpMonth obj) : (Data.Aeson..=) "exp_year" (paymentIntentLastPaymentError'Source'ExpYear obj) : (Data.Aeson..=) "fingerprint" (paymentIntentLastPaymentError'Source'Fingerprint obj) : (Data.Aeson..=) "flow" (paymentIntentLastPaymentError'Source'Flow obj) : (Data.Aeson..=) "funding" (paymentIntentLastPaymentError'Source'Funding obj) : (Data.Aeson..=) "giropay" (paymentIntentLastPaymentError'Source'Giropay obj) : (Data.Aeson..=) "id" (paymentIntentLastPaymentError'Source'Id obj) : (Data.Aeson..=) "ideal" (paymentIntentLastPaymentError'Source'Ideal obj) : (Data.Aeson..=) "klarna" (paymentIntentLastPaymentError'Source'Klarna obj) : (Data.Aeson..=) "last4" (paymentIntentLastPaymentError'Source'Last4 obj) : (Data.Aeson..=) "livemode" (paymentIntentLastPaymentError'Source'Livemode obj) : (Data.Aeson..=) "metadata" (paymentIntentLastPaymentError'Source'Metadata obj) : (Data.Aeson..=) "multibanco" (paymentIntentLastPaymentError'Source'Multibanco obj) : (Data.Aeson..=) "name" (paymentIntentLastPaymentError'Source'Name obj) : (Data.Aeson..=) "object" (paymentIntentLastPaymentError'Source'Object obj) : (Data.Aeson..=) "owner" (paymentIntentLastPaymentError'Source'Owner obj) : (Data.Aeson..=) "p24" (paymentIntentLastPaymentError'Source'P24 obj) : (Data.Aeson..=) "receiver" (paymentIntentLastPaymentError'Source'Receiver obj) : (Data.Aeson..=) "recipient" (paymentIntentLastPaymentError'Source'Recipient obj) : (Data.Aeson..=) "redirect" (paymentIntentLastPaymentError'Source'Redirect obj) : (Data.Aeson..=) "routing_number" (paymentIntentLastPaymentError'Source'RoutingNumber obj) : (Data.Aeson..=) "sepa_debit" (paymentIntentLastPaymentError'Source'SepaDebit obj) : (Data.Aeson..=) "sofort" (paymentIntentLastPaymentError'Source'Sofort obj) : (Data.Aeson..=) "source_order" (paymentIntentLastPaymentError'Source'SourceOrder obj) : (Data.Aeson..=) "statement_descriptor" (paymentIntentLastPaymentError'Source'StatementDescriptor obj) : (Data.Aeson..=) "status" (paymentIntentLastPaymentError'Source'Status obj) : (Data.Aeson..=) "three_d_secure" (paymentIntentLastPaymentError'Source'ThreeDSecure obj) : (Data.Aeson..=) "tokenization_method" (paymentIntentLastPaymentError'Source'TokenizationMethod obj) : (Data.Aeson..=) "type" (paymentIntentLastPaymentError'Source'Type obj) : (Data.Aeson..=) "usage" (paymentIntentLastPaymentError'Source'Usage obj) : (Data.Aeson..=) "wechat" (paymentIntentLastPaymentError'Source'Wechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (paymentIntentLastPaymentError'Source'Account obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (paymentIntentLastPaymentError'Source'AccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (paymentIntentLastPaymentError'Source'AccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "ach_credit_transfer" (paymentIntentLastPaymentError'Source'AchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (paymentIntentLastPaymentError'Source'AchDebit obj) GHC.Base.<> ((Data.Aeson..=) "address_city" (paymentIntentLastPaymentError'Source'AddressCity obj) GHC.Base.<> ((Data.Aeson..=) "address_country" (paymentIntentLastPaymentError'Source'AddressCountry obj) GHC.Base.<> ((Data.Aeson..=) "address_line1" (paymentIntentLastPaymentError'Source'AddressLine1 obj) GHC.Base.<> ((Data.Aeson..=) "address_line1_check" (paymentIntentLastPaymentError'Source'AddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_line2" (paymentIntentLastPaymentError'Source'AddressLine2 obj) GHC.Base.<> ((Data.Aeson..=) "address_state" (paymentIntentLastPaymentError'Source'AddressState obj) GHC.Base.<> ((Data.Aeson..=) "address_zip" (paymentIntentLastPaymentError'Source'AddressZip obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (paymentIntentLastPaymentError'Source'AddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (paymentIntentLastPaymentError'Source'Alipay obj) GHC.Base.<> ((Data.Aeson..=) "amount" (paymentIntentLastPaymentError'Source'Amount obj) GHC.Base.<> ((Data.Aeson..=) "available_payout_methods" (paymentIntentLastPaymentError'Source'AvailablePayoutMethods obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (paymentIntentLastPaymentError'Source'Bancontact obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (paymentIntentLastPaymentError'Source'BankName obj) GHC.Base.<> ((Data.Aeson..=) "brand" (paymentIntentLastPaymentError'Source'Brand obj) GHC.Base.<> ((Data.Aeson..=) "card" (paymentIntentLastPaymentError'Source'Card obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (paymentIntentLastPaymentError'Source'CardPresent obj) GHC.Base.<> ((Data.Aeson..=) "client_secret" (paymentIntentLastPaymentError'Source'ClientSecret obj) GHC.Base.<> ((Data.Aeson..=) "code_verification" (paymentIntentLastPaymentError'Source'CodeVerification obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentIntentLastPaymentError'Source'Country obj) GHC.Base.<> ((Data.Aeson..=) "created" (paymentIntentLastPaymentError'Source'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (paymentIntentLastPaymentError'Source'Currency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (paymentIntentLastPaymentError'Source'Customer obj) GHC.Base.<> ((Data.Aeson..=) "cvc_check" (paymentIntentLastPaymentError'Source'CvcCheck obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (paymentIntentLastPaymentError'Source'DefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (paymentIntentLastPaymentError'Source'DynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "eps" (paymentIntentLastPaymentError'Source'Eps obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (paymentIntentLastPaymentError'Source'ExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (paymentIntentLastPaymentError'Source'ExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (paymentIntentLastPaymentError'Source'Fingerprint obj) GHC.Base.<> ((Data.Aeson..=) "flow" (paymentIntentLastPaymentError'Source'Flow obj) GHC.Base.<> ((Data.Aeson..=) "funding" (paymentIntentLastPaymentError'Source'Funding obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (paymentIntentLastPaymentError'Source'Giropay obj) GHC.Base.<> ((Data.Aeson..=) "id" (paymentIntentLastPaymentError'Source'Id obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (paymentIntentLastPaymentError'Source'Ideal obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (paymentIntentLastPaymentError'Source'Klarna obj) GHC.Base.<> ((Data.Aeson..=) "last4" (paymentIntentLastPaymentError'Source'Last4 obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (paymentIntentLastPaymentError'Source'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (paymentIntentLastPaymentError'Source'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (paymentIntentLastPaymentError'Source'Multibanco obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentIntentLastPaymentError'Source'Name obj) GHC.Base.<> ((Data.Aeson..=) "object" (paymentIntentLastPaymentError'Source'Object obj) GHC.Base.<> ((Data.Aeson..=) "owner" (paymentIntentLastPaymentError'Source'Owner obj) GHC.Base.<> ((Data.Aeson..=) "p24" (paymentIntentLastPaymentError'Source'P24 obj) GHC.Base.<> ((Data.Aeson..=) "receiver" (paymentIntentLastPaymentError'Source'Receiver obj) GHC.Base.<> ((Data.Aeson..=) "recipient" (paymentIntentLastPaymentError'Source'Recipient obj) GHC.Base.<> ((Data.Aeson..=) "redirect" (paymentIntentLastPaymentError'Source'Redirect obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (paymentIntentLastPaymentError'Source'RoutingNumber obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (paymentIntentLastPaymentError'Source'SepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (paymentIntentLastPaymentError'Source'Sofort obj) GHC.Base.<> ((Data.Aeson..=) "source_order" (paymentIntentLastPaymentError'Source'SourceOrder obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (paymentIntentLastPaymentError'Source'StatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (paymentIntentLastPaymentError'Source'Status obj) GHC.Base.<> ((Data.Aeson..=) "three_d_secure" (paymentIntentLastPaymentError'Source'ThreeDSecure obj) GHC.Base.<> ((Data.Aeson..=) "tokenization_method" (paymentIntentLastPaymentError'Source'TokenizationMethod obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentIntentLastPaymentError'Source'Type obj) GHC.Base.<> ((Data.Aeson..=) "usage" (paymentIntentLastPaymentError'Source'Usage obj) GHC.Base.<> (Data.Aeson..=) "wechat" (paymentIntentLastPaymentError'Source'Wechat obj))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'Source'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'Source'" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure PaymentIntentLastPaymentError'Source' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
data PaymentIntentLastPaymentError'Type'
    = PaymentIntentLastPaymentError'Type'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentLastPaymentError'Type'EnumTyped GHC.Base.String
    | PaymentIntentLastPaymentError'Type'EnumStringApiConnectionError
    | PaymentIntentLastPaymentError'Type'EnumStringApiError
    | PaymentIntentLastPaymentError'Type'EnumStringAuthenticationError
    | PaymentIntentLastPaymentError'Type'EnumStringCardError
    | PaymentIntentLastPaymentError'Type'EnumStringIdempotencyError
    | PaymentIntentLastPaymentError'Type'EnumStringInvalidRequestError
    | PaymentIntentLastPaymentError'Type'EnumStringRateLimitError
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'Type'
    where toJSON (PaymentIntentLastPaymentError'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentLastPaymentError'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentLastPaymentError'Type'EnumStringApiConnectionError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_connection_error"
          toJSON (PaymentIntentLastPaymentError'Type'EnumStringApiError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_error"
          toJSON (PaymentIntentLastPaymentError'Type'EnumStringAuthenticationError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authentication_error"
          toJSON (PaymentIntentLastPaymentError'Type'EnumStringCardError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_error"
          toJSON (PaymentIntentLastPaymentError'Type'EnumStringIdempotencyError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "idempotency_error"
          toJSON (PaymentIntentLastPaymentError'Type'EnumStringInvalidRequestError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invalid_request_error"
          toJSON (PaymentIntentLastPaymentError'Type'EnumStringRateLimitError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "rate_limit_error"
instance Data.Aeson.FromJSON PaymentIntentLastPaymentError'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_connection_error")
                                          then PaymentIntentLastPaymentError'Type'EnumStringApiConnectionError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_error")
                                                then PaymentIntentLastPaymentError'Type'EnumStringApiError
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authentication_error")
                                                      then PaymentIntentLastPaymentError'Type'EnumStringAuthenticationError
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_error")
                                                            then PaymentIntentLastPaymentError'Type'EnumStringCardError
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "idempotency_error")
                                                                  then PaymentIntentLastPaymentError'Type'EnumStringIdempotencyError
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invalid_request_error")
                                                                        then PaymentIntentLastPaymentError'Type'EnumStringInvalidRequestError
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "rate_limit_error")
                                                                              then PaymentIntentLastPaymentError'Type'EnumStringRateLimitError
                                                                              else PaymentIntentLastPaymentError'Type'EnumOther val)
instance Data.Aeson.ToJSON PaymentIntentLastPaymentError'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "charge" (paymentIntentLastPaymentError'Charge obj) : (Data.Aeson..=) "code" (paymentIntentLastPaymentError'Code obj) : (Data.Aeson..=) "decline_code" (paymentIntentLastPaymentError'DeclineCode obj) : (Data.Aeson..=) "doc_url" (paymentIntentLastPaymentError'DocUrl obj) : (Data.Aeson..=) "message" (paymentIntentLastPaymentError'Message obj) : (Data.Aeson..=) "param" (paymentIntentLastPaymentError'Param obj) : (Data.Aeson..=) "payment_intent" (paymentIntentLastPaymentError'PaymentIntent obj) : (Data.Aeson..=) "payment_method" (paymentIntentLastPaymentError'PaymentMethod obj) : (Data.Aeson..=) "setup_intent" (paymentIntentLastPaymentError'SetupIntent obj) : (Data.Aeson..=) "source" (paymentIntentLastPaymentError'Source obj) : (Data.Aeson..=) "type" (paymentIntentLastPaymentError'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "charge" (paymentIntentLastPaymentError'Charge obj) GHC.Base.<> ((Data.Aeson..=) "code" (paymentIntentLastPaymentError'Code obj) GHC.Base.<> ((Data.Aeson..=) "decline_code" (paymentIntentLastPaymentError'DeclineCode obj) GHC.Base.<> ((Data.Aeson..=) "doc_url" (paymentIntentLastPaymentError'DocUrl obj) GHC.Base.<> ((Data.Aeson..=) "message" (paymentIntentLastPaymentError'Message obj) GHC.Base.<> ((Data.Aeson..=) "param" (paymentIntentLastPaymentError'Param obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (paymentIntentLastPaymentError'PaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "payment_method" (paymentIntentLastPaymentError'PaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "setup_intent" (paymentIntentLastPaymentError'SetupIntent obj) GHC.Base.<> ((Data.Aeson..=) "source" (paymentIntentLastPaymentError'Source obj) GHC.Base.<> (Data.Aeson..=) "type" (paymentIntentLastPaymentError'Type obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentLastPaymentError'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentLastPaymentError'" (\obj -> ((((((((((GHC.Base.pure PaymentIntentLastPaymentError' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "decline_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "doc_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "param")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
data PaymentIntentMetadata'
    = PaymentIntentMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentMetadata'" (\obj -> GHC.Base.pure PaymentIntentMetadata')
data PaymentIntentNextAction'
    = PaymentIntentNextAction' {paymentIntentNextAction'RedirectToUrl :: (GHC.Maybe.Maybe PaymentIntentNextActionRedirectToUrl),
                                paymentIntentNextAction'Type :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentIntentNextAction'UseStripeSdk :: (GHC.Maybe.Maybe PaymentIntentNextAction'UseStripeSdk')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentNextAction'UseStripeSdk'
    = PaymentIntentNextAction'UseStripeSdk' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentNextAction'UseStripeSdk'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentNextAction'UseStripeSdk'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentNextAction'UseStripeSdk'" (\obj -> GHC.Base.pure PaymentIntentNextAction'UseStripeSdk')
instance Data.Aeson.ToJSON PaymentIntentNextAction'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "redirect_to_url" (paymentIntentNextAction'RedirectToUrl obj) : (Data.Aeson..=) "type" (paymentIntentNextAction'Type obj) : (Data.Aeson..=) "use_stripe_sdk" (paymentIntentNextAction'UseStripeSdk obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "redirect_to_url" (paymentIntentNextAction'RedirectToUrl obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentIntentNextAction'Type obj) GHC.Base.<> (Data.Aeson..=) "use_stripe_sdk" (paymentIntentNextAction'UseStripeSdk obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentNextAction'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentNextAction'" (\obj -> ((GHC.Base.pure PaymentIntentNextAction' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_to_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_stripe_sdk"))
data PaymentIntentObject'
    = PaymentIntentObject'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentObject'EnumTyped GHC.Base.String
    | PaymentIntentObject'EnumStringPaymentIntent
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentObject'
    where toJSON (PaymentIntentObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentObject'EnumStringPaymentIntent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_intent"
instance Data.Aeson.FromJSON PaymentIntentObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_intent")
                                          then PaymentIntentObject'EnumStringPaymentIntent
                                          else PaymentIntentObject'EnumOther val)
data PaymentIntentOnBehalfOf'Variants
    = PaymentIntentOnBehalfOf'Variant1 Account
    | PaymentIntentOnBehalfOf'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentOnBehalfOf'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentOnBehalfOf'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentIntentPaymentMethod'Variants
    = PaymentIntentPaymentMethod'Variant1 PaymentMethod
    | PaymentIntentPaymentMethod'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentPaymentMethod'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentPaymentMethod'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentIntentPaymentMethodOptions'
    = PaymentIntentPaymentMethodOptions' {paymentIntentPaymentMethodOptions'Card :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentPaymentMethodOptions'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "card" (paymentIntentPaymentMethodOptions'Card obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "card" (paymentIntentPaymentMethodOptions'Card obj))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions'" (\obj -> GHC.Base.pure PaymentIntentPaymentMethodOptions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card"))
data PaymentIntentReview'Variants
    = PaymentIntentReview'Variant1 Review
    | PaymentIntentReview'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentReview'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentReview'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentIntentSetupFutureUsage'
    = PaymentIntentSetupFutureUsage'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentSetupFutureUsage'EnumTyped GHC.Base.String
    | PaymentIntentSetupFutureUsage'EnumStringOffSession
    | PaymentIntentSetupFutureUsage'EnumStringOnSession
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentSetupFutureUsage'
    where toJSON (PaymentIntentSetupFutureUsage'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentSetupFutureUsage'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentSetupFutureUsage'EnumStringOffSession) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "off_session"
          toJSON (PaymentIntentSetupFutureUsage'EnumStringOnSession) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "on_session"
instance Data.Aeson.FromJSON PaymentIntentSetupFutureUsage'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "off_session")
                                          then PaymentIntentSetupFutureUsage'EnumStringOffSession
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "on_session")
                                                then PaymentIntentSetupFutureUsage'EnumStringOnSession
                                                else PaymentIntentSetupFutureUsage'EnumOther val)
data PaymentIntentShipping'
    = PaymentIntentShipping' {paymentIntentShipping'Address :: (GHC.Maybe.Maybe Address),
                              paymentIntentShipping'Carrier :: (GHC.Maybe.Maybe GHC.Base.String),
                              paymentIntentShipping'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                              paymentIntentShipping'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                              paymentIntentShipping'TrackingNumber :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentShipping'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (paymentIntentShipping'Address obj) : (Data.Aeson..=) "carrier" (paymentIntentShipping'Carrier obj) : (Data.Aeson..=) "name" (paymentIntentShipping'Name obj) : (Data.Aeson..=) "phone" (paymentIntentShipping'Phone obj) : (Data.Aeson..=) "tracking_number" (paymentIntentShipping'TrackingNumber obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (paymentIntentShipping'Address obj) GHC.Base.<> ((Data.Aeson..=) "carrier" (paymentIntentShipping'Carrier obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentIntentShipping'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (paymentIntentShipping'Phone obj) GHC.Base.<> (Data.Aeson..=) "tracking_number" (paymentIntentShipping'TrackingNumber obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentShipping'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentShipping'" (\obj -> ((((GHC.Base.pure PaymentIntentShipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number"))
data PaymentIntentStatus'
    = PaymentIntentStatus'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentStatus'EnumTyped GHC.Base.String
    | PaymentIntentStatus'EnumStringCanceled
    | PaymentIntentStatus'EnumStringProcessing
    | PaymentIntentStatus'EnumStringRequiresAction
    | PaymentIntentStatus'EnumStringRequiresCapture
    | PaymentIntentStatus'EnumStringRequiresConfirmation
    | PaymentIntentStatus'EnumStringRequiresPaymentMethod
    | PaymentIntentStatus'EnumStringSucceeded
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentStatus'
    where toJSON (PaymentIntentStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentStatus'EnumStringCanceled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled"
          toJSON (PaymentIntentStatus'EnumStringProcessing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "processing"
          toJSON (PaymentIntentStatus'EnumStringRequiresAction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_action"
          toJSON (PaymentIntentStatus'EnumStringRequiresCapture) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_capture"
          toJSON (PaymentIntentStatus'EnumStringRequiresConfirmation) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_confirmation"
          toJSON (PaymentIntentStatus'EnumStringRequiresPaymentMethod) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_payment_method"
          toJSON (PaymentIntentStatus'EnumStringSucceeded) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "succeeded"
instance Data.Aeson.FromJSON PaymentIntentStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled")
                                          then PaymentIntentStatus'EnumStringCanceled
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "processing")
                                                then PaymentIntentStatus'EnumStringProcessing
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_action")
                                                      then PaymentIntentStatus'EnumStringRequiresAction
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_capture")
                                                            then PaymentIntentStatus'EnumStringRequiresCapture
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_confirmation")
                                                                  then PaymentIntentStatus'EnumStringRequiresConfirmation
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_payment_method")
                                                                        then PaymentIntentStatus'EnumStringRequiresPaymentMethod
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "succeeded")
                                                                              then PaymentIntentStatus'EnumStringSucceeded
                                                                              else PaymentIntentStatus'EnumOther val)
data PaymentIntentTransferData'
    = PaymentIntentTransferData' {paymentIntentTransferData'Amount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                  paymentIntentTransferData'Destination :: (GHC.Maybe.Maybe PaymentIntentTransferData'Destination'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentTransferData'Destination'Variants
    = PaymentIntentTransferData'Destination'Variant1 Account
    | PaymentIntentTransferData'Destination'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentIntentTransferData'Destination'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentIntentTransferData'Destination'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON PaymentIntentTransferData'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (paymentIntentTransferData'Amount obj) : (Data.Aeson..=) "destination" (paymentIntentTransferData'Destination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (paymentIntentTransferData'Amount obj) GHC.Base.<> (Data.Aeson..=) "destination" (paymentIntentTransferData'Destination obj))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentTransferData'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentTransferData'" (\obj -> (GHC.Base.pure PaymentIntentTransferData' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination"))
instance Data.Aeson.ToJSON PaymentIntent
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (paymentIntentAmount obj) : (Data.Aeson..=) "amount_capturable" (paymentIntentAmountCapturable obj) : (Data.Aeson..=) "amount_received" (paymentIntentAmountReceived obj) : (Data.Aeson..=) "application" (paymentIntentApplication obj) : (Data.Aeson..=) "application_fee_amount" (paymentIntentApplicationFeeAmount obj) : (Data.Aeson..=) "canceled_at" (paymentIntentCanceledAt obj) : (Data.Aeson..=) "cancellation_reason" (paymentIntentCancellationReason obj) : (Data.Aeson..=) "capture_method" (paymentIntentCaptureMethod obj) : (Data.Aeson..=) "charges" (paymentIntentCharges obj) : (Data.Aeson..=) "client_secret" (paymentIntentClientSecret obj) : (Data.Aeson..=) "confirmation_method" (paymentIntentConfirmationMethod obj) : (Data.Aeson..=) "created" (paymentIntentCreated obj) : (Data.Aeson..=) "currency" (paymentIntentCurrency obj) : (Data.Aeson..=) "customer" (paymentIntentCustomer obj) : (Data.Aeson..=) "description" (paymentIntentDescription obj) : (Data.Aeson..=) "id" (paymentIntentId obj) : (Data.Aeson..=) "invoice" (paymentIntentInvoice obj) : (Data.Aeson..=) "last_payment_error" (paymentIntentLastPaymentError obj) : (Data.Aeson..=) "livemode" (paymentIntentLivemode obj) : (Data.Aeson..=) "metadata" (paymentIntentMetadata obj) : (Data.Aeson..=) "next_action" (paymentIntentNextAction obj) : (Data.Aeson..=) "object" (paymentIntentObject obj) : (Data.Aeson..=) "on_behalf_of" (paymentIntentOnBehalfOf obj) : (Data.Aeson..=) "payment_method" (paymentIntentPaymentMethod obj) : (Data.Aeson..=) "payment_method_options" (paymentIntentPaymentMethodOptions obj) : (Data.Aeson..=) "payment_method_types" (paymentIntentPaymentMethodTypes obj) : (Data.Aeson..=) "receipt_email" (paymentIntentReceiptEmail obj) : (Data.Aeson..=) "review" (paymentIntentReview obj) : (Data.Aeson..=) "setup_future_usage" (paymentIntentSetupFutureUsage obj) : (Data.Aeson..=) "shipping" (paymentIntentShipping obj) : (Data.Aeson..=) "statement_descriptor" (paymentIntentStatementDescriptor obj) : (Data.Aeson..=) "statement_descriptor_suffix" (paymentIntentStatementDescriptorSuffix obj) : (Data.Aeson..=) "status" (paymentIntentStatus obj) : (Data.Aeson..=) "transfer_data" (paymentIntentTransferData obj) : (Data.Aeson..=) "transfer_group" (paymentIntentTransferGroup obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (paymentIntentAmount obj) GHC.Base.<> ((Data.Aeson..=) "amount_capturable" (paymentIntentAmountCapturable obj) GHC.Base.<> ((Data.Aeson..=) "amount_received" (paymentIntentAmountReceived obj) GHC.Base.<> ((Data.Aeson..=) "application" (paymentIntentApplication obj) GHC.Base.<> ((Data.Aeson..=) "application_fee_amount" (paymentIntentApplicationFeeAmount obj) GHC.Base.<> ((Data.Aeson..=) "canceled_at" (paymentIntentCanceledAt obj) GHC.Base.<> ((Data.Aeson..=) "cancellation_reason" (paymentIntentCancellationReason obj) GHC.Base.<> ((Data.Aeson..=) "capture_method" (paymentIntentCaptureMethod obj) GHC.Base.<> ((Data.Aeson..=) "charges" (paymentIntentCharges obj) GHC.Base.<> ((Data.Aeson..=) "client_secret" (paymentIntentClientSecret obj) GHC.Base.<> ((Data.Aeson..=) "confirmation_method" (paymentIntentConfirmationMethod obj) GHC.Base.<> ((Data.Aeson..=) "created" (paymentIntentCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (paymentIntentCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (paymentIntentCustomer obj) GHC.Base.<> ((Data.Aeson..=) "description" (paymentIntentDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (paymentIntentId obj) GHC.Base.<> ((Data.Aeson..=) "invoice" (paymentIntentInvoice obj) GHC.Base.<> ((Data.Aeson..=) "last_payment_error" (paymentIntentLastPaymentError obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (paymentIntentLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (paymentIntentMetadata obj) GHC.Base.<> ((Data.Aeson..=) "next_action" (paymentIntentNextAction obj) GHC.Base.<> ((Data.Aeson..=) "object" (paymentIntentObject obj) GHC.Base.<> ((Data.Aeson..=) "on_behalf_of" (paymentIntentOnBehalfOf obj) GHC.Base.<> ((Data.Aeson..=) "payment_method" (paymentIntentPaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "payment_method_options" (paymentIntentPaymentMethodOptions obj) GHC.Base.<> ((Data.Aeson..=) "payment_method_types" (paymentIntentPaymentMethodTypes obj) GHC.Base.<> ((Data.Aeson..=) "receipt_email" (paymentIntentReceiptEmail obj) GHC.Base.<> ((Data.Aeson..=) "review" (paymentIntentReview obj) GHC.Base.<> ((Data.Aeson..=) "setup_future_usage" (paymentIntentSetupFutureUsage obj) GHC.Base.<> ((Data.Aeson..=) "shipping" (paymentIntentShipping obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (paymentIntentStatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor_suffix" (paymentIntentStatementDescriptorSuffix obj) GHC.Base.<> ((Data.Aeson..=) "status" (paymentIntentStatus obj) GHC.Base.<> ((Data.Aeson..=) "transfer_data" (paymentIntentTransferData obj) GHC.Base.<> (Data.Aeson..=) "transfer_group" (paymentIntentTransferGroup obj)))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntent
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntent" (\obj -> ((((((((((((((((((((((((((((((((((GHC.Base.pure PaymentIntent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_capturable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "canceled_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cancellation_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "capture_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charges")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "confirmation_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_payment_error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "next_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "review")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor_suffix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_group"))
data PaymentIntentPaymentMethodOptions
    = PaymentIntentPaymentMethodOptions {paymentIntentPaymentMethodOptionsCard :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCard)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentPaymentMethodOptions
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "card" (paymentIntentPaymentMethodOptionsCard obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "card" (paymentIntentPaymentMethodOptionsCard obj))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptions" (\obj -> GHC.Base.pure PaymentIntentPaymentMethodOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card"))
data PaymentIntentPaymentMethodOptionsCard
    = PaymentIntentPaymentMethodOptionsCard {paymentIntentPaymentMethodOptionsCardInstallments :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardInstallments'),
                                             paymentIntentPaymentMethodOptionsCardRequestThreeDSecure :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentPaymentMethodOptionsCardInstallments'
    = PaymentIntentPaymentMethodOptionsCardInstallments' {paymentIntentPaymentMethodOptionsCardInstallments'AvailablePlans :: (GHC.Maybe.Maybe ([] PaymentMethodDetailsCardInstallmentsPlan)),
                                                          paymentIntentPaymentMethodOptionsCardInstallments'Enabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
                                                          paymentIntentPaymentMethodOptionsCardInstallments'Plan :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardInstallments'Plan')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentPaymentMethodOptionsCardInstallments'Plan'
    = PaymentIntentPaymentMethodOptionsCardInstallments'Plan' {paymentIntentPaymentMethodOptionsCardInstallments'Plan'Count :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                                               paymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'),
                                                               paymentIntentPaymentMethodOptionsCardInstallments'Plan'Type :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'
    = PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumTyped GHC.Base.String
    | PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumStringMonth
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'
    where toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumStringMonth) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month"
instance Data.Aeson.FromJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month")
                                          then PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumStringMonth
                                          else PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumOther val)
data PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'
    = PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumTyped GHC.Base.String
    | PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumStringFixedCount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'
    where toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumStringFixedCount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fixed_count"
instance Data.Aeson.FromJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fixed_count")
                                          then PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumStringFixedCount
                                          else PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumOther val)
instance Data.Aeson.ToJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "count" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Count obj) : (Data.Aeson..=) "interval" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval obj) : (Data.Aeson..=) "type" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "count" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Count obj) GHC.Base.<> ((Data.Aeson..=) "interval" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval obj) GHC.Base.<> (Data.Aeson..=) "type" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Type obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCardInstallments'Plan'" (\obj -> ((GHC.Base.pure PaymentIntentPaymentMethodOptionsCardInstallments'Plan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
instance Data.Aeson.ToJSON PaymentIntentPaymentMethodOptionsCardInstallments'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "available_plans" (paymentIntentPaymentMethodOptionsCardInstallments'AvailablePlans obj) : (Data.Aeson..=) "enabled" (paymentIntentPaymentMethodOptionsCardInstallments'Enabled obj) : (Data.Aeson..=) "plan" (paymentIntentPaymentMethodOptionsCardInstallments'Plan obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "available_plans" (paymentIntentPaymentMethodOptionsCardInstallments'AvailablePlans obj) GHC.Base.<> ((Data.Aeson..=) "enabled" (paymentIntentPaymentMethodOptionsCardInstallments'Enabled obj) GHC.Base.<> (Data.Aeson..=) "plan" (paymentIntentPaymentMethodOptionsCardInstallments'Plan obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardInstallments'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCardInstallments'" (\obj -> ((GHC.Base.pure PaymentIntentPaymentMethodOptionsCardInstallments' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_plans")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan"))
data PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'
    = PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumTyped GHC.Base.String
    | PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAny
    | PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAutomatic
    | PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringChallengeOnly
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'
    where toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAny) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "any"
          toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAutomatic) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic"
          toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringChallengeOnly) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "challenge_only"
instance Data.Aeson.FromJSON PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "any")
                                          then PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAny
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "automatic")
                                                then PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAutomatic
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "challenge_only")
                                                      then PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringChallengeOnly
                                                      else PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumOther val)
instance Data.Aeson.ToJSON PaymentIntentPaymentMethodOptionsCard
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "installments" (paymentIntentPaymentMethodOptionsCardInstallments obj) : (Data.Aeson..=) "request_three_d_secure" (paymentIntentPaymentMethodOptionsCardRequestThreeDSecure obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "installments" (paymentIntentPaymentMethodOptionsCardInstallments obj) GHC.Base.<> (Data.Aeson..=) "request_three_d_secure" (paymentIntentPaymentMethodOptionsCardRequestThreeDSecure obj))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCard" (\obj -> (GHC.Base.pure PaymentIntentPaymentMethodOptionsCard GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "request_three_d_secure"))
data PaymentMethod
    = PaymentMethod {paymentMethodBillingDetails :: BillingDetails,
                     paymentMethodCard :: (GHC.Maybe.Maybe PaymentMethodCard),
                     paymentMethodCardPresent :: (GHC.Maybe.Maybe PaymentMethodCardPresent),
                     paymentMethodCreated :: GHC.Integer.Type.Integer,
                     paymentMethodCustomer :: (GHC.Maybe.Maybe PaymentMethodCustomer'Variants),
                     paymentMethodFpx :: (GHC.Maybe.Maybe PaymentMethodFpx),
                     paymentMethodId :: GHC.Base.String,
                     paymentMethodIdeal :: (GHC.Maybe.Maybe PaymentMethodIdeal),
                     paymentMethodLivemode :: GHC.Types.Bool,
                     paymentMethodMetadata :: PaymentMethodMetadata',
                     paymentMethodObject :: PaymentMethodObject',
                     paymentMethodSepaDebit :: (GHC.Maybe.Maybe PaymentMethodSepaDebit),
                     paymentMethodType :: PaymentMethodType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodCustomer'Variants
    = PaymentMethodCustomer'Variant1 Customer
    | PaymentMethodCustomer'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentMethodCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentMethodCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentMethodMetadata'
    = PaymentMethodMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodMetadata'" (\obj -> GHC.Base.pure PaymentMethodMetadata')
data PaymentMethodObject'
    = PaymentMethodObject'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodObject'EnumTyped GHC.Base.String
    | PaymentMethodObject'EnumStringPaymentMethod
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodObject'
    where toJSON (PaymentMethodObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodObject'EnumStringPaymentMethod) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_method"
instance Data.Aeson.FromJSON PaymentMethodObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payment_method")
                                          then PaymentMethodObject'EnumStringPaymentMethod
                                          else PaymentMethodObject'EnumOther val)
data PaymentMethodType'
    = PaymentMethodType'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodType'EnumTyped GHC.Base.String
    | PaymentMethodType'EnumStringCard
    | PaymentMethodType'EnumStringFpx
    | PaymentMethodType'EnumStringIdeal
    | PaymentMethodType'EnumStringSepaDebit
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodType'
    where toJSON (PaymentMethodType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodType'EnumStringCard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card"
          toJSON (PaymentMethodType'EnumStringFpx) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fpx"
          toJSON (PaymentMethodType'EnumStringIdeal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal"
          toJSON (PaymentMethodType'EnumStringSepaDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit"
instance Data.Aeson.FromJSON PaymentMethodType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card")
                                          then PaymentMethodType'EnumStringCard
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fpx")
                                                then PaymentMethodType'EnumStringFpx
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal")
                                                      then PaymentMethodType'EnumStringIdeal
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit")
                                                            then PaymentMethodType'EnumStringSepaDebit
                                                            else PaymentMethodType'EnumOther val)
instance Data.Aeson.ToJSON PaymentMethod
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_details" (paymentMethodBillingDetails obj) : (Data.Aeson..=) "card" (paymentMethodCard obj) : (Data.Aeson..=) "card_present" (paymentMethodCardPresent obj) : (Data.Aeson..=) "created" (paymentMethodCreated obj) : (Data.Aeson..=) "customer" (paymentMethodCustomer obj) : (Data.Aeson..=) "fpx" (paymentMethodFpx obj) : (Data.Aeson..=) "id" (paymentMethodId obj) : (Data.Aeson..=) "ideal" (paymentMethodIdeal obj) : (Data.Aeson..=) "livemode" (paymentMethodLivemode obj) : (Data.Aeson..=) "metadata" (paymentMethodMetadata obj) : (Data.Aeson..=) "object" (paymentMethodObject obj) : (Data.Aeson..=) "sepa_debit" (paymentMethodSepaDebit obj) : (Data.Aeson..=) "type" (paymentMethodType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_details" (paymentMethodBillingDetails obj) GHC.Base.<> ((Data.Aeson..=) "card" (paymentMethodCard obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (paymentMethodCardPresent obj) GHC.Base.<> ((Data.Aeson..=) "created" (paymentMethodCreated obj) GHC.Base.<> ((Data.Aeson..=) "customer" (paymentMethodCustomer obj) GHC.Base.<> ((Data.Aeson..=) "fpx" (paymentMethodFpx obj) GHC.Base.<> ((Data.Aeson..=) "id" (paymentMethodId obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (paymentMethodIdeal obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (paymentMethodLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (paymentMethodMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (paymentMethodObject obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (paymentMethodSepaDebit obj) GHC.Base.<> (Data.Aeson..=) "type" (paymentMethodType obj)))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethod
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethod" (\obj -> ((((((((((((GHC.Base.pure PaymentMethod GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "billing_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fpx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data PaymentMethodCard
    = PaymentMethodCard {paymentMethodCardBrand :: GHC.Base.String,
                         paymentMethodCardChecks :: (GHC.Maybe.Maybe PaymentMethodCardChecks'),
                         paymentMethodCardCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                         paymentMethodCardExpMonth :: GHC.Integer.Type.Integer,
                         paymentMethodCardExpYear :: GHC.Integer.Type.Integer,
                         paymentMethodCardFingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                         paymentMethodCardFunding :: GHC.Base.String,
                         paymentMethodCardGeneratedFrom :: (GHC.Maybe.Maybe PaymentMethodCardGeneratedFrom'),
                         paymentMethodCardLast4 :: GHC.Base.String,
                         paymentMethodCardThreeDSecureUsage :: (GHC.Maybe.Maybe PaymentMethodCardThreeDSecureUsage'),
                         paymentMethodCardWallet :: (GHC.Maybe.Maybe PaymentMethodCardWallet')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodCardChecks'
    = PaymentMethodCardChecks' {paymentMethodCardChecks'AddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentMethodCardChecks'AddressPostalCodeCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentMethodCardChecks'CvcCheck :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardChecks'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address_line1_check" (paymentMethodCardChecks'AddressLine1Check obj) : (Data.Aeson..=) "address_postal_code_check" (paymentMethodCardChecks'AddressPostalCodeCheck obj) : (Data.Aeson..=) "cvc_check" (paymentMethodCardChecks'CvcCheck obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address_line1_check" (paymentMethodCardChecks'AddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_postal_code_check" (paymentMethodCardChecks'AddressPostalCodeCheck obj) GHC.Base.<> (Data.Aeson..=) "cvc_check" (paymentMethodCardChecks'CvcCheck obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardChecks'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardChecks'" (\obj -> ((GHC.Base.pure PaymentMethodCardChecks' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_postal_code_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check"))
data PaymentMethodCardGeneratedFrom'
    = PaymentMethodCardGeneratedFrom' {paymentMethodCardGeneratedFrom'Charge :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodCardGeneratedFrom'PaymentMethodDetails :: (GHC.Maybe.Maybe PaymentMethodCardGeneratedFrom'PaymentMethodDetails')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodCardGeneratedFrom'PaymentMethodDetails'
    = PaymentMethodCardGeneratedFrom'PaymentMethodDetails' {paymentMethodCardGeneratedFrom'PaymentMethodDetails'AchCreditTransfer :: (GHC.Maybe.Maybe PaymentMethodDetailsAchCreditTransfer),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'AchDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsAchDebit),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Alipay :: (GHC.Maybe.Maybe PaymentMethodDetailsAlipay),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Bancontact :: (GHC.Maybe.Maybe PaymentMethodDetailsBancontact),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Card :: (GHC.Maybe.Maybe PaymentMethodDetailsCard),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'CardPresent :: (GHC.Maybe.Maybe PaymentMethodDetailsCardPresent),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Eps :: (GHC.Maybe.Maybe PaymentMethodDetailsEps),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Fpx :: (GHC.Maybe.Maybe PaymentMethodDetailsFpx),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Giropay :: (GHC.Maybe.Maybe PaymentMethodDetailsGiropay),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Ideal :: (GHC.Maybe.Maybe PaymentMethodDetailsIdeal),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Klarna :: (GHC.Maybe.Maybe PaymentMethodDetailsKlarna),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Multibanco :: (GHC.Maybe.Maybe PaymentMethodDetailsMultibanco),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'P24 :: (GHC.Maybe.Maybe PaymentMethodDetailsP24),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'SepaDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsSepaDebit),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Sofort :: (GHC.Maybe.Maybe PaymentMethodDetailsSofort),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'StripeAccount :: (GHC.Maybe.Maybe PaymentMethodDetailsStripeAccount),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Type :: (GHC.Maybe.Maybe GHC.Base.String),
                                                            paymentMethodCardGeneratedFrom'PaymentMethodDetails'Wechat :: (GHC.Maybe.Maybe PaymentMethodDetailsWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardGeneratedFrom'PaymentMethodDetails'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ach_credit_transfer" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'AchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'AchDebit obj) : (Data.Aeson..=) "alipay" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Alipay obj) : (Data.Aeson..=) "bancontact" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Bancontact obj) : (Data.Aeson..=) "card" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Card obj) : (Data.Aeson..=) "card_present" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'CardPresent obj) : (Data.Aeson..=) "eps" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Eps obj) : (Data.Aeson..=) "fpx" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Fpx obj) : (Data.Aeson..=) "giropay" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Giropay obj) : (Data.Aeson..=) "ideal" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Ideal obj) : (Data.Aeson..=) "klarna" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Klarna obj) : (Data.Aeson..=) "multibanco" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Multibanco obj) : (Data.Aeson..=) "p24" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'P24 obj) : (Data.Aeson..=) "sepa_debit" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'SepaDebit obj) : (Data.Aeson..=) "sofort" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Sofort obj) : (Data.Aeson..=) "stripe_account" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'StripeAccount obj) : (Data.Aeson..=) "type" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Type obj) : (Data.Aeson..=) "wechat" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Wechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ach_credit_transfer" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'AchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'AchDebit obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Alipay obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Bancontact obj) GHC.Base.<> ((Data.Aeson..=) "card" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Card obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'CardPresent obj) GHC.Base.<> ((Data.Aeson..=) "eps" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Eps obj) GHC.Base.<> ((Data.Aeson..=) "fpx" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Fpx obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Giropay obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Ideal obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Klarna obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Multibanco obj) GHC.Base.<> ((Data.Aeson..=) "p24" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'P24 obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'SepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Sofort obj) GHC.Base.<> ((Data.Aeson..=) "stripe_account" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'StripeAccount obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Type obj) GHC.Base.<> (Data.Aeson..=) "wechat" (paymentMethodCardGeneratedFrom'PaymentMethodDetails'Wechat obj))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardGeneratedFrom'PaymentMethodDetails'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardGeneratedFrom'PaymentMethodDetails'" (\obj -> (((((((((((((((((GHC.Base.pure PaymentMethodCardGeneratedFrom'PaymentMethodDetails' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fpx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stripe_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
instance Data.Aeson.ToJSON PaymentMethodCardGeneratedFrom'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "charge" (paymentMethodCardGeneratedFrom'Charge obj) : (Data.Aeson..=) "payment_method_details" (paymentMethodCardGeneratedFrom'PaymentMethodDetails obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "charge" (paymentMethodCardGeneratedFrom'Charge obj) GHC.Base.<> (Data.Aeson..=) "payment_method_details" (paymentMethodCardGeneratedFrom'PaymentMethodDetails obj))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardGeneratedFrom'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardGeneratedFrom'" (\obj -> (GHC.Base.pure PaymentMethodCardGeneratedFrom' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method_details"))
data PaymentMethodCardThreeDSecureUsage'
    = PaymentMethodCardThreeDSecureUsage' {paymentMethodCardThreeDSecureUsage'Supported :: (GHC.Maybe.Maybe GHC.Types.Bool)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardThreeDSecureUsage'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "supported" (paymentMethodCardThreeDSecureUsage'Supported obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "supported" (paymentMethodCardThreeDSecureUsage'Supported obj))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardThreeDSecureUsage'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardThreeDSecureUsage'" (\obj -> GHC.Base.pure PaymentMethodCardThreeDSecureUsage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "supported"))
data PaymentMethodCardWallet'
    = PaymentMethodCardWallet' {paymentMethodCardWallet'AmexExpressCheckout :: (GHC.Maybe.Maybe PaymentMethodCardWalletAmexExpressCheckout),
                                paymentMethodCardWallet'ApplePay :: (GHC.Maybe.Maybe PaymentMethodCardWalletApplePay),
                                paymentMethodCardWallet'DynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentMethodCardWallet'GooglePay :: (GHC.Maybe.Maybe PaymentMethodCardWalletGooglePay),
                                paymentMethodCardWallet'Masterpass :: (GHC.Maybe.Maybe PaymentMethodCardWalletMasterpass),
                                paymentMethodCardWallet'SamsungPay :: (GHC.Maybe.Maybe PaymentMethodCardWalletSamsungPay),
                                paymentMethodCardWallet'Type :: (GHC.Maybe.Maybe PaymentMethodCardWallet'Type'),
                                paymentMethodCardWallet'VisaCheckout :: (GHC.Maybe.Maybe PaymentMethodCardWalletVisaCheckout)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodCardWallet'Type'
    = PaymentMethodCardWallet'Type'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodCardWallet'Type'EnumTyped GHC.Base.String
    | PaymentMethodCardWallet'Type'EnumStringAmexExpressCheckout
    | PaymentMethodCardWallet'Type'EnumStringApplePay
    | PaymentMethodCardWallet'Type'EnumStringGooglePay
    | PaymentMethodCardWallet'Type'EnumStringMasterpass
    | PaymentMethodCardWallet'Type'EnumStringSamsungPay
    | PaymentMethodCardWallet'Type'EnumStringVisaCheckout
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardWallet'Type'
    where toJSON (PaymentMethodCardWallet'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodCardWallet'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodCardWallet'Type'EnumStringAmexExpressCheckout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amex_express_checkout"
          toJSON (PaymentMethodCardWallet'Type'EnumStringApplePay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "apple_pay"
          toJSON (PaymentMethodCardWallet'Type'EnumStringGooglePay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay"
          toJSON (PaymentMethodCardWallet'Type'EnumStringMasterpass) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masterpass"
          toJSON (PaymentMethodCardWallet'Type'EnumStringSamsungPay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "samsung_pay"
          toJSON (PaymentMethodCardWallet'Type'EnumStringVisaCheckout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "visa_checkout"
instance Data.Aeson.FromJSON PaymentMethodCardWallet'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amex_express_checkout")
                                          then PaymentMethodCardWallet'Type'EnumStringAmexExpressCheckout
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "apple_pay")
                                                then PaymentMethodCardWallet'Type'EnumStringApplePay
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay")
                                                      then PaymentMethodCardWallet'Type'EnumStringGooglePay
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masterpass")
                                                            then PaymentMethodCardWallet'Type'EnumStringMasterpass
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "samsung_pay")
                                                                  then PaymentMethodCardWallet'Type'EnumStringSamsungPay
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "visa_checkout")
                                                                        then PaymentMethodCardWallet'Type'EnumStringVisaCheckout
                                                                        else PaymentMethodCardWallet'Type'EnumOther val)
instance Data.Aeson.ToJSON PaymentMethodCardWallet'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amex_express_checkout" (paymentMethodCardWallet'AmexExpressCheckout obj) : (Data.Aeson..=) "apple_pay" (paymentMethodCardWallet'ApplePay obj) : (Data.Aeson..=) "dynamic_last4" (paymentMethodCardWallet'DynamicLast4 obj) : (Data.Aeson..=) "google_pay" (paymentMethodCardWallet'GooglePay obj) : (Data.Aeson..=) "masterpass" (paymentMethodCardWallet'Masterpass obj) : (Data.Aeson..=) "samsung_pay" (paymentMethodCardWallet'SamsungPay obj) : (Data.Aeson..=) "type" (paymentMethodCardWallet'Type obj) : (Data.Aeson..=) "visa_checkout" (paymentMethodCardWallet'VisaCheckout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amex_express_checkout" (paymentMethodCardWallet'AmexExpressCheckout obj) GHC.Base.<> ((Data.Aeson..=) "apple_pay" (paymentMethodCardWallet'ApplePay obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (paymentMethodCardWallet'DynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "google_pay" (paymentMethodCardWallet'GooglePay obj) GHC.Base.<> ((Data.Aeson..=) "masterpass" (paymentMethodCardWallet'Masterpass obj) GHC.Base.<> ((Data.Aeson..=) "samsung_pay" (paymentMethodCardWallet'SamsungPay obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentMethodCardWallet'Type obj) GHC.Base.<> (Data.Aeson..=) "visa_checkout" (paymentMethodCardWallet'VisaCheckout obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardWallet'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardWallet'" (\obj -> (((((((GHC.Base.pure PaymentMethodCardWallet' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amex_express_checkout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "apple_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "google_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "masterpass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "samsung_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "visa_checkout"))
instance Data.Aeson.ToJSON PaymentMethodCard
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "brand" (paymentMethodCardBrand obj) : (Data.Aeson..=) "checks" (paymentMethodCardChecks obj) : (Data.Aeson..=) "country" (paymentMethodCardCountry obj) : (Data.Aeson..=) "exp_month" (paymentMethodCardExpMonth obj) : (Data.Aeson..=) "exp_year" (paymentMethodCardExpYear obj) : (Data.Aeson..=) "fingerprint" (paymentMethodCardFingerprint obj) : (Data.Aeson..=) "funding" (paymentMethodCardFunding obj) : (Data.Aeson..=) "generated_from" (paymentMethodCardGeneratedFrom obj) : (Data.Aeson..=) "last4" (paymentMethodCardLast4 obj) : (Data.Aeson..=) "three_d_secure_usage" (paymentMethodCardThreeDSecureUsage obj) : (Data.Aeson..=) "wallet" (paymentMethodCardWallet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "brand" (paymentMethodCardBrand obj) GHC.Base.<> ((Data.Aeson..=) "checks" (paymentMethodCardChecks obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodCardCountry obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (paymentMethodCardExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (paymentMethodCardExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (paymentMethodCardFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "funding" (paymentMethodCardFunding obj) GHC.Base.<> ((Data.Aeson..=) "generated_from" (paymentMethodCardGeneratedFrom obj) GHC.Base.<> ((Data.Aeson..=) "last4" (paymentMethodCardLast4 obj) GHC.Base.<> ((Data.Aeson..=) "three_d_secure_usage" (paymentMethodCardThreeDSecureUsage obj) GHC.Base.<> (Data.Aeson..=) "wallet" (paymentMethodCardWallet obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCard
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCard" (\obj -> ((((((((((GHC.Base.pure PaymentMethodCard GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "checks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "generated_from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wallet"))
data PaymentMethodCardGeneratedCard
    = PaymentMethodCardGeneratedCard {paymentMethodCardGeneratedCardCharge :: (GHC.Maybe.Maybe GHC.Base.String),
                                      paymentMethodCardGeneratedCardPaymentMethodDetails :: (GHC.Maybe.Maybe PaymentMethodCardGeneratedCardPaymentMethodDetails')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodCardGeneratedCardPaymentMethodDetails'
    = PaymentMethodCardGeneratedCardPaymentMethodDetails' {paymentMethodCardGeneratedCardPaymentMethodDetails'AchCreditTransfer :: (GHC.Maybe.Maybe PaymentMethodDetailsAchCreditTransfer),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'AchDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsAchDebit),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Alipay :: (GHC.Maybe.Maybe PaymentMethodDetailsAlipay),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Bancontact :: (GHC.Maybe.Maybe PaymentMethodDetailsBancontact),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Card :: (GHC.Maybe.Maybe PaymentMethodDetailsCard),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'CardPresent :: (GHC.Maybe.Maybe PaymentMethodDetailsCardPresent),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Eps :: (GHC.Maybe.Maybe PaymentMethodDetailsEps),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Fpx :: (GHC.Maybe.Maybe PaymentMethodDetailsFpx),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Giropay :: (GHC.Maybe.Maybe PaymentMethodDetailsGiropay),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Ideal :: (GHC.Maybe.Maybe PaymentMethodDetailsIdeal),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Klarna :: (GHC.Maybe.Maybe PaymentMethodDetailsKlarna),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Multibanco :: (GHC.Maybe.Maybe PaymentMethodDetailsMultibanco),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'P24 :: (GHC.Maybe.Maybe PaymentMethodDetailsP24),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'SepaDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsSepaDebit),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Sofort :: (GHC.Maybe.Maybe PaymentMethodDetailsSofort),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'StripeAccount :: (GHC.Maybe.Maybe PaymentMethodDetailsStripeAccount),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Type :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentMethodCardGeneratedCardPaymentMethodDetails'Wechat :: (GHC.Maybe.Maybe PaymentMethodDetailsWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardGeneratedCardPaymentMethodDetails'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ach_credit_transfer" (paymentMethodCardGeneratedCardPaymentMethodDetails'AchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (paymentMethodCardGeneratedCardPaymentMethodDetails'AchDebit obj) : (Data.Aeson..=) "alipay" (paymentMethodCardGeneratedCardPaymentMethodDetails'Alipay obj) : (Data.Aeson..=) "bancontact" (paymentMethodCardGeneratedCardPaymentMethodDetails'Bancontact obj) : (Data.Aeson..=) "card" (paymentMethodCardGeneratedCardPaymentMethodDetails'Card obj) : (Data.Aeson..=) "card_present" (paymentMethodCardGeneratedCardPaymentMethodDetails'CardPresent obj) : (Data.Aeson..=) "eps" (paymentMethodCardGeneratedCardPaymentMethodDetails'Eps obj) : (Data.Aeson..=) "fpx" (paymentMethodCardGeneratedCardPaymentMethodDetails'Fpx obj) : (Data.Aeson..=) "giropay" (paymentMethodCardGeneratedCardPaymentMethodDetails'Giropay obj) : (Data.Aeson..=) "ideal" (paymentMethodCardGeneratedCardPaymentMethodDetails'Ideal obj) : (Data.Aeson..=) "klarna" (paymentMethodCardGeneratedCardPaymentMethodDetails'Klarna obj) : (Data.Aeson..=) "multibanco" (paymentMethodCardGeneratedCardPaymentMethodDetails'Multibanco obj) : (Data.Aeson..=) "p24" (paymentMethodCardGeneratedCardPaymentMethodDetails'P24 obj) : (Data.Aeson..=) "sepa_debit" (paymentMethodCardGeneratedCardPaymentMethodDetails'SepaDebit obj) : (Data.Aeson..=) "sofort" (paymentMethodCardGeneratedCardPaymentMethodDetails'Sofort obj) : (Data.Aeson..=) "stripe_account" (paymentMethodCardGeneratedCardPaymentMethodDetails'StripeAccount obj) : (Data.Aeson..=) "type" (paymentMethodCardGeneratedCardPaymentMethodDetails'Type obj) : (Data.Aeson..=) "wechat" (paymentMethodCardGeneratedCardPaymentMethodDetails'Wechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ach_credit_transfer" (paymentMethodCardGeneratedCardPaymentMethodDetails'AchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (paymentMethodCardGeneratedCardPaymentMethodDetails'AchDebit obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (paymentMethodCardGeneratedCardPaymentMethodDetails'Alipay obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (paymentMethodCardGeneratedCardPaymentMethodDetails'Bancontact obj) GHC.Base.<> ((Data.Aeson..=) "card" (paymentMethodCardGeneratedCardPaymentMethodDetails'Card obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (paymentMethodCardGeneratedCardPaymentMethodDetails'CardPresent obj) GHC.Base.<> ((Data.Aeson..=) "eps" (paymentMethodCardGeneratedCardPaymentMethodDetails'Eps obj) GHC.Base.<> ((Data.Aeson..=) "fpx" (paymentMethodCardGeneratedCardPaymentMethodDetails'Fpx obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (paymentMethodCardGeneratedCardPaymentMethodDetails'Giropay obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (paymentMethodCardGeneratedCardPaymentMethodDetails'Ideal obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (paymentMethodCardGeneratedCardPaymentMethodDetails'Klarna obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (paymentMethodCardGeneratedCardPaymentMethodDetails'Multibanco obj) GHC.Base.<> ((Data.Aeson..=) "p24" (paymentMethodCardGeneratedCardPaymentMethodDetails'P24 obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (paymentMethodCardGeneratedCardPaymentMethodDetails'SepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (paymentMethodCardGeneratedCardPaymentMethodDetails'Sofort obj) GHC.Base.<> ((Data.Aeson..=) "stripe_account" (paymentMethodCardGeneratedCardPaymentMethodDetails'StripeAccount obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentMethodCardGeneratedCardPaymentMethodDetails'Type obj) GHC.Base.<> (Data.Aeson..=) "wechat" (paymentMethodCardGeneratedCardPaymentMethodDetails'Wechat obj))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardGeneratedCardPaymentMethodDetails'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardGeneratedCardPaymentMethodDetails'" (\obj -> (((((((((((((((((GHC.Base.pure PaymentMethodCardGeneratedCardPaymentMethodDetails' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fpx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stripe_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
instance Data.Aeson.ToJSON PaymentMethodCardGeneratedCard
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "charge" (paymentMethodCardGeneratedCardCharge obj) : (Data.Aeson..=) "payment_method_details" (paymentMethodCardGeneratedCardPaymentMethodDetails obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "charge" (paymentMethodCardGeneratedCardCharge obj) GHC.Base.<> (Data.Aeson..=) "payment_method_details" (paymentMethodCardGeneratedCardPaymentMethodDetails obj))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardGeneratedCard
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardGeneratedCard" (\obj -> (GHC.Base.pure PaymentMethodCardGeneratedCard GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method_details"))
data PaymentMethodCardWallet
    = PaymentMethodCardWallet {paymentMethodCardWalletAmexExpressCheckout :: (GHC.Maybe.Maybe PaymentMethodCardWalletAmexExpressCheckout),
                               paymentMethodCardWalletApplePay :: (GHC.Maybe.Maybe PaymentMethodCardWalletApplePay),
                               paymentMethodCardWalletDynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                               paymentMethodCardWalletGooglePay :: (GHC.Maybe.Maybe PaymentMethodCardWalletGooglePay),
                               paymentMethodCardWalletMasterpass :: (GHC.Maybe.Maybe PaymentMethodCardWalletMasterpass),
                               paymentMethodCardWalletSamsungPay :: (GHC.Maybe.Maybe PaymentMethodCardWalletSamsungPay),
                               paymentMethodCardWalletType :: PaymentMethodCardWalletType',
                               paymentMethodCardWalletVisaCheckout :: (GHC.Maybe.Maybe PaymentMethodCardWalletVisaCheckout)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodCardWalletType'
    = PaymentMethodCardWalletType'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodCardWalletType'EnumTyped GHC.Base.String
    | PaymentMethodCardWalletType'EnumStringAmexExpressCheckout
    | PaymentMethodCardWalletType'EnumStringApplePay
    | PaymentMethodCardWalletType'EnumStringGooglePay
    | PaymentMethodCardWalletType'EnumStringMasterpass
    | PaymentMethodCardWalletType'EnumStringSamsungPay
    | PaymentMethodCardWalletType'EnumStringVisaCheckout
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardWalletType'
    where toJSON (PaymentMethodCardWalletType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodCardWalletType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodCardWalletType'EnumStringAmexExpressCheckout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amex_express_checkout"
          toJSON (PaymentMethodCardWalletType'EnumStringApplePay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "apple_pay"
          toJSON (PaymentMethodCardWalletType'EnumStringGooglePay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay"
          toJSON (PaymentMethodCardWalletType'EnumStringMasterpass) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masterpass"
          toJSON (PaymentMethodCardWalletType'EnumStringSamsungPay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "samsung_pay"
          toJSON (PaymentMethodCardWalletType'EnumStringVisaCheckout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "visa_checkout"
instance Data.Aeson.FromJSON PaymentMethodCardWalletType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amex_express_checkout")
                                          then PaymentMethodCardWalletType'EnumStringAmexExpressCheckout
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "apple_pay")
                                                then PaymentMethodCardWalletType'EnumStringApplePay
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay")
                                                      then PaymentMethodCardWalletType'EnumStringGooglePay
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masterpass")
                                                            then PaymentMethodCardWalletType'EnumStringMasterpass
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "samsung_pay")
                                                                  then PaymentMethodCardWalletType'EnumStringSamsungPay
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "visa_checkout")
                                                                        then PaymentMethodCardWalletType'EnumStringVisaCheckout
                                                                        else PaymentMethodCardWalletType'EnumOther val)
instance Data.Aeson.ToJSON PaymentMethodCardWallet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amex_express_checkout" (paymentMethodCardWalletAmexExpressCheckout obj) : (Data.Aeson..=) "apple_pay" (paymentMethodCardWalletApplePay obj) : (Data.Aeson..=) "dynamic_last4" (paymentMethodCardWalletDynamicLast4 obj) : (Data.Aeson..=) "google_pay" (paymentMethodCardWalletGooglePay obj) : (Data.Aeson..=) "masterpass" (paymentMethodCardWalletMasterpass obj) : (Data.Aeson..=) "samsung_pay" (paymentMethodCardWalletSamsungPay obj) : (Data.Aeson..=) "type" (paymentMethodCardWalletType obj) : (Data.Aeson..=) "visa_checkout" (paymentMethodCardWalletVisaCheckout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amex_express_checkout" (paymentMethodCardWalletAmexExpressCheckout obj) GHC.Base.<> ((Data.Aeson..=) "apple_pay" (paymentMethodCardWalletApplePay obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (paymentMethodCardWalletDynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "google_pay" (paymentMethodCardWalletGooglePay obj) GHC.Base.<> ((Data.Aeson..=) "masterpass" (paymentMethodCardWalletMasterpass obj) GHC.Base.<> ((Data.Aeson..=) "samsung_pay" (paymentMethodCardWalletSamsungPay obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentMethodCardWalletType obj) GHC.Base.<> (Data.Aeson..=) "visa_checkout" (paymentMethodCardWalletVisaCheckout obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardWallet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardWallet" (\obj -> (((((((GHC.Base.pure PaymentMethodCardWallet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amex_express_checkout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "apple_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "google_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "masterpass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "samsung_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "visa_checkout"))
data PaymentMethodCardWalletMasterpass
    = PaymentMethodCardWalletMasterpass {paymentMethodCardWalletMasterpassBillingAddress :: (GHC.Maybe.Maybe PaymentMethodCardWalletMasterpassBillingAddress'),
                                         paymentMethodCardWalletMasterpassEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                                         paymentMethodCardWalletMasterpassName :: (GHC.Maybe.Maybe GHC.Base.String),
                                         paymentMethodCardWalletMasterpassShippingAddress :: (GHC.Maybe.Maybe PaymentMethodCardWalletMasterpassShippingAddress')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodCardWalletMasterpassBillingAddress'
    = PaymentMethodCardWalletMasterpassBillingAddress' {paymentMethodCardWalletMasterpassBillingAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                        paymentMethodCardWalletMasterpassBillingAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                        paymentMethodCardWalletMasterpassBillingAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                        paymentMethodCardWalletMasterpassBillingAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                        paymentMethodCardWalletMasterpassBillingAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                        paymentMethodCardWalletMasterpassBillingAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardWalletMasterpassBillingAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentMethodCardWalletMasterpassBillingAddress'City obj) : (Data.Aeson..=) "country" (paymentMethodCardWalletMasterpassBillingAddress'Country obj) : (Data.Aeson..=) "line1" (paymentMethodCardWalletMasterpassBillingAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentMethodCardWalletMasterpassBillingAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentMethodCardWalletMasterpassBillingAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentMethodCardWalletMasterpassBillingAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentMethodCardWalletMasterpassBillingAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodCardWalletMasterpassBillingAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentMethodCardWalletMasterpassBillingAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentMethodCardWalletMasterpassBillingAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentMethodCardWalletMasterpassBillingAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentMethodCardWalletMasterpassBillingAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardWalletMasterpassBillingAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardWalletMasterpassBillingAddress'" (\obj -> (((((GHC.Base.pure PaymentMethodCardWalletMasterpassBillingAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data PaymentMethodCardWalletMasterpassShippingAddress'
    = PaymentMethodCardWalletMasterpassShippingAddress' {paymentMethodCardWalletMasterpassShippingAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                         paymentMethodCardWalletMasterpassShippingAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                         paymentMethodCardWalletMasterpassShippingAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                         paymentMethodCardWalletMasterpassShippingAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                         paymentMethodCardWalletMasterpassShippingAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                         paymentMethodCardWalletMasterpassShippingAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardWalletMasterpassShippingAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentMethodCardWalletMasterpassShippingAddress'City obj) : (Data.Aeson..=) "country" (paymentMethodCardWalletMasterpassShippingAddress'Country obj) : (Data.Aeson..=) "line1" (paymentMethodCardWalletMasterpassShippingAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentMethodCardWalletMasterpassShippingAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentMethodCardWalletMasterpassShippingAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentMethodCardWalletMasterpassShippingAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentMethodCardWalletMasterpassShippingAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodCardWalletMasterpassShippingAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentMethodCardWalletMasterpassShippingAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentMethodCardWalletMasterpassShippingAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentMethodCardWalletMasterpassShippingAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentMethodCardWalletMasterpassShippingAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardWalletMasterpassShippingAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardWalletMasterpassShippingAddress'" (\obj -> (((((GHC.Base.pure PaymentMethodCardWalletMasterpassShippingAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON PaymentMethodCardWalletMasterpass
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_address" (paymentMethodCardWalletMasterpassBillingAddress obj) : (Data.Aeson..=) "email" (paymentMethodCardWalletMasterpassEmail obj) : (Data.Aeson..=) "name" (paymentMethodCardWalletMasterpassName obj) : (Data.Aeson..=) "shipping_address" (paymentMethodCardWalletMasterpassShippingAddress obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_address" (paymentMethodCardWalletMasterpassBillingAddress obj) GHC.Base.<> ((Data.Aeson..=) "email" (paymentMethodCardWalletMasterpassEmail obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentMethodCardWalletMasterpassName obj) GHC.Base.<> (Data.Aeson..=) "shipping_address" (paymentMethodCardWalletMasterpassShippingAddress obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardWalletMasterpass
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardWalletMasterpass" (\obj -> (((GHC.Base.pure PaymentMethodCardWalletMasterpass GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_address"))
data PaymentMethodCardWalletVisaCheckout
    = PaymentMethodCardWalletVisaCheckout {paymentMethodCardWalletVisaCheckoutBillingAddress :: (GHC.Maybe.Maybe PaymentMethodCardWalletVisaCheckoutBillingAddress'),
                                           paymentMethodCardWalletVisaCheckoutEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentMethodCardWalletVisaCheckoutName :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentMethodCardWalletVisaCheckoutShippingAddress :: (GHC.Maybe.Maybe PaymentMethodCardWalletVisaCheckoutShippingAddress')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodCardWalletVisaCheckoutBillingAddress'
    = PaymentMethodCardWalletVisaCheckoutBillingAddress' {paymentMethodCardWalletVisaCheckoutBillingAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                          paymentMethodCardWalletVisaCheckoutBillingAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                          paymentMethodCardWalletVisaCheckoutBillingAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                          paymentMethodCardWalletVisaCheckoutBillingAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                          paymentMethodCardWalletVisaCheckoutBillingAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                          paymentMethodCardWalletVisaCheckoutBillingAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardWalletVisaCheckoutBillingAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentMethodCardWalletVisaCheckoutBillingAddress'City obj) : (Data.Aeson..=) "country" (paymentMethodCardWalletVisaCheckoutBillingAddress'Country obj) : (Data.Aeson..=) "line1" (paymentMethodCardWalletVisaCheckoutBillingAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentMethodCardWalletVisaCheckoutBillingAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentMethodCardWalletVisaCheckoutBillingAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentMethodCardWalletVisaCheckoutBillingAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentMethodCardWalletVisaCheckoutBillingAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodCardWalletVisaCheckoutBillingAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentMethodCardWalletVisaCheckoutBillingAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentMethodCardWalletVisaCheckoutBillingAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentMethodCardWalletVisaCheckoutBillingAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentMethodCardWalletVisaCheckoutBillingAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardWalletVisaCheckoutBillingAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardWalletVisaCheckoutBillingAddress'" (\obj -> (((((GHC.Base.pure PaymentMethodCardWalletVisaCheckoutBillingAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data PaymentMethodCardWalletVisaCheckoutShippingAddress'
    = PaymentMethodCardWalletVisaCheckoutShippingAddress' {paymentMethodCardWalletVisaCheckoutShippingAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentMethodCardWalletVisaCheckoutShippingAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentMethodCardWalletVisaCheckoutShippingAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentMethodCardWalletVisaCheckoutShippingAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentMethodCardWalletVisaCheckoutShippingAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                           paymentMethodCardWalletVisaCheckoutShippingAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodCardWalletVisaCheckoutShippingAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentMethodCardWalletVisaCheckoutShippingAddress'City obj) : (Data.Aeson..=) "country" (paymentMethodCardWalletVisaCheckoutShippingAddress'Country obj) : (Data.Aeson..=) "line1" (paymentMethodCardWalletVisaCheckoutShippingAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentMethodCardWalletVisaCheckoutShippingAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentMethodCardWalletVisaCheckoutShippingAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentMethodCardWalletVisaCheckoutShippingAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentMethodCardWalletVisaCheckoutShippingAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodCardWalletVisaCheckoutShippingAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentMethodCardWalletVisaCheckoutShippingAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentMethodCardWalletVisaCheckoutShippingAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentMethodCardWalletVisaCheckoutShippingAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentMethodCardWalletVisaCheckoutShippingAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardWalletVisaCheckoutShippingAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardWalletVisaCheckoutShippingAddress'" (\obj -> (((((GHC.Base.pure PaymentMethodCardWalletVisaCheckoutShippingAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON PaymentMethodCardWalletVisaCheckout
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_address" (paymentMethodCardWalletVisaCheckoutBillingAddress obj) : (Data.Aeson..=) "email" (paymentMethodCardWalletVisaCheckoutEmail obj) : (Data.Aeson..=) "name" (paymentMethodCardWalletVisaCheckoutName obj) : (Data.Aeson..=) "shipping_address" (paymentMethodCardWalletVisaCheckoutShippingAddress obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_address" (paymentMethodCardWalletVisaCheckoutBillingAddress obj) GHC.Base.<> ((Data.Aeson..=) "email" (paymentMethodCardWalletVisaCheckoutEmail obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentMethodCardWalletVisaCheckoutName obj) GHC.Base.<> (Data.Aeson..=) "shipping_address" (paymentMethodCardWalletVisaCheckoutShippingAddress obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodCardWalletVisaCheckout
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodCardWalletVisaCheckout" (\obj -> (((GHC.Base.pure PaymentMethodCardWalletVisaCheckout GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_address"))
data PaymentMethodDetails
    = PaymentMethodDetails {paymentMethodDetailsAchCreditTransfer :: (GHC.Maybe.Maybe PaymentMethodDetailsAchCreditTransfer),
                            paymentMethodDetailsAchDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsAchDebit),
                            paymentMethodDetailsAlipay :: (GHC.Maybe.Maybe PaymentMethodDetailsAlipay),
                            paymentMethodDetailsBancontact :: (GHC.Maybe.Maybe PaymentMethodDetailsBancontact),
                            paymentMethodDetailsCard :: (GHC.Maybe.Maybe PaymentMethodDetailsCard),
                            paymentMethodDetailsCardPresent :: (GHC.Maybe.Maybe PaymentMethodDetailsCardPresent),
                            paymentMethodDetailsEps :: (GHC.Maybe.Maybe PaymentMethodDetailsEps),
                            paymentMethodDetailsFpx :: (GHC.Maybe.Maybe PaymentMethodDetailsFpx),
                            paymentMethodDetailsGiropay :: (GHC.Maybe.Maybe PaymentMethodDetailsGiropay),
                            paymentMethodDetailsIdeal :: (GHC.Maybe.Maybe PaymentMethodDetailsIdeal),
                            paymentMethodDetailsKlarna :: (GHC.Maybe.Maybe PaymentMethodDetailsKlarna),
                            paymentMethodDetailsMultibanco :: (GHC.Maybe.Maybe PaymentMethodDetailsMultibanco),
                            paymentMethodDetailsP24 :: (GHC.Maybe.Maybe PaymentMethodDetailsP24),
                            paymentMethodDetailsSepaDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsSepaDebit),
                            paymentMethodDetailsSofort :: (GHC.Maybe.Maybe PaymentMethodDetailsSofort),
                            paymentMethodDetailsStripeAccount :: (GHC.Maybe.Maybe PaymentMethodDetailsStripeAccount),
                            paymentMethodDetailsType :: GHC.Base.String,
                            paymentMethodDetailsWechat :: (GHC.Maybe.Maybe PaymentMethodDetailsWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetails
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ach_credit_transfer" (paymentMethodDetailsAchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (paymentMethodDetailsAchDebit obj) : (Data.Aeson..=) "alipay" (paymentMethodDetailsAlipay obj) : (Data.Aeson..=) "bancontact" (paymentMethodDetailsBancontact obj) : (Data.Aeson..=) "card" (paymentMethodDetailsCard obj) : (Data.Aeson..=) "card_present" (paymentMethodDetailsCardPresent obj) : (Data.Aeson..=) "eps" (paymentMethodDetailsEps obj) : (Data.Aeson..=) "fpx" (paymentMethodDetailsFpx obj) : (Data.Aeson..=) "giropay" (paymentMethodDetailsGiropay obj) : (Data.Aeson..=) "ideal" (paymentMethodDetailsIdeal obj) : (Data.Aeson..=) "klarna" (paymentMethodDetailsKlarna obj) : (Data.Aeson..=) "multibanco" (paymentMethodDetailsMultibanco obj) : (Data.Aeson..=) "p24" (paymentMethodDetailsP24 obj) : (Data.Aeson..=) "sepa_debit" (paymentMethodDetailsSepaDebit obj) : (Data.Aeson..=) "sofort" (paymentMethodDetailsSofort obj) : (Data.Aeson..=) "stripe_account" (paymentMethodDetailsStripeAccount obj) : (Data.Aeson..=) "type" (paymentMethodDetailsType obj) : (Data.Aeson..=) "wechat" (paymentMethodDetailsWechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ach_credit_transfer" (paymentMethodDetailsAchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (paymentMethodDetailsAchDebit obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (paymentMethodDetailsAlipay obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (paymentMethodDetailsBancontact obj) GHC.Base.<> ((Data.Aeson..=) "card" (paymentMethodDetailsCard obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (paymentMethodDetailsCardPresent obj) GHC.Base.<> ((Data.Aeson..=) "eps" (paymentMethodDetailsEps obj) GHC.Base.<> ((Data.Aeson..=) "fpx" (paymentMethodDetailsFpx obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (paymentMethodDetailsGiropay obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (paymentMethodDetailsIdeal obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (paymentMethodDetailsKlarna obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (paymentMethodDetailsMultibanco obj) GHC.Base.<> ((Data.Aeson..=) "p24" (paymentMethodDetailsP24 obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (paymentMethodDetailsSepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (paymentMethodDetailsSofort obj) GHC.Base.<> ((Data.Aeson..=) "stripe_account" (paymentMethodDetailsStripeAccount obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentMethodDetailsType obj) GHC.Base.<> (Data.Aeson..=) "wechat" (paymentMethodDetailsWechat obj))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetails
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetails" (\obj -> (((((((((((((((((GHC.Base.pure PaymentMethodDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fpx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stripe_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
data PaymentMethodDetailsCard
    = PaymentMethodDetailsCard {paymentMethodDetailsCardBrand :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentMethodDetailsCardChecks :: (GHC.Maybe.Maybe PaymentMethodDetailsCardChecks'),
                                paymentMethodDetailsCardCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentMethodDetailsCardExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                paymentMethodDetailsCardExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                paymentMethodDetailsCardFingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentMethodDetailsCardFunding :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentMethodDetailsCardInstallments :: (GHC.Maybe.Maybe PaymentMethodDetailsCardInstallments'),
                                paymentMethodDetailsCardLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentMethodDetailsCardNetwork :: (GHC.Maybe.Maybe GHC.Base.String),
                                paymentMethodDetailsCardThreeDSecure :: (GHC.Maybe.Maybe PaymentMethodDetailsCardThreeDSecure'),
                                paymentMethodDetailsCardWallet :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWallet')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardChecks'
    = PaymentMethodDetailsCardChecks' {paymentMethodDetailsCardChecks'AddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardChecks'AddressPostalCodeCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardChecks'CvcCheck :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardChecks'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address_line1_check" (paymentMethodDetailsCardChecks'AddressLine1Check obj) : (Data.Aeson..=) "address_postal_code_check" (paymentMethodDetailsCardChecks'AddressPostalCodeCheck obj) : (Data.Aeson..=) "cvc_check" (paymentMethodDetailsCardChecks'CvcCheck obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address_line1_check" (paymentMethodDetailsCardChecks'AddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_postal_code_check" (paymentMethodDetailsCardChecks'AddressPostalCodeCheck obj) GHC.Base.<> (Data.Aeson..=) "cvc_check" (paymentMethodDetailsCardChecks'CvcCheck obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardChecks'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardChecks'" (\obj -> ((GHC.Base.pure PaymentMethodDetailsCardChecks' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_postal_code_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check"))
data PaymentMethodDetailsCardInstallments'
    = PaymentMethodDetailsCardInstallments' {paymentMethodDetailsCardInstallments'Plan :: (GHC.Maybe.Maybe PaymentMethodDetailsCardInstallments'Plan')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardInstallments'Plan'
    = PaymentMethodDetailsCardInstallments'Plan' {paymentMethodDetailsCardInstallments'Plan'Count :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                                  paymentMethodDetailsCardInstallments'Plan'Interval :: (GHC.Maybe.Maybe PaymentMethodDetailsCardInstallments'Plan'Interval'),
                                                  paymentMethodDetailsCardInstallments'Plan'Type :: (GHC.Maybe.Maybe PaymentMethodDetailsCardInstallments'Plan'Type')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardInstallments'Plan'Interval'
    = PaymentMethodDetailsCardInstallments'Plan'Interval'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodDetailsCardInstallments'Plan'Interval'EnumTyped GHC.Base.String
    | PaymentMethodDetailsCardInstallments'Plan'Interval'EnumStringMonth
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardInstallments'Plan'Interval'
    where toJSON (PaymentMethodDetailsCardInstallments'Plan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardInstallments'Plan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardInstallments'Plan'Interval'EnumStringMonth) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month"
instance Data.Aeson.FromJSON PaymentMethodDetailsCardInstallments'Plan'Interval'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month")
                                          then PaymentMethodDetailsCardInstallments'Plan'Interval'EnumStringMonth
                                          else PaymentMethodDetailsCardInstallments'Plan'Interval'EnumOther val)
data PaymentMethodDetailsCardInstallments'Plan'Type'
    = PaymentMethodDetailsCardInstallments'Plan'Type'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodDetailsCardInstallments'Plan'Type'EnumTyped GHC.Base.String
    | PaymentMethodDetailsCardInstallments'Plan'Type'EnumStringFixedCount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardInstallments'Plan'Type'
    where toJSON (PaymentMethodDetailsCardInstallments'Plan'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardInstallments'Plan'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardInstallments'Plan'Type'EnumStringFixedCount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fixed_count"
instance Data.Aeson.FromJSON PaymentMethodDetailsCardInstallments'Plan'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fixed_count")
                                          then PaymentMethodDetailsCardInstallments'Plan'Type'EnumStringFixedCount
                                          else PaymentMethodDetailsCardInstallments'Plan'Type'EnumOther val)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardInstallments'Plan'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "count" (paymentMethodDetailsCardInstallments'Plan'Count obj) : (Data.Aeson..=) "interval" (paymentMethodDetailsCardInstallments'Plan'Interval obj) : (Data.Aeson..=) "type" (paymentMethodDetailsCardInstallments'Plan'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "count" (paymentMethodDetailsCardInstallments'Plan'Count obj) GHC.Base.<> ((Data.Aeson..=) "interval" (paymentMethodDetailsCardInstallments'Plan'Interval obj) GHC.Base.<> (Data.Aeson..=) "type" (paymentMethodDetailsCardInstallments'Plan'Type obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardInstallments'Plan'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardInstallments'Plan'" (\obj -> ((GHC.Base.pure PaymentMethodDetailsCardInstallments'Plan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
instance Data.Aeson.ToJSON PaymentMethodDetailsCardInstallments'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "plan" (paymentMethodDetailsCardInstallments'Plan obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "plan" (paymentMethodDetailsCardInstallments'Plan obj))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardInstallments'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardInstallments'" (\obj -> GHC.Base.pure PaymentMethodDetailsCardInstallments' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan"))
data PaymentMethodDetailsCardThreeDSecure'
    = PaymentMethodDetailsCardThreeDSecure' {paymentMethodDetailsCardThreeDSecure'Authenticated :: (GHC.Maybe.Maybe GHC.Types.Bool),
                                             paymentMethodDetailsCardThreeDSecure'Succeeded :: (GHC.Maybe.Maybe GHC.Types.Bool),
                                             paymentMethodDetailsCardThreeDSecure'Version :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardThreeDSecure'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "authenticated" (paymentMethodDetailsCardThreeDSecure'Authenticated obj) : (Data.Aeson..=) "succeeded" (paymentMethodDetailsCardThreeDSecure'Succeeded obj) : (Data.Aeson..=) "version" (paymentMethodDetailsCardThreeDSecure'Version obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "authenticated" (paymentMethodDetailsCardThreeDSecure'Authenticated obj) GHC.Base.<> ((Data.Aeson..=) "succeeded" (paymentMethodDetailsCardThreeDSecure'Succeeded obj) GHC.Base.<> (Data.Aeson..=) "version" (paymentMethodDetailsCardThreeDSecure'Version obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardThreeDSecure'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardThreeDSecure'" (\obj -> ((GHC.Base.pure PaymentMethodDetailsCardThreeDSecure' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authenticated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "succeeded")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "version"))
data PaymentMethodDetailsCardWallet'
    = PaymentMethodDetailsCardWallet' {paymentMethodDetailsCardWallet'AmexExpressCheckout :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletAmexExpressCheckout),
                                       paymentMethodDetailsCardWallet'ApplePay :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletApplePay),
                                       paymentMethodDetailsCardWallet'DynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardWallet'GooglePay :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletGooglePay),
                                       paymentMethodDetailsCardWallet'Masterpass :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletMasterpass),
                                       paymentMethodDetailsCardWallet'SamsungPay :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletSamsungPay),
                                       paymentMethodDetailsCardWallet'Type :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWallet'Type'),
                                       paymentMethodDetailsCardWallet'VisaCheckout :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletVisaCheckout)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardWallet'Type'
    = PaymentMethodDetailsCardWallet'Type'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodDetailsCardWallet'Type'EnumTyped GHC.Base.String
    | PaymentMethodDetailsCardWallet'Type'EnumStringAmexExpressCheckout
    | PaymentMethodDetailsCardWallet'Type'EnumStringApplePay
    | PaymentMethodDetailsCardWallet'Type'EnumStringGooglePay
    | PaymentMethodDetailsCardWallet'Type'EnumStringMasterpass
    | PaymentMethodDetailsCardWallet'Type'EnumStringSamsungPay
    | PaymentMethodDetailsCardWallet'Type'EnumStringVisaCheckout
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWallet'Type'
    where toJSON (PaymentMethodDetailsCardWallet'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardWallet'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardWallet'Type'EnumStringAmexExpressCheckout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amex_express_checkout"
          toJSON (PaymentMethodDetailsCardWallet'Type'EnumStringApplePay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "apple_pay"
          toJSON (PaymentMethodDetailsCardWallet'Type'EnumStringGooglePay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay"
          toJSON (PaymentMethodDetailsCardWallet'Type'EnumStringMasterpass) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masterpass"
          toJSON (PaymentMethodDetailsCardWallet'Type'EnumStringSamsungPay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "samsung_pay"
          toJSON (PaymentMethodDetailsCardWallet'Type'EnumStringVisaCheckout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "visa_checkout"
instance Data.Aeson.FromJSON PaymentMethodDetailsCardWallet'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amex_express_checkout")
                                          then PaymentMethodDetailsCardWallet'Type'EnumStringAmexExpressCheckout
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "apple_pay")
                                                then PaymentMethodDetailsCardWallet'Type'EnumStringApplePay
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay")
                                                      then PaymentMethodDetailsCardWallet'Type'EnumStringGooglePay
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masterpass")
                                                            then PaymentMethodDetailsCardWallet'Type'EnumStringMasterpass
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "samsung_pay")
                                                                  then PaymentMethodDetailsCardWallet'Type'EnumStringSamsungPay
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "visa_checkout")
                                                                        then PaymentMethodDetailsCardWallet'Type'EnumStringVisaCheckout
                                                                        else PaymentMethodDetailsCardWallet'Type'EnumOther val)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWallet'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amex_express_checkout" (paymentMethodDetailsCardWallet'AmexExpressCheckout obj) : (Data.Aeson..=) "apple_pay" (paymentMethodDetailsCardWallet'ApplePay obj) : (Data.Aeson..=) "dynamic_last4" (paymentMethodDetailsCardWallet'DynamicLast4 obj) : (Data.Aeson..=) "google_pay" (paymentMethodDetailsCardWallet'GooglePay obj) : (Data.Aeson..=) "masterpass" (paymentMethodDetailsCardWallet'Masterpass obj) : (Data.Aeson..=) "samsung_pay" (paymentMethodDetailsCardWallet'SamsungPay obj) : (Data.Aeson..=) "type" (paymentMethodDetailsCardWallet'Type obj) : (Data.Aeson..=) "visa_checkout" (paymentMethodDetailsCardWallet'VisaCheckout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amex_express_checkout" (paymentMethodDetailsCardWallet'AmexExpressCheckout obj) GHC.Base.<> ((Data.Aeson..=) "apple_pay" (paymentMethodDetailsCardWallet'ApplePay obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (paymentMethodDetailsCardWallet'DynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "google_pay" (paymentMethodDetailsCardWallet'GooglePay obj) GHC.Base.<> ((Data.Aeson..=) "masterpass" (paymentMethodDetailsCardWallet'Masterpass obj) GHC.Base.<> ((Data.Aeson..=) "samsung_pay" (paymentMethodDetailsCardWallet'SamsungPay obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentMethodDetailsCardWallet'Type obj) GHC.Base.<> (Data.Aeson..=) "visa_checkout" (paymentMethodDetailsCardWallet'VisaCheckout obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardWallet'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardWallet'" (\obj -> (((((((GHC.Base.pure PaymentMethodDetailsCardWallet' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amex_express_checkout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "apple_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "google_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "masterpass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "samsung_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "visa_checkout"))
instance Data.Aeson.ToJSON PaymentMethodDetailsCard
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "brand" (paymentMethodDetailsCardBrand obj) : (Data.Aeson..=) "checks" (paymentMethodDetailsCardChecks obj) : (Data.Aeson..=) "country" (paymentMethodDetailsCardCountry obj) : (Data.Aeson..=) "exp_month" (paymentMethodDetailsCardExpMonth obj) : (Data.Aeson..=) "exp_year" (paymentMethodDetailsCardExpYear obj) : (Data.Aeson..=) "fingerprint" (paymentMethodDetailsCardFingerprint obj) : (Data.Aeson..=) "funding" (paymentMethodDetailsCardFunding obj) : (Data.Aeson..=) "installments" (paymentMethodDetailsCardInstallments obj) : (Data.Aeson..=) "last4" (paymentMethodDetailsCardLast4 obj) : (Data.Aeson..=) "network" (paymentMethodDetailsCardNetwork obj) : (Data.Aeson..=) "three_d_secure" (paymentMethodDetailsCardThreeDSecure obj) : (Data.Aeson..=) "wallet" (paymentMethodDetailsCardWallet obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "brand" (paymentMethodDetailsCardBrand obj) GHC.Base.<> ((Data.Aeson..=) "checks" (paymentMethodDetailsCardChecks obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodDetailsCardCountry obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (paymentMethodDetailsCardExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (paymentMethodDetailsCardExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (paymentMethodDetailsCardFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "funding" (paymentMethodDetailsCardFunding obj) GHC.Base.<> ((Data.Aeson..=) "installments" (paymentMethodDetailsCardInstallments obj) GHC.Base.<> ((Data.Aeson..=) "last4" (paymentMethodDetailsCardLast4 obj) GHC.Base.<> ((Data.Aeson..=) "network" (paymentMethodDetailsCardNetwork obj) GHC.Base.<> ((Data.Aeson..=) "three_d_secure" (paymentMethodDetailsCardThreeDSecure obj) GHC.Base.<> (Data.Aeson..=) "wallet" (paymentMethodDetailsCardWallet obj))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCard
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCard" (\obj -> (((((((((((GHC.Base.pure PaymentMethodDetailsCard GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "checks")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wallet"))
data PaymentMethodDetailsCardInstallments
    = PaymentMethodDetailsCardInstallments {paymentMethodDetailsCardInstallmentsPlan :: (GHC.Maybe.Maybe PaymentMethodDetailsCardInstallmentsPlan')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardInstallmentsPlan'
    = PaymentMethodDetailsCardInstallmentsPlan' {paymentMethodDetailsCardInstallmentsPlan'Count :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                                 paymentMethodDetailsCardInstallmentsPlan'Interval :: (GHC.Maybe.Maybe PaymentMethodDetailsCardInstallmentsPlan'Interval'),
                                                 paymentMethodDetailsCardInstallmentsPlan'Type :: (GHC.Maybe.Maybe PaymentMethodDetailsCardInstallmentsPlan'Type')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardInstallmentsPlan'Interval'
    = PaymentMethodDetailsCardInstallmentsPlan'Interval'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodDetailsCardInstallmentsPlan'Interval'EnumTyped GHC.Base.String
    | PaymentMethodDetailsCardInstallmentsPlan'Interval'EnumStringMonth
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardInstallmentsPlan'Interval'
    where toJSON (PaymentMethodDetailsCardInstallmentsPlan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardInstallmentsPlan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardInstallmentsPlan'Interval'EnumStringMonth) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month"
instance Data.Aeson.FromJSON PaymentMethodDetailsCardInstallmentsPlan'Interval'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month")
                                          then PaymentMethodDetailsCardInstallmentsPlan'Interval'EnumStringMonth
                                          else PaymentMethodDetailsCardInstallmentsPlan'Interval'EnumOther val)
data PaymentMethodDetailsCardInstallmentsPlan'Type'
    = PaymentMethodDetailsCardInstallmentsPlan'Type'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodDetailsCardInstallmentsPlan'Type'EnumTyped GHC.Base.String
    | PaymentMethodDetailsCardInstallmentsPlan'Type'EnumStringFixedCount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardInstallmentsPlan'Type'
    where toJSON (PaymentMethodDetailsCardInstallmentsPlan'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardInstallmentsPlan'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardInstallmentsPlan'Type'EnumStringFixedCount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fixed_count"
instance Data.Aeson.FromJSON PaymentMethodDetailsCardInstallmentsPlan'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fixed_count")
                                          then PaymentMethodDetailsCardInstallmentsPlan'Type'EnumStringFixedCount
                                          else PaymentMethodDetailsCardInstallmentsPlan'Type'EnumOther val)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardInstallmentsPlan'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "count" (paymentMethodDetailsCardInstallmentsPlan'Count obj) : (Data.Aeson..=) "interval" (paymentMethodDetailsCardInstallmentsPlan'Interval obj) : (Data.Aeson..=) "type" (paymentMethodDetailsCardInstallmentsPlan'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "count" (paymentMethodDetailsCardInstallmentsPlan'Count obj) GHC.Base.<> ((Data.Aeson..=) "interval" (paymentMethodDetailsCardInstallmentsPlan'Interval obj) GHC.Base.<> (Data.Aeson..=) "type" (paymentMethodDetailsCardInstallmentsPlan'Type obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardInstallmentsPlan'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardInstallmentsPlan'" (\obj -> ((GHC.Base.pure PaymentMethodDetailsCardInstallmentsPlan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
instance Data.Aeson.ToJSON PaymentMethodDetailsCardInstallments
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "plan" (paymentMethodDetailsCardInstallmentsPlan obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "plan" (paymentMethodDetailsCardInstallmentsPlan obj))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardInstallments
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardInstallments" (\obj -> GHC.Base.pure PaymentMethodDetailsCardInstallments GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan"))
data PaymentMethodDetailsCardPresent
    = PaymentMethodDetailsCardPresent {paymentMethodDetailsCardPresentBrand :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardPresentCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardPresentEmvAuthData :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardPresentExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                       paymentMethodDetailsCardPresentExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                       paymentMethodDetailsCardPresentFingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardPresentFunding :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardPresentGeneratedCard :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardPresentLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardPresentNetwork :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardPresentReadMethod :: (GHC.Maybe.Maybe GHC.Base.String),
                                       paymentMethodDetailsCardPresentReceipt :: (GHC.Maybe.Maybe PaymentMethodDetailsCardPresentReceipt')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardPresentReceipt'
    = PaymentMethodDetailsCardPresentReceipt' {paymentMethodDetailsCardPresentReceipt'ApplicationCryptogram :: (GHC.Maybe.Maybe GHC.Base.String),
                                               paymentMethodDetailsCardPresentReceipt'ApplicationPreferredName :: (GHC.Maybe.Maybe GHC.Base.String),
                                               paymentMethodDetailsCardPresentReceipt'AuthorizationCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                               paymentMethodDetailsCardPresentReceipt'AuthorizationResponseCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                               paymentMethodDetailsCardPresentReceipt'CardholderVerificationMethod :: (GHC.Maybe.Maybe GHC.Base.String),
                                               paymentMethodDetailsCardPresentReceipt'DedicatedFileName :: (GHC.Maybe.Maybe GHC.Base.String),
                                               paymentMethodDetailsCardPresentReceipt'TerminalVerificationResults :: (GHC.Maybe.Maybe GHC.Base.String),
                                               paymentMethodDetailsCardPresentReceipt'TransactionStatusInformation :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardPresentReceipt'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "application_cryptogram" (paymentMethodDetailsCardPresentReceipt'ApplicationCryptogram obj) : (Data.Aeson..=) "application_preferred_name" (paymentMethodDetailsCardPresentReceipt'ApplicationPreferredName obj) : (Data.Aeson..=) "authorization_code" (paymentMethodDetailsCardPresentReceipt'AuthorizationCode obj) : (Data.Aeson..=) "authorization_response_code" (paymentMethodDetailsCardPresentReceipt'AuthorizationResponseCode obj) : (Data.Aeson..=) "cardholder_verification_method" (paymentMethodDetailsCardPresentReceipt'CardholderVerificationMethod obj) : (Data.Aeson..=) "dedicated_file_name" (paymentMethodDetailsCardPresentReceipt'DedicatedFileName obj) : (Data.Aeson..=) "terminal_verification_results" (paymentMethodDetailsCardPresentReceipt'TerminalVerificationResults obj) : (Data.Aeson..=) "transaction_status_information" (paymentMethodDetailsCardPresentReceipt'TransactionStatusInformation obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "application_cryptogram" (paymentMethodDetailsCardPresentReceipt'ApplicationCryptogram obj) GHC.Base.<> ((Data.Aeson..=) "application_preferred_name" (paymentMethodDetailsCardPresentReceipt'ApplicationPreferredName obj) GHC.Base.<> ((Data.Aeson..=) "authorization_code" (paymentMethodDetailsCardPresentReceipt'AuthorizationCode obj) GHC.Base.<> ((Data.Aeson..=) "authorization_response_code" (paymentMethodDetailsCardPresentReceipt'AuthorizationResponseCode obj) GHC.Base.<> ((Data.Aeson..=) "cardholder_verification_method" (paymentMethodDetailsCardPresentReceipt'CardholderVerificationMethod obj) GHC.Base.<> ((Data.Aeson..=) "dedicated_file_name" (paymentMethodDetailsCardPresentReceipt'DedicatedFileName obj) GHC.Base.<> ((Data.Aeson..=) "terminal_verification_results" (paymentMethodDetailsCardPresentReceipt'TerminalVerificationResults obj) GHC.Base.<> (Data.Aeson..=) "transaction_status_information" (paymentMethodDetailsCardPresentReceipt'TransactionStatusInformation obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresentReceipt'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardPresentReceipt'" (\obj -> (((((((GHC.Base.pure PaymentMethodDetailsCardPresentReceipt' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_cryptogram")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_preferred_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorization_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorization_response_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cardholder_verification_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dedicated_file_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "terminal_verification_results")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transaction_status_information"))
instance Data.Aeson.ToJSON PaymentMethodDetailsCardPresent
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "brand" (paymentMethodDetailsCardPresentBrand obj) : (Data.Aeson..=) "country" (paymentMethodDetailsCardPresentCountry obj) : (Data.Aeson..=) "emv_auth_data" (paymentMethodDetailsCardPresentEmvAuthData obj) : (Data.Aeson..=) "exp_month" (paymentMethodDetailsCardPresentExpMonth obj) : (Data.Aeson..=) "exp_year" (paymentMethodDetailsCardPresentExpYear obj) : (Data.Aeson..=) "fingerprint" (paymentMethodDetailsCardPresentFingerprint obj) : (Data.Aeson..=) "funding" (paymentMethodDetailsCardPresentFunding obj) : (Data.Aeson..=) "generated_card" (paymentMethodDetailsCardPresentGeneratedCard obj) : (Data.Aeson..=) "last4" (paymentMethodDetailsCardPresentLast4 obj) : (Data.Aeson..=) "network" (paymentMethodDetailsCardPresentNetwork obj) : (Data.Aeson..=) "read_method" (paymentMethodDetailsCardPresentReadMethod obj) : (Data.Aeson..=) "receipt" (paymentMethodDetailsCardPresentReceipt obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "brand" (paymentMethodDetailsCardPresentBrand obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodDetailsCardPresentCountry obj) GHC.Base.<> ((Data.Aeson..=) "emv_auth_data" (paymentMethodDetailsCardPresentEmvAuthData obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (paymentMethodDetailsCardPresentExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (paymentMethodDetailsCardPresentExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (paymentMethodDetailsCardPresentFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "funding" (paymentMethodDetailsCardPresentFunding obj) GHC.Base.<> ((Data.Aeson..=) "generated_card" (paymentMethodDetailsCardPresentGeneratedCard obj) GHC.Base.<> ((Data.Aeson..=) "last4" (paymentMethodDetailsCardPresentLast4 obj) GHC.Base.<> ((Data.Aeson..=) "network" (paymentMethodDetailsCardPresentNetwork obj) GHC.Base.<> ((Data.Aeson..=) "read_method" (paymentMethodDetailsCardPresentReadMethod obj) GHC.Base.<> (Data.Aeson..=) "receipt" (paymentMethodDetailsCardPresentReceipt obj))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresent
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardPresent" (\obj -> (((((((((((GHC.Base.pure PaymentMethodDetailsCardPresent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "emv_auth_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "generated_card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "read_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt"))
data PaymentMethodDetailsCardWallet
    = PaymentMethodDetailsCardWallet {paymentMethodDetailsCardWalletAmexExpressCheckout :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletAmexExpressCheckout),
                                      paymentMethodDetailsCardWalletApplePay :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletApplePay),
                                      paymentMethodDetailsCardWalletDynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                      paymentMethodDetailsCardWalletGooglePay :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletGooglePay),
                                      paymentMethodDetailsCardWalletMasterpass :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletMasterpass),
                                      paymentMethodDetailsCardWalletSamsungPay :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletSamsungPay),
                                      paymentMethodDetailsCardWalletType :: PaymentMethodDetailsCardWalletType',
                                      paymentMethodDetailsCardWalletVisaCheckout :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletVisaCheckout)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardWalletType'
    = PaymentMethodDetailsCardWalletType'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodDetailsCardWalletType'EnumTyped GHC.Base.String
    | PaymentMethodDetailsCardWalletType'EnumStringAmexExpressCheckout
    | PaymentMethodDetailsCardWalletType'EnumStringApplePay
    | PaymentMethodDetailsCardWalletType'EnumStringGooglePay
    | PaymentMethodDetailsCardWalletType'EnumStringMasterpass
    | PaymentMethodDetailsCardWalletType'EnumStringSamsungPay
    | PaymentMethodDetailsCardWalletType'EnumStringVisaCheckout
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWalletType'
    where toJSON (PaymentMethodDetailsCardWalletType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardWalletType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodDetailsCardWalletType'EnumStringAmexExpressCheckout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amex_express_checkout"
          toJSON (PaymentMethodDetailsCardWalletType'EnumStringApplePay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "apple_pay"
          toJSON (PaymentMethodDetailsCardWalletType'EnumStringGooglePay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay"
          toJSON (PaymentMethodDetailsCardWalletType'EnumStringMasterpass) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masterpass"
          toJSON (PaymentMethodDetailsCardWalletType'EnumStringSamsungPay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "samsung_pay"
          toJSON (PaymentMethodDetailsCardWalletType'EnumStringVisaCheckout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "visa_checkout"
instance Data.Aeson.FromJSON PaymentMethodDetailsCardWalletType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "amex_express_checkout")
                                          then PaymentMethodDetailsCardWalletType'EnumStringAmexExpressCheckout
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "apple_pay")
                                                then PaymentMethodDetailsCardWalletType'EnumStringApplePay
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "google_pay")
                                                      then PaymentMethodDetailsCardWalletType'EnumStringGooglePay
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "masterpass")
                                                            then PaymentMethodDetailsCardWalletType'EnumStringMasterpass
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "samsung_pay")
                                                                  then PaymentMethodDetailsCardWalletType'EnumStringSamsungPay
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "visa_checkout")
                                                                        then PaymentMethodDetailsCardWalletType'EnumStringVisaCheckout
                                                                        else PaymentMethodDetailsCardWalletType'EnumOther val)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWallet
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amex_express_checkout" (paymentMethodDetailsCardWalletAmexExpressCheckout obj) : (Data.Aeson..=) "apple_pay" (paymentMethodDetailsCardWalletApplePay obj) : (Data.Aeson..=) "dynamic_last4" (paymentMethodDetailsCardWalletDynamicLast4 obj) : (Data.Aeson..=) "google_pay" (paymentMethodDetailsCardWalletGooglePay obj) : (Data.Aeson..=) "masterpass" (paymentMethodDetailsCardWalletMasterpass obj) : (Data.Aeson..=) "samsung_pay" (paymentMethodDetailsCardWalletSamsungPay obj) : (Data.Aeson..=) "type" (paymentMethodDetailsCardWalletType obj) : (Data.Aeson..=) "visa_checkout" (paymentMethodDetailsCardWalletVisaCheckout obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amex_express_checkout" (paymentMethodDetailsCardWalletAmexExpressCheckout obj) GHC.Base.<> ((Data.Aeson..=) "apple_pay" (paymentMethodDetailsCardWalletApplePay obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (paymentMethodDetailsCardWalletDynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "google_pay" (paymentMethodDetailsCardWalletGooglePay obj) GHC.Base.<> ((Data.Aeson..=) "masterpass" (paymentMethodDetailsCardWalletMasterpass obj) GHC.Base.<> ((Data.Aeson..=) "samsung_pay" (paymentMethodDetailsCardWalletSamsungPay obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentMethodDetailsCardWalletType obj) GHC.Base.<> (Data.Aeson..=) "visa_checkout" (paymentMethodDetailsCardWalletVisaCheckout obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardWallet
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardWallet" (\obj -> (((((((GHC.Base.pure PaymentMethodDetailsCardWallet GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amex_express_checkout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "apple_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "google_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "masterpass")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "samsung_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "visa_checkout"))
data PaymentMethodDetailsCardWalletMasterpass
    = PaymentMethodDetailsCardWalletMasterpass {paymentMethodDetailsCardWalletMasterpassBillingAddress :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletMasterpassBillingAddress'),
                                                paymentMethodDetailsCardWalletMasterpassEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                                                paymentMethodDetailsCardWalletMasterpassName :: (GHC.Maybe.Maybe GHC.Base.String),
                                                paymentMethodDetailsCardWalletMasterpassShippingAddress :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletMasterpassShippingAddress')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardWalletMasterpassBillingAddress'
    = PaymentMethodDetailsCardWalletMasterpassBillingAddress' {paymentMethodDetailsCardWalletMasterpassBillingAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               paymentMethodDetailsCardWalletMasterpassBillingAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               paymentMethodDetailsCardWalletMasterpassBillingAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               paymentMethodDetailsCardWalletMasterpassBillingAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               paymentMethodDetailsCardWalletMasterpassBillingAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               paymentMethodDetailsCardWalletMasterpassBillingAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWalletMasterpassBillingAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentMethodDetailsCardWalletMasterpassBillingAddress'City obj) : (Data.Aeson..=) "country" (paymentMethodDetailsCardWalletMasterpassBillingAddress'Country obj) : (Data.Aeson..=) "line1" (paymentMethodDetailsCardWalletMasterpassBillingAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentMethodDetailsCardWalletMasterpassBillingAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentMethodDetailsCardWalletMasterpassBillingAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentMethodDetailsCardWalletMasterpassBillingAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentMethodDetailsCardWalletMasterpassBillingAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodDetailsCardWalletMasterpassBillingAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentMethodDetailsCardWalletMasterpassBillingAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentMethodDetailsCardWalletMasterpassBillingAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentMethodDetailsCardWalletMasterpassBillingAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentMethodDetailsCardWalletMasterpassBillingAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardWalletMasterpassBillingAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardWalletMasterpassBillingAddress'" (\obj -> (((((GHC.Base.pure PaymentMethodDetailsCardWalletMasterpassBillingAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data PaymentMethodDetailsCardWalletMasterpassShippingAddress'
    = PaymentMethodDetailsCardWalletMasterpassShippingAddress' {paymentMethodDetailsCardWalletMasterpassShippingAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                paymentMethodDetailsCardWalletMasterpassShippingAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                paymentMethodDetailsCardWalletMasterpassShippingAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                paymentMethodDetailsCardWalletMasterpassShippingAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                paymentMethodDetailsCardWalletMasterpassShippingAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                paymentMethodDetailsCardWalletMasterpassShippingAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWalletMasterpassShippingAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentMethodDetailsCardWalletMasterpassShippingAddress'City obj) : (Data.Aeson..=) "country" (paymentMethodDetailsCardWalletMasterpassShippingAddress'Country obj) : (Data.Aeson..=) "line1" (paymentMethodDetailsCardWalletMasterpassShippingAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentMethodDetailsCardWalletMasterpassShippingAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentMethodDetailsCardWalletMasterpassShippingAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentMethodDetailsCardWalletMasterpassShippingAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentMethodDetailsCardWalletMasterpassShippingAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodDetailsCardWalletMasterpassShippingAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentMethodDetailsCardWalletMasterpassShippingAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentMethodDetailsCardWalletMasterpassShippingAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentMethodDetailsCardWalletMasterpassShippingAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentMethodDetailsCardWalletMasterpassShippingAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardWalletMasterpassShippingAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardWalletMasterpassShippingAddress'" (\obj -> (((((GHC.Base.pure PaymentMethodDetailsCardWalletMasterpassShippingAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWalletMasterpass
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_address" (paymentMethodDetailsCardWalletMasterpassBillingAddress obj) : (Data.Aeson..=) "email" (paymentMethodDetailsCardWalletMasterpassEmail obj) : (Data.Aeson..=) "name" (paymentMethodDetailsCardWalletMasterpassName obj) : (Data.Aeson..=) "shipping_address" (paymentMethodDetailsCardWalletMasterpassShippingAddress obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_address" (paymentMethodDetailsCardWalletMasterpassBillingAddress obj) GHC.Base.<> ((Data.Aeson..=) "email" (paymentMethodDetailsCardWalletMasterpassEmail obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentMethodDetailsCardWalletMasterpassName obj) GHC.Base.<> (Data.Aeson..=) "shipping_address" (paymentMethodDetailsCardWalletMasterpassShippingAddress obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardWalletMasterpass
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardWalletMasterpass" (\obj -> (((GHC.Base.pure PaymentMethodDetailsCardWalletMasterpass GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_address"))
data PaymentMethodDetailsCardWalletVisaCheckout
    = PaymentMethodDetailsCardWalletVisaCheckout {paymentMethodDetailsCardWalletVisaCheckoutBillingAddress :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletVisaCheckoutBillingAddress'),
                                                  paymentMethodDetailsCardWalletVisaCheckoutEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                                                  paymentMethodDetailsCardWalletVisaCheckoutName :: (GHC.Maybe.Maybe GHC.Base.String),
                                                  paymentMethodDetailsCardWalletVisaCheckoutShippingAddress :: (GHC.Maybe.Maybe PaymentMethodDetailsCardWalletVisaCheckoutShippingAddress')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodDetailsCardWalletVisaCheckoutBillingAddress'
    = PaymentMethodDetailsCardWalletVisaCheckoutBillingAddress' {paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                 paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                 paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                 paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                 paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                 paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWalletVisaCheckoutBillingAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'City obj) : (Data.Aeson..=) "country" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'Country obj) : (Data.Aeson..=) "line1" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardWalletVisaCheckoutBillingAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardWalletVisaCheckoutBillingAddress'" (\obj -> (((((GHC.Base.pure PaymentMethodDetailsCardWalletVisaCheckoutBillingAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data PaymentMethodDetailsCardWalletVisaCheckoutShippingAddress'
    = PaymentMethodDetailsCardWalletVisaCheckoutShippingAddress' {paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                  paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                  paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                  paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                  paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                                  paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWalletVisaCheckoutShippingAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'City obj) : (Data.Aeson..=) "country" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'Country obj) : (Data.Aeson..=) "line1" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardWalletVisaCheckoutShippingAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardWalletVisaCheckoutShippingAddress'" (\obj -> (((((GHC.Base.pure PaymentMethodDetailsCardWalletVisaCheckoutShippingAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON PaymentMethodDetailsCardWalletVisaCheckout
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_address" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress obj) : (Data.Aeson..=) "email" (paymentMethodDetailsCardWalletVisaCheckoutEmail obj) : (Data.Aeson..=) "name" (paymentMethodDetailsCardWalletVisaCheckoutName obj) : (Data.Aeson..=) "shipping_address" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_address" (paymentMethodDetailsCardWalletVisaCheckoutBillingAddress obj) GHC.Base.<> ((Data.Aeson..=) "email" (paymentMethodDetailsCardWalletVisaCheckoutEmail obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentMethodDetailsCardWalletVisaCheckoutName obj) GHC.Base.<> (Data.Aeson..=) "shipping_address" (paymentMethodDetailsCardWalletVisaCheckoutShippingAddress obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardWalletVisaCheckout
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardWalletVisaCheckout" (\obj -> (((GHC.Base.pure PaymentMethodDetailsCardWalletVisaCheckout GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping_address"))
data PaymentMethodOptionsCardInstallments
    = PaymentMethodOptionsCardInstallments {paymentMethodOptionsCardInstallmentsAvailablePlans :: (GHC.Maybe.Maybe ([] PaymentMethodDetailsCardInstallmentsPlan)),
                                            paymentMethodOptionsCardInstallmentsEnabled :: GHC.Types.Bool,
                                            paymentMethodOptionsCardInstallmentsPlan :: (GHC.Maybe.Maybe PaymentMethodOptionsCardInstallmentsPlan')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodOptionsCardInstallmentsPlan'
    = PaymentMethodOptionsCardInstallmentsPlan' {paymentMethodOptionsCardInstallmentsPlan'Count :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                                 paymentMethodOptionsCardInstallmentsPlan'Interval :: (GHC.Maybe.Maybe PaymentMethodOptionsCardInstallmentsPlan'Interval'),
                                                 paymentMethodOptionsCardInstallmentsPlan'Type :: (GHC.Maybe.Maybe PaymentMethodOptionsCardInstallmentsPlan'Type')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentMethodOptionsCardInstallmentsPlan'Interval'
    = PaymentMethodOptionsCardInstallmentsPlan'Interval'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodOptionsCardInstallmentsPlan'Interval'EnumTyped GHC.Base.String
    | PaymentMethodOptionsCardInstallmentsPlan'Interval'EnumStringMonth
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodOptionsCardInstallmentsPlan'Interval'
    where toJSON (PaymentMethodOptionsCardInstallmentsPlan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodOptionsCardInstallmentsPlan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodOptionsCardInstallmentsPlan'Interval'EnumStringMonth) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month"
instance Data.Aeson.FromJSON PaymentMethodOptionsCardInstallmentsPlan'Interval'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month")
                                          then PaymentMethodOptionsCardInstallmentsPlan'Interval'EnumStringMonth
                                          else PaymentMethodOptionsCardInstallmentsPlan'Interval'EnumOther val)
data PaymentMethodOptionsCardInstallmentsPlan'Type'
    = PaymentMethodOptionsCardInstallmentsPlan'Type'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentMethodOptionsCardInstallmentsPlan'Type'EnumTyped GHC.Base.String
    | PaymentMethodOptionsCardInstallmentsPlan'Type'EnumStringFixedCount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentMethodOptionsCardInstallmentsPlan'Type'
    where toJSON (PaymentMethodOptionsCardInstallmentsPlan'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodOptionsCardInstallmentsPlan'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentMethodOptionsCardInstallmentsPlan'Type'EnumStringFixedCount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fixed_count"
instance Data.Aeson.FromJSON PaymentMethodOptionsCardInstallmentsPlan'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "fixed_count")
                                          then PaymentMethodOptionsCardInstallmentsPlan'Type'EnumStringFixedCount
                                          else PaymentMethodOptionsCardInstallmentsPlan'Type'EnumOther val)
instance Data.Aeson.ToJSON PaymentMethodOptionsCardInstallmentsPlan'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "count" (paymentMethodOptionsCardInstallmentsPlan'Count obj) : (Data.Aeson..=) "interval" (paymentMethodOptionsCardInstallmentsPlan'Interval obj) : (Data.Aeson..=) "type" (paymentMethodOptionsCardInstallmentsPlan'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "count" (paymentMethodOptionsCardInstallmentsPlan'Count obj) GHC.Base.<> ((Data.Aeson..=) "interval" (paymentMethodOptionsCardInstallmentsPlan'Interval obj) GHC.Base.<> (Data.Aeson..=) "type" (paymentMethodOptionsCardInstallmentsPlan'Type obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsCardInstallmentsPlan'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodOptionsCardInstallmentsPlan'" (\obj -> ((GHC.Base.pure PaymentMethodOptionsCardInstallmentsPlan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
instance Data.Aeson.ToJSON PaymentMethodOptionsCardInstallments
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "available_plans" (paymentMethodOptionsCardInstallmentsAvailablePlans obj) : (Data.Aeson..=) "enabled" (paymentMethodOptionsCardInstallmentsEnabled obj) : (Data.Aeson..=) "plan" (paymentMethodOptionsCardInstallmentsPlan obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "available_plans" (paymentMethodOptionsCardInstallmentsAvailablePlans obj) GHC.Base.<> ((Data.Aeson..=) "enabled" (paymentMethodOptionsCardInstallmentsEnabled obj) GHC.Base.<> (Data.Aeson..=) "plan" (paymentMethodOptionsCardInstallmentsPlan obj)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsCardInstallments
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodOptionsCardInstallments" (\obj -> ((GHC.Base.pure PaymentMethodOptionsCardInstallments GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_plans")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan"))
data PaymentSource
    = PaymentSource {paymentSourceAccount :: (GHC.Maybe.Maybe PaymentSourceAccount'Variants),
                     paymentSourceAccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
                     paymentSourceAchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
                     paymentSourceActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceAddressCity :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAddressCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAddressLine1 :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAddressLine2 :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAddressState :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAddressZip :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAddressZipCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceAlipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
                     paymentSourceAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentSourceAmountReceived :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentSourceAvailablePayoutMethods :: (GHC.Maybe.Maybe ([] PaymentSourceAvailablePayoutMethods')),
                     paymentSourceBancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
                     paymentSourceBankName :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceBitcoinAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentSourceBitcoinAmountReceived :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentSourceBitcoinUri :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceBrand :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceBusinessProfile :: (GHC.Maybe.Maybe PaymentSourceBusinessProfile'),
                     paymentSourceBusinessType :: (GHC.Maybe.Maybe PaymentSourceBusinessType'),
                     paymentSourceCapabilities :: (GHC.Maybe.Maybe AccountCapabilities),
                     paymentSourceCard :: (GHC.Maybe.Maybe SourceTypeCard),
                     paymentSourceCardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
                     paymentSourceChargesEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceClientSecret :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceCodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
                     paymentSourceCompany :: (GHC.Maybe.Maybe LegalEntityCompany),
                     paymentSourceCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceCreated :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentSourceCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceCustomer :: (GHC.Maybe.Maybe PaymentSourceCustomer'Variants),
                     paymentSourceCvcCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceDefaultCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceDefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceDetailsSubmitted :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceDynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceEps :: (GHC.Maybe.Maybe SourceTypeEps),
                     paymentSourceExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentSourceExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentSourceExternalAccounts :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'),
                     paymentSourceFilled :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceFingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceFlow :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceFunding :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceGiropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
                     paymentSourceId :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceIdeal :: (GHC.Maybe.Maybe SourceTypeIdeal),
                     paymentSourceInboundAddress :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceIndividual :: (GHC.Maybe.Maybe Person),
                     paymentSourceKlarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
                     paymentSourceLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceLivemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceMetadata :: (GHC.Maybe.Maybe PaymentSourceMetadata'),
                     paymentSourceMultibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
                     paymentSourceName :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceObject :: (GHC.Maybe.Maybe PaymentSourceObject'),
                     paymentSourceOwner :: (GHC.Maybe.Maybe PaymentSourceOwner'),
                     paymentSourceP24 :: (GHC.Maybe.Maybe SourceTypeP24),
                     paymentSourcePayment :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourcePaymentAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                     paymentSourcePaymentCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourcePayoutsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceReceiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
                     paymentSourceRecipient :: (GHC.Maybe.Maybe PaymentSourceRecipient'Variants),
                     paymentSourceRedirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
                     paymentSourceRefundAddress :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceRequirements :: (GHC.Maybe.Maybe AccountRequirements),
                     paymentSourceReusable :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceRoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceSepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
                     paymentSourceSettings :: (GHC.Maybe.Maybe PaymentSourceSettings'),
                     paymentSourceSofort :: (GHC.Maybe.Maybe SourceTypeSofort),
                     paymentSourceSourceOrder :: (GHC.Maybe.Maybe SourceOrder),
                     paymentSourceStatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceStatus :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
                     paymentSourceTokenizationMethod :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceTosAcceptance :: (GHC.Maybe.Maybe AccountTosAcceptance),
                     paymentSourceTransactions :: (GHC.Maybe.Maybe PaymentSourceTransactions'),
                     paymentSourceType :: (GHC.Maybe.Maybe PaymentSourceType'),
                     paymentSourceUncapturedFunds :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceUsage :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceUsed :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceUsedForPayment :: (GHC.Maybe.Maybe GHC.Types.Bool),
                     paymentSourceUsername :: (GHC.Maybe.Maybe GHC.Base.String),
                     paymentSourceWechat :: (GHC.Maybe.Maybe SourceTypeWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentSourceAccount'Variants
    = PaymentSourceAccount'Variant1 Account
    | PaymentSourceAccount'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentSourceAccount'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentSourceAccount'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentSourceAvailablePayoutMethods'
    = PaymentSourceAvailablePayoutMethods'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentSourceAvailablePayoutMethods'EnumTyped GHC.Base.String
    | PaymentSourceAvailablePayoutMethods'EnumStringInstant
    | PaymentSourceAvailablePayoutMethods'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceAvailablePayoutMethods'
    where toJSON (PaymentSourceAvailablePayoutMethods'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceAvailablePayoutMethods'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceAvailablePayoutMethods'EnumStringInstant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant"
          toJSON (PaymentSourceAvailablePayoutMethods'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON PaymentSourceAvailablePayoutMethods'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant")
                                          then PaymentSourceAvailablePayoutMethods'EnumStringInstant
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                then PaymentSourceAvailablePayoutMethods'EnumStringStandard
                                                else PaymentSourceAvailablePayoutMethods'EnumOther val)
data PaymentSourceBusinessProfile'
    = PaymentSourceBusinessProfile' {paymentSourceBusinessProfile'Mcc :: (GHC.Maybe.Maybe GHC.Base.String),
                                     paymentSourceBusinessProfile'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                                     paymentSourceBusinessProfile'ProductDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                                     paymentSourceBusinessProfile'SupportAddress :: (GHC.Maybe.Maybe PaymentSourceBusinessProfile'SupportAddress'),
                                     paymentSourceBusinessProfile'SupportEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                                     paymentSourceBusinessProfile'SupportPhone :: (GHC.Maybe.Maybe GHC.Base.String),
                                     paymentSourceBusinessProfile'SupportUrl :: (GHC.Maybe.Maybe GHC.Base.String),
                                     paymentSourceBusinessProfile'Url :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentSourceBusinessProfile'SupportAddress'
    = PaymentSourceBusinessProfile'SupportAddress' {paymentSourceBusinessProfile'SupportAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                    paymentSourceBusinessProfile'SupportAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                    paymentSourceBusinessProfile'SupportAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                    paymentSourceBusinessProfile'SupportAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                    paymentSourceBusinessProfile'SupportAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                    paymentSourceBusinessProfile'SupportAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceBusinessProfile'SupportAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentSourceBusinessProfile'SupportAddress'City obj) : (Data.Aeson..=) "country" (paymentSourceBusinessProfile'SupportAddress'Country obj) : (Data.Aeson..=) "line1" (paymentSourceBusinessProfile'SupportAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentSourceBusinessProfile'SupportAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentSourceBusinessProfile'SupportAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentSourceBusinessProfile'SupportAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentSourceBusinessProfile'SupportAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentSourceBusinessProfile'SupportAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentSourceBusinessProfile'SupportAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentSourceBusinessProfile'SupportAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentSourceBusinessProfile'SupportAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentSourceBusinessProfile'SupportAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceBusinessProfile'SupportAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceBusinessProfile'SupportAddress'" (\obj -> (((((GHC.Base.pure PaymentSourceBusinessProfile'SupportAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON PaymentSourceBusinessProfile'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "mcc" (paymentSourceBusinessProfile'Mcc obj) : (Data.Aeson..=) "name" (paymentSourceBusinessProfile'Name obj) : (Data.Aeson..=) "product_description" (paymentSourceBusinessProfile'ProductDescription obj) : (Data.Aeson..=) "support_address" (paymentSourceBusinessProfile'SupportAddress obj) : (Data.Aeson..=) "support_email" (paymentSourceBusinessProfile'SupportEmail obj) : (Data.Aeson..=) "support_phone" (paymentSourceBusinessProfile'SupportPhone obj) : (Data.Aeson..=) "support_url" (paymentSourceBusinessProfile'SupportUrl obj) : (Data.Aeson..=) "url" (paymentSourceBusinessProfile'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "mcc" (paymentSourceBusinessProfile'Mcc obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentSourceBusinessProfile'Name obj) GHC.Base.<> ((Data.Aeson..=) "product_description" (paymentSourceBusinessProfile'ProductDescription obj) GHC.Base.<> ((Data.Aeson..=) "support_address" (paymentSourceBusinessProfile'SupportAddress obj) GHC.Base.<> ((Data.Aeson..=) "support_email" (paymentSourceBusinessProfile'SupportEmail obj) GHC.Base.<> ((Data.Aeson..=) "support_phone" (paymentSourceBusinessProfile'SupportPhone obj) GHC.Base.<> ((Data.Aeson..=) "support_url" (paymentSourceBusinessProfile'SupportUrl obj) GHC.Base.<> (Data.Aeson..=) "url" (paymentSourceBusinessProfile'Url obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceBusinessProfile'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceBusinessProfile'" (\obj -> (((((((GHC.Base.pure PaymentSourceBusinessProfile' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mcc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
data PaymentSourceBusinessType'
    = PaymentSourceBusinessType'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentSourceBusinessType'EnumTyped GHC.Base.String
    | PaymentSourceBusinessType'EnumStringCompany
    | PaymentSourceBusinessType'EnumStringGovernmentEntity
    | PaymentSourceBusinessType'EnumStringIndividual
    | PaymentSourceBusinessType'EnumStringNonProfit
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceBusinessType'
    where toJSON (PaymentSourceBusinessType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceBusinessType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceBusinessType'EnumStringCompany) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "company"
          toJSON (PaymentSourceBusinessType'EnumStringGovernmentEntity) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_entity"
          toJSON (PaymentSourceBusinessType'EnumStringIndividual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual"
          toJSON (PaymentSourceBusinessType'EnumStringNonProfit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_profit"
instance Data.Aeson.FromJSON PaymentSourceBusinessType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "company")
                                          then PaymentSourceBusinessType'EnumStringCompany
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "government_entity")
                                                then PaymentSourceBusinessType'EnumStringGovernmentEntity
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "individual")
                                                      then PaymentSourceBusinessType'EnumStringIndividual
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "non_profit")
                                                            then PaymentSourceBusinessType'EnumStringNonProfit
                                                            else PaymentSourceBusinessType'EnumOther val)
data PaymentSourceCustomer'Variants
    = PaymentSourceCustomer'Variant1 Customer
    | PaymentSourceCustomer'Variant2 DeletedCustomer
    | PaymentSourceCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentSourceCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentSourceCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentSourceExternalAccounts'
    = PaymentSourceExternalAccounts' {paymentSourceExternalAccounts'Data :: ([] PaymentSourceExternalAccounts'Data'),
                                      paymentSourceExternalAccounts'HasMore :: GHC.Types.Bool,
                                      paymentSourceExternalAccounts'Object :: PaymentSourceExternalAccounts'Object',
                                      paymentSourceExternalAccounts'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentSourceExternalAccounts'Data'
    = PaymentSourceExternalAccounts'Data' {paymentSourceExternalAccounts'Data'Account :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'Data'Account'Variants),
                                           paymentSourceExternalAccounts'Data'AccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AddressCity :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AddressCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AddressLine1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AddressLine2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AddressState :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AddressZip :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AddressZipCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([] PaymentSourceExternalAccounts'Data'AvailablePayoutMethods')),
                                           paymentSourceExternalAccounts'Data'BankName :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Brand :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Customer :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'Data'Customer'Variants),
                                           paymentSourceExternalAccounts'Data'CvcCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                                           paymentSourceExternalAccounts'Data'DynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                           paymentSourceExternalAccounts'Data'ExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                           paymentSourceExternalAccounts'Data'Fingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Funding :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Last4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Metadata :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'Data'Metadata'),
                                           paymentSourceExternalAccounts'Data'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Object :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'Data'Object'),
                                           paymentSourceExternalAccounts'Data'Recipient :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'Data'Recipient'Variants),
                                           paymentSourceExternalAccounts'Data'RoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'Status :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceExternalAccounts'Data'TokenizationMethod :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentSourceExternalAccounts'Data'Account'Variants
    = PaymentSourceExternalAccounts'Data'Account'Variant1 Account
    | PaymentSourceExternalAccounts'Data'Account'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentSourceExternalAccounts'Data'Account'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentSourceExternalAccounts'Data'Account'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'
    = PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumTyped GHC.Base.String
    | PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumStringInstant
    | PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'
    where toJSON (PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumStringInstant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant"
          toJSON (PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant")
                                          then PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumStringInstant
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                then PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumStringStandard
                                                else PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumOther val)
data PaymentSourceExternalAccounts'Data'Customer'Variants
    = PaymentSourceExternalAccounts'Data'Customer'Variant1 Customer
    | PaymentSourceExternalAccounts'Data'Customer'Variant2 DeletedCustomer
    | PaymentSourceExternalAccounts'Data'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentSourceExternalAccounts'Data'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentSourceExternalAccounts'Data'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentSourceExternalAccounts'Data'Metadata'
    = PaymentSourceExternalAccounts'Data'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceExternalAccounts'Data'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceExternalAccounts'Data'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceExternalAccounts'Data'Metadata'" (\obj -> GHC.Base.pure PaymentSourceExternalAccounts'Data'Metadata')
data PaymentSourceExternalAccounts'Data'Object'
    = PaymentSourceExternalAccounts'Data'Object'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentSourceExternalAccounts'Data'Object'EnumTyped GHC.Base.String
    | PaymentSourceExternalAccounts'Data'Object'EnumStringBankAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceExternalAccounts'Data'Object'
    where toJSON (PaymentSourceExternalAccounts'Data'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceExternalAccounts'Data'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceExternalAccounts'Data'Object'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
instance Data.Aeson.FromJSON PaymentSourceExternalAccounts'Data'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then PaymentSourceExternalAccounts'Data'Object'EnumStringBankAccount
                                          else PaymentSourceExternalAccounts'Data'Object'EnumOther val)
data PaymentSourceExternalAccounts'Data'Recipient'Variants
    = PaymentSourceExternalAccounts'Data'Recipient'Variant1 Recipient
    | PaymentSourceExternalAccounts'Data'Recipient'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentSourceExternalAccounts'Data'Recipient'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentSourceExternalAccounts'Data'Recipient'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON PaymentSourceExternalAccounts'Data'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (paymentSourceExternalAccounts'Data'Account obj) : (Data.Aeson..=) "account_holder_name" (paymentSourceExternalAccounts'Data'AccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (paymentSourceExternalAccounts'Data'AccountHolderType obj) : (Data.Aeson..=) "address_city" (paymentSourceExternalAccounts'Data'AddressCity obj) : (Data.Aeson..=) "address_country" (paymentSourceExternalAccounts'Data'AddressCountry obj) : (Data.Aeson..=) "address_line1" (paymentSourceExternalAccounts'Data'AddressLine1 obj) : (Data.Aeson..=) "address_line1_check" (paymentSourceExternalAccounts'Data'AddressLine1Check obj) : (Data.Aeson..=) "address_line2" (paymentSourceExternalAccounts'Data'AddressLine2 obj) : (Data.Aeson..=) "address_state" (paymentSourceExternalAccounts'Data'AddressState obj) : (Data.Aeson..=) "address_zip" (paymentSourceExternalAccounts'Data'AddressZip obj) : (Data.Aeson..=) "address_zip_check" (paymentSourceExternalAccounts'Data'AddressZipCheck obj) : (Data.Aeson..=) "available_payout_methods" (paymentSourceExternalAccounts'Data'AvailablePayoutMethods obj) : (Data.Aeson..=) "bank_name" (paymentSourceExternalAccounts'Data'BankName obj) : (Data.Aeson..=) "brand" (paymentSourceExternalAccounts'Data'Brand obj) : (Data.Aeson..=) "country" (paymentSourceExternalAccounts'Data'Country obj) : (Data.Aeson..=) "currency" (paymentSourceExternalAccounts'Data'Currency obj) : (Data.Aeson..=) "customer" (paymentSourceExternalAccounts'Data'Customer obj) : (Data.Aeson..=) "cvc_check" (paymentSourceExternalAccounts'Data'CvcCheck obj) : (Data.Aeson..=) "default_for_currency" (paymentSourceExternalAccounts'Data'DefaultForCurrency obj) : (Data.Aeson..=) "dynamic_last4" (paymentSourceExternalAccounts'Data'DynamicLast4 obj) : (Data.Aeson..=) "exp_month" (paymentSourceExternalAccounts'Data'ExpMonth obj) : (Data.Aeson..=) "exp_year" (paymentSourceExternalAccounts'Data'ExpYear obj) : (Data.Aeson..=) "fingerprint" (paymentSourceExternalAccounts'Data'Fingerprint obj) : (Data.Aeson..=) "funding" (paymentSourceExternalAccounts'Data'Funding obj) : (Data.Aeson..=) "id" (paymentSourceExternalAccounts'Data'Id obj) : (Data.Aeson..=) "last4" (paymentSourceExternalAccounts'Data'Last4 obj) : (Data.Aeson..=) "metadata" (paymentSourceExternalAccounts'Data'Metadata obj) : (Data.Aeson..=) "name" (paymentSourceExternalAccounts'Data'Name obj) : (Data.Aeson..=) "object" (paymentSourceExternalAccounts'Data'Object obj) : (Data.Aeson..=) "recipient" (paymentSourceExternalAccounts'Data'Recipient obj) : (Data.Aeson..=) "routing_number" (paymentSourceExternalAccounts'Data'RoutingNumber obj) : (Data.Aeson..=) "status" (paymentSourceExternalAccounts'Data'Status obj) : (Data.Aeson..=) "tokenization_method" (paymentSourceExternalAccounts'Data'TokenizationMethod obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (paymentSourceExternalAccounts'Data'Account obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (paymentSourceExternalAccounts'Data'AccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (paymentSourceExternalAccounts'Data'AccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "address_city" (paymentSourceExternalAccounts'Data'AddressCity obj) GHC.Base.<> ((Data.Aeson..=) "address_country" (paymentSourceExternalAccounts'Data'AddressCountry obj) GHC.Base.<> ((Data.Aeson..=) "address_line1" (paymentSourceExternalAccounts'Data'AddressLine1 obj) GHC.Base.<> ((Data.Aeson..=) "address_line1_check" (paymentSourceExternalAccounts'Data'AddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_line2" (paymentSourceExternalAccounts'Data'AddressLine2 obj) GHC.Base.<> ((Data.Aeson..=) "address_state" (paymentSourceExternalAccounts'Data'AddressState obj) GHC.Base.<> ((Data.Aeson..=) "address_zip" (paymentSourceExternalAccounts'Data'AddressZip obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (paymentSourceExternalAccounts'Data'AddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "available_payout_methods" (paymentSourceExternalAccounts'Data'AvailablePayoutMethods obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (paymentSourceExternalAccounts'Data'BankName obj) GHC.Base.<> ((Data.Aeson..=) "brand" (paymentSourceExternalAccounts'Data'Brand obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentSourceExternalAccounts'Data'Country obj) GHC.Base.<> ((Data.Aeson..=) "currency" (paymentSourceExternalAccounts'Data'Currency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (paymentSourceExternalAccounts'Data'Customer obj) GHC.Base.<> ((Data.Aeson..=) "cvc_check" (paymentSourceExternalAccounts'Data'CvcCheck obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (paymentSourceExternalAccounts'Data'DefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (paymentSourceExternalAccounts'Data'DynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (paymentSourceExternalAccounts'Data'ExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (paymentSourceExternalAccounts'Data'ExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (paymentSourceExternalAccounts'Data'Fingerprint obj) GHC.Base.<> ((Data.Aeson..=) "funding" (paymentSourceExternalAccounts'Data'Funding obj) GHC.Base.<> ((Data.Aeson..=) "id" (paymentSourceExternalAccounts'Data'Id obj) GHC.Base.<> ((Data.Aeson..=) "last4" (paymentSourceExternalAccounts'Data'Last4 obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (paymentSourceExternalAccounts'Data'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentSourceExternalAccounts'Data'Name obj) GHC.Base.<> ((Data.Aeson..=) "object" (paymentSourceExternalAccounts'Data'Object obj) GHC.Base.<> ((Data.Aeson..=) "recipient" (paymentSourceExternalAccounts'Data'Recipient obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (paymentSourceExternalAccounts'Data'RoutingNumber obj) GHC.Base.<> ((Data.Aeson..=) "status" (paymentSourceExternalAccounts'Data'Status obj) GHC.Base.<> (Data.Aeson..=) "tokenization_method" (paymentSourceExternalAccounts'Data'TokenizationMethod obj)))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceExternalAccounts'Data'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceExternalAccounts'Data'" (\obj -> ((((((((((((((((((((((((((((((((GHC.Base.pure PaymentSourceExternalAccounts'Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method"))
data PaymentSourceExternalAccounts'Object'
    = PaymentSourceExternalAccounts'Object'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentSourceExternalAccounts'Object'EnumTyped GHC.Base.String
    | PaymentSourceExternalAccounts'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceExternalAccounts'Object'
    where toJSON (PaymentSourceExternalAccounts'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceExternalAccounts'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceExternalAccounts'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON PaymentSourceExternalAccounts'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then PaymentSourceExternalAccounts'Object'EnumStringList
                                          else PaymentSourceExternalAccounts'Object'EnumOther val)
instance Data.Aeson.ToJSON PaymentSourceExternalAccounts'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (paymentSourceExternalAccounts'Data obj) : (Data.Aeson..=) "has_more" (paymentSourceExternalAccounts'HasMore obj) : (Data.Aeson..=) "object" (paymentSourceExternalAccounts'Object obj) : (Data.Aeson..=) "url" (paymentSourceExternalAccounts'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (paymentSourceExternalAccounts'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (paymentSourceExternalAccounts'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (paymentSourceExternalAccounts'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (paymentSourceExternalAccounts'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceExternalAccounts'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceExternalAccounts'" (\obj -> (((GHC.Base.pure PaymentSourceExternalAccounts' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data PaymentSourceMetadata'
    = PaymentSourceMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceMetadata'" (\obj -> GHC.Base.pure PaymentSourceMetadata')
data PaymentSourceObject'
    = PaymentSourceObject'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentSourceObject'EnumTyped GHC.Base.String
    | PaymentSourceObject'EnumStringAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceObject'
    where toJSON (PaymentSourceObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceObject'EnumStringAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account"
instance Data.Aeson.FromJSON PaymentSourceObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "account")
                                          then PaymentSourceObject'EnumStringAccount
                                          else PaymentSourceObject'EnumOther val)
data PaymentSourceOwner'
    = PaymentSourceOwner' {paymentSourceOwner'Address :: (GHC.Maybe.Maybe PaymentSourceOwner'Address'),
                           paymentSourceOwner'Email :: (GHC.Maybe.Maybe GHC.Base.String),
                           paymentSourceOwner'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                           paymentSourceOwner'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                           paymentSourceOwner'VerifiedAddress :: (GHC.Maybe.Maybe PaymentSourceOwner'VerifiedAddress'),
                           paymentSourceOwner'VerifiedEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                           paymentSourceOwner'VerifiedName :: (GHC.Maybe.Maybe GHC.Base.String),
                           paymentSourceOwner'VerifiedPhone :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentSourceOwner'Address'
    = PaymentSourceOwner'Address' {paymentSourceOwner'Address'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                   paymentSourceOwner'Address'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                   paymentSourceOwner'Address'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                   paymentSourceOwner'Address'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                   paymentSourceOwner'Address'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                   paymentSourceOwner'Address'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceOwner'Address'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentSourceOwner'Address'City obj) : (Data.Aeson..=) "country" (paymentSourceOwner'Address'Country obj) : (Data.Aeson..=) "line1" (paymentSourceOwner'Address'Line1 obj) : (Data.Aeson..=) "line2" (paymentSourceOwner'Address'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentSourceOwner'Address'PostalCode obj) : (Data.Aeson..=) "state" (paymentSourceOwner'Address'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentSourceOwner'Address'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentSourceOwner'Address'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentSourceOwner'Address'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentSourceOwner'Address'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentSourceOwner'Address'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentSourceOwner'Address'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceOwner'Address'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceOwner'Address'" (\obj -> (((((GHC.Base.pure PaymentSourceOwner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data PaymentSourceOwner'VerifiedAddress'
    = PaymentSourceOwner'VerifiedAddress' {paymentSourceOwner'VerifiedAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceOwner'VerifiedAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceOwner'VerifiedAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceOwner'VerifiedAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceOwner'VerifiedAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                           paymentSourceOwner'VerifiedAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceOwner'VerifiedAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (paymentSourceOwner'VerifiedAddress'City obj) : (Data.Aeson..=) "country" (paymentSourceOwner'VerifiedAddress'Country obj) : (Data.Aeson..=) "line1" (paymentSourceOwner'VerifiedAddress'Line1 obj) : (Data.Aeson..=) "line2" (paymentSourceOwner'VerifiedAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (paymentSourceOwner'VerifiedAddress'PostalCode obj) : (Data.Aeson..=) "state" (paymentSourceOwner'VerifiedAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (paymentSourceOwner'VerifiedAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentSourceOwner'VerifiedAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (paymentSourceOwner'VerifiedAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (paymentSourceOwner'VerifiedAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (paymentSourceOwner'VerifiedAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (paymentSourceOwner'VerifiedAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceOwner'VerifiedAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceOwner'VerifiedAddress'" (\obj -> (((((GHC.Base.pure PaymentSourceOwner'VerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON PaymentSourceOwner'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (paymentSourceOwner'Address obj) : (Data.Aeson..=) "email" (paymentSourceOwner'Email obj) : (Data.Aeson..=) "name" (paymentSourceOwner'Name obj) : (Data.Aeson..=) "phone" (paymentSourceOwner'Phone obj) : (Data.Aeson..=) "verified_address" (paymentSourceOwner'VerifiedAddress obj) : (Data.Aeson..=) "verified_email" (paymentSourceOwner'VerifiedEmail obj) : (Data.Aeson..=) "verified_name" (paymentSourceOwner'VerifiedName obj) : (Data.Aeson..=) "verified_phone" (paymentSourceOwner'VerifiedPhone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (paymentSourceOwner'Address obj) GHC.Base.<> ((Data.Aeson..=) "email" (paymentSourceOwner'Email obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentSourceOwner'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (paymentSourceOwner'Phone obj) GHC.Base.<> ((Data.Aeson..=) "verified_address" (paymentSourceOwner'VerifiedAddress obj) GHC.Base.<> ((Data.Aeson..=) "verified_email" (paymentSourceOwner'VerifiedEmail obj) GHC.Base.<> ((Data.Aeson..=) "verified_name" (paymentSourceOwner'VerifiedName obj) GHC.Base.<> (Data.Aeson..=) "verified_phone" (paymentSourceOwner'VerifiedPhone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceOwner'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceOwner'" (\obj -> (((((((GHC.Base.pure PaymentSourceOwner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))
data PaymentSourceRecipient'Variants
    = PaymentSourceRecipient'Variant1 Recipient
    | PaymentSourceRecipient'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PaymentSourceRecipient'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PaymentSourceRecipient'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PaymentSourceSettings'
    = PaymentSourceSettings' {paymentSourceSettings'Branding :: (GHC.Maybe.Maybe AccountBrandingSettings),
                              paymentSourceSettings'CardPayments :: (GHC.Maybe.Maybe AccountCardPaymentsSettings),
                              paymentSourceSettings'Dashboard :: (GHC.Maybe.Maybe AccountDashboardSettings),
                              paymentSourceSettings'Payments :: (GHC.Maybe.Maybe AccountPaymentsSettings),
                              paymentSourceSettings'Payouts :: (GHC.Maybe.Maybe AccountPayoutSettings)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceSettings'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "branding" (paymentSourceSettings'Branding obj) : (Data.Aeson..=) "card_payments" (paymentSourceSettings'CardPayments obj) : (Data.Aeson..=) "dashboard" (paymentSourceSettings'Dashboard obj) : (Data.Aeson..=) "payments" (paymentSourceSettings'Payments obj) : (Data.Aeson..=) "payouts" (paymentSourceSettings'Payouts obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "branding" (paymentSourceSettings'Branding obj) GHC.Base.<> ((Data.Aeson..=) "card_payments" (paymentSourceSettings'CardPayments obj) GHC.Base.<> ((Data.Aeson..=) "dashboard" (paymentSourceSettings'Dashboard obj) GHC.Base.<> ((Data.Aeson..=) "payments" (paymentSourceSettings'Payments obj) GHC.Base.<> (Data.Aeson..=) "payouts" (paymentSourceSettings'Payouts obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceSettings'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceSettings'" (\obj -> ((((GHC.Base.pure PaymentSourceSettings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "branding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dashboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts"))
data PaymentSourceTransactions'
    = PaymentSourceTransactions' {paymentSourceTransactions'Data :: ([] BitcoinTransaction),
                                  paymentSourceTransactions'HasMore :: GHC.Types.Bool,
                                  paymentSourceTransactions'Object :: PaymentSourceTransactions'Object',
                                  paymentSourceTransactions'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PaymentSourceTransactions'Object'
    = PaymentSourceTransactions'Object'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentSourceTransactions'Object'EnumTyped GHC.Base.String
    | PaymentSourceTransactions'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceTransactions'Object'
    where toJSON (PaymentSourceTransactions'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceTransactions'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceTransactions'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON PaymentSourceTransactions'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then PaymentSourceTransactions'Object'EnumStringList
                                          else PaymentSourceTransactions'Object'EnumOther val)
instance Data.Aeson.ToJSON PaymentSourceTransactions'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (paymentSourceTransactions'Data obj) : (Data.Aeson..=) "has_more" (paymentSourceTransactions'HasMore obj) : (Data.Aeson..=) "object" (paymentSourceTransactions'Object obj) : (Data.Aeson..=) "url" (paymentSourceTransactions'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (paymentSourceTransactions'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (paymentSourceTransactions'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (paymentSourceTransactions'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (paymentSourceTransactions'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceTransactions'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceTransactions'" (\obj -> (((GHC.Base.pure PaymentSourceTransactions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data PaymentSourceType'
    = PaymentSourceType'EnumOther Data.Aeson.Types.Internal.Value
    | PaymentSourceType'EnumTyped GHC.Base.String
    | PaymentSourceType'EnumStringCustom
    | PaymentSourceType'EnumStringExpress
    | PaymentSourceType'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PaymentSourceType'
    where toJSON (PaymentSourceType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PaymentSourceType'EnumStringCustom) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "custom"
          toJSON (PaymentSourceType'EnumStringExpress) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "express"
          toJSON (PaymentSourceType'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON PaymentSourceType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "custom")
                                          then PaymentSourceType'EnumStringCustom
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "express")
                                                then PaymentSourceType'EnumStringExpress
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                      then PaymentSourceType'EnumStringStandard
                                                      else PaymentSourceType'EnumOther val)
instance Data.Aeson.ToJSON PaymentSource
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (paymentSourceAccount obj) : (Data.Aeson..=) "account_holder_name" (paymentSourceAccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (paymentSourceAccountHolderType obj) : (Data.Aeson..=) "ach_credit_transfer" (paymentSourceAchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (paymentSourceAchDebit obj) : (Data.Aeson..=) "active" (paymentSourceActive obj) : (Data.Aeson..=) "address_city" (paymentSourceAddressCity obj) : (Data.Aeson..=) "address_country" (paymentSourceAddressCountry obj) : (Data.Aeson..=) "address_line1" (paymentSourceAddressLine1 obj) : (Data.Aeson..=) "address_line1_check" (paymentSourceAddressLine1Check obj) : (Data.Aeson..=) "address_line2" (paymentSourceAddressLine2 obj) : (Data.Aeson..=) "address_state" (paymentSourceAddressState obj) : (Data.Aeson..=) "address_zip" (paymentSourceAddressZip obj) : (Data.Aeson..=) "address_zip_check" (paymentSourceAddressZipCheck obj) : (Data.Aeson..=) "alipay" (paymentSourceAlipay obj) : (Data.Aeson..=) "amount" (paymentSourceAmount obj) : (Data.Aeson..=) "amount_received" (paymentSourceAmountReceived obj) : (Data.Aeson..=) "available_payout_methods" (paymentSourceAvailablePayoutMethods obj) : (Data.Aeson..=) "bancontact" (paymentSourceBancontact obj) : (Data.Aeson..=) "bank_name" (paymentSourceBankName obj) : (Data.Aeson..=) "bitcoin_amount" (paymentSourceBitcoinAmount obj) : (Data.Aeson..=) "bitcoin_amount_received" (paymentSourceBitcoinAmountReceived obj) : (Data.Aeson..=) "bitcoin_uri" (paymentSourceBitcoinUri obj) : (Data.Aeson..=) "brand" (paymentSourceBrand obj) : (Data.Aeson..=) "business_profile" (paymentSourceBusinessProfile obj) : (Data.Aeson..=) "business_type" (paymentSourceBusinessType obj) : (Data.Aeson..=) "capabilities" (paymentSourceCapabilities obj) : (Data.Aeson..=) "card" (paymentSourceCard obj) : (Data.Aeson..=) "card_present" (paymentSourceCardPresent obj) : (Data.Aeson..=) "charges_enabled" (paymentSourceChargesEnabled obj) : (Data.Aeson..=) "client_secret" (paymentSourceClientSecret obj) : (Data.Aeson..=) "code_verification" (paymentSourceCodeVerification obj) : (Data.Aeson..=) "company" (paymentSourceCompany obj) : (Data.Aeson..=) "country" (paymentSourceCountry obj) : (Data.Aeson..=) "created" (paymentSourceCreated obj) : (Data.Aeson..=) "currency" (paymentSourceCurrency obj) : (Data.Aeson..=) "customer" (paymentSourceCustomer obj) : (Data.Aeson..=) "cvc_check" (paymentSourceCvcCheck obj) : (Data.Aeson..=) "default_currency" (paymentSourceDefaultCurrency obj) : (Data.Aeson..=) "default_for_currency" (paymentSourceDefaultForCurrency obj) : (Data.Aeson..=) "description" (paymentSourceDescription obj) : (Data.Aeson..=) "details_submitted" (paymentSourceDetailsSubmitted obj) : (Data.Aeson..=) "dynamic_last4" (paymentSourceDynamicLast4 obj) : (Data.Aeson..=) "email" (paymentSourceEmail obj) : (Data.Aeson..=) "eps" (paymentSourceEps obj) : (Data.Aeson..=) "exp_month" (paymentSourceExpMonth obj) : (Data.Aeson..=) "exp_year" (paymentSourceExpYear obj) : (Data.Aeson..=) "external_accounts" (paymentSourceExternalAccounts obj) : (Data.Aeson..=) "filled" (paymentSourceFilled obj) : (Data.Aeson..=) "fingerprint" (paymentSourceFingerprint obj) : (Data.Aeson..=) "flow" (paymentSourceFlow obj) : (Data.Aeson..=) "funding" (paymentSourceFunding obj) : (Data.Aeson..=) "giropay" (paymentSourceGiropay obj) : (Data.Aeson..=) "id" (paymentSourceId obj) : (Data.Aeson..=) "ideal" (paymentSourceIdeal obj) : (Data.Aeson..=) "inbound_address" (paymentSourceInboundAddress obj) : (Data.Aeson..=) "individual" (paymentSourceIndividual obj) : (Data.Aeson..=) "klarna" (paymentSourceKlarna obj) : (Data.Aeson..=) "last4" (paymentSourceLast4 obj) : (Data.Aeson..=) "livemode" (paymentSourceLivemode obj) : (Data.Aeson..=) "metadata" (paymentSourceMetadata obj) : (Data.Aeson..=) "multibanco" (paymentSourceMultibanco obj) : (Data.Aeson..=) "name" (paymentSourceName obj) : (Data.Aeson..=) "object" (paymentSourceObject obj) : (Data.Aeson..=) "owner" (paymentSourceOwner obj) : (Data.Aeson..=) "p24" (paymentSourceP24 obj) : (Data.Aeson..=) "payment" (paymentSourcePayment obj) : (Data.Aeson..=) "payment_amount" (paymentSourcePaymentAmount obj) : (Data.Aeson..=) "payment_currency" (paymentSourcePaymentCurrency obj) : (Data.Aeson..=) "payouts_enabled" (paymentSourcePayoutsEnabled obj) : (Data.Aeson..=) "receiver" (paymentSourceReceiver obj) : (Data.Aeson..=) "recipient" (paymentSourceRecipient obj) : (Data.Aeson..=) "redirect" (paymentSourceRedirect obj) : (Data.Aeson..=) "refund_address" (paymentSourceRefundAddress obj) : (Data.Aeson..=) "requirements" (paymentSourceRequirements obj) : (Data.Aeson..=) "reusable" (paymentSourceReusable obj) : (Data.Aeson..=) "routing_number" (paymentSourceRoutingNumber obj) : (Data.Aeson..=) "sepa_debit" (paymentSourceSepaDebit obj) : (Data.Aeson..=) "settings" (paymentSourceSettings obj) : (Data.Aeson..=) "sofort" (paymentSourceSofort obj) : (Data.Aeson..=) "source_order" (paymentSourceSourceOrder obj) : (Data.Aeson..=) "statement_descriptor" (paymentSourceStatementDescriptor obj) : (Data.Aeson..=) "status" (paymentSourceStatus obj) : (Data.Aeson..=) "three_d_secure" (paymentSourceThreeDSecure obj) : (Data.Aeson..=) "tokenization_method" (paymentSourceTokenizationMethod obj) : (Data.Aeson..=) "tos_acceptance" (paymentSourceTosAcceptance obj) : (Data.Aeson..=) "transactions" (paymentSourceTransactions obj) : (Data.Aeson..=) "type" (paymentSourceType obj) : (Data.Aeson..=) "uncaptured_funds" (paymentSourceUncapturedFunds obj) : (Data.Aeson..=) "usage" (paymentSourceUsage obj) : (Data.Aeson..=) "used" (paymentSourceUsed obj) : (Data.Aeson..=) "used_for_payment" (paymentSourceUsedForPayment obj) : (Data.Aeson..=) "username" (paymentSourceUsername obj) : (Data.Aeson..=) "wechat" (paymentSourceWechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (paymentSourceAccount obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (paymentSourceAccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (paymentSourceAccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "ach_credit_transfer" (paymentSourceAchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (paymentSourceAchDebit obj) GHC.Base.<> ((Data.Aeson..=) "active" (paymentSourceActive obj) GHC.Base.<> ((Data.Aeson..=) "address_city" (paymentSourceAddressCity obj) GHC.Base.<> ((Data.Aeson..=) "address_country" (paymentSourceAddressCountry obj) GHC.Base.<> ((Data.Aeson..=) "address_line1" (paymentSourceAddressLine1 obj) GHC.Base.<> ((Data.Aeson..=) "address_line1_check" (paymentSourceAddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_line2" (paymentSourceAddressLine2 obj) GHC.Base.<> ((Data.Aeson..=) "address_state" (paymentSourceAddressState obj) GHC.Base.<> ((Data.Aeson..=) "address_zip" (paymentSourceAddressZip obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (paymentSourceAddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (paymentSourceAlipay obj) GHC.Base.<> ((Data.Aeson..=) "amount" (paymentSourceAmount obj) GHC.Base.<> ((Data.Aeson..=) "amount_received" (paymentSourceAmountReceived obj) GHC.Base.<> ((Data.Aeson..=) "available_payout_methods" (paymentSourceAvailablePayoutMethods obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (paymentSourceBancontact obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (paymentSourceBankName obj) GHC.Base.<> ((Data.Aeson..=) "bitcoin_amount" (paymentSourceBitcoinAmount obj) GHC.Base.<> ((Data.Aeson..=) "bitcoin_amount_received" (paymentSourceBitcoinAmountReceived obj) GHC.Base.<> ((Data.Aeson..=) "bitcoin_uri" (paymentSourceBitcoinUri obj) GHC.Base.<> ((Data.Aeson..=) "brand" (paymentSourceBrand obj) GHC.Base.<> ((Data.Aeson..=) "business_profile" (paymentSourceBusinessProfile obj) GHC.Base.<> ((Data.Aeson..=) "business_type" (paymentSourceBusinessType obj) GHC.Base.<> ((Data.Aeson..=) "capabilities" (paymentSourceCapabilities obj) GHC.Base.<> ((Data.Aeson..=) "card" (paymentSourceCard obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (paymentSourceCardPresent obj) GHC.Base.<> ((Data.Aeson..=) "charges_enabled" (paymentSourceChargesEnabled obj) GHC.Base.<> ((Data.Aeson..=) "client_secret" (paymentSourceClientSecret obj) GHC.Base.<> ((Data.Aeson..=) "code_verification" (paymentSourceCodeVerification obj) GHC.Base.<> ((Data.Aeson..=) "company" (paymentSourceCompany obj) GHC.Base.<> ((Data.Aeson..=) "country" (paymentSourceCountry obj) GHC.Base.<> ((Data.Aeson..=) "created" (paymentSourceCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (paymentSourceCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (paymentSourceCustomer obj) GHC.Base.<> ((Data.Aeson..=) "cvc_check" (paymentSourceCvcCheck obj) GHC.Base.<> ((Data.Aeson..=) "default_currency" (paymentSourceDefaultCurrency obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (paymentSourceDefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (paymentSourceDescription obj) GHC.Base.<> ((Data.Aeson..=) "details_submitted" (paymentSourceDetailsSubmitted obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (paymentSourceDynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "email" (paymentSourceEmail obj) GHC.Base.<> ((Data.Aeson..=) "eps" (paymentSourceEps obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (paymentSourceExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (paymentSourceExpYear obj) GHC.Base.<> ((Data.Aeson..=) "external_accounts" (paymentSourceExternalAccounts obj) GHC.Base.<> ((Data.Aeson..=) "filled" (paymentSourceFilled obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (paymentSourceFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "flow" (paymentSourceFlow obj) GHC.Base.<> ((Data.Aeson..=) "funding" (paymentSourceFunding obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (paymentSourceGiropay obj) GHC.Base.<> ((Data.Aeson..=) "id" (paymentSourceId obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (paymentSourceIdeal obj) GHC.Base.<> ((Data.Aeson..=) "inbound_address" (paymentSourceInboundAddress obj) GHC.Base.<> ((Data.Aeson..=) "individual" (paymentSourceIndividual obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (paymentSourceKlarna obj) GHC.Base.<> ((Data.Aeson..=) "last4" (paymentSourceLast4 obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (paymentSourceLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (paymentSourceMetadata obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (paymentSourceMultibanco obj) GHC.Base.<> ((Data.Aeson..=) "name" (paymentSourceName obj) GHC.Base.<> ((Data.Aeson..=) "object" (paymentSourceObject obj) GHC.Base.<> ((Data.Aeson..=) "owner" (paymentSourceOwner obj) GHC.Base.<> ((Data.Aeson..=) "p24" (paymentSourceP24 obj) GHC.Base.<> ((Data.Aeson..=) "payment" (paymentSourcePayment obj) GHC.Base.<> ((Data.Aeson..=) "payment_amount" (paymentSourcePaymentAmount obj) GHC.Base.<> ((Data.Aeson..=) "payment_currency" (paymentSourcePaymentCurrency obj) GHC.Base.<> ((Data.Aeson..=) "payouts_enabled" (paymentSourcePayoutsEnabled obj) GHC.Base.<> ((Data.Aeson..=) "receiver" (paymentSourceReceiver obj) GHC.Base.<> ((Data.Aeson..=) "recipient" (paymentSourceRecipient obj) GHC.Base.<> ((Data.Aeson..=) "redirect" (paymentSourceRedirect obj) GHC.Base.<> ((Data.Aeson..=) "refund_address" (paymentSourceRefundAddress obj) GHC.Base.<> ((Data.Aeson..=) "requirements" (paymentSourceRequirements obj) GHC.Base.<> ((Data.Aeson..=) "reusable" (paymentSourceReusable obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (paymentSourceRoutingNumber obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (paymentSourceSepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "settings" (paymentSourceSettings obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (paymentSourceSofort obj) GHC.Base.<> ((Data.Aeson..=) "source_order" (paymentSourceSourceOrder obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (paymentSourceStatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (paymentSourceStatus obj) GHC.Base.<> ((Data.Aeson..=) "three_d_secure" (paymentSourceThreeDSecure obj) GHC.Base.<> ((Data.Aeson..=) "tokenization_method" (paymentSourceTokenizationMethod obj) GHC.Base.<> ((Data.Aeson..=) "tos_acceptance" (paymentSourceTosAcceptance obj) GHC.Base.<> ((Data.Aeson..=) "transactions" (paymentSourceTransactions obj) GHC.Base.<> ((Data.Aeson..=) "type" (paymentSourceType obj) GHC.Base.<> ((Data.Aeson..=) "uncaptured_funds" (paymentSourceUncapturedFunds obj) GHC.Base.<> ((Data.Aeson..=) "usage" (paymentSourceUsage obj) GHC.Base.<> ((Data.Aeson..=) "used" (paymentSourceUsed obj) GHC.Base.<> ((Data.Aeson..=) "used_for_payment" (paymentSourceUsedForPayment obj) GHC.Base.<> ((Data.Aeson..=) "username" (paymentSourceUsername obj) GHC.Base.<> (Data.Aeson..=) "wechat" (paymentSourceWechat obj))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentSource
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSource" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure PaymentSource GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_uri")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_profile")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "capabilities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charges_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details_submitted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "external_accounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "individual")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reusable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tos_acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncaptured_funds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used_for_payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
data Payout
    = Payout {payoutAmount :: GHC.Integer.Type.Integer,
              payoutArrivalDate :: GHC.Integer.Type.Integer,
              payoutAutomatic :: GHC.Types.Bool,
              payoutBalanceTransaction :: (GHC.Maybe.Maybe PayoutBalanceTransaction'Variants),
              payoutCreated :: GHC.Integer.Type.Integer,
              payoutCurrency :: GHC.Base.String,
              payoutDescription :: (GHC.Maybe.Maybe GHC.Base.String),
              payoutDestination :: (GHC.Maybe.Maybe PayoutDestination'Variants),
              payoutFailureBalanceTransaction :: (GHC.Maybe.Maybe PayoutFailureBalanceTransaction'Variants),
              payoutFailureCode :: (GHC.Maybe.Maybe GHC.Base.String),
              payoutFailureMessage :: (GHC.Maybe.Maybe GHC.Base.String),
              payoutId :: GHC.Base.String,
              payoutLivemode :: GHC.Types.Bool,
              payoutMetadata :: PayoutMetadata',
              payoutMethod :: GHC.Base.String,
              payoutObject :: PayoutObject',
              payoutSourceType :: GHC.Base.String,
              payoutStatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
              payoutStatus :: GHC.Base.String,
              payoutType :: PayoutType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PayoutBalanceTransaction'Variants
    = PayoutBalanceTransaction'Variant1 BalanceTransaction
    | PayoutBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PayoutBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PayoutBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PayoutDestination'Variants
    = PayoutDestination'Variant1 BankAccount
    | PayoutDestination'Variant2 Card
    | PayoutDestination'Variant3 DeletedBankAccount
    | PayoutDestination'Variant4 DeletedCard
    | PayoutDestination'Variant5 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PayoutDestination'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PayoutDestination'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PayoutFailureBalanceTransaction'Variants
    = PayoutFailureBalanceTransaction'Variant1 BalanceTransaction
    | PayoutFailureBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PayoutFailureBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PayoutFailureBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PayoutMetadata'
    = PayoutMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PayoutMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PayoutMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PayoutMetadata'" (\obj -> GHC.Base.pure PayoutMetadata')
data PayoutObject'
    = PayoutObject'EnumOther Data.Aeson.Types.Internal.Value
    | PayoutObject'EnumTyped GHC.Base.String
    | PayoutObject'EnumStringPayout
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PayoutObject'
    where toJSON (PayoutObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PayoutObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PayoutObject'EnumStringPayout) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payout"
instance Data.Aeson.FromJSON PayoutObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "payout")
                                          then PayoutObject'EnumStringPayout
                                          else PayoutObject'EnumOther val)
data PayoutType'
    = PayoutType'EnumOther Data.Aeson.Types.Internal.Value
    | PayoutType'EnumTyped GHC.Base.String
    | PayoutType'EnumStringBankAccount
    | PayoutType'EnumStringCard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PayoutType'
    where toJSON (PayoutType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PayoutType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PayoutType'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
          toJSON (PayoutType'EnumStringCard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card"
instance Data.Aeson.FromJSON PayoutType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then PayoutType'EnumStringBankAccount
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card")
                                                then PayoutType'EnumStringCard
                                                else PayoutType'EnumOther val)
instance Data.Aeson.ToJSON Payout
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (payoutAmount obj) : (Data.Aeson..=) "arrival_date" (payoutArrivalDate obj) : (Data.Aeson..=) "automatic" (payoutAutomatic obj) : (Data.Aeson..=) "balance_transaction" (payoutBalanceTransaction obj) : (Data.Aeson..=) "created" (payoutCreated obj) : (Data.Aeson..=) "currency" (payoutCurrency obj) : (Data.Aeson..=) "description" (payoutDescription obj) : (Data.Aeson..=) "destination" (payoutDestination obj) : (Data.Aeson..=) "failure_balance_transaction" (payoutFailureBalanceTransaction obj) : (Data.Aeson..=) "failure_code" (payoutFailureCode obj) : (Data.Aeson..=) "failure_message" (payoutFailureMessage obj) : (Data.Aeson..=) "id" (payoutId obj) : (Data.Aeson..=) "livemode" (payoutLivemode obj) : (Data.Aeson..=) "metadata" (payoutMetadata obj) : (Data.Aeson..=) "method" (payoutMethod obj) : (Data.Aeson..=) "object" (payoutObject obj) : (Data.Aeson..=) "source_type" (payoutSourceType obj) : (Data.Aeson..=) "statement_descriptor" (payoutStatementDescriptor obj) : (Data.Aeson..=) "status" (payoutStatus obj) : (Data.Aeson..=) "type" (payoutType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (payoutAmount obj) GHC.Base.<> ((Data.Aeson..=) "arrival_date" (payoutArrivalDate obj) GHC.Base.<> ((Data.Aeson..=) "automatic" (payoutAutomatic obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (payoutBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "created" (payoutCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (payoutCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (payoutDescription obj) GHC.Base.<> ((Data.Aeson..=) "destination" (payoutDestination obj) GHC.Base.<> ((Data.Aeson..=) "failure_balance_transaction" (payoutFailureBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "failure_code" (payoutFailureCode obj) GHC.Base.<> ((Data.Aeson..=) "failure_message" (payoutFailureMessage obj) GHC.Base.<> ((Data.Aeson..=) "id" (payoutId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (payoutLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (payoutMetadata obj) GHC.Base.<> ((Data.Aeson..=) "method" (payoutMethod obj) GHC.Base.<> ((Data.Aeson..=) "object" (payoutObject obj) GHC.Base.<> ((Data.Aeson..=) "source_type" (payoutSourceType obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (payoutStatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (payoutStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (payoutType obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Payout
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Payout" (\obj -> (((((((((((((((((((GHC.Base.pure Payout GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "arrival_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "automatic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data Person
    = Person {personAccount :: GHC.Base.String,
              personAddress :: (GHC.Maybe.Maybe Address),
              personAddressKana :: (GHC.Maybe.Maybe PersonAddressKana'),
              personAddressKanji :: (GHC.Maybe.Maybe PersonAddressKanji'),
              personCreated :: GHC.Integer.Type.Integer,
              personDob :: (GHC.Maybe.Maybe LegalEntityDob),
              personEmail :: (GHC.Maybe.Maybe GHC.Base.String),
              personFirstName :: (GHC.Maybe.Maybe GHC.Base.String),
              personFirstNameKana :: (GHC.Maybe.Maybe GHC.Base.String),
              personFirstNameKanji :: (GHC.Maybe.Maybe GHC.Base.String),
              personGender :: (GHC.Maybe.Maybe GHC.Base.String),
              personId :: GHC.Base.String,
              personIdNumberProvided :: (GHC.Maybe.Maybe GHC.Types.Bool),
              personLastName :: (GHC.Maybe.Maybe GHC.Base.String),
              personLastNameKana :: (GHC.Maybe.Maybe GHC.Base.String),
              personLastNameKanji :: (GHC.Maybe.Maybe GHC.Base.String),
              personMaidenName :: (GHC.Maybe.Maybe GHC.Base.String),
              personMetadata :: (GHC.Maybe.Maybe PersonMetadata'),
              personObject :: PersonObject',
              personPhone :: (GHC.Maybe.Maybe GHC.Base.String),
              personRelationship :: (GHC.Maybe.Maybe PersonRelationship),
              personRequirements :: (GHC.Maybe.Maybe PersonRequirements'),
              personSsnLast_4Provided :: (GHC.Maybe.Maybe GHC.Types.Bool),
              personVerification :: (GHC.Maybe.Maybe LegalEntityPersonVerification)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PersonAddressKana'
    = PersonAddressKana' {personAddressKana'City :: (GHC.Maybe.Maybe GHC.Base.String),
                          personAddressKana'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                          personAddressKana'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                          personAddressKana'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                          personAddressKana'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                          personAddressKana'State :: (GHC.Maybe.Maybe GHC.Base.String),
                          personAddressKana'Town :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PersonAddressKana'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (personAddressKana'City obj) : (Data.Aeson..=) "country" (personAddressKana'Country obj) : (Data.Aeson..=) "line1" (personAddressKana'Line1 obj) : (Data.Aeson..=) "line2" (personAddressKana'Line2 obj) : (Data.Aeson..=) "postal_code" (personAddressKana'PostalCode obj) : (Data.Aeson..=) "state" (personAddressKana'State obj) : (Data.Aeson..=) "town" (personAddressKana'Town obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (personAddressKana'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (personAddressKana'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (personAddressKana'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (personAddressKana'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (personAddressKana'PostalCode obj) GHC.Base.<> ((Data.Aeson..=) "state" (personAddressKana'State obj) GHC.Base.<> (Data.Aeson..=) "town" (personAddressKana'Town obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON PersonAddressKana'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PersonAddressKana'" (\obj -> ((((((GHC.Base.pure PersonAddressKana' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "town"))
data PersonAddressKanji'
    = PersonAddressKanji' {personAddressKanji'City :: (GHC.Maybe.Maybe GHC.Base.String),
                           personAddressKanji'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                           personAddressKanji'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                           personAddressKanji'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                           personAddressKanji'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                           personAddressKanji'State :: (GHC.Maybe.Maybe GHC.Base.String),
                           personAddressKanji'Town :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PersonAddressKanji'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (personAddressKanji'City obj) : (Data.Aeson..=) "country" (personAddressKanji'Country obj) : (Data.Aeson..=) "line1" (personAddressKanji'Line1 obj) : (Data.Aeson..=) "line2" (personAddressKanji'Line2 obj) : (Data.Aeson..=) "postal_code" (personAddressKanji'PostalCode obj) : (Data.Aeson..=) "state" (personAddressKanji'State obj) : (Data.Aeson..=) "town" (personAddressKanji'Town obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (personAddressKanji'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (personAddressKanji'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (personAddressKanji'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (personAddressKanji'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (personAddressKanji'PostalCode obj) GHC.Base.<> ((Data.Aeson..=) "state" (personAddressKanji'State obj) GHC.Base.<> (Data.Aeson..=) "town" (personAddressKanji'Town obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON PersonAddressKanji'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PersonAddressKanji'" (\obj -> ((((((GHC.Base.pure PersonAddressKanji' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "town"))
data PersonMetadata'
    = PersonMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PersonMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PersonMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PersonMetadata'" (\obj -> GHC.Base.pure PersonMetadata')
data PersonObject'
    = PersonObject'EnumOther Data.Aeson.Types.Internal.Value
    | PersonObject'EnumTyped GHC.Base.String
    | PersonObject'EnumStringPerson
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PersonObject'
    where toJSON (PersonObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PersonObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PersonObject'EnumStringPerson) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "person"
instance Data.Aeson.FromJSON PersonObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "person")
                                          then PersonObject'EnumStringPerson
                                          else PersonObject'EnumOther val)
data PersonRequirements'
    = PersonRequirements' {personRequirements'CurrentlyDue :: (GHC.Maybe.Maybe ([] GHC.Base.String)),
                           personRequirements'Errors :: (GHC.Maybe.Maybe ([] AccountRequirementsError)),
                           personRequirements'EventuallyDue :: (GHC.Maybe.Maybe ([] GHC.Base.String)),
                           personRequirements'PastDue :: (GHC.Maybe.Maybe ([] GHC.Base.String)),
                           personRequirements'PendingVerification :: (GHC.Maybe.Maybe ([] GHC.Base.String))}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PersonRequirements'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "currently_due" (personRequirements'CurrentlyDue obj) : (Data.Aeson..=) "errors" (personRequirements'Errors obj) : (Data.Aeson..=) "eventually_due" (personRequirements'EventuallyDue obj) : (Data.Aeson..=) "past_due" (personRequirements'PastDue obj) : (Data.Aeson..=) "pending_verification" (personRequirements'PendingVerification obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "currently_due" (personRequirements'CurrentlyDue obj) GHC.Base.<> ((Data.Aeson..=) "errors" (personRequirements'Errors obj) GHC.Base.<> ((Data.Aeson..=) "eventually_due" (personRequirements'EventuallyDue obj) GHC.Base.<> ((Data.Aeson..=) "past_due" (personRequirements'PastDue obj) GHC.Base.<> (Data.Aeson..=) "pending_verification" (personRequirements'PendingVerification obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON PersonRequirements'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PersonRequirements'" (\obj -> ((((GHC.Base.pure PersonRequirements' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eventually_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pending_verification"))
instance Data.Aeson.ToJSON Person
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (personAccount obj) : (Data.Aeson..=) "address" (personAddress obj) : (Data.Aeson..=) "address_kana" (personAddressKana obj) : (Data.Aeson..=) "address_kanji" (personAddressKanji obj) : (Data.Aeson..=) "created" (personCreated obj) : (Data.Aeson..=) "dob" (personDob obj) : (Data.Aeson..=) "email" (personEmail obj) : (Data.Aeson..=) "first_name" (personFirstName obj) : (Data.Aeson..=) "first_name_kana" (personFirstNameKana obj) : (Data.Aeson..=) "first_name_kanji" (personFirstNameKanji obj) : (Data.Aeson..=) "gender" (personGender obj) : (Data.Aeson..=) "id" (personId obj) : (Data.Aeson..=) "id_number_provided" (personIdNumberProvided obj) : (Data.Aeson..=) "last_name" (personLastName obj) : (Data.Aeson..=) "last_name_kana" (personLastNameKana obj) : (Data.Aeson..=) "last_name_kanji" (personLastNameKanji obj) : (Data.Aeson..=) "maiden_name" (personMaidenName obj) : (Data.Aeson..=) "metadata" (personMetadata obj) : (Data.Aeson..=) "object" (personObject obj) : (Data.Aeson..=) "phone" (personPhone obj) : (Data.Aeson..=) "relationship" (personRelationship obj) : (Data.Aeson..=) "requirements" (personRequirements obj) : (Data.Aeson..=) "ssn_last_4_provided" (personSsnLast_4Provided obj) : (Data.Aeson..=) "verification" (personVerification obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (personAccount obj) GHC.Base.<> ((Data.Aeson..=) "address" (personAddress obj) GHC.Base.<> ((Data.Aeson..=) "address_kana" (personAddressKana obj) GHC.Base.<> ((Data.Aeson..=) "address_kanji" (personAddressKanji obj) GHC.Base.<> ((Data.Aeson..=) "created" (personCreated obj) GHC.Base.<> ((Data.Aeson..=) "dob" (personDob obj) GHC.Base.<> ((Data.Aeson..=) "email" (personEmail obj) GHC.Base.<> ((Data.Aeson..=) "first_name" (personFirstName obj) GHC.Base.<> ((Data.Aeson..=) "first_name_kana" (personFirstNameKana obj) GHC.Base.<> ((Data.Aeson..=) "first_name_kanji" (personFirstNameKanji obj) GHC.Base.<> ((Data.Aeson..=) "gender" (personGender obj) GHC.Base.<> ((Data.Aeson..=) "id" (personId obj) GHC.Base.<> ((Data.Aeson..=) "id_number_provided" (personIdNumberProvided obj) GHC.Base.<> ((Data.Aeson..=) "last_name" (personLastName obj) GHC.Base.<> ((Data.Aeson..=) "last_name_kana" (personLastNameKana obj) GHC.Base.<> ((Data.Aeson..=) "last_name_kanji" (personLastNameKanji obj) GHC.Base.<> ((Data.Aeson..=) "maiden_name" (personMaidenName obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (personMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (personObject obj) GHC.Base.<> ((Data.Aeson..=) "phone" (personPhone obj) GHC.Base.<> ((Data.Aeson..=) "relationship" (personRelationship obj) GHC.Base.<> ((Data.Aeson..=) "requirements" (personRequirements obj) GHC.Base.<> ((Data.Aeson..=) "ssn_last_4_provided" (personSsnLast_4Provided obj) GHC.Base.<> (Data.Aeson..=) "verification" (personVerification obj))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Person
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Person" (\obj -> (((((((((((((((((((((((GHC.Base.pure Person GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dob")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_name_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_name_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gender")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id_number_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "maiden_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "relationship")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ssn_last_4_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verification"))
data Plan
    = Plan {planActive :: GHC.Types.Bool,
            planAggregateUsage :: (GHC.Maybe.Maybe PlanAggregateUsage'),
            planAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
            planAmountDecimal :: (GHC.Maybe.Maybe GHC.Base.String),
            planBillingScheme :: (GHC.Maybe.Maybe PlanBillingScheme'),
            planCreated :: GHC.Integer.Type.Integer,
            planCurrency :: GHC.Base.String,
            planId :: GHC.Base.String,
            planInterval :: PlanInterval',
            planIntervalCount :: GHC.Integer.Type.Integer,
            planLivemode :: GHC.Types.Bool,
            planMetadata :: PlanMetadata',
            planNickname :: (GHC.Maybe.Maybe GHC.Base.String),
            planObject :: PlanObject',
            planProduct :: (GHC.Maybe.Maybe PlanProduct'Variants),
            planTiers :: (GHC.Maybe.Maybe ([] PlanTier)),
            planTiersMode :: (GHC.Maybe.Maybe PlanTiersMode'),
            planTransformUsage :: (GHC.Maybe.Maybe PlanTransformUsage'),
            planTrialPeriodDays :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
            planUsageType :: PlanUsageType'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PlanAggregateUsage'
    = PlanAggregateUsage'EnumOther Data.Aeson.Types.Internal.Value
    | PlanAggregateUsage'EnumTyped GHC.Base.String
    | PlanAggregateUsage'EnumStringLastDuringPeriod
    | PlanAggregateUsage'EnumStringLastEver
    | PlanAggregateUsage'EnumStringMax
    | PlanAggregateUsage'EnumStringSum
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PlanAggregateUsage'
    where toJSON (PlanAggregateUsage'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanAggregateUsage'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanAggregateUsage'EnumStringLastDuringPeriod) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_during_period"
          toJSON (PlanAggregateUsage'EnumStringLastEver) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_ever"
          toJSON (PlanAggregateUsage'EnumStringMax) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "max"
          toJSON (PlanAggregateUsage'EnumStringSum) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sum"
instance Data.Aeson.FromJSON PlanAggregateUsage'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_during_period")
                                          then PlanAggregateUsage'EnumStringLastDuringPeriod
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_ever")
                                                then PlanAggregateUsage'EnumStringLastEver
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "max")
                                                      then PlanAggregateUsage'EnumStringMax
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sum")
                                                            then PlanAggregateUsage'EnumStringSum
                                                            else PlanAggregateUsage'EnumOther val)
data PlanBillingScheme'
    = PlanBillingScheme'EnumOther Data.Aeson.Types.Internal.Value
    | PlanBillingScheme'EnumTyped GHC.Base.String
    | PlanBillingScheme'EnumStringPerUnit
    | PlanBillingScheme'EnumStringTiered
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PlanBillingScheme'
    where toJSON (PlanBillingScheme'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanBillingScheme'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanBillingScheme'EnumStringPerUnit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "per_unit"
          toJSON (PlanBillingScheme'EnumStringTiered) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tiered"
instance Data.Aeson.FromJSON PlanBillingScheme'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "per_unit")
                                          then PlanBillingScheme'EnumStringPerUnit
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tiered")
                                                then PlanBillingScheme'EnumStringTiered
                                                else PlanBillingScheme'EnumOther val)
data PlanInterval'
    = PlanInterval'EnumOther Data.Aeson.Types.Internal.Value
    | PlanInterval'EnumTyped GHC.Base.String
    | PlanInterval'EnumStringDay
    | PlanInterval'EnumStringMonth
    | PlanInterval'EnumStringWeek
    | PlanInterval'EnumStringYear
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PlanInterval'
    where toJSON (PlanInterval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanInterval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanInterval'EnumStringDay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day"
          toJSON (PlanInterval'EnumStringMonth) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month"
          toJSON (PlanInterval'EnumStringWeek) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week"
          toJSON (PlanInterval'EnumStringYear) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year"
instance Data.Aeson.FromJSON PlanInterval'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day")
                                          then PlanInterval'EnumStringDay
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month")
                                                then PlanInterval'EnumStringMonth
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week")
                                                      then PlanInterval'EnumStringWeek
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year")
                                                            then PlanInterval'EnumStringYear
                                                            else PlanInterval'EnumOther val)
data PlanMetadata'
    = PlanMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PlanMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON PlanMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PlanMetadata'" (\obj -> GHC.Base.pure PlanMetadata')
data PlanObject'
    = PlanObject'EnumOther Data.Aeson.Types.Internal.Value
    | PlanObject'EnumTyped GHC.Base.String
    | PlanObject'EnumStringPlan
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PlanObject'
    where toJSON (PlanObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanObject'EnumStringPlan) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plan"
instance Data.Aeson.FromJSON PlanObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plan")
                                          then PlanObject'EnumStringPlan
                                          else PlanObject'EnumOther val)
data PlanProduct'Variants
    = PlanProduct'Variant1 DeletedProduct
    | PlanProduct'Variant2 Product
    | PlanProduct'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON PlanProduct'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON PlanProduct'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data PlanTiersMode'
    = PlanTiersMode'EnumOther Data.Aeson.Types.Internal.Value
    | PlanTiersMode'EnumTyped GHC.Base.String
    | PlanTiersMode'EnumStringGraduated
    | PlanTiersMode'EnumStringVolume
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PlanTiersMode'
    where toJSON (PlanTiersMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanTiersMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanTiersMode'EnumStringGraduated) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "graduated"
          toJSON (PlanTiersMode'EnumStringVolume) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume"
instance Data.Aeson.FromJSON PlanTiersMode'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "graduated")
                                          then PlanTiersMode'EnumStringGraduated
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume")
                                                then PlanTiersMode'EnumStringVolume
                                                else PlanTiersMode'EnumOther val)
data PlanTransformUsage'
    = PlanTransformUsage' {planTransformUsage'DivideBy :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                           planTransformUsage'Round :: (GHC.Maybe.Maybe PlanTransformUsage'Round')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data PlanTransformUsage'Round'
    = PlanTransformUsage'Round'EnumOther Data.Aeson.Types.Internal.Value
    | PlanTransformUsage'Round'EnumTyped GHC.Base.String
    | PlanTransformUsage'Round'EnumStringDown
    | PlanTransformUsage'Round'EnumStringUp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PlanTransformUsage'Round'
    where toJSON (PlanTransformUsage'Round'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanTransformUsage'Round'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanTransformUsage'Round'EnumStringDown) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "down"
          toJSON (PlanTransformUsage'Round'EnumStringUp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "up"
instance Data.Aeson.FromJSON PlanTransformUsage'Round'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "down")
                                          then PlanTransformUsage'Round'EnumStringDown
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "up")
                                                then PlanTransformUsage'Round'EnumStringUp
                                                else PlanTransformUsage'Round'EnumOther val)
instance Data.Aeson.ToJSON PlanTransformUsage'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "divide_by" (planTransformUsage'DivideBy obj) : (Data.Aeson..=) "round" (planTransformUsage'Round obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "divide_by" (planTransformUsage'DivideBy obj) GHC.Base.<> (Data.Aeson..=) "round" (planTransformUsage'Round obj))
instance Data.Aeson.Types.FromJSON.FromJSON PlanTransformUsage'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PlanTransformUsage'" (\obj -> (GHC.Base.pure PlanTransformUsage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "divide_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "round"))
data PlanUsageType'
    = PlanUsageType'EnumOther Data.Aeson.Types.Internal.Value
    | PlanUsageType'EnumTyped GHC.Base.String
    | PlanUsageType'EnumStringLicensed
    | PlanUsageType'EnumStringMetered
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON PlanUsageType'
    where toJSON (PlanUsageType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanUsageType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (PlanUsageType'EnumStringLicensed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "licensed"
          toJSON (PlanUsageType'EnumStringMetered) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metered"
instance Data.Aeson.FromJSON PlanUsageType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "licensed")
                                          then PlanUsageType'EnumStringLicensed
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metered")
                                                then PlanUsageType'EnumStringMetered
                                                else PlanUsageType'EnumOther val)
instance Data.Aeson.ToJSON Plan
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (planActive obj) : (Data.Aeson..=) "aggregate_usage" (planAggregateUsage obj) : (Data.Aeson..=) "amount" (planAmount obj) : (Data.Aeson..=) "amount_decimal" (planAmountDecimal obj) : (Data.Aeson..=) "billing_scheme" (planBillingScheme obj) : (Data.Aeson..=) "created" (planCreated obj) : (Data.Aeson..=) "currency" (planCurrency obj) : (Data.Aeson..=) "id" (planId obj) : (Data.Aeson..=) "interval" (planInterval obj) : (Data.Aeson..=) "interval_count" (planIntervalCount obj) : (Data.Aeson..=) "livemode" (planLivemode obj) : (Data.Aeson..=) "metadata" (planMetadata obj) : (Data.Aeson..=) "nickname" (planNickname obj) : (Data.Aeson..=) "object" (planObject obj) : (Data.Aeson..=) "product" (planProduct obj) : (Data.Aeson..=) "tiers" (planTiers obj) : (Data.Aeson..=) "tiers_mode" (planTiersMode obj) : (Data.Aeson..=) "transform_usage" (planTransformUsage obj) : (Data.Aeson..=) "trial_period_days" (planTrialPeriodDays obj) : (Data.Aeson..=) "usage_type" (planUsageType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (planActive obj) GHC.Base.<> ((Data.Aeson..=) "aggregate_usage" (planAggregateUsage obj) GHC.Base.<> ((Data.Aeson..=) "amount" (planAmount obj) GHC.Base.<> ((Data.Aeson..=) "amount_decimal" (planAmountDecimal obj) GHC.Base.<> ((Data.Aeson..=) "billing_scheme" (planBillingScheme obj) GHC.Base.<> ((Data.Aeson..=) "created" (planCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (planCurrency obj) GHC.Base.<> ((Data.Aeson..=) "id" (planId obj) GHC.Base.<> ((Data.Aeson..=) "interval" (planInterval obj) GHC.Base.<> ((Data.Aeson..=) "interval_count" (planIntervalCount obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (planLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (planMetadata obj) GHC.Base.<> ((Data.Aeson..=) "nickname" (planNickname obj) GHC.Base.<> ((Data.Aeson..=) "object" (planObject obj) GHC.Base.<> ((Data.Aeson..=) "product" (planProduct obj) GHC.Base.<> ((Data.Aeson..=) "tiers" (planTiers obj) GHC.Base.<> ((Data.Aeson..=) "tiers_mode" (planTiersMode obj) GHC.Base.<> ((Data.Aeson..=) "transform_usage" (planTransformUsage obj) GHC.Base.<> ((Data.Aeson..=) "trial_period_days" (planTrialPeriodDays obj) GHC.Base.<> (Data.Aeson..=) "usage_type" (planUsageType obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Plan
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Plan" (\obj -> (((((((((((((((((((GHC.Base.pure Plan GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "aggregate_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_scheme")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transform_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_period_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "usage_type"))
data Product
    = Product {productActive :: GHC.Types.Bool,
               productAttributes :: (GHC.Maybe.Maybe ([] GHC.Base.String)),
               productCaption :: (GHC.Maybe.Maybe GHC.Base.String),
               productCreated :: GHC.Integer.Type.Integer,
               productDeactivateOn :: (GHC.Maybe.Maybe ([] GHC.Base.String)),
               productDescription :: (GHC.Maybe.Maybe GHC.Base.String),
               productId :: GHC.Base.String,
               productImages :: ([] GHC.Base.String),
               productLivemode :: GHC.Types.Bool,
               productMetadata :: ProductMetadata',
               productName :: GHC.Base.String,
               productObject :: ProductObject',
               productPackageDimensions :: (GHC.Maybe.Maybe ProductPackageDimensions'),
               productShippable :: (GHC.Maybe.Maybe GHC.Types.Bool),
               productStatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
               productType :: ProductType',
               productUnitLabel :: (GHC.Maybe.Maybe GHC.Base.String),
               productUpdated :: GHC.Integer.Type.Integer,
               productUrl :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ProductMetadata'
    = ProductMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ProductMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON ProductMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ProductMetadata'" (\obj -> GHC.Base.pure ProductMetadata')
data ProductObject'
    = ProductObject'EnumOther Data.Aeson.Types.Internal.Value
    | ProductObject'EnumTyped GHC.Base.String
    | ProductObject'EnumStringProduct
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ProductObject'
    where toJSON (ProductObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ProductObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ProductObject'EnumStringProduct) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "product"
instance Data.Aeson.FromJSON ProductObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "product")
                                          then ProductObject'EnumStringProduct
                                          else ProductObject'EnumOther val)
data ProductPackageDimensions'
    = ProductPackageDimensions' {productPackageDimensions'Height :: (GHC.Maybe.Maybe GHC.Types.Double),
                                 productPackageDimensions'Length :: (GHC.Maybe.Maybe GHC.Types.Double),
                                 productPackageDimensions'Weight :: (GHC.Maybe.Maybe GHC.Types.Double),
                                 productPackageDimensions'Width :: (GHC.Maybe.Maybe GHC.Types.Double)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ProductPackageDimensions'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "height" (productPackageDimensions'Height obj) : (Data.Aeson..=) "length" (productPackageDimensions'Length obj) : (Data.Aeson..=) "weight" (productPackageDimensions'Weight obj) : (Data.Aeson..=) "width" (productPackageDimensions'Width obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "height" (productPackageDimensions'Height obj) GHC.Base.<> ((Data.Aeson..=) "length" (productPackageDimensions'Length obj) GHC.Base.<> ((Data.Aeson..=) "weight" (productPackageDimensions'Weight obj) GHC.Base.<> (Data.Aeson..=) "width" (productPackageDimensions'Width obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ProductPackageDimensions'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ProductPackageDimensions'" (\obj -> (((GHC.Base.pure ProductPackageDimensions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "length")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "weight")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "width"))
data ProductType'
    = ProductType'EnumOther Data.Aeson.Types.Internal.Value
    | ProductType'EnumTyped GHC.Base.String
    | ProductType'EnumStringGood
    | ProductType'EnumStringService
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ProductType'
    where toJSON (ProductType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ProductType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ProductType'EnumStringGood) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "good"
          toJSON (ProductType'EnumStringService) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service"
instance Data.Aeson.FromJSON ProductType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "good")
                                          then ProductType'EnumStringGood
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "service")
                                                then ProductType'EnumStringService
                                                else ProductType'EnumOther val)
instance Data.Aeson.ToJSON Product
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (productActive obj) : (Data.Aeson..=) "attributes" (productAttributes obj) : (Data.Aeson..=) "caption" (productCaption obj) : (Data.Aeson..=) "created" (productCreated obj) : (Data.Aeson..=) "deactivate_on" (productDeactivateOn obj) : (Data.Aeson..=) "description" (productDescription obj) : (Data.Aeson..=) "id" (productId obj) : (Data.Aeson..=) "images" (productImages obj) : (Data.Aeson..=) "livemode" (productLivemode obj) : (Data.Aeson..=) "metadata" (productMetadata obj) : (Data.Aeson..=) "name" (productName obj) : (Data.Aeson..=) "object" (productObject obj) : (Data.Aeson..=) "package_dimensions" (productPackageDimensions obj) : (Data.Aeson..=) "shippable" (productShippable obj) : (Data.Aeson..=) "statement_descriptor" (productStatementDescriptor obj) : (Data.Aeson..=) "type" (productType obj) : (Data.Aeson..=) "unit_label" (productUnitLabel obj) : (Data.Aeson..=) "updated" (productUpdated obj) : (Data.Aeson..=) "url" (productUrl obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (productActive obj) GHC.Base.<> ((Data.Aeson..=) "attributes" (productAttributes obj) GHC.Base.<> ((Data.Aeson..=) "caption" (productCaption obj) GHC.Base.<> ((Data.Aeson..=) "created" (productCreated obj) GHC.Base.<> ((Data.Aeson..=) "deactivate_on" (productDeactivateOn obj) GHC.Base.<> ((Data.Aeson..=) "description" (productDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (productId obj) GHC.Base.<> ((Data.Aeson..=) "images" (productImages obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (productLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (productMetadata obj) GHC.Base.<> ((Data.Aeson..=) "name" (productName obj) GHC.Base.<> ((Data.Aeson..=) "object" (productObject obj) GHC.Base.<> ((Data.Aeson..=) "package_dimensions" (productPackageDimensions obj) GHC.Base.<> ((Data.Aeson..=) "shippable" (productShippable obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (productStatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "type" (productType obj) GHC.Base.<> ((Data.Aeson..=) "unit_label" (productUnitLabel obj) GHC.Base.<> ((Data.Aeson..=) "updated" (productUpdated obj) GHC.Base.<> (Data.Aeson..=) "url" (productUrl obj)))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Product
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Product" (\obj -> ((((((((((((((((((GHC.Base.pure Product GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "caption")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "deactivate_on")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "images")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "package_dimensions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shippable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
data Radar'earlyFraudWarning
    = Radar'earlyFraudWarning {radar'earlyFraudWarningActionable :: GHC.Types.Bool,
                               radar'earlyFraudWarningCharge :: Radar'earlyFraudWarningCharge'Variants,
                               radar'earlyFraudWarningCreated :: GHC.Integer.Type.Integer,
                               radar'earlyFraudWarningFraudType :: GHC.Base.String,
                               radar'earlyFraudWarningId :: GHC.Base.String,
                               radar'earlyFraudWarningLivemode :: GHC.Types.Bool,
                               radar'earlyFraudWarningObject :: Radar'earlyFraudWarningObject'}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Radar'earlyFraudWarningCharge'Variants
    = Radar'earlyFraudWarningCharge'Variant1 Charge
    | Radar'earlyFraudWarningCharge'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON Radar'earlyFraudWarningCharge'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON Radar'earlyFraudWarningCharge'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data Radar'earlyFraudWarningObject'
    = Radar'earlyFraudWarningObject'EnumOther Data.Aeson.Types.Internal.Value
    | Radar'earlyFraudWarningObject'EnumTyped GHC.Base.String
    | Radar'earlyFraudWarningObject'EnumStringRadar'earlyFraudWarning
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Radar'earlyFraudWarningObject'
    where toJSON (Radar'earlyFraudWarningObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Radar'earlyFraudWarningObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Radar'earlyFraudWarningObject'EnumStringRadar'earlyFraudWarning) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "radar.early_fraud_warning"
instance Data.Aeson.FromJSON Radar'earlyFraudWarningObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "radar.early_fraud_warning")
                                          then Radar'earlyFraudWarningObject'EnumStringRadar'earlyFraudWarning
                                          else Radar'earlyFraudWarningObject'EnumOther val)
instance Data.Aeson.ToJSON Radar'earlyFraudWarning
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "actionable" (radar'earlyFraudWarningActionable obj) : (Data.Aeson..=) "charge" (radar'earlyFraudWarningCharge obj) : (Data.Aeson..=) "created" (radar'earlyFraudWarningCreated obj) : (Data.Aeson..=) "fraud_type" (radar'earlyFraudWarningFraudType obj) : (Data.Aeson..=) "id" (radar'earlyFraudWarningId obj) : (Data.Aeson..=) "livemode" (radar'earlyFraudWarningLivemode obj) : (Data.Aeson..=) "object" (radar'earlyFraudWarningObject obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "actionable" (radar'earlyFraudWarningActionable obj) GHC.Base.<> ((Data.Aeson..=) "charge" (radar'earlyFraudWarningCharge obj) GHC.Base.<> ((Data.Aeson..=) "created" (radar'earlyFraudWarningCreated obj) GHC.Base.<> ((Data.Aeson..=) "fraud_type" (radar'earlyFraudWarningFraudType obj) GHC.Base.<> ((Data.Aeson..=) "id" (radar'earlyFraudWarningId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (radar'earlyFraudWarningLivemode obj) GHC.Base.<> (Data.Aeson..=) "object" (radar'earlyFraudWarningObject obj)))))))
instance Data.Aeson.Types.FromJSON.FromJSON Radar'earlyFraudWarning
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Radar'earlyFraudWarning" (\obj -> ((((((GHC.Base.pure Radar'earlyFraudWarning GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "actionable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fraud_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object"))
data Recipient
    = Recipient {recipientActiveAccount :: (GHC.Maybe.Maybe RecipientActiveAccount'),
                 recipientCards :: (GHC.Maybe.Maybe RecipientCards'),
                 recipientCreated :: GHC.Integer.Type.Integer,
                 recipientDefaultCard :: (GHC.Maybe.Maybe RecipientDefaultCard'Variants),
                 recipientDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                 recipientEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                 recipientId :: GHC.Base.String,
                 recipientLivemode :: GHC.Types.Bool,
                 recipientMetadata :: RecipientMetadata',
                 recipientMigratedTo :: (GHC.Maybe.Maybe RecipientMigratedTo'Variants),
                 recipientName :: (GHC.Maybe.Maybe GHC.Base.String),
                 recipientObject :: RecipientObject',
                 recipientRolledBackFrom :: (GHC.Maybe.Maybe RecipientRolledBackFrom'Variants),
                 recipientType :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data RecipientActiveAccount'
    = RecipientActiveAccount' {recipientActiveAccount'Account :: (GHC.Maybe.Maybe RecipientActiveAccount'Account'Variants),
                               recipientActiveAccount'AccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                               recipientActiveAccount'AccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                               recipientActiveAccount'BankName :: (GHC.Maybe.Maybe GHC.Base.String),
                               recipientActiveAccount'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                               recipientActiveAccount'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                               recipientActiveAccount'Customer :: (GHC.Maybe.Maybe RecipientActiveAccount'Customer'Variants),
                               recipientActiveAccount'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                               recipientActiveAccount'Fingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                               recipientActiveAccount'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                               recipientActiveAccount'Last4 :: (GHC.Maybe.Maybe GHC.Base.String),
                               recipientActiveAccount'Metadata :: (GHC.Maybe.Maybe RecipientActiveAccount'Metadata'),
                               recipientActiveAccount'Object :: (GHC.Maybe.Maybe RecipientActiveAccount'Object'),
                               recipientActiveAccount'RoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                               recipientActiveAccount'Status :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data RecipientActiveAccount'Account'Variants
    = RecipientActiveAccount'Account'Variant1 Account
    | RecipientActiveAccount'Account'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RecipientActiveAccount'Account'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RecipientActiveAccount'Account'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data RecipientActiveAccount'Customer'Variants
    = RecipientActiveAccount'Customer'Variant1 Customer
    | RecipientActiveAccount'Customer'Variant2 DeletedCustomer
    | RecipientActiveAccount'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RecipientActiveAccount'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RecipientActiveAccount'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data RecipientActiveAccount'Metadata'
    = RecipientActiveAccount'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RecipientActiveAccount'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON RecipientActiveAccount'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RecipientActiveAccount'Metadata'" (\obj -> GHC.Base.pure RecipientActiveAccount'Metadata')
data RecipientActiveAccount'Object'
    = RecipientActiveAccount'Object'EnumOther Data.Aeson.Types.Internal.Value
    | RecipientActiveAccount'Object'EnumTyped GHC.Base.String
    | RecipientActiveAccount'Object'EnumStringBankAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RecipientActiveAccount'Object'
    where toJSON (RecipientActiveAccount'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RecipientActiveAccount'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RecipientActiveAccount'Object'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
instance Data.Aeson.FromJSON RecipientActiveAccount'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then RecipientActiveAccount'Object'EnumStringBankAccount
                                          else RecipientActiveAccount'Object'EnumOther val)
instance Data.Aeson.ToJSON RecipientActiveAccount'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (recipientActiveAccount'Account obj) : (Data.Aeson..=) "account_holder_name" (recipientActiveAccount'AccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (recipientActiveAccount'AccountHolderType obj) : (Data.Aeson..=) "bank_name" (recipientActiveAccount'BankName obj) : (Data.Aeson..=) "country" (recipientActiveAccount'Country obj) : (Data.Aeson..=) "currency" (recipientActiveAccount'Currency obj) : (Data.Aeson..=) "customer" (recipientActiveAccount'Customer obj) : (Data.Aeson..=) "default_for_currency" (recipientActiveAccount'DefaultForCurrency obj) : (Data.Aeson..=) "fingerprint" (recipientActiveAccount'Fingerprint obj) : (Data.Aeson..=) "id" (recipientActiveAccount'Id obj) : (Data.Aeson..=) "last4" (recipientActiveAccount'Last4 obj) : (Data.Aeson..=) "metadata" (recipientActiveAccount'Metadata obj) : (Data.Aeson..=) "object" (recipientActiveAccount'Object obj) : (Data.Aeson..=) "routing_number" (recipientActiveAccount'RoutingNumber obj) : (Data.Aeson..=) "status" (recipientActiveAccount'Status obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (recipientActiveAccount'Account obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (recipientActiveAccount'AccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (recipientActiveAccount'AccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (recipientActiveAccount'BankName obj) GHC.Base.<> ((Data.Aeson..=) "country" (recipientActiveAccount'Country obj) GHC.Base.<> ((Data.Aeson..=) "currency" (recipientActiveAccount'Currency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (recipientActiveAccount'Customer obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (recipientActiveAccount'DefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (recipientActiveAccount'Fingerprint obj) GHC.Base.<> ((Data.Aeson..=) "id" (recipientActiveAccount'Id obj) GHC.Base.<> ((Data.Aeson..=) "last4" (recipientActiveAccount'Last4 obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (recipientActiveAccount'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (recipientActiveAccount'Object obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (recipientActiveAccount'RoutingNumber obj) GHC.Base.<> (Data.Aeson..=) "status" (recipientActiveAccount'Status obj)))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON RecipientActiveAccount'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RecipientActiveAccount'" (\obj -> ((((((((((((((GHC.Base.pure RecipientActiveAccount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))
data RecipientCards'
    = RecipientCards' {recipientCards'Data :: ([] Card),
                       recipientCards'HasMore :: GHC.Types.Bool,
                       recipientCards'Object :: RecipientCards'Object',
                       recipientCards'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data RecipientCards'Object'
    = RecipientCards'Object'EnumOther Data.Aeson.Types.Internal.Value
    | RecipientCards'Object'EnumTyped GHC.Base.String
    | RecipientCards'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RecipientCards'Object'
    where toJSON (RecipientCards'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RecipientCards'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RecipientCards'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON RecipientCards'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then RecipientCards'Object'EnumStringList
                                          else RecipientCards'Object'EnumOther val)
instance Data.Aeson.ToJSON RecipientCards'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (recipientCards'Data obj) : (Data.Aeson..=) "has_more" (recipientCards'HasMore obj) : (Data.Aeson..=) "object" (recipientCards'Object obj) : (Data.Aeson..=) "url" (recipientCards'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (recipientCards'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (recipientCards'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (recipientCards'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (recipientCards'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON RecipientCards'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RecipientCards'" (\obj -> (((GHC.Base.pure RecipientCards' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data RecipientDefaultCard'Variants
    = RecipientDefaultCard'Variant1 Card
    | RecipientDefaultCard'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RecipientDefaultCard'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RecipientDefaultCard'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data RecipientMetadata'
    = RecipientMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RecipientMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON RecipientMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RecipientMetadata'" (\obj -> GHC.Base.pure RecipientMetadata')
data RecipientMigratedTo'Variants
    = RecipientMigratedTo'Variant1 Account
    | RecipientMigratedTo'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RecipientMigratedTo'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RecipientMigratedTo'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data RecipientObject'
    = RecipientObject'EnumOther Data.Aeson.Types.Internal.Value
    | RecipientObject'EnumTyped GHC.Base.String
    | RecipientObject'EnumStringRecipient
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RecipientObject'
    where toJSON (RecipientObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RecipientObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RecipientObject'EnumStringRecipient) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recipient"
instance Data.Aeson.FromJSON RecipientObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "recipient")
                                          then RecipientObject'EnumStringRecipient
                                          else RecipientObject'EnumOther val)
data RecipientRolledBackFrom'Variants
    = RecipientRolledBackFrom'Variant1 Account
    | RecipientRolledBackFrom'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RecipientRolledBackFrom'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RecipientRolledBackFrom'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Recipient
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active_account" (recipientActiveAccount obj) : (Data.Aeson..=) "cards" (recipientCards obj) : (Data.Aeson..=) "created" (recipientCreated obj) : (Data.Aeson..=) "default_card" (recipientDefaultCard obj) : (Data.Aeson..=) "description" (recipientDescription obj) : (Data.Aeson..=) "email" (recipientEmail obj) : (Data.Aeson..=) "id" (recipientId obj) : (Data.Aeson..=) "livemode" (recipientLivemode obj) : (Data.Aeson..=) "metadata" (recipientMetadata obj) : (Data.Aeson..=) "migrated_to" (recipientMigratedTo obj) : (Data.Aeson..=) "name" (recipientName obj) : (Data.Aeson..=) "object" (recipientObject obj) : (Data.Aeson..=) "rolled_back_from" (recipientRolledBackFrom obj) : (Data.Aeson..=) "type" (recipientType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active_account" (recipientActiveAccount obj) GHC.Base.<> ((Data.Aeson..=) "cards" (recipientCards obj) GHC.Base.<> ((Data.Aeson..=) "created" (recipientCreated obj) GHC.Base.<> ((Data.Aeson..=) "default_card" (recipientDefaultCard obj) GHC.Base.<> ((Data.Aeson..=) "description" (recipientDescription obj) GHC.Base.<> ((Data.Aeson..=) "email" (recipientEmail obj) GHC.Base.<> ((Data.Aeson..=) "id" (recipientId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (recipientLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (recipientMetadata obj) GHC.Base.<> ((Data.Aeson..=) "migrated_to" (recipientMigratedTo obj) GHC.Base.<> ((Data.Aeson..=) "name" (recipientName obj) GHC.Base.<> ((Data.Aeson..=) "object" (recipientObject obj) GHC.Base.<> ((Data.Aeson..=) "rolled_back_from" (recipientRolledBackFrom obj) GHC.Base.<> (Data.Aeson..=) "type" (recipientType obj))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Recipient
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Recipient" (\obj -> (((((((((((((GHC.Base.pure Recipient GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cards")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "migrated_to")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "rolled_back_from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data Refund
    = Refund {refundAmount :: GHC.Integer.Type.Integer,
              refundBalanceTransaction :: (GHC.Maybe.Maybe RefundBalanceTransaction'Variants),
              refundCharge :: (GHC.Maybe.Maybe RefundCharge'Variants),
              refundCreated :: GHC.Integer.Type.Integer,
              refundCurrency :: GHC.Base.String,
              refundDescription :: (GHC.Maybe.Maybe GHC.Base.String),
              refundFailureBalanceTransaction :: (GHC.Maybe.Maybe RefundFailureBalanceTransaction'Variants),
              refundFailureReason :: (GHC.Maybe.Maybe GHC.Base.String),
              refundId :: GHC.Base.String,
              refundMetadata :: RefundMetadata',
              refundObject :: RefundObject',
              refundPaymentIntent :: (GHC.Maybe.Maybe RefundPaymentIntent'Variants),
              refundReason :: (GHC.Maybe.Maybe GHC.Base.String),
              refundReceiptNumber :: (GHC.Maybe.Maybe GHC.Base.String),
              refundSourceTransferReversal :: (GHC.Maybe.Maybe RefundSourceTransferReversal'Variants),
              refundStatus :: (GHC.Maybe.Maybe GHC.Base.String),
              refundTransferReversal :: (GHC.Maybe.Maybe RefundTransferReversal'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data RefundBalanceTransaction'Variants
    = RefundBalanceTransaction'Variant1 BalanceTransaction
    | RefundBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RefundBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RefundBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data RefundCharge'Variants
    = RefundCharge'Variant1 Charge
    | RefundCharge'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RefundCharge'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RefundCharge'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data RefundFailureBalanceTransaction'Variants
    = RefundFailureBalanceTransaction'Variant1 BalanceTransaction
    | RefundFailureBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RefundFailureBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RefundFailureBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data RefundMetadata'
    = RefundMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RefundMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON RefundMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RefundMetadata'" (\obj -> GHC.Base.pure RefundMetadata')
data RefundObject'
    = RefundObject'EnumOther Data.Aeson.Types.Internal.Value
    | RefundObject'EnumTyped GHC.Base.String
    | RefundObject'EnumStringRefund
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON RefundObject'
    where toJSON (RefundObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RefundObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (RefundObject'EnumStringRefund) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund"
instance Data.Aeson.FromJSON RefundObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refund")
                                          then RefundObject'EnumStringRefund
                                          else RefundObject'EnumOther val)
data RefundPaymentIntent'Variants
    = RefundPaymentIntent'Variant1 PaymentIntent
    | RefundPaymentIntent'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RefundPaymentIntent'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RefundPaymentIntent'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data RefundSourceTransferReversal'Variants
    = RefundSourceTransferReversal'Variant1 TransferReversal
    | RefundSourceTransferReversal'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RefundSourceTransferReversal'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RefundSourceTransferReversal'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data RefundTransferReversal'Variants
    = RefundTransferReversal'Variant1 TransferReversal
    | RefundTransferReversal'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON RefundTransferReversal'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON RefundTransferReversal'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Refund
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (refundAmount obj) : (Data.Aeson..=) "balance_transaction" (refundBalanceTransaction obj) : (Data.Aeson..=) "charge" (refundCharge obj) : (Data.Aeson..=) "created" (refundCreated obj) : (Data.Aeson..=) "currency" (refundCurrency obj) : (Data.Aeson..=) "description" (refundDescription obj) : (Data.Aeson..=) "failure_balance_transaction" (refundFailureBalanceTransaction obj) : (Data.Aeson..=) "failure_reason" (refundFailureReason obj) : (Data.Aeson..=) "id" (refundId obj) : (Data.Aeson..=) "metadata" (refundMetadata obj) : (Data.Aeson..=) "object" (refundObject obj) : (Data.Aeson..=) "payment_intent" (refundPaymentIntent obj) : (Data.Aeson..=) "reason" (refundReason obj) : (Data.Aeson..=) "receipt_number" (refundReceiptNumber obj) : (Data.Aeson..=) "source_transfer_reversal" (refundSourceTransferReversal obj) : (Data.Aeson..=) "status" (refundStatus obj) : (Data.Aeson..=) "transfer_reversal" (refundTransferReversal obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (refundAmount obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (refundBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "charge" (refundCharge obj) GHC.Base.<> ((Data.Aeson..=) "created" (refundCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (refundCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (refundDescription obj) GHC.Base.<> ((Data.Aeson..=) "failure_balance_transaction" (refundFailureBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "failure_reason" (refundFailureReason obj) GHC.Base.<> ((Data.Aeson..=) "id" (refundId obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (refundMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (refundObject obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (refundPaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "reason" (refundReason obj) GHC.Base.<> ((Data.Aeson..=) "receipt_number" (refundReceiptNumber obj) GHC.Base.<> ((Data.Aeson..=) "source_transfer_reversal" (refundSourceTransferReversal obj) GHC.Base.<> ((Data.Aeson..=) "status" (refundStatus obj) GHC.Base.<> (Data.Aeson..=) "transfer_reversal" (refundTransferReversal obj)))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Refund
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Refund" (\obj -> ((((((((((((((((GHC.Base.pure Refund GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_transfer_reversal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_reversal"))
data Reporting'reportRun
    = Reporting'reportRun {reporting'reportRunCreated :: GHC.Integer.Type.Integer,
                           reporting'reportRunError :: (GHC.Maybe.Maybe GHC.Base.String),
                           reporting'reportRunId :: GHC.Base.String,
                           reporting'reportRunLivemode :: GHC.Types.Bool,
                           reporting'reportRunObject :: Reporting'reportRunObject',
                           reporting'reportRunParameters :: FinancialReportingFinanceReportRunRunParameters,
                           reporting'reportRunReportType :: GHC.Base.String,
                           reporting'reportRunResult :: (GHC.Maybe.Maybe Reporting'reportRunResult'),
                           reporting'reportRunStatus :: GHC.Base.String,
                           reporting'reportRunSucceededAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Reporting'reportRunObject'
    = Reporting'reportRunObject'EnumOther Data.Aeson.Types.Internal.Value
    | Reporting'reportRunObject'EnumTyped GHC.Base.String
    | Reporting'reportRunObject'EnumStringReporting'reportRun
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Reporting'reportRunObject'
    where toJSON (Reporting'reportRunObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Reporting'reportRunObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Reporting'reportRunObject'EnumStringReporting'reportRun) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reporting.report_run"
instance Data.Aeson.FromJSON Reporting'reportRunObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reporting.report_run")
                                          then Reporting'reportRunObject'EnumStringReporting'reportRun
                                          else Reporting'reportRunObject'EnumOther val)
data Reporting'reportRunResult'
    = Reporting'reportRunResult' {reporting'reportRunResult'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                  reporting'reportRunResult'Filename :: (GHC.Maybe.Maybe GHC.Base.String),
                                  reporting'reportRunResult'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                                  reporting'reportRunResult'Links :: (GHC.Maybe.Maybe Reporting'reportRunResult'Links'),
                                  reporting'reportRunResult'Object :: (GHC.Maybe.Maybe Reporting'reportRunResult'Object'),
                                  reporting'reportRunResult'Purpose :: (GHC.Maybe.Maybe GHC.Base.String),
                                  reporting'reportRunResult'Size :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                  reporting'reportRunResult'Title :: (GHC.Maybe.Maybe GHC.Base.String),
                                  reporting'reportRunResult'Type :: (GHC.Maybe.Maybe GHC.Base.String),
                                  reporting'reportRunResult'Url :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Reporting'reportRunResult'Links'
    = Reporting'reportRunResult'Links' {reporting'reportRunResult'Links'Data :: ([] FileLink),
                                        reporting'reportRunResult'Links'HasMore :: GHC.Types.Bool,
                                        reporting'reportRunResult'Links'Object :: Reporting'reportRunResult'Links'Object',
                                        reporting'reportRunResult'Links'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data Reporting'reportRunResult'Links'Object'
    = Reporting'reportRunResult'Links'Object'EnumOther Data.Aeson.Types.Internal.Value
    | Reporting'reportRunResult'Links'Object'EnumTyped GHC.Base.String
    | Reporting'reportRunResult'Links'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Reporting'reportRunResult'Links'Object'
    where toJSON (Reporting'reportRunResult'Links'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Reporting'reportRunResult'Links'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Reporting'reportRunResult'Links'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON Reporting'reportRunResult'Links'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then Reporting'reportRunResult'Links'Object'EnumStringList
                                          else Reporting'reportRunResult'Links'Object'EnumOther val)
instance Data.Aeson.ToJSON Reporting'reportRunResult'Links'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (reporting'reportRunResult'Links'Data obj) : (Data.Aeson..=) "has_more" (reporting'reportRunResult'Links'HasMore obj) : (Data.Aeson..=) "object" (reporting'reportRunResult'Links'Object obj) : (Data.Aeson..=) "url" (reporting'reportRunResult'Links'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (reporting'reportRunResult'Links'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (reporting'reportRunResult'Links'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (reporting'reportRunResult'Links'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (reporting'reportRunResult'Links'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON Reporting'reportRunResult'Links'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Reporting'reportRunResult'Links'" (\obj -> (((GHC.Base.pure Reporting'reportRunResult'Links' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data Reporting'reportRunResult'Object'
    = Reporting'reportRunResult'Object'EnumOther Data.Aeson.Types.Internal.Value
    | Reporting'reportRunResult'Object'EnumTyped GHC.Base.String
    | Reporting'reportRunResult'Object'EnumStringFile
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON Reporting'reportRunResult'Object'
    where toJSON (Reporting'reportRunResult'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Reporting'reportRunResult'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (Reporting'reportRunResult'Object'EnumStringFile) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "file"
instance Data.Aeson.FromJSON Reporting'reportRunResult'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "file")
                                          then Reporting'reportRunResult'Object'EnumStringFile
                                          else Reporting'reportRunResult'Object'EnumOther val)
instance Data.Aeson.ToJSON Reporting'reportRunResult'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (reporting'reportRunResult'Created obj) : (Data.Aeson..=) "filename" (reporting'reportRunResult'Filename obj) : (Data.Aeson..=) "id" (reporting'reportRunResult'Id obj) : (Data.Aeson..=) "links" (reporting'reportRunResult'Links obj) : (Data.Aeson..=) "object" (reporting'reportRunResult'Object obj) : (Data.Aeson..=) "purpose" (reporting'reportRunResult'Purpose obj) : (Data.Aeson..=) "size" (reporting'reportRunResult'Size obj) : (Data.Aeson..=) "title" (reporting'reportRunResult'Title obj) : (Data.Aeson..=) "type" (reporting'reportRunResult'Type obj) : (Data.Aeson..=) "url" (reporting'reportRunResult'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (reporting'reportRunResult'Created obj) GHC.Base.<> ((Data.Aeson..=) "filename" (reporting'reportRunResult'Filename obj) GHC.Base.<> ((Data.Aeson..=) "id" (reporting'reportRunResult'Id obj) GHC.Base.<> ((Data.Aeson..=) "links" (reporting'reportRunResult'Links obj) GHC.Base.<> ((Data.Aeson..=) "object" (reporting'reportRunResult'Object obj) GHC.Base.<> ((Data.Aeson..=) "purpose" (reporting'reportRunResult'Purpose obj) GHC.Base.<> ((Data.Aeson..=) "size" (reporting'reportRunResult'Size obj) GHC.Base.<> ((Data.Aeson..=) "title" (reporting'reportRunResult'Title obj) GHC.Base.<> ((Data.Aeson..=) "type" (reporting'reportRunResult'Type obj) GHC.Base.<> (Data.Aeson..=) "url" (reporting'reportRunResult'Url obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Reporting'reportRunResult'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Reporting'reportRunResult'" (\obj -> (((((((((GHC.Base.pure Reporting'reportRunResult' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filename")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "links")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "purpose")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
instance Data.Aeson.ToJSON Reporting'reportRun
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (reporting'reportRunCreated obj) : (Data.Aeson..=) "error" (reporting'reportRunError obj) : (Data.Aeson..=) "id" (reporting'reportRunId obj) : (Data.Aeson..=) "livemode" (reporting'reportRunLivemode obj) : (Data.Aeson..=) "object" (reporting'reportRunObject obj) : (Data.Aeson..=) "parameters" (reporting'reportRunParameters obj) : (Data.Aeson..=) "report_type" (reporting'reportRunReportType obj) : (Data.Aeson..=) "result" (reporting'reportRunResult obj) : (Data.Aeson..=) "status" (reporting'reportRunStatus obj) : (Data.Aeson..=) "succeeded_at" (reporting'reportRunSucceededAt obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (reporting'reportRunCreated obj) GHC.Base.<> ((Data.Aeson..=) "error" (reporting'reportRunError obj) GHC.Base.<> ((Data.Aeson..=) "id" (reporting'reportRunId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (reporting'reportRunLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (reporting'reportRunObject obj) GHC.Base.<> ((Data.Aeson..=) "parameters" (reporting'reportRunParameters obj) GHC.Base.<> ((Data.Aeson..=) "report_type" (reporting'reportRunReportType obj) GHC.Base.<> ((Data.Aeson..=) "result" (reporting'reportRunResult obj) GHC.Base.<> ((Data.Aeson..=) "status" (reporting'reportRunStatus obj) GHC.Base.<> (Data.Aeson..=) "succeeded_at" (reporting'reportRunSucceededAt obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Reporting'reportRun
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Reporting'reportRun" (\obj -> (((((((((GHC.Base.pure Reporting'reportRun GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "parameters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "report_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "result")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "succeeded_at"))
data Review
    = Review {reviewBillingZip :: (GHC.Maybe.Maybe GHC.Base.String),
              reviewCharge :: (GHC.Maybe.Maybe ReviewCharge'Variants),
              reviewClosedReason :: (GHC.Maybe.Maybe ReviewClosedReason'),
              reviewCreated :: GHC.Integer.Type.Integer,
              reviewId :: GHC.Base.String,
              reviewIpAddress :: (GHC.Maybe.Maybe GHC.Base.String),
              reviewIpAddressLocation :: (GHC.Maybe.Maybe ReviewIpAddressLocation'),
              reviewLivemode :: GHC.Types.Bool,
              reviewObject :: ReviewObject',
              reviewOpen :: GHC.Types.Bool,
              reviewOpenedReason :: ReviewOpenedReason',
              reviewPaymentIntent :: (GHC.Maybe.Maybe ReviewPaymentIntent'Variants),
              reviewReason :: GHC.Base.String,
              reviewSession :: (GHC.Maybe.Maybe ReviewSession')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ReviewCharge'Variants
    = ReviewCharge'Variant1 Charge
    | ReviewCharge'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ReviewCharge'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ReviewCharge'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ReviewClosedReason'
    = ReviewClosedReason'EnumOther Data.Aeson.Types.Internal.Value
    | ReviewClosedReason'EnumTyped GHC.Base.String
    | ReviewClosedReason'EnumStringApproved
    | ReviewClosedReason'EnumStringDisputed
    | ReviewClosedReason'EnumStringRefunded
    | ReviewClosedReason'EnumStringRefundedAsFraud
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ReviewClosedReason'
    where toJSON (ReviewClosedReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ReviewClosedReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ReviewClosedReason'EnumStringApproved) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "approved"
          toJSON (ReviewClosedReason'EnumStringDisputed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disputed"
          toJSON (ReviewClosedReason'EnumStringRefunded) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refunded"
          toJSON (ReviewClosedReason'EnumStringRefundedAsFraud) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refunded_as_fraud"
instance Data.Aeson.FromJSON ReviewClosedReason'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "approved")
                                          then ReviewClosedReason'EnumStringApproved
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "disputed")
                                                then ReviewClosedReason'EnumStringDisputed
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refunded")
                                                      then ReviewClosedReason'EnumStringRefunded
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "refunded_as_fraud")
                                                            then ReviewClosedReason'EnumStringRefundedAsFraud
                                                            else ReviewClosedReason'EnumOther val)
data ReviewIpAddressLocation'
    = ReviewIpAddressLocation' {reviewIpAddressLocation'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                reviewIpAddressLocation'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                reviewIpAddressLocation'Latitude :: (GHC.Maybe.Maybe GHC.Types.Double),
                                reviewIpAddressLocation'Longitude :: (GHC.Maybe.Maybe GHC.Types.Double),
                                reviewIpAddressLocation'Region :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ReviewIpAddressLocation'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (reviewIpAddressLocation'City obj) : (Data.Aeson..=) "country" (reviewIpAddressLocation'Country obj) : (Data.Aeson..=) "latitude" (reviewIpAddressLocation'Latitude obj) : (Data.Aeson..=) "longitude" (reviewIpAddressLocation'Longitude obj) : (Data.Aeson..=) "region" (reviewIpAddressLocation'Region obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (reviewIpAddressLocation'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (reviewIpAddressLocation'Country obj) GHC.Base.<> ((Data.Aeson..=) "latitude" (reviewIpAddressLocation'Latitude obj) GHC.Base.<> ((Data.Aeson..=) "longitude" (reviewIpAddressLocation'Longitude obj) GHC.Base.<> (Data.Aeson..=) "region" (reviewIpAddressLocation'Region obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON ReviewIpAddressLocation'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ReviewIpAddressLocation'" (\obj -> ((((GHC.Base.pure ReviewIpAddressLocation' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region"))
data ReviewObject'
    = ReviewObject'EnumOther Data.Aeson.Types.Internal.Value
    | ReviewObject'EnumTyped GHC.Base.String
    | ReviewObject'EnumStringReview
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ReviewObject'
    where toJSON (ReviewObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ReviewObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ReviewObject'EnumStringReview) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "review"
instance Data.Aeson.FromJSON ReviewObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "review")
                                          then ReviewObject'EnumStringReview
                                          else ReviewObject'EnumOther val)
data ReviewOpenedReason'
    = ReviewOpenedReason'EnumOther Data.Aeson.Types.Internal.Value
    | ReviewOpenedReason'EnumTyped GHC.Base.String
    | ReviewOpenedReason'EnumStringManual
    | ReviewOpenedReason'EnumStringRule
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ReviewOpenedReason'
    where toJSON (ReviewOpenedReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ReviewOpenedReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ReviewOpenedReason'EnumStringManual) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual"
          toJSON (ReviewOpenedReason'EnumStringRule) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "rule"
instance Data.Aeson.FromJSON ReviewOpenedReason'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "manual")
                                          then ReviewOpenedReason'EnumStringManual
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "rule")
                                                then ReviewOpenedReason'EnumStringRule
                                                else ReviewOpenedReason'EnumOther val)
data ReviewPaymentIntent'Variants
    = ReviewPaymentIntent'Variant1 PaymentIntent
    | ReviewPaymentIntent'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON ReviewPaymentIntent'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON ReviewPaymentIntent'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data ReviewSession'
    = ReviewSession' {reviewSession'Browser :: (GHC.Maybe.Maybe GHC.Base.String),
                      reviewSession'Device :: (GHC.Maybe.Maybe GHC.Base.String),
                      reviewSession'Platform :: (GHC.Maybe.Maybe GHC.Base.String),
                      reviewSession'Version :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ReviewSession'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "browser" (reviewSession'Browser obj) : (Data.Aeson..=) "device" (reviewSession'Device obj) : (Data.Aeson..=) "platform" (reviewSession'Platform obj) : (Data.Aeson..=) "version" (reviewSession'Version obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "browser" (reviewSession'Browser obj) GHC.Base.<> ((Data.Aeson..=) "device" (reviewSession'Device obj) GHC.Base.<> ((Data.Aeson..=) "platform" (reviewSession'Platform obj) GHC.Base.<> (Data.Aeson..=) "version" (reviewSession'Version obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ReviewSession'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ReviewSession'" (\obj -> (((GHC.Base.pure ReviewSession' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "browser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "device")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "platform")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "version"))
instance Data.Aeson.ToJSON Review
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_zip" (reviewBillingZip obj) : (Data.Aeson..=) "charge" (reviewCharge obj) : (Data.Aeson..=) "closed_reason" (reviewClosedReason obj) : (Data.Aeson..=) "created" (reviewCreated obj) : (Data.Aeson..=) "id" (reviewId obj) : (Data.Aeson..=) "ip_address" (reviewIpAddress obj) : (Data.Aeson..=) "ip_address_location" (reviewIpAddressLocation obj) : (Data.Aeson..=) "livemode" (reviewLivemode obj) : (Data.Aeson..=) "object" (reviewObject obj) : (Data.Aeson..=) "open" (reviewOpen obj) : (Data.Aeson..=) "opened_reason" (reviewOpenedReason obj) : (Data.Aeson..=) "payment_intent" (reviewPaymentIntent obj) : (Data.Aeson..=) "reason" (reviewReason obj) : (Data.Aeson..=) "session" (reviewSession obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_zip" (reviewBillingZip obj) GHC.Base.<> ((Data.Aeson..=) "charge" (reviewCharge obj) GHC.Base.<> ((Data.Aeson..=) "closed_reason" (reviewClosedReason obj) GHC.Base.<> ((Data.Aeson..=) "created" (reviewCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (reviewId obj) GHC.Base.<> ((Data.Aeson..=) "ip_address" (reviewIpAddress obj) GHC.Base.<> ((Data.Aeson..=) "ip_address_location" (reviewIpAddressLocation obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (reviewLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (reviewObject obj) GHC.Base.<> ((Data.Aeson..=) "open" (reviewOpen obj) GHC.Base.<> ((Data.Aeson..=) "opened_reason" (reviewOpenedReason obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (reviewPaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "reason" (reviewReason obj) GHC.Base.<> (Data.Aeson..=) "session" (reviewSession obj))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Review
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Review" (\obj -> (((((((((((((GHC.Base.pure Review GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "closed_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_address_location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "open")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "opened_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "session"))
data ScheduledQueryRun
    = ScheduledQueryRun {scheduledQueryRunCreated :: GHC.Integer.Type.Integer,
                         scheduledQueryRunDataLoadTime :: GHC.Integer.Type.Integer,
                         scheduledQueryRunError :: (GHC.Maybe.Maybe SigmaScheduledQueryRunError),
                         scheduledQueryRunFile :: (GHC.Maybe.Maybe ScheduledQueryRunFile'),
                         scheduledQueryRunId :: GHC.Base.String,
                         scheduledQueryRunLivemode :: GHC.Types.Bool,
                         scheduledQueryRunObject :: ScheduledQueryRunObject',
                         scheduledQueryRunResultAvailableUntil :: GHC.Integer.Type.Integer,
                         scheduledQueryRunSql :: GHC.Base.String,
                         scheduledQueryRunStatus :: GHC.Base.String,
                         scheduledQueryRunTitle :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ScheduledQueryRunFile'
    = ScheduledQueryRunFile' {scheduledQueryRunFile'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                              scheduledQueryRunFile'Filename :: (GHC.Maybe.Maybe GHC.Base.String),
                              scheduledQueryRunFile'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                              scheduledQueryRunFile'Links :: (GHC.Maybe.Maybe ScheduledQueryRunFile'Links'),
                              scheduledQueryRunFile'Object :: (GHC.Maybe.Maybe ScheduledQueryRunFile'Object'),
                              scheduledQueryRunFile'Purpose :: (GHC.Maybe.Maybe GHC.Base.String),
                              scheduledQueryRunFile'Size :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                              scheduledQueryRunFile'Title :: (GHC.Maybe.Maybe GHC.Base.String),
                              scheduledQueryRunFile'Type :: (GHC.Maybe.Maybe GHC.Base.String),
                              scheduledQueryRunFile'Url :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ScheduledQueryRunFile'Links'
    = ScheduledQueryRunFile'Links' {scheduledQueryRunFile'Links'Data :: ([] FileLink),
                                    scheduledQueryRunFile'Links'HasMore :: GHC.Types.Bool,
                                    scheduledQueryRunFile'Links'Object :: ScheduledQueryRunFile'Links'Object',
                                    scheduledQueryRunFile'Links'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ScheduledQueryRunFile'Links'Object'
    = ScheduledQueryRunFile'Links'Object'EnumOther Data.Aeson.Types.Internal.Value
    | ScheduledQueryRunFile'Links'Object'EnumTyped GHC.Base.String
    | ScheduledQueryRunFile'Links'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ScheduledQueryRunFile'Links'Object'
    where toJSON (ScheduledQueryRunFile'Links'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ScheduledQueryRunFile'Links'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ScheduledQueryRunFile'Links'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON ScheduledQueryRunFile'Links'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then ScheduledQueryRunFile'Links'Object'EnumStringList
                                          else ScheduledQueryRunFile'Links'Object'EnumOther val)
instance Data.Aeson.ToJSON ScheduledQueryRunFile'Links'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (scheduledQueryRunFile'Links'Data obj) : (Data.Aeson..=) "has_more" (scheduledQueryRunFile'Links'HasMore obj) : (Data.Aeson..=) "object" (scheduledQueryRunFile'Links'Object obj) : (Data.Aeson..=) "url" (scheduledQueryRunFile'Links'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (scheduledQueryRunFile'Links'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (scheduledQueryRunFile'Links'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (scheduledQueryRunFile'Links'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (scheduledQueryRunFile'Links'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ScheduledQueryRunFile'Links'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ScheduledQueryRunFile'Links'" (\obj -> (((GHC.Base.pure ScheduledQueryRunFile'Links' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data ScheduledQueryRunFile'Object'
    = ScheduledQueryRunFile'Object'EnumOther Data.Aeson.Types.Internal.Value
    | ScheduledQueryRunFile'Object'EnumTyped GHC.Base.String
    | ScheduledQueryRunFile'Object'EnumStringFile
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ScheduledQueryRunFile'Object'
    where toJSON (ScheduledQueryRunFile'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ScheduledQueryRunFile'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ScheduledQueryRunFile'Object'EnumStringFile) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "file"
instance Data.Aeson.FromJSON ScheduledQueryRunFile'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "file")
                                          then ScheduledQueryRunFile'Object'EnumStringFile
                                          else ScheduledQueryRunFile'Object'EnumOther val)
instance Data.Aeson.ToJSON ScheduledQueryRunFile'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (scheduledQueryRunFile'Created obj) : (Data.Aeson..=) "filename" (scheduledQueryRunFile'Filename obj) : (Data.Aeson..=) "id" (scheduledQueryRunFile'Id obj) : (Data.Aeson..=) "links" (scheduledQueryRunFile'Links obj) : (Data.Aeson..=) "object" (scheduledQueryRunFile'Object obj) : (Data.Aeson..=) "purpose" (scheduledQueryRunFile'Purpose obj) : (Data.Aeson..=) "size" (scheduledQueryRunFile'Size obj) : (Data.Aeson..=) "title" (scheduledQueryRunFile'Title obj) : (Data.Aeson..=) "type" (scheduledQueryRunFile'Type obj) : (Data.Aeson..=) "url" (scheduledQueryRunFile'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (scheduledQueryRunFile'Created obj) GHC.Base.<> ((Data.Aeson..=) "filename" (scheduledQueryRunFile'Filename obj) GHC.Base.<> ((Data.Aeson..=) "id" (scheduledQueryRunFile'Id obj) GHC.Base.<> ((Data.Aeson..=) "links" (scheduledQueryRunFile'Links obj) GHC.Base.<> ((Data.Aeson..=) "object" (scheduledQueryRunFile'Object obj) GHC.Base.<> ((Data.Aeson..=) "purpose" (scheduledQueryRunFile'Purpose obj) GHC.Base.<> ((Data.Aeson..=) "size" (scheduledQueryRunFile'Size obj) GHC.Base.<> ((Data.Aeson..=) "title" (scheduledQueryRunFile'Title obj) GHC.Base.<> ((Data.Aeson..=) "type" (scheduledQueryRunFile'Type obj) GHC.Base.<> (Data.Aeson..=) "url" (scheduledQueryRunFile'Url obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ScheduledQueryRunFile'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ScheduledQueryRunFile'" (\obj -> (((((((((GHC.Base.pure ScheduledQueryRunFile' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filename")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "links")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "purpose")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))
data ScheduledQueryRunObject'
    = ScheduledQueryRunObject'EnumOther Data.Aeson.Types.Internal.Value
    | ScheduledQueryRunObject'EnumTyped GHC.Base.String
    | ScheduledQueryRunObject'EnumStringScheduledQueryRun
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ScheduledQueryRunObject'
    where toJSON (ScheduledQueryRunObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ScheduledQueryRunObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ScheduledQueryRunObject'EnumStringScheduledQueryRun) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "scheduled_query_run"
instance Data.Aeson.FromJSON ScheduledQueryRunObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "scheduled_query_run")
                                          then ScheduledQueryRunObject'EnumStringScheduledQueryRun
                                          else ScheduledQueryRunObject'EnumOther val)
instance Data.Aeson.ToJSON ScheduledQueryRun
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (scheduledQueryRunCreated obj) : (Data.Aeson..=) "data_load_time" (scheduledQueryRunDataLoadTime obj) : (Data.Aeson..=) "error" (scheduledQueryRunError obj) : (Data.Aeson..=) "file" (scheduledQueryRunFile obj) : (Data.Aeson..=) "id" (scheduledQueryRunId obj) : (Data.Aeson..=) "livemode" (scheduledQueryRunLivemode obj) : (Data.Aeson..=) "object" (scheduledQueryRunObject obj) : (Data.Aeson..=) "result_available_until" (scheduledQueryRunResultAvailableUntil obj) : (Data.Aeson..=) "sql" (scheduledQueryRunSql obj) : (Data.Aeson..=) "status" (scheduledQueryRunStatus obj) : (Data.Aeson..=) "title" (scheduledQueryRunTitle obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (scheduledQueryRunCreated obj) GHC.Base.<> ((Data.Aeson..=) "data_load_time" (scheduledQueryRunDataLoadTime obj) GHC.Base.<> ((Data.Aeson..=) "error" (scheduledQueryRunError obj) GHC.Base.<> ((Data.Aeson..=) "file" (scheduledQueryRunFile obj) GHC.Base.<> ((Data.Aeson..=) "id" (scheduledQueryRunId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (scheduledQueryRunLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (scheduledQueryRunObject obj) GHC.Base.<> ((Data.Aeson..=) "result_available_until" (scheduledQueryRunResultAvailableUntil obj) GHC.Base.<> ((Data.Aeson..=) "sql" (scheduledQueryRunSql obj) GHC.Base.<> ((Data.Aeson..=) "status" (scheduledQueryRunStatus obj) GHC.Base.<> (Data.Aeson..=) "title" (scheduledQueryRunTitle obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ScheduledQueryRun
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ScheduledQueryRun" (\obj -> ((((((((((GHC.Base.pure ScheduledQueryRun GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data_load_time")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "file")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "result_available_until")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sql")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "title"))
data SetupIntent
    = SetupIntent {setupIntentApplication :: (GHC.Maybe.Maybe SetupIntentApplication'Variants),
                   setupIntentCancellationReason :: (GHC.Maybe.Maybe SetupIntentCancellationReason'),
                   setupIntentClientSecret :: (GHC.Maybe.Maybe GHC.Base.String),
                   setupIntentCreated :: GHC.Integer.Type.Integer,
                   setupIntentCustomer :: (GHC.Maybe.Maybe SetupIntentCustomer'Variants),
                   setupIntentDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                   setupIntentId :: GHC.Base.String,
                   setupIntentLastSetupError :: (GHC.Maybe.Maybe SetupIntentLastSetupError'),
                   setupIntentLivemode :: GHC.Types.Bool,
                   setupIntentMandate :: (GHC.Maybe.Maybe SetupIntentMandate'Variants),
                   setupIntentMetadata :: (GHC.Maybe.Maybe SetupIntentMetadata'),
                   setupIntentNextAction :: (GHC.Maybe.Maybe SetupIntentNextAction'),
                   setupIntentObject :: SetupIntentObject',
                   setupIntentOnBehalfOf :: (GHC.Maybe.Maybe SetupIntentOnBehalfOf'Variants),
                   setupIntentPaymentMethod :: (GHC.Maybe.Maybe SetupIntentPaymentMethod'Variants),
                   setupIntentPaymentMethodOptions :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'),
                   setupIntentPaymentMethodTypes :: ([] GHC.Base.String),
                   setupIntentSingleUseMandate :: (GHC.Maybe.Maybe SetupIntentSingleUseMandate'Variants),
                   setupIntentStatus :: SetupIntentStatus',
                   setupIntentUsage :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SetupIntentApplication'Variants
    = SetupIntentApplication'Variant1 Application
    | SetupIntentApplication'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SetupIntentApplication'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SetupIntentApplication'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SetupIntentCancellationReason'
    = SetupIntentCancellationReason'EnumOther Data.Aeson.Types.Internal.Value
    | SetupIntentCancellationReason'EnumTyped GHC.Base.String
    | SetupIntentCancellationReason'EnumStringAbandoned
    | SetupIntentCancellationReason'EnumStringDuplicate
    | SetupIntentCancellationReason'EnumStringRequestedByCustomer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentCancellationReason'
    where toJSON (SetupIntentCancellationReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentCancellationReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentCancellationReason'EnumStringAbandoned) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "abandoned"
          toJSON (SetupIntentCancellationReason'EnumStringDuplicate) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duplicate"
          toJSON (SetupIntentCancellationReason'EnumStringRequestedByCustomer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requested_by_customer"
instance Data.Aeson.FromJSON SetupIntentCancellationReason'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "abandoned")
                                          then SetupIntentCancellationReason'EnumStringAbandoned
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "duplicate")
                                                then SetupIntentCancellationReason'EnumStringDuplicate
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requested_by_customer")
                                                      then SetupIntentCancellationReason'EnumStringRequestedByCustomer
                                                      else SetupIntentCancellationReason'EnumOther val)
data SetupIntentCustomer'Variants
    = SetupIntentCustomer'Variant1 Customer
    | SetupIntentCustomer'Variant2 DeletedCustomer
    | SetupIntentCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SetupIntentCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SetupIntentCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SetupIntentLastSetupError'
    = SetupIntentLastSetupError' {setupIntentLastSetupError'Charge :: (GHC.Maybe.Maybe GHC.Base.String),
                                  setupIntentLastSetupError'Code :: (GHC.Maybe.Maybe GHC.Base.String),
                                  setupIntentLastSetupError'DeclineCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                  setupIntentLastSetupError'DocUrl :: (GHC.Maybe.Maybe GHC.Base.String),
                                  setupIntentLastSetupError'Message :: (GHC.Maybe.Maybe GHC.Base.String),
                                  setupIntentLastSetupError'Param :: (GHC.Maybe.Maybe GHC.Base.String),
                                  setupIntentLastSetupError'PaymentIntent :: (GHC.Maybe.Maybe PaymentIntent),
                                  setupIntentLastSetupError'PaymentMethod :: (GHC.Maybe.Maybe PaymentMethod),
                                  setupIntentLastSetupError'SetupIntent :: (GHC.Maybe.Maybe SetupIntent),
                                  setupIntentLastSetupError'Source :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'),
                                  setupIntentLastSetupError'Type :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Type')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SetupIntentLastSetupError'Source'
    = SetupIntentLastSetupError'Source' {setupIntentLastSetupError'Source'Account :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'Account'Variants),
                                         setupIntentLastSetupError'Source'AccountHolderName :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'AccountHolderType :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'AchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
                                         setupIntentLastSetupError'Source'AchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
                                         setupIntentLastSetupError'Source'AddressCity :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'AddressCountry :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'AddressLine1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'AddressLine1Check :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'AddressLine2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'AddressState :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'AddressZip :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'AddressZipCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Alipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
                                         setupIntentLastSetupError'Source'Amount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                         setupIntentLastSetupError'Source'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([] SetupIntentLastSetupError'Source'AvailablePayoutMethods')),
                                         setupIntentLastSetupError'Source'Bancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
                                         setupIntentLastSetupError'Source'BankName :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Brand :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Card :: (GHC.Maybe.Maybe SourceTypeCard),
                                         setupIntentLastSetupError'Source'CardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
                                         setupIntentLastSetupError'Source'ClientSecret :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'CodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
                                         setupIntentLastSetupError'Source'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                         setupIntentLastSetupError'Source'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Customer :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'Customer'Variants),
                                         setupIntentLastSetupError'Source'CvcCheck :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
                                         setupIntentLastSetupError'Source'DynamicLast4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Eps :: (GHC.Maybe.Maybe SourceTypeEps),
                                         setupIntentLastSetupError'Source'ExpMonth :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                         setupIntentLastSetupError'Source'ExpYear :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                         setupIntentLastSetupError'Source'Fingerprint :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Flow :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Funding :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Giropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
                                         setupIntentLastSetupError'Source'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Ideal :: (GHC.Maybe.Maybe SourceTypeIdeal),
                                         setupIntentLastSetupError'Source'Klarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
                                         setupIntentLastSetupError'Source'Last4 :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
                                         setupIntentLastSetupError'Source'Metadata :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'Metadata'),
                                         setupIntentLastSetupError'Source'Multibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
                                         setupIntentLastSetupError'Source'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Object :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'Object'),
                                         setupIntentLastSetupError'Source'Owner :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'Owner'),
                                         setupIntentLastSetupError'Source'P24 :: (GHC.Maybe.Maybe SourceTypeP24),
                                         setupIntentLastSetupError'Source'Receiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
                                         setupIntentLastSetupError'Source'Recipient :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'Recipient'Variants),
                                         setupIntentLastSetupError'Source'Redirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
                                         setupIntentLastSetupError'Source'RoutingNumber :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'SepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
                                         setupIntentLastSetupError'Source'Sofort :: (GHC.Maybe.Maybe SourceTypeSofort),
                                         setupIntentLastSetupError'Source'SourceOrder :: (GHC.Maybe.Maybe SourceOrder),
                                         setupIntentLastSetupError'Source'StatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Status :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'ThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
                                         setupIntentLastSetupError'Source'TokenizationMethod :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Type :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'Type'),
                                         setupIntentLastSetupError'Source'Usage :: (GHC.Maybe.Maybe GHC.Base.String),
                                         setupIntentLastSetupError'Source'Wechat :: (GHC.Maybe.Maybe SourceTypeWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SetupIntentLastSetupError'Source'Account'Variants
    = SetupIntentLastSetupError'Source'Account'Variant1 Account
    | SetupIntentLastSetupError'Source'Account'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'Account'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SetupIntentLastSetupError'Source'Account'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SetupIntentLastSetupError'Source'AvailablePayoutMethods'
    = SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumOther Data.Aeson.Types.Internal.Value
    | SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumTyped GHC.Base.String
    | SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumStringInstant
    | SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumStringStandard
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'AvailablePayoutMethods'
    where toJSON (SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumStringInstant) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant"
          toJSON (SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumStringStandard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard"
instance Data.Aeson.FromJSON SetupIntentLastSetupError'Source'AvailablePayoutMethods'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "instant")
                                          then SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumStringInstant
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "standard")
                                                then SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumStringStandard
                                                else SetupIntentLastSetupError'Source'AvailablePayoutMethods'EnumOther val)
data SetupIntentLastSetupError'Source'Customer'Variants
    = SetupIntentLastSetupError'Source'Customer'Variant1 Customer
    | SetupIntentLastSetupError'Source'Customer'Variant2 DeletedCustomer
    | SetupIntentLastSetupError'Source'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SetupIntentLastSetupError'Source'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SetupIntentLastSetupError'Source'Metadata'
    = SetupIntentLastSetupError'Source'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'Source'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'Source'Metadata'" (\obj -> GHC.Base.pure SetupIntentLastSetupError'Source'Metadata')
data SetupIntentLastSetupError'Source'Object'
    = SetupIntentLastSetupError'Source'Object'EnumOther Data.Aeson.Types.Internal.Value
    | SetupIntentLastSetupError'Source'Object'EnumTyped GHC.Base.String
    | SetupIntentLastSetupError'Source'Object'EnumStringBankAccount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'Object'
    where toJSON (SetupIntentLastSetupError'Source'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentLastSetupError'Source'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentLastSetupError'Source'Object'EnumStringBankAccount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account"
instance Data.Aeson.FromJSON SetupIntentLastSetupError'Source'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bank_account")
                                          then SetupIntentLastSetupError'Source'Object'EnumStringBankAccount
                                          else SetupIntentLastSetupError'Source'Object'EnumOther val)
data SetupIntentLastSetupError'Source'Owner'
    = SetupIntentLastSetupError'Source'Owner' {setupIntentLastSetupError'Source'Owner'Address :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'Owner'Address'),
                                               setupIntentLastSetupError'Source'Owner'Email :: (GHC.Maybe.Maybe GHC.Base.String),
                                               setupIntentLastSetupError'Source'Owner'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                                               setupIntentLastSetupError'Source'Owner'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                                               setupIntentLastSetupError'Source'Owner'VerifiedAddress :: (GHC.Maybe.Maybe SetupIntentLastSetupError'Source'Owner'VerifiedAddress'),
                                               setupIntentLastSetupError'Source'Owner'VerifiedEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                                               setupIntentLastSetupError'Source'Owner'VerifiedName :: (GHC.Maybe.Maybe GHC.Base.String),
                                               setupIntentLastSetupError'Source'Owner'VerifiedPhone :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SetupIntentLastSetupError'Source'Owner'Address'
    = SetupIntentLastSetupError'Source'Owner'Address' {setupIntentLastSetupError'Source'Owner'Address'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                       setupIntentLastSetupError'Source'Owner'Address'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                       setupIntentLastSetupError'Source'Owner'Address'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                       setupIntentLastSetupError'Source'Owner'Address'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                       setupIntentLastSetupError'Source'Owner'Address'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                       setupIntentLastSetupError'Source'Owner'Address'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'Owner'Address'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (setupIntentLastSetupError'Source'Owner'Address'City obj) : (Data.Aeson..=) "country" (setupIntentLastSetupError'Source'Owner'Address'Country obj) : (Data.Aeson..=) "line1" (setupIntentLastSetupError'Source'Owner'Address'Line1 obj) : (Data.Aeson..=) "line2" (setupIntentLastSetupError'Source'Owner'Address'Line2 obj) : (Data.Aeson..=) "postal_code" (setupIntentLastSetupError'Source'Owner'Address'PostalCode obj) : (Data.Aeson..=) "state" (setupIntentLastSetupError'Source'Owner'Address'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (setupIntentLastSetupError'Source'Owner'Address'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (setupIntentLastSetupError'Source'Owner'Address'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (setupIntentLastSetupError'Source'Owner'Address'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (setupIntentLastSetupError'Source'Owner'Address'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (setupIntentLastSetupError'Source'Owner'Address'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (setupIntentLastSetupError'Source'Owner'Address'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'Source'Owner'Address'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'Source'Owner'Address'" (\obj -> (((((GHC.Base.pure SetupIntentLastSetupError'Source'Owner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data SetupIntentLastSetupError'Source'Owner'VerifiedAddress'
    = SetupIntentLastSetupError'Source'Owner'VerifiedAddress' {setupIntentLastSetupError'Source'Owner'VerifiedAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               setupIntentLastSetupError'Source'Owner'VerifiedAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               setupIntentLastSetupError'Source'Owner'VerifiedAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               setupIntentLastSetupError'Source'Owner'VerifiedAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               setupIntentLastSetupError'Source'Owner'VerifiedAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                                               setupIntentLastSetupError'Source'Owner'VerifiedAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'Owner'VerifiedAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'City obj) : (Data.Aeson..=) "country" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'Country obj) : (Data.Aeson..=) "line1" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'Line1 obj) : (Data.Aeson..=) "line2" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'PostalCode obj) : (Data.Aeson..=) "state" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (setupIntentLastSetupError'Source'Owner'VerifiedAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'Source'Owner'VerifiedAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'Source'Owner'VerifiedAddress'" (\obj -> (((((GHC.Base.pure SetupIntentLastSetupError'Source'Owner'VerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'Owner'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (setupIntentLastSetupError'Source'Owner'Address obj) : (Data.Aeson..=) "email" (setupIntentLastSetupError'Source'Owner'Email obj) : (Data.Aeson..=) "name" (setupIntentLastSetupError'Source'Owner'Name obj) : (Data.Aeson..=) "phone" (setupIntentLastSetupError'Source'Owner'Phone obj) : (Data.Aeson..=) "verified_address" (setupIntentLastSetupError'Source'Owner'VerifiedAddress obj) : (Data.Aeson..=) "verified_email" (setupIntentLastSetupError'Source'Owner'VerifiedEmail obj) : (Data.Aeson..=) "verified_name" (setupIntentLastSetupError'Source'Owner'VerifiedName obj) : (Data.Aeson..=) "verified_phone" (setupIntentLastSetupError'Source'Owner'VerifiedPhone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (setupIntentLastSetupError'Source'Owner'Address obj) GHC.Base.<> ((Data.Aeson..=) "email" (setupIntentLastSetupError'Source'Owner'Email obj) GHC.Base.<> ((Data.Aeson..=) "name" (setupIntentLastSetupError'Source'Owner'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (setupIntentLastSetupError'Source'Owner'Phone obj) GHC.Base.<> ((Data.Aeson..=) "verified_address" (setupIntentLastSetupError'Source'Owner'VerifiedAddress obj) GHC.Base.<> ((Data.Aeson..=) "verified_email" (setupIntentLastSetupError'Source'Owner'VerifiedEmail obj) GHC.Base.<> ((Data.Aeson..=) "verified_name" (setupIntentLastSetupError'Source'Owner'VerifiedName obj) GHC.Base.<> (Data.Aeson..=) "verified_phone" (setupIntentLastSetupError'Source'Owner'VerifiedPhone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'Source'Owner'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'Source'Owner'" (\obj -> (((((((GHC.Base.pure SetupIntentLastSetupError'Source'Owner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))
data SetupIntentLastSetupError'Source'Recipient'Variants
    = SetupIntentLastSetupError'Source'Recipient'Variant1 Recipient
    | SetupIntentLastSetupError'Source'Recipient'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'Recipient'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SetupIntentLastSetupError'Source'Recipient'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SetupIntentLastSetupError'Source'Type'
    = SetupIntentLastSetupError'Source'Type'EnumOther Data.Aeson.Types.Internal.Value
    | SetupIntentLastSetupError'Source'Type'EnumTyped GHC.Base.String
    | SetupIntentLastSetupError'Source'Type'EnumStringAchCreditTransfer
    | SetupIntentLastSetupError'Source'Type'EnumStringAchDebit
    | SetupIntentLastSetupError'Source'Type'EnumStringAlipay
    | SetupIntentLastSetupError'Source'Type'EnumStringBancontact
    | SetupIntentLastSetupError'Source'Type'EnumStringCard
    | SetupIntentLastSetupError'Source'Type'EnumStringCardPresent
    | SetupIntentLastSetupError'Source'Type'EnumStringEps
    | SetupIntentLastSetupError'Source'Type'EnumStringGiropay
    | SetupIntentLastSetupError'Source'Type'EnumStringIdeal
    | SetupIntentLastSetupError'Source'Type'EnumStringKlarna
    | SetupIntentLastSetupError'Source'Type'EnumStringMultibanco
    | SetupIntentLastSetupError'Source'Type'EnumStringP24
    | SetupIntentLastSetupError'Source'Type'EnumStringSepaDebit
    | SetupIntentLastSetupError'Source'Type'EnumStringSofort
    | SetupIntentLastSetupError'Source'Type'EnumStringThreeDSecure
    | SetupIntentLastSetupError'Source'Type'EnumStringWechat
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'Type'
    where toJSON (SetupIntentLastSetupError'Source'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentLastSetupError'Source'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringAchCreditTransfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringAchDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringAlipay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringBancontact) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringCard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringCardPresent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringEps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringGiropay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringIdeal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringKlarna) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringMultibanco) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringP24) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringSepaDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringSofort) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringThreeDSecure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure"
          toJSON (SetupIntentLastSetupError'Source'Type'EnumStringWechat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat"
instance Data.Aeson.FromJSON SetupIntentLastSetupError'Source'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer")
                                          then SetupIntentLastSetupError'Source'Type'EnumStringAchCreditTransfer
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit")
                                                then SetupIntentLastSetupError'Source'Type'EnumStringAchDebit
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay")
                                                      then SetupIntentLastSetupError'Source'Type'EnumStringAlipay
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact")
                                                            then SetupIntentLastSetupError'Source'Type'EnumStringBancontact
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card")
                                                                  then SetupIntentLastSetupError'Source'Type'EnumStringCard
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present")
                                                                        then SetupIntentLastSetupError'Source'Type'EnumStringCardPresent
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps")
                                                                              then SetupIntentLastSetupError'Source'Type'EnumStringEps
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay")
                                                                                    then SetupIntentLastSetupError'Source'Type'EnumStringGiropay
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal")
                                                                                          then SetupIntentLastSetupError'Source'Type'EnumStringIdeal
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna")
                                                                                                then SetupIntentLastSetupError'Source'Type'EnumStringKlarna
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco")
                                                                                                      then SetupIntentLastSetupError'Source'Type'EnumStringMultibanco
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24")
                                                                                                            then SetupIntentLastSetupError'Source'Type'EnumStringP24
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit")
                                                                                                                  then SetupIntentLastSetupError'Source'Type'EnumStringSepaDebit
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort")
                                                                                                                        then SetupIntentLastSetupError'Source'Type'EnumStringSofort
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure")
                                                                                                                              then SetupIntentLastSetupError'Source'Type'EnumStringThreeDSecure
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat")
                                                                                                                                    then SetupIntentLastSetupError'Source'Type'EnumStringWechat
                                                                                                                                    else SetupIntentLastSetupError'Source'Type'EnumOther val)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Source'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (setupIntentLastSetupError'Source'Account obj) : (Data.Aeson..=) "account_holder_name" (setupIntentLastSetupError'Source'AccountHolderName obj) : (Data.Aeson..=) "account_holder_type" (setupIntentLastSetupError'Source'AccountHolderType obj) : (Data.Aeson..=) "ach_credit_transfer" (setupIntentLastSetupError'Source'AchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (setupIntentLastSetupError'Source'AchDebit obj) : (Data.Aeson..=) "address_city" (setupIntentLastSetupError'Source'AddressCity obj) : (Data.Aeson..=) "address_country" (setupIntentLastSetupError'Source'AddressCountry obj) : (Data.Aeson..=) "address_line1" (setupIntentLastSetupError'Source'AddressLine1 obj) : (Data.Aeson..=) "address_line1_check" (setupIntentLastSetupError'Source'AddressLine1Check obj) : (Data.Aeson..=) "address_line2" (setupIntentLastSetupError'Source'AddressLine2 obj) : (Data.Aeson..=) "address_state" (setupIntentLastSetupError'Source'AddressState obj) : (Data.Aeson..=) "address_zip" (setupIntentLastSetupError'Source'AddressZip obj) : (Data.Aeson..=) "address_zip_check" (setupIntentLastSetupError'Source'AddressZipCheck obj) : (Data.Aeson..=) "alipay" (setupIntentLastSetupError'Source'Alipay obj) : (Data.Aeson..=) "amount" (setupIntentLastSetupError'Source'Amount obj) : (Data.Aeson..=) "available_payout_methods" (setupIntentLastSetupError'Source'AvailablePayoutMethods obj) : (Data.Aeson..=) "bancontact" (setupIntentLastSetupError'Source'Bancontact obj) : (Data.Aeson..=) "bank_name" (setupIntentLastSetupError'Source'BankName obj) : (Data.Aeson..=) "brand" (setupIntentLastSetupError'Source'Brand obj) : (Data.Aeson..=) "card" (setupIntentLastSetupError'Source'Card obj) : (Data.Aeson..=) "card_present" (setupIntentLastSetupError'Source'CardPresent obj) : (Data.Aeson..=) "client_secret" (setupIntentLastSetupError'Source'ClientSecret obj) : (Data.Aeson..=) "code_verification" (setupIntentLastSetupError'Source'CodeVerification obj) : (Data.Aeson..=) "country" (setupIntentLastSetupError'Source'Country obj) : (Data.Aeson..=) "created" (setupIntentLastSetupError'Source'Created obj) : (Data.Aeson..=) "currency" (setupIntentLastSetupError'Source'Currency obj) : (Data.Aeson..=) "customer" (setupIntentLastSetupError'Source'Customer obj) : (Data.Aeson..=) "cvc_check" (setupIntentLastSetupError'Source'CvcCheck obj) : (Data.Aeson..=) "default_for_currency" (setupIntentLastSetupError'Source'DefaultForCurrency obj) : (Data.Aeson..=) "dynamic_last4" (setupIntentLastSetupError'Source'DynamicLast4 obj) : (Data.Aeson..=) "eps" (setupIntentLastSetupError'Source'Eps obj) : (Data.Aeson..=) "exp_month" (setupIntentLastSetupError'Source'ExpMonth obj) : (Data.Aeson..=) "exp_year" (setupIntentLastSetupError'Source'ExpYear obj) : (Data.Aeson..=) "fingerprint" (setupIntentLastSetupError'Source'Fingerprint obj) : (Data.Aeson..=) "flow" (setupIntentLastSetupError'Source'Flow obj) : (Data.Aeson..=) "funding" (setupIntentLastSetupError'Source'Funding obj) : (Data.Aeson..=) "giropay" (setupIntentLastSetupError'Source'Giropay obj) : (Data.Aeson..=) "id" (setupIntentLastSetupError'Source'Id obj) : (Data.Aeson..=) "ideal" (setupIntentLastSetupError'Source'Ideal obj) : (Data.Aeson..=) "klarna" (setupIntentLastSetupError'Source'Klarna obj) : (Data.Aeson..=) "last4" (setupIntentLastSetupError'Source'Last4 obj) : (Data.Aeson..=) "livemode" (setupIntentLastSetupError'Source'Livemode obj) : (Data.Aeson..=) "metadata" (setupIntentLastSetupError'Source'Metadata obj) : (Data.Aeson..=) "multibanco" (setupIntentLastSetupError'Source'Multibanco obj) : (Data.Aeson..=) "name" (setupIntentLastSetupError'Source'Name obj) : (Data.Aeson..=) "object" (setupIntentLastSetupError'Source'Object obj) : (Data.Aeson..=) "owner" (setupIntentLastSetupError'Source'Owner obj) : (Data.Aeson..=) "p24" (setupIntentLastSetupError'Source'P24 obj) : (Data.Aeson..=) "receiver" (setupIntentLastSetupError'Source'Receiver obj) : (Data.Aeson..=) "recipient" (setupIntentLastSetupError'Source'Recipient obj) : (Data.Aeson..=) "redirect" (setupIntentLastSetupError'Source'Redirect obj) : (Data.Aeson..=) "routing_number" (setupIntentLastSetupError'Source'RoutingNumber obj) : (Data.Aeson..=) "sepa_debit" (setupIntentLastSetupError'Source'SepaDebit obj) : (Data.Aeson..=) "sofort" (setupIntentLastSetupError'Source'Sofort obj) : (Data.Aeson..=) "source_order" (setupIntentLastSetupError'Source'SourceOrder obj) : (Data.Aeson..=) "statement_descriptor" (setupIntentLastSetupError'Source'StatementDescriptor obj) : (Data.Aeson..=) "status" (setupIntentLastSetupError'Source'Status obj) : (Data.Aeson..=) "three_d_secure" (setupIntentLastSetupError'Source'ThreeDSecure obj) : (Data.Aeson..=) "tokenization_method" (setupIntentLastSetupError'Source'TokenizationMethod obj) : (Data.Aeson..=) "type" (setupIntentLastSetupError'Source'Type obj) : (Data.Aeson..=) "usage" (setupIntentLastSetupError'Source'Usage obj) : (Data.Aeson..=) "wechat" (setupIntentLastSetupError'Source'Wechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (setupIntentLastSetupError'Source'Account obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_name" (setupIntentLastSetupError'Source'AccountHolderName obj) GHC.Base.<> ((Data.Aeson..=) "account_holder_type" (setupIntentLastSetupError'Source'AccountHolderType obj) GHC.Base.<> ((Data.Aeson..=) "ach_credit_transfer" (setupIntentLastSetupError'Source'AchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (setupIntentLastSetupError'Source'AchDebit obj) GHC.Base.<> ((Data.Aeson..=) "address_city" (setupIntentLastSetupError'Source'AddressCity obj) GHC.Base.<> ((Data.Aeson..=) "address_country" (setupIntentLastSetupError'Source'AddressCountry obj) GHC.Base.<> ((Data.Aeson..=) "address_line1" (setupIntentLastSetupError'Source'AddressLine1 obj) GHC.Base.<> ((Data.Aeson..=) "address_line1_check" (setupIntentLastSetupError'Source'AddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_line2" (setupIntentLastSetupError'Source'AddressLine2 obj) GHC.Base.<> ((Data.Aeson..=) "address_state" (setupIntentLastSetupError'Source'AddressState obj) GHC.Base.<> ((Data.Aeson..=) "address_zip" (setupIntentLastSetupError'Source'AddressZip obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (setupIntentLastSetupError'Source'AddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (setupIntentLastSetupError'Source'Alipay obj) GHC.Base.<> ((Data.Aeson..=) "amount" (setupIntentLastSetupError'Source'Amount obj) GHC.Base.<> ((Data.Aeson..=) "available_payout_methods" (setupIntentLastSetupError'Source'AvailablePayoutMethods obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (setupIntentLastSetupError'Source'Bancontact obj) GHC.Base.<> ((Data.Aeson..=) "bank_name" (setupIntentLastSetupError'Source'BankName obj) GHC.Base.<> ((Data.Aeson..=) "brand" (setupIntentLastSetupError'Source'Brand obj) GHC.Base.<> ((Data.Aeson..=) "card" (setupIntentLastSetupError'Source'Card obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (setupIntentLastSetupError'Source'CardPresent obj) GHC.Base.<> ((Data.Aeson..=) "client_secret" (setupIntentLastSetupError'Source'ClientSecret obj) GHC.Base.<> ((Data.Aeson..=) "code_verification" (setupIntentLastSetupError'Source'CodeVerification obj) GHC.Base.<> ((Data.Aeson..=) "country" (setupIntentLastSetupError'Source'Country obj) GHC.Base.<> ((Data.Aeson..=) "created" (setupIntentLastSetupError'Source'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (setupIntentLastSetupError'Source'Currency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (setupIntentLastSetupError'Source'Customer obj) GHC.Base.<> ((Data.Aeson..=) "cvc_check" (setupIntentLastSetupError'Source'CvcCheck obj) GHC.Base.<> ((Data.Aeson..=) "default_for_currency" (setupIntentLastSetupError'Source'DefaultForCurrency obj) GHC.Base.<> ((Data.Aeson..=) "dynamic_last4" (setupIntentLastSetupError'Source'DynamicLast4 obj) GHC.Base.<> ((Data.Aeson..=) "eps" (setupIntentLastSetupError'Source'Eps obj) GHC.Base.<> ((Data.Aeson..=) "exp_month" (setupIntentLastSetupError'Source'ExpMonth obj) GHC.Base.<> ((Data.Aeson..=) "exp_year" (setupIntentLastSetupError'Source'ExpYear obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (setupIntentLastSetupError'Source'Fingerprint obj) GHC.Base.<> ((Data.Aeson..=) "flow" (setupIntentLastSetupError'Source'Flow obj) GHC.Base.<> ((Data.Aeson..=) "funding" (setupIntentLastSetupError'Source'Funding obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (setupIntentLastSetupError'Source'Giropay obj) GHC.Base.<> ((Data.Aeson..=) "id" (setupIntentLastSetupError'Source'Id obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (setupIntentLastSetupError'Source'Ideal obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (setupIntentLastSetupError'Source'Klarna obj) GHC.Base.<> ((Data.Aeson..=) "last4" (setupIntentLastSetupError'Source'Last4 obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (setupIntentLastSetupError'Source'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (setupIntentLastSetupError'Source'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (setupIntentLastSetupError'Source'Multibanco obj) GHC.Base.<> ((Data.Aeson..=) "name" (setupIntentLastSetupError'Source'Name obj) GHC.Base.<> ((Data.Aeson..=) "object" (setupIntentLastSetupError'Source'Object obj) GHC.Base.<> ((Data.Aeson..=) "owner" (setupIntentLastSetupError'Source'Owner obj) GHC.Base.<> ((Data.Aeson..=) "p24" (setupIntentLastSetupError'Source'P24 obj) GHC.Base.<> ((Data.Aeson..=) "receiver" (setupIntentLastSetupError'Source'Receiver obj) GHC.Base.<> ((Data.Aeson..=) "recipient" (setupIntentLastSetupError'Source'Recipient obj) GHC.Base.<> ((Data.Aeson..=) "redirect" (setupIntentLastSetupError'Source'Redirect obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (setupIntentLastSetupError'Source'RoutingNumber obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (setupIntentLastSetupError'Source'SepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (setupIntentLastSetupError'Source'Sofort obj) GHC.Base.<> ((Data.Aeson..=) "source_order" (setupIntentLastSetupError'Source'SourceOrder obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (setupIntentLastSetupError'Source'StatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (setupIntentLastSetupError'Source'Status obj) GHC.Base.<> ((Data.Aeson..=) "three_d_secure" (setupIntentLastSetupError'Source'ThreeDSecure obj) GHC.Base.<> ((Data.Aeson..=) "tokenization_method" (setupIntentLastSetupError'Source'TokenizationMethod obj) GHC.Base.<> ((Data.Aeson..=) "type" (setupIntentLastSetupError'Source'Type obj) GHC.Base.<> ((Data.Aeson..=) "usage" (setupIntentLastSetupError'Source'Usage obj) GHC.Base.<> (Data.Aeson..=) "wechat" (setupIntentLastSetupError'Source'Wechat obj))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'Source'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'Source'" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure SetupIntentLastSetupError'Source' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
data SetupIntentLastSetupError'Type'
    = SetupIntentLastSetupError'Type'EnumOther Data.Aeson.Types.Internal.Value
    | SetupIntentLastSetupError'Type'EnumTyped GHC.Base.String
    | SetupIntentLastSetupError'Type'EnumStringApiConnectionError
    | SetupIntentLastSetupError'Type'EnumStringApiError
    | SetupIntentLastSetupError'Type'EnumStringAuthenticationError
    | SetupIntentLastSetupError'Type'EnumStringCardError
    | SetupIntentLastSetupError'Type'EnumStringIdempotencyError
    | SetupIntentLastSetupError'Type'EnumStringInvalidRequestError
    | SetupIntentLastSetupError'Type'EnumStringRateLimitError
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'Type'
    where toJSON (SetupIntentLastSetupError'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentLastSetupError'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentLastSetupError'Type'EnumStringApiConnectionError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_connection_error"
          toJSON (SetupIntentLastSetupError'Type'EnumStringApiError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_error"
          toJSON (SetupIntentLastSetupError'Type'EnumStringAuthenticationError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authentication_error"
          toJSON (SetupIntentLastSetupError'Type'EnumStringCardError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_error"
          toJSON (SetupIntentLastSetupError'Type'EnumStringIdempotencyError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "idempotency_error"
          toJSON (SetupIntentLastSetupError'Type'EnumStringInvalidRequestError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invalid_request_error"
          toJSON (SetupIntentLastSetupError'Type'EnumStringRateLimitError) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "rate_limit_error"
instance Data.Aeson.FromJSON SetupIntentLastSetupError'Type'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_connection_error")
                                          then SetupIntentLastSetupError'Type'EnumStringApiConnectionError
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "api_error")
                                                then SetupIntentLastSetupError'Type'EnumStringApiError
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "authentication_error")
                                                      then SetupIntentLastSetupError'Type'EnumStringAuthenticationError
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_error")
                                                            then SetupIntentLastSetupError'Type'EnumStringCardError
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "idempotency_error")
                                                                  then SetupIntentLastSetupError'Type'EnumStringIdempotencyError
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "invalid_request_error")
                                                                        then SetupIntentLastSetupError'Type'EnumStringInvalidRequestError
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "rate_limit_error")
                                                                              then SetupIntentLastSetupError'Type'EnumStringRateLimitError
                                                                              else SetupIntentLastSetupError'Type'EnumOther val)
instance Data.Aeson.ToJSON SetupIntentLastSetupError'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "charge" (setupIntentLastSetupError'Charge obj) : (Data.Aeson..=) "code" (setupIntentLastSetupError'Code obj) : (Data.Aeson..=) "decline_code" (setupIntentLastSetupError'DeclineCode obj) : (Data.Aeson..=) "doc_url" (setupIntentLastSetupError'DocUrl obj) : (Data.Aeson..=) "message" (setupIntentLastSetupError'Message obj) : (Data.Aeson..=) "param" (setupIntentLastSetupError'Param obj) : (Data.Aeson..=) "payment_intent" (setupIntentLastSetupError'PaymentIntent obj) : (Data.Aeson..=) "payment_method" (setupIntentLastSetupError'PaymentMethod obj) : (Data.Aeson..=) "setup_intent" (setupIntentLastSetupError'SetupIntent obj) : (Data.Aeson..=) "source" (setupIntentLastSetupError'Source obj) : (Data.Aeson..=) "type" (setupIntentLastSetupError'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "charge" (setupIntentLastSetupError'Charge obj) GHC.Base.<> ((Data.Aeson..=) "code" (setupIntentLastSetupError'Code obj) GHC.Base.<> ((Data.Aeson..=) "decline_code" (setupIntentLastSetupError'DeclineCode obj) GHC.Base.<> ((Data.Aeson..=) "doc_url" (setupIntentLastSetupError'DocUrl obj) GHC.Base.<> ((Data.Aeson..=) "message" (setupIntentLastSetupError'Message obj) GHC.Base.<> ((Data.Aeson..=) "param" (setupIntentLastSetupError'Param obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (setupIntentLastSetupError'PaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "payment_method" (setupIntentLastSetupError'PaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "setup_intent" (setupIntentLastSetupError'SetupIntent obj) GHC.Base.<> ((Data.Aeson..=) "source" (setupIntentLastSetupError'Source obj) GHC.Base.<> (Data.Aeson..=) "type" (setupIntentLastSetupError'Type obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'" (\obj -> ((((((((((GHC.Base.pure SetupIntentLastSetupError' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "decline_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "doc_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "param")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
data SetupIntentMandate'Variants
    = SetupIntentMandate'Variant1 Mandate
    | SetupIntentMandate'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SetupIntentMandate'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SetupIntentMandate'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SetupIntentMetadata'
    = SetupIntentMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentMetadata'" (\obj -> GHC.Base.pure SetupIntentMetadata')
data SetupIntentNextAction'
    = SetupIntentNextAction' {setupIntentNextAction'RedirectToUrl :: (GHC.Maybe.Maybe SetupIntentNextActionRedirectToUrl),
                              setupIntentNextAction'Type :: (GHC.Maybe.Maybe GHC.Base.String),
                              setupIntentNextAction'UseStripeSdk :: (GHC.Maybe.Maybe SetupIntentNextAction'UseStripeSdk')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SetupIntentNextAction'UseStripeSdk'
    = SetupIntentNextAction'UseStripeSdk' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentNextAction'UseStripeSdk'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentNextAction'UseStripeSdk'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentNextAction'UseStripeSdk'" (\obj -> GHC.Base.pure SetupIntentNextAction'UseStripeSdk')
instance Data.Aeson.ToJSON SetupIntentNextAction'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "redirect_to_url" (setupIntentNextAction'RedirectToUrl obj) : (Data.Aeson..=) "type" (setupIntentNextAction'Type obj) : (Data.Aeson..=) "use_stripe_sdk" (setupIntentNextAction'UseStripeSdk obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "redirect_to_url" (setupIntentNextAction'RedirectToUrl obj) GHC.Base.<> ((Data.Aeson..=) "type" (setupIntentNextAction'Type obj) GHC.Base.<> (Data.Aeson..=) "use_stripe_sdk" (setupIntentNextAction'UseStripeSdk obj)))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentNextAction'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentNextAction'" (\obj -> ((GHC.Base.pure SetupIntentNextAction' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_to_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "use_stripe_sdk"))
data SetupIntentObject'
    = SetupIntentObject'EnumOther Data.Aeson.Types.Internal.Value
    | SetupIntentObject'EnumTyped GHC.Base.String
    | SetupIntentObject'EnumStringSetupIntent
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentObject'
    where toJSON (SetupIntentObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentObject'EnumStringSetupIntent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "setup_intent"
instance Data.Aeson.FromJSON SetupIntentObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "setup_intent")
                                          then SetupIntentObject'EnumStringSetupIntent
                                          else SetupIntentObject'EnumOther val)
data SetupIntentOnBehalfOf'Variants
    = SetupIntentOnBehalfOf'Variant1 Account
    | SetupIntentOnBehalfOf'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SetupIntentOnBehalfOf'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SetupIntentOnBehalfOf'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SetupIntentPaymentMethod'Variants
    = SetupIntentPaymentMethod'Variant1 PaymentMethod
    | SetupIntentPaymentMethod'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SetupIntentPaymentMethod'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SetupIntentPaymentMethod'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SetupIntentPaymentMethodOptions'
    = SetupIntentPaymentMethodOptions' {setupIntentPaymentMethodOptions'Card :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptionsCard)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentPaymentMethodOptions'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "card" (setupIntentPaymentMethodOptions'Card obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "card" (setupIntentPaymentMethodOptions'Card obj))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentPaymentMethodOptions'" (\obj -> GHC.Base.pure SetupIntentPaymentMethodOptions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card"))
data SetupIntentSingleUseMandate'Variants
    = SetupIntentSingleUseMandate'Variant1 Mandate
    | SetupIntentSingleUseMandate'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SetupIntentSingleUseMandate'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SetupIntentSingleUseMandate'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SetupIntentStatus'
    = SetupIntentStatus'EnumOther Data.Aeson.Types.Internal.Value
    | SetupIntentStatus'EnumTyped GHC.Base.String
    | SetupIntentStatus'EnumStringCanceled
    | SetupIntentStatus'EnumStringProcessing
    | SetupIntentStatus'EnumStringRequiresAction
    | SetupIntentStatus'EnumStringRequiresConfirmation
    | SetupIntentStatus'EnumStringRequiresPaymentMethod
    | SetupIntentStatus'EnumStringSucceeded
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SetupIntentStatus'
    where toJSON (SetupIntentStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SetupIntentStatus'EnumStringCanceled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled"
          toJSON (SetupIntentStatus'EnumStringProcessing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "processing"
          toJSON (SetupIntentStatus'EnumStringRequiresAction) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_action"
          toJSON (SetupIntentStatus'EnumStringRequiresConfirmation) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_confirmation"
          toJSON (SetupIntentStatus'EnumStringRequiresPaymentMethod) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_payment_method"
          toJSON (SetupIntentStatus'EnumStringSucceeded) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "succeeded"
instance Data.Aeson.FromJSON SetupIntentStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled")
                                          then SetupIntentStatus'EnumStringCanceled
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "processing")
                                                then SetupIntentStatus'EnumStringProcessing
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_action")
                                                      then SetupIntentStatus'EnumStringRequiresAction
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_confirmation")
                                                            then SetupIntentStatus'EnumStringRequiresConfirmation
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "requires_payment_method")
                                                                  then SetupIntentStatus'EnumStringRequiresPaymentMethod
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "succeeded")
                                                                        then SetupIntentStatus'EnumStringSucceeded
                                                                        else SetupIntentStatus'EnumOther val)
instance Data.Aeson.ToJSON SetupIntent
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "application" (setupIntentApplication obj) : (Data.Aeson..=) "cancellation_reason" (setupIntentCancellationReason obj) : (Data.Aeson..=) "client_secret" (setupIntentClientSecret obj) : (Data.Aeson..=) "created" (setupIntentCreated obj) : (Data.Aeson..=) "customer" (setupIntentCustomer obj) : (Data.Aeson..=) "description" (setupIntentDescription obj) : (Data.Aeson..=) "id" (setupIntentId obj) : (Data.Aeson..=) "last_setup_error" (setupIntentLastSetupError obj) : (Data.Aeson..=) "livemode" (setupIntentLivemode obj) : (Data.Aeson..=) "mandate" (setupIntentMandate obj) : (Data.Aeson..=) "metadata" (setupIntentMetadata obj) : (Data.Aeson..=) "next_action" (setupIntentNextAction obj) : (Data.Aeson..=) "object" (setupIntentObject obj) : (Data.Aeson..=) "on_behalf_of" (setupIntentOnBehalfOf obj) : (Data.Aeson..=) "payment_method" (setupIntentPaymentMethod obj) : (Data.Aeson..=) "payment_method_options" (setupIntentPaymentMethodOptions obj) : (Data.Aeson..=) "payment_method_types" (setupIntentPaymentMethodTypes obj) : (Data.Aeson..=) "single_use_mandate" (setupIntentSingleUseMandate obj) : (Data.Aeson..=) "status" (setupIntentStatus obj) : (Data.Aeson..=) "usage" (setupIntentUsage obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "application" (setupIntentApplication obj) GHC.Base.<> ((Data.Aeson..=) "cancellation_reason" (setupIntentCancellationReason obj) GHC.Base.<> ((Data.Aeson..=) "client_secret" (setupIntentClientSecret obj) GHC.Base.<> ((Data.Aeson..=) "created" (setupIntentCreated obj) GHC.Base.<> ((Data.Aeson..=) "customer" (setupIntentCustomer obj) GHC.Base.<> ((Data.Aeson..=) "description" (setupIntentDescription obj) GHC.Base.<> ((Data.Aeson..=) "id" (setupIntentId obj) GHC.Base.<> ((Data.Aeson..=) "last_setup_error" (setupIntentLastSetupError obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (setupIntentLivemode obj) GHC.Base.<> ((Data.Aeson..=) "mandate" (setupIntentMandate obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (setupIntentMetadata obj) GHC.Base.<> ((Data.Aeson..=) "next_action" (setupIntentNextAction obj) GHC.Base.<> ((Data.Aeson..=) "object" (setupIntentObject obj) GHC.Base.<> ((Data.Aeson..=) "on_behalf_of" (setupIntentOnBehalfOf obj) GHC.Base.<> ((Data.Aeson..=) "payment_method" (setupIntentPaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "payment_method_options" (setupIntentPaymentMethodOptions obj) GHC.Base.<> ((Data.Aeson..=) "payment_method_types" (setupIntentPaymentMethodTypes obj) GHC.Base.<> ((Data.Aeson..=) "single_use_mandate" (setupIntentSingleUseMandate obj) GHC.Base.<> ((Data.Aeson..=) "status" (setupIntentStatus obj) GHC.Base.<> (Data.Aeson..=) "usage" (setupIntentUsage obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SetupIntent
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntent" (\obj -> (((((((((((((((((((GHC.Base.pure SetupIntent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cancellation_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_setup_error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mandate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "next_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_method_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "single_use_mandate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "usage"))
data ShippingMethod
    = ShippingMethod {shippingMethodAmount :: GHC.Integer.Type.Integer,
                      shippingMethodCurrency :: GHC.Base.String,
                      shippingMethodDeliveryEstimate :: (GHC.Maybe.Maybe ShippingMethodDeliveryEstimate'),
                      shippingMethodDescription :: GHC.Base.String,
                      shippingMethodId :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ShippingMethodDeliveryEstimate'
    = ShippingMethodDeliveryEstimate' {shippingMethodDeliveryEstimate'Date :: (GHC.Maybe.Maybe GHC.Base.String),
                                       shippingMethodDeliveryEstimate'Earliest :: (GHC.Maybe.Maybe GHC.Base.String),
                                       shippingMethodDeliveryEstimate'Latest :: (GHC.Maybe.Maybe GHC.Base.String),
                                       shippingMethodDeliveryEstimate'Type :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ShippingMethodDeliveryEstimate'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "date" (shippingMethodDeliveryEstimate'Date obj) : (Data.Aeson..=) "earliest" (shippingMethodDeliveryEstimate'Earliest obj) : (Data.Aeson..=) "latest" (shippingMethodDeliveryEstimate'Latest obj) : (Data.Aeson..=) "type" (shippingMethodDeliveryEstimate'Type obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "date" (shippingMethodDeliveryEstimate'Date obj) GHC.Base.<> ((Data.Aeson..=) "earliest" (shippingMethodDeliveryEstimate'Earliest obj) GHC.Base.<> ((Data.Aeson..=) "latest" (shippingMethodDeliveryEstimate'Latest obj) GHC.Base.<> (Data.Aeson..=) "type" (shippingMethodDeliveryEstimate'Type obj))))
instance Data.Aeson.Types.FromJSON.FromJSON ShippingMethodDeliveryEstimate'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ShippingMethodDeliveryEstimate'" (\obj -> (((GHC.Base.pure ShippingMethodDeliveryEstimate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "earliest")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "latest")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
instance Data.Aeson.ToJSON ShippingMethod
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (shippingMethodAmount obj) : (Data.Aeson..=) "currency" (shippingMethodCurrency obj) : (Data.Aeson..=) "delivery_estimate" (shippingMethodDeliveryEstimate obj) : (Data.Aeson..=) "description" (shippingMethodDescription obj) : (Data.Aeson..=) "id" (shippingMethodId obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (shippingMethodAmount obj) GHC.Base.<> ((Data.Aeson..=) "currency" (shippingMethodCurrency obj) GHC.Base.<> ((Data.Aeson..=) "delivery_estimate" (shippingMethodDeliveryEstimate obj) GHC.Base.<> ((Data.Aeson..=) "description" (shippingMethodDescription obj) GHC.Base.<> (Data.Aeson..=) "id" (shippingMethodId obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON ShippingMethod
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ShippingMethod" (\obj -> ((((GHC.Base.pure ShippingMethod GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "delivery_estimate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id"))
data Sku
    = Sku {skuActive :: GHC.Types.Bool,
           skuAttributes :: SkuAttributes',
           skuCreated :: GHC.Integer.Type.Integer,
           skuCurrency :: GHC.Base.String,
           skuId :: GHC.Base.String,
           skuImage :: (GHC.Maybe.Maybe GHC.Base.String),
           skuInventory :: Inventory,
           skuLivemode :: GHC.Types.Bool,
           skuMetadata :: SkuMetadata',
           skuObject :: SkuObject',
           skuPackageDimensions :: (GHC.Maybe.Maybe SkuPackageDimensions'),
           skuPrice :: GHC.Integer.Type.Integer,
           skuProduct :: SkuProduct'Variants,
           skuUpdated :: GHC.Integer.Type.Integer}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SkuAttributes'
    = SkuAttributes' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SkuAttributes'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SkuAttributes'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SkuAttributes'" (\obj -> GHC.Base.pure SkuAttributes')
data SkuMetadata'
    = SkuMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SkuMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SkuMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SkuMetadata'" (\obj -> GHC.Base.pure SkuMetadata')
data SkuObject'
    = SkuObject'EnumOther Data.Aeson.Types.Internal.Value
    | SkuObject'EnumTyped GHC.Base.String
    | SkuObject'EnumStringSku
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SkuObject'
    where toJSON (SkuObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SkuObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SkuObject'EnumStringSku) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sku"
instance Data.Aeson.FromJSON SkuObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sku")
                                          then SkuObject'EnumStringSku
                                          else SkuObject'EnumOther val)
data SkuPackageDimensions'
    = SkuPackageDimensions' {skuPackageDimensions'Height :: (GHC.Maybe.Maybe GHC.Types.Double),
                             skuPackageDimensions'Length :: (GHC.Maybe.Maybe GHC.Types.Double),
                             skuPackageDimensions'Weight :: (GHC.Maybe.Maybe GHC.Types.Double),
                             skuPackageDimensions'Width :: (GHC.Maybe.Maybe GHC.Types.Double)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SkuPackageDimensions'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "height" (skuPackageDimensions'Height obj) : (Data.Aeson..=) "length" (skuPackageDimensions'Length obj) : (Data.Aeson..=) "weight" (skuPackageDimensions'Weight obj) : (Data.Aeson..=) "width" (skuPackageDimensions'Width obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "height" (skuPackageDimensions'Height obj) GHC.Base.<> ((Data.Aeson..=) "length" (skuPackageDimensions'Length obj) GHC.Base.<> ((Data.Aeson..=) "weight" (skuPackageDimensions'Weight obj) GHC.Base.<> (Data.Aeson..=) "width" (skuPackageDimensions'Width obj))))
instance Data.Aeson.Types.FromJSON.FromJSON SkuPackageDimensions'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SkuPackageDimensions'" (\obj -> (((GHC.Base.pure SkuPackageDimensions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "length")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "weight")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "width"))
data SkuProduct'Variants
    = SkuProduct'Variant1 Product | SkuProduct'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SkuProduct'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SkuProduct'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Sku
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (skuActive obj) : (Data.Aeson..=) "attributes" (skuAttributes obj) : (Data.Aeson..=) "created" (skuCreated obj) : (Data.Aeson..=) "currency" (skuCurrency obj) : (Data.Aeson..=) "id" (skuId obj) : (Data.Aeson..=) "image" (skuImage obj) : (Data.Aeson..=) "inventory" (skuInventory obj) : (Data.Aeson..=) "livemode" (skuLivemode obj) : (Data.Aeson..=) "metadata" (skuMetadata obj) : (Data.Aeson..=) "object" (skuObject obj) : (Data.Aeson..=) "package_dimensions" (skuPackageDimensions obj) : (Data.Aeson..=) "price" (skuPrice obj) : (Data.Aeson..=) "product" (skuProduct obj) : (Data.Aeson..=) "updated" (skuUpdated obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (skuActive obj) GHC.Base.<> ((Data.Aeson..=) "attributes" (skuAttributes obj) GHC.Base.<> ((Data.Aeson..=) "created" (skuCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (skuCurrency obj) GHC.Base.<> ((Data.Aeson..=) "id" (skuId obj) GHC.Base.<> ((Data.Aeson..=) "image" (skuImage obj) GHC.Base.<> ((Data.Aeson..=) "inventory" (skuInventory obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (skuLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (skuMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (skuObject obj) GHC.Base.<> ((Data.Aeson..=) "package_dimensions" (skuPackageDimensions obj) GHC.Base.<> ((Data.Aeson..=) "price" (skuPrice obj) GHC.Base.<> ((Data.Aeson..=) "product" (skuProduct obj) GHC.Base.<> (Data.Aeson..=) "updated" (skuUpdated obj))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Sku
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Sku" (\obj -> (((((((((((((GHC.Base.pure Sku GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "inventory")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "package_dimensions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updated"))
data Source
    = Source {sourceAchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
              sourceAchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
              sourceAlipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
              sourceAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
              sourceBancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
              sourceCard :: (GHC.Maybe.Maybe SourceTypeCard),
              sourceCardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
              sourceClientSecret :: GHC.Base.String,
              sourceCodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
              sourceCreated :: GHC.Integer.Type.Integer,
              sourceCurrency :: (GHC.Maybe.Maybe GHC.Base.String),
              sourceCustomer :: (GHC.Maybe.Maybe GHC.Base.String),
              sourceEps :: (GHC.Maybe.Maybe SourceTypeEps),
              sourceFlow :: GHC.Base.String,
              sourceGiropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
              sourceId :: GHC.Base.String,
              sourceIdeal :: (GHC.Maybe.Maybe SourceTypeIdeal),
              sourceKlarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
              sourceLivemode :: GHC.Types.Bool,
              sourceMetadata :: (GHC.Maybe.Maybe SourceMetadata'),
              sourceMultibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
              sourceObject :: SourceObject',
              sourceOwner :: (GHC.Maybe.Maybe SourceOwner'),
              sourceP24 :: (GHC.Maybe.Maybe SourceTypeP24),
              sourceReceiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
              sourceRedirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
              sourceSepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
              sourceSofort :: (GHC.Maybe.Maybe SourceTypeSofort),
              sourceSourceOrder :: (GHC.Maybe.Maybe SourceOrder),
              sourceStatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
              sourceStatus :: GHC.Base.String,
              sourceThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
              sourceType :: SourceType',
              sourceUsage :: (GHC.Maybe.Maybe GHC.Base.String),
              sourceWechat :: (GHC.Maybe.Maybe SourceTypeWechat)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SourceMetadata'
    = SourceMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SourceMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SourceMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceMetadata'" (\obj -> GHC.Base.pure SourceMetadata')
data SourceObject'
    = SourceObject'EnumOther Data.Aeson.Types.Internal.Value
    | SourceObject'EnumTyped GHC.Base.String
    | SourceObject'EnumStringSource
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SourceObject'
    where toJSON (SourceObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SourceObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SourceObject'EnumStringSource) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "source"
instance Data.Aeson.FromJSON SourceObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "source")
                                          then SourceObject'EnumStringSource
                                          else SourceObject'EnumOther val)
data SourceOwner'
    = SourceOwner' {sourceOwner'Address :: (GHC.Maybe.Maybe SourceOwner'Address'),
                    sourceOwner'Email :: (GHC.Maybe.Maybe GHC.Base.String),
                    sourceOwner'Name :: (GHC.Maybe.Maybe GHC.Base.String),
                    sourceOwner'Phone :: (GHC.Maybe.Maybe GHC.Base.String),
                    sourceOwner'VerifiedAddress :: (GHC.Maybe.Maybe SourceOwner'VerifiedAddress'),
                    sourceOwner'VerifiedEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                    sourceOwner'VerifiedName :: (GHC.Maybe.Maybe GHC.Base.String),
                    sourceOwner'VerifiedPhone :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SourceOwner'Address'
    = SourceOwner'Address' {sourceOwner'Address'City :: (GHC.Maybe.Maybe GHC.Base.String),
                            sourceOwner'Address'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                            sourceOwner'Address'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                            sourceOwner'Address'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                            sourceOwner'Address'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                            sourceOwner'Address'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SourceOwner'Address'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (sourceOwner'Address'City obj) : (Data.Aeson..=) "country" (sourceOwner'Address'Country obj) : (Data.Aeson..=) "line1" (sourceOwner'Address'Line1 obj) : (Data.Aeson..=) "line2" (sourceOwner'Address'Line2 obj) : (Data.Aeson..=) "postal_code" (sourceOwner'Address'PostalCode obj) : (Data.Aeson..=) "state" (sourceOwner'Address'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (sourceOwner'Address'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (sourceOwner'Address'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (sourceOwner'Address'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (sourceOwner'Address'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (sourceOwner'Address'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (sourceOwner'Address'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON SourceOwner'Address'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceOwner'Address'" (\obj -> (((((GHC.Base.pure SourceOwner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data SourceOwner'VerifiedAddress'
    = SourceOwner'VerifiedAddress' {sourceOwner'VerifiedAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                    sourceOwner'VerifiedAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                    sourceOwner'VerifiedAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                    sourceOwner'VerifiedAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                    sourceOwner'VerifiedAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                    sourceOwner'VerifiedAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SourceOwner'VerifiedAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (sourceOwner'VerifiedAddress'City obj) : (Data.Aeson..=) "country" (sourceOwner'VerifiedAddress'Country obj) : (Data.Aeson..=) "line1" (sourceOwner'VerifiedAddress'Line1 obj) : (Data.Aeson..=) "line2" (sourceOwner'VerifiedAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (sourceOwner'VerifiedAddress'PostalCode obj) : (Data.Aeson..=) "state" (sourceOwner'VerifiedAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (sourceOwner'VerifiedAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (sourceOwner'VerifiedAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (sourceOwner'VerifiedAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (sourceOwner'VerifiedAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (sourceOwner'VerifiedAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (sourceOwner'VerifiedAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON SourceOwner'VerifiedAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceOwner'VerifiedAddress'" (\obj -> (((((GHC.Base.pure SourceOwner'VerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON SourceOwner'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (sourceOwner'Address obj) : (Data.Aeson..=) "email" (sourceOwner'Email obj) : (Data.Aeson..=) "name" (sourceOwner'Name obj) : (Data.Aeson..=) "phone" (sourceOwner'Phone obj) : (Data.Aeson..=) "verified_address" (sourceOwner'VerifiedAddress obj) : (Data.Aeson..=) "verified_email" (sourceOwner'VerifiedEmail obj) : (Data.Aeson..=) "verified_name" (sourceOwner'VerifiedName obj) : (Data.Aeson..=) "verified_phone" (sourceOwner'VerifiedPhone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (sourceOwner'Address obj) GHC.Base.<> ((Data.Aeson..=) "email" (sourceOwner'Email obj) GHC.Base.<> ((Data.Aeson..=) "name" (sourceOwner'Name obj) GHC.Base.<> ((Data.Aeson..=) "phone" (sourceOwner'Phone obj) GHC.Base.<> ((Data.Aeson..=) "verified_address" (sourceOwner'VerifiedAddress obj) GHC.Base.<> ((Data.Aeson..=) "verified_email" (sourceOwner'VerifiedEmail obj) GHC.Base.<> ((Data.Aeson..=) "verified_name" (sourceOwner'VerifiedName obj) GHC.Base.<> (Data.Aeson..=) "verified_phone" (sourceOwner'VerifiedPhone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SourceOwner'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceOwner'" (\obj -> (((((((GHC.Base.pure SourceOwner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))
data SourceType'
    = SourceType'EnumOther Data.Aeson.Types.Internal.Value
    | SourceType'EnumTyped GHC.Base.String
    | SourceType'EnumStringAchCreditTransfer
    | SourceType'EnumStringAchDebit
    | SourceType'EnumStringAlipay
    | SourceType'EnumStringBancontact
    | SourceType'EnumStringCard
    | SourceType'EnumStringCardPresent
    | SourceType'EnumStringEps
    | SourceType'EnumStringGiropay
    | SourceType'EnumStringIdeal
    | SourceType'EnumStringKlarna
    | SourceType'EnumStringMultibanco
    | SourceType'EnumStringP24
    | SourceType'EnumStringSepaDebit
    | SourceType'EnumStringSofort
    | SourceType'EnumStringThreeDSecure
    | SourceType'EnumStringWechat
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SourceType'
    where toJSON (SourceType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SourceType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SourceType'EnumStringAchCreditTransfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer"
          toJSON (SourceType'EnumStringAchDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit"
          toJSON (SourceType'EnumStringAlipay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay"
          toJSON (SourceType'EnumStringBancontact) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact"
          toJSON (SourceType'EnumStringCard) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card"
          toJSON (SourceType'EnumStringCardPresent) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present"
          toJSON (SourceType'EnumStringEps) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps"
          toJSON (SourceType'EnumStringGiropay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay"
          toJSON (SourceType'EnumStringIdeal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal"
          toJSON (SourceType'EnumStringKlarna) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna"
          toJSON (SourceType'EnumStringMultibanco) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco"
          toJSON (SourceType'EnumStringP24) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24"
          toJSON (SourceType'EnumStringSepaDebit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit"
          toJSON (SourceType'EnumStringSofort) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort"
          toJSON (SourceType'EnumStringThreeDSecure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure"
          toJSON (SourceType'EnumStringWechat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat"
instance Data.Aeson.FromJSON SourceType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_credit_transfer")
                                          then SourceType'EnumStringAchCreditTransfer
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ach_debit")
                                                then SourceType'EnumStringAchDebit
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "alipay")
                                                      then SourceType'EnumStringAlipay
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "bancontact")
                                                            then SourceType'EnumStringBancontact
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card")
                                                                  then SourceType'EnumStringCard
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "card_present")
                                                                        then SourceType'EnumStringCardPresent
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eps")
                                                                              then SourceType'EnumStringEps
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "giropay")
                                                                                    then SourceType'EnumStringGiropay
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ideal")
                                                                                          then SourceType'EnumStringIdeal
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "klarna")
                                                                                                then SourceType'EnumStringKlarna
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "multibanco")
                                                                                                      then SourceType'EnumStringMultibanco
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "p24")
                                                                                                            then SourceType'EnumStringP24
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sepa_debit")
                                                                                                                  then SourceType'EnumStringSepaDebit
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sofort")
                                                                                                                        then SourceType'EnumStringSofort
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure")
                                                                                                                              then SourceType'EnumStringThreeDSecure
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "wechat")
                                                                                                                                    then SourceType'EnumStringWechat
                                                                                                                                    else SourceType'EnumOther val)
instance Data.Aeson.ToJSON Source
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ach_credit_transfer" (sourceAchCreditTransfer obj) : (Data.Aeson..=) "ach_debit" (sourceAchDebit obj) : (Data.Aeson..=) "alipay" (sourceAlipay obj) : (Data.Aeson..=) "amount" (sourceAmount obj) : (Data.Aeson..=) "bancontact" (sourceBancontact obj) : (Data.Aeson..=) "card" (sourceCard obj) : (Data.Aeson..=) "card_present" (sourceCardPresent obj) : (Data.Aeson..=) "client_secret" (sourceClientSecret obj) : (Data.Aeson..=) "code_verification" (sourceCodeVerification obj) : (Data.Aeson..=) "created" (sourceCreated obj) : (Data.Aeson..=) "currency" (sourceCurrency obj) : (Data.Aeson..=) "customer" (sourceCustomer obj) : (Data.Aeson..=) "eps" (sourceEps obj) : (Data.Aeson..=) "flow" (sourceFlow obj) : (Data.Aeson..=) "giropay" (sourceGiropay obj) : (Data.Aeson..=) "id" (sourceId obj) : (Data.Aeson..=) "ideal" (sourceIdeal obj) : (Data.Aeson..=) "klarna" (sourceKlarna obj) : (Data.Aeson..=) "livemode" (sourceLivemode obj) : (Data.Aeson..=) "metadata" (sourceMetadata obj) : (Data.Aeson..=) "multibanco" (sourceMultibanco obj) : (Data.Aeson..=) "object" (sourceObject obj) : (Data.Aeson..=) "owner" (sourceOwner obj) : (Data.Aeson..=) "p24" (sourceP24 obj) : (Data.Aeson..=) "receiver" (sourceReceiver obj) : (Data.Aeson..=) "redirect" (sourceRedirect obj) : (Data.Aeson..=) "sepa_debit" (sourceSepaDebit obj) : (Data.Aeson..=) "sofort" (sourceSofort obj) : (Data.Aeson..=) "source_order" (sourceSourceOrder obj) : (Data.Aeson..=) "statement_descriptor" (sourceStatementDescriptor obj) : (Data.Aeson..=) "status" (sourceStatus obj) : (Data.Aeson..=) "three_d_secure" (sourceThreeDSecure obj) : (Data.Aeson..=) "type" (sourceType obj) : (Data.Aeson..=) "usage" (sourceUsage obj) : (Data.Aeson..=) "wechat" (sourceWechat obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ach_credit_transfer" (sourceAchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "ach_debit" (sourceAchDebit obj) GHC.Base.<> ((Data.Aeson..=) "alipay" (sourceAlipay obj) GHC.Base.<> ((Data.Aeson..=) "amount" (sourceAmount obj) GHC.Base.<> ((Data.Aeson..=) "bancontact" (sourceBancontact obj) GHC.Base.<> ((Data.Aeson..=) "card" (sourceCard obj) GHC.Base.<> ((Data.Aeson..=) "card_present" (sourceCardPresent obj) GHC.Base.<> ((Data.Aeson..=) "client_secret" (sourceClientSecret obj) GHC.Base.<> ((Data.Aeson..=) "code_verification" (sourceCodeVerification obj) GHC.Base.<> ((Data.Aeson..=) "created" (sourceCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (sourceCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (sourceCustomer obj) GHC.Base.<> ((Data.Aeson..=) "eps" (sourceEps obj) GHC.Base.<> ((Data.Aeson..=) "flow" (sourceFlow obj) GHC.Base.<> ((Data.Aeson..=) "giropay" (sourceGiropay obj) GHC.Base.<> ((Data.Aeson..=) "id" (sourceId obj) GHC.Base.<> ((Data.Aeson..=) "ideal" (sourceIdeal obj) GHC.Base.<> ((Data.Aeson..=) "klarna" (sourceKlarna obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (sourceLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (sourceMetadata obj) GHC.Base.<> ((Data.Aeson..=) "multibanco" (sourceMultibanco obj) GHC.Base.<> ((Data.Aeson..=) "object" (sourceObject obj) GHC.Base.<> ((Data.Aeson..=) "owner" (sourceOwner obj) GHC.Base.<> ((Data.Aeson..=) "p24" (sourceP24 obj) GHC.Base.<> ((Data.Aeson..=) "receiver" (sourceReceiver obj) GHC.Base.<> ((Data.Aeson..=) "redirect" (sourceRedirect obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (sourceSepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "sofort" (sourceSofort obj) GHC.Base.<> ((Data.Aeson..=) "source_order" (sourceSourceOrder obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (sourceStatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (sourceStatus obj) GHC.Base.<> ((Data.Aeson..=) "three_d_secure" (sourceThreeDSecure obj) GHC.Base.<> ((Data.Aeson..=) "type" (sourceType obj) GHC.Base.<> ((Data.Aeson..=) "usage" (sourceUsage obj) GHC.Base.<> (Data.Aeson..=) "wechat" (sourceWechat obj)))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Source
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Source" (\obj -> ((((((((((((((((((((((((((((((((((GHC.Base.pure Source GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))
data SourceMandateNotification
    = SourceMandateNotification {sourceMandateNotificationAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                 sourceMandateNotificationBacsDebit :: (GHC.Maybe.Maybe SourceMandateNotificationBacsDebitData),
                                 sourceMandateNotificationCreated :: GHC.Integer.Type.Integer,
                                 sourceMandateNotificationId :: GHC.Base.String,
                                 sourceMandateNotificationLivemode :: GHC.Types.Bool,
                                 sourceMandateNotificationObject :: SourceMandateNotificationObject',
                                 sourceMandateNotificationReason :: GHC.Base.String,
                                 sourceMandateNotificationSepaDebit :: (GHC.Maybe.Maybe SourceMandateNotificationSepaDebitData),
                                 sourceMandateNotificationSource :: Source,
                                 sourceMandateNotificationStatus :: GHC.Base.String,
                                 sourceMandateNotificationType :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SourceMandateNotificationObject'
    = SourceMandateNotificationObject'EnumOther Data.Aeson.Types.Internal.Value
    | SourceMandateNotificationObject'EnumTyped GHC.Base.String
    | SourceMandateNotificationObject'EnumStringSourceMandateNotification
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SourceMandateNotificationObject'
    where toJSON (SourceMandateNotificationObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SourceMandateNotificationObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SourceMandateNotificationObject'EnumStringSourceMandateNotification) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "source_mandate_notification"
instance Data.Aeson.FromJSON SourceMandateNotificationObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "source_mandate_notification")
                                          then SourceMandateNotificationObject'EnumStringSourceMandateNotification
                                          else SourceMandateNotificationObject'EnumOther val)
instance Data.Aeson.ToJSON SourceMandateNotification
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (sourceMandateNotificationAmount obj) : (Data.Aeson..=) "bacs_debit" (sourceMandateNotificationBacsDebit obj) : (Data.Aeson..=) "created" (sourceMandateNotificationCreated obj) : (Data.Aeson..=) "id" (sourceMandateNotificationId obj) : (Data.Aeson..=) "livemode" (sourceMandateNotificationLivemode obj) : (Data.Aeson..=) "object" (sourceMandateNotificationObject obj) : (Data.Aeson..=) "reason" (sourceMandateNotificationReason obj) : (Data.Aeson..=) "sepa_debit" (sourceMandateNotificationSepaDebit obj) : (Data.Aeson..=) "source" (sourceMandateNotificationSource obj) : (Data.Aeson..=) "status" (sourceMandateNotificationStatus obj) : (Data.Aeson..=) "type" (sourceMandateNotificationType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (sourceMandateNotificationAmount obj) GHC.Base.<> ((Data.Aeson..=) "bacs_debit" (sourceMandateNotificationBacsDebit obj) GHC.Base.<> ((Data.Aeson..=) "created" (sourceMandateNotificationCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (sourceMandateNotificationId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (sourceMandateNotificationLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (sourceMandateNotificationObject obj) GHC.Base.<> ((Data.Aeson..=) "reason" (sourceMandateNotificationReason obj) GHC.Base.<> ((Data.Aeson..=) "sepa_debit" (sourceMandateNotificationSepaDebit obj) GHC.Base.<> ((Data.Aeson..=) "source" (sourceMandateNotificationSource obj) GHC.Base.<> ((Data.Aeson..=) "status" (sourceMandateNotificationStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (sourceMandateNotificationType obj)))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SourceMandateNotification
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceMandateNotification" (\obj -> ((((((((((GHC.Base.pure SourceMandateNotification GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bacs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
data SourceOwner
    = SourceOwner {sourceOwnerAddress :: (GHC.Maybe.Maybe SourceOwnerAddress'),
                   sourceOwnerEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                   sourceOwnerName :: (GHC.Maybe.Maybe GHC.Base.String),
                   sourceOwnerPhone :: (GHC.Maybe.Maybe GHC.Base.String),
                   sourceOwnerVerifiedAddress :: (GHC.Maybe.Maybe SourceOwnerVerifiedAddress'),
                   sourceOwnerVerifiedEmail :: (GHC.Maybe.Maybe GHC.Base.String),
                   sourceOwnerVerifiedName :: (GHC.Maybe.Maybe GHC.Base.String),
                   sourceOwnerVerifiedPhone :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SourceOwnerAddress'
    = SourceOwnerAddress' {sourceOwnerAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                           sourceOwnerAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                           sourceOwnerAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                           sourceOwnerAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                           sourceOwnerAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                           sourceOwnerAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SourceOwnerAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (sourceOwnerAddress'City obj) : (Data.Aeson..=) "country" (sourceOwnerAddress'Country obj) : (Data.Aeson..=) "line1" (sourceOwnerAddress'Line1 obj) : (Data.Aeson..=) "line2" (sourceOwnerAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (sourceOwnerAddress'PostalCode obj) : (Data.Aeson..=) "state" (sourceOwnerAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (sourceOwnerAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (sourceOwnerAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (sourceOwnerAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (sourceOwnerAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (sourceOwnerAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (sourceOwnerAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON SourceOwnerAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceOwnerAddress'" (\obj -> (((((GHC.Base.pure SourceOwnerAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
data SourceOwnerVerifiedAddress'
    = SourceOwnerVerifiedAddress' {sourceOwnerVerifiedAddress'City :: (GHC.Maybe.Maybe GHC.Base.String),
                                   sourceOwnerVerifiedAddress'Country :: (GHC.Maybe.Maybe GHC.Base.String),
                                   sourceOwnerVerifiedAddress'Line1 :: (GHC.Maybe.Maybe GHC.Base.String),
                                   sourceOwnerVerifiedAddress'Line2 :: (GHC.Maybe.Maybe GHC.Base.String),
                                   sourceOwnerVerifiedAddress'PostalCode :: (GHC.Maybe.Maybe GHC.Base.String),
                                   sourceOwnerVerifiedAddress'State :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SourceOwnerVerifiedAddress'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (sourceOwnerVerifiedAddress'City obj) : (Data.Aeson..=) "country" (sourceOwnerVerifiedAddress'Country obj) : (Data.Aeson..=) "line1" (sourceOwnerVerifiedAddress'Line1 obj) : (Data.Aeson..=) "line2" (sourceOwnerVerifiedAddress'Line2 obj) : (Data.Aeson..=) "postal_code" (sourceOwnerVerifiedAddress'PostalCode obj) : (Data.Aeson..=) "state" (sourceOwnerVerifiedAddress'State obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (sourceOwnerVerifiedAddress'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (sourceOwnerVerifiedAddress'Country obj) GHC.Base.<> ((Data.Aeson..=) "line1" (sourceOwnerVerifiedAddress'Line1 obj) GHC.Base.<> ((Data.Aeson..=) "line2" (sourceOwnerVerifiedAddress'Line2 obj) GHC.Base.<> ((Data.Aeson..=) "postal_code" (sourceOwnerVerifiedAddress'PostalCode obj) GHC.Base.<> (Data.Aeson..=) "state" (sourceOwnerVerifiedAddress'State obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON SourceOwnerVerifiedAddress'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceOwnerVerifiedAddress'" (\obj -> (((((GHC.Base.pure SourceOwnerVerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))
instance Data.Aeson.ToJSON SourceOwner
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (sourceOwnerAddress obj) : (Data.Aeson..=) "email" (sourceOwnerEmail obj) : (Data.Aeson..=) "name" (sourceOwnerName obj) : (Data.Aeson..=) "phone" (sourceOwnerPhone obj) : (Data.Aeson..=) "verified_address" (sourceOwnerVerifiedAddress obj) : (Data.Aeson..=) "verified_email" (sourceOwnerVerifiedEmail obj) : (Data.Aeson..=) "verified_name" (sourceOwnerVerifiedName obj) : (Data.Aeson..=) "verified_phone" (sourceOwnerVerifiedPhone obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (sourceOwnerAddress obj) GHC.Base.<> ((Data.Aeson..=) "email" (sourceOwnerEmail obj) GHC.Base.<> ((Data.Aeson..=) "name" (sourceOwnerName obj) GHC.Base.<> ((Data.Aeson..=) "phone" (sourceOwnerPhone obj) GHC.Base.<> ((Data.Aeson..=) "verified_address" (sourceOwnerVerifiedAddress obj) GHC.Base.<> ((Data.Aeson..=) "verified_email" (sourceOwnerVerifiedEmail obj) GHC.Base.<> ((Data.Aeson..=) "verified_name" (sourceOwnerVerifiedName obj) GHC.Base.<> (Data.Aeson..=) "verified_phone" (sourceOwnerVerifiedPhone obj))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SourceOwner
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceOwner" (\obj -> (((((((GHC.Base.pure SourceOwner GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))
data Subscription
    = Subscription {subscriptionApplicationFeePercent :: (GHC.Maybe.Maybe GHC.Types.Double),
                    subscriptionBillingCycleAnchor :: GHC.Integer.Type.Integer,
                    subscriptionBillingThresholds :: (GHC.Maybe.Maybe SubscriptionBillingThresholds'),
                    subscriptionCancelAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                    subscriptionCancelAtPeriodEnd :: GHC.Types.Bool,
                    subscriptionCanceledAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                    subscriptionCollectionMethod :: (GHC.Maybe.Maybe SubscriptionCollectionMethod'),
                    subscriptionCreated :: GHC.Integer.Type.Integer,
                    subscriptionCurrentPeriodEnd :: GHC.Integer.Type.Integer,
                    subscriptionCurrentPeriodStart :: GHC.Integer.Type.Integer,
                    subscriptionCustomer :: SubscriptionCustomer'Variants,
                    subscriptionDaysUntilDue :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                    subscriptionDefaultPaymentMethod :: (GHC.Maybe.Maybe SubscriptionDefaultPaymentMethod'Variants),
                    subscriptionDefaultSource :: (GHC.Maybe.Maybe SubscriptionDefaultSource'Variants),
                    subscriptionDefaultTaxRates :: (GHC.Maybe.Maybe ([] TaxRate)),
                    subscriptionDiscount :: (GHC.Maybe.Maybe SubscriptionDiscount'),
                    subscriptionEndedAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                    subscriptionId :: GHC.Base.String,
                    subscriptionItems :: SubscriptionItems',
                    subscriptionLatestInvoice :: (GHC.Maybe.Maybe SubscriptionLatestInvoice'Variants),
                    subscriptionLivemode :: GHC.Types.Bool,
                    subscriptionMetadata :: SubscriptionMetadata',
                    subscriptionNextPendingInvoiceItemInvoice :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                    subscriptionObject :: SubscriptionObject',
                    subscriptionPendingInvoiceItemInterval :: (GHC.Maybe.Maybe SubscriptionPendingInvoiceItemInterval'),
                    subscriptionPendingSetupIntent :: (GHC.Maybe.Maybe SubscriptionPendingSetupIntent'Variants),
                    subscriptionPendingUpdate :: (GHC.Maybe.Maybe SubscriptionPendingUpdate'),
                    subscriptionPlan :: (GHC.Maybe.Maybe SubscriptionPlan'),
                    subscriptionQuantity :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                    subscriptionSchedule :: (GHC.Maybe.Maybe SubscriptionSchedule'Variants),
                    subscriptionStartDate :: GHC.Integer.Type.Integer,
                    subscriptionStatus :: SubscriptionStatus',
                    subscriptionTaxPercent :: (GHC.Maybe.Maybe GHC.Types.Double),
                    subscriptionTrialEnd :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                    subscriptionTrialStart :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionBillingThresholds'
    = SubscriptionBillingThresholds' {subscriptionBillingThresholds'AmountGte :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                      subscriptionBillingThresholds'ResetBillingCycleAnchor :: (GHC.Maybe.Maybe GHC.Types.Bool)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionBillingThresholds'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount_gte" (subscriptionBillingThresholds'AmountGte obj) : (Data.Aeson..=) "reset_billing_cycle_anchor" (subscriptionBillingThresholds'ResetBillingCycleAnchor obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount_gte" (subscriptionBillingThresholds'AmountGte obj) GHC.Base.<> (Data.Aeson..=) "reset_billing_cycle_anchor" (subscriptionBillingThresholds'ResetBillingCycleAnchor obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionBillingThresholds'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionBillingThresholds'" (\obj -> (GHC.Base.pure SubscriptionBillingThresholds' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reset_billing_cycle_anchor"))
data SubscriptionCollectionMethod'
    = SubscriptionCollectionMethod'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionCollectionMethod'EnumTyped GHC.Base.String
    | SubscriptionCollectionMethod'EnumStringChargeAutomatically
    | SubscriptionCollectionMethod'EnumStringSendInvoice
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionCollectionMethod'
    where toJSON (SubscriptionCollectionMethod'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionCollectionMethod'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionCollectionMethod'EnumStringChargeAutomatically) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_automatically"
          toJSON (SubscriptionCollectionMethod'EnumStringSendInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "send_invoice"
instance Data.Aeson.FromJSON SubscriptionCollectionMethod'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_automatically")
                                          then SubscriptionCollectionMethod'EnumStringChargeAutomatically
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "send_invoice")
                                                then SubscriptionCollectionMethod'EnumStringSendInvoice
                                                else SubscriptionCollectionMethod'EnumOther val)
data SubscriptionCustomer'Variants
    = SubscriptionCustomer'Variant1 Customer
    | SubscriptionCustomer'Variant2 DeletedCustomer
    | SubscriptionCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionDefaultPaymentMethod'Variants
    = SubscriptionDefaultPaymentMethod'Variant1 PaymentMethod
    | SubscriptionDefaultPaymentMethod'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionDefaultPaymentMethod'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionDefaultPaymentMethod'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionDefaultSource'Variants
    = SubscriptionDefaultSource'Variant1 AlipayAccount
    | SubscriptionDefaultSource'Variant2 BankAccount
    | SubscriptionDefaultSource'Variant3 BitcoinReceiver
    | SubscriptionDefaultSource'Variant4 Card
    | SubscriptionDefaultSource'Variant5 Source
    | SubscriptionDefaultSource'Variant6 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionDefaultSource'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionDefaultSource'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionDiscount'
    = SubscriptionDiscount' {subscriptionDiscount'Coupon :: (GHC.Maybe.Maybe Coupon),
                             subscriptionDiscount'Customer :: (GHC.Maybe.Maybe SubscriptionDiscount'Customer'Variants),
                             subscriptionDiscount'End :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             subscriptionDiscount'Object :: (GHC.Maybe.Maybe SubscriptionDiscount'Object'),
                             subscriptionDiscount'Start :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                             subscriptionDiscount'Subscription :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionDiscount'Customer'Variants
    = SubscriptionDiscount'Customer'Variant1 Customer
    | SubscriptionDiscount'Customer'Variant2 DeletedCustomer
    | SubscriptionDiscount'Customer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionDiscount'Customer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionDiscount'Customer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionDiscount'Object'
    = SubscriptionDiscount'Object'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionDiscount'Object'EnumTyped GHC.Base.String
    | SubscriptionDiscount'Object'EnumStringDiscount
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionDiscount'Object'
    where toJSON (SubscriptionDiscount'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionDiscount'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionDiscount'Object'EnumStringDiscount) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount"
instance Data.Aeson.FromJSON SubscriptionDiscount'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "discount")
                                          then SubscriptionDiscount'Object'EnumStringDiscount
                                          else SubscriptionDiscount'Object'EnumOther val)
instance Data.Aeson.ToJSON SubscriptionDiscount'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "coupon" (subscriptionDiscount'Coupon obj) : (Data.Aeson..=) "customer" (subscriptionDiscount'Customer obj) : (Data.Aeson..=) "end" (subscriptionDiscount'End obj) : (Data.Aeson..=) "object" (subscriptionDiscount'Object obj) : (Data.Aeson..=) "start" (subscriptionDiscount'Start obj) : (Data.Aeson..=) "subscription" (subscriptionDiscount'Subscription obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "coupon" (subscriptionDiscount'Coupon obj) GHC.Base.<> ((Data.Aeson..=) "customer" (subscriptionDiscount'Customer obj) GHC.Base.<> ((Data.Aeson..=) "end" (subscriptionDiscount'End obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionDiscount'Object obj) GHC.Base.<> ((Data.Aeson..=) "start" (subscriptionDiscount'Start obj) GHC.Base.<> (Data.Aeson..=) "subscription" (subscriptionDiscount'Subscription obj))))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionDiscount'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionDiscount'" (\obj -> (((((GHC.Base.pure SubscriptionDiscount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription"))
data SubscriptionItems'
    = SubscriptionItems' {subscriptionItems'Data :: ([] SubscriptionItem),
                          subscriptionItems'HasMore :: GHC.Types.Bool,
                          subscriptionItems'Object :: SubscriptionItems'Object',
                          subscriptionItems'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionItems'Object'
    = SubscriptionItems'Object'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionItems'Object'EnumTyped GHC.Base.String
    | SubscriptionItems'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionItems'Object'
    where toJSON (SubscriptionItems'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionItems'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionItems'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON SubscriptionItems'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then SubscriptionItems'Object'EnumStringList
                                          else SubscriptionItems'Object'EnumOther val)
instance Data.Aeson.ToJSON SubscriptionItems'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (subscriptionItems'Data obj) : (Data.Aeson..=) "has_more" (subscriptionItems'HasMore obj) : (Data.Aeson..=) "object" (subscriptionItems'Object obj) : (Data.Aeson..=) "url" (subscriptionItems'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (subscriptionItems'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (subscriptionItems'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionItems'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (subscriptionItems'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionItems'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionItems'" (\obj -> (((GHC.Base.pure SubscriptionItems' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data SubscriptionLatestInvoice'Variants
    = SubscriptionLatestInvoice'Variant1 Invoice
    | SubscriptionLatestInvoice'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionLatestInvoice'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionLatestInvoice'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionMetadata'
    = SubscriptionMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionMetadata'" (\obj -> GHC.Base.pure SubscriptionMetadata')
data SubscriptionObject'
    = SubscriptionObject'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionObject'EnumTyped GHC.Base.String
    | SubscriptionObject'EnumStringSubscription
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionObject'
    where toJSON (SubscriptionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionObject'EnumStringSubscription) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription"
instance Data.Aeson.FromJSON SubscriptionObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription")
                                          then SubscriptionObject'EnumStringSubscription
                                          else SubscriptionObject'EnumOther val)
data SubscriptionPendingInvoiceItemInterval'
    = SubscriptionPendingInvoiceItemInterval' {subscriptionPendingInvoiceItemInterval'Interval :: (GHC.Maybe.Maybe SubscriptionPendingInvoiceItemInterval'Interval'),
                                               subscriptionPendingInvoiceItemInterval'IntervalCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionPendingInvoiceItemInterval'Interval'
    = SubscriptionPendingInvoiceItemInterval'Interval'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionPendingInvoiceItemInterval'Interval'EnumTyped GHC.Base.String
    | SubscriptionPendingInvoiceItemInterval'Interval'EnumStringDay
    | SubscriptionPendingInvoiceItemInterval'Interval'EnumStringMonth
    | SubscriptionPendingInvoiceItemInterval'Interval'EnumStringWeek
    | SubscriptionPendingInvoiceItemInterval'Interval'EnumStringYear
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPendingInvoiceItemInterval'Interval'
    where toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumStringDay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day"
          toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumStringMonth) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month"
          toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumStringWeek) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week"
          toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumStringYear) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year"
instance Data.Aeson.FromJSON SubscriptionPendingInvoiceItemInterval'Interval'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day")
                                          then SubscriptionPendingInvoiceItemInterval'Interval'EnumStringDay
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month")
                                                then SubscriptionPendingInvoiceItemInterval'Interval'EnumStringMonth
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week")
                                                      then SubscriptionPendingInvoiceItemInterval'Interval'EnumStringWeek
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year")
                                                            then SubscriptionPendingInvoiceItemInterval'Interval'EnumStringYear
                                                            else SubscriptionPendingInvoiceItemInterval'Interval'EnumOther val)
instance Data.Aeson.ToJSON SubscriptionPendingInvoiceItemInterval'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "interval" (subscriptionPendingInvoiceItemInterval'Interval obj) : (Data.Aeson..=) "interval_count" (subscriptionPendingInvoiceItemInterval'IntervalCount obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "interval" (subscriptionPendingInvoiceItemInterval'Interval obj) GHC.Base.<> (Data.Aeson..=) "interval_count" (subscriptionPendingInvoiceItemInterval'IntervalCount obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPendingInvoiceItemInterval'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPendingInvoiceItemInterval'" (\obj -> (GHC.Base.pure SubscriptionPendingInvoiceItemInterval' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_count"))
data SubscriptionPendingSetupIntent'Variants
    = SubscriptionPendingSetupIntent'Variant1 SetupIntent
    | SubscriptionPendingSetupIntent'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionPendingSetupIntent'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionPendingSetupIntent'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionPendingUpdate'
    = SubscriptionPendingUpdate' {subscriptionPendingUpdate'BillingCycleAnchor :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                  subscriptionPendingUpdate'ExpiresAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                  subscriptionPendingUpdate'SubscriptionItems :: (GHC.Maybe.Maybe ([] SubscriptionItem)),
                                  subscriptionPendingUpdate'TrialEnd :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                  subscriptionPendingUpdate'TrialFromPlan :: (GHC.Maybe.Maybe GHC.Types.Bool)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPendingUpdate'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_cycle_anchor" (subscriptionPendingUpdate'BillingCycleAnchor obj) : (Data.Aeson..=) "expires_at" (subscriptionPendingUpdate'ExpiresAt obj) : (Data.Aeson..=) "subscription_items" (subscriptionPendingUpdate'SubscriptionItems obj) : (Data.Aeson..=) "trial_end" (subscriptionPendingUpdate'TrialEnd obj) : (Data.Aeson..=) "trial_from_plan" (subscriptionPendingUpdate'TrialFromPlan obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_cycle_anchor" (subscriptionPendingUpdate'BillingCycleAnchor obj) GHC.Base.<> ((Data.Aeson..=) "expires_at" (subscriptionPendingUpdate'ExpiresAt obj) GHC.Base.<> ((Data.Aeson..=) "subscription_items" (subscriptionPendingUpdate'SubscriptionItems obj) GHC.Base.<> ((Data.Aeson..=) "trial_end" (subscriptionPendingUpdate'TrialEnd obj) GHC.Base.<> (Data.Aeson..=) "trial_from_plan" (subscriptionPendingUpdate'TrialFromPlan obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPendingUpdate'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPendingUpdate'" (\obj -> ((((GHC.Base.pure SubscriptionPendingUpdate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_cycle_anchor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_from_plan"))
data SubscriptionPlan'
    = SubscriptionPlan' {subscriptionPlan'Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
                         subscriptionPlan'AggregateUsage :: (GHC.Maybe.Maybe SubscriptionPlan'AggregateUsage'),
                         subscriptionPlan'Amount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                         subscriptionPlan'AmountDecimal :: (GHC.Maybe.Maybe GHC.Base.String),
                         subscriptionPlan'BillingScheme :: (GHC.Maybe.Maybe SubscriptionPlan'BillingScheme'),
                         subscriptionPlan'Created :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                         subscriptionPlan'Currency :: (GHC.Maybe.Maybe GHC.Base.String),
                         subscriptionPlan'Id :: (GHC.Maybe.Maybe GHC.Base.String),
                         subscriptionPlan'Interval :: (GHC.Maybe.Maybe SubscriptionPlan'Interval'),
                         subscriptionPlan'IntervalCount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                         subscriptionPlan'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
                         subscriptionPlan'Metadata :: (GHC.Maybe.Maybe SubscriptionPlan'Metadata'),
                         subscriptionPlan'Nickname :: (GHC.Maybe.Maybe GHC.Base.String),
                         subscriptionPlan'Object :: (GHC.Maybe.Maybe SubscriptionPlan'Object'),
                         subscriptionPlan'Product :: (GHC.Maybe.Maybe SubscriptionPlan'Product'Variants),
                         subscriptionPlan'Tiers :: (GHC.Maybe.Maybe ([] PlanTier)),
                         subscriptionPlan'TiersMode :: (GHC.Maybe.Maybe SubscriptionPlan'TiersMode'),
                         subscriptionPlan'TransformUsage :: (GHC.Maybe.Maybe SubscriptionPlan'TransformUsage'),
                         subscriptionPlan'TrialPeriodDays :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                         subscriptionPlan'UsageType :: (GHC.Maybe.Maybe SubscriptionPlan'UsageType')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionPlan'AggregateUsage'
    = SubscriptionPlan'AggregateUsage'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionPlan'AggregateUsage'EnumTyped GHC.Base.String
    | SubscriptionPlan'AggregateUsage'EnumStringLastDuringPeriod
    | SubscriptionPlan'AggregateUsage'EnumStringLastEver
    | SubscriptionPlan'AggregateUsage'EnumStringMax
    | SubscriptionPlan'AggregateUsage'EnumStringSum
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPlan'AggregateUsage'
    where toJSON (SubscriptionPlan'AggregateUsage'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'AggregateUsage'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'AggregateUsage'EnumStringLastDuringPeriod) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_during_period"
          toJSON (SubscriptionPlan'AggregateUsage'EnumStringLastEver) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_ever"
          toJSON (SubscriptionPlan'AggregateUsage'EnumStringMax) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "max"
          toJSON (SubscriptionPlan'AggregateUsage'EnumStringSum) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sum"
instance Data.Aeson.FromJSON SubscriptionPlan'AggregateUsage'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_during_period")
                                          then SubscriptionPlan'AggregateUsage'EnumStringLastDuringPeriod
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "last_ever")
                                                then SubscriptionPlan'AggregateUsage'EnumStringLastEver
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "max")
                                                      then SubscriptionPlan'AggregateUsage'EnumStringMax
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sum")
                                                            then SubscriptionPlan'AggregateUsage'EnumStringSum
                                                            else SubscriptionPlan'AggregateUsage'EnumOther val)
data SubscriptionPlan'BillingScheme'
    = SubscriptionPlan'BillingScheme'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionPlan'BillingScheme'EnumTyped GHC.Base.String
    | SubscriptionPlan'BillingScheme'EnumStringPerUnit
    | SubscriptionPlan'BillingScheme'EnumStringTiered
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPlan'BillingScheme'
    where toJSON (SubscriptionPlan'BillingScheme'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'BillingScheme'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'BillingScheme'EnumStringPerUnit) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "per_unit"
          toJSON (SubscriptionPlan'BillingScheme'EnumStringTiered) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tiered"
instance Data.Aeson.FromJSON SubscriptionPlan'BillingScheme'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "per_unit")
                                          then SubscriptionPlan'BillingScheme'EnumStringPerUnit
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tiered")
                                                then SubscriptionPlan'BillingScheme'EnumStringTiered
                                                else SubscriptionPlan'BillingScheme'EnumOther val)
data SubscriptionPlan'Interval'
    = SubscriptionPlan'Interval'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionPlan'Interval'EnumTyped GHC.Base.String
    | SubscriptionPlan'Interval'EnumStringDay
    | SubscriptionPlan'Interval'EnumStringMonth
    | SubscriptionPlan'Interval'EnumStringWeek
    | SubscriptionPlan'Interval'EnumStringYear
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPlan'Interval'
    where toJSON (SubscriptionPlan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'Interval'EnumStringDay) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day"
          toJSON (SubscriptionPlan'Interval'EnumStringMonth) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month"
          toJSON (SubscriptionPlan'Interval'EnumStringWeek) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week"
          toJSON (SubscriptionPlan'Interval'EnumStringYear) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year"
instance Data.Aeson.FromJSON SubscriptionPlan'Interval'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "day")
                                          then SubscriptionPlan'Interval'EnumStringDay
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "month")
                                                then SubscriptionPlan'Interval'EnumStringMonth
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "week")
                                                      then SubscriptionPlan'Interval'EnumStringWeek
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "year")
                                                            then SubscriptionPlan'Interval'EnumStringYear
                                                            else SubscriptionPlan'Interval'EnumOther val)
data SubscriptionPlan'Metadata'
    = SubscriptionPlan'Metadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPlan'Metadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'Metadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPlan'Metadata'" (\obj -> GHC.Base.pure SubscriptionPlan'Metadata')
data SubscriptionPlan'Object'
    = SubscriptionPlan'Object'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionPlan'Object'EnumTyped GHC.Base.String
    | SubscriptionPlan'Object'EnumStringPlan
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPlan'Object'
    where toJSON (SubscriptionPlan'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'Object'EnumStringPlan) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plan"
instance Data.Aeson.FromJSON SubscriptionPlan'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "plan")
                                          then SubscriptionPlan'Object'EnumStringPlan
                                          else SubscriptionPlan'Object'EnumOther val)
data SubscriptionPlan'Product'Variants
    = SubscriptionPlan'Product'Variant1 DeletedProduct
    | SubscriptionPlan'Product'Variant2 Product
    | SubscriptionPlan'Product'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionPlan'Product'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionPlan'Product'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionPlan'TiersMode'
    = SubscriptionPlan'TiersMode'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionPlan'TiersMode'EnumTyped GHC.Base.String
    | SubscriptionPlan'TiersMode'EnumStringGraduated
    | SubscriptionPlan'TiersMode'EnumStringVolume
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPlan'TiersMode'
    where toJSON (SubscriptionPlan'TiersMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'TiersMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'TiersMode'EnumStringGraduated) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "graduated"
          toJSON (SubscriptionPlan'TiersMode'EnumStringVolume) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume"
instance Data.Aeson.FromJSON SubscriptionPlan'TiersMode'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "graduated")
                                          then SubscriptionPlan'TiersMode'EnumStringGraduated
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "volume")
                                                then SubscriptionPlan'TiersMode'EnumStringVolume
                                                else SubscriptionPlan'TiersMode'EnumOther val)
data SubscriptionPlan'TransformUsage'
    = SubscriptionPlan'TransformUsage' {subscriptionPlan'TransformUsage'DivideBy :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                        subscriptionPlan'TransformUsage'Round :: (GHC.Maybe.Maybe SubscriptionPlan'TransformUsage'Round')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionPlan'TransformUsage'Round'
    = SubscriptionPlan'TransformUsage'Round'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionPlan'TransformUsage'Round'EnumTyped GHC.Base.String
    | SubscriptionPlan'TransformUsage'Round'EnumStringDown
    | SubscriptionPlan'TransformUsage'Round'EnumStringUp
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPlan'TransformUsage'Round'
    where toJSON (SubscriptionPlan'TransformUsage'Round'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'TransformUsage'Round'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'TransformUsage'Round'EnumStringDown) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "down"
          toJSON (SubscriptionPlan'TransformUsage'Round'EnumStringUp) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "up"
instance Data.Aeson.FromJSON SubscriptionPlan'TransformUsage'Round'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "down")
                                          then SubscriptionPlan'TransformUsage'Round'EnumStringDown
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "up")
                                                then SubscriptionPlan'TransformUsage'Round'EnumStringUp
                                                else SubscriptionPlan'TransformUsage'Round'EnumOther val)
instance Data.Aeson.ToJSON SubscriptionPlan'TransformUsage'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "divide_by" (subscriptionPlan'TransformUsage'DivideBy obj) : (Data.Aeson..=) "round" (subscriptionPlan'TransformUsage'Round obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "divide_by" (subscriptionPlan'TransformUsage'DivideBy obj) GHC.Base.<> (Data.Aeson..=) "round" (subscriptionPlan'TransformUsage'Round obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'TransformUsage'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPlan'TransformUsage'" (\obj -> (GHC.Base.pure SubscriptionPlan'TransformUsage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "divide_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "round"))
data SubscriptionPlan'UsageType'
    = SubscriptionPlan'UsageType'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionPlan'UsageType'EnumTyped GHC.Base.String
    | SubscriptionPlan'UsageType'EnumStringLicensed
    | SubscriptionPlan'UsageType'EnumStringMetered
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionPlan'UsageType'
    where toJSON (SubscriptionPlan'UsageType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'UsageType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionPlan'UsageType'EnumStringLicensed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "licensed"
          toJSON (SubscriptionPlan'UsageType'EnumStringMetered) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metered"
instance Data.Aeson.FromJSON SubscriptionPlan'UsageType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "licensed")
                                          then SubscriptionPlan'UsageType'EnumStringLicensed
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "metered")
                                                then SubscriptionPlan'UsageType'EnumStringMetered
                                                else SubscriptionPlan'UsageType'EnumOther val)
instance Data.Aeson.ToJSON SubscriptionPlan'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (subscriptionPlan'Active obj) : (Data.Aeson..=) "aggregate_usage" (subscriptionPlan'AggregateUsage obj) : (Data.Aeson..=) "amount" (subscriptionPlan'Amount obj) : (Data.Aeson..=) "amount_decimal" (subscriptionPlan'AmountDecimal obj) : (Data.Aeson..=) "billing_scheme" (subscriptionPlan'BillingScheme obj) : (Data.Aeson..=) "created" (subscriptionPlan'Created obj) : (Data.Aeson..=) "currency" (subscriptionPlan'Currency obj) : (Data.Aeson..=) "id" (subscriptionPlan'Id obj) : (Data.Aeson..=) "interval" (subscriptionPlan'Interval obj) : (Data.Aeson..=) "interval_count" (subscriptionPlan'IntervalCount obj) : (Data.Aeson..=) "livemode" (subscriptionPlan'Livemode obj) : (Data.Aeson..=) "metadata" (subscriptionPlan'Metadata obj) : (Data.Aeson..=) "nickname" (subscriptionPlan'Nickname obj) : (Data.Aeson..=) "object" (subscriptionPlan'Object obj) : (Data.Aeson..=) "product" (subscriptionPlan'Product obj) : (Data.Aeson..=) "tiers" (subscriptionPlan'Tiers obj) : (Data.Aeson..=) "tiers_mode" (subscriptionPlan'TiersMode obj) : (Data.Aeson..=) "transform_usage" (subscriptionPlan'TransformUsage obj) : (Data.Aeson..=) "trial_period_days" (subscriptionPlan'TrialPeriodDays obj) : (Data.Aeson..=) "usage_type" (subscriptionPlan'UsageType obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (subscriptionPlan'Active obj) GHC.Base.<> ((Data.Aeson..=) "aggregate_usage" (subscriptionPlan'AggregateUsage obj) GHC.Base.<> ((Data.Aeson..=) "amount" (subscriptionPlan'Amount obj) GHC.Base.<> ((Data.Aeson..=) "amount_decimal" (subscriptionPlan'AmountDecimal obj) GHC.Base.<> ((Data.Aeson..=) "billing_scheme" (subscriptionPlan'BillingScheme obj) GHC.Base.<> ((Data.Aeson..=) "created" (subscriptionPlan'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (subscriptionPlan'Currency obj) GHC.Base.<> ((Data.Aeson..=) "id" (subscriptionPlan'Id obj) GHC.Base.<> ((Data.Aeson..=) "interval" (subscriptionPlan'Interval obj) GHC.Base.<> ((Data.Aeson..=) "interval_count" (subscriptionPlan'IntervalCount obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (subscriptionPlan'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (subscriptionPlan'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "nickname" (subscriptionPlan'Nickname obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionPlan'Object obj) GHC.Base.<> ((Data.Aeson..=) "product" (subscriptionPlan'Product obj) GHC.Base.<> ((Data.Aeson..=) "tiers" (subscriptionPlan'Tiers obj) GHC.Base.<> ((Data.Aeson..=) "tiers_mode" (subscriptionPlan'TiersMode obj) GHC.Base.<> ((Data.Aeson..=) "transform_usage" (subscriptionPlan'TransformUsage obj) GHC.Base.<> ((Data.Aeson..=) "trial_period_days" (subscriptionPlan'TrialPeriodDays obj) GHC.Base.<> (Data.Aeson..=) "usage_type" (subscriptionPlan'UsageType obj))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPlan'" (\obj -> (((((((((((((((((((GHC.Base.pure SubscriptionPlan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "aggregate_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_scheme")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transform_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_period_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_type"))
data SubscriptionSchedule'Variants
    = SubscriptionSchedule'Variant1 SubscriptionSchedule
    | SubscriptionSchedule'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionSchedule'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionSchedule'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionStatus'
    = SubscriptionStatus'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionStatus'EnumTyped GHC.Base.String
    | SubscriptionStatus'EnumStringActive
    | SubscriptionStatus'EnumStringCanceled
    | SubscriptionStatus'EnumStringIncomplete
    | SubscriptionStatus'EnumStringIncompleteExpired
    | SubscriptionStatus'EnumStringPastDue
    | SubscriptionStatus'EnumStringTrialing
    | SubscriptionStatus'EnumStringUnpaid
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionStatus'
    where toJSON (SubscriptionStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionStatus'EnumStringActive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
          toJSON (SubscriptionStatus'EnumStringCanceled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled"
          toJSON (SubscriptionStatus'EnumStringIncomplete) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "incomplete"
          toJSON (SubscriptionStatus'EnumStringIncompleteExpired) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "incomplete_expired"
          toJSON (SubscriptionStatus'EnumStringPastDue) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "past_due"
          toJSON (SubscriptionStatus'EnumStringTrialing) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trialing"
          toJSON (SubscriptionStatus'EnumStringUnpaid) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unpaid"
instance Data.Aeson.FromJSON SubscriptionStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
                                          then SubscriptionStatus'EnumStringActive
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled")
                                                then SubscriptionStatus'EnumStringCanceled
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "incomplete")
                                                      then SubscriptionStatus'EnumStringIncomplete
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "incomplete_expired")
                                                            then SubscriptionStatus'EnumStringIncompleteExpired
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "past_due")
                                                                  then SubscriptionStatus'EnumStringPastDue
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "trialing")
                                                                        then SubscriptionStatus'EnumStringTrialing
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unpaid")
                                                                              then SubscriptionStatus'EnumStringUnpaid
                                                                              else SubscriptionStatus'EnumOther val)
instance Data.Aeson.ToJSON Subscription
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "application_fee_percent" (subscriptionApplicationFeePercent obj) : (Data.Aeson..=) "billing_cycle_anchor" (subscriptionBillingCycleAnchor obj) : (Data.Aeson..=) "billing_thresholds" (subscriptionBillingThresholds obj) : (Data.Aeson..=) "cancel_at" (subscriptionCancelAt obj) : (Data.Aeson..=) "cancel_at_period_end" (subscriptionCancelAtPeriodEnd obj) : (Data.Aeson..=) "canceled_at" (subscriptionCanceledAt obj) : (Data.Aeson..=) "collection_method" (subscriptionCollectionMethod obj) : (Data.Aeson..=) "created" (subscriptionCreated obj) : (Data.Aeson..=) "current_period_end" (subscriptionCurrentPeriodEnd obj) : (Data.Aeson..=) "current_period_start" (subscriptionCurrentPeriodStart obj) : (Data.Aeson..=) "customer" (subscriptionCustomer obj) : (Data.Aeson..=) "days_until_due" (subscriptionDaysUntilDue obj) : (Data.Aeson..=) "default_payment_method" (subscriptionDefaultPaymentMethod obj) : (Data.Aeson..=) "default_source" (subscriptionDefaultSource obj) : (Data.Aeson..=) "default_tax_rates" (subscriptionDefaultTaxRates obj) : (Data.Aeson..=) "discount" (subscriptionDiscount obj) : (Data.Aeson..=) "ended_at" (subscriptionEndedAt obj) : (Data.Aeson..=) "id" (subscriptionId obj) : (Data.Aeson..=) "items" (subscriptionItems obj) : (Data.Aeson..=) "latest_invoice" (subscriptionLatestInvoice obj) : (Data.Aeson..=) "livemode" (subscriptionLivemode obj) : (Data.Aeson..=) "metadata" (subscriptionMetadata obj) : (Data.Aeson..=) "next_pending_invoice_item_invoice" (subscriptionNextPendingInvoiceItemInvoice obj) : (Data.Aeson..=) "object" (subscriptionObject obj) : (Data.Aeson..=) "pending_invoice_item_interval" (subscriptionPendingInvoiceItemInterval obj) : (Data.Aeson..=) "pending_setup_intent" (subscriptionPendingSetupIntent obj) : (Data.Aeson..=) "pending_update" (subscriptionPendingUpdate obj) : (Data.Aeson..=) "plan" (subscriptionPlan obj) : (Data.Aeson..=) "quantity" (subscriptionQuantity obj) : (Data.Aeson..=) "schedule" (subscriptionSchedule obj) : (Data.Aeson..=) "start_date" (subscriptionStartDate obj) : (Data.Aeson..=) "status" (subscriptionStatus obj) : (Data.Aeson..=) "tax_percent" (subscriptionTaxPercent obj) : (Data.Aeson..=) "trial_end" (subscriptionTrialEnd obj) : (Data.Aeson..=) "trial_start" (subscriptionTrialStart obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "application_fee_percent" (subscriptionApplicationFeePercent obj) GHC.Base.<> ((Data.Aeson..=) "billing_cycle_anchor" (subscriptionBillingCycleAnchor obj) GHC.Base.<> ((Data.Aeson..=) "billing_thresholds" (subscriptionBillingThresholds obj) GHC.Base.<> ((Data.Aeson..=) "cancel_at" (subscriptionCancelAt obj) GHC.Base.<> ((Data.Aeson..=) "cancel_at_period_end" (subscriptionCancelAtPeriodEnd obj) GHC.Base.<> ((Data.Aeson..=) "canceled_at" (subscriptionCanceledAt obj) GHC.Base.<> ((Data.Aeson..=) "collection_method" (subscriptionCollectionMethod obj) GHC.Base.<> ((Data.Aeson..=) "created" (subscriptionCreated obj) GHC.Base.<> ((Data.Aeson..=) "current_period_end" (subscriptionCurrentPeriodEnd obj) GHC.Base.<> ((Data.Aeson..=) "current_period_start" (subscriptionCurrentPeriodStart obj) GHC.Base.<> ((Data.Aeson..=) "customer" (subscriptionCustomer obj) GHC.Base.<> ((Data.Aeson..=) "days_until_due" (subscriptionDaysUntilDue obj) GHC.Base.<> ((Data.Aeson..=) "default_payment_method" (subscriptionDefaultPaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "default_source" (subscriptionDefaultSource obj) GHC.Base.<> ((Data.Aeson..=) "default_tax_rates" (subscriptionDefaultTaxRates obj) GHC.Base.<> ((Data.Aeson..=) "discount" (subscriptionDiscount obj) GHC.Base.<> ((Data.Aeson..=) "ended_at" (subscriptionEndedAt obj) GHC.Base.<> ((Data.Aeson..=) "id" (subscriptionId obj) GHC.Base.<> ((Data.Aeson..=) "items" (subscriptionItems obj) GHC.Base.<> ((Data.Aeson..=) "latest_invoice" (subscriptionLatestInvoice obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (subscriptionLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (subscriptionMetadata obj) GHC.Base.<> ((Data.Aeson..=) "next_pending_invoice_item_invoice" (subscriptionNextPendingInvoiceItemInvoice obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionObject obj) GHC.Base.<> ((Data.Aeson..=) "pending_invoice_item_interval" (subscriptionPendingInvoiceItemInterval obj) GHC.Base.<> ((Data.Aeson..=) "pending_setup_intent" (subscriptionPendingSetupIntent obj) GHC.Base.<> ((Data.Aeson..=) "pending_update" (subscriptionPendingUpdate obj) GHC.Base.<> ((Data.Aeson..=) "plan" (subscriptionPlan obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (subscriptionQuantity obj) GHC.Base.<> ((Data.Aeson..=) "schedule" (subscriptionSchedule obj) GHC.Base.<> ((Data.Aeson..=) "start_date" (subscriptionStartDate obj) GHC.Base.<> ((Data.Aeson..=) "status" (subscriptionStatus obj) GHC.Base.<> ((Data.Aeson..=) "tax_percent" (subscriptionTaxPercent obj) GHC.Base.<> ((Data.Aeson..=) "trial_end" (subscriptionTrialEnd obj) GHC.Base.<> (Data.Aeson..=) "trial_start" (subscriptionTrialStart obj)))))))))))))))))))))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Subscription
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Subscription" (\obj -> ((((((((((((((((((((((((((((((((((GHC.Base.pure Subscription GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "billing_cycle_anchor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_thresholds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cancel_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cancel_at_period_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "canceled_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "current_period_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "current_period_start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "days_until_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "discount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ended_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "latest_invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "next_pending_invoice_item_invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pending_invoice_item_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pending_setup_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pending_update")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "schedule")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "start_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_start"))
data SubscriptionItem
    = SubscriptionItem {subscriptionItemBillingThresholds :: (GHC.Maybe.Maybe SubscriptionItemBillingThresholds'),
                        subscriptionItemCreated :: GHC.Integer.Type.Integer,
                        subscriptionItemId :: GHC.Base.String,
                        subscriptionItemMetadata :: SubscriptionItemMetadata',
                        subscriptionItemObject :: SubscriptionItemObject',
                        subscriptionItemPlan :: Plan,
                        subscriptionItemQuantity :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                        subscriptionItemSubscription :: GHC.Base.String,
                        subscriptionItemTaxRates :: (GHC.Maybe.Maybe ([] TaxRate))}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionItemBillingThresholds'
    = SubscriptionItemBillingThresholds' {subscriptionItemBillingThresholds'UsageGte :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionItemBillingThresholds'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "usage_gte" (subscriptionItemBillingThresholds'UsageGte obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "usage_gte" (subscriptionItemBillingThresholds'UsageGte obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionItemBillingThresholds'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionItemBillingThresholds'" (\obj -> GHC.Base.pure SubscriptionItemBillingThresholds' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_gte"))
data SubscriptionItemMetadata'
    = SubscriptionItemMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionItemMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionItemMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionItemMetadata'" (\obj -> GHC.Base.pure SubscriptionItemMetadata')
data SubscriptionItemObject'
    = SubscriptionItemObject'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionItemObject'EnumTyped GHC.Base.String
    | SubscriptionItemObject'EnumStringSubscriptionItem
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionItemObject'
    where toJSON (SubscriptionItemObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionItemObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionItemObject'EnumStringSubscriptionItem) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_item"
instance Data.Aeson.FromJSON SubscriptionItemObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_item")
                                          then SubscriptionItemObject'EnumStringSubscriptionItem
                                          else SubscriptionItemObject'EnumOther val)
instance Data.Aeson.ToJSON SubscriptionItem
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_thresholds" (subscriptionItemBillingThresholds obj) : (Data.Aeson..=) "created" (subscriptionItemCreated obj) : (Data.Aeson..=) "id" (subscriptionItemId obj) : (Data.Aeson..=) "metadata" (subscriptionItemMetadata obj) : (Data.Aeson..=) "object" (subscriptionItemObject obj) : (Data.Aeson..=) "plan" (subscriptionItemPlan obj) : (Data.Aeson..=) "quantity" (subscriptionItemQuantity obj) : (Data.Aeson..=) "subscription" (subscriptionItemSubscription obj) : (Data.Aeson..=) "tax_rates" (subscriptionItemTaxRates obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_thresholds" (subscriptionItemBillingThresholds obj) GHC.Base.<> ((Data.Aeson..=) "created" (subscriptionItemCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (subscriptionItemId obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (subscriptionItemMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionItemObject obj) GHC.Base.<> ((Data.Aeson..=) "plan" (subscriptionItemPlan obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (subscriptionItemQuantity obj) GHC.Base.<> ((Data.Aeson..=) "subscription" (subscriptionItemSubscription obj) GHC.Base.<> (Data.Aeson..=) "tax_rates" (subscriptionItemTaxRates obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionItem" (\obj -> ((((((((GHC.Base.pure SubscriptionItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_thresholds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_rates"))
data SubscriptionSchedule
    = SubscriptionSchedule {subscriptionScheduleCanceledAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                            subscriptionScheduleCompletedAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                            subscriptionScheduleCreated :: GHC.Integer.Type.Integer,
                            subscriptionScheduleCurrentPhase :: (GHC.Maybe.Maybe SubscriptionScheduleCurrentPhase'),
                            subscriptionScheduleCustomer :: SubscriptionScheduleCustomer'Variants,
                            subscriptionScheduleDefaultSettings :: SubscriptionSchedulesResourceDefaultSettings,
                            subscriptionScheduleEndBehavior :: SubscriptionScheduleEndBehavior',
                            subscriptionScheduleId :: GHC.Base.String,
                            subscriptionScheduleLivemode :: GHC.Types.Bool,
                            subscriptionScheduleMetadata :: (GHC.Maybe.Maybe SubscriptionScheduleMetadata'),
                            subscriptionScheduleObject :: SubscriptionScheduleObject',
                            subscriptionSchedulePhases :: ([] SubscriptionSchedulePhaseConfiguration),
                            subscriptionScheduleReleasedAt :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                            subscriptionScheduleReleasedSubscription :: (GHC.Maybe.Maybe GHC.Base.String),
                            subscriptionScheduleStatus :: SubscriptionScheduleStatus',
                            subscriptionScheduleSubscription :: (GHC.Maybe.Maybe SubscriptionScheduleSubscription'Variants)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionScheduleCurrentPhase'
    = SubscriptionScheduleCurrentPhase' {subscriptionScheduleCurrentPhase'EndDate :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                         subscriptionScheduleCurrentPhase'StartDate :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionScheduleCurrentPhase'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "end_date" (subscriptionScheduleCurrentPhase'EndDate obj) : (Data.Aeson..=) "start_date" (subscriptionScheduleCurrentPhase'StartDate obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "end_date" (subscriptionScheduleCurrentPhase'EndDate obj) GHC.Base.<> (Data.Aeson..=) "start_date" (subscriptionScheduleCurrentPhase'StartDate obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionScheduleCurrentPhase'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionScheduleCurrentPhase'" (\obj -> (GHC.Base.pure SubscriptionScheduleCurrentPhase' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "end_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "start_date"))
data SubscriptionScheduleCustomer'Variants
    = SubscriptionScheduleCustomer'Variant1 Customer
    | SubscriptionScheduleCustomer'Variant2 DeletedCustomer
    | SubscriptionScheduleCustomer'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionScheduleCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionScheduleCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionScheduleEndBehavior'
    = SubscriptionScheduleEndBehavior'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionScheduleEndBehavior'EnumTyped GHC.Base.String
    | SubscriptionScheduleEndBehavior'EnumStringCancel
    | SubscriptionScheduleEndBehavior'EnumStringNone
    | SubscriptionScheduleEndBehavior'EnumStringRelease
    | SubscriptionScheduleEndBehavior'EnumStringRenew
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionScheduleEndBehavior'
    where toJSON (SubscriptionScheduleEndBehavior'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionScheduleEndBehavior'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionScheduleEndBehavior'EnumStringCancel) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cancel"
          toJSON (SubscriptionScheduleEndBehavior'EnumStringNone) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
          toJSON (SubscriptionScheduleEndBehavior'EnumStringRelease) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "release"
          toJSON (SubscriptionScheduleEndBehavior'EnumStringRenew) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "renew"
instance Data.Aeson.FromJSON SubscriptionScheduleEndBehavior'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "cancel")
                                          then SubscriptionScheduleEndBehavior'EnumStringCancel
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                                then SubscriptionScheduleEndBehavior'EnumStringNone
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "release")
                                                      then SubscriptionScheduleEndBehavior'EnumStringRelease
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "renew")
                                                            then SubscriptionScheduleEndBehavior'EnumStringRenew
                                                            else SubscriptionScheduleEndBehavior'EnumOther val)
data SubscriptionScheduleMetadata'
    = SubscriptionScheduleMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionScheduleMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionScheduleMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionScheduleMetadata'" (\obj -> GHC.Base.pure SubscriptionScheduleMetadata')
data SubscriptionScheduleObject'
    = SubscriptionScheduleObject'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionScheduleObject'EnumTyped GHC.Base.String
    | SubscriptionScheduleObject'EnumStringSubscriptionSchedule
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionScheduleObject'
    where toJSON (SubscriptionScheduleObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionScheduleObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionScheduleObject'EnumStringSubscriptionSchedule) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_schedule"
instance Data.Aeson.FromJSON SubscriptionScheduleObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "subscription_schedule")
                                          then SubscriptionScheduleObject'EnumStringSubscriptionSchedule
                                          else SubscriptionScheduleObject'EnumOther val)
data SubscriptionScheduleStatus'
    = SubscriptionScheduleStatus'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionScheduleStatus'EnumTyped GHC.Base.String
    | SubscriptionScheduleStatus'EnumStringActive
    | SubscriptionScheduleStatus'EnumStringCanceled
    | SubscriptionScheduleStatus'EnumStringCompleted
    | SubscriptionScheduleStatus'EnumStringNotStarted
    | SubscriptionScheduleStatus'EnumStringReleased
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionScheduleStatus'
    where toJSON (SubscriptionScheduleStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionScheduleStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionScheduleStatus'EnumStringActive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
          toJSON (SubscriptionScheduleStatus'EnumStringCanceled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled"
          toJSON (SubscriptionScheduleStatus'EnumStringCompleted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "completed"
          toJSON (SubscriptionScheduleStatus'EnumStringNotStarted) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "not_started"
          toJSON (SubscriptionScheduleStatus'EnumStringReleased) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "released"
instance Data.Aeson.FromJSON SubscriptionScheduleStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
                                          then SubscriptionScheduleStatus'EnumStringActive
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled")
                                                then SubscriptionScheduleStatus'EnumStringCanceled
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "completed")
                                                      then SubscriptionScheduleStatus'EnumStringCompleted
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "not_started")
                                                            then SubscriptionScheduleStatus'EnumStringNotStarted
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "released")
                                                                  then SubscriptionScheduleStatus'EnumStringReleased
                                                                  else SubscriptionScheduleStatus'EnumOther val)
data SubscriptionScheduleSubscription'Variants
    = SubscriptionScheduleSubscription'Variant1 Subscription
    | SubscriptionScheduleSubscription'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionScheduleSubscription'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionScheduleSubscription'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON SubscriptionSchedule
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "canceled_at" (subscriptionScheduleCanceledAt obj) : (Data.Aeson..=) "completed_at" (subscriptionScheduleCompletedAt obj) : (Data.Aeson..=) "created" (subscriptionScheduleCreated obj) : (Data.Aeson..=) "current_phase" (subscriptionScheduleCurrentPhase obj) : (Data.Aeson..=) "customer" (subscriptionScheduleCustomer obj) : (Data.Aeson..=) "default_settings" (subscriptionScheduleDefaultSettings obj) : (Data.Aeson..=) "end_behavior" (subscriptionScheduleEndBehavior obj) : (Data.Aeson..=) "id" (subscriptionScheduleId obj) : (Data.Aeson..=) "livemode" (subscriptionScheduleLivemode obj) : (Data.Aeson..=) "metadata" (subscriptionScheduleMetadata obj) : (Data.Aeson..=) "object" (subscriptionScheduleObject obj) : (Data.Aeson..=) "phases" (subscriptionSchedulePhases obj) : (Data.Aeson..=) "released_at" (subscriptionScheduleReleasedAt obj) : (Data.Aeson..=) "released_subscription" (subscriptionScheduleReleasedSubscription obj) : (Data.Aeson..=) "status" (subscriptionScheduleStatus obj) : (Data.Aeson..=) "subscription" (subscriptionScheduleSubscription obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "canceled_at" (subscriptionScheduleCanceledAt obj) GHC.Base.<> ((Data.Aeson..=) "completed_at" (subscriptionScheduleCompletedAt obj) GHC.Base.<> ((Data.Aeson..=) "created" (subscriptionScheduleCreated obj) GHC.Base.<> ((Data.Aeson..=) "current_phase" (subscriptionScheduleCurrentPhase obj) GHC.Base.<> ((Data.Aeson..=) "customer" (subscriptionScheduleCustomer obj) GHC.Base.<> ((Data.Aeson..=) "default_settings" (subscriptionScheduleDefaultSettings obj) GHC.Base.<> ((Data.Aeson..=) "end_behavior" (subscriptionScheduleEndBehavior obj) GHC.Base.<> ((Data.Aeson..=) "id" (subscriptionScheduleId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (subscriptionScheduleLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (subscriptionScheduleMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionScheduleObject obj) GHC.Base.<> ((Data.Aeson..=) "phases" (subscriptionSchedulePhases obj) GHC.Base.<> ((Data.Aeson..=) "released_at" (subscriptionScheduleReleasedAt obj) GHC.Base.<> ((Data.Aeson..=) "released_subscription" (subscriptionScheduleReleasedSubscription obj) GHC.Base.<> ((Data.Aeson..=) "status" (subscriptionScheduleStatus obj) GHC.Base.<> (Data.Aeson..=) "subscription" (subscriptionScheduleSubscription obj))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionSchedule
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionSchedule" (\obj -> (((((((((((((((GHC.Base.pure SubscriptionSchedule GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "canceled_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "completed_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "current_phase")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "default_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "end_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "phases")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "released_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "released_subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription"))
data SubscriptionScheduleConfigurationItem
    = SubscriptionScheduleConfigurationItem {subscriptionScheduleConfigurationItemBillingThresholds :: (GHC.Maybe.Maybe SubscriptionScheduleConfigurationItemBillingThresholds'),
                                             subscriptionScheduleConfigurationItemPlan :: SubscriptionScheduleConfigurationItemPlan'Variants,
                                             subscriptionScheduleConfigurationItemQuantity :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                             subscriptionScheduleConfigurationItemTaxRates :: (GHC.Maybe.Maybe ([] TaxRate))}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionScheduleConfigurationItemBillingThresholds'
    = SubscriptionScheduleConfigurationItemBillingThresholds' {subscriptionScheduleConfigurationItemBillingThresholds'UsageGte :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionScheduleConfigurationItemBillingThresholds'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "usage_gte" (subscriptionScheduleConfigurationItemBillingThresholds'UsageGte obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "usage_gte" (subscriptionScheduleConfigurationItemBillingThresholds'UsageGte obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionScheduleConfigurationItemBillingThresholds'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionScheduleConfigurationItemBillingThresholds'" (\obj -> GHC.Base.pure SubscriptionScheduleConfigurationItemBillingThresholds' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_gte"))
data SubscriptionScheduleConfigurationItemPlan'Variants
    = SubscriptionScheduleConfigurationItemPlan'Variant1 DeletedPlan
    | SubscriptionScheduleConfigurationItemPlan'Variant2 Plan
    | SubscriptionScheduleConfigurationItemPlan'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionScheduleConfigurationItemPlan'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionScheduleConfigurationItemPlan'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON SubscriptionScheduleConfigurationItem
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_thresholds" (subscriptionScheduleConfigurationItemBillingThresholds obj) : (Data.Aeson..=) "plan" (subscriptionScheduleConfigurationItemPlan obj) : (Data.Aeson..=) "quantity" (subscriptionScheduleConfigurationItemQuantity obj) : (Data.Aeson..=) "tax_rates" (subscriptionScheduleConfigurationItemTaxRates obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_thresholds" (subscriptionScheduleConfigurationItemBillingThresholds obj) GHC.Base.<> ((Data.Aeson..=) "plan" (subscriptionScheduleConfigurationItemPlan obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (subscriptionScheduleConfigurationItemQuantity obj) GHC.Base.<> (Data.Aeson..=) "tax_rates" (subscriptionScheduleConfigurationItemTaxRates obj))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionScheduleConfigurationItem
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionScheduleConfigurationItem" (\obj -> (((GHC.Base.pure SubscriptionScheduleConfigurationItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_thresholds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_rates"))
data SubscriptionSchedulePhaseConfiguration
    = SubscriptionSchedulePhaseConfiguration {subscriptionSchedulePhaseConfigurationApplicationFeePercent :: (GHC.Maybe.Maybe GHC.Types.Double),
                                              subscriptionSchedulePhaseConfigurationBillingThresholds :: (GHC.Maybe.Maybe SubscriptionSchedulePhaseConfigurationBillingThresholds'),
                                              subscriptionSchedulePhaseConfigurationCollectionMethod :: (GHC.Maybe.Maybe SubscriptionSchedulePhaseConfigurationCollectionMethod'),
                                              subscriptionSchedulePhaseConfigurationCoupon :: (GHC.Maybe.Maybe SubscriptionSchedulePhaseConfigurationCoupon'Variants),
                                              subscriptionSchedulePhaseConfigurationDefaultPaymentMethod :: (GHC.Maybe.Maybe SubscriptionSchedulePhaseConfigurationDefaultPaymentMethod'Variants),
                                              subscriptionSchedulePhaseConfigurationDefaultTaxRates :: (GHC.Maybe.Maybe ([] TaxRate)),
                                              subscriptionSchedulePhaseConfigurationEndDate :: GHC.Integer.Type.Integer,
                                              subscriptionSchedulePhaseConfigurationInvoiceSettings :: (GHC.Maybe.Maybe SubscriptionSchedulePhaseConfigurationInvoiceSettings'),
                                              subscriptionSchedulePhaseConfigurationPlans :: ([] SubscriptionScheduleConfigurationItem),
                                              subscriptionSchedulePhaseConfigurationProrationBehavior :: (GHC.Maybe.Maybe SubscriptionSchedulePhaseConfigurationProrationBehavior'),
                                              subscriptionSchedulePhaseConfigurationStartDate :: GHC.Integer.Type.Integer,
                                              subscriptionSchedulePhaseConfigurationTaxPercent :: (GHC.Maybe.Maybe GHC.Types.Double),
                                              subscriptionSchedulePhaseConfigurationTrialEnd :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionSchedulePhaseConfigurationBillingThresholds'
    = SubscriptionSchedulePhaseConfigurationBillingThresholds' {subscriptionSchedulePhaseConfigurationBillingThresholds'AmountGte :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                                                subscriptionSchedulePhaseConfigurationBillingThresholds'ResetBillingCycleAnchor :: (GHC.Maybe.Maybe GHC.Types.Bool)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionSchedulePhaseConfigurationBillingThresholds'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount_gte" (subscriptionSchedulePhaseConfigurationBillingThresholds'AmountGte obj) : (Data.Aeson..=) "reset_billing_cycle_anchor" (subscriptionSchedulePhaseConfigurationBillingThresholds'ResetBillingCycleAnchor obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount_gte" (subscriptionSchedulePhaseConfigurationBillingThresholds'AmountGte obj) GHC.Base.<> (Data.Aeson..=) "reset_billing_cycle_anchor" (subscriptionSchedulePhaseConfigurationBillingThresholds'ResetBillingCycleAnchor obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionSchedulePhaseConfigurationBillingThresholds'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionSchedulePhaseConfigurationBillingThresholds'" (\obj -> (GHC.Base.pure SubscriptionSchedulePhaseConfigurationBillingThresholds' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reset_billing_cycle_anchor"))
data SubscriptionSchedulePhaseConfigurationCollectionMethod'
    = SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumTyped GHC.Base.String
    | SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumStringChargeAutomatically
    | SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumStringSendInvoice
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionSchedulePhaseConfigurationCollectionMethod'
    where toJSON (SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumStringChargeAutomatically) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_automatically"
          toJSON (SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumStringSendInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "send_invoice"
instance Data.Aeson.FromJSON SubscriptionSchedulePhaseConfigurationCollectionMethod'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_automatically")
                                          then SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumStringChargeAutomatically
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "send_invoice")
                                                then SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumStringSendInvoice
                                                else SubscriptionSchedulePhaseConfigurationCollectionMethod'EnumOther val)
data SubscriptionSchedulePhaseConfigurationCoupon'Variants
    = SubscriptionSchedulePhaseConfigurationCoupon'Variant1 Coupon
    | SubscriptionSchedulePhaseConfigurationCoupon'Variant2 DeletedCoupon
    | SubscriptionSchedulePhaseConfigurationCoupon'Variant3 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionSchedulePhaseConfigurationCoupon'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionSchedulePhaseConfigurationCoupon'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionSchedulePhaseConfigurationDefaultPaymentMethod'Variants
    = SubscriptionSchedulePhaseConfigurationDefaultPaymentMethod'Variant1 PaymentMethod
    | SubscriptionSchedulePhaseConfigurationDefaultPaymentMethod'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionSchedulePhaseConfigurationDefaultPaymentMethod'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionSchedulePhaseConfigurationDefaultPaymentMethod'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionSchedulePhaseConfigurationInvoiceSettings'
    = SubscriptionSchedulePhaseConfigurationInvoiceSettings' {subscriptionSchedulePhaseConfigurationInvoiceSettings'DaysUntilDue :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionSchedulePhaseConfigurationInvoiceSettings'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "days_until_due" (subscriptionSchedulePhaseConfigurationInvoiceSettings'DaysUntilDue obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "days_until_due" (subscriptionSchedulePhaseConfigurationInvoiceSettings'DaysUntilDue obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionSchedulePhaseConfigurationInvoiceSettings'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionSchedulePhaseConfigurationInvoiceSettings'" (\obj -> GHC.Base.pure SubscriptionSchedulePhaseConfigurationInvoiceSettings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "days_until_due"))
data SubscriptionSchedulePhaseConfigurationProrationBehavior'
    = SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumTyped GHC.Base.String
    | SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumStringAlwaysInvoice
    | SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumStringCreateProrations
    | SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumStringNone
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionSchedulePhaseConfigurationProrationBehavior'
    where toJSON (SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumStringAlwaysInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "always_invoice"
          toJSON (SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumStringCreateProrations) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "create_prorations"
          toJSON (SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumStringNone) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none"
instance Data.Aeson.FromJSON SubscriptionSchedulePhaseConfigurationProrationBehavior'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "always_invoice")
                                          then SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumStringAlwaysInvoice
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "create_prorations")
                                                then SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumStringCreateProrations
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "none")
                                                      then SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumStringNone
                                                      else SubscriptionSchedulePhaseConfigurationProrationBehavior'EnumOther val)
instance Data.Aeson.ToJSON SubscriptionSchedulePhaseConfiguration
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "application_fee_percent" (subscriptionSchedulePhaseConfigurationApplicationFeePercent obj) : (Data.Aeson..=) "billing_thresholds" (subscriptionSchedulePhaseConfigurationBillingThresholds obj) : (Data.Aeson..=) "collection_method" (subscriptionSchedulePhaseConfigurationCollectionMethod obj) : (Data.Aeson..=) "coupon" (subscriptionSchedulePhaseConfigurationCoupon obj) : (Data.Aeson..=) "default_payment_method" (subscriptionSchedulePhaseConfigurationDefaultPaymentMethod obj) : (Data.Aeson..=) "default_tax_rates" (subscriptionSchedulePhaseConfigurationDefaultTaxRates obj) : (Data.Aeson..=) "end_date" (subscriptionSchedulePhaseConfigurationEndDate obj) : (Data.Aeson..=) "invoice_settings" (subscriptionSchedulePhaseConfigurationInvoiceSettings obj) : (Data.Aeson..=) "plans" (subscriptionSchedulePhaseConfigurationPlans obj) : (Data.Aeson..=) "proration_behavior" (subscriptionSchedulePhaseConfigurationProrationBehavior obj) : (Data.Aeson..=) "start_date" (subscriptionSchedulePhaseConfigurationStartDate obj) : (Data.Aeson..=) "tax_percent" (subscriptionSchedulePhaseConfigurationTaxPercent obj) : (Data.Aeson..=) "trial_end" (subscriptionSchedulePhaseConfigurationTrialEnd obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "application_fee_percent" (subscriptionSchedulePhaseConfigurationApplicationFeePercent obj) GHC.Base.<> ((Data.Aeson..=) "billing_thresholds" (subscriptionSchedulePhaseConfigurationBillingThresholds obj) GHC.Base.<> ((Data.Aeson..=) "collection_method" (subscriptionSchedulePhaseConfigurationCollectionMethod obj) GHC.Base.<> ((Data.Aeson..=) "coupon" (subscriptionSchedulePhaseConfigurationCoupon obj) GHC.Base.<> ((Data.Aeson..=) "default_payment_method" (subscriptionSchedulePhaseConfigurationDefaultPaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "default_tax_rates" (subscriptionSchedulePhaseConfigurationDefaultTaxRates obj) GHC.Base.<> ((Data.Aeson..=) "end_date" (subscriptionSchedulePhaseConfigurationEndDate obj) GHC.Base.<> ((Data.Aeson..=) "invoice_settings" (subscriptionSchedulePhaseConfigurationInvoiceSettings obj) GHC.Base.<> ((Data.Aeson..=) "plans" (subscriptionSchedulePhaseConfigurationPlans obj) GHC.Base.<> ((Data.Aeson..=) "proration_behavior" (subscriptionSchedulePhaseConfigurationProrationBehavior obj) GHC.Base.<> ((Data.Aeson..=) "start_date" (subscriptionSchedulePhaseConfigurationStartDate obj) GHC.Base.<> ((Data.Aeson..=) "tax_percent" (subscriptionSchedulePhaseConfigurationTaxPercent obj) GHC.Base.<> (Data.Aeson..=) "trial_end" (subscriptionSchedulePhaseConfigurationTrialEnd obj)))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionSchedulePhaseConfiguration
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionSchedulePhaseConfiguration" (\obj -> ((((((((((((GHC.Base.pure SubscriptionSchedulePhaseConfiguration GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_thresholds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "end_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "plans")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "proration_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "start_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_end"))
data SubscriptionSchedulesResourceDefaultSettings
    = SubscriptionSchedulesResourceDefaultSettings {subscriptionSchedulesResourceDefaultSettingsBillingThresholds :: (GHC.Maybe.Maybe SubscriptionSchedulesResourceDefaultSettingsBillingThresholds'),
                                                    subscriptionSchedulesResourceDefaultSettingsCollectionMethod :: (GHC.Maybe.Maybe SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'),
                                                    subscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod :: (GHC.Maybe.Maybe SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod'Variants),
                                                    subscriptionSchedulesResourceDefaultSettingsInvoiceSettings :: (GHC.Maybe.Maybe SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings')}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data SubscriptionSchedulesResourceDefaultSettingsBillingThresholds'
    = SubscriptionSchedulesResourceDefaultSettingsBillingThresholds' {subscriptionSchedulesResourceDefaultSettingsBillingThresholds'AmountGte :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                                                      subscriptionSchedulesResourceDefaultSettingsBillingThresholds'ResetBillingCycleAnchor :: (GHC.Maybe.Maybe GHC.Types.Bool)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionSchedulesResourceDefaultSettingsBillingThresholds'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount_gte" (subscriptionSchedulesResourceDefaultSettingsBillingThresholds'AmountGte obj) : (Data.Aeson..=) "reset_billing_cycle_anchor" (subscriptionSchedulesResourceDefaultSettingsBillingThresholds'ResetBillingCycleAnchor obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount_gte" (subscriptionSchedulesResourceDefaultSettingsBillingThresholds'AmountGte obj) GHC.Base.<> (Data.Aeson..=) "reset_billing_cycle_anchor" (subscriptionSchedulesResourceDefaultSettingsBillingThresholds'ResetBillingCycleAnchor obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionSchedulesResourceDefaultSettingsBillingThresholds'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionSchedulesResourceDefaultSettingsBillingThresholds'" (\obj -> (GHC.Base.pure SubscriptionSchedulesResourceDefaultSettingsBillingThresholds' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reset_billing_cycle_anchor"))
data SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'
    = SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumOther Data.Aeson.Types.Internal.Value
    | SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumTyped GHC.Base.String
    | SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumStringChargeAutomatically
    | SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumStringSendInvoice
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'
    where toJSON (SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumStringChargeAutomatically) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_automatically"
          toJSON (SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumStringSendInvoice) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "send_invoice"
instance Data.Aeson.FromJSON SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "charge_automatically")
                                          then SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumStringChargeAutomatically
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "send_invoice")
                                                then SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumStringSendInvoice
                                                else SubscriptionSchedulesResourceDefaultSettingsCollectionMethod'EnumOther val)
data SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod'Variants
    = SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod'Variant1 PaymentMethod
    | SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON SubscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings'
    = SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings' {subscriptionSchedulesResourceDefaultSettingsInvoiceSettings'DaysUntilDue :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "days_until_due" (subscriptionSchedulesResourceDefaultSettingsInvoiceSettings'DaysUntilDue obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "days_until_due" (subscriptionSchedulesResourceDefaultSettingsInvoiceSettings'DaysUntilDue obj))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings'" (\obj -> GHC.Base.pure SubscriptionSchedulesResourceDefaultSettingsInvoiceSettings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "days_until_due"))
instance Data.Aeson.ToJSON SubscriptionSchedulesResourceDefaultSettings
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_thresholds" (subscriptionSchedulesResourceDefaultSettingsBillingThresholds obj) : (Data.Aeson..=) "collection_method" (subscriptionSchedulesResourceDefaultSettingsCollectionMethod obj) : (Data.Aeson..=) "default_payment_method" (subscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod obj) : (Data.Aeson..=) "invoice_settings" (subscriptionSchedulesResourceDefaultSettingsInvoiceSettings obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_thresholds" (subscriptionSchedulesResourceDefaultSettingsBillingThresholds obj) GHC.Base.<> ((Data.Aeson..=) "collection_method" (subscriptionSchedulesResourceDefaultSettingsCollectionMethod obj) GHC.Base.<> ((Data.Aeson..=) "default_payment_method" (subscriptionSchedulesResourceDefaultSettingsDefaultPaymentMethod obj) GHC.Base.<> (Data.Aeson..=) "invoice_settings" (subscriptionSchedulesResourceDefaultSettingsInvoiceSettings obj))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionSchedulesResourceDefaultSettings
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionSchedulesResourceDefaultSettings" (\obj -> (((GHC.Base.pure SubscriptionSchedulesResourceDefaultSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_thresholds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_settings"))
data SubscriptionsResourcePendingUpdate
    = SubscriptionsResourcePendingUpdate {subscriptionsResourcePendingUpdateBillingCycleAnchor :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                          subscriptionsResourcePendingUpdateExpiresAt :: GHC.Integer.Type.Integer,
                                          subscriptionsResourcePendingUpdateSubscriptionItems :: (GHC.Maybe.Maybe ([] SubscriptionItem)),
                                          subscriptionsResourcePendingUpdateTrialEnd :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                                          subscriptionsResourcePendingUpdateTrialFromPlan :: (GHC.Maybe.Maybe GHC.Types.Bool)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON SubscriptionsResourcePendingUpdate
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_cycle_anchor" (subscriptionsResourcePendingUpdateBillingCycleAnchor obj) : (Data.Aeson..=) "expires_at" (subscriptionsResourcePendingUpdateExpiresAt obj) : (Data.Aeson..=) "subscription_items" (subscriptionsResourcePendingUpdateSubscriptionItems obj) : (Data.Aeson..=) "trial_end" (subscriptionsResourcePendingUpdateTrialEnd obj) : (Data.Aeson..=) "trial_from_plan" (subscriptionsResourcePendingUpdateTrialFromPlan obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_cycle_anchor" (subscriptionsResourcePendingUpdateBillingCycleAnchor obj) GHC.Base.<> ((Data.Aeson..=) "expires_at" (subscriptionsResourcePendingUpdateExpiresAt obj) GHC.Base.<> ((Data.Aeson..=) "subscription_items" (subscriptionsResourcePendingUpdateSubscriptionItems obj) GHC.Base.<> ((Data.Aeson..=) "trial_end" (subscriptionsResourcePendingUpdateTrialEnd obj) GHC.Base.<> (Data.Aeson..=) "trial_from_plan" (subscriptionsResourcePendingUpdateTrialFromPlan obj)))))
instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePendingUpdate
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePendingUpdate" (\obj -> ((((GHC.Base.pure SubscriptionsResourcePendingUpdate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_cycle_anchor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_from_plan"))
data TaxId
    = TaxId {taxIdCountry :: (GHC.Maybe.Maybe GHC.Base.String),
             taxIdCreated :: GHC.Integer.Type.Integer,
             taxIdCustomer :: TaxIdCustomer'Variants,
             taxIdId :: GHC.Base.String,
             taxIdLivemode :: GHC.Types.Bool,
             taxIdObject :: TaxIdObject',
             taxIdType :: TaxIdType',
             taxIdValue :: GHC.Base.String,
             taxIdVerification :: TaxIdVerification}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data TaxIdCustomer'Variants
    = TaxIdCustomer'Variant1 Customer
    | TaxIdCustomer'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TaxIdCustomer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TaxIdCustomer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data TaxIdObject'
    = TaxIdObject'EnumOther Data.Aeson.Types.Internal.Value
    | TaxIdObject'EnumTyped GHC.Base.String
    | TaxIdObject'EnumStringTaxId
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TaxIdObject'
    where toJSON (TaxIdObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TaxIdObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TaxIdObject'EnumStringTaxId) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_id"
instance Data.Aeson.FromJSON TaxIdObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tax_id")
                                          then TaxIdObject'EnumStringTaxId
                                          else TaxIdObject'EnumOther val)
data TaxIdType'
    = TaxIdType'EnumOther Data.Aeson.Types.Internal.Value
    | TaxIdType'EnumTyped GHC.Base.String
    | TaxIdType'EnumStringAuAbn
    | TaxIdType'EnumStringCaBn
    | TaxIdType'EnumStringCaQst
    | TaxIdType'EnumStringChVat
    | TaxIdType'EnumStringEsCif
    | TaxIdType'EnumStringEuVat
    | TaxIdType'EnumStringHkBr
    | TaxIdType'EnumStringInGst
    | TaxIdType'EnumStringJpCn
    | TaxIdType'EnumStringKrBrn
    | TaxIdType'EnumStringLiUid
    | TaxIdType'EnumStringMxRfc
    | TaxIdType'EnumStringMyItn
    | TaxIdType'EnumStringMySst
    | TaxIdType'EnumStringNoVat
    | TaxIdType'EnumStringNzGst
    | TaxIdType'EnumStringRuInn
    | TaxIdType'EnumStringSgUen
    | TaxIdType'EnumStringThVat
    | TaxIdType'EnumStringTwVat
    | TaxIdType'EnumStringUnknown
    | TaxIdType'EnumStringUsEin
    | TaxIdType'EnumStringZaVat
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TaxIdType'
    where toJSON (TaxIdType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TaxIdType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TaxIdType'EnumStringAuAbn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "au_abn"
          toJSON (TaxIdType'EnumStringCaBn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ca_bn"
          toJSON (TaxIdType'EnumStringCaQst) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ca_qst"
          toJSON (TaxIdType'EnumStringChVat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ch_vat"
          toJSON (TaxIdType'EnumStringEsCif) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "es_cif"
          toJSON (TaxIdType'EnumStringEuVat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eu_vat"
          toJSON (TaxIdType'EnumStringHkBr) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hk_br"
          toJSON (TaxIdType'EnumStringInGst) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in_gst"
          toJSON (TaxIdType'EnumStringJpCn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jp_cn"
          toJSON (TaxIdType'EnumStringKrBrn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "kr_brn"
          toJSON (TaxIdType'EnumStringLiUid) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "li_uid"
          toJSON (TaxIdType'EnumStringMxRfc) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mx_rfc"
          toJSON (TaxIdType'EnumStringMyItn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "my_itn"
          toJSON (TaxIdType'EnumStringMySst) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "my_sst"
          toJSON (TaxIdType'EnumStringNoVat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "no_vat"
          toJSON (TaxIdType'EnumStringNzGst) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nz_gst"
          toJSON (TaxIdType'EnumStringRuInn) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ru_inn"
          toJSON (TaxIdType'EnumStringSgUen) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sg_uen"
          toJSON (TaxIdType'EnumStringThVat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "th_vat"
          toJSON (TaxIdType'EnumStringTwVat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tw_vat"
          toJSON (TaxIdType'EnumStringUnknown) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unknown"
          toJSON (TaxIdType'EnumStringUsEin) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "us_ein"
          toJSON (TaxIdType'EnumStringZaVat) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "za_vat"
instance Data.Aeson.FromJSON TaxIdType'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "au_abn")
                                          then TaxIdType'EnumStringAuAbn
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ca_bn")
                                                then TaxIdType'EnumStringCaBn
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ca_qst")
                                                      then TaxIdType'EnumStringCaQst
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ch_vat")
                                                            then TaxIdType'EnumStringChVat
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "es_cif")
                                                                  then TaxIdType'EnumStringEsCif
                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "eu_vat")
                                                                        then TaxIdType'EnumStringEuVat
                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "hk_br")
                                                                              then TaxIdType'EnumStringHkBr
                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "in_gst")
                                                                                    then TaxIdType'EnumStringInGst
                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "jp_cn")
                                                                                          then TaxIdType'EnumStringJpCn
                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "kr_brn")
                                                                                                then TaxIdType'EnumStringKrBrn
                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "li_uid")
                                                                                                      then TaxIdType'EnumStringLiUid
                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "mx_rfc")
                                                                                                            then TaxIdType'EnumStringMxRfc
                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "my_itn")
                                                                                                                  then TaxIdType'EnumStringMyItn
                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "my_sst")
                                                                                                                        then TaxIdType'EnumStringMySst
                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "no_vat")
                                                                                                                              then TaxIdType'EnumStringNoVat
                                                                                                                              else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "nz_gst")
                                                                                                                                    then TaxIdType'EnumStringNzGst
                                                                                                                                    else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "ru_inn")
                                                                                                                                          then TaxIdType'EnumStringRuInn
                                                                                                                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "sg_uen")
                                                                                                                                                then TaxIdType'EnumStringSgUen
                                                                                                                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "th_vat")
                                                                                                                                                      then TaxIdType'EnumStringThVat
                                                                                                                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "tw_vat")
                                                                                                                                                            then TaxIdType'EnumStringTwVat
                                                                                                                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "unknown")
                                                                                                                                                                  then TaxIdType'EnumStringUnknown
                                                                                                                                                                  else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "us_ein")
                                                                                                                                                                        then TaxIdType'EnumStringUsEin
                                                                                                                                                                        else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "za_vat")
                                                                                                                                                                              then TaxIdType'EnumStringZaVat
                                                                                                                                                                              else TaxIdType'EnumOther val)
instance Data.Aeson.ToJSON TaxId
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "country" (taxIdCountry obj) : (Data.Aeson..=) "created" (taxIdCreated obj) : (Data.Aeson..=) "customer" (taxIdCustomer obj) : (Data.Aeson..=) "id" (taxIdId obj) : (Data.Aeson..=) "livemode" (taxIdLivemode obj) : (Data.Aeson..=) "object" (taxIdObject obj) : (Data.Aeson..=) "type" (taxIdType obj) : (Data.Aeson..=) "value" (taxIdValue obj) : (Data.Aeson..=) "verification" (taxIdVerification obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "country" (taxIdCountry obj) GHC.Base.<> ((Data.Aeson..=) "created" (taxIdCreated obj) GHC.Base.<> ((Data.Aeson..=) "customer" (taxIdCustomer obj) GHC.Base.<> ((Data.Aeson..=) "id" (taxIdId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (taxIdLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (taxIdObject obj) GHC.Base.<> ((Data.Aeson..=) "type" (taxIdType obj) GHC.Base.<> ((Data.Aeson..=) "value" (taxIdValue obj) GHC.Base.<> (Data.Aeson..=) "verification" (taxIdVerification obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON TaxId
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxId" (\obj -> ((((((((GHC.Base.pure TaxId GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "value")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verification"))
data ThreeDSecure
    = ThreeDSecure {threeDSecureAmount :: GHC.Integer.Type.Integer,
                    threeDSecureAuthenticated :: GHC.Types.Bool,
                    threeDSecureCard :: Card,
                    threeDSecureCreated :: GHC.Integer.Type.Integer,
                    threeDSecureCurrency :: GHC.Base.String,
                    threeDSecureId :: GHC.Base.String,
                    threeDSecureLivemode :: GHC.Types.Bool,
                    threeDSecureObject :: ThreeDSecureObject',
                    threeDSecureRedirectUrl :: (GHC.Maybe.Maybe GHC.Base.String),
                    threeDSecureStatus :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data ThreeDSecureObject'
    = ThreeDSecureObject'EnumOther Data.Aeson.Types.Internal.Value
    | ThreeDSecureObject'EnumTyped GHC.Base.String
    | ThreeDSecureObject'EnumStringThreeDSecure
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON ThreeDSecureObject'
    where toJSON (ThreeDSecureObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ThreeDSecureObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (ThreeDSecureObject'EnumStringThreeDSecure) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure"
instance Data.Aeson.FromJSON ThreeDSecureObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "three_d_secure")
                                          then ThreeDSecureObject'EnumStringThreeDSecure
                                          else ThreeDSecureObject'EnumOther val)
instance Data.Aeson.ToJSON ThreeDSecure
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (threeDSecureAmount obj) : (Data.Aeson..=) "authenticated" (threeDSecureAuthenticated obj) : (Data.Aeson..=) "card" (threeDSecureCard obj) : (Data.Aeson..=) "created" (threeDSecureCreated obj) : (Data.Aeson..=) "currency" (threeDSecureCurrency obj) : (Data.Aeson..=) "id" (threeDSecureId obj) : (Data.Aeson..=) "livemode" (threeDSecureLivemode obj) : (Data.Aeson..=) "object" (threeDSecureObject obj) : (Data.Aeson..=) "redirect_url" (threeDSecureRedirectUrl obj) : (Data.Aeson..=) "status" (threeDSecureStatus obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (threeDSecureAmount obj) GHC.Base.<> ((Data.Aeson..=) "authenticated" (threeDSecureAuthenticated obj) GHC.Base.<> ((Data.Aeson..=) "card" (threeDSecureCard obj) GHC.Base.<> ((Data.Aeson..=) "created" (threeDSecureCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (threeDSecureCurrency obj) GHC.Base.<> ((Data.Aeson..=) "id" (threeDSecureId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (threeDSecureLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (threeDSecureObject obj) GHC.Base.<> ((Data.Aeson..=) "redirect_url" (threeDSecureRedirectUrl obj) GHC.Base.<> (Data.Aeson..=) "status" (threeDSecureStatus obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON ThreeDSecure
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "ThreeDSecure" (\obj -> (((((((((GHC.Base.pure ThreeDSecure GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authenticated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
data Token
    = Token {tokenBankAccount :: (GHC.Maybe.Maybe BankAccount),
             tokenCard :: (GHC.Maybe.Maybe Card),
             tokenClientIp :: (GHC.Maybe.Maybe GHC.Base.String),
             tokenCreated :: GHC.Integer.Type.Integer,
             tokenId :: GHC.Base.String,
             tokenLivemode :: GHC.Types.Bool,
             tokenObject :: TokenObject',
             tokenType :: GHC.Base.String,
             tokenUsed :: GHC.Types.Bool}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data TokenObject'
    = TokenObject'EnumOther Data.Aeson.Types.Internal.Value
    | TokenObject'EnumTyped GHC.Base.String
    | TokenObject'EnumStringToken
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TokenObject'
    where toJSON (TokenObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TokenObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TokenObject'EnumStringToken) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token"
instance Data.Aeson.FromJSON TokenObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "token")
                                          then TokenObject'EnumStringToken
                                          else TokenObject'EnumOther val)
instance Data.Aeson.ToJSON Token
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "bank_account" (tokenBankAccount obj) : (Data.Aeson..=) "card" (tokenCard obj) : (Data.Aeson..=) "client_ip" (tokenClientIp obj) : (Data.Aeson..=) "created" (tokenCreated obj) : (Data.Aeson..=) "id" (tokenId obj) : (Data.Aeson..=) "livemode" (tokenLivemode obj) : (Data.Aeson..=) "object" (tokenObject obj) : (Data.Aeson..=) "type" (tokenType obj) : (Data.Aeson..=) "used" (tokenUsed obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "bank_account" (tokenBankAccount obj) GHC.Base.<> ((Data.Aeson..=) "card" (tokenCard obj) GHC.Base.<> ((Data.Aeson..=) "client_ip" (tokenClientIp obj) GHC.Base.<> ((Data.Aeson..=) "created" (tokenCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (tokenId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (tokenLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (tokenObject obj) GHC.Base.<> ((Data.Aeson..=) "type" (tokenType obj) GHC.Base.<> (Data.Aeson..=) "used" (tokenUsed obj)))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Token
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Token" (\obj -> ((((((((GHC.Base.pure Token GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "used"))
data Topup
    = Topup {topupAmount :: GHC.Integer.Type.Integer,
             topupBalanceTransaction :: (GHC.Maybe.Maybe TopupBalanceTransaction'Variants),
             topupCreated :: GHC.Integer.Type.Integer,
             topupCurrency :: GHC.Base.String,
             topupDescription :: (GHC.Maybe.Maybe GHC.Base.String),
             topupExpectedAvailabilityDate :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
             topupFailureCode :: (GHC.Maybe.Maybe GHC.Base.String),
             topupFailureMessage :: (GHC.Maybe.Maybe GHC.Base.String),
             topupId :: GHC.Base.String,
             topupLivemode :: GHC.Types.Bool,
             topupMetadata :: TopupMetadata',
             topupObject :: TopupObject',
             topupSource :: Source,
             topupStatementDescriptor :: (GHC.Maybe.Maybe GHC.Base.String),
             topupStatus :: TopupStatus',
             topupTransferGroup :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data TopupBalanceTransaction'Variants
    = TopupBalanceTransaction'Variant1 BalanceTransaction
    | TopupBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TopupBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TopupBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data TopupMetadata'
    = TopupMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TopupMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON TopupMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TopupMetadata'" (\obj -> GHC.Base.pure TopupMetadata')
data TopupObject'
    = TopupObject'EnumOther Data.Aeson.Types.Internal.Value
    | TopupObject'EnumTyped GHC.Base.String
    | TopupObject'EnumStringTopup
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TopupObject'
    where toJSON (TopupObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TopupObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TopupObject'EnumStringTopup) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "topup"
instance Data.Aeson.FromJSON TopupObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "topup")
                                          then TopupObject'EnumStringTopup
                                          else TopupObject'EnumOther val)
data TopupStatus'
    = TopupStatus'EnumOther Data.Aeson.Types.Internal.Value
    | TopupStatus'EnumTyped GHC.Base.String
    | TopupStatus'EnumStringCanceled
    | TopupStatus'EnumStringFailed
    | TopupStatus'EnumStringPending
    | TopupStatus'EnumStringReversed
    | TopupStatus'EnumStringSucceeded
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TopupStatus'
    where toJSON (TopupStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TopupStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TopupStatus'EnumStringCanceled) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled"
          toJSON (TopupStatus'EnumStringFailed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed"
          toJSON (TopupStatus'EnumStringPending) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending"
          toJSON (TopupStatus'EnumStringReversed) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reversed"
          toJSON (TopupStatus'EnumStringSucceeded) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "succeeded"
instance Data.Aeson.FromJSON TopupStatus'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "canceled")
                                          then TopupStatus'EnumStringCanceled
                                          else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "failed")
                                                then TopupStatus'EnumStringFailed
                                                else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "pending")
                                                      then TopupStatus'EnumStringPending
                                                      else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "reversed")
                                                            then TopupStatus'EnumStringReversed
                                                            else if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "succeeded")
                                                                  then TopupStatus'EnumStringSucceeded
                                                                  else TopupStatus'EnumOther val)
instance Data.Aeson.ToJSON Topup
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (topupAmount obj) : (Data.Aeson..=) "balance_transaction" (topupBalanceTransaction obj) : (Data.Aeson..=) "created" (topupCreated obj) : (Data.Aeson..=) "currency" (topupCurrency obj) : (Data.Aeson..=) "description" (topupDescription obj) : (Data.Aeson..=) "expected_availability_date" (topupExpectedAvailabilityDate obj) : (Data.Aeson..=) "failure_code" (topupFailureCode obj) : (Data.Aeson..=) "failure_message" (topupFailureMessage obj) : (Data.Aeson..=) "id" (topupId obj) : (Data.Aeson..=) "livemode" (topupLivemode obj) : (Data.Aeson..=) "metadata" (topupMetadata obj) : (Data.Aeson..=) "object" (topupObject obj) : (Data.Aeson..=) "source" (topupSource obj) : (Data.Aeson..=) "statement_descriptor" (topupStatementDescriptor obj) : (Data.Aeson..=) "status" (topupStatus obj) : (Data.Aeson..=) "transfer_group" (topupTransferGroup obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (topupAmount obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (topupBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "created" (topupCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (topupCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (topupDescription obj) GHC.Base.<> ((Data.Aeson..=) "expected_availability_date" (topupExpectedAvailabilityDate obj) GHC.Base.<> ((Data.Aeson..=) "failure_code" (topupFailureCode obj) GHC.Base.<> ((Data.Aeson..=) "failure_message" (topupFailureMessage obj) GHC.Base.<> ((Data.Aeson..=) "id" (topupId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (topupLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (topupMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (topupObject obj) GHC.Base.<> ((Data.Aeson..=) "source" (topupSource obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (topupStatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (topupStatus obj) GHC.Base.<> (Data.Aeson..=) "transfer_group" (topupTransferGroup obj))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Topup
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Topup" (\obj -> (((((((((((((((GHC.Base.pure Topup GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expected_availability_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_group"))
data Transfer
    = Transfer {transferAmount :: GHC.Integer.Type.Integer,
                transferAmountReversed :: GHC.Integer.Type.Integer,
                transferBalanceTransaction :: (GHC.Maybe.Maybe TransferBalanceTransaction'Variants),
                transferCreated :: GHC.Integer.Type.Integer,
                transferCurrency :: GHC.Base.String,
                transferDescription :: (GHC.Maybe.Maybe GHC.Base.String),
                transferDestination :: (GHC.Maybe.Maybe TransferDestination'Variants),
                transferDestinationPayment :: (GHC.Maybe.Maybe TransferDestinationPayment'Variants),
                transferId :: GHC.Base.String,
                transferLivemode :: GHC.Types.Bool,
                transferMetadata :: TransferMetadata',
                transferObject :: TransferObject',
                transferReversals :: TransferReversals',
                transferReversed :: GHC.Types.Bool,
                transferSourceTransaction :: (GHC.Maybe.Maybe TransferSourceTransaction'Variants),
                transferSourceType :: (GHC.Maybe.Maybe GHC.Base.String),
                transferTransferGroup :: (GHC.Maybe.Maybe GHC.Base.String)}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data TransferBalanceTransaction'Variants
    = TransferBalanceTransaction'Variant1 BalanceTransaction
    | TransferBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TransferBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TransferBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data TransferDestination'Variants
    = TransferDestination'Variant1 Account
    | TransferDestination'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TransferDestination'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TransferDestination'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data TransferDestinationPayment'Variants
    = TransferDestinationPayment'Variant1 Charge
    | TransferDestinationPayment'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TransferDestinationPayment'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TransferDestinationPayment'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data TransferMetadata'
    = TransferMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TransferMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON TransferMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TransferMetadata'" (\obj -> GHC.Base.pure TransferMetadata')
data TransferObject'
    = TransferObject'EnumOther Data.Aeson.Types.Internal.Value
    | TransferObject'EnumTyped GHC.Base.String
    | TransferObject'EnumStringTransfer
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TransferObject'
    where toJSON (TransferObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TransferObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TransferObject'EnumStringTransfer) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer"
instance Data.Aeson.FromJSON TransferObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer")
                                          then TransferObject'EnumStringTransfer
                                          else TransferObject'EnumOther val)
data TransferReversals'
    = TransferReversals' {transferReversals'Data :: ([] TransferReversal),
                          transferReversals'HasMore :: GHC.Types.Bool,
                          transferReversals'Object :: TransferReversals'Object',
                          transferReversals'Url :: GHC.Base.String}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data TransferReversals'Object'
    = TransferReversals'Object'EnumOther Data.Aeson.Types.Internal.Value
    | TransferReversals'Object'EnumTyped GHC.Base.String
    | TransferReversals'Object'EnumStringList
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TransferReversals'Object'
    where toJSON (TransferReversals'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TransferReversals'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TransferReversals'Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"
instance Data.Aeson.FromJSON TransferReversals'Object'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
                                          then TransferReversals'Object'EnumStringList
                                          else TransferReversals'Object'EnumOther val)
instance Data.Aeson.ToJSON TransferReversals'
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (transferReversals'Data obj) : (Data.Aeson..=) "has_more" (transferReversals'HasMore obj) : (Data.Aeson..=) "object" (transferReversals'Object obj) : (Data.Aeson..=) "url" (transferReversals'Url obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (transferReversals'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (transferReversals'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (transferReversals'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (transferReversals'Url obj))))
instance Data.Aeson.Types.FromJSON.FromJSON TransferReversals'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TransferReversals'" (\obj -> (((GHC.Base.pure TransferReversals' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
data TransferSourceTransaction'Variants
    = TransferSourceTransaction'Variant1 Charge
    | TransferSourceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TransferSourceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TransferSourceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON Transfer
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (transferAmount obj) : (Data.Aeson..=) "amount_reversed" (transferAmountReversed obj) : (Data.Aeson..=) "balance_transaction" (transferBalanceTransaction obj) : (Data.Aeson..=) "created" (transferCreated obj) : (Data.Aeson..=) "currency" (transferCurrency obj) : (Data.Aeson..=) "description" (transferDescription obj) : (Data.Aeson..=) "destination" (transferDestination obj) : (Data.Aeson..=) "destination_payment" (transferDestinationPayment obj) : (Data.Aeson..=) "id" (transferId obj) : (Data.Aeson..=) "livemode" (transferLivemode obj) : (Data.Aeson..=) "metadata" (transferMetadata obj) : (Data.Aeson..=) "object" (transferObject obj) : (Data.Aeson..=) "reversals" (transferReversals obj) : (Data.Aeson..=) "reversed" (transferReversed obj) : (Data.Aeson..=) "source_transaction" (transferSourceTransaction obj) : (Data.Aeson..=) "source_type" (transferSourceType obj) : (Data.Aeson..=) "transfer_group" (transferTransferGroup obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (transferAmount obj) GHC.Base.<> ((Data.Aeson..=) "amount_reversed" (transferAmountReversed obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (transferBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "created" (transferCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (transferCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (transferDescription obj) GHC.Base.<> ((Data.Aeson..=) "destination" (transferDestination obj) GHC.Base.<> ((Data.Aeson..=) "destination_payment" (transferDestinationPayment obj) GHC.Base.<> ((Data.Aeson..=) "id" (transferId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (transferLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (transferMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (transferObject obj) GHC.Base.<> ((Data.Aeson..=) "reversals" (transferReversals obj) GHC.Base.<> ((Data.Aeson..=) "reversed" (transferReversed obj) GHC.Base.<> ((Data.Aeson..=) "source_transaction" (transferSourceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "source_type" (transferSourceType obj) GHC.Base.<> (Data.Aeson..=) "transfer_group" (transferTransferGroup obj)))))))))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON Transfer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Transfer" (\obj -> ((((((((((((((((GHC.Base.pure Transfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_reversed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination_payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reversals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reversed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_group"))
data TransferData
    = TransferData {transferDataAmount :: (GHC.Maybe.Maybe GHC.Integer.Type.Integer),
                    transferDataDestination :: TransferDataDestination'Variants}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data TransferDataDestination'Variants
    = TransferDataDestination'Variant1 Account
    | TransferDataDestination'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TransferDataDestination'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TransferDataDestination'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON TransferData
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (transferDataAmount obj) : (Data.Aeson..=) "destination" (transferDataDestination obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (transferDataAmount obj) GHC.Base.<> (Data.Aeson..=) "destination" (transferDataDestination obj))
instance Data.Aeson.Types.FromJSON.FromJSON TransferData
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TransferData" (\obj -> (GHC.Base.pure TransferData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination"))
data TransferReversal
    = TransferReversal {transferReversalAmount :: GHC.Integer.Type.Integer,
                        transferReversalBalanceTransaction :: (GHC.Maybe.Maybe TransferReversalBalanceTransaction'Variants),
                        transferReversalCreated :: GHC.Integer.Type.Integer,
                        transferReversalCurrency :: GHC.Base.String,
                        transferReversalDestinationPaymentRefund :: (GHC.Maybe.Maybe TransferReversalDestinationPaymentRefund'Variants),
                        transferReversalId :: GHC.Base.String,
                        transferReversalMetadata :: TransferReversalMetadata',
                        transferReversalObject :: TransferReversalObject',
                        transferReversalSourceRefund :: (GHC.Maybe.Maybe TransferReversalSourceRefund'Variants),
                        transferReversalTransfer :: TransferReversalTransfer'Variants}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
data TransferReversalBalanceTransaction'Variants
    = TransferReversalBalanceTransaction'Variant1 BalanceTransaction
    | TransferReversalBalanceTransaction'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TransferReversalBalanceTransaction'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TransferReversalBalanceTransaction'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data TransferReversalDestinationPaymentRefund'Variants
    = TransferReversalDestinationPaymentRefund'Variant1 Refund
    | TransferReversalDestinationPaymentRefund'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TransferReversalDestinationPaymentRefund'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TransferReversalDestinationPaymentRefund'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data TransferReversalMetadata'
    = TransferReversalMetadata' {}
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TransferReversalMetadata'
    where toJSON obj = Data.Aeson.object []
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))
instance Data.Aeson.Types.FromJSON.FromJSON TransferReversalMetadata'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TransferReversalMetadata'" (\obj -> GHC.Base.pure TransferReversalMetadata')
data TransferReversalObject'
    = TransferReversalObject'EnumOther Data.Aeson.Types.Internal.Value
    | TransferReversalObject'EnumTyped GHC.Base.String
    | TransferReversalObject'EnumStringTransferReversal
    deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.ToJSON TransferReversalObject'
    where toJSON (TransferReversalObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TransferReversalObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
          toJSON (TransferReversalObject'EnumStringTransferReversal) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_reversal"
instance Data.Aeson.FromJSON TransferReversalObject'
    where parseJSON val = GHC.Base.pure (if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "transfer_reversal")
                                          then TransferReversalObject'EnumStringTransferReversal
                                          else TransferReversalObject'EnumOther val)
data TransferReversalSourceRefund'Variants
    = TransferReversalSourceRefund'Variant1 Refund
    | TransferReversalSourceRefund'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TransferReversalSourceRefund'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TransferReversalSourceRefund'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
data TransferReversalTransfer'Variants
    = TransferReversalTransfer'Variant1 Transfer
    | TransferReversalTransfer'Variant2 GHC.Base.String
    deriving (GHC.Show.Show, GHC.Classes.Eq, GHC.Generics.Generic)
instance Data.Aeson.ToJSON TransferReversalTransfer'Variants
    where toJSON = Data.Aeson.Types.ToJSON.genericToJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.FromJSON TransferReversalTransfer'Variants
    where parseJSON = Data.Aeson.Types.FromJSON.genericParseJSON Data.Aeson.Types.Internal.defaultOptions{Data.Aeson.Types.Internal.sumEncoding = Data.Aeson.Types.Internal.UntaggedValue}
instance Data.Aeson.ToJSON TransferReversal
    where toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (transferReversalAmount obj) : (Data.Aeson..=) "balance_transaction" (transferReversalBalanceTransaction obj) : (Data.Aeson..=) "created" (transferReversalCreated obj) : (Data.Aeson..=) "currency" (transferReversalCurrency obj) : (Data.Aeson..=) "destination_payment_refund" (transferReversalDestinationPaymentRefund obj) : (Data.Aeson..=) "id" (transferReversalId obj) : (Data.Aeson..=) "metadata" (transferReversalMetadata obj) : (Data.Aeson..=) "object" (transferReversalObject obj) : (Data.Aeson..=) "source_refund" (transferReversalSourceRefund obj) : (Data.Aeson..=) "transfer" (transferReversalTransfer obj) : [])
          toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (transferReversalAmount obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (transferReversalBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "created" (transferReversalCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (transferReversalCurrency obj) GHC.Base.<> ((Data.Aeson..=) "destination_payment_refund" (transferReversalDestinationPaymentRefund obj) GHC.Base.<> ((Data.Aeson..=) "id" (transferReversalId obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (transferReversalMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (transferReversalObject obj) GHC.Base.<> ((Data.Aeson..=) "source_refund" (transferReversalSourceRefund obj) GHC.Base.<> (Data.Aeson..=) "transfer" (transferReversalTransfer obj))))))))))
instance Data.Aeson.Types.FromJSON.FromJSON TransferReversal
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "TransferReversal" (\obj -> (((((((((GHC.Base.pure TransferReversal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination_payment_refund")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_refund")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transfer"))