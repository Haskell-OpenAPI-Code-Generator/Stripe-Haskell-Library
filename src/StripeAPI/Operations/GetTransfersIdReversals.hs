{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getTransfersIdReversals
module StripeAPI.Operations.GetTransfersIdReversals where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/transfers/{id}/reversals
--
-- \<p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the \<code>limit\<\/code> and \<code>starting_after\<\/code> parameters to page through additional reversals.\<\/p>
getTransfersIdReversals ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetTransfersIdReversalsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetTransfersIdReversalsResponse)
getTransfersIdReversals parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetTransfersIdReversalsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetTransfersIdReversalsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetTransfersIdReversalsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetTransfersIdReversalsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack ("/v1/transfers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getTransfersIdReversalsParametersPathId parameters))) GHC.Base.++ "/reversals")))
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersIdReversalsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersIdReversalsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersIdReversalsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersIdReversalsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/transfers\/{id}\/reversals.GET.parameters@ in the specification.
data GetTransfersIdReversalsParameters
  = GetTransfersIdReversalsParameters
      { -- | pathId: Represents the parameter named \'id\'
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getTransfersIdReversalsParametersPathId :: Data.Text.Internal.Text,
        -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getTransfersIdReversalsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getTransfersIdReversalsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getTransfersIdReversalsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getTransfersIdReversalsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetTransfersIdReversalsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("pathId" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersPathId obj : "queryEnding_before" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersQueryEndingBefore obj : "queryExpand" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersQueryExpand obj : "queryLimit" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersQueryLimit obj : "queryStarting_after" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersQueryStartingAfter obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathId" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersPathId obj) GHC.Base.<> (("queryEnding_before" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersQueryEndingBefore obj) GHC.Base.<> (("queryExpand" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersQueryExpand obj) GHC.Base.<> (("queryLimit" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersQueryLimit obj) GHC.Base.<> ("queryStarting_after" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsParametersQueryStartingAfter obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON GetTransfersIdReversalsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTransfersIdReversalsParameters" (\obj -> ((((GHC.Base.pure GetTransfersIdReversalsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after"))

-- | Create a new 'GetTransfersIdReversalsParameters' with all required fields.
mkGetTransfersIdReversalsParameters ::
  -- | 'getTransfersIdReversalsParametersPathId'
  Data.Text.Internal.Text ->
  GetTransfersIdReversalsParameters
mkGetTransfersIdReversalsParameters getTransfersIdReversalsParametersPathId =
  GetTransfersIdReversalsParameters
    { getTransfersIdReversalsParametersPathId = getTransfersIdReversalsParametersPathId,
      getTransfersIdReversalsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getTransfersIdReversalsParametersQueryExpand = GHC.Maybe.Nothing,
      getTransfersIdReversalsParametersQueryLimit = GHC.Maybe.Nothing,
      getTransfersIdReversalsParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getTransfersIdReversals'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTransfersIdReversalsResponseError' is used.
data GetTransfersIdReversalsResponse
  = -- | Means either no matching case available or a parse error
    GetTransfersIdReversalsResponseError GHC.Base.String
  | -- | Successful response.
    GetTransfersIdReversalsResponse200 GetTransfersIdReversalsResponseBody200
  | -- | Error response.
    GetTransfersIdReversalsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/transfers\/{id}\/reversals.GET.responses.200.content.application\/json.schema@ in the specification.
data GetTransfersIdReversalsResponseBody200
  = GetTransfersIdReversalsResponseBody200
      { -- | data: Details about each object.
        getTransfersIdReversalsResponseBody200Data :: ([TransferReversal]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getTransfersIdReversalsResponseBody200HasMore :: GHC.Types.Bool,
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getTransfersIdReversalsResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetTransfersIdReversalsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsResponseBody200Data obj : "has_more" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsResponseBody200HasMore obj : "url" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsResponseBody200Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsResponseBody200Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsResponseBody200HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= getTransfersIdReversalsResponseBody200Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON GetTransfersIdReversalsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTransfersIdReversalsResponseBody200" (\obj -> ((GHC.Base.pure GetTransfersIdReversalsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetTransfersIdReversalsResponseBody200' with all required fields.
mkGetTransfersIdReversalsResponseBody200 ::
  -- | 'getTransfersIdReversalsResponseBody200Data'
  [TransferReversal] ->
  -- | 'getTransfersIdReversalsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getTransfersIdReversalsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetTransfersIdReversalsResponseBody200
mkGetTransfersIdReversalsResponseBody200 getTransfersIdReversalsResponseBody200Data getTransfersIdReversalsResponseBody200HasMore getTransfersIdReversalsResponseBody200Url =
  GetTransfersIdReversalsResponseBody200
    { getTransfersIdReversalsResponseBody200Data = getTransfersIdReversalsResponseBody200Data,
      getTransfersIdReversalsResponseBody200HasMore = getTransfersIdReversalsResponseBody200HasMore,
      getTransfersIdReversalsResponseBody200Url = getTransfersIdReversalsResponseBody200Url
    }
