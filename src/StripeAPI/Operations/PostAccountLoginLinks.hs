{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postAccountLoginLinks
module StripeAPI.Operations.PostAccountLoginLinks where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/account/login_links
--
-- \<p>Creates a single-use login link for an Express account to access their Stripe dashboard.\<\/p>
--
-- \<p>\<strong>You may only create login links for \<a href=\"\/docs\/connect\/express-accounts\">Express accounts\<\/a> connected to your platform\<\/strong>.\<\/p>
postAccountLoginLinks ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostAccountLoginLinksRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostAccountLoginLinksResponse)
postAccountLoginLinks body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostAccountLoginLinksResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostAccountLoginLinksResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            LoginLink
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostAccountLoginLinksResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/account/login_links") [] (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/account\/login_links.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostAccountLoginLinksRequestBody
  = PostAccountLoginLinksRequestBody
      { -- | account
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postAccountLoginLinksRequestBodyAccount :: Data.Text.Internal.Text,
        -- | expand: Specifies which fields in the response should be expanded.
        postAccountLoginLinksRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | redirect_url: Where to redirect the user after they log out of their dashboard.
        postAccountLoginLinksRequestBodyRedirectUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountLoginLinksRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("account" Data.Aeson.Types.ToJSON..= postAccountLoginLinksRequestBodyAccount obj : "expand" Data.Aeson.Types.ToJSON..= postAccountLoginLinksRequestBodyExpand obj : "redirect_url" Data.Aeson.Types.ToJSON..= postAccountLoginLinksRequestBodyRedirectUrl obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account" Data.Aeson.Types.ToJSON..= postAccountLoginLinksRequestBodyAccount obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postAccountLoginLinksRequestBodyExpand obj) GHC.Base.<> ("redirect_url" Data.Aeson.Types.ToJSON..= postAccountLoginLinksRequestBodyRedirectUrl obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountLoginLinksRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountLoginLinksRequestBody" (\obj -> ((GHC.Base.pure PostAccountLoginLinksRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect_url"))

-- | Create a new 'PostAccountLoginLinksRequestBody' with all required fields.
mkPostAccountLoginLinksRequestBody ::
  -- | 'postAccountLoginLinksRequestBodyAccount'
  Data.Text.Internal.Text ->
  PostAccountLoginLinksRequestBody
mkPostAccountLoginLinksRequestBody postAccountLoginLinksRequestBodyAccount =
  PostAccountLoginLinksRequestBody
    { postAccountLoginLinksRequestBodyAccount = postAccountLoginLinksRequestBodyAccount,
      postAccountLoginLinksRequestBodyExpand = GHC.Maybe.Nothing,
      postAccountLoginLinksRequestBodyRedirectUrl = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postAccountLoginLinks'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostAccountLoginLinksResponseError' is used.
data PostAccountLoginLinksResponse
  = -- | Means either no matching case available or a parse error
    PostAccountLoginLinksResponseError GHC.Base.String
  | -- | Successful response.
    PostAccountLoginLinksResponse200 LoginLink
  | -- | Error response.
    PostAccountLoginLinksResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
