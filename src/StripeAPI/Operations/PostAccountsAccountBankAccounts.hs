{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postAccountsAccountBankAccounts
module StripeAPI.Operations.PostAccountsAccountBankAccounts where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/accounts/{account}/bank_accounts
--
-- \<p>Create an external account for a given account.\<\/p>
postAccountsAccountBankAccounts ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | account | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostAccountsAccountBankAccountsRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostAccountsAccountBankAccountsResponse)
postAccountsAccountBankAccounts
  account
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostAccountsAccountBankAccountsResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostAccountsAccountBankAccountsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              ExternalAccount
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostAccountsAccountBankAccountsResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel account)) GHC.Base.++ "/bank_accounts"))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/accounts\/{account}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostAccountsAccountBankAccountsRequestBody
  = PostAccountsAccountBankAccountsRequestBody
      { -- | bank_account: Either a token, like the ones returned by [Stripe.js](https:\/\/stripe.com\/docs\/stripe.js), or a dictionary containing a user\'s bank account details.
        postAccountsAccountBankAccountsRequestBodyBankAccount :: (GHC.Maybe.Maybe PostAccountsAccountBankAccountsRequestBodyBankAccount'Variants),
        -- | default_for_currency: When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency.
        postAccountsAccountBankAccountsRequestBodyDefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | expand: Specifies which fields in the response should be expanded.
        postAccountsAccountBankAccountsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | external_account: Please refer to full [documentation](https:\/\/stripe.com\/docs\/api) instead.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postAccountsAccountBankAccountsRequestBodyExternalAccount :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
        postAccountsAccountBankAccountsRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountsAccountBankAccountsRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("bank_account" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount obj : "default_for_currency" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyDefaultForCurrency obj : "expand" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyExpand obj : "external_account" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyExternalAccount obj : "metadata" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyMetadata obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bank_account" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount obj) GHC.Base.<> (("default_for_currency" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyDefaultForCurrency obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyExpand obj) GHC.Base.<> (("external_account" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyExternalAccount obj) GHC.Base.<> ("metadata" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyMetadata obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountsAccountBankAccountsRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountsAccountBankAccountsRequestBody" (\obj -> ((((GHC.Base.pure PostAccountsAccountBankAccountsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "external_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata"))

-- | Create a new 'PostAccountsAccountBankAccountsRequestBody' with all required fields.
mkPostAccountsAccountBankAccountsRequestBody :: PostAccountsAccountBankAccountsRequestBody
mkPostAccountsAccountBankAccountsRequestBody =
  PostAccountsAccountBankAccountsRequestBody
    { postAccountsAccountBankAccountsRequestBodyBankAccount = GHC.Maybe.Nothing,
      postAccountsAccountBankAccountsRequestBodyDefaultForCurrency = GHC.Maybe.Nothing,
      postAccountsAccountBankAccountsRequestBodyExpand = GHC.Maybe.Nothing,
      postAccountsAccountBankAccountsRequestBodyExternalAccount = GHC.Maybe.Nothing,
      postAccountsAccountBankAccountsRequestBodyMetadata = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/accounts\/{account}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_account.anyOf@ in the specification.
data PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2
  = PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2
      { -- | account_holder_name
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | account_holder_type
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType :: (GHC.Maybe.Maybe PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'),
        -- | account_number
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountNumber :: Data.Text.Internal.Text,
        -- | country
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Country :: Data.Text.Internal.Text,
        -- | currency
        postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | routing_number
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2RoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2 where
  toJSON obj = Data.Aeson.Types.Internal.object ("account_holder_name" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderName obj : "account_holder_type" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType obj : "account_number" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountNumber obj : "country" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Country obj : "currency" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Currency obj : "routing_number" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2RoutingNumber obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account_holder_name" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderName obj) GHC.Base.<> (("account_holder_type" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType obj) GHC.Base.<> (("account_number" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountNumber obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Country obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Currency obj) GHC.Base.<> (("routing_number" Data.Aeson.Types.ToJSON..= postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2RoutingNumber obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account")))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2" (\obj -> (((((GHC.Base.pure PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number"))

-- | Create a new 'PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2' with all required fields.
mkPostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2 ::
  -- | 'postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountNumber'
  Data.Text.Internal.Text ->
  -- | 'postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Country'
  Data.Text.Internal.Text ->
  PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2
mkPostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2 postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountNumber postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Country =
  PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2
    { postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderName = GHC.Maybe.Nothing,
      postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType = GHC.Maybe.Nothing,
      postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountNumber = postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountNumber,
      postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Country = postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Country,
      postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2Currency = GHC.Maybe.Nothing,
      postAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2RoutingNumber = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/accounts\/{account}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_account.anyOf.properties.account_holder_type@ in the specification.
data PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumCompany
  | -- | Represents the JSON value @"individual"@
    PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumIndividual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType' where
  toJSON (PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Other val) = val
  toJSON (PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumCompany) = "company"
  toJSON (PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumIndividual) = "individual"

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "company" -> PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumCompany
            | val GHC.Classes.== "individual" -> PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumIndividual
            | GHC.Base.otherwise -> PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/accounts\/{account}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_account.anyOf@ in the specification.
--
-- Either a token, like the ones returned by [Stripe.js](https:\/\/stripe.com\/docs\/stripe.js), or a dictionary containing a user\'s bank account details.
data PostAccountsAccountBankAccountsRequestBodyBankAccount'Variants
  = PostAccountsAccountBankAccountsRequestBodyBankAccount'Text Data.Text.Internal.Text
  | PostAccountsAccountBankAccountsRequestBodyBankAccount'PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2 PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountsAccountBankAccountsRequestBodyBankAccount'Variants where
  toJSON (PostAccountsAccountBankAccountsRequestBodyBankAccount'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostAccountsAccountBankAccountsRequestBodyBankAccount'PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountsAccountBankAccountsRequestBodyBankAccount'Variants where
  parseJSON val = case (PostAccountsAccountBankAccountsRequestBodyBankAccount'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostAccountsAccountBankAccountsRequestBodyBankAccount'PostAccountsAccountBankAccountsRequestBodyBankAccount'OneOf2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'postAccountsAccountBankAccounts'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostAccountsAccountBankAccountsResponseError' is used.
data PostAccountsAccountBankAccountsResponse
  = -- | Means either no matching case available or a parse error
    PostAccountsAccountBankAccountsResponseError GHC.Base.String
  | -- | Successful response.
    PostAccountsAccountBankAccountsResponse200 ExternalAccount
  | -- | Error response.
    PostAccountsAccountBankAccountsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
