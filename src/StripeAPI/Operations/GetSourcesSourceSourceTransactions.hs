{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSourcesSourceSourceTransactions
module StripeAPI.Operations.GetSourcesSourceSourceTransactions where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/sources/{source}/source_transactions
--
-- \<p>List source transactions for a given source.\<\/p>
getSourcesSourceSourceTransactions ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSourcesSourceSourceTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetSourcesSourceSourceTransactionsResponse)
getSourcesSourceSourceTransactions parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSourcesSourceSourceTransactionsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSourcesSourceSourceTransactionsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSourcesSourceSourceTransactionsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSourcesSourceSourceTransactionsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack ("/v1/sources/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceSourceTransactionsParametersPathSource parameters))) GHC.Base.++ "/source_transactions")))
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceSourceTransactionsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceSourceTransactionsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceSourceTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceSourceTransactionsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}\/source_transactions.GET.parameters@ in the specification.
data GetSourcesSourceSourceTransactionsParameters = GetSourcesSourceSourceTransactionsParameters
  { -- | pathSource: Represents the parameter named \'source\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSourcesSourceSourceTransactionsParametersPathSource :: Data.Text.Internal.Text,
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSourcesSourceSourceTransactionsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getSourcesSourceSourceTransactionsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getSourcesSourceSourceTransactionsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSourcesSourceSourceTransactionsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSourcesSourceSourceTransactionsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathSource" Data.Aeson.Types.ToJSON..= getSourcesSourceSourceTransactionsParametersPathSource obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getSourcesSourceSourceTransactionsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getSourcesSourceSourceTransactionsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSourcesSourceSourceTransactionsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getSourcesSourceSourceTransactionsParametersQueryStartingAfter obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathSource" Data.Aeson.Types.ToJSON..= getSourcesSourceSourceTransactionsParametersPathSource obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getSourcesSourceSourceTransactionsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getSourcesSourceSourceTransactionsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSourcesSourceSourceTransactionsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getSourcesSourceSourceTransactionsParametersQueryStartingAfter obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSourcesSourceSourceTransactionsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSourcesSourceSourceTransactionsParameters" (\obj -> ((((GHC.Base.pure GetSourcesSourceSourceTransactionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathSource")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))

-- | Create a new 'GetSourcesSourceSourceTransactionsParameters' with all required fields.
mkGetSourcesSourceSourceTransactionsParameters ::
  -- | 'getSourcesSourceSourceTransactionsParametersPathSource'
  Data.Text.Internal.Text ->
  GetSourcesSourceSourceTransactionsParameters
mkGetSourcesSourceSourceTransactionsParameters getSourcesSourceSourceTransactionsParametersPathSource =
  GetSourcesSourceSourceTransactionsParameters
    { getSourcesSourceSourceTransactionsParametersPathSource = getSourcesSourceSourceTransactionsParametersPathSource,
      getSourcesSourceSourceTransactionsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getSourcesSourceSourceTransactionsParametersQueryExpand = GHC.Maybe.Nothing,
      getSourcesSourceSourceTransactionsParametersQueryLimit = GHC.Maybe.Nothing,
      getSourcesSourceSourceTransactionsParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getSourcesSourceSourceTransactions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSourcesSourceSourceTransactionsResponseError' is used.
data GetSourcesSourceSourceTransactionsResponse
  = -- | Means either no matching case available or a parse error
    GetSourcesSourceSourceTransactionsResponseError GHC.Base.String
  | -- | Successful response.
    GetSourcesSourceSourceTransactionsResponse200 GetSourcesSourceSourceTransactionsResponseBody200
  | -- | Error response.
    GetSourcesSourceSourceTransactionsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}\/source_transactions.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSourcesSourceSourceTransactionsResponseBody200 = GetSourcesSourceSourceTransactionsResponseBody200
  { -- | data
    getSourcesSourceSourceTransactionsResponseBody200Data :: ([SourceTransaction]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getSourcesSourceSourceTransactionsResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSourcesSourceSourceTransactionsResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSourcesSourceSourceTransactionsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getSourcesSourceSourceTransactionsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getSourcesSourceSourceTransactionsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getSourcesSourceSourceTransactionsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getSourcesSourceSourceTransactionsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getSourcesSourceSourceTransactionsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getSourcesSourceSourceTransactionsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSourcesSourceSourceTransactionsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSourcesSourceSourceTransactionsResponseBody200" (\obj -> ((GHC.Base.pure GetSourcesSourceSourceTransactionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetSourcesSourceSourceTransactionsResponseBody200' with all required fields.
mkGetSourcesSourceSourceTransactionsResponseBody200 ::
  -- | 'getSourcesSourceSourceTransactionsResponseBody200Data'
  [SourceTransaction] ->
  -- | 'getSourcesSourceSourceTransactionsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getSourcesSourceSourceTransactionsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetSourcesSourceSourceTransactionsResponseBody200
mkGetSourcesSourceSourceTransactionsResponseBody200 getSourcesSourceSourceTransactionsResponseBody200Data getSourcesSourceSourceTransactionsResponseBody200HasMore getSourcesSourceSourceTransactionsResponseBody200Url =
  GetSourcesSourceSourceTransactionsResponseBody200
    { getSourcesSourceSourceTransactionsResponseBody200Data = getSourcesSourceSourceTransactionsResponseBody200Data,
      getSourcesSourceSourceTransactionsResponseBody200HasMore = getSourcesSourceSourceTransactionsResponseBody200HasMore,
      getSourcesSourceSourceTransactionsResponseBody200Url = getSourcesSourceSourceTransactionsResponseBody200Url
    }
