{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getFinancialConnectionsTransactions
module StripeAPI.Operations.GetFinancialConnectionsTransactions where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/financial_connections/transactions
--
-- \<p>Returns a list of Financial Connections \<code>Transaction\<\/code> objects.\<\/p>
getFinancialConnectionsTransactions ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetFinancialConnectionsTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetFinancialConnectionsTransactionsResponse)
getFinancialConnectionsTransactions parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetFinancialConnectionsTransactionsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetFinancialConnectionsTransactionsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetFinancialConnectionsTransactionsResponseBody200
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetFinancialConnectionsTransactionsResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/v1/financial_connections/transactions"
        [ StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "account") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getFinancialConnectionsTransactionsParametersQueryAccount parameters)) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getFinancialConnectionsTransactionsParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getFinancialConnectionsTransactionsParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getFinancialConnectionsTransactionsParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getFinancialConnectionsTransactionsParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "transacted_at") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getFinancialConnectionsTransactionsParametersQueryTransactedAt parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "transaction_refresh") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getFinancialConnectionsTransactionsParametersQueryTransactionRefresh parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/financial_connections\/transactions.GET.parameters@ in the specification.
data GetFinancialConnectionsTransactionsParameters = GetFinancialConnectionsTransactionsParameters
  { -- | queryAccount: Represents the parameter named \'account\'
    --
    -- The ID of the Stripe account whose transactions will be retrieved.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getFinancialConnectionsTransactionsParametersQueryAccount :: Data.Text.Internal.Text,
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getFinancialConnectionsTransactionsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getFinancialConnectionsTransactionsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getFinancialConnectionsTransactionsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getFinancialConnectionsTransactionsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryTransacted_at: Represents the parameter named \'transacted_at\'
    --
    -- A filter on the list based on the object \`transacted_at\` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:
    getFinancialConnectionsTransactionsParametersQueryTransactedAt :: (GHC.Maybe.Maybe GetFinancialConnectionsTransactionsParametersQueryTransactedAt'Variants),
    -- | queryTransaction_refresh: Represents the parameter named \'transaction_refresh\'
    --
    -- A filter on the list based on the object \`transaction_refresh\` field. The value can be a dictionary with the following options:
    getFinancialConnectionsTransactionsParametersQueryTransactionRefresh :: (GHC.Maybe.Maybe GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetFinancialConnectionsTransactionsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryAccount" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsParametersQueryAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTransacted_at" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTransaction_refresh" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactionRefresh obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryAccount" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsParametersQueryAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTransacted_at" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTransaction_refresh" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactionRefresh obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetFinancialConnectionsTransactionsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFinancialConnectionsTransactionsParameters" (\obj -> ((((((GHC.Base.pure GetFinancialConnectionsTransactionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryAccount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTransacted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTransaction_refresh"))

-- | Create a new 'GetFinancialConnectionsTransactionsParameters' with all required fields.
mkGetFinancialConnectionsTransactionsParameters ::
  -- | 'getFinancialConnectionsTransactionsParametersQueryAccount'
  Data.Text.Internal.Text ->
  GetFinancialConnectionsTransactionsParameters
mkGetFinancialConnectionsTransactionsParameters getFinancialConnectionsTransactionsParametersQueryAccount =
  GetFinancialConnectionsTransactionsParameters
    { getFinancialConnectionsTransactionsParametersQueryAccount = getFinancialConnectionsTransactionsParametersQueryAccount,
      getFinancialConnectionsTransactionsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getFinancialConnectionsTransactionsParametersQueryExpand = GHC.Maybe.Nothing,
      getFinancialConnectionsTransactionsParametersQueryLimit = GHC.Maybe.Nothing,
      getFinancialConnectionsTransactionsParametersQueryStartingAfter = GHC.Maybe.Nothing,
      getFinancialConnectionsTransactionsParametersQueryTransactedAt = GHC.Maybe.Nothing,
      getFinancialConnectionsTransactionsParametersQueryTransactionRefresh = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/financial_connections\/transactions.GET.parameters.properties.queryTransacted_at.anyOf@ in the specification.
data GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1 = GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1
  { -- | gt
    getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | gte
    getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lt
    getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lte
    getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Lte obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Lte obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1" (\obj -> (((GHC.Base.pure GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lte"))

-- | Create a new 'GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1' with all required fields.
mkGetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1 :: GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1
mkGetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1 =
  GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1
    { getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Gt = GHC.Maybe.Nothing,
      getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Gte = GHC.Maybe.Nothing,
      getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Lt = GHC.Maybe.Nothing,
      getFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1Lte = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/financial_connections\/transactions.GET.parameters.properties.queryTransacted_at.anyOf@ in the specification.
--
-- Represents the parameter named \'transacted_at\'
--
-- A filter on the list based on the object \`transacted_at\` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with the following options:
data GetFinancialConnectionsTransactionsParametersQueryTransactedAt'Variants
  = GetFinancialConnectionsTransactionsParametersQueryTransactedAt'GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1 GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1
  | GetFinancialConnectionsTransactionsParametersQueryTransactedAt'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetFinancialConnectionsTransactionsParametersQueryTransactedAt'Variants where
  toJSON (GetFinancialConnectionsTransactionsParametersQueryTransactedAt'GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetFinancialConnectionsTransactionsParametersQueryTransactedAt'Int a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetFinancialConnectionsTransactionsParametersQueryTransactedAt'Variants where
  parseJSON val = case (GetFinancialConnectionsTransactionsParametersQueryTransactedAt'GetFinancialConnectionsTransactionsParametersQueryTransactedAt'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetFinancialConnectionsTransactionsParametersQueryTransactedAt'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/financial_connections\/transactions.GET.parameters.properties.queryTransaction_refresh@ in the specification.
--
-- Represents the parameter named \'transaction_refresh\'
--
-- A filter on the list based on the object \`transaction_refresh\` field. The value can be a dictionary with the following options:
data GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh' = GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh'
  { -- | after
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getFinancialConnectionsTransactionsParametersQueryTransactionRefresh'After :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["after" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsParametersQueryTransactionRefresh'After obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["after" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsParametersQueryTransactionRefresh'After obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh'" (\obj -> GHC.Base.pure GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "after"))

-- | Create a new 'GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh'' with all required fields.
mkGetFinancialConnectionsTransactionsParametersQueryTransactionRefresh' ::
  -- | 'getFinancialConnectionsTransactionsParametersQueryTransactionRefresh'After'
  Data.Text.Internal.Text ->
  GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh'
mkGetFinancialConnectionsTransactionsParametersQueryTransactionRefresh' getFinancialConnectionsTransactionsParametersQueryTransactionRefresh'After = GetFinancialConnectionsTransactionsParametersQueryTransactionRefresh' {getFinancialConnectionsTransactionsParametersQueryTransactionRefresh'After = getFinancialConnectionsTransactionsParametersQueryTransactionRefresh'After}

-- | Represents a response of the operation 'getFinancialConnectionsTransactions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetFinancialConnectionsTransactionsResponseError' is used.
data GetFinancialConnectionsTransactionsResponse
  = -- | Means either no matching case available or a parse error
    GetFinancialConnectionsTransactionsResponseError GHC.Base.String
  | -- | Successful response.
    GetFinancialConnectionsTransactionsResponse200 GetFinancialConnectionsTransactionsResponseBody200
  | -- | Error response.
    GetFinancialConnectionsTransactionsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/financial_connections\/transactions.GET.responses.200.content.application\/json.schema@ in the specification.
data GetFinancialConnectionsTransactionsResponseBody200 = GetFinancialConnectionsTransactionsResponseBody200
  { -- | data: Details about each object.
    getFinancialConnectionsTransactionsResponseBody200Data :: ([FinancialConnections'transaction]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getFinancialConnectionsTransactionsResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    -- * Must match pattern \'^\/v1\/financial_connections\/transactions\'
    getFinancialConnectionsTransactionsResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetFinancialConnectionsTransactionsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getFinancialConnectionsTransactionsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetFinancialConnectionsTransactionsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetFinancialConnectionsTransactionsResponseBody200" (\obj -> ((GHC.Base.pure GetFinancialConnectionsTransactionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetFinancialConnectionsTransactionsResponseBody200' with all required fields.
mkGetFinancialConnectionsTransactionsResponseBody200 ::
  -- | 'getFinancialConnectionsTransactionsResponseBody200Data'
  [FinancialConnections'transaction] ->
  -- | 'getFinancialConnectionsTransactionsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getFinancialConnectionsTransactionsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetFinancialConnectionsTransactionsResponseBody200
mkGetFinancialConnectionsTransactionsResponseBody200 getFinancialConnectionsTransactionsResponseBody200Data getFinancialConnectionsTransactionsResponseBody200HasMore getFinancialConnectionsTransactionsResponseBody200Url =
  GetFinancialConnectionsTransactionsResponseBody200
    { getFinancialConnectionsTransactionsResponseBody200Data = getFinancialConnectionsTransactionsResponseBody200Data,
      getFinancialConnectionsTransactionsResponseBody200HasMore = getFinancialConnectionsTransactionsResponseBody200HasMore,
      getFinancialConnectionsTransactionsResponseBody200Url = getFinancialConnectionsTransactionsResponseBody200Url
    }
