-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getLinkedAccounts
module StripeAPI.Operations.GetLinkedAccounts where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/linked_accounts
-- 
-- \<p>Returns a list of Financial Connections \<code>Account\<\/code> objects.\<\/p>
getLinkedAccounts :: forall m . StripeAPI.Common.MonadHTTP m => GetLinkedAccountsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetLinkedAccountsResponse) -- ^ Monadic computation which returns the result of the operation
getLinkedAccounts parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetLinkedAccountsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetLinkedAccountsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            GetLinkedAccountsResponseBody200)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetLinkedAccountsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                              Error)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/v1/linked_accounts") [StripeAPI.Common.QueryParameter (Data.Text.pack "account_holder") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinkedAccountsParametersQueryAccountHolder parameters) (Data.Text.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinkedAccountsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinkedAccountsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinkedAccountsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.pack "session") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinkedAccountsParametersQuerySession parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getLinkedAccountsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/linked_accounts.GET.parameters@ in the specification.
-- 
-- 
data GetLinkedAccountsParameters = GetLinkedAccountsParameters {
  -- | queryAccount_holder: Represents the parameter named \'account_holder\'
  -- 
  -- If present, only return accounts that belong to the specified account holder. \`account_holder[customer]\` and \`account_holder[account]\` are mutually exclusive.
  getLinkedAccountsParametersQueryAccountHolder :: (GHC.Maybe.Maybe GetLinkedAccountsParametersQueryAccountHolder')
  -- | queryEnding_before: Represents the parameter named \'ending_before\'
  -- 
  -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getLinkedAccountsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getLinkedAccountsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | queryLimit: Represents the parameter named \'limit\'
  -- 
  -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  , getLinkedAccountsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | querySession: Represents the parameter named \'session\'
  -- 
  -- If present, only return accounts that were collected as part of the given session.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getLinkedAccountsParametersQuerySession :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryStarting_after: Represents the parameter named \'starting_after\'
  -- 
  -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getLinkedAccountsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinkedAccountsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAccount_holder" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryAccountHolder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySession" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQuerySession obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryStartingAfter obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryAccount_holder" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryAccountHolder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySession" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQuerySession obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryStartingAfter obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinkedAccountsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinkedAccountsParameters" (\obj -> (((((GHC.Base.pure GetLinkedAccountsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryAccount_holder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySession")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))
-- | Create a new 'GetLinkedAccountsParameters' with all required fields.
mkGetLinkedAccountsParameters :: GetLinkedAccountsParameters
mkGetLinkedAccountsParameters = GetLinkedAccountsParameters{getLinkedAccountsParametersQueryAccountHolder = GHC.Maybe.Nothing,
                                                            getLinkedAccountsParametersQueryEndingBefore = GHC.Maybe.Nothing,
                                                            getLinkedAccountsParametersQueryExpand = GHC.Maybe.Nothing,
                                                            getLinkedAccountsParametersQueryLimit = GHC.Maybe.Nothing,
                                                            getLinkedAccountsParametersQuerySession = GHC.Maybe.Nothing,
                                                            getLinkedAccountsParametersQueryStartingAfter = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/linked_accounts.GET.parameters.properties.queryAccount_holder@ in the specification.
-- 
-- Represents the parameter named \'account_holder\'
-- 
-- If present, only return accounts that belong to the specified account holder. \`account_holder[customer]\` and \`account_holder[account]\` are mutually exclusive.
data GetLinkedAccountsParametersQueryAccountHolder' = GetLinkedAccountsParametersQueryAccountHolder' {
  -- | account
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getLinkedAccountsParametersQueryAccountHolder'Account :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | customer
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getLinkedAccountsParametersQueryAccountHolder'Customer :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinkedAccountsParametersQueryAccountHolder'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryAccountHolder'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryAccountHolder'Customer obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryAccountHolder'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (getLinkedAccountsParametersQueryAccountHolder'Customer obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinkedAccountsParametersQueryAccountHolder'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinkedAccountsParametersQueryAccountHolder'" (\obj -> (GHC.Base.pure GetLinkedAccountsParametersQueryAccountHolder' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer"))
-- | Create a new 'GetLinkedAccountsParametersQueryAccountHolder'' with all required fields.
mkGetLinkedAccountsParametersQueryAccountHolder' :: GetLinkedAccountsParametersQueryAccountHolder'
mkGetLinkedAccountsParametersQueryAccountHolder' = GetLinkedAccountsParametersQueryAccountHolder'{getLinkedAccountsParametersQueryAccountHolder'Account = GHC.Maybe.Nothing,
                                                                                                  getLinkedAccountsParametersQueryAccountHolder'Customer = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getLinkedAccounts'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetLinkedAccountsResponseError' is used.
data GetLinkedAccountsResponse =
   GetLinkedAccountsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetLinkedAccountsResponse200 GetLinkedAccountsResponseBody200 -- ^ Successful response.
  | GetLinkedAccountsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/v1\/linked_accounts.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetLinkedAccountsResponseBody200 = GetLinkedAccountsResponseBody200 {
  -- | data: Details about each object.
  getLinkedAccountsResponseBody200Data :: ([FinancialConnections'account])
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , getLinkedAccountsResponseBody200HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  -- * Must match pattern \'^\/v1\/financial_connections\/accounts\'
  , getLinkedAccountsResponseBody200Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetLinkedAccountsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getLinkedAccountsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getLinkedAccountsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getLinkedAccountsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getLinkedAccountsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getLinkedAccountsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getLinkedAccountsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetLinkedAccountsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetLinkedAccountsResponseBody200" (\obj -> ((GHC.Base.pure GetLinkedAccountsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
-- | Create a new 'GetLinkedAccountsResponseBody200' with all required fields.
mkGetLinkedAccountsResponseBody200 :: [FinancialConnections'account] -- ^ 'getLinkedAccountsResponseBody200Data'
  -> GHC.Types.Bool -- ^ 'getLinkedAccountsResponseBody200HasMore'
  -> Data.Text.Internal.Text -- ^ 'getLinkedAccountsResponseBody200Url'
  -> GetLinkedAccountsResponseBody200
mkGetLinkedAccountsResponseBody200 getLinkedAccountsResponseBody200Data getLinkedAccountsResponseBody200HasMore getLinkedAccountsResponseBody200Url = GetLinkedAccountsResponseBody200{getLinkedAccountsResponseBody200Data = getLinkedAccountsResponseBody200Data,
                                                                                                                                                                                       getLinkedAccountsResponseBody200HasMore = getLinkedAccountsResponseBody200HasMore,
                                                                                                                                                                                       getLinkedAccountsResponseBody200Url = getLinkedAccountsResponseBody200Url}
