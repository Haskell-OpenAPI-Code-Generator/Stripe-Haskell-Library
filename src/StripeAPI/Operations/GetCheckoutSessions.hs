-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getCheckoutSessions
module StripeAPI.Operations.GetCheckoutSessions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/checkout/sessions
-- 
-- \<p>Returns a list of Checkout Sessions.\<\/p>
getCheckoutSessions :: forall m . StripeAPI.Common.MonadHTTP m => GetCheckoutSessionsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetCheckoutSessionsResponse) -- ^ Monadic computation which returns the result of the operation
getCheckoutSessions parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetCheckoutSessionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetCheckoutSessionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                  GetCheckoutSessionsResponseBody200)
                                                                                                                                                                               | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetCheckoutSessionsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                    Error)
                                                                                                                                                                               | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/v1/checkout/sessions") [StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCheckoutSessionsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                        StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCheckoutSessionsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                        StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCheckoutSessionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                        StripeAPI.Common.QueryParameter (Data.Text.pack "payment_intent") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCheckoutSessionsParametersQueryPaymentIntent parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                        StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCheckoutSessionsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                        StripeAPI.Common.QueryParameter (Data.Text.pack "subscription") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCheckoutSessionsParametersQuerySubscription parameters) (Data.Text.pack "form") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/checkout\/sessions.GET.parameters@ in the specification.
-- 
-- 
data GetCheckoutSessionsParameters = GetCheckoutSessionsParameters {
  -- | queryEnding_before: Represents the parameter named \'ending_before\'
  -- 
  -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getCheckoutSessionsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getCheckoutSessionsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | queryLimit: Represents the parameter named \'limit\'
  -- 
  -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  , getCheckoutSessionsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryPayment_intent: Represents the parameter named \'payment_intent\'
  -- 
  -- Only return the Checkout Session for the PaymentIntent specified.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getCheckoutSessionsParametersQueryPaymentIntent :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryStarting_after: Represents the parameter named \'starting_after\'
  -- 
  -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getCheckoutSessionsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | querySubscription: Represents the parameter named \'subscription\'
  -- 
  -- Only return the Checkout Session for the subscription specified.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getCheckoutSessionsParametersQuerySubscription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCheckoutSessionsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPayment_intent" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryPaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySubscription" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQuerySubscription obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPayment_intent" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryPaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("querySubscription" Data.Aeson.Types.ToJSON..=)) (getCheckoutSessionsParametersQuerySubscription obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetCheckoutSessionsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCheckoutSessionsParameters" (\obj -> (((((GHC.Base.pure GetCheckoutSessionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPayment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "querySubscription"))
-- | Create a new 'GetCheckoutSessionsParameters' with all required fields.
mkGetCheckoutSessionsParameters :: GetCheckoutSessionsParameters
mkGetCheckoutSessionsParameters = GetCheckoutSessionsParameters{getCheckoutSessionsParametersQueryEndingBefore = GHC.Maybe.Nothing,
                                                                getCheckoutSessionsParametersQueryExpand = GHC.Maybe.Nothing,
                                                                getCheckoutSessionsParametersQueryLimit = GHC.Maybe.Nothing,
                                                                getCheckoutSessionsParametersQueryPaymentIntent = GHC.Maybe.Nothing,
                                                                getCheckoutSessionsParametersQueryStartingAfter = GHC.Maybe.Nothing,
                                                                getCheckoutSessionsParametersQuerySubscription = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getCheckoutSessions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetCheckoutSessionsResponseError' is used.
data GetCheckoutSessionsResponse =
   GetCheckoutSessionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetCheckoutSessionsResponse200 GetCheckoutSessionsResponseBody200 -- ^ Successful response.
  | GetCheckoutSessionsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/v1\/checkout\/sessions.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetCheckoutSessionsResponseBody200 = GetCheckoutSessionsResponseBody200 {
  -- | data
  getCheckoutSessionsResponseBody200Data :: ([Checkout'session])
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , getCheckoutSessionsResponseBody200HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getCheckoutSessionsResponseBody200Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetCheckoutSessionsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getCheckoutSessionsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getCheckoutSessionsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getCheckoutSessionsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getCheckoutSessionsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getCheckoutSessionsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getCheckoutSessionsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetCheckoutSessionsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCheckoutSessionsResponseBody200" (\obj -> ((GHC.Base.pure GetCheckoutSessionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
-- | Create a new 'GetCheckoutSessionsResponseBody200' with all required fields.
mkGetCheckoutSessionsResponseBody200 :: [Checkout'session] -- ^ 'getCheckoutSessionsResponseBody200Data'
  -> GHC.Types.Bool -- ^ 'getCheckoutSessionsResponseBody200HasMore'
  -> Data.Text.Internal.Text -- ^ 'getCheckoutSessionsResponseBody200Url'
  -> GetCheckoutSessionsResponseBody200
mkGetCheckoutSessionsResponseBody200 getCheckoutSessionsResponseBody200Data getCheckoutSessionsResponseBody200HasMore getCheckoutSessionsResponseBody200Url = GetCheckoutSessionsResponseBody200{getCheckoutSessionsResponseBody200Data = getCheckoutSessionsResponseBody200Data,
                                                                                                                                                                                                 getCheckoutSessionsResponseBody200HasMore = getCheckoutSessionsResponseBody200HasMore,
                                                                                                                                                                                                 getCheckoutSessionsResponseBody200Url = getCheckoutSessionsResponseBody200Url}
