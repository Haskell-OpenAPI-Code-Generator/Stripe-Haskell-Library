{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postAccountSessions
module StripeAPI.Operations.PostAccountSessions where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/account_sessions
--
-- \<p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to grant client-side API access.\<\/p>
postAccountSessions ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostAccountSessionsRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostAccountSessionsResponse)
postAccountSessions body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostAccountSessionsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostAccountSessionsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              AccountSession
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostAccountSessionsResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") "/v1/account_sessions" GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostAccountSessionsRequestBody = PostAccountSessionsRequestBody
  { -- | account: The identifier of the account to create an Account Session for.
    postAccountSessionsRequestBodyAccount :: Data.Text.Internal.Text,
    -- | components: Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).
    postAccountSessionsRequestBodyComponents :: PostAccountSessionsRequestBodyComponents',
    -- | expand: Specifies which fields in the response should be expanded.
    postAccountSessionsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountSessionsRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyAccount obj] : ["components" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyExpand obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyAccount obj] : ["components" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyExpand obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountSessionsRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountSessionsRequestBody" (\obj -> ((GHC.Base.pure PostAccountSessionsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "components")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand"))

-- | Create a new 'PostAccountSessionsRequestBody' with all required fields.
mkPostAccountSessionsRequestBody ::
  -- | 'postAccountSessionsRequestBodyAccount'
  Data.Text.Internal.Text ->
  -- | 'postAccountSessionsRequestBodyComponents'
  PostAccountSessionsRequestBodyComponents' ->
  PostAccountSessionsRequestBody
mkPostAccountSessionsRequestBody postAccountSessionsRequestBodyAccount postAccountSessionsRequestBodyComponents =
  PostAccountSessionsRequestBody
    { postAccountSessionsRequestBodyAccount = postAccountSessionsRequestBodyAccount,
      postAccountSessionsRequestBodyComponents = postAccountSessionsRequestBodyComponents,
      postAccountSessionsRequestBodyExpand = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.components@ in the specification.
--
-- Each key of the dictionary represents an embedded component, and each embedded component maps to its configuration (e.g. whether it has been enabled or not).
data PostAccountSessionsRequestBodyComponents' = PostAccountSessionsRequestBodyComponents'
  { -- | account_onboarding
    postAccountSessionsRequestBodyComponents'AccountOnboarding :: (GHC.Maybe.Maybe PostAccountSessionsRequestBodyComponents'AccountOnboarding'),
    -- | payment_details
    postAccountSessionsRequestBodyComponents'PaymentDetails :: (GHC.Maybe.Maybe PostAccountSessionsRequestBodyComponents'PaymentDetails'),
    -- | payments
    postAccountSessionsRequestBodyComponents'Payments :: (GHC.Maybe.Maybe PostAccountSessionsRequestBodyComponents'Payments'),
    -- | payouts
    postAccountSessionsRequestBodyComponents'Payouts :: (GHC.Maybe.Maybe PostAccountSessionsRequestBodyComponents'Payouts')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountSessionsRequestBodyComponents' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_onboarding" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'AccountOnboarding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_details" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payments" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payouts" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_onboarding" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'AccountOnboarding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_details" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payments" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payouts" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountSessionsRequestBodyComponents' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountSessionsRequestBodyComponents'" (\obj -> (((GHC.Base.pure PostAccountSessionsRequestBodyComponents' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_onboarding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payouts"))

-- | Create a new 'PostAccountSessionsRequestBodyComponents'' with all required fields.
mkPostAccountSessionsRequestBodyComponents' :: PostAccountSessionsRequestBodyComponents'
mkPostAccountSessionsRequestBodyComponents' =
  PostAccountSessionsRequestBodyComponents'
    { postAccountSessionsRequestBodyComponents'AccountOnboarding = GHC.Maybe.Nothing,
      postAccountSessionsRequestBodyComponents'PaymentDetails = GHC.Maybe.Nothing,
      postAccountSessionsRequestBodyComponents'Payments = GHC.Maybe.Nothing,
      postAccountSessionsRequestBodyComponents'Payouts = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.components.properties.account_onboarding@ in the specification.
data PostAccountSessionsRequestBodyComponents'AccountOnboarding' = PostAccountSessionsRequestBodyComponents'AccountOnboarding'
  { -- | enabled
    postAccountSessionsRequestBodyComponents'AccountOnboarding'Enabled :: GHC.Types.Bool,
    -- | features
    postAccountSessionsRequestBodyComponents'AccountOnboarding'Features :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountSessionsRequestBodyComponents'AccountOnboarding' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents'AccountOnboarding'Enabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'AccountOnboarding'Features obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents'AccountOnboarding'Enabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'AccountOnboarding'Features obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountSessionsRequestBodyComponents'AccountOnboarding' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountSessionsRequestBodyComponents'AccountOnboarding'" (\obj -> (GHC.Base.pure PostAccountSessionsRequestBodyComponents'AccountOnboarding' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "features"))

-- | Create a new 'PostAccountSessionsRequestBodyComponents'AccountOnboarding'' with all required fields.
mkPostAccountSessionsRequestBodyComponents'AccountOnboarding' ::
  -- | 'postAccountSessionsRequestBodyComponents'AccountOnboarding'Enabled'
  GHC.Types.Bool ->
  PostAccountSessionsRequestBodyComponents'AccountOnboarding'
mkPostAccountSessionsRequestBodyComponents'AccountOnboarding' postAccountSessionsRequestBodyComponents'AccountOnboarding'Enabled =
  PostAccountSessionsRequestBodyComponents'AccountOnboarding'
    { postAccountSessionsRequestBodyComponents'AccountOnboarding'Enabled = postAccountSessionsRequestBodyComponents'AccountOnboarding'Enabled,
      postAccountSessionsRequestBodyComponents'AccountOnboarding'Features = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.components.properties.payment_details@ in the specification.
data PostAccountSessionsRequestBodyComponents'PaymentDetails' = PostAccountSessionsRequestBodyComponents'PaymentDetails'
  { -- | enabled
    postAccountSessionsRequestBodyComponents'PaymentDetails'Enabled :: GHC.Types.Bool,
    -- | features
    postAccountSessionsRequestBodyComponents'PaymentDetails'Features :: (GHC.Maybe.Maybe PostAccountSessionsRequestBodyComponents'PaymentDetails'Features')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountSessionsRequestBodyComponents'PaymentDetails' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents'PaymentDetails'Enabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails'Features obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents'PaymentDetails'Enabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails'Features obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountSessionsRequestBodyComponents'PaymentDetails' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountSessionsRequestBodyComponents'PaymentDetails'" (\obj -> (GHC.Base.pure PostAccountSessionsRequestBodyComponents'PaymentDetails' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "features"))

-- | Create a new 'PostAccountSessionsRequestBodyComponents'PaymentDetails'' with all required fields.
mkPostAccountSessionsRequestBodyComponents'PaymentDetails' ::
  -- | 'postAccountSessionsRequestBodyComponents'PaymentDetails'Enabled'
  GHC.Types.Bool ->
  PostAccountSessionsRequestBodyComponents'PaymentDetails'
mkPostAccountSessionsRequestBodyComponents'PaymentDetails' postAccountSessionsRequestBodyComponents'PaymentDetails'Enabled =
  PostAccountSessionsRequestBodyComponents'PaymentDetails'
    { postAccountSessionsRequestBodyComponents'PaymentDetails'Enabled = postAccountSessionsRequestBodyComponents'PaymentDetails'Enabled,
      postAccountSessionsRequestBodyComponents'PaymentDetails'Features = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.components.properties.payment_details.properties.features@ in the specification.
data PostAccountSessionsRequestBodyComponents'PaymentDetails'Features' = PostAccountSessionsRequestBodyComponents'PaymentDetails'Features'
  { -- | capture_payments
    postAccountSessionsRequestBodyComponents'PaymentDetails'Features'CapturePayments :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | dispute_management
    postAccountSessionsRequestBodyComponents'PaymentDetails'Features'DisputeManagement :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | refund_management
    postAccountSessionsRequestBodyComponents'PaymentDetails'Features'RefundManagement :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountSessionsRequestBodyComponents'PaymentDetails'Features' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_payments" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails'Features'CapturePayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dispute_management" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails'Features'DisputeManagement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refund_management" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails'Features'RefundManagement obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_payments" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails'Features'CapturePayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dispute_management" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails'Features'DisputeManagement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refund_management" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'PaymentDetails'Features'RefundManagement obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountSessionsRequestBodyComponents'PaymentDetails'Features' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountSessionsRequestBodyComponents'PaymentDetails'Features'" (\obj -> ((GHC.Base.pure PostAccountSessionsRequestBodyComponents'PaymentDetails'Features' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dispute_management")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "refund_management"))

-- | Create a new 'PostAccountSessionsRequestBodyComponents'PaymentDetails'Features'' with all required fields.
mkPostAccountSessionsRequestBodyComponents'PaymentDetails'Features' :: PostAccountSessionsRequestBodyComponents'PaymentDetails'Features'
mkPostAccountSessionsRequestBodyComponents'PaymentDetails'Features' =
  PostAccountSessionsRequestBodyComponents'PaymentDetails'Features'
    { postAccountSessionsRequestBodyComponents'PaymentDetails'Features'CapturePayments = GHC.Maybe.Nothing,
      postAccountSessionsRequestBodyComponents'PaymentDetails'Features'DisputeManagement = GHC.Maybe.Nothing,
      postAccountSessionsRequestBodyComponents'PaymentDetails'Features'RefundManagement = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.components.properties.payments@ in the specification.
data PostAccountSessionsRequestBodyComponents'Payments' = PostAccountSessionsRequestBodyComponents'Payments'
  { -- | enabled
    postAccountSessionsRequestBodyComponents'Payments'Enabled :: GHC.Types.Bool,
    -- | features
    postAccountSessionsRequestBodyComponents'Payments'Features :: (GHC.Maybe.Maybe PostAccountSessionsRequestBodyComponents'Payments'Features')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountSessionsRequestBodyComponents'Payments' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents'Payments'Enabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments'Features obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents'Payments'Enabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments'Features obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountSessionsRequestBodyComponents'Payments' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountSessionsRequestBodyComponents'Payments'" (\obj -> (GHC.Base.pure PostAccountSessionsRequestBodyComponents'Payments' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "features"))

-- | Create a new 'PostAccountSessionsRequestBodyComponents'Payments'' with all required fields.
mkPostAccountSessionsRequestBodyComponents'Payments' ::
  -- | 'postAccountSessionsRequestBodyComponents'Payments'Enabled'
  GHC.Types.Bool ->
  PostAccountSessionsRequestBodyComponents'Payments'
mkPostAccountSessionsRequestBodyComponents'Payments' postAccountSessionsRequestBodyComponents'Payments'Enabled =
  PostAccountSessionsRequestBodyComponents'Payments'
    { postAccountSessionsRequestBodyComponents'Payments'Enabled = postAccountSessionsRequestBodyComponents'Payments'Enabled,
      postAccountSessionsRequestBodyComponents'Payments'Features = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.components.properties.payments.properties.features@ in the specification.
data PostAccountSessionsRequestBodyComponents'Payments'Features' = PostAccountSessionsRequestBodyComponents'Payments'Features'
  { -- | capture_payments
    postAccountSessionsRequestBodyComponents'Payments'Features'CapturePayments :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | dispute_management
    postAccountSessionsRequestBodyComponents'Payments'Features'DisputeManagement :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | refund_management
    postAccountSessionsRequestBodyComponents'Payments'Features'RefundManagement :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountSessionsRequestBodyComponents'Payments'Features' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_payments" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments'Features'CapturePayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dispute_management" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments'Features'DisputeManagement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refund_management" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments'Features'RefundManagement obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("capture_payments" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments'Features'CapturePayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dispute_management" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments'Features'DisputeManagement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refund_management" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payments'Features'RefundManagement obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountSessionsRequestBodyComponents'Payments'Features' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountSessionsRequestBodyComponents'Payments'Features'" (\obj -> ((GHC.Base.pure PostAccountSessionsRequestBodyComponents'Payments'Features' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "capture_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dispute_management")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "refund_management"))

-- | Create a new 'PostAccountSessionsRequestBodyComponents'Payments'Features'' with all required fields.
mkPostAccountSessionsRequestBodyComponents'Payments'Features' :: PostAccountSessionsRequestBodyComponents'Payments'Features'
mkPostAccountSessionsRequestBodyComponents'Payments'Features' =
  PostAccountSessionsRequestBodyComponents'Payments'Features'
    { postAccountSessionsRequestBodyComponents'Payments'Features'CapturePayments = GHC.Maybe.Nothing,
      postAccountSessionsRequestBodyComponents'Payments'Features'DisputeManagement = GHC.Maybe.Nothing,
      postAccountSessionsRequestBodyComponents'Payments'Features'RefundManagement = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.components.properties.payouts@ in the specification.
data PostAccountSessionsRequestBodyComponents'Payouts' = PostAccountSessionsRequestBodyComponents'Payouts'
  { -- | enabled
    postAccountSessionsRequestBodyComponents'Payouts'Enabled :: GHC.Types.Bool,
    -- | features
    postAccountSessionsRequestBodyComponents'Payouts'Features :: (GHC.Maybe.Maybe PostAccountSessionsRequestBodyComponents'Payouts'Features')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountSessionsRequestBodyComponents'Payouts' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents'Payouts'Enabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts'Features obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postAccountSessionsRequestBodyComponents'Payouts'Enabled obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("features" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts'Features obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountSessionsRequestBodyComponents'Payouts' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountSessionsRequestBodyComponents'Payouts'" (\obj -> (GHC.Base.pure PostAccountSessionsRequestBodyComponents'Payouts' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "features"))

-- | Create a new 'PostAccountSessionsRequestBodyComponents'Payouts'' with all required fields.
mkPostAccountSessionsRequestBodyComponents'Payouts' ::
  -- | 'postAccountSessionsRequestBodyComponents'Payouts'Enabled'
  GHC.Types.Bool ->
  PostAccountSessionsRequestBodyComponents'Payouts'
mkPostAccountSessionsRequestBodyComponents'Payouts' postAccountSessionsRequestBodyComponents'Payouts'Enabled =
  PostAccountSessionsRequestBodyComponents'Payouts'
    { postAccountSessionsRequestBodyComponents'Payouts'Enabled = postAccountSessionsRequestBodyComponents'Payouts'Enabled,
      postAccountSessionsRequestBodyComponents'Payouts'Features = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.components.properties.payouts.properties.features@ in the specification.
data PostAccountSessionsRequestBodyComponents'Payouts'Features' = PostAccountSessionsRequestBodyComponents'Payouts'Features'
  { -- | edit_payout_schedule
    postAccountSessionsRequestBodyComponents'Payouts'Features'EditPayoutSchedule :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | instant_payouts
    postAccountSessionsRequestBodyComponents'Payouts'Features'InstantPayouts :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | standard_payouts
    postAccountSessionsRequestBodyComponents'Payouts'Features'StandardPayouts :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostAccountSessionsRequestBodyComponents'Payouts'Features' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("edit_payout_schedule" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts'Features'EditPayoutSchedule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instant_payouts" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts'Features'InstantPayouts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard_payouts" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts'Features'StandardPayouts obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("edit_payout_schedule" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts'Features'EditPayoutSchedule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instant_payouts" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts'Features'InstantPayouts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("standard_payouts" Data.Aeson.Types.ToJSON..=)) (postAccountSessionsRequestBodyComponents'Payouts'Features'StandardPayouts obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostAccountSessionsRequestBodyComponents'Payouts'Features' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostAccountSessionsRequestBodyComponents'Payouts'Features'" (\obj -> ((GHC.Base.pure PostAccountSessionsRequestBodyComponents'Payouts'Features' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "edit_payout_schedule")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "instant_payouts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "standard_payouts"))

-- | Create a new 'PostAccountSessionsRequestBodyComponents'Payouts'Features'' with all required fields.
mkPostAccountSessionsRequestBodyComponents'Payouts'Features' :: PostAccountSessionsRequestBodyComponents'Payouts'Features'
mkPostAccountSessionsRequestBodyComponents'Payouts'Features' =
  PostAccountSessionsRequestBodyComponents'Payouts'Features'
    { postAccountSessionsRequestBodyComponents'Payouts'Features'EditPayoutSchedule = GHC.Maybe.Nothing,
      postAccountSessionsRequestBodyComponents'Payouts'Features'InstantPayouts = GHC.Maybe.Nothing,
      postAccountSessionsRequestBodyComponents'Payouts'Features'StandardPayouts = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postAccountSessions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostAccountSessionsResponseError' is used.
data PostAccountSessionsResponse
  = -- | Means either no matching case available or a parse error
    PostAccountSessionsResponseError GHC.Base.String
  | -- | Successful response.
    PostAccountSessionsResponse200 AccountSession
  | -- | Error response.
    PostAccountSessionsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
