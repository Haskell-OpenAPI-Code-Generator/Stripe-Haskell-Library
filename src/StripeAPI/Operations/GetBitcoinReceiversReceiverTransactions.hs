{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getBitcoinReceiversReceiverTransactions
module StripeAPI.Operations.GetBitcoinReceiversReceiverTransactions where

import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/bitcoin/receivers/{receiver}/transactions
--
-- \<p>List bitcoin transacitons for a given receiver.\<\/p>
getBitcoinReceiversReceiverTransactions ::
  forall m s.
  (StripeAPI.Common.MonadHTTP m, StripeAPI.Common.SecurityScheme s) =>
  -- | The configuration to use in the request
  StripeAPI.Common.Configuration s ->
  -- | customer: Only return transactions for the customer specified by this customer ID. | Constraints: Maximum length of 5000
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  -- | ending_before: A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list. | Constraints: Maximum length of 5000
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  -- | expand: Specifies which fields in the response should be expanded.
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  -- | limit: A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  GHC.Maybe.Maybe GHC.Integer.Type.Integer ->
  -- | receiver | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | starting_after: A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list. | Constraints: Maximum length of 5000
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe GetBitcoinReceiversReceiverTransactionsRequestBody ->
  -- | Monad containing the result of the operation
  m (Data.Either.Either Network.HTTP.Client.Types.HttpException (Network.HTTP.Client.Types.Response GetBitcoinReceiversReceiverTransactionsResponse))
getBitcoinReceiversReceiverTransactions
  config
  customer
  endingBefore
  expand
  limit
  receiver
  startingAfter
  body =
    GHC.Base.fmap
      ( GHC.Base.fmap
          ( \response_0 ->
              GHC.Base.fmap
                ( Data.Either.either GetBitcoinReceiversReceiverTransactionsResponseError GHC.Base.id
                    GHC.Base.. ( \response body ->
                                   if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                         GetBitcoinReceiversReceiverTransactionsResponse200
                                           Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                Data.Either.Either GHC.Base.String
                                                                  GetBitcoinReceiversReceiverTransactionsResponseBody200
                                                            )
                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                         GetBitcoinReceiversReceiverTransactionsResponseDefault
                                           Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                Data.Either.Either GHC.Base.String
                                                                  Error
                                                            )
                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                               )
                      response_0
                )
                response_0
          )
      )
      ( StripeAPI.Common.doBodyCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack ("/v1/bitcoin/receivers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel receiver)) GHC.Base.++ "/transactions")))
          ( ( Data.Text.pack "customer",
              StripeAPI.Common.stringifyModel Data.Functor.<$> customer
            )
              : ( ( Data.Text.pack "ending_before",
                    StripeAPI.Common.stringifyModel Data.Functor.<$> endingBefore
                  )
                    : ( ( Data.Text.pack "expand",
                          StripeAPI.Common.stringifyModel Data.Functor.<$> expand
                        )
                          : ( ( Data.Text.pack "limit",
                                StripeAPI.Common.stringifyModel Data.Functor.<$> limit
                              )
                                : ( ( Data.Text.pack "starting_after",
                                      StripeAPI.Common.stringifyModel Data.Functor.<$> startingAfter
                                    )
                                      : []
                                  )
                            )
                      )
                )
          )
          body
          StripeAPI.Common.RequestBodyEncodingFormData
      )

-- | > GET /v1/bitcoin/receivers/{receiver}/transactions
--
-- The same as 'getBitcoinReceiversReceiverTransactions' but returns the raw 'Data.ByteString.Char8.ByteString'
getBitcoinReceiversReceiverTransactionsRaw ::
  forall m s.
  ( StripeAPI.Common.MonadHTTP m,
    StripeAPI.Common.SecurityScheme s
  ) =>
  StripeAPI.Common.Configuration s ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe GHC.Integer.Type.Integer ->
  Data.Text.Internal.Text ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe GetBitcoinReceiversReceiverTransactionsRequestBody ->
  m
    ( Data.Either.Either Network.HTTP.Client.Types.HttpException
        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
    )
getBitcoinReceiversReceiverTransactionsRaw
  config
  customer
  endingBefore
  expand
  limit
  receiver
  startingAfter
  body =
    GHC.Base.id
      ( StripeAPI.Common.doBodyCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack ("/v1/bitcoin/receivers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel receiver)) GHC.Base.++ "/transactions")))
          ( ( Data.Text.pack "customer",
              StripeAPI.Common.stringifyModel Data.Functor.<$> customer
            )
              : ( ( Data.Text.pack "ending_before",
                    StripeAPI.Common.stringifyModel Data.Functor.<$> endingBefore
                  )
                    : ( ( Data.Text.pack "expand",
                          StripeAPI.Common.stringifyModel Data.Functor.<$> expand
                        )
                          : ( ( Data.Text.pack "limit",
                                StripeAPI.Common.stringifyModel Data.Functor.<$> limit
                              )
                                : ( ( Data.Text.pack "starting_after",
                                      StripeAPI.Common.stringifyModel Data.Functor.<$> startingAfter
                                    )
                                      : []
                                  )
                            )
                      )
                )
          )
          body
          StripeAPI.Common.RequestBodyEncodingFormData
      )

-- | > GET /v1/bitcoin/receivers/{receiver}/transactions
--
-- Monadic version of 'getBitcoinReceiversReceiverTransactions' (use with 'StripeAPI.Common.runWithConfiguration')
getBitcoinReceiversReceiverTransactionsM ::
  forall m s.
  ( StripeAPI.Common.MonadHTTP m,
    StripeAPI.Common.SecurityScheme s
  ) =>
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe GHC.Integer.Type.Integer ->
  Data.Text.Internal.Text ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe GetBitcoinReceiversReceiverTransactionsRequestBody ->
  Control.Monad.Trans.Reader.ReaderT (StripeAPI.Common.Configuration s)
    m
    ( Data.Either.Either Network.HTTP.Client.Types.HttpException
        (Network.HTTP.Client.Types.Response GetBitcoinReceiversReceiverTransactionsResponse)
    )
getBitcoinReceiversReceiverTransactionsM
  customer
  endingBefore
  expand
  limit
  receiver
  startingAfter
  body =
    GHC.Base.fmap
      ( GHC.Base.fmap
          ( \response_2 ->
              GHC.Base.fmap
                ( Data.Either.either GetBitcoinReceiversReceiverTransactionsResponseError GHC.Base.id
                    GHC.Base.. ( \response body ->
                                   if  | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                         GetBitcoinReceiversReceiverTransactionsResponse200
                                           Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                Data.Either.Either GHC.Base.String
                                                                  GetBitcoinReceiversReceiverTransactionsResponseBody200
                                                            )
                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                         GetBitcoinReceiversReceiverTransactionsResponseDefault
                                           Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                                Data.Either.Either GHC.Base.String
                                                                  Error
                                                            )
                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                               )
                      response_2
                )
                response_2
          )
      )
      ( StripeAPI.Common.doBodyCallWithConfigurationM
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack ("/v1/bitcoin/receivers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel receiver)) GHC.Base.++ "/transactions")))
          ( ( Data.Text.pack "customer",
              StripeAPI.Common.stringifyModel Data.Functor.<$> customer
            )
              : ( ( Data.Text.pack "ending_before",
                    StripeAPI.Common.stringifyModel Data.Functor.<$> endingBefore
                  )
                    : ( ( Data.Text.pack "expand",
                          StripeAPI.Common.stringifyModel Data.Functor.<$> expand
                        )
                          : ( ( Data.Text.pack "limit",
                                StripeAPI.Common.stringifyModel Data.Functor.<$> limit
                              )
                                : ( ( Data.Text.pack "starting_after",
                                      StripeAPI.Common.stringifyModel Data.Functor.<$> startingAfter
                                    )
                                      : []
                                  )
                            )
                      )
                )
          )
          body
          StripeAPI.Common.RequestBodyEncodingFormData
      )

-- | > GET /v1/bitcoin/receivers/{receiver}/transactions
--
-- Monadic version of 'getBitcoinReceiversReceiverTransactionsRaw' (use with 'StripeAPI.Common.runWithConfiguration')
getBitcoinReceiversReceiverTransactionsRawM ::
  forall m s.
  ( StripeAPI.Common.MonadHTTP m,
    StripeAPI.Common.SecurityScheme s
  ) =>
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe GHC.Integer.Type.Integer ->
  Data.Text.Internal.Text ->
  GHC.Maybe.Maybe Data.Text.Internal.Text ->
  GHC.Maybe.Maybe GetBitcoinReceiversReceiverTransactionsRequestBody ->
  Control.Monad.Trans.Reader.ReaderT (StripeAPI.Common.Configuration s)
    m
    ( Data.Either.Either Network.HTTP.Client.Types.HttpException
        (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
    )
getBitcoinReceiversReceiverTransactionsRawM
  customer
  endingBefore
  expand
  limit
  receiver
  startingAfter
  body =
    GHC.Base.id
      ( StripeAPI.Common.doBodyCallWithConfigurationM
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack ("/v1/bitcoin/receivers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel receiver)) GHC.Base.++ "/transactions")))
          ( ( Data.Text.pack "customer",
              StripeAPI.Common.stringifyModel Data.Functor.<$> customer
            )
              : ( ( Data.Text.pack "ending_before",
                    StripeAPI.Common.stringifyModel Data.Functor.<$> endingBefore
                  )
                    : ( ( Data.Text.pack "expand",
                          StripeAPI.Common.stringifyModel Data.Functor.<$> expand
                        )
                          : ( ( Data.Text.pack "limit",
                                StripeAPI.Common.stringifyModel Data.Functor.<$> limit
                              )
                                : ( ( Data.Text.pack "starting_after",
                                      StripeAPI.Common.stringifyModel Data.Functor.<$> startingAfter
                                    )
                                      : []
                                  )
                            )
                      )
                )
          )
          body
          StripeAPI.Common.RequestBodyEncodingFormData
      )

-- | Defines the data type for the schema getBitcoinReceiversReceiverTransactionsRequestBody
data GetBitcoinReceiversReceiverTransactionsRequestBody
  = GetBitcoinReceiversReceiverTransactionsRequestBody
      {
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.ToJSON GetBitcoinReceiversReceiverTransactionsRequestBody where
  toJSON obj = Data.Aeson.object []
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "string" ("string" :: GHC.Base.String))

instance Data.Aeson.Types.FromJSON.FromJSON GetBitcoinReceiversReceiverTransactionsRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBitcoinReceiversReceiverTransactionsRequestBody" (\obj -> GHC.Base.pure GetBitcoinReceiversReceiverTransactionsRequestBody)

-- | Represents a response of the operation 'getBitcoinReceiversReceiverTransactions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBitcoinReceiversReceiverTransactionsResponseError' is used.
data GetBitcoinReceiversReceiverTransactionsResponse
  = -- | Means either no matching case available or a parse error
    GetBitcoinReceiversReceiverTransactionsResponseError GHC.Base.String
  | -- | Successful response.
    GetBitcoinReceiversReceiverTransactionsResponse200 GetBitcoinReceiversReceiverTransactionsResponseBody200
  | -- | Error response.
    GetBitcoinReceiversReceiverTransactionsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the data type for the schema GetBitcoinReceiversReceiverTransactionsResponseBody200
data GetBitcoinReceiversReceiverTransactionsResponseBody200
  = GetBitcoinReceiversReceiverTransactionsResponseBody200
      { -- | data: Details about each object.
        getBitcoinReceiversReceiverTransactionsResponseBody200Data :: ([] BitcoinTransaction),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getBitcoinReceiversReceiverTransactionsResponseBody200HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        getBitcoinReceiversReceiverTransactionsResponseBody200Object :: GetBitcoinReceiversReceiverTransactionsResponseBody200Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getBitcoinReceiversReceiverTransactionsResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.ToJSON GetBitcoinReceiversReceiverTransactionsResponseBody200 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getBitcoinReceiversReceiverTransactionsResponseBody200Data obj) : (Data.Aeson..=) "has_more" (getBitcoinReceiversReceiverTransactionsResponseBody200HasMore obj) : (Data.Aeson..=) "object" (getBitcoinReceiversReceiverTransactionsResponseBody200Object obj) : (Data.Aeson..=) "url" (getBitcoinReceiversReceiverTransactionsResponseBody200Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getBitcoinReceiversReceiverTransactionsResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (getBitcoinReceiversReceiverTransactionsResponseBody200HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (getBitcoinReceiversReceiverTransactionsResponseBody200Object obj) GHC.Base.<> (Data.Aeson..=) "url" (getBitcoinReceiversReceiverTransactionsResponseBody200Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetBitcoinReceiversReceiverTransactionsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBitcoinReceiversReceiverTransactionsResponseBody200" (\obj -> (((GHC.Base.pure GetBitcoinReceiversReceiverTransactionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema GetBitcoinReceiversReceiverTransactionsResponseBody200Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data GetBitcoinReceiversReceiverTransactionsResponseBody200Object'
  = GetBitcoinReceiversReceiverTransactionsResponseBody200Object'EnumOther Data.Aeson.Types.Internal.Value
  | GetBitcoinReceiversReceiverTransactionsResponseBody200Object'EnumTyped Data.Text.Internal.Text
  | GetBitcoinReceiversReceiverTransactionsResponseBody200Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.ToJSON GetBitcoinReceiversReceiverTransactionsResponseBody200Object' where
  toJSON (GetBitcoinReceiversReceiverTransactionsResponseBody200Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetBitcoinReceiversReceiverTransactionsResponseBody200Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetBitcoinReceiversReceiverTransactionsResponseBody200Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"

instance Data.Aeson.FromJSON GetBitcoinReceiversReceiverTransactionsResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
          then GetBitcoinReceiversReceiverTransactionsResponseBody200Object'EnumStringList
          else GetBitcoinReceiversReceiverTransactionsResponseBody200Object'EnumOther val
      )
