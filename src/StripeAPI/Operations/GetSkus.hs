{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getSkus
module StripeAPI.Operations.GetSkus where

import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/skus
--
-- \<p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.\<\/p>
getSkus ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSkusParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetSkusResponse)
getSkus parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSkusResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSkusResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetSkusResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSkusResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/skus")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "active") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryActive parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "attributes") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryAttributes parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ids") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryIds parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "in_stock") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryInStock parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "product") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryProduct parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the data type for the schema getSkusParameters
data GetSkusParameters
  = GetSkusParameters
      { -- | queryActive: Represents the parameter named \'active\'
        --
        -- Only return SKUs that are active or inactive (e.g., pass \`false\` to list all inactive products).
        getSkusParametersQueryActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | queryAttributes: Represents the parameter named \'attributes\'
        --
        -- Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if \`product\` is also supplied. For instance, if the associated product has attributes \`[\"color\", \"size\"]\`, passing in \`attributes[color]=red\` returns all the SKUs for this product that have \`color\` set to \`red\`.
        getSkusParametersQueryAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSkusParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getSkusParametersQueryExpand :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text)),
        -- | queryIds: Represents the parameter named \'ids\'
        --
        -- Only return SKUs with the given IDs.
        getSkusParametersQueryIds :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text)),
        -- | queryIn_stock: Represents the parameter named \'in_stock\'
        --
        -- Only return SKUs that are either in stock or out of stock (e.g., pass \`false\` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned.
        getSkusParametersQueryInStock :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getSkusParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryProduct: Represents the parameter named \'product\'
        --
        -- The ID of the product whose SKUs will be retrieved. Must be a product with type \`good\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSkusParametersQueryProduct :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSkusParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.ToJSON GetSkusParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "queryActive" (getSkusParametersQueryActive obj) : (Data.Aeson..=) "queryAttributes" (getSkusParametersQueryAttributes obj) : (Data.Aeson..=) "queryEnding_before" (getSkusParametersQueryEndingBefore obj) : (Data.Aeson..=) "queryExpand" (getSkusParametersQueryExpand obj) : (Data.Aeson..=) "queryIds" (getSkusParametersQueryIds obj) : (Data.Aeson..=) "queryIn_stock" (getSkusParametersQueryInStock obj) : (Data.Aeson..=) "queryLimit" (getSkusParametersQueryLimit obj) : (Data.Aeson..=) "queryProduct" (getSkusParametersQueryProduct obj) : (Data.Aeson..=) "queryStarting_after" (getSkusParametersQueryStartingAfter obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "queryActive" (getSkusParametersQueryActive obj) GHC.Base.<> ((Data.Aeson..=) "queryAttributes" (getSkusParametersQueryAttributes obj) GHC.Base.<> ((Data.Aeson..=) "queryEnding_before" (getSkusParametersQueryEndingBefore obj) GHC.Base.<> ((Data.Aeson..=) "queryExpand" (getSkusParametersQueryExpand obj) GHC.Base.<> ((Data.Aeson..=) "queryIds" (getSkusParametersQueryIds obj) GHC.Base.<> ((Data.Aeson..=) "queryIn_stock" (getSkusParametersQueryInStock obj) GHC.Base.<> ((Data.Aeson..=) "queryLimit" (getSkusParametersQueryLimit obj) GHC.Base.<> ((Data.Aeson..=) "queryProduct" (getSkusParametersQueryProduct obj) GHC.Base.<> (Data.Aeson..=) "queryStarting_after" (getSkusParametersQueryStartingAfter obj)))))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetSkusParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSkusParameters" (\obj -> ((((((((GHC.Base.pure GetSkusParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryActive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryAttributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryIds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryIn_stock")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after"))

-- | Represents a response of the operation 'getSkus'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSkusResponseError' is used.
data GetSkusResponse
  = -- | Means either no matching case available or a parse error
    GetSkusResponseError GHC.Base.String
  | -- | Successful response.
    GetSkusResponse200 GetSkusResponseBody200
  | -- | Error response.
    GetSkusResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the data type for the schema GetSkusResponseBody200
data GetSkusResponseBody200
  = GetSkusResponseBody200
      { -- | data
        getSkusResponseBody200Data :: ([] Sku),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getSkusResponseBody200HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        getSkusResponseBody200Object :: GetSkusResponseBody200Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        -- * Must match pattern \'^\/v1\/skus\'
        getSkusResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.ToJSON GetSkusResponseBody200 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getSkusResponseBody200Data obj) : (Data.Aeson..=) "has_more" (getSkusResponseBody200HasMore obj) : (Data.Aeson..=) "object" (getSkusResponseBody200Object obj) : (Data.Aeson..=) "url" (getSkusResponseBody200Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getSkusResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (getSkusResponseBody200HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (getSkusResponseBody200Object obj) GHC.Base.<> (Data.Aeson..=) "url" (getSkusResponseBody200Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetSkusResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSkusResponseBody200" (\obj -> (((GHC.Base.pure GetSkusResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema GetSkusResponseBody200Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data GetSkusResponseBody200Object'
  = GetSkusResponseBody200Object'EnumOther Data.Aeson.Types.Internal.Value
  | GetSkusResponseBody200Object'EnumTyped Data.Text.Internal.Text
  | GetSkusResponseBody200Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.ToJSON GetSkusResponseBody200Object' where
  toJSON (GetSkusResponseBody200Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetSkusResponseBody200Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetSkusResponseBody200Object'EnumStringList) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list"

instance Data.Aeson.FromJSON GetSkusResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "list")
          then GetSkusResponseBody200Object'EnumStringList
          else GetSkusResponseBody200Object'EnumOther val
      )

-- | > GET /v1/skus
--
-- The same as 'getSkus' but accepts an explicit configuration.
getSkusWithConfiguration ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  StripeAPI.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSkusParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSkusResponse)
getSkusWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_2 ->
          GHC.Base.fmap
            ( Data.Either.either GetSkusResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSkusResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              GetSkusResponseBody200
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSkusResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_2
            )
            response_2
      )
      ( StripeAPI.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/v1/skus")
          [ StripeAPI.Common.QueryParameter (Data.Text.pack "active") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryActive parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "attributes") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryAttributes parameters) (Data.Text.pack "deepObject") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "ids") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryIds parameters) (Data.Text.pack "deepObject") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "in_stock") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryInStock parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "product") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryProduct parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
          ]
      )

-- | > GET /v1/skus
--
-- The same as 'getSkus' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSkusRaw ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSkusParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSkusRaw parameters =
  GHC.Base.id
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/skus")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "active") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryActive parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "attributes") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryAttributes parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ids") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryIds parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "in_stock") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryInStock parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "product") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryProduct parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | > GET /v1/skus
--
-- The same as 'getSkus' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSkusWithConfigurationRaw ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  StripeAPI.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSkusParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSkusWithConfigurationRaw
  config
  parameters =
    GHC.Base.id
      ( StripeAPI.Common.doCallWithConfiguration
          config
          (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
          (Data.Text.pack "/v1/skus")
          [ StripeAPI.Common.QueryParameter (Data.Text.pack "active") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryActive parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "attributes") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryAttributes parameters) (Data.Text.pack "deepObject") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "ids") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryIds parameters) (Data.Text.pack "deepObject") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "in_stock") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryInStock parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "product") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryProduct parameters) (Data.Text.pack "form") GHC.Types.True,
            StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
          ]
      )
