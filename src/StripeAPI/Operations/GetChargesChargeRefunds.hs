{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getChargesChargeRefunds
module StripeAPI.Operations.GetChargesChargeRefunds where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/charges/{charge}/refunds
--
-- \<p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the \<code>limit\<\/code> and \<code>starting_after\<\/code> parameters to page through additional refunds.\<\/p>
getChargesChargeRefunds ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetChargesChargeRefundsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetChargesChargeRefundsResponse)
getChargesChargeRefunds parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetChargesChargeRefundsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetChargesChargeRefundsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetChargesChargeRefundsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetChargesChargeRefundsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack ("/v1/charges/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getChargesChargeRefundsParametersPathCharge parameters))) GHC.Base.++ "/refunds")))
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getChargesChargeRefundsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getChargesChargeRefundsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getChargesChargeRefundsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getChargesChargeRefundsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/charges\/{charge}\/refunds.GET.parameters@ in the specification.
data GetChargesChargeRefundsParameters = GetChargesChargeRefundsParameters
  { -- | pathCharge: Represents the parameter named \'charge\'
    getChargesChargeRefundsParametersPathCharge :: Data.Text.Internal.Text,
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    getChargesChargeRefundsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getChargesChargeRefundsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getChargesChargeRefundsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    getChargesChargeRefundsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetChargesChargeRefundsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("pathCharge" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersPathCharge obj : "queryEnding_before" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersQueryEndingBefore obj : "queryExpand" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersQueryExpand obj : "queryLimit" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersQueryLimit obj : "queryStarting_after" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersQueryStartingAfter obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathCharge" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersPathCharge obj) GHC.Base.<> (("queryEnding_before" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersQueryEndingBefore obj) GHC.Base.<> (("queryExpand" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersQueryExpand obj) GHC.Base.<> (("queryLimit" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersQueryLimit obj) GHC.Base.<> ("queryStarting_after" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsParametersQueryStartingAfter obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON GetChargesChargeRefundsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetChargesChargeRefundsParameters" (\obj -> ((((GHC.Base.pure GetChargesChargeRefundsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathCharge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after"))

-- | Create a new 'GetChargesChargeRefundsParameters' with all required fields.
mkGetChargesChargeRefundsParameters ::
  -- | 'getChargesChargeRefundsParametersPathCharge'
  Data.Text.Internal.Text ->
  GetChargesChargeRefundsParameters
mkGetChargesChargeRefundsParameters getChargesChargeRefundsParametersPathCharge =
  GetChargesChargeRefundsParameters
    { getChargesChargeRefundsParametersPathCharge = getChargesChargeRefundsParametersPathCharge,
      getChargesChargeRefundsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getChargesChargeRefundsParametersQueryExpand = GHC.Maybe.Nothing,
      getChargesChargeRefundsParametersQueryLimit = GHC.Maybe.Nothing,
      getChargesChargeRefundsParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getChargesChargeRefunds'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetChargesChargeRefundsResponseError' is used.
data GetChargesChargeRefundsResponse
  = -- | Means either no matching case available or a parse error
    GetChargesChargeRefundsResponseError GHC.Base.String
  | -- | Successful response.
    GetChargesChargeRefundsResponse200 GetChargesChargeRefundsResponseBody200
  | -- | Error response.
    GetChargesChargeRefundsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/charges\/{charge}\/refunds.GET.responses.200.content.application\/json.schema@ in the specification.
data GetChargesChargeRefundsResponseBody200 = GetChargesChargeRefundsResponseBody200
  { -- | data: Details about each object.
    getChargesChargeRefundsResponseBody200Data :: ([Refund]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getChargesChargeRefundsResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getChargesChargeRefundsResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetChargesChargeRefundsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsResponseBody200Data obj : "has_more" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsResponseBody200HasMore obj : "url" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsResponseBody200Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsResponseBody200Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsResponseBody200HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= getChargesChargeRefundsResponseBody200Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON GetChargesChargeRefundsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetChargesChargeRefundsResponseBody200" (\obj -> ((GHC.Base.pure GetChargesChargeRefundsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetChargesChargeRefundsResponseBody200' with all required fields.
mkGetChargesChargeRefundsResponseBody200 ::
  -- | 'getChargesChargeRefundsResponseBody200Data'
  [Refund] ->
  -- | 'getChargesChargeRefundsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getChargesChargeRefundsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetChargesChargeRefundsResponseBody200
mkGetChargesChargeRefundsResponseBody200 getChargesChargeRefundsResponseBody200Data getChargesChargeRefundsResponseBody200HasMore getChargesChargeRefundsResponseBody200Url =
  GetChargesChargeRefundsResponseBody200
    { getChargesChargeRefundsResponseBody200Data = getChargesChargeRefundsResponseBody200Data,
      getChargesChargeRefundsResponseBody200HasMore = getChargesChargeRefundsResponseBody200HasMore,
      getChargesChargeRefundsResponseBody200Url = getChargesChargeRefundsResponseBody200Url
    }
