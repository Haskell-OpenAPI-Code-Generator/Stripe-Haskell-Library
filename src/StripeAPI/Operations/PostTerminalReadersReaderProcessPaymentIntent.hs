{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postTerminalReadersReaderProcessPaymentIntent
module StripeAPI.Operations.PostTerminalReadersReaderProcessPaymentIntent where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/terminal/readers/{reader}/process_payment_intent
--
-- \<p>Initiates a payment flow on a Reader.\<\/p>
postTerminalReadersReaderProcessPaymentIntent ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | reader | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  PostTerminalReadersReaderProcessPaymentIntentRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostTerminalReadersReaderProcessPaymentIntentResponse)
postTerminalReadersReaderProcessPaymentIntent
  reader
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostTerminalReadersReaderProcessPaymentIntentResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostTerminalReadersReaderProcessPaymentIntentResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Terminal'reader
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostTerminalReadersReaderProcessPaymentIntentResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/terminal/readers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel reader)) GHC.Base.++ "/process_payment_intent"))) GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/terminal\/readers\/{reader}\/process_payment_intent.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostTerminalReadersReaderProcessPaymentIntentRequestBody = PostTerminalReadersReaderProcessPaymentIntentRequestBody
  { -- | expand: Specifies which fields in the response should be expanded.
    postTerminalReadersReaderProcessPaymentIntentRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | payment_intent: PaymentIntent ID
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTerminalReadersReaderProcessPaymentIntentRequestBodyPaymentIntent :: Data.Text.Internal.Text,
    -- | process_config: Configuration overrides
    postTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig :: (GHC.Maybe.Maybe PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTerminalReadersReaderProcessPaymentIntentRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderProcessPaymentIntentRequestBodyExpand obj) : ["payment_intent" Data.Aeson.Types.ToJSON..= postTerminalReadersReaderProcessPaymentIntentRequestBodyPaymentIntent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("process_config" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderProcessPaymentIntentRequestBodyExpand obj) : ["payment_intent" Data.Aeson.Types.ToJSON..= postTerminalReadersReaderProcessPaymentIntentRequestBodyPaymentIntent obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("process_config" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTerminalReadersReaderProcessPaymentIntentRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTerminalReadersReaderProcessPaymentIntentRequestBody" (\obj -> ((GHC.Base.pure PostTerminalReadersReaderProcessPaymentIntentRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "process_config"))

-- | Create a new 'PostTerminalReadersReaderProcessPaymentIntentRequestBody' with all required fields.
mkPostTerminalReadersReaderProcessPaymentIntentRequestBody ::
  -- | 'postTerminalReadersReaderProcessPaymentIntentRequestBodyPaymentIntent'
  Data.Text.Internal.Text ->
  PostTerminalReadersReaderProcessPaymentIntentRequestBody
mkPostTerminalReadersReaderProcessPaymentIntentRequestBody postTerminalReadersReaderProcessPaymentIntentRequestBodyPaymentIntent =
  PostTerminalReadersReaderProcessPaymentIntentRequestBody
    { postTerminalReadersReaderProcessPaymentIntentRequestBodyExpand = GHC.Maybe.Nothing,
      postTerminalReadersReaderProcessPaymentIntentRequestBodyPaymentIntent = postTerminalReadersReaderProcessPaymentIntentRequestBodyPaymentIntent,
      postTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/terminal\/readers\/{reader}\/process_payment_intent.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.process_config@ in the specification.
--
-- Configuration overrides
data PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig' = PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig'
  { -- | skip_tipping
    postTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig'SkipTipping :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_tipping" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig'SkipTipping obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("skip_tipping" Data.Aeson.Types.ToJSON..=)) (postTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig'SkipTipping obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig'" (\obj -> GHC.Base.pure PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "skip_tipping"))

-- | Create a new 'PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig'' with all required fields.
mkPostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig' :: PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig'
mkPostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig' = PostTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig' {postTerminalReadersReaderProcessPaymentIntentRequestBodyProcessConfig'SkipTipping = GHC.Maybe.Nothing}

-- | Represents a response of the operation 'postTerminalReadersReaderProcessPaymentIntent'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTerminalReadersReaderProcessPaymentIntentResponseError' is used.
data PostTerminalReadersReaderProcessPaymentIntentResponse
  = -- | Means either no matching case available or a parse error
    PostTerminalReadersReaderProcessPaymentIntentResponseError GHC.Base.String
  | -- | Successful response.
    PostTerminalReadersReaderProcessPaymentIntentResponse200 Terminal'reader
  | -- | Error response.
    PostTerminalReadersReaderProcessPaymentIntentResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
