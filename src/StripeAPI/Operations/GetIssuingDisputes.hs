-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getIssuingDisputes
module StripeAPI.Operations.GetIssuingDisputes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/issuing/disputes
-- 
-- \<p>Returns a list of Issuing \<code>Dispute\<\/code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\<\/p>
getIssuingDisputes :: forall m . StripeAPI.Common.MonadHTTP m => GetIssuingDisputesParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetIssuingDisputesResponse) -- ^ Monadic computation which returns the result of the operation
getIssuingDisputes parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetIssuingDisputesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetIssuingDisputesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                               GetIssuingDisputesResponseBody200)
                                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetIssuingDisputesResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                 Error)
                                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/v1/issuing/disputes") [StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingDisputesParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                     StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingDisputesParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                     StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingDisputesParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                     StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingDisputesParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                     StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingDisputesParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                     StripeAPI.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingDisputesParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                     StripeAPI.Common.QueryParameter (Data.Text.pack "transaction") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingDisputesParametersQueryTransaction parameters) (Data.Text.pack "form") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/issuing\/disputes.GET.parameters@ in the specification.
-- 
-- 
data GetIssuingDisputesParameters = GetIssuingDisputesParameters {
  -- | queryCreated: Represents the parameter named \'created\'
  -- 
  -- Select Issuing disputes that were created during the given date interval.
  getIssuingDisputesParametersQueryCreated :: (GHC.Maybe.Maybe GetIssuingDisputesParametersQueryCreated'Variants)
  -- | queryEnding_before: Represents the parameter named \'ending_before\'
  -- 
  -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getIssuingDisputesParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getIssuingDisputesParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | queryLimit: Represents the parameter named \'limit\'
  -- 
  -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  , getIssuingDisputesParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryStarting_after: Represents the parameter named \'starting_after\'
  -- 
  -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getIssuingDisputesParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryStatus: Represents the parameter named \'status\'
  -- 
  -- Select Issuing disputes with the given status.
  , getIssuingDisputesParametersQueryStatus :: (GHC.Maybe.Maybe GetIssuingDisputesParametersQueryStatus')
  -- | queryTransaction: Represents the parameter named \'transaction\'
  -- 
  -- Select the Issuing dispute for the given transaction.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getIssuingDisputesParametersQueryTransaction :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingDisputesParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTransaction" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryTransaction obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTransaction" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryTransaction obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingDisputesParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingDisputesParameters" (\obj -> ((((((GHC.Base.pure GetIssuingDisputesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTransaction"))
-- | Create a new 'GetIssuingDisputesParameters' with all required fields.
mkGetIssuingDisputesParameters :: GetIssuingDisputesParameters
mkGetIssuingDisputesParameters = GetIssuingDisputesParameters{getIssuingDisputesParametersQueryCreated = GHC.Maybe.Nothing,
                                                              getIssuingDisputesParametersQueryEndingBefore = GHC.Maybe.Nothing,
                                                              getIssuingDisputesParametersQueryExpand = GHC.Maybe.Nothing,
                                                              getIssuingDisputesParametersQueryLimit = GHC.Maybe.Nothing,
                                                              getIssuingDisputesParametersQueryStartingAfter = GHC.Maybe.Nothing,
                                                              getIssuingDisputesParametersQueryStatus = GHC.Maybe.Nothing,
                                                              getIssuingDisputesParametersQueryTransaction = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/issuing\/disputes.GET.parameters.properties.queryCreated.anyOf@ in the specification.
-- 
-- 
data GetIssuingDisputesParametersQueryCreated'OneOf1 = GetIssuingDisputesParametersQueryCreated'OneOf1 {
  -- | gt
  getIssuingDisputesParametersQueryCreated'OneOf1Gt :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | gte
  , getIssuingDisputesParametersQueryCreated'OneOf1Gte :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | lt
  , getIssuingDisputesParametersQueryCreated'OneOf1Lt :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | lte
  , getIssuingDisputesParametersQueryCreated'OneOf1Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingDisputesParametersQueryCreated'OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated'OneOf1Lte obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getIssuingDisputesParametersQueryCreated'OneOf1Lte obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingDisputesParametersQueryCreated'OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingDisputesParametersQueryCreated'OneOf1" (\obj -> (((GHC.Base.pure GetIssuingDisputesParametersQueryCreated'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lte"))
-- | Create a new 'GetIssuingDisputesParametersQueryCreated'OneOf1' with all required fields.
mkGetIssuingDisputesParametersQueryCreated'OneOf1 :: GetIssuingDisputesParametersQueryCreated'OneOf1
mkGetIssuingDisputesParametersQueryCreated'OneOf1 = GetIssuingDisputesParametersQueryCreated'OneOf1{getIssuingDisputesParametersQueryCreated'OneOf1Gt = GHC.Maybe.Nothing,
                                                                                                    getIssuingDisputesParametersQueryCreated'OneOf1Gte = GHC.Maybe.Nothing,
                                                                                                    getIssuingDisputesParametersQueryCreated'OneOf1Lt = GHC.Maybe.Nothing,
                                                                                                    getIssuingDisputesParametersQueryCreated'OneOf1Lte = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/issuing\/disputes.GET.parameters.properties.queryCreated.anyOf@ in the specification.
-- 
-- Represents the parameter named \'created\'
-- 
-- Select Issuing disputes that were created during the given date interval.
data GetIssuingDisputesParametersQueryCreated'Variants =
   GetIssuingDisputesParametersQueryCreated'GetIssuingDisputesParametersQueryCreated'OneOf1 GetIssuingDisputesParametersQueryCreated'OneOf1
  | GetIssuingDisputesParametersQueryCreated'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingDisputesParametersQueryCreated'Variants
    where toJSON (GetIssuingDisputesParametersQueryCreated'GetIssuingDisputesParametersQueryCreated'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (GetIssuingDisputesParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingDisputesParametersQueryCreated'Variants
    where parseJSON val = case (GetIssuingDisputesParametersQueryCreated'GetIssuingDisputesParametersQueryCreated'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetIssuingDisputesParametersQueryCreated'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema located at @paths.\/v1\/issuing\/disputes.GET.parameters.properties.queryStatus@ in the specification.
-- 
-- Represents the parameter named \'status\'
-- 
-- Select Issuing disputes with the given status.
data GetIssuingDisputesParametersQueryStatus' =
   GetIssuingDisputesParametersQueryStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | GetIssuingDisputesParametersQueryStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | GetIssuingDisputesParametersQueryStatus'EnumExpired -- ^ Represents the JSON value @"expired"@
  | GetIssuingDisputesParametersQueryStatus'EnumLost -- ^ Represents the JSON value @"lost"@
  | GetIssuingDisputesParametersQueryStatus'EnumSubmitted -- ^ Represents the JSON value @"submitted"@
  | GetIssuingDisputesParametersQueryStatus'EnumUnsubmitted -- ^ Represents the JSON value @"unsubmitted"@
  | GetIssuingDisputesParametersQueryStatus'EnumWon -- ^ Represents the JSON value @"won"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingDisputesParametersQueryStatus'
    where toJSON (GetIssuingDisputesParametersQueryStatus'Other val) = val
          toJSON (GetIssuingDisputesParametersQueryStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (GetIssuingDisputesParametersQueryStatus'EnumExpired) = "expired"
          toJSON (GetIssuingDisputesParametersQueryStatus'EnumLost) = "lost"
          toJSON (GetIssuingDisputesParametersQueryStatus'EnumSubmitted) = "submitted"
          toJSON (GetIssuingDisputesParametersQueryStatus'EnumUnsubmitted) = "unsubmitted"
          toJSON (GetIssuingDisputesParametersQueryStatus'EnumWon) = "won"
instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingDisputesParametersQueryStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "expired" -> GetIssuingDisputesParametersQueryStatus'EnumExpired
                                            | val GHC.Classes.== "lost" -> GetIssuingDisputesParametersQueryStatus'EnumLost
                                            | val GHC.Classes.== "submitted" -> GetIssuingDisputesParametersQueryStatus'EnumSubmitted
                                            | val GHC.Classes.== "unsubmitted" -> GetIssuingDisputesParametersQueryStatus'EnumUnsubmitted
                                            | val GHC.Classes.== "won" -> GetIssuingDisputesParametersQueryStatus'EnumWon
                                            | GHC.Base.otherwise -> GetIssuingDisputesParametersQueryStatus'Other val)
-- | Represents a response of the operation 'getIssuingDisputes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetIssuingDisputesResponseError' is used.
data GetIssuingDisputesResponse =
   GetIssuingDisputesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetIssuingDisputesResponse200 GetIssuingDisputesResponseBody200 -- ^ Successful response.
  | GetIssuingDisputesResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/v1\/issuing\/disputes.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetIssuingDisputesResponseBody200 = GetIssuingDisputesResponseBody200 {
  -- | data
  getIssuingDisputesResponseBody200Data :: ([Issuing'dispute])
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , getIssuingDisputesResponseBody200HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  -- * Must match pattern \'^\/v1\/issuing\/disputes\'
  , getIssuingDisputesResponseBody200Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingDisputesResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getIssuingDisputesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getIssuingDisputesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getIssuingDisputesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getIssuingDisputesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getIssuingDisputesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getIssuingDisputesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingDisputesResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingDisputesResponseBody200" (\obj -> ((GHC.Base.pure GetIssuingDisputesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
-- | Create a new 'GetIssuingDisputesResponseBody200' with all required fields.
mkGetIssuingDisputesResponseBody200 :: [Issuing'dispute] -- ^ 'getIssuingDisputesResponseBody200Data'
  -> GHC.Types.Bool -- ^ 'getIssuingDisputesResponseBody200HasMore'
  -> Data.Text.Internal.Text -- ^ 'getIssuingDisputesResponseBody200Url'
  -> GetIssuingDisputesResponseBody200
mkGetIssuingDisputesResponseBody200 getIssuingDisputesResponseBody200Data getIssuingDisputesResponseBody200HasMore getIssuingDisputesResponseBody200Url = GetIssuingDisputesResponseBody200{getIssuingDisputesResponseBody200Data = getIssuingDisputesResponseBody200Data,
                                                                                                                                                                                            getIssuingDisputesResponseBody200HasMore = getIssuingDisputesResponseBody200HasMore,
                                                                                                                                                                                            getIssuingDisputesResponseBody200Url = getIssuingDisputesResponseBody200Url}
