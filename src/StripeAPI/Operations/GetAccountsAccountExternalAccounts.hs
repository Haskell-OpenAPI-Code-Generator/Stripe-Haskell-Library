{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getAccountsAccountExternalAccounts
module StripeAPI.Operations.GetAccountsAccountExternalAccounts where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/accounts/{account}/external_accounts
--
-- \<p>List external accounts for an account.\<\/p>
getAccountsAccountExternalAccounts ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetAccountsAccountExternalAccountsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetAccountsAccountExternalAccountsResponse)
getAccountsAccountExternalAccounts parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetAccountsAccountExternalAccountsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetAccountsAccountExternalAccountsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetAccountsAccountExternalAccountsResponseBody200
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetAccountsAccountExternalAccountsResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        ("/v1/accounts/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel (getAccountsAccountExternalAccountsParametersPathAccount parameters))) GHC.Base.<> "/external_accounts"))
        [ StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsAccountExternalAccountsParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsAccountExternalAccountsParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsAccountExternalAccountsParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "object") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsAccountExternalAccountsParametersQueryObject parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountsAccountExternalAccountsParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.parameters@ in the specification.
data GetAccountsAccountExternalAccountsParameters = GetAccountsAccountExternalAccountsParameters
  { -- | pathAccount: Represents the parameter named \'account\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsParametersPathAccount :: Data.Text.Internal.Text,
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    getAccountsAccountExternalAccountsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getAccountsAccountExternalAccountsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getAccountsAccountExternalAccountsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryObject: Represents the parameter named \'object\'
    --
    -- Filter external accounts according to a particular object type.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsParametersQueryObject :: (GHC.Maybe.Maybe GetAccountsAccountExternalAccountsParametersQueryObject'),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    getAccountsAccountExternalAccountsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathAccount" Data.Aeson.Types.ToJSON..= getAccountsAccountExternalAccountsParametersPathAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryObject" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryStartingAfter obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathAccount" Data.Aeson.Types.ToJSON..= getAccountsAccountExternalAccountsParametersPathAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryObject" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsParametersQueryStartingAfter obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsAccountExternalAccountsParameters" (\obj -> (((((GHC.Base.pure GetAccountsAccountExternalAccountsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathAccount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryObject")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))

-- | Create a new 'GetAccountsAccountExternalAccountsParameters' with all required fields.
mkGetAccountsAccountExternalAccountsParameters ::
  -- | 'getAccountsAccountExternalAccountsParametersPathAccount'
  Data.Text.Internal.Text ->
  GetAccountsAccountExternalAccountsParameters
mkGetAccountsAccountExternalAccountsParameters getAccountsAccountExternalAccountsParametersPathAccount =
  GetAccountsAccountExternalAccountsParameters
    { getAccountsAccountExternalAccountsParametersPathAccount = getAccountsAccountExternalAccountsParametersPathAccount,
      getAccountsAccountExternalAccountsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsParametersQueryExpand = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsParametersQueryLimit = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsParametersQueryObject = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.parameters.properties.queryObject@ in the specification.
--
-- Represents the parameter named \'object\'
--
-- Filter external accounts according to a particular object type.
data GetAccountsAccountExternalAccountsParametersQueryObject'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetAccountsAccountExternalAccountsParametersQueryObject'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetAccountsAccountExternalAccountsParametersQueryObject'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_account"@
    GetAccountsAccountExternalAccountsParametersQueryObject'EnumBankAccount
  | -- | Represents the JSON value @"card"@
    GetAccountsAccountExternalAccountsParametersQueryObject'EnumCard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsParametersQueryObject' where
  toJSON (GetAccountsAccountExternalAccountsParametersQueryObject'Other val) = val
  toJSON (GetAccountsAccountExternalAccountsParametersQueryObject'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetAccountsAccountExternalAccountsParametersQueryObject'EnumBankAccount) = "bank_account"
  toJSON (GetAccountsAccountExternalAccountsParametersQueryObject'EnumCard) = "card"

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsParametersQueryObject' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "bank_account" -> GetAccountsAccountExternalAccountsParametersQueryObject'EnumBankAccount
            | val GHC.Classes.== "card" -> GetAccountsAccountExternalAccountsParametersQueryObject'EnumCard
            | GHC.Base.otherwise -> GetAccountsAccountExternalAccountsParametersQueryObject'Other val
      )

-- | Represents a response of the operation 'getAccountsAccountExternalAccounts'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountsAccountExternalAccountsResponseError' is used.
data GetAccountsAccountExternalAccountsResponse
  = -- | Means either no matching case available or a parse error
    GetAccountsAccountExternalAccountsResponseError GHC.Base.String
  | -- | Successful response.
    GetAccountsAccountExternalAccountsResponse200 GetAccountsAccountExternalAccountsResponseBody200
  | -- | Error response.
    GetAccountsAccountExternalAccountsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.responses.200.content.application\/json.schema@ in the specification.
data GetAccountsAccountExternalAccountsResponseBody200 = GetAccountsAccountExternalAccountsResponseBody200
  { -- | data: The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
    getAccountsAccountExternalAccountsResponseBody200Data :: ([GetAccountsAccountExternalAccountsResponseBody200Data']),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getAccountsAccountExternalAccountsResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getAccountsAccountExternalAccountsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getAccountsAccountExternalAccountsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getAccountsAccountExternalAccountsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getAccountsAccountExternalAccountsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getAccountsAccountExternalAccountsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getAccountsAccountExternalAccountsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsAccountExternalAccountsResponseBody200" (\obj -> ((GHC.Base.pure GetAccountsAccountExternalAccountsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetAccountsAccountExternalAccountsResponseBody200' with all required fields.
mkGetAccountsAccountExternalAccountsResponseBody200 ::
  -- | 'getAccountsAccountExternalAccountsResponseBody200Data'
  [GetAccountsAccountExternalAccountsResponseBody200Data'] ->
  -- | 'getAccountsAccountExternalAccountsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getAccountsAccountExternalAccountsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetAccountsAccountExternalAccountsResponseBody200
mkGetAccountsAccountExternalAccountsResponseBody200 getAccountsAccountExternalAccountsResponseBody200Data getAccountsAccountExternalAccountsResponseBody200HasMore getAccountsAccountExternalAccountsResponseBody200Url =
  GetAccountsAccountExternalAccountsResponseBody200
    { getAccountsAccountExternalAccountsResponseBody200Data = getAccountsAccountExternalAccountsResponseBody200Data,
      getAccountsAccountExternalAccountsResponseBody200HasMore = getAccountsAccountExternalAccountsResponseBody200HasMore,
      getAccountsAccountExternalAccountsResponseBody200Url = getAccountsAccountExternalAccountsResponseBody200Url
    }

-- | Defines the object schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf@ in the specification.
data GetAccountsAccountExternalAccountsResponseBody200Data' = GetAccountsAccountExternalAccountsResponseBody200Data'
  { -- | account: The ID of the account that the bank account is associated with.
    getAccountsAccountExternalAccountsResponseBody200Data'Account :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableVariants)),
    -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AccountHolderName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AccountHolderType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_type: The bank account type. This can only be \`checking\` or \`savings\` in most countries. In Japan, this can only be \`futsu\` or \`toza\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AccountType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_city: City\/District\/Suburb\/Town\/Village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AddressCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_country: Billing address country, if provided when creating card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AddressCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AddressLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AddressLine1Check :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AddressLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_state: State\/County\/Province\/Region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AddressState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AddressZip :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'AddressZipCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | available_payout_methods: A set of available payout methods for this bank account. Only values from this set should be passed as the \`method\` when creating a payout.
    getAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullable]))),
    -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'BankName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`Eftpos Australia\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter ISO code representing the country the bank account is located in.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
    getAccountsAccountExternalAccountsResponseBody200Data'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The ID of the customer that the bank account is associated with.
    getAccountsAccountExternalAccountsResponseBody200Data'Customer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableVariants)),
    -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`. A result of unchecked indicates that CVC was provided but hasn\'t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https:\/\/support.stripe.com\/questions\/check-if-a-card-is-valid-without-a-charge).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'CvcCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | default_for_currency: Whether this bank account is the default external account for its currency.
    getAccountsAccountExternalAccountsResponseBody200Data'DefaultForCurrency :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool)),
    -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'DynamicLast4 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    getAccountsAccountExternalAccountsResponseBody200Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    getAccountsAccountExternalAccountsResponseBody200Data'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'Fingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | future_requirements: Information about the [upcoming new requirements for the bank account](https:\/\/stripe.com\/docs\/connect\/custom-accounts\/future-requirements), including what information needs to be collected, and by when.
    getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last4: The last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    getAccountsAccountExternalAccountsResponseBody200Data'Metadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | name: Cardholder name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'Name :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | object: String representing the object\'s type. Objects of the same type share the same value.
    getAccountsAccountExternalAccountsResponseBody200Data'Object :: (GHC.Maybe.Maybe GetAccountsAccountExternalAccountsResponseBody200Data'Object'),
    -- | requirements: Information about the requirements for the bank account, including what information needs to be collected.
    getAccountsAccountExternalAccountsResponseBody200Data'Requirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable)),
    -- | routing_number: The routing transit number for the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'RoutingNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a payout sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send [scheduled payouts](https:\/\/stripe.com\/docs\/payouts\#payout-schedule) until the bank details are updated.
    --
    -- For external accounts, possible values are \`new\`, \`errored\` and \`verification_failed\`. If a payouts fails, the status is set to \`errored\` and scheduled payouts are stopped until account details are updated. In India, if we can\'t [verify the owner of the bank account](https:\/\/support.stripe.com\/questions\/bank-account-ownership-verification), we\'ll set the status to \`verification_failed\`. Other validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAccountsAccountExternalAccountsResponseBody200Data'TokenizationMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsResponseBody200Data' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'TokenizationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'TokenizationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsResponseBody200Data' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsAccountExternalAccountsResponseBody200Data'" (\obj -> ((((((((((((((((((((((((((((((((((GHC.Base.pure GetAccountsAccountExternalAccountsResponseBody200Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "future_requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tokenization_method"))

-- | Create a new 'GetAccountsAccountExternalAccountsResponseBody200Data'' with all required fields.
mkGetAccountsAccountExternalAccountsResponseBody200Data' :: GetAccountsAccountExternalAccountsResponseBody200Data'
mkGetAccountsAccountExternalAccountsResponseBody200Data' =
  GetAccountsAccountExternalAccountsResponseBody200Data'
    { getAccountsAccountExternalAccountsResponseBody200Data'Account = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AccountHolderName = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AccountHolderType = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AccountType = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AddressCity = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AddressCountry = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AddressLine1 = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AddressLine1Check = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AddressLine2 = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AddressState = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AddressZip = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AddressZipCheck = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'BankName = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Brand = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Country = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Currency = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Customer = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'CvcCheck = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'DefaultForCurrency = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'DynamicLast4 = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'ExpMonth = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'ExpYear = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Fingerprint = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Funding = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Id = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Last4 = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Metadata = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Name = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Object = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Requirements = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'RoutingNumber = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Status = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'TokenizationMethod = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableVariants
  = GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableText Data.Text.Internal.Text
  | GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableAccount Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableVariants where
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableAccount a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableVariants where
  parseJSON val = case (GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetAccountsAccountExternalAccountsResponseBody200Data'Account'NonNullableAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.available_payout_methods.items@ in the specification.
data GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableEnumInstant
  | -- | Represents the JSON value @"standard"@
    GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableEnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullable where
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableOther val) = val
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableEnumInstant) = "instant"
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableEnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "instant" -> GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableEnumInstant
            | val GHC.Classes.== "standard" -> GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableEnumStandard
            | GHC.Base.otherwise -> GetAccountsAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'NonNullableOther val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer that the bank account is associated with.
data GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableVariants
  = GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableText Data.Text.Internal.Text
  | GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableCustomer Customer
  | GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableDeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableVariants where
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableDeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableVariants where
  parseJSON val = case (GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetAccountsAccountExternalAccountsResponseBody200Data'Customer'NonNullableDeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.future_requirements.anyOf@ in the specification.
--
-- Information about the [upcoming new requirements for the bank account](https:\\\/\\\/stripe.com\\\/docs\\\/connect\\\/custom-accounts\\\/future-requirements), including what information needs to be collected, and by when.
data GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable = GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([AccountRequirementsError]))),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | pending_verification: Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`.
    getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text])))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable" (\obj -> (((GHC.Base.pure GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable' with all required fields.
mkGetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable :: GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable
mkGetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable =
  GetAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullable
    { getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullableErrors = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullablePastDue = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'FutureRequirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.object@ in the specification.
--
-- String representing the object\'s type. Objects of the same type share the same value.
data GetAccountsAccountExternalAccountsResponseBody200Data'Object'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetAccountsAccountExternalAccountsResponseBody200Data'Object'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetAccountsAccountExternalAccountsResponseBody200Data'Object'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_account"@
    GetAccountsAccountExternalAccountsResponseBody200Data'Object'EnumBankAccount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsResponseBody200Data'Object' where
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'Object'Other val) = val
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'Object'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetAccountsAccountExternalAccountsResponseBody200Data'Object'EnumBankAccount) = "bank_account"

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsResponseBody200Data'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "bank_account" -> GetAccountsAccountExternalAccountsResponseBody200Data'Object'EnumBankAccount
            | GHC.Base.otherwise -> GetAccountsAccountExternalAccountsResponseBody200Data'Object'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/accounts\/{account}\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.requirements.anyOf@ in the specification.
--
-- Information about the requirements for the bank account, including what information needs to be collected.
data GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable = GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([AccountRequirementsError]))),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | pending_verification: Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`.
    getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text])))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable" (\obj -> (((GHC.Base.pure GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable' with all required fields.
mkGetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable :: GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable
mkGetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable =
  GetAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullable
    { getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullableErrors = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullablePastDue = GHC.Maybe.Nothing,
      getAccountsAccountExternalAccountsResponseBody200Data'Requirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }
