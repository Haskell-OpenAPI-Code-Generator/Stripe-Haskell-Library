{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postApplicationFeesFeeRefundsId
module StripeAPI.Operations.PostApplicationFeesFeeRefundsId where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/application_fees/{fee}/refunds/{id}
--
-- \<p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\<\/p>
--
-- \<p>This request only accepts metadata as an argument.\<\/p>
postApplicationFeesFeeRefundsId ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostApplicationFeesFeeRefundsIdParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe PostApplicationFeesFeeRefundsIdRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostApplicationFeesFeeRefundsIdResponse)
postApplicationFeesFeeRefundsId
  parameters
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostApplicationFeesFeeRefundsIdResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApplicationFeesFeeRefundsIdResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              FeeRefund
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApplicationFeesFeeRefundsIdResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/application_fees/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postApplicationFeesFeeRefundsIdParametersPathFee parameters))) GHC.Base.++ ("/refunds/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postApplicationFeesFeeRefundsIdParametersPathId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/application_fees\/{fee}\/refunds\/{id}.POST.parameters@ in the specification.
data PostApplicationFeesFeeRefundsIdParameters = PostApplicationFeesFeeRefundsIdParameters
  { -- | pathFee: Represents the parameter named \'fee\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postApplicationFeesFeeRefundsIdParametersPathFee :: Data.Text.Internal.Text,
    -- | pathId: Represents the parameter named \'id\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postApplicationFeesFeeRefundsIdParametersPathId :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostApplicationFeesFeeRefundsIdParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("pathFee" Data.Aeson.Types.ToJSON..= postApplicationFeesFeeRefundsIdParametersPathFee obj : "pathId" Data.Aeson.Types.ToJSON..= postApplicationFeesFeeRefundsIdParametersPathId obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathFee" Data.Aeson.Types.ToJSON..= postApplicationFeesFeeRefundsIdParametersPathFee obj) GHC.Base.<> ("pathId" Data.Aeson.Types.ToJSON..= postApplicationFeesFeeRefundsIdParametersPathId obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostApplicationFeesFeeRefundsIdParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostApplicationFeesFeeRefundsIdParameters" (\obj -> (GHC.Base.pure PostApplicationFeesFeeRefundsIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathFee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId"))

-- | Create a new 'PostApplicationFeesFeeRefundsIdParameters' with all required fields.
mkPostApplicationFeesFeeRefundsIdParameters ::
  -- | 'postApplicationFeesFeeRefundsIdParametersPathFee'
  Data.Text.Internal.Text ->
  -- | 'postApplicationFeesFeeRefundsIdParametersPathId'
  Data.Text.Internal.Text ->
  PostApplicationFeesFeeRefundsIdParameters
mkPostApplicationFeesFeeRefundsIdParameters postApplicationFeesFeeRefundsIdParametersPathFee postApplicationFeesFeeRefundsIdParametersPathId =
  PostApplicationFeesFeeRefundsIdParameters
    { postApplicationFeesFeeRefundsIdParametersPathFee = postApplicationFeesFeeRefundsIdParametersPathFee,
      postApplicationFeesFeeRefundsIdParametersPathId = postApplicationFeesFeeRefundsIdParametersPathId
    }

-- | Defines the object schema located at @paths.\/v1\/application_fees\/{fee}\/refunds\/{id}.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostApplicationFeesFeeRefundsIdRequestBody = PostApplicationFeesFeeRefundsIdRequestBody
  { -- | expand: Specifies which fields in the response should be expanded.
    postApplicationFeesFeeRefundsIdRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
    postApplicationFeesFeeRefundsIdRequestBodyMetadata :: (GHC.Maybe.Maybe PostApplicationFeesFeeRefundsIdRequestBodyMetadata'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostApplicationFeesFeeRefundsIdRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("expand" Data.Aeson.Types.ToJSON..= postApplicationFeesFeeRefundsIdRequestBodyExpand obj : "metadata" Data.Aeson.Types.ToJSON..= postApplicationFeesFeeRefundsIdRequestBodyMetadata obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("expand" Data.Aeson.Types.ToJSON..= postApplicationFeesFeeRefundsIdRequestBodyExpand obj) GHC.Base.<> ("metadata" Data.Aeson.Types.ToJSON..= postApplicationFeesFeeRefundsIdRequestBodyMetadata obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostApplicationFeesFeeRefundsIdRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostApplicationFeesFeeRefundsIdRequestBody" (\obj -> (GHC.Base.pure PostApplicationFeesFeeRefundsIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata"))

-- | Create a new 'PostApplicationFeesFeeRefundsIdRequestBody' with all required fields.
mkPostApplicationFeesFeeRefundsIdRequestBody :: PostApplicationFeesFeeRefundsIdRequestBody
mkPostApplicationFeesFeeRefundsIdRequestBody =
  PostApplicationFeesFeeRefundsIdRequestBody
    { postApplicationFeesFeeRefundsIdRequestBodyExpand = GHC.Maybe.Nothing,
      postApplicationFeesFeeRefundsIdRequestBodyMetadata = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/application_fees\/{fee}\/refunds\/{id}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.metadata.anyOf@ in the specification.
--
-- Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
data PostApplicationFeesFeeRefundsIdRequestBodyMetadata'Variants
  = -- | Represents the JSON value @""@
    PostApplicationFeesFeeRefundsIdRequestBodyMetadata'EmptyString
  | PostApplicationFeesFeeRefundsIdRequestBodyMetadata'Object Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostApplicationFeesFeeRefundsIdRequestBodyMetadata'Variants where
  toJSON (PostApplicationFeesFeeRefundsIdRequestBodyMetadata'Object a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostApplicationFeesFeeRefundsIdRequestBodyMetadata'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostApplicationFeesFeeRefundsIdRequestBodyMetadata'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostApplicationFeesFeeRefundsIdRequestBodyMetadata'EmptyString
        | GHC.Base.otherwise -> case (PostApplicationFeesFeeRefundsIdRequestBodyMetadata'Object Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'postApplicationFeesFeeRefundsId'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostApplicationFeesFeeRefundsIdResponseError' is used.
data PostApplicationFeesFeeRefundsIdResponse
  = -- | Means either no matching case available or a parse error
    PostApplicationFeesFeeRefundsIdResponseError GHC.Base.String
  | -- | Successful response.
    PostApplicationFeesFeeRefundsIdResponse200 FeeRefund
  | -- | Error response.
    PostApplicationFeesFeeRefundsIdResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
