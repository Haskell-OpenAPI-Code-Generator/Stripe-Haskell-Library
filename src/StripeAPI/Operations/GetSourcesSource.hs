{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSourcesSource
module StripeAPI.Operations.GetSourcesSource where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/sources/{source}
--
-- \<p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.\<\/p>
getSourcesSource ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSourcesSourceParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetSourcesSourceResponse)
getSourcesSource parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSourcesSourceResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSourcesSourceResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Source
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSourcesSourceResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack ("/v1/sources/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceParametersPathSource parameters))) GHC.Base.++ "")))
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "client_secret") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceParametersQueryClientSecret parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.GET.parameters@ in the specification.
data GetSourcesSourceParameters = GetSourcesSourceParameters
  { -- | pathSource: Represents the parameter named \'source\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSourcesSourceParametersPathSource :: Data.Text.Internal.Text,
    -- | queryClient_secret: Represents the parameter named \'client_secret\'
    --
    -- The client secret of the source. Required if a publishable key is used to retrieve the source.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSourcesSourceParametersQueryClientSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getSourcesSourceParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSourcesSourceParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("pathSource" Data.Aeson.Types.ToJSON..= getSourcesSourceParametersPathSource obj : "queryClient_secret" Data.Aeson.Types.ToJSON..= getSourcesSourceParametersQueryClientSecret obj : "queryExpand" Data.Aeson.Types.ToJSON..= getSourcesSourceParametersQueryExpand obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathSource" Data.Aeson.Types.ToJSON..= getSourcesSourceParametersPathSource obj) GHC.Base.<> (("queryClient_secret" Data.Aeson.Types.ToJSON..= getSourcesSourceParametersQueryClientSecret obj) GHC.Base.<> ("queryExpand" Data.Aeson.Types.ToJSON..= getSourcesSourceParametersQueryExpand obj)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSourcesSourceParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSourcesSourceParameters" (\obj -> ((GHC.Base.pure GetSourcesSourceParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathSource")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryClient_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand"))

-- | Create a new 'GetSourcesSourceParameters' with all required fields.
mkGetSourcesSourceParameters ::
  -- | 'getSourcesSourceParametersPathSource'
  Data.Text.Internal.Text ->
  GetSourcesSourceParameters
mkGetSourcesSourceParameters getSourcesSourceParametersPathSource =
  GetSourcesSourceParameters
    { getSourcesSourceParametersPathSource = getSourcesSourceParametersPathSource,
      getSourcesSourceParametersQueryClientSecret = GHC.Maybe.Nothing,
      getSourcesSourceParametersQueryExpand = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getSourcesSource'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSourcesSourceResponseError' is used.
data GetSourcesSourceResponse
  = -- | Means either no matching case available or a parse error
    GetSourcesSourceResponseError GHC.Base.String
  | -- | Successful response.
    GetSourcesSourceResponse200 Source
  | -- | Error response.
    GetSourcesSourceResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
