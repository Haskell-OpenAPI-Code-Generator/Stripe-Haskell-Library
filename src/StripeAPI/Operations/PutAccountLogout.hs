{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation putAccountLogout
module StripeAPI.Operations.PutAccountLogout where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > PUT /v1/account/logout
--
-- \<p>Invalidates all sessions for a light account, for a platform to use during platform logout.\<\/p>
--
-- \<p>\<strong>You may only log out \<a href=\"\/docs\/connect\/express-accounts\">Express accounts\<\/a> connected to your platform\<\/strong>.\<\/p>
putAccountLogout ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PutAccountLogoutRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PutAccountLogoutResponse)
putAccountLogout body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PutAccountLogoutResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PutAccountLogoutResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            LightAccountLogout
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PutAccountLogoutResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "PUT") (Data.Text.pack "/v1/account/logout") [] (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/account\/logout.PUT.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PutAccountLogoutRequestBody = PutAccountLogoutRequestBody
  { -- | account
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    putAccountLogoutRequestBodyAccount :: Data.Text.Internal.Text,
    -- | expand: Specifies which fields in the response should be expanded.
    putAccountLogoutRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PutAccountLogoutRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("account" Data.Aeson.Types.ToJSON..= putAccountLogoutRequestBodyAccount obj : "expand" Data.Aeson.Types.ToJSON..= putAccountLogoutRequestBodyExpand obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account" Data.Aeson.Types.ToJSON..= putAccountLogoutRequestBodyAccount obj) GHC.Base.<> ("expand" Data.Aeson.Types.ToJSON..= putAccountLogoutRequestBodyExpand obj))

instance Data.Aeson.Types.FromJSON.FromJSON PutAccountLogoutRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PutAccountLogoutRequestBody" (\obj -> (GHC.Base.pure PutAccountLogoutRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand"))

-- | Create a new 'PutAccountLogoutRequestBody' with all required fields.
mkPutAccountLogoutRequestBody ::
  -- | 'putAccountLogoutRequestBodyAccount'
  Data.Text.Internal.Text ->
  PutAccountLogoutRequestBody
mkPutAccountLogoutRequestBody putAccountLogoutRequestBodyAccount =
  PutAccountLogoutRequestBody
    { putAccountLogoutRequestBodyAccount = putAccountLogoutRequestBodyAccount,
      putAccountLogoutRequestBodyExpand = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'putAccountLogout'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PutAccountLogoutResponseError' is used.
data PutAccountLogoutResponse
  = -- | Means either no matching case available or a parse error
    PutAccountLogoutResponseError GHC.Base.String
  | -- | Successful response.
    PutAccountLogoutResponse200 LightAccountLogout
  | -- | Error response.
    PutAccountLogoutResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
