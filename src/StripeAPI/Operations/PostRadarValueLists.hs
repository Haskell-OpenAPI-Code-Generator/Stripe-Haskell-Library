-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postRadarValueLists
module StripeAPI.Operations.PostRadarValueLists where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/radar/value_lists
-- 
-- \<p>Creates a new \<code>ValueList\<\/code> object, which can then be referenced in rules.\<\/p>
postRadarValueLists :: forall m . StripeAPI.Common.MonadHTTP m => PostRadarValueListsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostRadarValueListsResponse) -- ^ Monadic computation which returns the result of the operation
postRadarValueLists body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostRadarValueListsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostRadarValueListsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            Radar'valueList)
                                                                                                                                                                         | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostRadarValueListsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                              Error)
                                                                                                                                                                         | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/radar/value_lists") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/radar\/value_lists.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostRadarValueListsRequestBody = PostRadarValueListsRequestBody {
  -- | alias: The name of the value list for use in rules.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  postRadarValueListsRequestBodyAlias :: Data.Text.Internal.Text
  -- | expand: Specifies which fields in the response should be expanded.
  , postRadarValueListsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | item_type: Type of the items in the value list. One of \`card_fingerprint\`, \`card_bin\`, \`email\`, \`ip_address\`, \`country\`, \`string\`, \`case_sensitive_string\`, or \`customer_id\`. Use \`string\` if the item type is unknown or mixed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postRadarValueListsRequestBodyItemType :: (GHC.Maybe.Maybe PostRadarValueListsRequestBodyItemType')
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
  , postRadarValueListsRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | name: The human-readable name of the value list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 100
  , postRadarValueListsRequestBodyName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostRadarValueListsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["alias" Data.Aeson.Types.ToJSON..= postRadarValueListsRequestBodyAlias obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postRadarValueListsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("item_type" Data.Aeson.Types.ToJSON..=)) (postRadarValueListsRequestBodyItemType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postRadarValueListsRequestBodyMetadata obj) : ["name" Data.Aeson.Types.ToJSON..= postRadarValueListsRequestBodyName obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["alias" Data.Aeson.Types.ToJSON..= postRadarValueListsRequestBodyAlias obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postRadarValueListsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("item_type" Data.Aeson.Types.ToJSON..=)) (postRadarValueListsRequestBodyItemType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postRadarValueListsRequestBodyMetadata obj) : ["name" Data.Aeson.Types.ToJSON..= postRadarValueListsRequestBodyName obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostRadarValueListsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostRadarValueListsRequestBody" (\obj -> ((((GHC.Base.pure PostRadarValueListsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "alias")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "item_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))
-- | Create a new 'PostRadarValueListsRequestBody' with all required fields.
mkPostRadarValueListsRequestBody :: Data.Text.Internal.Text -- ^ 'postRadarValueListsRequestBodyAlias'
  -> Data.Text.Internal.Text -- ^ 'postRadarValueListsRequestBodyName'
  -> PostRadarValueListsRequestBody
mkPostRadarValueListsRequestBody postRadarValueListsRequestBodyAlias postRadarValueListsRequestBodyName = PostRadarValueListsRequestBody{postRadarValueListsRequestBodyAlias = postRadarValueListsRequestBodyAlias,
                                                                                                                                         postRadarValueListsRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                                                         postRadarValueListsRequestBodyItemType = GHC.Maybe.Nothing,
                                                                                                                                         postRadarValueListsRequestBodyMetadata = GHC.Maybe.Nothing,
                                                                                                                                         postRadarValueListsRequestBodyName = postRadarValueListsRequestBodyName}
-- | Defines the enum schema located at @paths.\/v1\/radar\/value_lists.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.item_type@ in the specification.
-- 
-- Type of the items in the value list. One of \`card_fingerprint\`, \`card_bin\`, \`email\`, \`ip_address\`, \`country\`, \`string\`, \`case_sensitive_string\`, or \`customer_id\`. Use \`string\` if the item type is unknown or mixed.
data PostRadarValueListsRequestBodyItemType' =
   PostRadarValueListsRequestBodyItemType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostRadarValueListsRequestBodyItemType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostRadarValueListsRequestBodyItemType'EnumCardBin -- ^ Represents the JSON value @"card_bin"@
  | PostRadarValueListsRequestBodyItemType'EnumCardFingerprint -- ^ Represents the JSON value @"card_fingerprint"@
  | PostRadarValueListsRequestBodyItemType'EnumCaseSensitiveString -- ^ Represents the JSON value @"case_sensitive_string"@
  | PostRadarValueListsRequestBodyItemType'EnumCountry -- ^ Represents the JSON value @"country"@
  | PostRadarValueListsRequestBodyItemType'EnumCustomerId -- ^ Represents the JSON value @"customer_id"@
  | PostRadarValueListsRequestBodyItemType'EnumEmail -- ^ Represents the JSON value @"email"@
  | PostRadarValueListsRequestBodyItemType'EnumIpAddress -- ^ Represents the JSON value @"ip_address"@
  | PostRadarValueListsRequestBodyItemType'EnumString -- ^ Represents the JSON value @"string"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostRadarValueListsRequestBodyItemType'
    where toJSON (PostRadarValueListsRequestBodyItemType'Other val) = val
          toJSON (PostRadarValueListsRequestBodyItemType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostRadarValueListsRequestBodyItemType'EnumCardBin) = "card_bin"
          toJSON (PostRadarValueListsRequestBodyItemType'EnumCardFingerprint) = "card_fingerprint"
          toJSON (PostRadarValueListsRequestBodyItemType'EnumCaseSensitiveString) = "case_sensitive_string"
          toJSON (PostRadarValueListsRequestBodyItemType'EnumCountry) = "country"
          toJSON (PostRadarValueListsRequestBodyItemType'EnumCustomerId) = "customer_id"
          toJSON (PostRadarValueListsRequestBodyItemType'EnumEmail) = "email"
          toJSON (PostRadarValueListsRequestBodyItemType'EnumIpAddress) = "ip_address"
          toJSON (PostRadarValueListsRequestBodyItemType'EnumString) = "string"
instance Data.Aeson.Types.FromJSON.FromJSON PostRadarValueListsRequestBodyItemType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "card_bin" -> PostRadarValueListsRequestBodyItemType'EnumCardBin
                                            | val GHC.Classes.== "card_fingerprint" -> PostRadarValueListsRequestBodyItemType'EnumCardFingerprint
                                            | val GHC.Classes.== "case_sensitive_string" -> PostRadarValueListsRequestBodyItemType'EnumCaseSensitiveString
                                            | val GHC.Classes.== "country" -> PostRadarValueListsRequestBodyItemType'EnumCountry
                                            | val GHC.Classes.== "customer_id" -> PostRadarValueListsRequestBodyItemType'EnumCustomerId
                                            | val GHC.Classes.== "email" -> PostRadarValueListsRequestBodyItemType'EnumEmail
                                            | val GHC.Classes.== "ip_address" -> PostRadarValueListsRequestBodyItemType'EnumIpAddress
                                            | val GHC.Classes.== "string" -> PostRadarValueListsRequestBodyItemType'EnumString
                                            | GHC.Base.otherwise -> PostRadarValueListsRequestBodyItemType'Other val)
-- | Represents a response of the operation 'postRadarValueLists'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostRadarValueListsResponseError' is used.
data PostRadarValueListsResponse =
   PostRadarValueListsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostRadarValueListsResponse200 Radar'valueList -- ^ Successful response.
  | PostRadarValueListsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
