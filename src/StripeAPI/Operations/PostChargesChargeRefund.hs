{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postChargesChargeRefund
module StripeAPI.Operations.PostChargesChargeRefund where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/charges/{charge}/refund
--
-- \<p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.\<\/p>
--
-- \<p>This action refunds a previously created charge that’s not refunded yet.
-- Funds are refunded to the credit or debit card that’s originally charged.\<\/p>
--
-- \<p>You can optionally refund only part of a charge.
-- You can repeat this until the entire charge is refunded.\<\/p>
--
-- \<p>After you entirely refund a charge, you can’t refund it again.
-- This method raises an error when it’s called on an already-refunded charge,
-- or when you attempt to refund more money than is left on a charge.\<\/p>
postChargesChargeRefund ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | charge: The identifier of the charge to refund. | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostChargesChargeRefundRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostChargesChargeRefundResponse)
postChargesChargeRefund
  charge
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostChargesChargeRefundResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                       PostChargesChargeRefundResponse200
                                         Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                              Data.Either.Either
                                                                GHC.Base.String
                                                                Charge
                                                          )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                       PostChargesChargeRefundResponseDefault
                                         Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                              Data.Either.Either
                                                                GHC.Base.String
                                                                Error
                                                          )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/v1/charges/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel charge)) GHC.Base.<> "/refund")) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/charges\/{charge}\/refund.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostChargesChargeRefundRequestBody = PostChargesChargeRefundRequestBody
  { -- | amount: A positive integer in cents (or local equivalent) representing how much of this charge to refund. Can refund only up to the remaining, unrefunded amount of the charge.
    postChargesChargeRefundRequestBodyAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | expand: Specifies which fields in the response should be expanded.
    postChargesChargeRefundRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | instructions_email: For payment methods without native refund support (e.g., Konbini, PromptPay), use this email from the customer to receive refund instructions.
    postChargesChargeRefundRequestBodyInstructionsEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
    postChargesChargeRefundRequestBodyMetadata :: (GHC.Maybe.Maybe PostChargesChargeRefundRequestBodyMetadata'Variants),
    -- | payment_intent: The identifier of the PaymentIntent to refund.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postChargesChargeRefundRequestBodyPaymentIntent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | reason: String indicating the reason for the refund. If set, possible values are \`duplicate\`, \`fraudulent\`, and \`requested_by_customer\`. If you believe the charge to be fraudulent, specifying \`fraudulent\` as the reason will add the associated card and email to your [block lists](https:\/\/stripe.com\/docs\/radar\/lists), and will also help us improve our fraud detection algorithms.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postChargesChargeRefundRequestBodyReason :: (GHC.Maybe.Maybe PostChargesChargeRefundRequestBodyReason'),
    -- | refund_application_fee: Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
    postChargesChargeRefundRequestBodyRefundApplicationFee :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | reverse_transfer: Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount).\<br>\<br>A transfer can be reversed only by the application that created the charge.
    postChargesChargeRefundRequestBodyReverseTransfer :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeRefundRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instructions_email" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyInstructionsEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyPaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refund_application_fee" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyRefundApplicationFee obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reverse_transfer" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyReverseTransfer obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instructions_email" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyInstructionsEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyPaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refund_application_fee" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyRefundApplicationFee obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reverse_transfer" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundRequestBodyReverseTransfer obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostChargesChargeRefundRequestBody" (\obj -> (((((((GHC.Base.pure PostChargesChargeRefundRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "instructions_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "refund_application_fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reverse_transfer"))

-- | Create a new 'PostChargesChargeRefundRequestBody' with all required fields.
mkPostChargesChargeRefundRequestBody :: PostChargesChargeRefundRequestBody
mkPostChargesChargeRefundRequestBody =
  PostChargesChargeRefundRequestBody
    { postChargesChargeRefundRequestBodyAmount = GHC.Maybe.Nothing,
      postChargesChargeRefundRequestBodyExpand = GHC.Maybe.Nothing,
      postChargesChargeRefundRequestBodyInstructionsEmail = GHC.Maybe.Nothing,
      postChargesChargeRefundRequestBodyMetadata = GHC.Maybe.Nothing,
      postChargesChargeRefundRequestBodyPaymentIntent = GHC.Maybe.Nothing,
      postChargesChargeRefundRequestBodyReason = GHC.Maybe.Nothing,
      postChargesChargeRefundRequestBodyRefundApplicationFee = GHC.Maybe.Nothing,
      postChargesChargeRefundRequestBodyReverseTransfer = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/charges\/{charge}\/refund.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.metadata.anyOf@ in the specification.
--
-- Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
data PostChargesChargeRefundRequestBodyMetadata'Variants
  = -- | Represents the JSON value @""@
    PostChargesChargeRefundRequestBodyMetadata'EmptyString
  | PostChargesChargeRefundRequestBodyMetadata'Object Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeRefundRequestBodyMetadata'Variants where
  toJSON (PostChargesChargeRefundRequestBodyMetadata'Object a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostChargesChargeRefundRequestBodyMetadata'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundRequestBodyMetadata'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostChargesChargeRefundRequestBodyMetadata'EmptyString
        | GHC.Base.otherwise -> case (PostChargesChargeRefundRequestBodyMetadata'Object Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
            Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/charges\/{charge}\/refund.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.reason@ in the specification.
--
-- String indicating the reason for the refund. If set, possible values are \`duplicate\`, \`fraudulent\`, and \`requested_by_customer\`. If you believe the charge to be fraudulent, specifying \`fraudulent\` as the reason will add the associated card and email to your [block lists](https:\/\/stripe.com\/docs\/radar\/lists), and will also help us improve our fraud detection algorithms.
data PostChargesChargeRefundRequestBodyReason'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostChargesChargeRefundRequestBodyReason'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostChargesChargeRefundRequestBodyReason'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"duplicate"@
    PostChargesChargeRefundRequestBodyReason'EnumDuplicate
  | -- | Represents the JSON value @"fraudulent"@
    PostChargesChargeRefundRequestBodyReason'EnumFraudulent
  | -- | Represents the JSON value @"requested_by_customer"@
    PostChargesChargeRefundRequestBodyReason'EnumRequestedByCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeRefundRequestBodyReason' where
  toJSON (PostChargesChargeRefundRequestBodyReason'Other val) = val
  toJSON (PostChargesChargeRefundRequestBodyReason'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostChargesChargeRefundRequestBodyReason'EnumDuplicate) = "duplicate"
  toJSON (PostChargesChargeRefundRequestBodyReason'EnumFraudulent) = "fraudulent"
  toJSON (PostChargesChargeRefundRequestBodyReason'EnumRequestedByCustomer) = "requested_by_customer"

instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundRequestBodyReason' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "duplicate" -> PostChargesChargeRefundRequestBodyReason'EnumDuplicate
            | val GHC.Classes.== "fraudulent" -> PostChargesChargeRefundRequestBodyReason'EnumFraudulent
            | val GHC.Classes.== "requested_by_customer" -> PostChargesChargeRefundRequestBodyReason'EnumRequestedByCustomer
            | GHC.Base.otherwise -> PostChargesChargeRefundRequestBodyReason'Other val
      )

-- | Represents a response of the operation 'postChargesChargeRefund'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostChargesChargeRefundResponseError' is used.
data PostChargesChargeRefundResponse
  = -- | Means either no matching case available or a parse error
    PostChargesChargeRefundResponseError GHC.Base.String
  | -- | Successful response.
    PostChargesChargeRefundResponse200 Charge
  | -- | Error response.
    PostChargesChargeRefundResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
