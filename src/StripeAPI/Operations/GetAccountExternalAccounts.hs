{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getAccountExternalAccounts
module StripeAPI.Operations.GetAccountExternalAccounts where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/account/external_accounts
--
-- \<p>List external accounts for an account.\<\/p>
getAccountExternalAccounts ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetAccountExternalAccountsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetAccountExternalAccountsResponse)
getAccountExternalAccounts parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetAccountExternalAccountsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetAccountExternalAccountsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetAccountExternalAccountsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetAccountExternalAccountsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/account/external_accounts")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountExternalAccountsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountExternalAccountsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountExternalAccountsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountExternalAccountsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/account\/external_accounts.GET.parameters@ in the specification.
data GetAccountExternalAccountsParameters
  = GetAccountExternalAccountsParameters
      { -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        getAccountExternalAccountsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getAccountExternalAccountsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getAccountExternalAccountsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        getAccountExternalAccountsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountExternalAccountsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("queryEnding_before" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsParametersQueryEndingBefore obj : "queryExpand" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsParametersQueryExpand obj : "queryLimit" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsParametersQueryLimit obj : "queryStarting_after" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsParametersQueryStartingAfter obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryEnding_before" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsParametersQueryEndingBefore obj) GHC.Base.<> (("queryExpand" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsParametersQueryExpand obj) GHC.Base.<> (("queryLimit" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsParametersQueryLimit obj) GHC.Base.<> ("queryStarting_after" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsParametersQueryStartingAfter obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountExternalAccountsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountExternalAccountsParameters" (\obj -> (((GHC.Base.pure GetAccountExternalAccountsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after"))

-- | Create a new 'GetAccountExternalAccountsParameters' with all required fields.
mkGetAccountExternalAccountsParameters :: GetAccountExternalAccountsParameters
mkGetAccountExternalAccountsParameters =
  GetAccountExternalAccountsParameters
    { getAccountExternalAccountsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getAccountExternalAccountsParametersQueryExpand = GHC.Maybe.Nothing,
      getAccountExternalAccountsParametersQueryLimit = GHC.Maybe.Nothing,
      getAccountExternalAccountsParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getAccountExternalAccounts'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountExternalAccountsResponseError' is used.
data GetAccountExternalAccountsResponse
  = -- | Means either no matching case available or a parse error
    GetAccountExternalAccountsResponseError GHC.Base.String
  | -- | Successful response.
    GetAccountExternalAccountsResponse200 GetAccountExternalAccountsResponseBody200
  | -- | Error response.
    GetAccountExternalAccountsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/account\/external_accounts.GET.responses.200.content.application\/json.schema@ in the specification.
data GetAccountExternalAccountsResponseBody200
  = GetAccountExternalAccountsResponseBody200
      { -- | data: The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
        getAccountExternalAccountsResponseBody200Data :: ([GetAccountExternalAccountsResponseBody200Data']),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getAccountExternalAccountsResponseBody200HasMore :: GHC.Types.Bool,
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountExternalAccountsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data obj : "has_more" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200HasMore obj : "url" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountExternalAccountsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountExternalAccountsResponseBody200" (\obj -> ((GHC.Base.pure GetAccountExternalAccountsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetAccountExternalAccountsResponseBody200' with all required fields.
mkGetAccountExternalAccountsResponseBody200 ::
  -- | 'getAccountExternalAccountsResponseBody200Data'
  [GetAccountExternalAccountsResponseBody200Data'] ->
  -- | 'getAccountExternalAccountsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getAccountExternalAccountsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetAccountExternalAccountsResponseBody200
mkGetAccountExternalAccountsResponseBody200 getAccountExternalAccountsResponseBody200Data getAccountExternalAccountsResponseBody200HasMore getAccountExternalAccountsResponseBody200Url =
  GetAccountExternalAccountsResponseBody200
    { getAccountExternalAccountsResponseBody200Data = getAccountExternalAccountsResponseBody200Data,
      getAccountExternalAccountsResponseBody200HasMore = getAccountExternalAccountsResponseBody200HasMore,
      getAccountExternalAccountsResponseBody200Url = getAccountExternalAccountsResponseBody200Url
    }

-- | Defines the object schema located at @paths.\/v1\/account\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf@ in the specification.
data GetAccountExternalAccountsResponseBody200Data'
  = GetAccountExternalAccountsResponseBody200Data'
      { -- | account: The ID of the account that the bank account is associated with.
        getAccountExternalAccountsResponseBody200Data'Account :: (GHC.Maybe.Maybe GetAccountExternalAccountsResponseBody200Data'Account'Variants),
        -- | account_holder_name: The name of the person or business that owns the bank account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AccountHolderType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_city: City\/District\/Suburb\/Town\/Village.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_country: Billing address country, if provided when creating card.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AddressLine1Check :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_state: State\/County\/Province\/Region.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_zip: ZIP or postal code.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'AddressZipCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | available_payout_methods: A set of available payout methods for this card. Will be either \`[\"standard\"]\` or \`[\"standard\", \"instant\"]\`. Only values from this set should be passed as the \`method\` when creating a transfer.
        getAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'])),
        -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'BankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter ISO code representing the country the bank account is located in.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
        getAccountExternalAccountsResponseBody200Data'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | customer: The ID of the customer that the bank account is associated with.
        getAccountExternalAccountsResponseBody200Data'Customer :: (GHC.Maybe.Maybe GetAccountExternalAccountsResponseBody200Data'Customer'Variants),
        -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'CvcCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | default_for_currency: Whether this bank account is the default external account for its currency.
        getAccountExternalAccountsResponseBody200Data'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'DynamicLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | exp_month: Two-digit number representing the card\'s expiration month.
        getAccountExternalAccountsResponseBody200Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | exp_year: Four-digit number representing the card\'s expiration year.
        getAccountExternalAccountsResponseBody200Data'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'Fingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | last4: The last four digits of the bank account number.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        getAccountExternalAccountsResponseBody200Data'Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | name: Cardholder name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | recipient: The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
        getAccountExternalAccountsResponseBody200Data'Recipient :: (GHC.Maybe.Maybe GetAccountExternalAccountsResponseBody200Data'Recipient'Variants),
        -- | routing_number: The routing transit number for the bank account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'RoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a transfer sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send transfers until the bank details are updated.
        --
        -- For external accounts, possible values are \`new\` and \`errored\`. Validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply. If a transfer fails, the status is set to \`errored\` and transfers are stopped until account details are updated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`amex_express_checkout\`, \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getAccountExternalAccountsResponseBody200Data'TokenizationMethod :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountExternalAccountsResponseBody200Data' where
  toJSON obj = Data.Aeson.Types.Internal.object ("account" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Account obj : "account_holder_name" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AccountHolderName obj : "account_holder_type" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AccountHolderType obj : "address_city" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressCity obj : "address_country" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressCountry obj : "address_line1" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressLine1 obj : "address_line1_check" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressLine1Check obj : "address_line2" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressLine2 obj : "address_state" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressState obj : "address_zip" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressZip obj : "address_zip_check" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressZipCheck obj : "available_payout_methods" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods obj : "bank_name" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'BankName obj : "brand" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Brand obj : "country" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Country obj : "currency" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Currency obj : "customer" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Customer obj : "cvc_check" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'CvcCheck obj : "default_for_currency" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'DefaultForCurrency obj : "dynamic_last4" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'DynamicLast4 obj : "exp_month" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'ExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'ExpYear obj : "fingerprint" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Fingerprint obj : "funding" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Funding obj : "id" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Id obj : "last4" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Last4 obj : "metadata" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Metadata obj : "name" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Name obj : "recipient" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Recipient obj : "routing_number" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'RoutingNumber obj : "status" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Status obj : "tokenization_method" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'TokenizationMethod obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Account obj) GHC.Base.<> (("account_holder_name" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AccountHolderName obj) GHC.Base.<> (("account_holder_type" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AccountHolderType obj) GHC.Base.<> (("address_city" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressCity obj) GHC.Base.<> (("address_country" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressCountry obj) GHC.Base.<> (("address_line1" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressLine1 obj) GHC.Base.<> (("address_line1_check" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressLine1Check obj) GHC.Base.<> (("address_line2" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressLine2 obj) GHC.Base.<> (("address_state" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressState obj) GHC.Base.<> (("address_zip" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressZip obj) GHC.Base.<> (("address_zip_check" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AddressZipCheck obj) GHC.Base.<> (("available_payout_methods" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods obj) GHC.Base.<> (("bank_name" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'BankName obj) GHC.Base.<> (("brand" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Brand obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Country obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Currency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Customer obj) GHC.Base.<> (("cvc_check" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'CvcCheck obj) GHC.Base.<> (("default_for_currency" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'DefaultForCurrency obj) GHC.Base.<> (("dynamic_last4" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'DynamicLast4 obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'ExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'ExpYear obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Fingerprint obj) GHC.Base.<> (("funding" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Funding obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Id obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Last4 obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Metadata obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Name obj) GHC.Base.<> (("recipient" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Recipient obj) GHC.Base.<> (("routing_number" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'RoutingNumber obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'Status obj) GHC.Base.<> (("tokenization_method" Data.Aeson.Types.ToJSON..= getAccountExternalAccountsResponseBody200Data'TokenizationMethod obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account")))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountExternalAccountsResponseBody200Data' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountExternalAccountsResponseBody200Data'" (\obj -> (((((((((((((((((((((((((((((((GHC.Base.pure GetAccountExternalAccountsResponseBody200Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method"))

-- | Create a new 'GetAccountExternalAccountsResponseBody200Data'' with all required fields.
mkGetAccountExternalAccountsResponseBody200Data' :: GetAccountExternalAccountsResponseBody200Data'
mkGetAccountExternalAccountsResponseBody200Data' =
  GetAccountExternalAccountsResponseBody200Data'
    { getAccountExternalAccountsResponseBody200Data'Account = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AccountHolderName = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AccountHolderType = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AddressCity = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AddressCountry = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AddressLine1 = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AddressLine1Check = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AddressLine2 = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AddressState = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AddressZip = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AddressZipCheck = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'BankName = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Brand = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Country = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Currency = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Customer = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'CvcCheck = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'DefaultForCurrency = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'DynamicLast4 = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'ExpMonth = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'ExpYear = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Fingerprint = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Funding = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Id = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Last4 = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Metadata = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Name = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Recipient = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'RoutingNumber = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'Status = GHC.Maybe.Nothing,
      getAccountExternalAccountsResponseBody200Data'TokenizationMethod = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/account\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data GetAccountExternalAccountsResponseBody200Data'Account'Variants
  = GetAccountExternalAccountsResponseBody200Data'Account'Account Account
  | GetAccountExternalAccountsResponseBody200Data'Account'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountExternalAccountsResponseBody200Data'Account'Variants where
  toJSON (GetAccountExternalAccountsResponseBody200Data'Account'Account a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetAccountExternalAccountsResponseBody200Data'Account'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountExternalAccountsResponseBody200Data'Account'Variants where
  parseJSON val = case (GetAccountExternalAccountsResponseBody200Data'Account'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetAccountExternalAccountsResponseBody200Data'Account'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/account\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.available_payout_methods.items@ in the specification.
data GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'EnumInstant
  | -- | Represents the JSON value @"standard"@
    GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods' where
  toJSON (GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'Other val) = val
  toJSON (GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'EnumInstant) = "instant"
  toJSON (GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "instant" -> GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'EnumInstant
            | val GHC.Classes.== "standard" -> GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'EnumStandard
            | GHC.Base.otherwise -> GetAccountExternalAccountsResponseBody200Data'AvailablePayoutMethods'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/account\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer that the bank account is associated with.
data GetAccountExternalAccountsResponseBody200Data'Customer'Variants
  = GetAccountExternalAccountsResponseBody200Data'Customer'Customer Customer
  | GetAccountExternalAccountsResponseBody200Data'Customer'DeletedCustomer DeletedCustomer
  | GetAccountExternalAccountsResponseBody200Data'Customer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountExternalAccountsResponseBody200Data'Customer'Variants where
  toJSON (GetAccountExternalAccountsResponseBody200Data'Customer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetAccountExternalAccountsResponseBody200Data'Customer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetAccountExternalAccountsResponseBody200Data'Customer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountExternalAccountsResponseBody200Data'Customer'Variants where
  parseJSON val = case (GetAccountExternalAccountsResponseBody200Data'Customer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetAccountExternalAccountsResponseBody200Data'Customer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetAccountExternalAccountsResponseBody200Data'Customer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @paths.\/v1\/account\/external_accounts.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.recipient.anyOf@ in the specification.
--
-- The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
data GetAccountExternalAccountsResponseBody200Data'Recipient'Variants
  = GetAccountExternalAccountsResponseBody200Data'Recipient'Recipient Recipient
  | GetAccountExternalAccountsResponseBody200Data'Recipient'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAccountExternalAccountsResponseBody200Data'Recipient'Variants where
  toJSON (GetAccountExternalAccountsResponseBody200Data'Recipient'Recipient a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetAccountExternalAccountsResponseBody200Data'Recipient'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetAccountExternalAccountsResponseBody200Data'Recipient'Variants where
  parseJSON val = case (GetAccountExternalAccountsResponseBody200Data'Recipient'Recipient Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetAccountExternalAccountsResponseBody200Data'Recipient'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
