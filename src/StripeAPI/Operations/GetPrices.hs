{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getPrices
module StripeAPI.Operations.GetPrices where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/prices
--
-- \<p>Returns a list of your prices.\<\/p>
getPrices ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetPricesParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetPricesResponse)
getPrices parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetPricesResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetPricesResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetPricesResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetPricesResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/prices")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "active") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryActive parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "currency") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryCurrency parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "lookup_keys") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryLookupKeys parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "product") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryProduct parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "recurring") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryRecurring parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPricesParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/prices.GET.parameters@ in the specification.
data GetPricesParameters = GetPricesParameters
  { -- | queryActive: Represents the parameter named \'active\'
    --
    -- Only return prices that are active or inactive (e.g., pass \`false\` to list all inactive prices).
    getPricesParametersQueryActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryCreated: Represents the parameter named \'created\'
    --
    -- A filter on the list, based on the object \`created\` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
    getPricesParametersQueryCreated :: (GHC.Maybe.Maybe GetPricesParametersQueryCreated'Variants),
    -- | queryCurrency: Represents the parameter named \'currency\'
    --
    -- Only return prices for the given currency.
    getPricesParametersQueryCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getPricesParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getPricesParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getPricesParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryLookup_keys: Represents the parameter named \'lookup_keys\'
    --
    -- Only return the price with these lookup_keys, if any exist.
    getPricesParametersQueryLookupKeys :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryProduct: Represents the parameter named \'product\'
    --
    -- Only return prices for the given product.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getPricesParametersQueryProduct :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryRecurring: Represents the parameter named \'recurring\'
    --
    -- Only return prices with these recurring fields.
    getPricesParametersQueryRecurring :: (GHC.Maybe.Maybe GetPricesParametersQueryRecurring'),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getPricesParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryType: Represents the parameter named \'type\'
    --
    -- Only return prices of type \`recurring\` or \`one_time\`.
    getPricesParametersQueryType :: (GHC.Maybe.Maybe GetPricesParametersQueryType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetPricesParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryActive" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCurrency" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLookup_keys" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryLookupKeys obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryProduct" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryProduct obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecurring" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryRecurring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryActive" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCurrency" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLookup_keys" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryLookupKeys obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryProduct" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryProduct obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRecurring" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryRecurring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryType" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetPricesParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricesParameters" (\obj -> ((((((((((GHC.Base.pure GetPricesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryActive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCurrency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLookup_keys")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryProduct")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRecurring")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryType"))

-- | Create a new 'GetPricesParameters' with all required fields.
mkGetPricesParameters :: GetPricesParameters
mkGetPricesParameters =
  GetPricesParameters
    { getPricesParametersQueryActive = GHC.Maybe.Nothing,
      getPricesParametersQueryCreated = GHC.Maybe.Nothing,
      getPricesParametersQueryCurrency = GHC.Maybe.Nothing,
      getPricesParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getPricesParametersQueryExpand = GHC.Maybe.Nothing,
      getPricesParametersQueryLimit = GHC.Maybe.Nothing,
      getPricesParametersQueryLookupKeys = GHC.Maybe.Nothing,
      getPricesParametersQueryProduct = GHC.Maybe.Nothing,
      getPricesParametersQueryRecurring = GHC.Maybe.Nothing,
      getPricesParametersQueryStartingAfter = GHC.Maybe.Nothing,
      getPricesParametersQueryType = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/prices.GET.parameters.properties.queryCreated.anyOf@ in the specification.
data GetPricesParametersQueryCreated'OneOf1 = GetPricesParametersQueryCreated'OneOf1
  { -- | gt
    getPricesParametersQueryCreated'OneOf1Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | gte
    getPricesParametersQueryCreated'OneOf1Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lt
    getPricesParametersQueryCreated'OneOf1Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lte
    getPricesParametersQueryCreated'OneOf1Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetPricesParametersQueryCreated'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated'OneOf1Lte obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryCreated'OneOf1Lte obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetPricesParametersQueryCreated'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricesParametersQueryCreated'OneOf1" (\obj -> (((GHC.Base.pure GetPricesParametersQueryCreated'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lte"))

-- | Create a new 'GetPricesParametersQueryCreated'OneOf1' with all required fields.
mkGetPricesParametersQueryCreated'OneOf1 :: GetPricesParametersQueryCreated'OneOf1
mkGetPricesParametersQueryCreated'OneOf1 =
  GetPricesParametersQueryCreated'OneOf1
    { getPricesParametersQueryCreated'OneOf1Gt = GHC.Maybe.Nothing,
      getPricesParametersQueryCreated'OneOf1Gte = GHC.Maybe.Nothing,
      getPricesParametersQueryCreated'OneOf1Lt = GHC.Maybe.Nothing,
      getPricesParametersQueryCreated'OneOf1Lte = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/prices.GET.parameters.properties.queryCreated.anyOf@ in the specification.
--
-- Represents the parameter named \'created\'
--
-- A filter on the list, based on the object \`created\` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options.
data GetPricesParametersQueryCreated'Variants
  = GetPricesParametersQueryCreated'GetPricesParametersQueryCreated'OneOf1 GetPricesParametersQueryCreated'OneOf1
  | GetPricesParametersQueryCreated'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetPricesParametersQueryCreated'Variants where
  toJSON (GetPricesParametersQueryCreated'GetPricesParametersQueryCreated'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetPricesParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetPricesParametersQueryCreated'Variants where
  parseJSON val = case (GetPricesParametersQueryCreated'GetPricesParametersQueryCreated'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetPricesParametersQueryCreated'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/prices.GET.parameters.properties.queryRecurring@ in the specification.
--
-- Represents the parameter named \'recurring\'
--
-- Only return prices with these recurring fields.
data GetPricesParametersQueryRecurring' = GetPricesParametersQueryRecurring'
  { -- | interval
    getPricesParametersQueryRecurring'Interval :: (GHC.Maybe.Maybe GetPricesParametersQueryRecurring'Interval'),
    -- | usage_type
    getPricesParametersQueryRecurring'UsageType :: (GHC.Maybe.Maybe GetPricesParametersQueryRecurring'UsageType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetPricesParametersQueryRecurring' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryRecurring'Interval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_type" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryRecurring'UsageType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryRecurring'Interval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_type" Data.Aeson.Types.ToJSON..=)) (getPricesParametersQueryRecurring'UsageType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetPricesParametersQueryRecurring' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricesParametersQueryRecurring'" (\obj -> (GHC.Base.pure GetPricesParametersQueryRecurring' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "usage_type"))

-- | Create a new 'GetPricesParametersQueryRecurring'' with all required fields.
mkGetPricesParametersQueryRecurring' :: GetPricesParametersQueryRecurring'
mkGetPricesParametersQueryRecurring' =
  GetPricesParametersQueryRecurring'
    { getPricesParametersQueryRecurring'Interval = GHC.Maybe.Nothing,
      getPricesParametersQueryRecurring'UsageType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/prices.GET.parameters.properties.queryRecurring.properties.interval@ in the specification.
data GetPricesParametersQueryRecurring'Interval'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetPricesParametersQueryRecurring'Interval'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetPricesParametersQueryRecurring'Interval'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"day"@
    GetPricesParametersQueryRecurring'Interval'EnumDay
  | -- | Represents the JSON value @"month"@
    GetPricesParametersQueryRecurring'Interval'EnumMonth
  | -- | Represents the JSON value @"week"@
    GetPricesParametersQueryRecurring'Interval'EnumWeek
  | -- | Represents the JSON value @"year"@
    GetPricesParametersQueryRecurring'Interval'EnumYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetPricesParametersQueryRecurring'Interval' where
  toJSON (GetPricesParametersQueryRecurring'Interval'Other val) = val
  toJSON (GetPricesParametersQueryRecurring'Interval'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetPricesParametersQueryRecurring'Interval'EnumDay) = "day"
  toJSON (GetPricesParametersQueryRecurring'Interval'EnumMonth) = "month"
  toJSON (GetPricesParametersQueryRecurring'Interval'EnumWeek) = "week"
  toJSON (GetPricesParametersQueryRecurring'Interval'EnumYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON GetPricesParametersQueryRecurring'Interval' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "day" -> GetPricesParametersQueryRecurring'Interval'EnumDay
            | val GHC.Classes.== "month" -> GetPricesParametersQueryRecurring'Interval'EnumMonth
            | val GHC.Classes.== "week" -> GetPricesParametersQueryRecurring'Interval'EnumWeek
            | val GHC.Classes.== "year" -> GetPricesParametersQueryRecurring'Interval'EnumYear
            | GHC.Base.otherwise -> GetPricesParametersQueryRecurring'Interval'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/prices.GET.parameters.properties.queryRecurring.properties.usage_type@ in the specification.
data GetPricesParametersQueryRecurring'UsageType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetPricesParametersQueryRecurring'UsageType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetPricesParametersQueryRecurring'UsageType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"licensed"@
    GetPricesParametersQueryRecurring'UsageType'EnumLicensed
  | -- | Represents the JSON value @"metered"@
    GetPricesParametersQueryRecurring'UsageType'EnumMetered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetPricesParametersQueryRecurring'UsageType' where
  toJSON (GetPricesParametersQueryRecurring'UsageType'Other val) = val
  toJSON (GetPricesParametersQueryRecurring'UsageType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetPricesParametersQueryRecurring'UsageType'EnumLicensed) = "licensed"
  toJSON (GetPricesParametersQueryRecurring'UsageType'EnumMetered) = "metered"

instance Data.Aeson.Types.FromJSON.FromJSON GetPricesParametersQueryRecurring'UsageType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "licensed" -> GetPricesParametersQueryRecurring'UsageType'EnumLicensed
            | val GHC.Classes.== "metered" -> GetPricesParametersQueryRecurring'UsageType'EnumMetered
            | GHC.Base.otherwise -> GetPricesParametersQueryRecurring'UsageType'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/prices.GET.parameters.properties.queryType@ in the specification.
--
-- Represents the parameter named \'type\'
--
-- Only return prices of type \`recurring\` or \`one_time\`.
data GetPricesParametersQueryType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetPricesParametersQueryType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetPricesParametersQueryType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"one_time"@
    GetPricesParametersQueryType'EnumOneTime
  | -- | Represents the JSON value @"recurring"@
    GetPricesParametersQueryType'EnumRecurring
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetPricesParametersQueryType' where
  toJSON (GetPricesParametersQueryType'Other val) = val
  toJSON (GetPricesParametersQueryType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetPricesParametersQueryType'EnumOneTime) = "one_time"
  toJSON (GetPricesParametersQueryType'EnumRecurring) = "recurring"

instance Data.Aeson.Types.FromJSON.FromJSON GetPricesParametersQueryType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "one_time" -> GetPricesParametersQueryType'EnumOneTime
            | val GHC.Classes.== "recurring" -> GetPricesParametersQueryType'EnumRecurring
            | GHC.Base.otherwise -> GetPricesParametersQueryType'Other val
      )

-- | Represents a response of the operation 'getPrices'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPricesResponseError' is used.
data GetPricesResponse
  = -- | Means either no matching case available or a parse error
    GetPricesResponseError GHC.Base.String
  | -- | Successful response.
    GetPricesResponse200 GetPricesResponseBody200
  | -- | Error response.
    GetPricesResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/prices.GET.responses.200.content.application\/json.schema@ in the specification.
data GetPricesResponseBody200 = GetPricesResponseBody200
  { -- | data: Details about each object.
    getPricesResponseBody200Data :: ([Price]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getPricesResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    -- * Must match pattern \'^\/v1\/prices\'
    getPricesResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetPricesResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getPricesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getPricesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getPricesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getPricesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getPricesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getPricesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetPricesResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPricesResponseBody200" (\obj -> ((GHC.Base.pure GetPricesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetPricesResponseBody200' with all required fields.
mkGetPricesResponseBody200 ::
  -- | 'getPricesResponseBody200Data'
  [Price] ->
  -- | 'getPricesResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getPricesResponseBody200Url'
  Data.Text.Internal.Text ->
  GetPricesResponseBody200
mkGetPricesResponseBody200 getPricesResponseBody200Data getPricesResponseBody200HasMore getPricesResponseBody200Url =
  GetPricesResponseBody200
    { getPricesResponseBody200Data = getPricesResponseBody200Data,
      getPricesResponseBody200HasMore = getPricesResponseBody200HasMore,
      getPricesResponseBody200Url = getPricesResponseBody200Url
    }
