{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getProducts
module StripeAPI.Operations.GetProducts where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/products
--
-- \<p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.\<\/p>
getProducts ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetProductsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetProductsResponse)
getProducts parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetProductsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetProductsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetProductsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetProductsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/products")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "active") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryActive parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ids") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryIds parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "shippable") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryShippable parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "url") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getProductsParametersQueryUrl parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the data type for the schema getProductsParameters
data GetProductsParameters
  = GetProductsParameters
      { -- | queryActive: Represents the parameter named \'active\'
        --
        -- Only return products that are active or inactive (e.g., pass \`false\` to list all inactive products).
        getProductsParametersQueryActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | queryCreated: Represents the parameter named \'created\'
        --
        -- Only return products that were created during the given date interval.
        getProductsParametersQueryCreated :: (GHC.Maybe.Maybe GetProductsParametersQueryCreated'Variants),
        -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getProductsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getProductsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryIds: Represents the parameter named \'ids\'
        --
        -- Only return products with the given IDs.
        getProductsParametersQueryIds :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getProductsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryShippable: Represents the parameter named \'shippable\'
        --
        -- Only return products that can be shipped (i.e., physical, not digital products).
        getProductsParametersQueryShippable :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getProductsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryType: Represents the parameter named \'type\'
        --
        -- Only return products of this type.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getProductsParametersQueryType :: (GHC.Maybe.Maybe GetProductsParametersQueryType'),
        -- | queryUrl: Represents the parameter named \'url\'
        --
        -- Only return products with the given url.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getProductsParametersQueryUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetProductsParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "queryActive" (getProductsParametersQueryActive obj) : (Data.Aeson..=) "queryCreated" (getProductsParametersQueryCreated obj) : (Data.Aeson..=) "queryEnding_before" (getProductsParametersQueryEndingBefore obj) : (Data.Aeson..=) "queryExpand" (getProductsParametersQueryExpand obj) : (Data.Aeson..=) "queryIds" (getProductsParametersQueryIds obj) : (Data.Aeson..=) "queryLimit" (getProductsParametersQueryLimit obj) : (Data.Aeson..=) "queryShippable" (getProductsParametersQueryShippable obj) : (Data.Aeson..=) "queryStarting_after" (getProductsParametersQueryStartingAfter obj) : (Data.Aeson..=) "queryType" (getProductsParametersQueryType obj) : (Data.Aeson..=) "queryUrl" (getProductsParametersQueryUrl obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "queryActive" (getProductsParametersQueryActive obj) GHC.Base.<> ((Data.Aeson..=) "queryCreated" (getProductsParametersQueryCreated obj) GHC.Base.<> ((Data.Aeson..=) "queryEnding_before" (getProductsParametersQueryEndingBefore obj) GHC.Base.<> ((Data.Aeson..=) "queryExpand" (getProductsParametersQueryExpand obj) GHC.Base.<> ((Data.Aeson..=) "queryIds" (getProductsParametersQueryIds obj) GHC.Base.<> ((Data.Aeson..=) "queryLimit" (getProductsParametersQueryLimit obj) GHC.Base.<> ((Data.Aeson..=) "queryShippable" (getProductsParametersQueryShippable obj) GHC.Base.<> ((Data.Aeson..=) "queryStarting_after" (getProductsParametersQueryStartingAfter obj) GHC.Base.<> ((Data.Aeson..=) "queryType" (getProductsParametersQueryType obj) GHC.Base.<> (Data.Aeson..=) "queryUrl" (getProductsParametersQueryUrl obj))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetProductsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetProductsParameters" (\obj -> (((((((((GHC.Base.pure GetProductsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryActive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryIds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryShippable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryUrl"))

-- | Defines the data type for the schema getProductsParametersQueryCreated\'OneOf2
data GetProductsParametersQueryCreated'OneOf2
  = GetProductsParametersQueryCreated'OneOf2
      { -- | gt
        getProductsParametersQueryCreated'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getProductsParametersQueryCreated'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getProductsParametersQueryCreated'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getProductsParametersQueryCreated'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetProductsParametersQueryCreated'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getProductsParametersQueryCreated'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getProductsParametersQueryCreated'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getProductsParametersQueryCreated'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getProductsParametersQueryCreated'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getProductsParametersQueryCreated'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getProductsParametersQueryCreated'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getProductsParametersQueryCreated'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getProductsParametersQueryCreated'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetProductsParametersQueryCreated'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetProductsParametersQueryCreated'OneOf2" (\obj -> (((GHC.Base.pure GetProductsParametersQueryCreated'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getProductsParametersQueryCreated\'
--
-- Represents the parameter named \'created\'
--
-- Only return products that were created during the given date interval.
data GetProductsParametersQueryCreated'Variants
  = GetProductsParametersQueryCreated'Int GHC.Types.Int
  | GetProductsParametersQueryCreated'GetProductsParametersQueryCreated'OneOf2 GetProductsParametersQueryCreated'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetProductsParametersQueryCreated'Variants where
  toJSON (GetProductsParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetProductsParametersQueryCreated'GetProductsParametersQueryCreated'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetProductsParametersQueryCreated'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetProductsParametersQueryCreated'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetProductsParametersQueryCreated'GetProductsParametersQueryCreated'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema getProductsParametersQueryType\'
--
-- Represents the parameter named \'type\'
--
-- Only return products of this type.
data GetProductsParametersQueryType'
  = GetProductsParametersQueryType'EnumOther Data.Aeson.Types.Internal.Value
  | GetProductsParametersQueryType'EnumTyped Data.Text.Internal.Text
  | GetProductsParametersQueryType'EnumStringGood
  | GetProductsParametersQueryType'EnumStringService
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetProductsParametersQueryType' where
  toJSON (GetProductsParametersQueryType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetProductsParametersQueryType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetProductsParametersQueryType'EnumStringGood) = "good"
  toJSON (GetProductsParametersQueryType'EnumStringService) = "service"

instance Data.Aeson.Types.FromJSON.FromJSON GetProductsParametersQueryType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "good" -> GetProductsParametersQueryType'EnumStringGood
            | val GHC.Classes.== "service" -> GetProductsParametersQueryType'EnumStringService
            | GHC.Base.otherwise -> GetProductsParametersQueryType'EnumOther val
      )

-- | Represents a response of the operation 'getProducts'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetProductsResponseError' is used.
data GetProductsResponse
  = -- | Means either no matching case available or a parse error
    GetProductsResponseError GHC.Base.String
  | -- | Successful response.
    GetProductsResponse200 GetProductsResponseBody200
  | -- | Error response.
    GetProductsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the data type for the schema GetProductsResponseBody200
data GetProductsResponseBody200
  = GetProductsResponseBody200
      { -- | data
        getProductsResponseBody200Data :: ([Product]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getProductsResponseBody200HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        getProductsResponseBody200Object :: GetProductsResponseBody200Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        -- * Must match pattern \'^\/v1\/products\'
        getProductsResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetProductsResponseBody200 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getProductsResponseBody200Data obj) : (Data.Aeson..=) "has_more" (getProductsResponseBody200HasMore obj) : (Data.Aeson..=) "object" (getProductsResponseBody200Object obj) : (Data.Aeson..=) "url" (getProductsResponseBody200Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getProductsResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (getProductsResponseBody200HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (getProductsResponseBody200Object obj) GHC.Base.<> (Data.Aeson..=) "url" (getProductsResponseBody200Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetProductsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetProductsResponseBody200" (\obj -> (((GHC.Base.pure GetProductsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema GetProductsResponseBody200Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data GetProductsResponseBody200Object'
  = GetProductsResponseBody200Object'EnumOther Data.Aeson.Types.Internal.Value
  | GetProductsResponseBody200Object'EnumTyped Data.Text.Internal.Text
  | GetProductsResponseBody200Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetProductsResponseBody200Object' where
  toJSON (GetProductsResponseBody200Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetProductsResponseBody200Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetProductsResponseBody200Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON GetProductsResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> GetProductsResponseBody200Object'EnumStringList
            | GHC.Base.otherwise -> GetProductsResponseBody200Object'EnumOther val
      )
