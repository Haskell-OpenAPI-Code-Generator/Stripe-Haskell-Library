{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postCustomersCustomerBankAccounts
module StripeAPI.Operations.PostCustomersCustomerBankAccounts where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/customers/{customer}/bank_accounts
--
-- \<p>When you create a new credit card, you must specify a customer or recipient on which to create it.\<\/p>
--
-- \<p>If the card’s owner has no default card, then the new card will become the default.
-- However, if the owner already has a default, then it will not change.
-- To change the default, you should \<a href=\"\/docs\/api\#update_customer\">update the customer\<\/a> to have a new \<code>default_source\<\/code>.\<\/p>
postCustomersCustomerBankAccounts ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | customer | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostCustomersCustomerBankAccountsRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostCustomersCustomerBankAccountsResponse)
postCustomersCustomerBankAccounts
  customer
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostCustomersCustomerBankAccountsResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostCustomersCustomerBankAccountsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              PaymentSource
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostCustomersCustomerBankAccountsResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/customers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel customer)) GHC.Base.++ "/bank_accounts"))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostCustomersCustomerBankAccountsRequestBody
  = PostCustomersCustomerBankAccountsRequestBody
      { -- | alipay_account: A token returned by [Stripe.js](https:\/\/stripe.com\/docs\/stripe.js) representing the user’s Alipay account details.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyAlipayAccount :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | bank_account: Either a token, like the ones returned by [Stripe.js](https:\/\/stripe.com\/docs\/stripe.js), or a dictionary containing a user\'s bank account details.
        postCustomersCustomerBankAccountsRequestBodyBankAccount :: (GHC.Maybe.Maybe PostCustomersCustomerBankAccountsRequestBodyBankAccount'Variants),
        -- | card: A token, like the ones returned by [Stripe.js](https:\/\/stripe.com\/docs\/stripe.js).
        postCustomersCustomerBankAccountsRequestBodyCard :: (GHC.Maybe.Maybe PostCustomersCustomerBankAccountsRequestBodyCard'Variants),
        -- | expand: Specifies which fields in the response should be expanded.
        postCustomersCustomerBankAccountsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
        postCustomersCustomerBankAccountsRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | source: Please refer to full [documentation](https:\/\/stripe.com\/docs\/api) instead.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodySource :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerBankAccountsRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("alipay_account" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyAlipayAccount obj : "bank_account" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount obj : "card" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard obj : "expand" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyExpand obj : "metadata" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyMetadata obj : "source" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodySource obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("alipay_account" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyAlipayAccount obj) GHC.Base.<> (("bank_account" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount obj) GHC.Base.<> (("card" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyExpand obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyMetadata obj) GHC.Base.<> ("source" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodySource obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerBankAccountsRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCustomersCustomerBankAccountsRequestBody" (\obj -> (((((GHC.Base.pure PostCustomersCustomerBankAccountsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source"))

-- | Create a new 'PostCustomersCustomerBankAccountsRequestBody' with all required fields.
mkPostCustomersCustomerBankAccountsRequestBody :: PostCustomersCustomerBankAccountsRequestBody
mkPostCustomersCustomerBankAccountsRequestBody =
  PostCustomersCustomerBankAccountsRequestBody
    { postCustomersCustomerBankAccountsRequestBodyAlipayAccount = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyBankAccount = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyExpand = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyMetadata = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodySource = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_account.anyOf@ in the specification.
data PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2
  = PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2
      { -- | account_holder_name
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | account_holder_type
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType :: (GHC.Maybe.Maybe PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'),
        -- | account_number
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountNumber :: Data.Text.Internal.Text,
        -- | country
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Country :: Data.Text.Internal.Text,
        -- | currency
        postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | routing_number
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2RoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2 where
  toJSON obj = Data.Aeson.Types.Internal.object ("account_holder_name" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderName obj : "account_holder_type" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType obj : "account_number" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountNumber obj : "country" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Country obj : "currency" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Currency obj : "routing_number" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2RoutingNumber obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account_holder_name" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderName obj) GHC.Base.<> (("account_holder_type" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType obj) GHC.Base.<> (("account_number" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountNumber obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Country obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Currency obj) GHC.Base.<> (("routing_number" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2RoutingNumber obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account")))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2" (\obj -> (((((GHC.Base.pure PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number"))

-- | Create a new 'PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2' with all required fields.
mkPostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2 ::
  -- | 'postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountNumber'
  Data.Text.Internal.Text ->
  -- | 'postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Country'
  Data.Text.Internal.Text ->
  PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2
mkPostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2 postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountNumber postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Country =
  PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2
    { postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderName = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountNumber = postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountNumber,
      postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Country = postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Country,
      postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2Currency = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2RoutingNumber = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_account.anyOf.properties.account_holder_type@ in the specification.
data PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumCompany
  | -- | Represents the JSON value @"individual"@
    PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumIndividual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType' where
  toJSON (PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Other val) = val
  toJSON (PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumCompany) = "company"
  toJSON (PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumIndividual) = "individual"

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "company" -> PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumCompany
            | val GHC.Classes.== "individual" -> PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'EnumIndividual
            | GHC.Base.otherwise -> PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2AccountHolderType'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_account.anyOf@ in the specification.
--
-- Either a token, like the ones returned by [Stripe.js](https:\/\/stripe.com\/docs\/stripe.js), or a dictionary containing a user\'s bank account details.
data PostCustomersCustomerBankAccountsRequestBodyBankAccount'Variants
  = PostCustomersCustomerBankAccountsRequestBodyBankAccount'Text Data.Text.Internal.Text
  | PostCustomersCustomerBankAccountsRequestBodyBankAccount'PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2 PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerBankAccountsRequestBodyBankAccount'Variants where
  toJSON (PostCustomersCustomerBankAccountsRequestBodyBankAccount'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostCustomersCustomerBankAccountsRequestBodyBankAccount'PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerBankAccountsRequestBodyBankAccount'Variants where
  parseJSON val = case (PostCustomersCustomerBankAccountsRequestBodyBankAccount'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostCustomersCustomerBankAccountsRequestBodyBankAccount'PostCustomersCustomerBankAccountsRequestBodyBankAccount'OneOf2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.card.anyOf@ in the specification.
data PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2
  = PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2
      { -- | address_city
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_country
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line1
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line2
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_state
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_zip
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | cvc
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Cvc :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | exp_month
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpMonth :: GHC.Types.Int,
        -- | exp_year
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpYear :: GHC.Types.Int,
        -- | metadata
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | name
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | number
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Number :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2 where
  toJSON obj = Data.Aeson.Types.Internal.object ("address_city" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressCity obj : "address_country" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressCountry obj : "address_line1" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressLine1 obj : "address_line2" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressLine2 obj : "address_state" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressState obj : "address_zip" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressZip obj : "cvc" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Cvc obj : "exp_month" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpYear obj : "metadata" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Metadata obj : "name" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Name obj : "number" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Number obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "card" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address_city" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressCity obj) GHC.Base.<> (("address_country" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressCountry obj) GHC.Base.<> (("address_line1" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressLine1 obj) GHC.Base.<> (("address_line2" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressLine2 obj) GHC.Base.<> (("address_state" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressState obj) GHC.Base.<> (("address_zip" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressZip obj) GHC.Base.<> (("cvc" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Cvc obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpYear obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Metadata obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Name obj) GHC.Base.<> (("number" Data.Aeson.Types.ToJSON..= postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Number obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "card")))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2" (\obj -> (((((((((((GHC.Base.pure PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "number"))

-- | Create a new 'PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2' with all required fields.
mkPostCustomersCustomerBankAccountsRequestBodyCard'OneOf2 ::
  -- | 'postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpMonth'
  GHC.Types.Int ->
  -- | 'postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpYear'
  GHC.Types.Int ->
  -- | 'postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Number'
  Data.Text.Internal.Text ->
  PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2
mkPostCustomersCustomerBankAccountsRequestBodyCard'OneOf2 postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpMonth postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpYear postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Number =
  PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2
    { postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressCity = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressCountry = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressLine1 = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressLine2 = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressState = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2AddressZip = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Cvc = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpMonth = postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpMonth,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpYear = postCustomersCustomerBankAccountsRequestBodyCard'OneOf2ExpYear,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Metadata = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Name = GHC.Maybe.Nothing,
      postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Number = postCustomersCustomerBankAccountsRequestBodyCard'OneOf2Number
    }

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.card.anyOf@ in the specification.
--
-- A token, like the ones returned by [Stripe.js](https:\/\/stripe.com\/docs\/stripe.js).
data PostCustomersCustomerBankAccountsRequestBodyCard'Variants
  = PostCustomersCustomerBankAccountsRequestBodyCard'Text Data.Text.Internal.Text
  | PostCustomersCustomerBankAccountsRequestBodyCard'PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2 PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerBankAccountsRequestBodyCard'Variants where
  toJSON (PostCustomersCustomerBankAccountsRequestBodyCard'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostCustomersCustomerBankAccountsRequestBodyCard'PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerBankAccountsRequestBodyCard'Variants where
  parseJSON val = case (PostCustomersCustomerBankAccountsRequestBodyCard'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostCustomersCustomerBankAccountsRequestBodyCard'PostCustomersCustomerBankAccountsRequestBodyCard'OneOf2 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'postCustomersCustomerBankAccounts'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostCustomersCustomerBankAccountsResponseError' is used.
data PostCustomersCustomerBankAccountsResponse
  = -- | Means either no matching case available or a parse error
    PostCustomersCustomerBankAccountsResponseError GHC.Base.String
  | -- | Successful response.
    PostCustomersCustomerBankAccountsResponse200 PaymentSource
  | -- | Error response.
    PostCustomersCustomerBankAccountsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
