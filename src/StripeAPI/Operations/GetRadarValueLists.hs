{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getRadarValueLists
module StripeAPI.Operations.GetRadarValueLists where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/radar/value_lists
--
-- \<p>Returns a list of \<code>ValueList\<\/code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\<\/p>
getRadarValueLists ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetRadarValueListsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetRadarValueListsResponse)
getRadarValueLists parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetRadarValueListsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetRadarValueListsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetRadarValueListsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetRadarValueListsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/radar/value_lists")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "alias") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getRadarValueListsParametersQueryAlias parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "contains") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getRadarValueListsParametersQueryContains parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getRadarValueListsParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getRadarValueListsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getRadarValueListsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getRadarValueListsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getRadarValueListsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the data type for the schema getRadarValueListsParameters
data GetRadarValueListsParameters
  = GetRadarValueListsParameters
      { -- | queryAlias: Represents the parameter named \'alias\'
        --
        -- The alias used to reference the value list when writing rules.
        --
        -- Constraints:
        --
        -- * Maximum length of 100
        getRadarValueListsParametersQueryAlias :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryContains: Represents the parameter named \'contains\'
        --
        -- A value contained within a value list - returns all value lists containing this value.
        --
        -- Constraints:
        --
        -- * Maximum length of 800
        getRadarValueListsParametersQueryContains :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryCreated: Represents the parameter named \'created\'
        getRadarValueListsParametersQueryCreated :: (GHC.Maybe.Maybe GetRadarValueListsParametersQueryCreated'Variants),
        -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getRadarValueListsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getRadarValueListsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getRadarValueListsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getRadarValueListsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetRadarValueListsParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "queryAlias" (getRadarValueListsParametersQueryAlias obj) : (Data.Aeson..=) "queryContains" (getRadarValueListsParametersQueryContains obj) : (Data.Aeson..=) "queryCreated" (getRadarValueListsParametersQueryCreated obj) : (Data.Aeson..=) "queryEnding_before" (getRadarValueListsParametersQueryEndingBefore obj) : (Data.Aeson..=) "queryExpand" (getRadarValueListsParametersQueryExpand obj) : (Data.Aeson..=) "queryLimit" (getRadarValueListsParametersQueryLimit obj) : (Data.Aeson..=) "queryStarting_after" (getRadarValueListsParametersQueryStartingAfter obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "queryAlias" (getRadarValueListsParametersQueryAlias obj) GHC.Base.<> ((Data.Aeson..=) "queryContains" (getRadarValueListsParametersQueryContains obj) GHC.Base.<> ((Data.Aeson..=) "queryCreated" (getRadarValueListsParametersQueryCreated obj) GHC.Base.<> ((Data.Aeson..=) "queryEnding_before" (getRadarValueListsParametersQueryEndingBefore obj) GHC.Base.<> ((Data.Aeson..=) "queryExpand" (getRadarValueListsParametersQueryExpand obj) GHC.Base.<> ((Data.Aeson..=) "queryLimit" (getRadarValueListsParametersQueryLimit obj) GHC.Base.<> (Data.Aeson..=) "queryStarting_after" (getRadarValueListsParametersQueryStartingAfter obj)))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetRadarValueListsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetRadarValueListsParameters" (\obj -> ((((((GHC.Base.pure GetRadarValueListsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryAlias")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryContains")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after"))

-- | Defines the data type for the schema getRadarValueListsParametersQueryCreated\'OneOf2
data GetRadarValueListsParametersQueryCreated'OneOf2
  = GetRadarValueListsParametersQueryCreated'OneOf2
      { -- | gt
        getRadarValueListsParametersQueryCreated'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getRadarValueListsParametersQueryCreated'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getRadarValueListsParametersQueryCreated'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getRadarValueListsParametersQueryCreated'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetRadarValueListsParametersQueryCreated'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getRadarValueListsParametersQueryCreated'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getRadarValueListsParametersQueryCreated'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getRadarValueListsParametersQueryCreated'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getRadarValueListsParametersQueryCreated'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getRadarValueListsParametersQueryCreated'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getRadarValueListsParametersQueryCreated'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getRadarValueListsParametersQueryCreated'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getRadarValueListsParametersQueryCreated'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetRadarValueListsParametersQueryCreated'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetRadarValueListsParametersQueryCreated'OneOf2" (\obj -> (((GHC.Base.pure GetRadarValueListsParametersQueryCreated'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getRadarValueListsParametersQueryCreated\'
--
-- Represents the parameter named \'created\'
data GetRadarValueListsParametersQueryCreated'Variants
  = GetRadarValueListsParametersQueryCreated'Int GHC.Types.Int
  | GetRadarValueListsParametersQueryCreated'GetRadarValueListsParametersQueryCreated'OneOf2 GetRadarValueListsParametersQueryCreated'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetRadarValueListsParametersQueryCreated'Variants where
  toJSON (GetRadarValueListsParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetRadarValueListsParametersQueryCreated'GetRadarValueListsParametersQueryCreated'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetRadarValueListsParametersQueryCreated'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetRadarValueListsParametersQueryCreated'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetRadarValueListsParametersQueryCreated'GetRadarValueListsParametersQueryCreated'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'getRadarValueLists'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetRadarValueListsResponseError' is used.
data GetRadarValueListsResponse
  = -- | Means either no matching case available or a parse error
    GetRadarValueListsResponseError GHC.Base.String
  | -- | Successful response.
    GetRadarValueListsResponse200 GetRadarValueListsResponseBody200
  | -- | Error response.
    GetRadarValueListsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the data type for the schema GetRadarValueListsResponseBody200
data GetRadarValueListsResponseBody200
  = GetRadarValueListsResponseBody200
      { -- | data
        getRadarValueListsResponseBody200Data :: ([Radar'valueList]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getRadarValueListsResponseBody200HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        getRadarValueListsResponseBody200Object :: GetRadarValueListsResponseBody200Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        -- * Must match pattern \'^\/v1\/radar\/value_lists\'
        getRadarValueListsResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetRadarValueListsResponseBody200 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getRadarValueListsResponseBody200Data obj) : (Data.Aeson..=) "has_more" (getRadarValueListsResponseBody200HasMore obj) : (Data.Aeson..=) "object" (getRadarValueListsResponseBody200Object obj) : (Data.Aeson..=) "url" (getRadarValueListsResponseBody200Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getRadarValueListsResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (getRadarValueListsResponseBody200HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (getRadarValueListsResponseBody200Object obj) GHC.Base.<> (Data.Aeson..=) "url" (getRadarValueListsResponseBody200Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetRadarValueListsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetRadarValueListsResponseBody200" (\obj -> (((GHC.Base.pure GetRadarValueListsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema GetRadarValueListsResponseBody200Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data GetRadarValueListsResponseBody200Object'
  = GetRadarValueListsResponseBody200Object'EnumOther Data.Aeson.Types.Internal.Value
  | GetRadarValueListsResponseBody200Object'EnumTyped Data.Text.Internal.Text
  | GetRadarValueListsResponseBody200Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetRadarValueListsResponseBody200Object' where
  toJSON (GetRadarValueListsResponseBody200Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetRadarValueListsResponseBody200Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetRadarValueListsResponseBody200Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON GetRadarValueListsResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> GetRadarValueListsResponseBody200Object'EnumStringList
            | GHC.Base.otherwise -> GetRadarValueListsResponseBody200Object'EnumOther val
      )
