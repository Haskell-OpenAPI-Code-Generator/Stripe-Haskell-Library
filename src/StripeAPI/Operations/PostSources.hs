{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSources
module StripeAPI.Operations.PostSources where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/sources
--
-- \<p>Creates a new source object.\<\/p>
postSources ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  GHC.Maybe.Maybe PostSourcesRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostSourcesResponse)
postSources body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostSourcesResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSourcesResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Source
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostSourcesResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/sources") GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostSourcesRequestBody = PostSourcesRequestBody
  { -- | amount: Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for \`single_use\` sources. Not supported for \`receiver\` type sources, where charge amount may not be specified until funds land.
    postSourcesRequestBodyAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/currencies) associated with the source. This is the currency for which the source will be chargeable once ready.
    postSourcesRequestBodyCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The \`Customer\` to whom the original source is attached to. Must be set when the original source is not a \`Source\` (e.g., \`Card\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postSourcesRequestBodyCustomer :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | expand: Specifies which fields in the response should be expanded.
    postSourcesRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | flow: The authentication \`flow\` of the source to create. \`flow\` is one of \`redirect\`, \`receiver\`, \`code_verification\`, \`none\`. It is generally inferred unless a type supports multiple flows.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyFlow :: (GHC.Maybe.Maybe PostSourcesRequestBodyFlow'),
    -- | mandate: Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
    postSourcesRequestBodyMandate :: (GHC.Maybe.Maybe PostSourcesRequestBodyMandate'),
    -- | metadata
    postSourcesRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | original_source: The source to share.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyOriginalSource :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | owner: Information about the owner of the payment instrument that may be used or required by particular source types.
    postSourcesRequestBodyOwner :: (GHC.Maybe.Maybe PostSourcesRequestBodyOwner'),
    -- | receiver: Optional parameters for the receiver flow. Can be set only if the source is a receiver (\`flow\` is \`receiver\`).
    postSourcesRequestBodyReceiver :: (GHC.Maybe.Maybe PostSourcesRequestBodyReceiver'),
    -- | redirect: Parameters required for the redirect flow. Required if the source is authenticated by a redirect (\`flow\` is \`redirect\`).
    postSourcesRequestBodyRedirect :: (GHC.Maybe.Maybe PostSourcesRequestBodyRedirect'),
    -- | source_order: Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
    postSourcesRequestBodySourceOrder :: (GHC.Maybe.Maybe PostSourcesRequestBodySourceOrder'),
    -- | statement_descriptor: An arbitrary string to be displayed on your customer\'s statement. As an example, if your website is \`RunClub\` and the item you\'re charging for is a race ticket, you may want to specify a \`statement_descriptor\` of \`RunClub 5K race ticket.\` While many payment types will display this information, some may not display it at all.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyStatementDescriptor :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | token: An optional token used to create the source. When passed, token properties will override source parameters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyToken :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | type: The \`type\` of the source to create. Required unless \`customer\` and \`original_source\` are specified (see the [Cloning card Sources](https:\/\/stripe.com\/docs\/sources\/connect\#cloning-card-sources) guide)
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | usage
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyUsage :: (GHC.Maybe.Maybe PostSourcesRequestBodyUsage')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyAmount obj : "currency" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyCurrency obj : "customer" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyCustomer obj : "expand" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyExpand obj : "flow" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyFlow obj : "mandate" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate obj : "metadata" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMetadata obj : "original_source" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOriginalSource obj : "owner" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner obj : "receiver" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyReceiver obj : "redirect" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyRedirect obj : "source_order" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder obj : "statement_descriptor" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyStatementDescriptor obj : "token" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyToken obj : "type" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyType obj : "usage" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyUsage obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyAmount obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyCurrency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyCustomer obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyExpand obj) GHC.Base.<> (("flow" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyFlow obj) GHC.Base.<> (("mandate" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMetadata obj) GHC.Base.<> (("original_source" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOriginalSource obj) GHC.Base.<> (("owner" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner obj) GHC.Base.<> (("receiver" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyReceiver obj) GHC.Base.<> (("redirect" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyRedirect obj) GHC.Base.<> (("source_order" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder obj) GHC.Base.<> (("statement_descriptor" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyStatementDescriptor obj) GHC.Base.<> (("token" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyToken obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyType obj) GHC.Base.<> ("usage" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyUsage obj))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBody" (\obj -> (((((((((((((((GHC.Base.pure PostSourcesRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mandate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "original_source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "token")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage"))

-- | Create a new 'PostSourcesRequestBody' with all required fields.
mkPostSourcesRequestBody :: PostSourcesRequestBody
mkPostSourcesRequestBody =
  PostSourcesRequestBody
    { postSourcesRequestBodyAmount = GHC.Maybe.Nothing,
      postSourcesRequestBodyCurrency = GHC.Maybe.Nothing,
      postSourcesRequestBodyCustomer = GHC.Maybe.Nothing,
      postSourcesRequestBodyExpand = GHC.Maybe.Nothing,
      postSourcesRequestBodyFlow = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate = GHC.Maybe.Nothing,
      postSourcesRequestBodyMetadata = GHC.Maybe.Nothing,
      postSourcesRequestBodyOriginalSource = GHC.Maybe.Nothing,
      postSourcesRequestBodyOwner = GHC.Maybe.Nothing,
      postSourcesRequestBodyReceiver = GHC.Maybe.Nothing,
      postSourcesRequestBodyRedirect = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder = GHC.Maybe.Nothing,
      postSourcesRequestBodyStatementDescriptor = GHC.Maybe.Nothing,
      postSourcesRequestBodyToken = GHC.Maybe.Nothing,
      postSourcesRequestBodyType = GHC.Maybe.Nothing,
      postSourcesRequestBodyUsage = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.flow@ in the specification.
--
-- The authentication \`flow\` of the source to create. \`flow\` is one of \`redirect\`, \`receiver\`, \`code_verification\`, \`none\`. It is generally inferred unless a type supports multiple flows.
data PostSourcesRequestBodyFlow'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesRequestBodyFlow'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesRequestBodyFlow'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"code_verification"@
    PostSourcesRequestBodyFlow'EnumCodeVerification
  | -- | Represents the JSON value @"none"@
    PostSourcesRequestBodyFlow'EnumNone
  | -- | Represents the JSON value @"receiver"@
    PostSourcesRequestBodyFlow'EnumReceiver
  | -- | Represents the JSON value @"redirect"@
    PostSourcesRequestBodyFlow'EnumRedirect
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyFlow' where
  toJSON (PostSourcesRequestBodyFlow'Other val) = val
  toJSON (PostSourcesRequestBodyFlow'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesRequestBodyFlow'EnumCodeVerification) = "code_verification"
  toJSON (PostSourcesRequestBodyFlow'EnumNone) = "none"
  toJSON (PostSourcesRequestBodyFlow'EnumReceiver) = "receiver"
  toJSON (PostSourcesRequestBodyFlow'EnumRedirect) = "redirect"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyFlow' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "code_verification" -> PostSourcesRequestBodyFlow'EnumCodeVerification
            | val GHC.Classes.== "none" -> PostSourcesRequestBodyFlow'EnumNone
            | val GHC.Classes.== "receiver" -> PostSourcesRequestBodyFlow'EnumReceiver
            | val GHC.Classes.== "redirect" -> PostSourcesRequestBodyFlow'EnumRedirect
            | GHC.Base.otherwise -> PostSourcesRequestBodyFlow'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate@ in the specification.
--
-- Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
data PostSourcesRequestBodyMandate' = PostSourcesRequestBodyMandate'
  { -- | acceptance
    postSourcesRequestBodyMandate'Acceptance :: (GHC.Maybe.Maybe PostSourcesRequestBodyMandate'Acceptance'),
    -- | amount
    postSourcesRequestBodyMandate'Amount :: (GHC.Maybe.Maybe PostSourcesRequestBodyMandate'Amount'Variants),
    -- | currency
    postSourcesRequestBodyMandate'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | interval
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyMandate'Interval :: (GHC.Maybe.Maybe PostSourcesRequestBodyMandate'Interval'),
    -- | notification_method
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyMandate'NotificationMethod :: (GHC.Maybe.Maybe PostSourcesRequestBodyMandate'NotificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyMandate' where
  toJSON obj = Data.Aeson.Types.Internal.object ("acceptance" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance obj : "amount" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Amount obj : "currency" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Currency obj : "interval" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Interval obj : "notification_method" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'NotificationMethod obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("acceptance" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance obj) GHC.Base.<> (("amount" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Amount obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Currency obj) GHC.Base.<> (("interval" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Interval obj) GHC.Base.<> ("notification_method" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'NotificationMethod obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyMandate' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodyMandate'" (\obj -> ((((GHC.Base.pure PostSourcesRequestBodyMandate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "notification_method"))

-- | Create a new 'PostSourcesRequestBodyMandate'' with all required fields.
mkPostSourcesRequestBodyMandate' :: PostSourcesRequestBodyMandate'
mkPostSourcesRequestBodyMandate' =
  PostSourcesRequestBodyMandate'
    { postSourcesRequestBodyMandate'Acceptance = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Amount = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Currency = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Interval = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'NotificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance@ in the specification.
data PostSourcesRequestBodyMandate'Acceptance' = PostSourcesRequestBodyMandate'Acceptance'
  { -- | date
    postSourcesRequestBodyMandate'Acceptance'Date :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | ip
    postSourcesRequestBodyMandate'Acceptance'Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | offline
    postSourcesRequestBodyMandate'Acceptance'Offline :: (GHC.Maybe.Maybe PostSourcesRequestBodyMandate'Acceptance'Offline'),
    -- | online
    postSourcesRequestBodyMandate'Acceptance'Online :: (GHC.Maybe.Maybe PostSourcesRequestBodyMandate'Acceptance'Online'),
    -- | status
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyMandate'Acceptance'Status :: PostSourcesRequestBodyMandate'Acceptance'Status',
    -- | type
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyMandate'Acceptance'Type :: (GHC.Maybe.Maybe PostSourcesRequestBodyMandate'Acceptance'Type'),
    -- | user_agent
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyMandate'Acceptance'UserAgent :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyMandate'Acceptance' where
  toJSON obj = Data.Aeson.Types.Internal.object ("date" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Date obj : "ip" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Ip obj : "offline" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Offline obj : "online" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Online obj : "status" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Status obj : "type" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Type obj : "user_agent" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'UserAgent obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("date" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Date obj) GHC.Base.<> (("ip" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Ip obj) GHC.Base.<> (("offline" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Offline obj) GHC.Base.<> (("online" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Online obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Status obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Type obj) GHC.Base.<> ("user_agent" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'UserAgent obj)))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyMandate'Acceptance' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodyMandate'Acceptance'" (\obj -> ((((((GHC.Base.pure PostSourcesRequestBodyMandate'Acceptance' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "offline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "online")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "user_agent"))

-- | Create a new 'PostSourcesRequestBodyMandate'Acceptance'' with all required fields.
mkPostSourcesRequestBodyMandate'Acceptance' ::
  -- | 'postSourcesRequestBodyMandate'Acceptance'Status'
  PostSourcesRequestBodyMandate'Acceptance'Status' ->
  PostSourcesRequestBodyMandate'Acceptance'
mkPostSourcesRequestBodyMandate'Acceptance' postSourcesRequestBodyMandate'Acceptance'Status =
  PostSourcesRequestBodyMandate'Acceptance'
    { postSourcesRequestBodyMandate'Acceptance'Date = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Acceptance'Ip = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Acceptance'Offline = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Acceptance'Online = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Acceptance'Status = postSourcesRequestBodyMandate'Acceptance'Status,
      postSourcesRequestBodyMandate'Acceptance'Type = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Acceptance'UserAgent = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance.properties.offline@ in the specification.
data PostSourcesRequestBodyMandate'Acceptance'Offline' = PostSourcesRequestBodyMandate'Acceptance'Offline'
  { -- | contact_email
    postSourcesRequestBodyMandate'Acceptance'Offline'ContactEmail :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyMandate'Acceptance'Offline' where
  toJSON obj = Data.Aeson.Types.Internal.object ("contact_email" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Offline'ContactEmail obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("contact_email" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Offline'ContactEmail obj)

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyMandate'Acceptance'Offline' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodyMandate'Acceptance'Offline'" (\obj -> GHC.Base.pure PostSourcesRequestBodyMandate'Acceptance'Offline' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "contact_email"))

-- | Create a new 'PostSourcesRequestBodyMandate'Acceptance'Offline'' with all required fields.
mkPostSourcesRequestBodyMandate'Acceptance'Offline' ::
  -- | 'postSourcesRequestBodyMandate'Acceptance'Offline'ContactEmail'
  Data.Text.Internal.Text ->
  PostSourcesRequestBodyMandate'Acceptance'Offline'
mkPostSourcesRequestBodyMandate'Acceptance'Offline' postSourcesRequestBodyMandate'Acceptance'Offline'ContactEmail = PostSourcesRequestBodyMandate'Acceptance'Offline' {postSourcesRequestBodyMandate'Acceptance'Offline'ContactEmail = postSourcesRequestBodyMandate'Acceptance'Offline'ContactEmail}

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance.properties.online@ in the specification.
data PostSourcesRequestBodyMandate'Acceptance'Online' = PostSourcesRequestBodyMandate'Acceptance'Online'
  { -- | date
    postSourcesRequestBodyMandate'Acceptance'Online'Date :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | ip
    postSourcesRequestBodyMandate'Acceptance'Online'Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_agent
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyMandate'Acceptance'Online'UserAgent :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyMandate'Acceptance'Online' where
  toJSON obj = Data.Aeson.Types.Internal.object ("date" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Online'Date obj : "ip" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Online'Ip obj : "user_agent" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Online'UserAgent obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("date" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Online'Date obj) GHC.Base.<> (("ip" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Online'Ip obj) GHC.Base.<> ("user_agent" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyMandate'Acceptance'Online'UserAgent obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyMandate'Acceptance'Online' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodyMandate'Acceptance'Online'" (\obj -> ((GHC.Base.pure PostSourcesRequestBodyMandate'Acceptance'Online' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "user_agent"))

-- | Create a new 'PostSourcesRequestBodyMandate'Acceptance'Online'' with all required fields.
mkPostSourcesRequestBodyMandate'Acceptance'Online' :: PostSourcesRequestBodyMandate'Acceptance'Online'
mkPostSourcesRequestBodyMandate'Acceptance'Online' =
  PostSourcesRequestBodyMandate'Acceptance'Online'
    { postSourcesRequestBodyMandate'Acceptance'Online'Date = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Acceptance'Online'Ip = GHC.Maybe.Nothing,
      postSourcesRequestBodyMandate'Acceptance'Online'UserAgent = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance.properties.status@ in the specification.
data PostSourcesRequestBodyMandate'Acceptance'Status'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesRequestBodyMandate'Acceptance'Status'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesRequestBodyMandate'Acceptance'Status'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"accepted"@
    PostSourcesRequestBodyMandate'Acceptance'Status'EnumAccepted
  | -- | Represents the JSON value @"pending"@
    PostSourcesRequestBodyMandate'Acceptance'Status'EnumPending
  | -- | Represents the JSON value @"refused"@
    PostSourcesRequestBodyMandate'Acceptance'Status'EnumRefused
  | -- | Represents the JSON value @"revoked"@
    PostSourcesRequestBodyMandate'Acceptance'Status'EnumRevoked
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyMandate'Acceptance'Status' where
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Status'Other val) = val
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Status'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Status'EnumAccepted) = "accepted"
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Status'EnumPending) = "pending"
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Status'EnumRefused) = "refused"
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Status'EnumRevoked) = "revoked"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyMandate'Acceptance'Status' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "accepted" -> PostSourcesRequestBodyMandate'Acceptance'Status'EnumAccepted
            | val GHC.Classes.== "pending" -> PostSourcesRequestBodyMandate'Acceptance'Status'EnumPending
            | val GHC.Classes.== "refused" -> PostSourcesRequestBodyMandate'Acceptance'Status'EnumRefused
            | val GHC.Classes.== "revoked" -> PostSourcesRequestBodyMandate'Acceptance'Status'EnumRevoked
            | GHC.Base.otherwise -> PostSourcesRequestBodyMandate'Acceptance'Status'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance.properties.type@ in the specification.
data PostSourcesRequestBodyMandate'Acceptance'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesRequestBodyMandate'Acceptance'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesRequestBodyMandate'Acceptance'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"offline"@
    PostSourcesRequestBodyMandate'Acceptance'Type'EnumOffline
  | -- | Represents the JSON value @"online"@
    PostSourcesRequestBodyMandate'Acceptance'Type'EnumOnline
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyMandate'Acceptance'Type' where
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Type'Other val) = val
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Type'EnumOffline) = "offline"
  toJSON (PostSourcesRequestBodyMandate'Acceptance'Type'EnumOnline) = "online"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyMandate'Acceptance'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "offline" -> PostSourcesRequestBodyMandate'Acceptance'Type'EnumOffline
            | val GHC.Classes.== "online" -> PostSourcesRequestBodyMandate'Acceptance'Type'EnumOnline
            | GHC.Base.otherwise -> PostSourcesRequestBodyMandate'Acceptance'Type'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.amount.anyOf@ in the specification.
data PostSourcesRequestBodyMandate'Amount'Variants
  = -- | Represents the JSON value @""@
    PostSourcesRequestBodyMandate'Amount'EmptyString
  | PostSourcesRequestBodyMandate'Amount'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyMandate'Amount'Variants where
  toJSON (PostSourcesRequestBodyMandate'Amount'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostSourcesRequestBodyMandate'Amount'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyMandate'Amount'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostSourcesRequestBodyMandate'Amount'EmptyString
        | GHC.Base.otherwise -> case (PostSourcesRequestBodyMandate'Amount'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.interval@ in the specification.
data PostSourcesRequestBodyMandate'Interval'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesRequestBodyMandate'Interval'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesRequestBodyMandate'Interval'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"one_time"@
    PostSourcesRequestBodyMandate'Interval'EnumOneTime
  | -- | Represents the JSON value @"scheduled"@
    PostSourcesRequestBodyMandate'Interval'EnumScheduled
  | -- | Represents the JSON value @"variable"@
    PostSourcesRequestBodyMandate'Interval'EnumVariable
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyMandate'Interval' where
  toJSON (PostSourcesRequestBodyMandate'Interval'Other val) = val
  toJSON (PostSourcesRequestBodyMandate'Interval'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesRequestBodyMandate'Interval'EnumOneTime) = "one_time"
  toJSON (PostSourcesRequestBodyMandate'Interval'EnumScheduled) = "scheduled"
  toJSON (PostSourcesRequestBodyMandate'Interval'EnumVariable) = "variable"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyMandate'Interval' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "one_time" -> PostSourcesRequestBodyMandate'Interval'EnumOneTime
            | val GHC.Classes.== "scheduled" -> PostSourcesRequestBodyMandate'Interval'EnumScheduled
            | val GHC.Classes.== "variable" -> PostSourcesRequestBodyMandate'Interval'EnumVariable
            | GHC.Base.otherwise -> PostSourcesRequestBodyMandate'Interval'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.notification_method@ in the specification.
data PostSourcesRequestBodyMandate'NotificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesRequestBodyMandate'NotificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesRequestBodyMandate'NotificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"deprecated_none"@
    PostSourcesRequestBodyMandate'NotificationMethod'EnumDeprecatedNone
  | -- | Represents the JSON value @"email"@
    PostSourcesRequestBodyMandate'NotificationMethod'EnumEmail
  | -- | Represents the JSON value @"manual"@
    PostSourcesRequestBodyMandate'NotificationMethod'EnumManual
  | -- | Represents the JSON value @"none"@
    PostSourcesRequestBodyMandate'NotificationMethod'EnumNone
  | -- | Represents the JSON value @"stripe_email"@
    PostSourcesRequestBodyMandate'NotificationMethod'EnumStripeEmail
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyMandate'NotificationMethod' where
  toJSON (PostSourcesRequestBodyMandate'NotificationMethod'Other val) = val
  toJSON (PostSourcesRequestBodyMandate'NotificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesRequestBodyMandate'NotificationMethod'EnumDeprecatedNone) = "deprecated_none"
  toJSON (PostSourcesRequestBodyMandate'NotificationMethod'EnumEmail) = "email"
  toJSON (PostSourcesRequestBodyMandate'NotificationMethod'EnumManual) = "manual"
  toJSON (PostSourcesRequestBodyMandate'NotificationMethod'EnumNone) = "none"
  toJSON (PostSourcesRequestBodyMandate'NotificationMethod'EnumStripeEmail) = "stripe_email"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyMandate'NotificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "deprecated_none" -> PostSourcesRequestBodyMandate'NotificationMethod'EnumDeprecatedNone
            | val GHC.Classes.== "email" -> PostSourcesRequestBodyMandate'NotificationMethod'EnumEmail
            | val GHC.Classes.== "manual" -> PostSourcesRequestBodyMandate'NotificationMethod'EnumManual
            | val GHC.Classes.== "none" -> PostSourcesRequestBodyMandate'NotificationMethod'EnumNone
            | val GHC.Classes.== "stripe_email" -> PostSourcesRequestBodyMandate'NotificationMethod'EnumStripeEmail
            | GHC.Base.otherwise -> PostSourcesRequestBodyMandate'NotificationMethod'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.owner@ in the specification.
--
-- Information about the owner of the payment instrument that may be used or required by particular source types.
data PostSourcesRequestBodyOwner' = PostSourcesRequestBodyOwner'
  { -- | address
    postSourcesRequestBodyOwner'Address :: (GHC.Maybe.Maybe PostSourcesRequestBodyOwner'Address'),
    -- | email
    postSourcesRequestBodyOwner'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyOwner'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyOwner'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyOwner' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address obj : "email" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Email obj : "name" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Name obj : "phone" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Phone obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Email obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Name obj) GHC.Base.<> ("phone" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Phone obj))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyOwner' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodyOwner'" (\obj -> (((GHC.Base.pure PostSourcesRequestBodyOwner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone"))

-- | Create a new 'PostSourcesRequestBodyOwner'' with all required fields.
mkPostSourcesRequestBodyOwner' :: PostSourcesRequestBodyOwner'
mkPostSourcesRequestBodyOwner' =
  PostSourcesRequestBodyOwner'
    { postSourcesRequestBodyOwner'Address = GHC.Maybe.Nothing,
      postSourcesRequestBodyOwner'Email = GHC.Maybe.Nothing,
      postSourcesRequestBodyOwner'Name = GHC.Maybe.Nothing,
      postSourcesRequestBodyOwner'Phone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.owner.properties.address@ in the specification.
data PostSourcesRequestBodyOwner'Address' = PostSourcesRequestBodyOwner'Address'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyOwner'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyOwner'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyOwner'Address'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyOwner'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyOwner'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyOwner'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyOwner'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'City obj : "country" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'Country obj : "line1" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyOwner'Address'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyOwner'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodyOwner'Address'" (\obj -> (((((GHC.Base.pure PostSourcesRequestBodyOwner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'PostSourcesRequestBodyOwner'Address'' with all required fields.
mkPostSourcesRequestBodyOwner'Address' :: PostSourcesRequestBodyOwner'Address'
mkPostSourcesRequestBodyOwner'Address' =
  PostSourcesRequestBodyOwner'Address'
    { postSourcesRequestBodyOwner'Address'City = GHC.Maybe.Nothing,
      postSourcesRequestBodyOwner'Address'Country = GHC.Maybe.Nothing,
      postSourcesRequestBodyOwner'Address'Line1 = GHC.Maybe.Nothing,
      postSourcesRequestBodyOwner'Address'Line2 = GHC.Maybe.Nothing,
      postSourcesRequestBodyOwner'Address'PostalCode = GHC.Maybe.Nothing,
      postSourcesRequestBodyOwner'Address'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.receiver@ in the specification.
--
-- Optional parameters for the receiver flow. Can be set only if the source is a receiver (\`flow\` is \`receiver\`).
data PostSourcesRequestBodyReceiver' = PostSourcesRequestBodyReceiver'
  { -- | refund_attributes_method
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodyReceiver'RefundAttributesMethod :: (GHC.Maybe.Maybe PostSourcesRequestBodyReceiver'RefundAttributesMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyReceiver' where
  toJSON obj = Data.Aeson.Types.Internal.object ("refund_attributes_method" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyReceiver'RefundAttributesMethod obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("refund_attributes_method" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyReceiver'RefundAttributesMethod obj)

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyReceiver' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodyReceiver'" (\obj -> GHC.Base.pure PostSourcesRequestBodyReceiver' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_attributes_method"))

-- | Create a new 'PostSourcesRequestBodyReceiver'' with all required fields.
mkPostSourcesRequestBodyReceiver' :: PostSourcesRequestBodyReceiver'
mkPostSourcesRequestBodyReceiver' = PostSourcesRequestBodyReceiver' {postSourcesRequestBodyReceiver'RefundAttributesMethod = GHC.Maybe.Nothing}

-- | Defines the enum schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.receiver.properties.refund_attributes_method@ in the specification.
data PostSourcesRequestBodyReceiver'RefundAttributesMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesRequestBodyReceiver'RefundAttributesMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesRequestBodyReceiver'RefundAttributesMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"email"@
    PostSourcesRequestBodyReceiver'RefundAttributesMethod'EnumEmail
  | -- | Represents the JSON value @"manual"@
    PostSourcesRequestBodyReceiver'RefundAttributesMethod'EnumManual
  | -- | Represents the JSON value @"none"@
    PostSourcesRequestBodyReceiver'RefundAttributesMethod'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyReceiver'RefundAttributesMethod' where
  toJSON (PostSourcesRequestBodyReceiver'RefundAttributesMethod'Other val) = val
  toJSON (PostSourcesRequestBodyReceiver'RefundAttributesMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesRequestBodyReceiver'RefundAttributesMethod'EnumEmail) = "email"
  toJSON (PostSourcesRequestBodyReceiver'RefundAttributesMethod'EnumManual) = "manual"
  toJSON (PostSourcesRequestBodyReceiver'RefundAttributesMethod'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyReceiver'RefundAttributesMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "email" -> PostSourcesRequestBodyReceiver'RefundAttributesMethod'EnumEmail
            | val GHC.Classes.== "manual" -> PostSourcesRequestBodyReceiver'RefundAttributesMethod'EnumManual
            | val GHC.Classes.== "none" -> PostSourcesRequestBodyReceiver'RefundAttributesMethod'EnumNone
            | GHC.Base.otherwise -> PostSourcesRequestBodyReceiver'RefundAttributesMethod'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.redirect@ in the specification.
--
-- Parameters required for the redirect flow. Required if the source is authenticated by a redirect (\`flow\` is \`redirect\`).
data PostSourcesRequestBodyRedirect' = PostSourcesRequestBodyRedirect'
  { -- | return_url
    postSourcesRequestBodyRedirect'ReturnUrl :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyRedirect' where
  toJSON obj = Data.Aeson.Types.Internal.object ("return_url" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyRedirect'ReturnUrl obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("return_url" Data.Aeson.Types.ToJSON..= postSourcesRequestBodyRedirect'ReturnUrl obj)

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyRedirect' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodyRedirect'" (\obj -> GHC.Base.pure PostSourcesRequestBodyRedirect' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "return_url"))

-- | Create a new 'PostSourcesRequestBodyRedirect'' with all required fields.
mkPostSourcesRequestBodyRedirect' ::
  -- | 'postSourcesRequestBodyRedirect'ReturnUrl'
  Data.Text.Internal.Text ->
  PostSourcesRequestBodyRedirect'
mkPostSourcesRequestBodyRedirect' postSourcesRequestBodyRedirect'ReturnUrl = PostSourcesRequestBodyRedirect' {postSourcesRequestBodyRedirect'ReturnUrl = postSourcesRequestBodyRedirect'ReturnUrl}

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order@ in the specification.
--
-- Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
data PostSourcesRequestBodySourceOrder' = PostSourcesRequestBodySourceOrder'
  { -- | items
    postSourcesRequestBodySourceOrder'Items :: (GHC.Maybe.Maybe ([PostSourcesRequestBodySourceOrder'Items'])),
    -- | shipping
    postSourcesRequestBodySourceOrder'Shipping :: (GHC.Maybe.Maybe PostSourcesRequestBodySourceOrder'Shipping')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodySourceOrder' where
  toJSON obj = Data.Aeson.Types.Internal.object ("items" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items obj : "shipping" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("items" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items obj) GHC.Base.<> ("shipping" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodySourceOrder' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodySourceOrder'" (\obj -> (GHC.Base.pure PostSourcesRequestBodySourceOrder' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping"))

-- | Create a new 'PostSourcesRequestBodySourceOrder'' with all required fields.
mkPostSourcesRequestBodySourceOrder' :: PostSourcesRequestBodySourceOrder'
mkPostSourcesRequestBodySourceOrder' =
  PostSourcesRequestBodySourceOrder'
    { postSourcesRequestBodySourceOrder'Items = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Shipping = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order.properties.items.items@ in the specification.
data PostSourcesRequestBodySourceOrder'Items' = PostSourcesRequestBodySourceOrder'Items'
  { -- | amount
    postSourcesRequestBodySourceOrder'Items'Amount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency
    postSourcesRequestBodySourceOrder'Items'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | description
    --
    -- Constraints:
    --
    -- * Maximum length of 1000
    postSourcesRequestBodySourceOrder'Items'Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | parent
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Items'Parent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | quantity
    postSourcesRequestBodySourceOrder'Items'Quantity :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | type
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Items'Type :: (GHC.Maybe.Maybe PostSourcesRequestBodySourceOrder'Items'Type')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodySourceOrder'Items' where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Amount obj : "currency" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Currency obj : "description" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Description obj : "parent" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Parent obj : "quantity" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Quantity obj : "type" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Type obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Amount obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Currency obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Description obj) GHC.Base.<> (("parent" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Parent obj) GHC.Base.<> (("quantity" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Quantity obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Items'Type obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodySourceOrder'Items' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodySourceOrder'Items'" (\obj -> (((((GHC.Base.pure PostSourcesRequestBodySourceOrder'Items' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))

-- | Create a new 'PostSourcesRequestBodySourceOrder'Items'' with all required fields.
mkPostSourcesRequestBodySourceOrder'Items' :: PostSourcesRequestBodySourceOrder'Items'
mkPostSourcesRequestBodySourceOrder'Items' =
  PostSourcesRequestBodySourceOrder'Items'
    { postSourcesRequestBodySourceOrder'Items'Amount = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Items'Currency = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Items'Description = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Items'Parent = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Items'Quantity = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Items'Type = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order.properties.items.items.properties.type@ in the specification.
data PostSourcesRequestBodySourceOrder'Items'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesRequestBodySourceOrder'Items'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesRequestBodySourceOrder'Items'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"discount"@
    PostSourcesRequestBodySourceOrder'Items'Type'EnumDiscount
  | -- | Represents the JSON value @"shipping"@
    PostSourcesRequestBodySourceOrder'Items'Type'EnumShipping
  | -- | Represents the JSON value @"sku"@
    PostSourcesRequestBodySourceOrder'Items'Type'EnumSku
  | -- | Represents the JSON value @"tax"@
    PostSourcesRequestBodySourceOrder'Items'Type'EnumTax
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodySourceOrder'Items'Type' where
  toJSON (PostSourcesRequestBodySourceOrder'Items'Type'Other val) = val
  toJSON (PostSourcesRequestBodySourceOrder'Items'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesRequestBodySourceOrder'Items'Type'EnumDiscount) = "discount"
  toJSON (PostSourcesRequestBodySourceOrder'Items'Type'EnumShipping) = "shipping"
  toJSON (PostSourcesRequestBodySourceOrder'Items'Type'EnumSku) = "sku"
  toJSON (PostSourcesRequestBodySourceOrder'Items'Type'EnumTax) = "tax"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodySourceOrder'Items'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "discount" -> PostSourcesRequestBodySourceOrder'Items'Type'EnumDiscount
            | val GHC.Classes.== "shipping" -> PostSourcesRequestBodySourceOrder'Items'Type'EnumShipping
            | val GHC.Classes.== "sku" -> PostSourcesRequestBodySourceOrder'Items'Type'EnumSku
            | val GHC.Classes.== "tax" -> PostSourcesRequestBodySourceOrder'Items'Type'EnumTax
            | GHC.Base.otherwise -> PostSourcesRequestBodySourceOrder'Items'Type'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order.properties.shipping@ in the specification.
data PostSourcesRequestBodySourceOrder'Shipping' = PostSourcesRequestBodySourceOrder'Shipping'
  { -- | address
    postSourcesRequestBodySourceOrder'Shipping'Address :: PostSourcesRequestBodySourceOrder'Shipping'Address',
    -- | carrier
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'Carrier :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tracking_number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'TrackingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodySourceOrder'Shipping' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address obj : "carrier" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Carrier obj : "name" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Name obj : "phone" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Phone obj : "tracking_number" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'TrackingNumber obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address obj) GHC.Base.<> (("carrier" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Carrier obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Name obj) GHC.Base.<> (("phone" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Phone obj) GHC.Base.<> ("tracking_number" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'TrackingNumber obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodySourceOrder'Shipping' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodySourceOrder'Shipping'" (\obj -> ((((GHC.Base.pure PostSourcesRequestBodySourceOrder'Shipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number"))

-- | Create a new 'PostSourcesRequestBodySourceOrder'Shipping'' with all required fields.
mkPostSourcesRequestBodySourceOrder'Shipping' ::
  -- | 'postSourcesRequestBodySourceOrder'Shipping'Address'
  PostSourcesRequestBodySourceOrder'Shipping'Address' ->
  PostSourcesRequestBodySourceOrder'Shipping'
mkPostSourcesRequestBodySourceOrder'Shipping' postSourcesRequestBodySourceOrder'Shipping'Address =
  PostSourcesRequestBodySourceOrder'Shipping'
    { postSourcesRequestBodySourceOrder'Shipping'Address = postSourcesRequestBodySourceOrder'Shipping'Address,
      postSourcesRequestBodySourceOrder'Shipping'Carrier = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Shipping'Name = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Shipping'Phone = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Shipping'TrackingNumber = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order.properties.shipping.properties.address@ in the specification.
data PostSourcesRequestBodySourceOrder'Shipping'Address' = PostSourcesRequestBodySourceOrder'Shipping'Address'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'Address'Line1 :: Data.Text.Internal.Text,
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesRequestBodySourceOrder'Shipping'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodySourceOrder'Shipping'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'City obj : "country" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'Country obj : "line1" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= postSourcesRequestBodySourceOrder'Shipping'Address'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodySourceOrder'Shipping'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesRequestBodySourceOrder'Shipping'Address'" (\obj -> (((((GHC.Base.pure PostSourcesRequestBodySourceOrder'Shipping'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'PostSourcesRequestBodySourceOrder'Shipping'Address'' with all required fields.
mkPostSourcesRequestBodySourceOrder'Shipping'Address' ::
  -- | 'postSourcesRequestBodySourceOrder'Shipping'Address'Line1'
  Data.Text.Internal.Text ->
  PostSourcesRequestBodySourceOrder'Shipping'Address'
mkPostSourcesRequestBodySourceOrder'Shipping'Address' postSourcesRequestBodySourceOrder'Shipping'Address'Line1 =
  PostSourcesRequestBodySourceOrder'Shipping'Address'
    { postSourcesRequestBodySourceOrder'Shipping'Address'City = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Shipping'Address'Country = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Shipping'Address'Line1 = postSourcesRequestBodySourceOrder'Shipping'Address'Line1,
      postSourcesRequestBodySourceOrder'Shipping'Address'Line2 = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Shipping'Address'PostalCode = GHC.Maybe.Nothing,
      postSourcesRequestBodySourceOrder'Shipping'Address'State = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/sources.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.usage@ in the specification.
data PostSourcesRequestBodyUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesRequestBodyUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesRequestBodyUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"reusable"@
    PostSourcesRequestBodyUsage'EnumReusable
  | -- | Represents the JSON value @"single_use"@
    PostSourcesRequestBodyUsage'EnumSingleUse
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesRequestBodyUsage' where
  toJSON (PostSourcesRequestBodyUsage'Other val) = val
  toJSON (PostSourcesRequestBodyUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesRequestBodyUsage'EnumReusable) = "reusable"
  toJSON (PostSourcesRequestBodyUsage'EnumSingleUse) = "single_use"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesRequestBodyUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "reusable" -> PostSourcesRequestBodyUsage'EnumReusable
            | val GHC.Classes.== "single_use" -> PostSourcesRequestBodyUsage'EnumSingleUse
            | GHC.Base.otherwise -> PostSourcesRequestBodyUsage'Other val
      )

-- | Represents a response of the operation 'postSources'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSourcesResponseError' is used.
data PostSourcesResponse
  = -- | Means either no matching case available or a parse error
    PostSourcesResponseError GHC.Base.String
  | -- | Successful response.
    PostSourcesResponse200 Source
  | -- | Error response.
    PostSourcesResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
