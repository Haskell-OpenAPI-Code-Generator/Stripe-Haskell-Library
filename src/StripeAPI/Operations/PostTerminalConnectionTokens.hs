{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postTerminalConnectionTokens
module StripeAPI.Operations.PostTerminalConnectionTokens where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/terminal/connection_tokens
--
-- \<p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.\<\/p>
postTerminalConnectionTokens ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  GHC.Maybe.Maybe PostTerminalConnectionTokensRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostTerminalConnectionTokensResponse)
postTerminalConnectionTokens body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostTerminalConnectionTokensResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostTerminalConnectionTokensResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Terminal'connectionToken
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostTerminalConnectionTokensResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/terminal/connection_tokens") [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/terminal\/connection_tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostTerminalConnectionTokensRequestBody
  = PostTerminalConnectionTokensRequestBody
      { -- | expand: Specifies which fields in the response should be expanded.
        postTerminalConnectionTokensRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | location: The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postTerminalConnectionTokensRequestBodyLocation :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTerminalConnectionTokensRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("expand" Data.Aeson.Types.ToJSON..= postTerminalConnectionTokensRequestBodyExpand obj : "location" Data.Aeson.Types.ToJSON..= postTerminalConnectionTokensRequestBodyLocation obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("expand" Data.Aeson.Types.ToJSON..= postTerminalConnectionTokensRequestBodyExpand obj) GHC.Base.<> ("location" Data.Aeson.Types.ToJSON..= postTerminalConnectionTokensRequestBodyLocation obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostTerminalConnectionTokensRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTerminalConnectionTokensRequestBody" (\obj -> (GHC.Base.pure PostTerminalConnectionTokensRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "location"))

-- | Create a new 'PostTerminalConnectionTokensRequestBody' with all required fields.
mkPostTerminalConnectionTokensRequestBody :: PostTerminalConnectionTokensRequestBody
mkPostTerminalConnectionTokensRequestBody =
  PostTerminalConnectionTokensRequestBody
    { postTerminalConnectionTokensRequestBodyExpand = GHC.Maybe.Nothing,
      postTerminalConnectionTokensRequestBodyLocation = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postTerminalConnectionTokens'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTerminalConnectionTokensResponseError' is used.
data PostTerminalConnectionTokensResponse
  = -- | Means either no matching case available or a parse error
    PostTerminalConnectionTokensResponseError GHC.Base.String
  | -- | Successful response.
    PostTerminalConnectionTokensResponse200 Terminal'connectionToken
  | -- | Error response.
    PostTerminalConnectionTokensResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
