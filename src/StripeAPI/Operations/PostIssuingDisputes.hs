{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postIssuingDisputes
module StripeAPI.Operations.PostIssuingDisputes where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/issuing/disputes
--
-- \<p>Creates an Issuing \<code>Dispute\<\/code> object.\<\/p>
postIssuingDisputes ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostIssuingDisputesRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostIssuingDisputesResponse)
postIssuingDisputes body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostIssuingDisputesResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostIssuingDisputesResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Issuing'dispute
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostIssuingDisputesResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/issuing/disputes") [] (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/issuing\/disputes.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostIssuingDisputesRequestBody
  = PostIssuingDisputesRequestBody
      { -- | amount: Amount to dispute, defaults to full value, given in the currency the transaction was made in.
        postIssuingDisputesRequestBodyAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | disputed_transaction: The ID of the issuing transaction to create a dispute for.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postIssuingDisputesRequestBodyDisputedTransaction :: Data.Text.Internal.Text,
        -- | evidence: A hash containing all the evidence related to the dispute. This should have a single key, equal to the provided \`reason\`, mapping to an appropriate evidence object.
        postIssuingDisputesRequestBodyEvidence :: (GHC.Maybe.Maybe PostIssuingDisputesRequestBodyEvidence'),
        -- | expand: Specifies which fields in the response should be expanded.
        postIssuingDisputesRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
        postIssuingDisputesRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | reason: The reason for the dispute.
        postIssuingDisputesRequestBodyReason :: PostIssuingDisputesRequestBodyReason'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostIssuingDisputesRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyAmount obj : "disputed_transaction" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyDisputedTransaction obj : "evidence" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence obj : "expand" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyExpand obj : "metadata" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyMetadata obj : "reason" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyReason obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyAmount obj) GHC.Base.<> (("disputed_transaction" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyDisputedTransaction obj) GHC.Base.<> (("evidence" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyExpand obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyMetadata obj) GHC.Base.<> ("reason" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyReason obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostIssuingDisputesRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIssuingDisputesRequestBody" (\obj -> (((((GHC.Base.pure PostIssuingDisputesRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disputed_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "evidence")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason"))

-- | Create a new 'PostIssuingDisputesRequestBody' with all required fields.
mkPostIssuingDisputesRequestBody ::
  -- | 'postIssuingDisputesRequestBodyDisputedTransaction'
  Data.Text.Internal.Text ->
  -- | 'postIssuingDisputesRequestBodyReason'
  PostIssuingDisputesRequestBodyReason' ->
  PostIssuingDisputesRequestBody
mkPostIssuingDisputesRequestBody postIssuingDisputesRequestBodyDisputedTransaction postIssuingDisputesRequestBodyReason =
  PostIssuingDisputesRequestBody
    { postIssuingDisputesRequestBodyAmount = GHC.Maybe.Nothing,
      postIssuingDisputesRequestBodyDisputedTransaction = postIssuingDisputesRequestBodyDisputedTransaction,
      postIssuingDisputesRequestBodyEvidence = GHC.Maybe.Nothing,
      postIssuingDisputesRequestBodyExpand = GHC.Maybe.Nothing,
      postIssuingDisputesRequestBodyMetadata = GHC.Maybe.Nothing,
      postIssuingDisputesRequestBodyReason = postIssuingDisputesRequestBodyReason
    }

-- | Defines the object schema located at @paths.\/v1\/issuing\/disputes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.evidence@ in the specification.
--
-- A hash containing all the evidence related to the dispute. This should have a single key, equal to the provided \`reason\`, mapping to an appropriate evidence object.
data PostIssuingDisputesRequestBodyEvidence'
  = PostIssuingDisputesRequestBodyEvidence'
      { -- | duplicate
        postIssuingDisputesRequestBodyEvidence'Duplicate :: (GHC.Maybe.Maybe PostIssuingDisputesRequestBodyEvidence'Duplicate'),
        -- | fraudulent
        postIssuingDisputesRequestBodyEvidence'Fraudulent :: (GHC.Maybe.Maybe PostIssuingDisputesRequestBodyEvidence'Fraudulent'),
        -- | other
        postIssuingDisputesRequestBodyEvidence'Other :: (GHC.Maybe.Maybe PostIssuingDisputesRequestBodyEvidence'Other'),
        -- | product_not_received
        postIssuingDisputesRequestBodyEvidence'ProductNotReceived :: (GHC.Maybe.Maybe PostIssuingDisputesRequestBodyEvidence'ProductNotReceived')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostIssuingDisputesRequestBodyEvidence' where
  toJSON obj = Data.Aeson.Types.Internal.object ("duplicate" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Duplicate obj : "fraudulent" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Fraudulent obj : "other" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Other obj : "product_not_received" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'ProductNotReceived obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("duplicate" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Duplicate obj) GHC.Base.<> (("fraudulent" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Fraudulent obj) GHC.Base.<> (("other" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Other obj) GHC.Base.<> ("product_not_received" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'ProductNotReceived obj))))

instance Data.Aeson.Types.FromJSON.FromJSON PostIssuingDisputesRequestBodyEvidence' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIssuingDisputesRequestBodyEvidence'" (\obj -> (((GHC.Base.pure PostIssuingDisputesRequestBodyEvidence' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "duplicate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fraudulent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "other")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_not_received"))

-- | Create a new 'PostIssuingDisputesRequestBodyEvidence'' with all required fields.
mkPostIssuingDisputesRequestBodyEvidence' :: PostIssuingDisputesRequestBodyEvidence'
mkPostIssuingDisputesRequestBodyEvidence' =
  PostIssuingDisputesRequestBodyEvidence'
    { postIssuingDisputesRequestBodyEvidence'Duplicate = GHC.Maybe.Nothing,
      postIssuingDisputesRequestBodyEvidence'Fraudulent = GHC.Maybe.Nothing,
      postIssuingDisputesRequestBodyEvidence'Other = GHC.Maybe.Nothing,
      postIssuingDisputesRequestBodyEvidence'ProductNotReceived = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/issuing\/disputes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.evidence.properties.duplicate@ in the specification.
data PostIssuingDisputesRequestBodyEvidence'Duplicate'
  = PostIssuingDisputesRequestBodyEvidence'Duplicate'
      { -- | dispute_explanation
        --
        -- Constraints:
        --
        -- * Maximum length of 10000
        postIssuingDisputesRequestBodyEvidence'Duplicate'DisputeExplanation :: Data.Text.Internal.Text,
        -- | original_transaction
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postIssuingDisputesRequestBodyEvidence'Duplicate'OriginalTransaction :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | uncategorized_file
        postIssuingDisputesRequestBodyEvidence'Duplicate'UncategorizedFile :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostIssuingDisputesRequestBodyEvidence'Duplicate' where
  toJSON obj = Data.Aeson.Types.Internal.object ("dispute_explanation" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Duplicate'DisputeExplanation obj : "original_transaction" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Duplicate'OriginalTransaction obj : "uncategorized_file" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Duplicate'UncategorizedFile obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("dispute_explanation" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Duplicate'DisputeExplanation obj) GHC.Base.<> (("original_transaction" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Duplicate'OriginalTransaction obj) GHC.Base.<> ("uncategorized_file" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Duplicate'UncategorizedFile obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PostIssuingDisputesRequestBodyEvidence'Duplicate' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIssuingDisputesRequestBodyEvidence'Duplicate'" (\obj -> ((GHC.Base.pure PostIssuingDisputesRequestBodyEvidence'Duplicate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "original_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))

-- | Create a new 'PostIssuingDisputesRequestBodyEvidence'Duplicate'' with all required fields.
mkPostIssuingDisputesRequestBodyEvidence'Duplicate' ::
  -- | 'postIssuingDisputesRequestBodyEvidence'Duplicate'DisputeExplanation'
  Data.Text.Internal.Text ->
  PostIssuingDisputesRequestBodyEvidence'Duplicate'
mkPostIssuingDisputesRequestBodyEvidence'Duplicate' postIssuingDisputesRequestBodyEvidence'Duplicate'DisputeExplanation =
  PostIssuingDisputesRequestBodyEvidence'Duplicate'
    { postIssuingDisputesRequestBodyEvidence'Duplicate'DisputeExplanation = postIssuingDisputesRequestBodyEvidence'Duplicate'DisputeExplanation,
      postIssuingDisputesRequestBodyEvidence'Duplicate'OriginalTransaction = GHC.Maybe.Nothing,
      postIssuingDisputesRequestBodyEvidence'Duplicate'UncategorizedFile = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/issuing\/disputes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.evidence.properties.fraudulent@ in the specification.
data PostIssuingDisputesRequestBodyEvidence'Fraudulent'
  = PostIssuingDisputesRequestBodyEvidence'Fraudulent'
      { -- | dispute_explanation
        --
        -- Constraints:
        --
        -- * Maximum length of 10000
        postIssuingDisputesRequestBodyEvidence'Fraudulent'DisputeExplanation :: Data.Text.Internal.Text,
        -- | uncategorized_file
        postIssuingDisputesRequestBodyEvidence'Fraudulent'UncategorizedFile :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostIssuingDisputesRequestBodyEvidence'Fraudulent' where
  toJSON obj = Data.Aeson.Types.Internal.object ("dispute_explanation" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Fraudulent'DisputeExplanation obj : "uncategorized_file" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Fraudulent'UncategorizedFile obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("dispute_explanation" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Fraudulent'DisputeExplanation obj) GHC.Base.<> ("uncategorized_file" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Fraudulent'UncategorizedFile obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostIssuingDisputesRequestBodyEvidence'Fraudulent' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIssuingDisputesRequestBodyEvidence'Fraudulent'" (\obj -> (GHC.Base.pure PostIssuingDisputesRequestBodyEvidence'Fraudulent' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))

-- | Create a new 'PostIssuingDisputesRequestBodyEvidence'Fraudulent'' with all required fields.
mkPostIssuingDisputesRequestBodyEvidence'Fraudulent' ::
  -- | 'postIssuingDisputesRequestBodyEvidence'Fraudulent'DisputeExplanation'
  Data.Text.Internal.Text ->
  PostIssuingDisputesRequestBodyEvidence'Fraudulent'
mkPostIssuingDisputesRequestBodyEvidence'Fraudulent' postIssuingDisputesRequestBodyEvidence'Fraudulent'DisputeExplanation =
  PostIssuingDisputesRequestBodyEvidence'Fraudulent'
    { postIssuingDisputesRequestBodyEvidence'Fraudulent'DisputeExplanation = postIssuingDisputesRequestBodyEvidence'Fraudulent'DisputeExplanation,
      postIssuingDisputesRequestBodyEvidence'Fraudulent'UncategorizedFile = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/issuing\/disputes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.evidence.properties.other@ in the specification.
data PostIssuingDisputesRequestBodyEvidence'Other'
  = PostIssuingDisputesRequestBodyEvidence'Other'
      { -- | dispute_explanation
        --
        -- Constraints:
        --
        -- * Maximum length of 10000
        postIssuingDisputesRequestBodyEvidence'Other'DisputeExplanation :: Data.Text.Internal.Text,
        -- | uncategorized_file
        postIssuingDisputesRequestBodyEvidence'Other'UncategorizedFile :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostIssuingDisputesRequestBodyEvidence'Other' where
  toJSON obj = Data.Aeson.Types.Internal.object ("dispute_explanation" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Other'DisputeExplanation obj : "uncategorized_file" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Other'UncategorizedFile obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("dispute_explanation" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Other'DisputeExplanation obj) GHC.Base.<> ("uncategorized_file" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'Other'UncategorizedFile obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostIssuingDisputesRequestBodyEvidence'Other' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIssuingDisputesRequestBodyEvidence'Other'" (\obj -> (GHC.Base.pure PostIssuingDisputesRequestBodyEvidence'Other' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))

-- | Create a new 'PostIssuingDisputesRequestBodyEvidence'Other'' with all required fields.
mkPostIssuingDisputesRequestBodyEvidence'Other' ::
  -- | 'postIssuingDisputesRequestBodyEvidence'Other'DisputeExplanation'
  Data.Text.Internal.Text ->
  PostIssuingDisputesRequestBodyEvidence'Other'
mkPostIssuingDisputesRequestBodyEvidence'Other' postIssuingDisputesRequestBodyEvidence'Other'DisputeExplanation =
  PostIssuingDisputesRequestBodyEvidence'Other'
    { postIssuingDisputesRequestBodyEvidence'Other'DisputeExplanation = postIssuingDisputesRequestBodyEvidence'Other'DisputeExplanation,
      postIssuingDisputesRequestBodyEvidence'Other'UncategorizedFile = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/issuing\/disputes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.evidence.properties.product_not_received@ in the specification.
data PostIssuingDisputesRequestBodyEvidence'ProductNotReceived'
  = PostIssuingDisputesRequestBodyEvidence'ProductNotReceived'
      { -- | dispute_explanation
        --
        -- Constraints:
        --
        -- * Maximum length of 10000
        postIssuingDisputesRequestBodyEvidence'ProductNotReceived'DisputeExplanation :: Data.Text.Internal.Text,
        -- | uncategorized_file
        postIssuingDisputesRequestBodyEvidence'ProductNotReceived'UncategorizedFile :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostIssuingDisputesRequestBodyEvidence'ProductNotReceived' where
  toJSON obj = Data.Aeson.Types.Internal.object ("dispute_explanation" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'ProductNotReceived'DisputeExplanation obj : "uncategorized_file" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'ProductNotReceived'UncategorizedFile obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("dispute_explanation" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'ProductNotReceived'DisputeExplanation obj) GHC.Base.<> ("uncategorized_file" Data.Aeson.Types.ToJSON..= postIssuingDisputesRequestBodyEvidence'ProductNotReceived'UncategorizedFile obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostIssuingDisputesRequestBodyEvidence'ProductNotReceived' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIssuingDisputesRequestBodyEvidence'ProductNotReceived'" (\obj -> (GHC.Base.pure PostIssuingDisputesRequestBodyEvidence'ProductNotReceived' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))

-- | Create a new 'PostIssuingDisputesRequestBodyEvidence'ProductNotReceived'' with all required fields.
mkPostIssuingDisputesRequestBodyEvidence'ProductNotReceived' ::
  -- | 'postIssuingDisputesRequestBodyEvidence'ProductNotReceived'DisputeExplanation'
  Data.Text.Internal.Text ->
  PostIssuingDisputesRequestBodyEvidence'ProductNotReceived'
mkPostIssuingDisputesRequestBodyEvidence'ProductNotReceived' postIssuingDisputesRequestBodyEvidence'ProductNotReceived'DisputeExplanation =
  PostIssuingDisputesRequestBodyEvidence'ProductNotReceived'
    { postIssuingDisputesRequestBodyEvidence'ProductNotReceived'DisputeExplanation = postIssuingDisputesRequestBodyEvidence'ProductNotReceived'DisputeExplanation,
      postIssuingDisputesRequestBodyEvidence'ProductNotReceived'UncategorizedFile = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/issuing\/disputes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.reason@ in the specification.
--
-- The reason for the dispute.
data PostIssuingDisputesRequestBodyReason'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostIssuingDisputesRequestBodyReason'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostIssuingDisputesRequestBodyReason'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"duplicate"@
    PostIssuingDisputesRequestBodyReason'EnumDuplicate
  | -- | Represents the JSON value @"fraudulent"@
    PostIssuingDisputesRequestBodyReason'EnumFraudulent
  | -- | Represents the JSON value @"other"@
    PostIssuingDisputesRequestBodyReason'EnumOther
  | -- | Represents the JSON value @"product_not_received"@
    PostIssuingDisputesRequestBodyReason'EnumProductNotReceived
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostIssuingDisputesRequestBodyReason' where
  toJSON (PostIssuingDisputesRequestBodyReason'Other val) = val
  toJSON (PostIssuingDisputesRequestBodyReason'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostIssuingDisputesRequestBodyReason'EnumDuplicate) = "duplicate"
  toJSON (PostIssuingDisputesRequestBodyReason'EnumFraudulent) = "fraudulent"
  toJSON (PostIssuingDisputesRequestBodyReason'EnumOther) = "other"
  toJSON (PostIssuingDisputesRequestBodyReason'EnumProductNotReceived) = "product_not_received"

instance Data.Aeson.Types.FromJSON.FromJSON PostIssuingDisputesRequestBodyReason' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "duplicate" -> PostIssuingDisputesRequestBodyReason'EnumDuplicate
            | val GHC.Classes.== "fraudulent" -> PostIssuingDisputesRequestBodyReason'EnumFraudulent
            | val GHC.Classes.== "other" -> PostIssuingDisputesRequestBodyReason'EnumOther
            | val GHC.Classes.== "product_not_received" -> PostIssuingDisputesRequestBodyReason'EnumProductNotReceived
            | GHC.Base.otherwise -> PostIssuingDisputesRequestBodyReason'Other val
      )

-- | Represents a response of the operation 'postIssuingDisputes'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostIssuingDisputesResponseError' is used.
data PostIssuingDisputesResponse
  = -- | Means either no matching case available or a parse error
    PostIssuingDisputesResponseError GHC.Base.String
  | -- | Successful response.
    PostIssuingDisputesResponse200 Issuing'dispute
  | -- | Error response.
    PostIssuingDisputesResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
