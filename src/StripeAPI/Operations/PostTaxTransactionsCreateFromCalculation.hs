{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postTaxTransactionsCreateFromCalculation
module StripeAPI.Operations.PostTaxTransactionsCreateFromCalculation where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/tax/transactions/create_from_calculation
--
-- \<p>Creates a Tax \<code>Transaction\<\/code> from a calculation.\<\/p>
postTaxTransactionsCreateFromCalculation ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostTaxTransactionsCreateFromCalculationRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostTaxTransactionsCreateFromCalculationResponse)
postTaxTransactionsCreateFromCalculation body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostTaxTransactionsCreateFromCalculationResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostTaxTransactionsCreateFromCalculationResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Tax'transaction
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostTaxTransactionsCreateFromCalculationResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") "/v1/tax/transactions/create_from_calculation" GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/tax\/transactions\/create_from_calculation.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostTaxTransactionsCreateFromCalculationRequestBody = PostTaxTransactionsCreateFromCalculationRequestBody
  { -- | calculation: Tax Calculation ID to be used as input when creating the transaction.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTaxTransactionsCreateFromCalculationRequestBodyCalculation :: Data.Text.Internal.Text,
    -- | expand: Specifies which fields in the response should be expanded.
    postTaxTransactionsCreateFromCalculationRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
    postTaxTransactionsCreateFromCalculationRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | reference: A custom order or sale identifier, such as \'myOrder_123\'. Must be unique across all transactions, including reversals.
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTaxTransactionsCreateFromCalculationRequestBodyReference :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTaxTransactionsCreateFromCalculationRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["calculation" Data.Aeson.Types.ToJSON..= postTaxTransactionsCreateFromCalculationRequestBodyCalculation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTaxTransactionsCreateFromCalculationRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postTaxTransactionsCreateFromCalculationRequestBodyMetadata obj) : ["reference" Data.Aeson.Types.ToJSON..= postTaxTransactionsCreateFromCalculationRequestBodyReference obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["calculation" Data.Aeson.Types.ToJSON..= postTaxTransactionsCreateFromCalculationRequestBodyCalculation obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTaxTransactionsCreateFromCalculationRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postTaxTransactionsCreateFromCalculationRequestBodyMetadata obj) : ["reference" Data.Aeson.Types.ToJSON..= postTaxTransactionsCreateFromCalculationRequestBodyReference obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTaxTransactionsCreateFromCalculationRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTaxTransactionsCreateFromCalculationRequestBody" (\obj -> (((GHC.Base.pure PostTaxTransactionsCreateFromCalculationRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "calculation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reference"))

-- | Create a new 'PostTaxTransactionsCreateFromCalculationRequestBody' with all required fields.
mkPostTaxTransactionsCreateFromCalculationRequestBody ::
  -- | 'postTaxTransactionsCreateFromCalculationRequestBodyCalculation'
  Data.Text.Internal.Text ->
  -- | 'postTaxTransactionsCreateFromCalculationRequestBodyReference'
  Data.Text.Internal.Text ->
  PostTaxTransactionsCreateFromCalculationRequestBody
mkPostTaxTransactionsCreateFromCalculationRequestBody postTaxTransactionsCreateFromCalculationRequestBodyCalculation postTaxTransactionsCreateFromCalculationRequestBodyReference =
  PostTaxTransactionsCreateFromCalculationRequestBody
    { postTaxTransactionsCreateFromCalculationRequestBodyCalculation = postTaxTransactionsCreateFromCalculationRequestBodyCalculation,
      postTaxTransactionsCreateFromCalculationRequestBodyExpand = GHC.Maybe.Nothing,
      postTaxTransactionsCreateFromCalculationRequestBodyMetadata = GHC.Maybe.Nothing,
      postTaxTransactionsCreateFromCalculationRequestBodyReference = postTaxTransactionsCreateFromCalculationRequestBodyReference
    }

-- | Represents a response of the operation 'postTaxTransactionsCreateFromCalculation'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTaxTransactionsCreateFromCalculationResponseError' is used.
data PostTaxTransactionsCreateFromCalculationResponse
  = -- | Means either no matching case available or a parse error
    PostTaxTransactionsCreateFromCalculationResponseError GHC.Base.String
  | -- | Successful response.
    PostTaxTransactionsCreateFromCalculationResponse200 Tax'transaction
  | -- | Error response.
    PostTaxTransactionsCreateFromCalculationResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
