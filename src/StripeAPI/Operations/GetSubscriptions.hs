{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getSubscriptions
module StripeAPI.Operations.GetSubscriptions where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/subscriptions
--
-- \<p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify \<code>status=canceled\<\/code>.\<\/p>
getSubscriptions ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSubscriptionsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetSubscriptionsResponse)
getSubscriptions parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSubscriptionsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSubscriptionsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetSubscriptionsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSubscriptionsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/subscriptions")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "collection_method") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryCollectionMethod parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "current_period_end") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryCurrentPeriodEnd parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "current_period_start") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryCurrentPeriodStart parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "customer") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryCustomer parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "plan") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryPlan parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the data type for the schema getSubscriptionsParameters
data GetSubscriptionsParameters
  = GetSubscriptionsParameters
      { -- | queryCollection_method: Represents the parameter named \'collection_method\'
        --
        -- The collection method of the subscriptions to retrieve. Either \`charge_automatically\` or \`send_invoice\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSubscriptionsParametersQueryCollectionMethod :: (GHC.Maybe.Maybe GetSubscriptionsParametersQueryCollectionMethod'),
        -- | queryCreated: Represents the parameter named \'created\'
        getSubscriptionsParametersQueryCreated :: (GHC.Maybe.Maybe GetSubscriptionsParametersQueryCreated'Variants),
        -- | queryCurrent_period_end: Represents the parameter named \'current_period_end\'
        getSubscriptionsParametersQueryCurrentPeriodEnd :: (GHC.Maybe.Maybe GetSubscriptionsParametersQueryCurrentPeriodEnd'Variants),
        -- | queryCurrent_period_start: Represents the parameter named \'current_period_start\'
        getSubscriptionsParametersQueryCurrentPeriodStart :: (GHC.Maybe.Maybe GetSubscriptionsParametersQueryCurrentPeriodStart'Variants),
        -- | queryCustomer: Represents the parameter named \'customer\'
        --
        -- The ID of the customer whose subscriptions will be retrieved.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSubscriptionsParametersQueryCustomer :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSubscriptionsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getSubscriptionsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getSubscriptionsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryPlan: Represents the parameter named \'plan\'
        --
        -- The ID of the plan whose subscriptions will be retrieved.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSubscriptionsParametersQueryPlan :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSubscriptionsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryStatus: Represents the parameter named \'status\'
        --
        -- The status of the subscriptions to retrieve. One of: \`incomplete\`, \`incomplete_expired\`, \`trialing\`, \`active\`, \`past_due\`, \`unpaid\`, \`canceled\`, or \`all\`. Passing in a value of \`canceled\` will return all canceled subscriptions, including those belonging to deleted customers. Passing in a value of \`all\` will return subscriptions of all statuses.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSubscriptionsParametersQueryStatus :: (GHC.Maybe.Maybe GetSubscriptionsParametersQueryStatus')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "queryCollection_method" (getSubscriptionsParametersQueryCollectionMethod obj) : (Data.Aeson..=) "queryCreated" (getSubscriptionsParametersQueryCreated obj) : (Data.Aeson..=) "queryCurrent_period_end" (getSubscriptionsParametersQueryCurrentPeriodEnd obj) : (Data.Aeson..=) "queryCurrent_period_start" (getSubscriptionsParametersQueryCurrentPeriodStart obj) : (Data.Aeson..=) "queryCustomer" (getSubscriptionsParametersQueryCustomer obj) : (Data.Aeson..=) "queryEnding_before" (getSubscriptionsParametersQueryEndingBefore obj) : (Data.Aeson..=) "queryExpand" (getSubscriptionsParametersQueryExpand obj) : (Data.Aeson..=) "queryLimit" (getSubscriptionsParametersQueryLimit obj) : (Data.Aeson..=) "queryPlan" (getSubscriptionsParametersQueryPlan obj) : (Data.Aeson..=) "queryStarting_after" (getSubscriptionsParametersQueryStartingAfter obj) : (Data.Aeson..=) "queryStatus" (getSubscriptionsParametersQueryStatus obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "queryCollection_method" (getSubscriptionsParametersQueryCollectionMethod obj) GHC.Base.<> ((Data.Aeson..=) "queryCreated" (getSubscriptionsParametersQueryCreated obj) GHC.Base.<> ((Data.Aeson..=) "queryCurrent_period_end" (getSubscriptionsParametersQueryCurrentPeriodEnd obj) GHC.Base.<> ((Data.Aeson..=) "queryCurrent_period_start" (getSubscriptionsParametersQueryCurrentPeriodStart obj) GHC.Base.<> ((Data.Aeson..=) "queryCustomer" (getSubscriptionsParametersQueryCustomer obj) GHC.Base.<> ((Data.Aeson..=) "queryEnding_before" (getSubscriptionsParametersQueryEndingBefore obj) GHC.Base.<> ((Data.Aeson..=) "queryExpand" (getSubscriptionsParametersQueryExpand obj) GHC.Base.<> ((Data.Aeson..=) "queryLimit" (getSubscriptionsParametersQueryLimit obj) GHC.Base.<> ((Data.Aeson..=) "queryPlan" (getSubscriptionsParametersQueryPlan obj) GHC.Base.<> ((Data.Aeson..=) "queryStarting_after" (getSubscriptionsParametersQueryStartingAfter obj) GHC.Base.<> (Data.Aeson..=) "queryStatus" (getSubscriptionsParametersQueryStatus obj)))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSubscriptionsParameters" (\obj -> ((((((((((GHC.Base.pure GetSubscriptionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCollection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCurrent_period_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCurrent_period_start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCustomer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPlan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStatus"))

-- | Defines the enum schema getSubscriptionsParametersQueryCollection_method\'
--
-- Represents the parameter named \'collection_method\'
--
-- The collection method of the subscriptions to retrieve. Either \`charge_automatically\` or \`send_invoice\`.
data GetSubscriptionsParametersQueryCollectionMethod'
  = GetSubscriptionsParametersQueryCollectionMethod'EnumOther Data.Aeson.Types.Internal.Value
  | GetSubscriptionsParametersQueryCollectionMethod'EnumTyped Data.Text.Internal.Text
  | GetSubscriptionsParametersQueryCollectionMethod'EnumStringChargeAutomatically
  | GetSubscriptionsParametersQueryCollectionMethod'EnumStringSendInvoice
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsParametersQueryCollectionMethod' where
  toJSON (GetSubscriptionsParametersQueryCollectionMethod'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetSubscriptionsParametersQueryCollectionMethod'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetSubscriptionsParametersQueryCollectionMethod'EnumStringChargeAutomatically) = "charge_automatically"
  toJSON (GetSubscriptionsParametersQueryCollectionMethod'EnumStringSendInvoice) = "send_invoice"

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsParametersQueryCollectionMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "charge_automatically" -> GetSubscriptionsParametersQueryCollectionMethod'EnumStringChargeAutomatically
            | val GHC.Classes.== "send_invoice" -> GetSubscriptionsParametersQueryCollectionMethod'EnumStringSendInvoice
            | GHC.Base.otherwise -> GetSubscriptionsParametersQueryCollectionMethod'EnumOther val
      )

-- | Defines the data type for the schema getSubscriptionsParametersQueryCreated\'OneOf2
data GetSubscriptionsParametersQueryCreated'OneOf2
  = GetSubscriptionsParametersQueryCreated'OneOf2
      { -- | gt
        getSubscriptionsParametersQueryCreated'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getSubscriptionsParametersQueryCreated'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getSubscriptionsParametersQueryCreated'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getSubscriptionsParametersQueryCreated'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsParametersQueryCreated'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getSubscriptionsParametersQueryCreated'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getSubscriptionsParametersQueryCreated'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getSubscriptionsParametersQueryCreated'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getSubscriptionsParametersQueryCreated'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getSubscriptionsParametersQueryCreated'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getSubscriptionsParametersQueryCreated'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getSubscriptionsParametersQueryCreated'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getSubscriptionsParametersQueryCreated'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsParametersQueryCreated'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSubscriptionsParametersQueryCreated'OneOf2" (\obj -> (((GHC.Base.pure GetSubscriptionsParametersQueryCreated'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getSubscriptionsParametersQueryCreated\'
--
-- Represents the parameter named \'created\'
data GetSubscriptionsParametersQueryCreated'Variants
  = GetSubscriptionsParametersQueryCreated'Int GHC.Types.Int
  | GetSubscriptionsParametersQueryCreated'GetSubscriptionsParametersQueryCreated'OneOf2 GetSubscriptionsParametersQueryCreated'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsParametersQueryCreated'Variants where
  toJSON (GetSubscriptionsParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetSubscriptionsParametersQueryCreated'GetSubscriptionsParametersQueryCreated'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsParametersQueryCreated'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetSubscriptionsParametersQueryCreated'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetSubscriptionsParametersQueryCreated'GetSubscriptionsParametersQueryCreated'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema getSubscriptionsParametersQueryCurrent_period_end\'OneOf2
data GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2
  = GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2
      { -- | gt
        getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2" (\obj -> (((GHC.Base.pure GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getSubscriptionsParametersQueryCurrent_period_end\'
--
-- Represents the parameter named \'current_period_end\'
data GetSubscriptionsParametersQueryCurrentPeriodEnd'Variants
  = GetSubscriptionsParametersQueryCurrentPeriodEnd'Int GHC.Types.Int
  | GetSubscriptionsParametersQueryCurrentPeriodEnd'GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2 GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsParametersQueryCurrentPeriodEnd'Variants where
  toJSON (GetSubscriptionsParametersQueryCurrentPeriodEnd'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetSubscriptionsParametersQueryCurrentPeriodEnd'GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsParametersQueryCurrentPeriodEnd'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetSubscriptionsParametersQueryCurrentPeriodEnd'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetSubscriptionsParametersQueryCurrentPeriodEnd'GetSubscriptionsParametersQueryCurrentPeriodEnd'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema getSubscriptionsParametersQueryCurrent_period_start\'OneOf2
data GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2
  = GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2
      { -- | gt
        getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getSubscriptionsParametersQueryCurrentPeriodStart'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2" (\obj -> (((GHC.Base.pure GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getSubscriptionsParametersQueryCurrent_period_start\'
--
-- Represents the parameter named \'current_period_start\'
data GetSubscriptionsParametersQueryCurrentPeriodStart'Variants
  = GetSubscriptionsParametersQueryCurrentPeriodStart'Int GHC.Types.Int
  | GetSubscriptionsParametersQueryCurrentPeriodStart'GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2 GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsParametersQueryCurrentPeriodStart'Variants where
  toJSON (GetSubscriptionsParametersQueryCurrentPeriodStart'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetSubscriptionsParametersQueryCurrentPeriodStart'GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsParametersQueryCurrentPeriodStart'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetSubscriptionsParametersQueryCurrentPeriodStart'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetSubscriptionsParametersQueryCurrentPeriodStart'GetSubscriptionsParametersQueryCurrentPeriodStart'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema getSubscriptionsParametersQueryStatus\'
--
-- Represents the parameter named \'status\'
--
-- The status of the subscriptions to retrieve. One of: \`incomplete\`, \`incomplete_expired\`, \`trialing\`, \`active\`, \`past_due\`, \`unpaid\`, \`canceled\`, or \`all\`. Passing in a value of \`canceled\` will return all canceled subscriptions, including those belonging to deleted customers. Passing in a value of \`all\` will return subscriptions of all statuses.
data GetSubscriptionsParametersQueryStatus'
  = GetSubscriptionsParametersQueryStatus'EnumOther Data.Aeson.Types.Internal.Value
  | GetSubscriptionsParametersQueryStatus'EnumTyped Data.Text.Internal.Text
  | GetSubscriptionsParametersQueryStatus'EnumStringActive
  | GetSubscriptionsParametersQueryStatus'EnumStringAll
  | GetSubscriptionsParametersQueryStatus'EnumStringCanceled
  | GetSubscriptionsParametersQueryStatus'EnumStringEnded
  | GetSubscriptionsParametersQueryStatus'EnumStringIncomplete
  | GetSubscriptionsParametersQueryStatus'EnumStringIncompleteExpired
  | GetSubscriptionsParametersQueryStatus'EnumStringPastDue
  | GetSubscriptionsParametersQueryStatus'EnumStringTrialing
  | GetSubscriptionsParametersQueryStatus'EnumStringUnpaid
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsParametersQueryStatus' where
  toJSON (GetSubscriptionsParametersQueryStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetSubscriptionsParametersQueryStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetSubscriptionsParametersQueryStatus'EnumStringActive) = "active"
  toJSON (GetSubscriptionsParametersQueryStatus'EnumStringAll) = "all"
  toJSON (GetSubscriptionsParametersQueryStatus'EnumStringCanceled) = "canceled"
  toJSON (GetSubscriptionsParametersQueryStatus'EnumStringEnded) = "ended"
  toJSON (GetSubscriptionsParametersQueryStatus'EnumStringIncomplete) = "incomplete"
  toJSON (GetSubscriptionsParametersQueryStatus'EnumStringIncompleteExpired) = "incomplete_expired"
  toJSON (GetSubscriptionsParametersQueryStatus'EnumStringPastDue) = "past_due"
  toJSON (GetSubscriptionsParametersQueryStatus'EnumStringTrialing) = "trialing"
  toJSON (GetSubscriptionsParametersQueryStatus'EnumStringUnpaid) = "unpaid"

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsParametersQueryStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "active" -> GetSubscriptionsParametersQueryStatus'EnumStringActive
            | val GHC.Classes.== "all" -> GetSubscriptionsParametersQueryStatus'EnumStringAll
            | val GHC.Classes.== "canceled" -> GetSubscriptionsParametersQueryStatus'EnumStringCanceled
            | val GHC.Classes.== "ended" -> GetSubscriptionsParametersQueryStatus'EnumStringEnded
            | val GHC.Classes.== "incomplete" -> GetSubscriptionsParametersQueryStatus'EnumStringIncomplete
            | val GHC.Classes.== "incomplete_expired" -> GetSubscriptionsParametersQueryStatus'EnumStringIncompleteExpired
            | val GHC.Classes.== "past_due" -> GetSubscriptionsParametersQueryStatus'EnumStringPastDue
            | val GHC.Classes.== "trialing" -> GetSubscriptionsParametersQueryStatus'EnumStringTrialing
            | val GHC.Classes.== "unpaid" -> GetSubscriptionsParametersQueryStatus'EnumStringUnpaid
            | GHC.Base.otherwise -> GetSubscriptionsParametersQueryStatus'EnumOther val
      )

-- | Represents a response of the operation 'getSubscriptions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSubscriptionsResponseError' is used.
data GetSubscriptionsResponse
  = -- | Means either no matching case available or a parse error
    GetSubscriptionsResponseError GHC.Base.String
  | -- | Successful response.
    GetSubscriptionsResponse200 GetSubscriptionsResponseBody200
  | -- | Error response.
    GetSubscriptionsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the data type for the schema GetSubscriptionsResponseBody200
data GetSubscriptionsResponseBody200
  = GetSubscriptionsResponseBody200
      { -- | data
        getSubscriptionsResponseBody200Data :: ([Subscription]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getSubscriptionsResponseBody200HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        getSubscriptionsResponseBody200Object :: GetSubscriptionsResponseBody200Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        -- * Must match pattern \'^\/v1\/subscriptions\'
        getSubscriptionsResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsResponseBody200 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getSubscriptionsResponseBody200Data obj) : (Data.Aeson..=) "has_more" (getSubscriptionsResponseBody200HasMore obj) : (Data.Aeson..=) "object" (getSubscriptionsResponseBody200Object obj) : (Data.Aeson..=) "url" (getSubscriptionsResponseBody200Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getSubscriptionsResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (getSubscriptionsResponseBody200HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (getSubscriptionsResponseBody200Object obj) GHC.Base.<> (Data.Aeson..=) "url" (getSubscriptionsResponseBody200Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSubscriptionsResponseBody200" (\obj -> (((GHC.Base.pure GetSubscriptionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema GetSubscriptionsResponseBody200Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data GetSubscriptionsResponseBody200Object'
  = GetSubscriptionsResponseBody200Object'EnumOther Data.Aeson.Types.Internal.Value
  | GetSubscriptionsResponseBody200Object'EnumTyped Data.Text.Internal.Text
  | GetSubscriptionsResponseBody200Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsResponseBody200Object' where
  toJSON (GetSubscriptionsResponseBody200Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetSubscriptionsResponseBody200Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetSubscriptionsResponseBody200Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> GetSubscriptionsResponseBody200Object'EnumStringList
            | GHC.Base.otherwise -> GetSubscriptionsResponseBody200Object'EnumOther val
      )
