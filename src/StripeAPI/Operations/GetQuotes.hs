{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getQuotes
module StripeAPI.Operations.GetQuotes where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/quotes
--
-- \<p>Returns a list of your quotes.\<\/p>
getQuotes ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetQuotesParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetQuotesResponse)
getQuotes parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetQuotesResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetQuotesResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetQuotesResponseBody200
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetQuotesResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/v1/quotes"
        [ StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "customer") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getQuotesParametersQueryCustomer parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getQuotesParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getQuotesParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getQuotesParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getQuotesParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getQuotesParametersQueryStatus parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "test_clock") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getQuotesParametersQueryTestClock parameters) (Data.Text.Internal.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/quotes.GET.parameters@ in the specification.
data GetQuotesParameters = GetQuotesParameters
  { -- | queryCustomer: Represents the parameter named \'customer\'
    --
    -- The ID of the customer whose quotes will be retrieved.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getQuotesParametersQueryCustomer :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getQuotesParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getQuotesParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getQuotesParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getQuotesParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryStatus: Represents the parameter named \'status\'
    --
    -- The status of the quote.
    getQuotesParametersQueryStatus :: (GHC.Maybe.Maybe GetQuotesParametersQueryStatus'),
    -- | queryTest_clock: Represents the parameter named \'test_clock\'
    --
    -- Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getQuotesParametersQueryTestClock :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetQuotesParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCustomer" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTest_clock" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryTestClock obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCustomer" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryTest_clock" Data.Aeson.Types.ToJSON..=)) (getQuotesParametersQueryTestClock obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetQuotesParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetQuotesParameters" (\obj -> ((((((GHC.Base.pure GetQuotesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCustomer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryTest_clock"))

-- | Create a new 'GetQuotesParameters' with all required fields.
mkGetQuotesParameters :: GetQuotesParameters
mkGetQuotesParameters =
  GetQuotesParameters
    { getQuotesParametersQueryCustomer = GHC.Maybe.Nothing,
      getQuotesParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getQuotesParametersQueryExpand = GHC.Maybe.Nothing,
      getQuotesParametersQueryLimit = GHC.Maybe.Nothing,
      getQuotesParametersQueryStartingAfter = GHC.Maybe.Nothing,
      getQuotesParametersQueryStatus = GHC.Maybe.Nothing,
      getQuotesParametersQueryTestClock = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/quotes.GET.parameters.properties.queryStatus@ in the specification.
--
-- Represents the parameter named \'status\'
--
-- The status of the quote.
data GetQuotesParametersQueryStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetQuotesParametersQueryStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetQuotesParametersQueryStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"accepted"@
    GetQuotesParametersQueryStatus'EnumAccepted
  | -- | Represents the JSON value @"canceled"@
    GetQuotesParametersQueryStatus'EnumCanceled
  | -- | Represents the JSON value @"draft"@
    GetQuotesParametersQueryStatus'EnumDraft
  | -- | Represents the JSON value @"open"@
    GetQuotesParametersQueryStatus'EnumOpen
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetQuotesParametersQueryStatus' where
  toJSON (GetQuotesParametersQueryStatus'Other val) = val
  toJSON (GetQuotesParametersQueryStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetQuotesParametersQueryStatus'EnumAccepted) = "accepted"
  toJSON (GetQuotesParametersQueryStatus'EnumCanceled) = "canceled"
  toJSON (GetQuotesParametersQueryStatus'EnumDraft) = "draft"
  toJSON (GetQuotesParametersQueryStatus'EnumOpen) = "open"

instance Data.Aeson.Types.FromJSON.FromJSON GetQuotesParametersQueryStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "accepted" -> GetQuotesParametersQueryStatus'EnumAccepted
            | val GHC.Classes.== "canceled" -> GetQuotesParametersQueryStatus'EnumCanceled
            | val GHC.Classes.== "draft" -> GetQuotesParametersQueryStatus'EnumDraft
            | val GHC.Classes.== "open" -> GetQuotesParametersQueryStatus'EnumOpen
            | GHC.Base.otherwise -> GetQuotesParametersQueryStatus'Other val
      )

-- | Represents a response of the operation 'getQuotes'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetQuotesResponseError' is used.
data GetQuotesResponse
  = -- | Means either no matching case available or a parse error
    GetQuotesResponseError GHC.Base.String
  | -- | Successful response.
    GetQuotesResponse200 GetQuotesResponseBody200
  | -- | Error response.
    GetQuotesResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/quotes.GET.responses.200.content.application\/json.schema@ in the specification.
data GetQuotesResponseBody200 = GetQuotesResponseBody200
  { -- | data
    getQuotesResponseBody200Data :: ([Quote]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getQuotesResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    -- * Must match pattern \'^\/v1\/quotes\'
    getQuotesResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetQuotesResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getQuotesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getQuotesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getQuotesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getQuotesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getQuotesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getQuotesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetQuotesResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetQuotesResponseBody200" (\obj -> ((GHC.Base.pure GetQuotesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetQuotesResponseBody200' with all required fields.
mkGetQuotesResponseBody200 ::
  -- | 'getQuotesResponseBody200Data'
  [Quote] ->
  -- | 'getQuotesResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getQuotesResponseBody200Url'
  Data.Text.Internal.Text ->
  GetQuotesResponseBody200
mkGetQuotesResponseBody200 getQuotesResponseBody200Data getQuotesResponseBody200HasMore getQuotesResponseBody200Url =
  GetQuotesResponseBody200
    { getQuotesResponseBody200Data = getQuotesResponseBody200Data,
      getQuotesResponseBody200HasMore = getQuotesResponseBody200HasMore,
      getQuotesResponseBody200Url = getQuotesResponseBody200Url
    }
