{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postFinancialConnectionsSessions
module StripeAPI.Operations.PostFinancialConnectionsSessions where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/financial_connections/sessions
--
-- \<p>To launch the Financial Connections authorization flow, create a \<code>Session\<\/code>. The sessionâ€™s \<code>client_secret\<\/code> can be used to launch the flow using Stripe.js.\<\/p>
postFinancialConnectionsSessions ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostFinancialConnectionsSessionsRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostFinancialConnectionsSessionsResponse)
postFinancialConnectionsSessions body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostFinancialConnectionsSessionsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostFinancialConnectionsSessionsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            FinancialConnections'session
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostFinancialConnectionsSessionsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/financial_connections/sessions") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/financial_connections\/sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostFinancialConnectionsSessionsRequestBody = PostFinancialConnectionsSessionsRequestBody
  { -- | account_holder: The account holder to link accounts for.
    postFinancialConnectionsSessionsRequestBodyAccountHolder :: PostFinancialConnectionsSessionsRequestBodyAccountHolder',
    -- | expand: Specifies which fields in the response should be expanded.
    postFinancialConnectionsSessionsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | filters: Filters to restrict the kinds of accounts to collect.
    postFinancialConnectionsSessionsRequestBodyFilters :: (GHC.Maybe.Maybe PostFinancialConnectionsSessionsRequestBodyFilters'),
    -- | permissions: List of data features that you would like to request access to.
    --
    -- Possible values are \`balances\`, \`transactions\`, \`ownership\`, and \`payment_method\`.
    postFinancialConnectionsSessionsRequestBodyPermissions :: ([PostFinancialConnectionsSessionsRequestBodyPermissions']),
    -- | return_url: For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postFinancialConnectionsSessionsRequestBodyReturnUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostFinancialConnectionsSessionsRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_holder" Data.Aeson.Types.ToJSON..= postFinancialConnectionsSessionsRequestBodyAccountHolder obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyFilters obj) : ["permissions" Data.Aeson.Types.ToJSON..= postFinancialConnectionsSessionsRequestBodyPermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("return_url" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyReturnUrl obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_holder" Data.Aeson.Types.ToJSON..= postFinancialConnectionsSessionsRequestBodyAccountHolder obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyFilters obj) : ["permissions" Data.Aeson.Types.ToJSON..= postFinancialConnectionsSessionsRequestBodyPermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("return_url" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyReturnUrl obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostFinancialConnectionsSessionsRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFinancialConnectionsSessionsRequestBody" (\obj -> ((((GHC.Base.pure PostFinancialConnectionsSessionsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_holder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "filters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "return_url"))

-- | Create a new 'PostFinancialConnectionsSessionsRequestBody' with all required fields.
mkPostFinancialConnectionsSessionsRequestBody ::
  -- | 'postFinancialConnectionsSessionsRequestBodyAccountHolder'
  PostFinancialConnectionsSessionsRequestBodyAccountHolder' ->
  -- | 'postFinancialConnectionsSessionsRequestBodyPermissions'
  [PostFinancialConnectionsSessionsRequestBodyPermissions'] ->
  PostFinancialConnectionsSessionsRequestBody
mkPostFinancialConnectionsSessionsRequestBody postFinancialConnectionsSessionsRequestBodyAccountHolder postFinancialConnectionsSessionsRequestBodyPermissions =
  PostFinancialConnectionsSessionsRequestBody
    { postFinancialConnectionsSessionsRequestBodyAccountHolder = postFinancialConnectionsSessionsRequestBodyAccountHolder,
      postFinancialConnectionsSessionsRequestBodyExpand = GHC.Maybe.Nothing,
      postFinancialConnectionsSessionsRequestBodyFilters = GHC.Maybe.Nothing,
      postFinancialConnectionsSessionsRequestBodyPermissions = postFinancialConnectionsSessionsRequestBodyPermissions,
      postFinancialConnectionsSessionsRequestBodyReturnUrl = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/financial_connections\/sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account_holder@ in the specification.
--
-- The account holder to link accounts for.
data PostFinancialConnectionsSessionsRequestBodyAccountHolder' = PostFinancialConnectionsSessionsRequestBodyAccountHolder'
  { -- | account
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postFinancialConnectionsSessionsRequestBodyAccountHolder'Account :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postFinancialConnectionsSessionsRequestBodyAccountHolder'Customer :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | type
    postFinancialConnectionsSessionsRequestBodyAccountHolder'Type :: PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostFinancialConnectionsSessionsRequestBodyAccountHolder' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyAccountHolder'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyAccountHolder'Customer obj) : ["type" Data.Aeson.Types.ToJSON..= postFinancialConnectionsSessionsRequestBodyAccountHolder'Type obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyAccountHolder'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postFinancialConnectionsSessionsRequestBodyAccountHolder'Customer obj) : ["type" Data.Aeson.Types.ToJSON..= postFinancialConnectionsSessionsRequestBodyAccountHolder'Type obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostFinancialConnectionsSessionsRequestBodyAccountHolder' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFinancialConnectionsSessionsRequestBodyAccountHolder'" (\obj -> ((GHC.Base.pure PostFinancialConnectionsSessionsRequestBodyAccountHolder' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'PostFinancialConnectionsSessionsRequestBodyAccountHolder'' with all required fields.
mkPostFinancialConnectionsSessionsRequestBodyAccountHolder' ::
  -- | 'postFinancialConnectionsSessionsRequestBodyAccountHolder'Type'
  PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type' ->
  PostFinancialConnectionsSessionsRequestBodyAccountHolder'
mkPostFinancialConnectionsSessionsRequestBodyAccountHolder' postFinancialConnectionsSessionsRequestBodyAccountHolder'Type =
  PostFinancialConnectionsSessionsRequestBodyAccountHolder'
    { postFinancialConnectionsSessionsRequestBodyAccountHolder'Account = GHC.Maybe.Nothing,
      postFinancialConnectionsSessionsRequestBodyAccountHolder'Customer = GHC.Maybe.Nothing,
      postFinancialConnectionsSessionsRequestBodyAccountHolder'Type = postFinancialConnectionsSessionsRequestBodyAccountHolder'Type
    }

-- | Defines the enum schema located at @paths.\/v1\/financial_connections\/sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account_holder.properties.type@ in the specification.
data PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"account"@
    PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'EnumAccount
  | -- | Represents the JSON value @"customer"@
    PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'EnumCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type' where
  toJSON (PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'Other val) = val
  toJSON (PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'EnumAccount) = "account"
  toJSON (PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'EnumCustomer) = "customer"

instance Data.Aeson.Types.FromJSON.FromJSON PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "account" -> PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'EnumAccount
            | val GHC.Classes.== "customer" -> PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'EnumCustomer
            | GHC.Base.otherwise -> PostFinancialConnectionsSessionsRequestBodyAccountHolder'Type'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/financial_connections\/sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.filters@ in the specification.
--
-- Filters to restrict the kinds of accounts to collect.
data PostFinancialConnectionsSessionsRequestBodyFilters' = PostFinancialConnectionsSessionsRequestBodyFilters'
  { -- | countries
    postFinancialConnectionsSessionsRequestBodyFilters'Countries :: ([Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostFinancialConnectionsSessionsRequestBodyFilters' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["countries" Data.Aeson.Types.ToJSON..= postFinancialConnectionsSessionsRequestBodyFilters'Countries obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["countries" Data.Aeson.Types.ToJSON..= postFinancialConnectionsSessionsRequestBodyFilters'Countries obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostFinancialConnectionsSessionsRequestBodyFilters' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostFinancialConnectionsSessionsRequestBodyFilters'" (\obj -> GHC.Base.pure PostFinancialConnectionsSessionsRequestBodyFilters' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "countries"))

-- | Create a new 'PostFinancialConnectionsSessionsRequestBodyFilters'' with all required fields.
mkPostFinancialConnectionsSessionsRequestBodyFilters' ::
  -- | 'postFinancialConnectionsSessionsRequestBodyFilters'Countries'
  [Data.Text.Internal.Text] ->
  PostFinancialConnectionsSessionsRequestBodyFilters'
mkPostFinancialConnectionsSessionsRequestBodyFilters' postFinancialConnectionsSessionsRequestBodyFilters'Countries = PostFinancialConnectionsSessionsRequestBodyFilters' {postFinancialConnectionsSessionsRequestBodyFilters'Countries = postFinancialConnectionsSessionsRequestBodyFilters'Countries}

-- | Defines the enum schema located at @paths.\/v1\/financial_connections\/sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.permissions.items@ in the specification.
data PostFinancialConnectionsSessionsRequestBodyPermissions'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostFinancialConnectionsSessionsRequestBodyPermissions'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostFinancialConnectionsSessionsRequestBodyPermissions'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"balances"@
    PostFinancialConnectionsSessionsRequestBodyPermissions'EnumBalances
  | -- | Represents the JSON value @"ownership"@
    PostFinancialConnectionsSessionsRequestBodyPermissions'EnumOwnership
  | -- | Represents the JSON value @"payment_method"@
    PostFinancialConnectionsSessionsRequestBodyPermissions'EnumPaymentMethod
  | -- | Represents the JSON value @"transactions"@
    PostFinancialConnectionsSessionsRequestBodyPermissions'EnumTransactions
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostFinancialConnectionsSessionsRequestBodyPermissions' where
  toJSON (PostFinancialConnectionsSessionsRequestBodyPermissions'Other val) = val
  toJSON (PostFinancialConnectionsSessionsRequestBodyPermissions'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostFinancialConnectionsSessionsRequestBodyPermissions'EnumBalances) = "balances"
  toJSON (PostFinancialConnectionsSessionsRequestBodyPermissions'EnumOwnership) = "ownership"
  toJSON (PostFinancialConnectionsSessionsRequestBodyPermissions'EnumPaymentMethod) = "payment_method"
  toJSON (PostFinancialConnectionsSessionsRequestBodyPermissions'EnumTransactions) = "transactions"

instance Data.Aeson.Types.FromJSON.FromJSON PostFinancialConnectionsSessionsRequestBodyPermissions' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "balances" -> PostFinancialConnectionsSessionsRequestBodyPermissions'EnumBalances
            | val GHC.Classes.== "ownership" -> PostFinancialConnectionsSessionsRequestBodyPermissions'EnumOwnership
            | val GHC.Classes.== "payment_method" -> PostFinancialConnectionsSessionsRequestBodyPermissions'EnumPaymentMethod
            | val GHC.Classes.== "transactions" -> PostFinancialConnectionsSessionsRequestBodyPermissions'EnumTransactions
            | GHC.Base.otherwise -> PostFinancialConnectionsSessionsRequestBodyPermissions'Other val
      )

-- | Represents a response of the operation 'postFinancialConnectionsSessions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostFinancialConnectionsSessionsResponseError' is used.
data PostFinancialConnectionsSessionsResponse
  = -- | Means either no matching case available or a parse error
    PostFinancialConnectionsSessionsResponseError GHC.Base.String
  | -- | Successful response.
    PostFinancialConnectionsSessionsResponse200 FinancialConnections'session
  | -- | Error response.
    PostFinancialConnectionsSessionsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
