{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postRecipientsId
module StripeAPI.Operations.PostRecipientsId where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/recipients/{id}
--
-- \<p>Updates the specified recipient by setting the values of the parameters passed.
-- Any parameters not provided will be left unchanged.\<\/p>
--
-- \<p>If you update the name or tax ID, the identity verification will automatically be rerun.
-- If you update the bank account, the bank account validation will automatically be rerun.\<\/p>
postRecipientsId ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | id | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostRecipientsIdRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostRecipientsIdResponse)
postRecipientsId
  id
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostRecipientsIdResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostRecipientsIdResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Recipient
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostRecipientsIdResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/recipients/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel id)) GHC.Base.++ ""))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/recipients\/{id}.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostRecipientsIdRequestBody
  = PostRecipientsIdRequestBody
      { -- | bank_account: A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https:\/\/stripe.com\/docs\/stripe-js), or a dictionary containing a user\'s bank account details, with the options described below.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postRecipientsIdRequestBodyBankAccount :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | card: A U.S. Visa or MasterCard debit card (not prepaid) to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https:\/\/stripe.com\/docs\/stripe-js), or a dictionary containing a user\'s debit card details, with the options described below. Passing \`card\` will create a new card, make it the new recipient default card, and delete the old recipient default (if one exists). If you want to add additional debit cards instead of replacing the existing default, use the [card creation API](https:\/\/stripe.com\/docs\/api\#create_card). Whenever you attach a card to a recipient, Stripe will automatically validate the debit card.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postRecipientsIdRequestBodyCard :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | default_card: ID of the card to set as the recipient\'s new default for payouts.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postRecipientsIdRequestBodyDefaultCard :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | description: An arbitrary string which you can attach to a \`Recipient\` object. It is displayed alongside the recipient in the web interface.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postRecipientsIdRequestBodyDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | email: The recipient\'s email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postRecipientsIdRequestBodyEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | expand: Specifies which fields in the response should be expanded.
        postRecipientsIdRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
        postRecipientsIdRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | name: The recipient\'s full, legal name. For type \`individual\`, should be in the format \`First Last\`, \`First Middle Last\`, or \`First M Last\` (no prefixes or suffixes). For \`corporation\`, the full, incorporated name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postRecipientsIdRequestBodyName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | tax_id: The recipient\'s tax ID, as a string. For type \`individual\`, the full SSN; for type \`corporation\`, the full EIN.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postRecipientsIdRequestBodyTaxId :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostRecipientsIdRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("bank_account" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyBankAccount obj : "card" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyCard obj : "default_card" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyDefaultCard obj : "description" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyDescription obj : "email" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyEmail obj : "expand" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyExpand obj : "metadata" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyMetadata obj : "name" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyName obj : "tax_id" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyTaxId obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bank_account" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyBankAccount obj) GHC.Base.<> (("card" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyCard obj) GHC.Base.<> (("default_card" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyDefaultCard obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyDescription obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyEmail obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyExpand obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyMetadata obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyName obj) GHC.Base.<> ("tax_id" Data.Aeson.Types.ToJSON..= postRecipientsIdRequestBodyTaxId obj)))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostRecipientsIdRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostRecipientsIdRequestBody" (\obj -> ((((((((GHC.Base.pure PostRecipientsIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_id"))

-- | Create a new 'PostRecipientsIdRequestBody' with all required fields.
mkPostRecipientsIdRequestBody :: PostRecipientsIdRequestBody
mkPostRecipientsIdRequestBody =
  PostRecipientsIdRequestBody
    { postRecipientsIdRequestBodyBankAccount = GHC.Maybe.Nothing,
      postRecipientsIdRequestBodyCard = GHC.Maybe.Nothing,
      postRecipientsIdRequestBodyDefaultCard = GHC.Maybe.Nothing,
      postRecipientsIdRequestBodyDescription = GHC.Maybe.Nothing,
      postRecipientsIdRequestBodyEmail = GHC.Maybe.Nothing,
      postRecipientsIdRequestBodyExpand = GHC.Maybe.Nothing,
      postRecipientsIdRequestBodyMetadata = GHC.Maybe.Nothing,
      postRecipientsIdRequestBodyName = GHC.Maybe.Nothing,
      postRecipientsIdRequestBodyTaxId = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postRecipientsId'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostRecipientsIdResponseError' is used.
data PostRecipientsIdResponse
  = -- | Means either no matching case available or a parse error
    PostRecipientsIdResponseError GHC.Base.String
  | -- | Successful response.
    PostRecipientsIdResponse200 Recipient
  | -- | Error response.
    PostRecipientsIdResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
