{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postSubscriptionSchedulesScheduleCancel
module StripeAPI.Operations.PostSubscriptionSchedulesScheduleCancel where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/subscription_schedules/{schedule}/cancel
--
-- \<p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is \<code>not_started\<\/code> or \<code>active\<\/code>.\<\/p>
postSubscriptionSchedulesScheduleCancel ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | schedule | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostSubscriptionSchedulesScheduleCancelRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostSubscriptionSchedulesScheduleCancelResponse)
postSubscriptionSchedulesScheduleCancel
  schedule
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostSubscriptionSchedulesScheduleCancelResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSubscriptionSchedulesScheduleCancelResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              SubscriptionSchedule
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSubscriptionSchedulesScheduleCancelResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/subscription_schedules/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel schedule)) GHC.Base.++ "/cancel"))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the data type for the schema postSubscriptionSchedulesScheduleCancelRequestBody
data PostSubscriptionSchedulesScheduleCancelRequestBody
  = PostSubscriptionSchedulesScheduleCancelRequestBody
      { -- | expand: Specifies which fields in the response should be expanded.
        postSubscriptionSchedulesScheduleCancelRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | invoice_now: If the subscription schedule is \`active\`, indicates whether or not to generate a final invoice that contains any un-invoiced metered usage and new\/pending proration invoice items. Defaults to \`true\`.
        postSubscriptionSchedulesScheduleCancelRequestBodyInvoiceNow :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | prorate: If the subscription schedule is \`active\`, indicates if the cancellation should be prorated. Defaults to \`true\`.
        postSubscriptionSchedulesScheduleCancelRequestBodyProrate :: (GHC.Maybe.Maybe GHC.Types.Bool)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSubscriptionSchedulesScheduleCancelRequestBody where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "expand" (postSubscriptionSchedulesScheduleCancelRequestBodyExpand obj) : (Data.Aeson..=) "invoice_now" (postSubscriptionSchedulesScheduleCancelRequestBodyInvoiceNow obj) : (Data.Aeson..=) "prorate" (postSubscriptionSchedulesScheduleCancelRequestBodyProrate obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "expand" (postSubscriptionSchedulesScheduleCancelRequestBodyExpand obj) GHC.Base.<> ((Data.Aeson..=) "invoice_now" (postSubscriptionSchedulesScheduleCancelRequestBodyInvoiceNow obj) GHC.Base.<> (Data.Aeson..=) "prorate" (postSubscriptionSchedulesScheduleCancelRequestBodyProrate obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSubscriptionSchedulesScheduleCancelRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSubscriptionSchedulesScheduleCancelRequestBody" (\obj -> ((GHC.Base.pure PostSubscriptionSchedulesScheduleCancelRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_now")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "prorate"))

-- | Represents a response of the operation 'postSubscriptionSchedulesScheduleCancel'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSubscriptionSchedulesScheduleCancelResponseError' is used.
data PostSubscriptionSchedulesScheduleCancelResponse
  = -- | Means either no matching case available or a parse error
    PostSubscriptionSchedulesScheduleCancelResponseError GHC.Base.String
  | -- | Successful response.
    PostSubscriptionSchedulesScheduleCancelResponse200 SubscriptionSchedule
  | -- | Error response.
    PostSubscriptionSchedulesScheduleCancelResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
