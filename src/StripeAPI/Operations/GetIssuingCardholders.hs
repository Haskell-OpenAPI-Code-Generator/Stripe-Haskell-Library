{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getIssuingCardholders
module StripeAPI.Operations.GetIssuingCardholders where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/issuing/cardholders
--
-- \<p>Returns a list of Issuing \<code>Cardholder\<\/code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.\<\/p>
getIssuingCardholders ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetIssuingCardholdersParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetIssuingCardholdersResponse)
getIssuingCardholders parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetIssuingCardholdersResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetIssuingCardholdersResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetIssuingCardholdersResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetIssuingCardholdersResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/issuing/cardholders")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingCardholdersParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "email") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingCardholdersParametersQueryEmail parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingCardholdersParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingCardholdersParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingCardholdersParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "phone_number") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingCardholdersParametersQueryPhoneNumber parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingCardholdersParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingCardholdersParametersQueryStatus parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingCardholdersParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/issuing\/cardholders.GET.parameters@ in the specification.
data GetIssuingCardholdersParameters = GetIssuingCardholdersParameters
  { -- | queryCreated: Represents the parameter named \'created\'
    --
    -- Only return cardholders that were created during the given date interval.
    getIssuingCardholdersParametersQueryCreated :: (GHC.Maybe.Maybe GetIssuingCardholdersParametersQueryCreated'Variants),
    -- | queryEmail: Represents the parameter named \'email\'
    --
    -- Only return cardholders that have the given email address.
    getIssuingCardholdersParametersQueryEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getIssuingCardholdersParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getIssuingCardholdersParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getIssuingCardholdersParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPhone_number: Represents the parameter named \'phone_number\'
    --
    -- Only return cardholders that have the given phone number.
    getIssuingCardholdersParametersQueryPhoneNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getIssuingCardholdersParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryStatus: Represents the parameter named \'status\'
    --
    -- Only return cardholders that have the given status. One of \`active\`, \`inactive\`, or \`blocked\`.
    getIssuingCardholdersParametersQueryStatus :: (GHC.Maybe.Maybe GetIssuingCardholdersParametersQueryStatus'),
    -- | queryType: Represents the parameter named \'type\'
    --
    -- Only return cardholders that have the given type. One of \`individual\` or \`company\`.
    getIssuingCardholdersParametersQueryType :: (GHC.Maybe.Maybe GetIssuingCardholdersParametersQueryType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingCardholdersParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("queryCreated" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated obj : "queryEmail" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryEmail obj : "queryEnding_before" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryEndingBefore obj : "queryExpand" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryExpand obj : "queryLimit" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryLimit obj : "queryPhone_number" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryPhoneNumber obj : "queryStarting_after" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryStartingAfter obj : "queryStatus" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryStatus obj : "queryType" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryType obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryCreated" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated obj) GHC.Base.<> (("queryEmail" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryEmail obj) GHC.Base.<> (("queryEnding_before" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryEndingBefore obj) GHC.Base.<> (("queryExpand" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryExpand obj) GHC.Base.<> (("queryLimit" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryLimit obj) GHC.Base.<> (("queryPhone_number" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryPhoneNumber obj) GHC.Base.<> (("queryStarting_after" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryStartingAfter obj) GHC.Base.<> (("queryStatus" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryStatus obj) GHC.Base.<> ("queryType" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryType obj)))))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingCardholdersParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingCardholdersParameters" (\obj -> ((((((((GHC.Base.pure GetIssuingCardholdersParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEmail")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPhone_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStatus")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryType"))

-- | Create a new 'GetIssuingCardholdersParameters' with all required fields.
mkGetIssuingCardholdersParameters :: GetIssuingCardholdersParameters
mkGetIssuingCardholdersParameters =
  GetIssuingCardholdersParameters
    { getIssuingCardholdersParametersQueryCreated = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryEmail = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryExpand = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryLimit = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryPhoneNumber = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryStartingAfter = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryStatus = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryType = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/issuing\/cardholders.GET.parameters.properties.queryCreated.anyOf@ in the specification.
data GetIssuingCardholdersParametersQueryCreated'OneOf1 = GetIssuingCardholdersParametersQueryCreated'OneOf1
  { -- | gt
    getIssuingCardholdersParametersQueryCreated'OneOf1Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | gte
    getIssuingCardholdersParametersQueryCreated'OneOf1Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lt
    getIssuingCardholdersParametersQueryCreated'OneOf1Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lte
    getIssuingCardholdersParametersQueryCreated'OneOf1Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingCardholdersParametersQueryCreated'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object ("gt" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated'OneOf1Gt obj : "gte" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated'OneOf1Gte obj : "lt" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated'OneOf1Lt obj : "lte" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated'OneOf1Lte obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("gt" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated'OneOf1Gt obj) GHC.Base.<> (("gte" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated'OneOf1Gte obj) GHC.Base.<> (("lt" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated'OneOf1Lt obj) GHC.Base.<> ("lte" Data.Aeson.Types.ToJSON..= getIssuingCardholdersParametersQueryCreated'OneOf1Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingCardholdersParametersQueryCreated'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingCardholdersParametersQueryCreated'OneOf1" (\obj -> (((GHC.Base.pure GetIssuingCardholdersParametersQueryCreated'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Create a new 'GetIssuingCardholdersParametersQueryCreated'OneOf1' with all required fields.
mkGetIssuingCardholdersParametersQueryCreated'OneOf1 :: GetIssuingCardholdersParametersQueryCreated'OneOf1
mkGetIssuingCardholdersParametersQueryCreated'OneOf1 =
  GetIssuingCardholdersParametersQueryCreated'OneOf1
    { getIssuingCardholdersParametersQueryCreated'OneOf1Gt = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryCreated'OneOf1Gte = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryCreated'OneOf1Lt = GHC.Maybe.Nothing,
      getIssuingCardholdersParametersQueryCreated'OneOf1Lte = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/issuing\/cardholders.GET.parameters.properties.queryCreated.anyOf@ in the specification.
--
-- Represents the parameter named \'created\'
--
-- Only return cardholders that were created during the given date interval.
data GetIssuingCardholdersParametersQueryCreated'Variants
  = GetIssuingCardholdersParametersQueryCreated'GetIssuingCardholdersParametersQueryCreated'OneOf1 GetIssuingCardholdersParametersQueryCreated'OneOf1
  | GetIssuingCardholdersParametersQueryCreated'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingCardholdersParametersQueryCreated'Variants where
  toJSON (GetIssuingCardholdersParametersQueryCreated'GetIssuingCardholdersParametersQueryCreated'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetIssuingCardholdersParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingCardholdersParametersQueryCreated'Variants where
  parseJSON val = case (GetIssuingCardholdersParametersQueryCreated'GetIssuingCardholdersParametersQueryCreated'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetIssuingCardholdersParametersQueryCreated'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/issuing\/cardholders.GET.parameters.properties.queryStatus@ in the specification.
--
-- Represents the parameter named \'status\'
--
-- Only return cardholders that have the given status. One of \`active\`, \`inactive\`, or \`blocked\`.
data GetIssuingCardholdersParametersQueryStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetIssuingCardholdersParametersQueryStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetIssuingCardholdersParametersQueryStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    GetIssuingCardholdersParametersQueryStatus'EnumActive
  | -- | Represents the JSON value @"blocked"@
    GetIssuingCardholdersParametersQueryStatus'EnumBlocked
  | -- | Represents the JSON value @"inactive"@
    GetIssuingCardholdersParametersQueryStatus'EnumInactive
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingCardholdersParametersQueryStatus' where
  toJSON (GetIssuingCardholdersParametersQueryStatus'Other val) = val
  toJSON (GetIssuingCardholdersParametersQueryStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetIssuingCardholdersParametersQueryStatus'EnumActive) = "active"
  toJSON (GetIssuingCardholdersParametersQueryStatus'EnumBlocked) = "blocked"
  toJSON (GetIssuingCardholdersParametersQueryStatus'EnumInactive) = "inactive"

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingCardholdersParametersQueryStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> GetIssuingCardholdersParametersQueryStatus'EnumActive
            | val GHC.Classes.== "blocked" -> GetIssuingCardholdersParametersQueryStatus'EnumBlocked
            | val GHC.Classes.== "inactive" -> GetIssuingCardholdersParametersQueryStatus'EnumInactive
            | GHC.Base.otherwise -> GetIssuingCardholdersParametersQueryStatus'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/issuing\/cardholders.GET.parameters.properties.queryType@ in the specification.
--
-- Represents the parameter named \'type\'
--
-- Only return cardholders that have the given type. One of \`individual\` or \`company\`.
data GetIssuingCardholdersParametersQueryType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetIssuingCardholdersParametersQueryType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetIssuingCardholdersParametersQueryType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    GetIssuingCardholdersParametersQueryType'EnumCompany
  | -- | Represents the JSON value @"individual"@
    GetIssuingCardholdersParametersQueryType'EnumIndividual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingCardholdersParametersQueryType' where
  toJSON (GetIssuingCardholdersParametersQueryType'Other val) = val
  toJSON (GetIssuingCardholdersParametersQueryType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetIssuingCardholdersParametersQueryType'EnumCompany) = "company"
  toJSON (GetIssuingCardholdersParametersQueryType'EnumIndividual) = "individual"

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingCardholdersParametersQueryType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "company" -> GetIssuingCardholdersParametersQueryType'EnumCompany
            | val GHC.Classes.== "individual" -> GetIssuingCardholdersParametersQueryType'EnumIndividual
            | GHC.Base.otherwise -> GetIssuingCardholdersParametersQueryType'Other val
      )

-- | Represents a response of the operation 'getIssuingCardholders'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetIssuingCardholdersResponseError' is used.
data GetIssuingCardholdersResponse
  = -- | Means either no matching case available or a parse error
    GetIssuingCardholdersResponseError GHC.Base.String
  | -- | Successful response.
    GetIssuingCardholdersResponse200 GetIssuingCardholdersResponseBody200
  | -- | Error response.
    GetIssuingCardholdersResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/issuing\/cardholders.GET.responses.200.content.application\/json.schema@ in the specification.
data GetIssuingCardholdersResponseBody200 = GetIssuingCardholdersResponseBody200
  { -- | data
    getIssuingCardholdersResponseBody200Data :: ([Issuing'cardholder]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getIssuingCardholdersResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    -- * Must match pattern \'^\/v1\/issuing\/cardholders\'
    getIssuingCardholdersResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingCardholdersResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getIssuingCardholdersResponseBody200Data obj : "has_more" Data.Aeson.Types.ToJSON..= getIssuingCardholdersResponseBody200HasMore obj : "url" Data.Aeson.Types.ToJSON..= getIssuingCardholdersResponseBody200Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getIssuingCardholdersResponseBody200Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= getIssuingCardholdersResponseBody200HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= getIssuingCardholdersResponseBody200Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingCardholdersResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingCardholdersResponseBody200" (\obj -> ((GHC.Base.pure GetIssuingCardholdersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetIssuingCardholdersResponseBody200' with all required fields.
mkGetIssuingCardholdersResponseBody200 ::
  -- | 'getIssuingCardholdersResponseBody200Data'
  [Issuing'cardholder] ->
  -- | 'getIssuingCardholdersResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getIssuingCardholdersResponseBody200Url'
  Data.Text.Internal.Text ->
  GetIssuingCardholdersResponseBody200
mkGetIssuingCardholdersResponseBody200 getIssuingCardholdersResponseBody200Data getIssuingCardholdersResponseBody200HasMore getIssuingCardholdersResponseBody200Url =
  GetIssuingCardholdersResponseBody200
    { getIssuingCardholdersResponseBody200Data = getIssuingCardholdersResponseBody200Data,
      getIssuingCardholdersResponseBody200HasMore = getIssuingCardholdersResponseBody200HasMore,
      getIssuingCardholdersResponseBody200Url = getIssuingCardholdersResponseBody200Url
    }
