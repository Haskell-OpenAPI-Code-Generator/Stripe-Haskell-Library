-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postLinkAccountSessions
module StripeAPI.Operations.PostLinkAccountSessions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/link_account_sessions
-- 
-- \<p>To launch the Financial Connections authorization flow, create a \<code>Session\<\/code>. The sessionâ€™s \<code>client_secret\<\/code> can be used to launch the flow using Stripe.js.\<\/p>
postLinkAccountSessions :: forall m . StripeAPI.Common.MonadHTTP m => PostLinkAccountSessionsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostLinkAccountSessionsResponse) -- ^ Monadic computation which returns the result of the operation
postLinkAccountSessions body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostLinkAccountSessionsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostLinkAccountSessionsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        FinancialConnections'session)
                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostLinkAccountSessionsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                          Error)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/link_account_sessions") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/link_account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostLinkAccountSessionsRequestBody = PostLinkAccountSessionsRequestBody {
  -- | account_holder: The account holder to link accounts for.
  postLinkAccountSessionsRequestBodyAccountHolder :: PostLinkAccountSessionsRequestBodyAccountHolder'
  -- | expand: Specifies which fields in the response should be expanded.
  , postLinkAccountSessionsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | filters: Filters to restrict the kinds of accounts to collect.
  , postLinkAccountSessionsRequestBodyFilters :: (GHC.Maybe.Maybe PostLinkAccountSessionsRequestBodyFilters')
  -- | permissions: List of data features that you would like to request access to.
  -- 
  -- Possible values are \`balances\`, \`transactions\`, \`ownership\`, and \`payment_method\`.
  , postLinkAccountSessionsRequestBodyPermissions :: ([PostLinkAccountSessionsRequestBodyPermissions'])
  -- | return_url: For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postLinkAccountSessionsRequestBodyReturnUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostLinkAccountSessionsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_holder" Data.Aeson.Types.ToJSON..= postLinkAccountSessionsRequestBodyAccountHolder obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyFilters obj) : ["permissions" Data.Aeson.Types.ToJSON..= postLinkAccountSessionsRequestBodyPermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("return_url" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyReturnUrl obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_holder" Data.Aeson.Types.ToJSON..= postLinkAccountSessionsRequestBodyAccountHolder obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("filters" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyFilters obj) : ["permissions" Data.Aeson.Types.ToJSON..= postLinkAccountSessionsRequestBodyPermissions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("return_url" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyReturnUrl obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostLinkAccountSessionsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLinkAccountSessionsRequestBody" (\obj -> ((((GHC.Base.pure PostLinkAccountSessionsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_holder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "filters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "return_url"))
-- | Create a new 'PostLinkAccountSessionsRequestBody' with all required fields.
mkPostLinkAccountSessionsRequestBody :: PostLinkAccountSessionsRequestBodyAccountHolder' -- ^ 'postLinkAccountSessionsRequestBodyAccountHolder'
  -> [PostLinkAccountSessionsRequestBodyPermissions'] -- ^ 'postLinkAccountSessionsRequestBodyPermissions'
  -> PostLinkAccountSessionsRequestBody
mkPostLinkAccountSessionsRequestBody postLinkAccountSessionsRequestBodyAccountHolder postLinkAccountSessionsRequestBodyPermissions = PostLinkAccountSessionsRequestBody{postLinkAccountSessionsRequestBodyAccountHolder = postLinkAccountSessionsRequestBodyAccountHolder,
                                                                                                                                                                        postLinkAccountSessionsRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                                                                                        postLinkAccountSessionsRequestBodyFilters = GHC.Maybe.Nothing,
                                                                                                                                                                        postLinkAccountSessionsRequestBodyPermissions = postLinkAccountSessionsRequestBodyPermissions,
                                                                                                                                                                        postLinkAccountSessionsRequestBodyReturnUrl = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/link_account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account_holder@ in the specification.
-- 
-- The account holder to link accounts for.
data PostLinkAccountSessionsRequestBodyAccountHolder' = PostLinkAccountSessionsRequestBodyAccountHolder' {
  -- | account
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postLinkAccountSessionsRequestBodyAccountHolder'Account :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | customer
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postLinkAccountSessionsRequestBodyAccountHolder'Customer :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | type
  , postLinkAccountSessionsRequestBodyAccountHolder'Type :: PostLinkAccountSessionsRequestBodyAccountHolder'Type'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostLinkAccountSessionsRequestBodyAccountHolder'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyAccountHolder'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyAccountHolder'Customer obj) : ["type" Data.Aeson.Types.ToJSON..= postLinkAccountSessionsRequestBodyAccountHolder'Type obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyAccountHolder'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postLinkAccountSessionsRequestBodyAccountHolder'Customer obj) : ["type" Data.Aeson.Types.ToJSON..= postLinkAccountSessionsRequestBodyAccountHolder'Type obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostLinkAccountSessionsRequestBodyAccountHolder'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLinkAccountSessionsRequestBodyAccountHolder'" (\obj -> ((GHC.Base.pure PostLinkAccountSessionsRequestBodyAccountHolder' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))
-- | Create a new 'PostLinkAccountSessionsRequestBodyAccountHolder'' with all required fields.
mkPostLinkAccountSessionsRequestBodyAccountHolder' :: PostLinkAccountSessionsRequestBodyAccountHolder'Type' -- ^ 'postLinkAccountSessionsRequestBodyAccountHolder'Type'
  -> PostLinkAccountSessionsRequestBodyAccountHolder'
mkPostLinkAccountSessionsRequestBodyAccountHolder' postLinkAccountSessionsRequestBodyAccountHolder'Type = PostLinkAccountSessionsRequestBodyAccountHolder'{postLinkAccountSessionsRequestBodyAccountHolder'Account = GHC.Maybe.Nothing,
                                                                                                                                                           postLinkAccountSessionsRequestBodyAccountHolder'Customer = GHC.Maybe.Nothing,
                                                                                                                                                           postLinkAccountSessionsRequestBodyAccountHolder'Type = postLinkAccountSessionsRequestBodyAccountHolder'Type}
-- | Defines the enum schema located at @paths.\/v1\/link_account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account_holder.properties.type@ in the specification.
-- 
-- 
data PostLinkAccountSessionsRequestBodyAccountHolder'Type' =
   PostLinkAccountSessionsRequestBodyAccountHolder'Type'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostLinkAccountSessionsRequestBodyAccountHolder'Type'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostLinkAccountSessionsRequestBodyAccountHolder'Type'EnumAccount -- ^ Represents the JSON value @"account"@
  | PostLinkAccountSessionsRequestBodyAccountHolder'Type'EnumCustomer -- ^ Represents the JSON value @"customer"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostLinkAccountSessionsRequestBodyAccountHolder'Type'
    where toJSON (PostLinkAccountSessionsRequestBodyAccountHolder'Type'Other val) = val
          toJSON (PostLinkAccountSessionsRequestBodyAccountHolder'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostLinkAccountSessionsRequestBodyAccountHolder'Type'EnumAccount) = "account"
          toJSON (PostLinkAccountSessionsRequestBodyAccountHolder'Type'EnumCustomer) = "customer"
instance Data.Aeson.Types.FromJSON.FromJSON PostLinkAccountSessionsRequestBodyAccountHolder'Type'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "account" -> PostLinkAccountSessionsRequestBodyAccountHolder'Type'EnumAccount
                                            | val GHC.Classes.== "customer" -> PostLinkAccountSessionsRequestBodyAccountHolder'Type'EnumCustomer
                                            | GHC.Base.otherwise -> PostLinkAccountSessionsRequestBodyAccountHolder'Type'Other val)
-- | Defines the object schema located at @paths.\/v1\/link_account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.filters@ in the specification.
-- 
-- Filters to restrict the kinds of accounts to collect.
data PostLinkAccountSessionsRequestBodyFilters' = PostLinkAccountSessionsRequestBodyFilters' {
  -- | countries
  postLinkAccountSessionsRequestBodyFilters'Countries :: ([Data.Text.Internal.Text])
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostLinkAccountSessionsRequestBodyFilters'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["countries" Data.Aeson.Types.ToJSON..= postLinkAccountSessionsRequestBodyFilters'Countries obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["countries" Data.Aeson.Types.ToJSON..= postLinkAccountSessionsRequestBodyFilters'Countries obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostLinkAccountSessionsRequestBodyFilters'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostLinkAccountSessionsRequestBodyFilters'" (\obj -> GHC.Base.pure PostLinkAccountSessionsRequestBodyFilters' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "countries"))
-- | Create a new 'PostLinkAccountSessionsRequestBodyFilters'' with all required fields.
mkPostLinkAccountSessionsRequestBodyFilters' :: [Data.Text.Internal.Text] -- ^ 'postLinkAccountSessionsRequestBodyFilters'Countries'
  -> PostLinkAccountSessionsRequestBodyFilters'
mkPostLinkAccountSessionsRequestBodyFilters' postLinkAccountSessionsRequestBodyFilters'Countries = PostLinkAccountSessionsRequestBodyFilters'{postLinkAccountSessionsRequestBodyFilters'Countries = postLinkAccountSessionsRequestBodyFilters'Countries}
-- | Defines the enum schema located at @paths.\/v1\/link_account_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.permissions.items@ in the specification.
-- 
-- 
data PostLinkAccountSessionsRequestBodyPermissions' =
   PostLinkAccountSessionsRequestBodyPermissions'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostLinkAccountSessionsRequestBodyPermissions'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostLinkAccountSessionsRequestBodyPermissions'EnumBalances -- ^ Represents the JSON value @"balances"@
  | PostLinkAccountSessionsRequestBodyPermissions'EnumOwnership -- ^ Represents the JSON value @"ownership"@
  | PostLinkAccountSessionsRequestBodyPermissions'EnumPaymentMethod -- ^ Represents the JSON value @"payment_method"@
  | PostLinkAccountSessionsRequestBodyPermissions'EnumTransactions -- ^ Represents the JSON value @"transactions"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostLinkAccountSessionsRequestBodyPermissions'
    where toJSON (PostLinkAccountSessionsRequestBodyPermissions'Other val) = val
          toJSON (PostLinkAccountSessionsRequestBodyPermissions'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostLinkAccountSessionsRequestBodyPermissions'EnumBalances) = "balances"
          toJSON (PostLinkAccountSessionsRequestBodyPermissions'EnumOwnership) = "ownership"
          toJSON (PostLinkAccountSessionsRequestBodyPermissions'EnumPaymentMethod) = "payment_method"
          toJSON (PostLinkAccountSessionsRequestBodyPermissions'EnumTransactions) = "transactions"
instance Data.Aeson.Types.FromJSON.FromJSON PostLinkAccountSessionsRequestBodyPermissions'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "balances" -> PostLinkAccountSessionsRequestBodyPermissions'EnumBalances
                                            | val GHC.Classes.== "ownership" -> PostLinkAccountSessionsRequestBodyPermissions'EnumOwnership
                                            | val GHC.Classes.== "payment_method" -> PostLinkAccountSessionsRequestBodyPermissions'EnumPaymentMethod
                                            | val GHC.Classes.== "transactions" -> PostLinkAccountSessionsRequestBodyPermissions'EnumTransactions
                                            | GHC.Base.otherwise -> PostLinkAccountSessionsRequestBodyPermissions'Other val)
-- | Represents a response of the operation 'postLinkAccountSessions'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostLinkAccountSessionsResponseError' is used.
data PostLinkAccountSessionsResponse =
   PostLinkAccountSessionsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostLinkAccountSessionsResponse200 FinancialConnections'session -- ^ Successful response.
  | PostLinkAccountSessionsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
