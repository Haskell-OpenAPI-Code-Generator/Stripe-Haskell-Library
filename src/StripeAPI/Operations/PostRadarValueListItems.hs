-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postRadarValueListItems
module StripeAPI.Operations.PostRadarValueListItems where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/radar/value_list_items
-- 
-- \<p>Creates a new \<code>ValueListItem\<\/code> object, which is added to the specified parent value list.\<\/p>
postRadarValueListItems :: forall m . StripeAPI.Common.MonadHTTP m => PostRadarValueListItemsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostRadarValueListItemsResponse) -- ^ Monadic computation which returns the result of the operation
postRadarValueListItems body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostRadarValueListItemsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostRadarValueListItemsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                        Radar'valueListItem)
                                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostRadarValueListItemsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                          Error)
                                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/radar/value_list_items") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/radar\/value_list_items.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostRadarValueListItemsRequestBody = PostRadarValueListItemsRequestBody {
  -- | expand: Specifies which fields in the response should be expanded.
  postRadarValueListItemsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | value: The value of the item (whose type must match the type of the parent value list).
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 800
  , postRadarValueListItemsRequestBodyValue :: Data.Text.Internal.Text
  -- | value_list: The identifier of the value list which the created item will be added to.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postRadarValueListItemsRequestBodyValueList :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostRadarValueListItemsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postRadarValueListItemsRequestBodyExpand obj) : ["value" Data.Aeson.Types.ToJSON..= postRadarValueListItemsRequestBodyValue obj] : ["value_list" Data.Aeson.Types.ToJSON..= postRadarValueListItemsRequestBodyValueList obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postRadarValueListItemsRequestBodyExpand obj) : ["value" Data.Aeson.Types.ToJSON..= postRadarValueListItemsRequestBodyValue obj] : ["value_list" Data.Aeson.Types.ToJSON..= postRadarValueListItemsRequestBodyValueList obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostRadarValueListItemsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostRadarValueListItemsRequestBody" (\obj -> ((GHC.Base.pure PostRadarValueListItemsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "value")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "value_list"))
-- | Create a new 'PostRadarValueListItemsRequestBody' with all required fields.
mkPostRadarValueListItemsRequestBody :: Data.Text.Internal.Text -- ^ 'postRadarValueListItemsRequestBodyValue'
  -> Data.Text.Internal.Text -- ^ 'postRadarValueListItemsRequestBodyValueList'
  -> PostRadarValueListItemsRequestBody
mkPostRadarValueListItemsRequestBody postRadarValueListItemsRequestBodyValue postRadarValueListItemsRequestBodyValueList = PostRadarValueListItemsRequestBody{postRadarValueListItemsRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                                                                              postRadarValueListItemsRequestBodyValue = postRadarValueListItemsRequestBodyValue,
                                                                                                                                                              postRadarValueListItemsRequestBodyValueList = postRadarValueListItemsRequestBodyValueList}
-- | Represents a response of the operation 'postRadarValueListItems'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostRadarValueListItemsResponseError' is used.
data PostRadarValueListItemsResponse =
   PostRadarValueListItemsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostRadarValueListItemsResponse200 Radar'valueListItem -- ^ Successful response.
  | PostRadarValueListItemsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
