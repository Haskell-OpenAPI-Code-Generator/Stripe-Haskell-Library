{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postPlansPlan
module StripeAPI.Operations.PostPlansPlan where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/plans/{plan}
--
-- \<p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a planâ€™s ID, amount, currency, or billing cycle.\<\/p>
postPlansPlan ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | plan | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostPlansPlanRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostPlansPlanResponse)
postPlansPlan
  plan
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostPlansPlanResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostPlansPlanResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Plan
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostPlansPlanResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/plans/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel plan)) GHC.Base.++ ""))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/plans\/{plan}.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostPlansPlanRequestBody
  = PostPlansPlanRequestBody
      { -- | active: Whether the plan is currently available for new subscriptions.
        postPlansPlanRequestBodyActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | expand: Specifies which fields in the response should be expanded.
        postPlansPlanRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
        postPlansPlanRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | nickname: A brief description of the plan, hidden from customers.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postPlansPlanRequestBodyNickname :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | product: The product the plan belongs to. Note that after updating, statement descriptors and line items of the plan in active subscriptions will be affected.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postPlansPlanRequestBodyProduct :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | trial_period_days: Default number of trial days when subscribing a customer to this plan using [\`trial_from_plan=true\`](https:\/\/stripe.com\/docs\/api\#create_subscription-trial_from_plan).
        postPlansPlanRequestBodyTrialPeriodDays :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostPlansPlanRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("active" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyActive obj : "expand" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyExpand obj : "metadata" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyMetadata obj : "nickname" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyNickname obj : "product" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyProduct obj : "trial_period_days" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyTrialPeriodDays obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("active" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyActive obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyExpand obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyMetadata obj) GHC.Base.<> (("nickname" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyNickname obj) GHC.Base.<> (("product" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyProduct obj) GHC.Base.<> ("trial_period_days" Data.Aeson.Types.ToJSON..= postPlansPlanRequestBodyTrialPeriodDays obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostPlansPlanRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPlansPlanRequestBody" (\obj -> (((((GHC.Base.pure PostPlansPlanRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_period_days"))

-- | Create a new 'PostPlansPlanRequestBody' with all required fields.
mkPostPlansPlanRequestBody :: PostPlansPlanRequestBody
mkPostPlansPlanRequestBody =
  PostPlansPlanRequestBody
    { postPlansPlanRequestBodyActive = GHC.Maybe.Nothing,
      postPlansPlanRequestBodyExpand = GHC.Maybe.Nothing,
      postPlansPlanRequestBodyMetadata = GHC.Maybe.Nothing,
      postPlansPlanRequestBodyNickname = GHC.Maybe.Nothing,
      postPlansPlanRequestBodyProduct = GHC.Maybe.Nothing,
      postPlansPlanRequestBodyTrialPeriodDays = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postPlansPlan'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostPlansPlanResponseError' is used.
data PostPlansPlanResponse
  = -- | Means either no matching case available or a parse error
    PostPlansPlanResponseError GHC.Base.String
  | -- | Successful response.
    PostPlansPlanResponse200 Plan
  | -- | Error response.
    PostPlansPlanResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
