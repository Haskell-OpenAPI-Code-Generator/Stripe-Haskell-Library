{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation deleteCustomersCustomerBankAccountsId
module StripeAPI.Operations.DeleteCustomersCustomerBankAccountsId where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > DELETE /v1/customers/{customer}/bank_accounts/{id}
--
-- \<p>Delete a specified source for a given customer.\<\/p>
deleteCustomersCustomerBankAccountsId ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteCustomersCustomerBankAccountsIdParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response DeleteCustomersCustomerBankAccountsIdResponse)
deleteCustomersCustomerBankAccountsId
  parameters
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either DeleteCustomersCustomerBankAccountsIdResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteCustomersCustomerBankAccountsIdResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              DeleteCustomersCustomerBankAccountsIdResponseBody200
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteCustomersCustomerBankAccountsIdResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/v1/customers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (deleteCustomersCustomerBankAccountsIdParametersPathCustomer parameters))) GHC.Base.++ ("/bank_accounts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (deleteCustomersCustomerBankAccountsIdParametersPathId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.parameters@ in the specification.
data DeleteCustomersCustomerBankAccountsIdParameters = DeleteCustomersCustomerBankAccountsIdParameters
  { -- | pathCustomer: Represents the parameter named \'customer\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdParametersPathCustomer :: Data.Text.Internal.Text,
    -- | pathId: Represents the parameter named \'id\'
    deleteCustomersCustomerBankAccountsIdParametersPathId :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("pathCustomer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdParametersPathCustomer obj : "pathId" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdParametersPathId obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathCustomer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdParametersPathCustomer obj) GHC.Base.<> ("pathId" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdParametersPathId obj))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdParameters" (\obj -> (GHC.Base.pure DeleteCustomersCustomerBankAccountsIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathCustomer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdParameters' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdParameters ::
  -- | 'deleteCustomersCustomerBankAccountsIdParametersPathCustomer'
  Data.Text.Internal.Text ->
  -- | 'deleteCustomersCustomerBankAccountsIdParametersPathId'
  Data.Text.Internal.Text ->
  DeleteCustomersCustomerBankAccountsIdParameters
mkDeleteCustomersCustomerBankAccountsIdParameters deleteCustomersCustomerBankAccountsIdParametersPathCustomer deleteCustomersCustomerBankAccountsIdParametersPathId =
  DeleteCustomersCustomerBankAccountsIdParameters
    { deleteCustomersCustomerBankAccountsIdParametersPathCustomer = deleteCustomersCustomerBankAccountsIdParametersPathCustomer,
      deleteCustomersCustomerBankAccountsIdParametersPathId = deleteCustomersCustomerBankAccountsIdParametersPathId
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data DeleteCustomersCustomerBankAccountsIdRequestBody = DeleteCustomersCustomerBankAccountsIdRequestBody
  { -- | expand: Specifies which fields in the response should be expanded.
    deleteCustomersCustomerBankAccountsIdRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("expand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdRequestBodyExpand obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("expand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdRequestBodyExpand obj)

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdRequestBody" (\obj -> GHC.Base.pure DeleteCustomersCustomerBankAccountsIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdRequestBody' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdRequestBody :: DeleteCustomersCustomerBankAccountsIdRequestBody
mkDeleteCustomersCustomerBankAccountsIdRequestBody = DeleteCustomersCustomerBankAccountsIdRequestBody {deleteCustomersCustomerBankAccountsIdRequestBodyExpand = GHC.Maybe.Nothing}

-- | Represents a response of the operation 'deleteCustomersCustomerBankAccountsId'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteCustomersCustomerBankAccountsIdResponseError' is used.
data DeleteCustomersCustomerBankAccountsIdResponse
  = -- | Means either no matching case available or a parse error
    DeleteCustomersCustomerBankAccountsIdResponseError GHC.Base.String
  | -- | Successful response.
    DeleteCustomersCustomerBankAccountsIdResponse200 DeleteCustomersCustomerBankAccountsIdResponseBody200
  | -- | Error response.
    DeleteCustomersCustomerBankAccountsIdResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf@ in the specification.
data DeleteCustomersCustomerBankAccountsIdResponseBody200 = DeleteCustomersCustomerBankAccountsIdResponseBody200
  { -- | account: The ID of the account that the bank account is associated with.
    deleteCustomersCustomerBankAccountsIdResponseBody200Account :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Variants),
    -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AccountHolderType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | ach_credit_transfer
    deleteCustomersCustomerBankAccountsIdResponseBody200AchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
    -- | ach_debit
    deleteCustomersCustomerBankAccountsIdResponseBody200AchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
    -- | acss_debit
    deleteCustomersCustomerBankAccountsIdResponseBody200AcssDebit :: (GHC.Maybe.Maybe SourceTypeAcssDebit),
    -- | active: True when this bitcoin receiver has received a non-zero amount of bitcoin.
    deleteCustomersCustomerBankAccountsIdResponseBody200Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | address_city: City\/District\/Suburb\/Town\/Village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_country: Billing address country, if provided when creating card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine1Check :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_state: State\/County\/Province\/Region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_zip: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200AddressZipCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | alipay
    deleteCustomersCustomerBankAccountsIdResponseBody200Alipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
    -- | amount: The amount of \`currency\` that you are collecting as payment.
    deleteCustomersCustomerBankAccountsIdResponseBody200Amount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_received: The amount of \`currency\` to which \`bitcoin_amount_received\` has been converted.
    deleteCustomersCustomerBankAccountsIdResponseBody200AmountReceived :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | au_becs_debit
    deleteCustomersCustomerBankAccountsIdResponseBody200AuBecsDebit :: (GHC.Maybe.Maybe SourceTypeAuBecsDebit),
    -- | available_payout_methods: A set of available payout methods for this bank account. Only values from this set should be passed as the \`method\` when creating a payout.
    deleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods :: (GHC.Maybe.Maybe ([DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'])),
    -- | bancontact
    deleteCustomersCustomerBankAccountsIdResponseBody200Bancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
    -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | bitcoin_amount: The amount of bitcoin that the customer should send to fill the receiver. The \`bitcoin_amount\` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.
    deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | bitcoin_amount_received: The amount of bitcoin that has been sent by the customer to this receiver.
    deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinAmountReceived :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | bitcoin_uri: This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinUri :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | business_profile: Business information about the account.
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'),
    -- | business_type: The business type.
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessType :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'),
    -- | capabilities:
    deleteCustomersCustomerBankAccountsIdResponseBody200Capabilities :: (GHC.Maybe.Maybe AccountCapabilities),
    -- | card
    deleteCustomersCustomerBankAccountsIdResponseBody200Card :: (GHC.Maybe.Maybe SourceTypeCard),
    -- | card_present
    deleteCustomersCustomerBankAccountsIdResponseBody200CardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
    -- | charges_enabled: Whether the account can create live charges.
    deleteCustomersCustomerBankAccountsIdResponseBody200ChargesEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | client_secret: The client secret of the source. Used for client-side retrieval using a publishable key.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ClientSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | code_verification:
    deleteCustomersCustomerBankAccountsIdResponseBody200CodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
    -- | company:
    deleteCustomersCustomerBankAccountsIdResponseBody200Company :: (GHC.Maybe.Maybe LegalEntityCompany),
    -- | controller:
    deleteCustomersCustomerBankAccountsIdResponseBody200Controller :: (GHC.Maybe.Maybe AccountController),
    -- | country: The account\'s country.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    deleteCustomersCustomerBankAccountsIdResponseBody200Created :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
    deleteCustomersCustomerBankAccountsIdResponseBody200Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The ID of the customer associated with this Alipay Account.
    deleteCustomersCustomerBankAccountsIdResponseBody200Customer :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Variants),
    -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`. A result of unchecked indicates that CVC was provided but hasn\'t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https:\/\/support.stripe.com\/questions\/check-if-a-card-is-valid-without-a-charge).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200CvcCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | default_currency: Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account\'s country](https:\/\/stripe.com\/docs\/payouts).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200DefaultCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | default_for_currency: Whether this bank account is the default external account for its currency.
    deleteCustomersCustomerBankAccountsIdResponseBody200DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | details_submitted: Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
    deleteCustomersCustomerBankAccountsIdResponseBody200DetailsSubmitted :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200DynamicLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | email: An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | eps
    deleteCustomersCustomerBankAccountsIdResponseBody200Eps :: (GHC.Maybe.Maybe SourceTypeEps),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | external_accounts: External accounts (bank accounts and debit cards) currently attached to this account
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'),
    -- | filled: This flag is initially false and updates to true when the customer sends the \`bitcoin_amount\` to this receiver.
    deleteCustomersCustomerBankAccountsIdResponseBody200Filled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | fingerprint: Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Fingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow: The authentication \`flow\` of the source. \`flow\` is one of \`redirect\`, \`receiver\`, \`code_verification\`, \`none\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Flow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | giropay
    deleteCustomersCustomerBankAccountsIdResponseBody200Giropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | ideal
    deleteCustomersCustomerBankAccountsIdResponseBody200Ideal :: (GHC.Maybe.Maybe SourceTypeIdeal),
    -- | inbound_address: A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200InboundAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | individual: This is an object representing a person associated with a Stripe account.
    --
    -- A platform cannot access a Standard or Express account\'s persons after the account starts onboarding, such as after generating an account link for the account.
    -- See the [Standard onboarding](https:\/\/stripe.com\/docs\/connect\/standard-accounts) or [Express onboarding documentation](https:\/\/stripe.com\/docs\/connect\/express-accounts) for information about platform pre-filling and account onboarding steps.
    --
    -- Related guide: [Handling Identity Verification with the API](https:\/\/stripe.com\/docs\/connect\/identity-verification-api\#person-information).
    deleteCustomersCustomerBankAccountsIdResponseBody200Individual :: (GHC.Maybe.Maybe Person),
    -- | klarna
    deleteCustomersCustomerBankAccountsIdResponseBody200Klarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
    -- | last4: The last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    deleteCustomersCustomerBankAccountsIdResponseBody200Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    deleteCustomersCustomerBankAccountsIdResponseBody200Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | multibanco
    deleteCustomersCustomerBankAccountsIdResponseBody200Multibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
    -- | name: Cardholder name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | owner: Information about the owner of the payment instrument that may be used or required by particular source types.
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'),
    -- | p24
    deleteCustomersCustomerBankAccountsIdResponseBody200P24 :: (GHC.Maybe.Maybe SourceTypeP24),
    -- | payment: The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Payment :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | payment_amount: If the Alipay account object is not reusable, the exact amount that you can create a charge for.
    deleteCustomersCustomerBankAccountsIdResponseBody200PaymentAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | payment_currency: If the Alipay account object is not reusable, the exact currency that you can create a charge for.
    deleteCustomersCustomerBankAccountsIdResponseBody200PaymentCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | payouts_enabled: Whether Stripe can send payouts to this account.
    deleteCustomersCustomerBankAccountsIdResponseBody200PayoutsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | receiver:
    deleteCustomersCustomerBankAccountsIdResponseBody200Receiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
    -- | recipient: The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
    deleteCustomersCustomerBankAccountsIdResponseBody200Recipient :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Variants),
    -- | redirect:
    deleteCustomersCustomerBankAccountsIdResponseBody200Redirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
    -- | refund_address: The refund address of this bitcoin receiver.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200RefundAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | requirements:
    deleteCustomersCustomerBankAccountsIdResponseBody200Requirements :: (GHC.Maybe.Maybe AccountRequirements),
    -- | reusable: True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.
    deleteCustomersCustomerBankAccountsIdResponseBody200Reusable :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing_number: The routing transit number for the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200RoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sepa_debit
    deleteCustomersCustomerBankAccountsIdResponseBody200SepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
    -- | settings: Options for customizing how the account functions within Stripe.
    deleteCustomersCustomerBankAccountsIdResponseBody200Settings :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200Settings'),
    -- | sofort
    deleteCustomersCustomerBankAccountsIdResponseBody200Sofort :: (GHC.Maybe.Maybe SourceTypeSofort),
    -- | source_order:
    deleteCustomersCustomerBankAccountsIdResponseBody200SourceOrder :: (GHC.Maybe.Maybe SourceOrder),
    -- | statement_descriptor: Extra information about a source. This will appear on your customer\'s statement every time you charge the source.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200StatementDescriptor :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a transfer sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send transfers until the bank details are updated.
    --
    -- For external accounts, possible values are \`new\` and \`errored\`. Validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply. If a transfer fails, the status is set to \`errored\` and transfers are stopped until account details are updated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | three_d_secure
    deleteCustomersCustomerBankAccountsIdResponseBody200ThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
    -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200TokenizationMethod :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tos_acceptance:
    deleteCustomersCustomerBankAccountsIdResponseBody200TosAcceptance :: (GHC.Maybe.Maybe AccountTosAcceptance),
    -- | transactions: A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
    deleteCustomersCustomerBankAccountsIdResponseBody200Transactions :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions'),
    -- | type: The Stripe account type. Can be \`standard\`, \`express\`, or \`custom\`.
    deleteCustomersCustomerBankAccountsIdResponseBody200Type :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200Type'),
    -- | uncaptured_funds: This receiver contains uncaptured funds that can be used for a payment or refunded.
    deleteCustomersCustomerBankAccountsIdResponseBody200UncapturedFunds :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | usage: Either \`reusable\` or \`single_use\`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Usage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | used: Whether this Alipay account object has ever been used for a payment.
    deleteCustomersCustomerBankAccountsIdResponseBody200Used :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | used_for_payment: Indicate if this source is used for payment.
    deleteCustomersCustomerBankAccountsIdResponseBody200UsedForPayment :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | username: The username for the Alipay account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Username :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | wechat
    deleteCustomersCustomerBankAccountsIdResponseBody200Wechat :: (GHC.Maybe.Maybe SourceTypeWechat)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("account" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Account obj : "account_holder_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AccountHolderName obj : "account_holder_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AccountHolderType obj : "ach_credit_transfer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AchCreditTransfer obj : "ach_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AchDebit obj : "acss_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AcssDebit obj : "active" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Active obj : "address_city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressCity obj : "address_country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressCountry obj : "address_line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine1 obj : "address_line1_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine1Check obj : "address_line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine2 obj : "address_state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressState obj : "address_zip" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressZip obj : "address_zip_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressZipCheck obj : "alipay" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Alipay obj : "amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Amount obj : "amount_received" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AmountReceived obj : "au_becs_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AuBecsDebit obj : "available_payout_methods" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods obj : "bancontact" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Bancontact obj : "bank_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BankName obj : "bitcoin_amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinAmount obj : "bitcoin_amount_received" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinAmountReceived obj : "bitcoin_uri" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinUri obj : "brand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Brand obj : "business_profile" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile obj : "business_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessType obj : "capabilities" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Capabilities obj : "card" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Card obj : "card_present" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200CardPresent obj : "charges_enabled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ChargesEnabled obj : "client_secret" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ClientSecret obj : "code_verification" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200CodeVerification obj : "company" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Company obj : "controller" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Controller obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Country obj : "created" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Created obj : "currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Currency obj : "customer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Customer obj : "cvc_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200CvcCheck obj : "default_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200DefaultCurrency obj : "default_for_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200DefaultForCurrency obj : "description" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Description obj : "details_submitted" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200DetailsSubmitted obj : "dynamic_last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200DynamicLast4 obj : "email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Email obj : "eps" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Eps obj : "exp_month" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExpYear obj : "external_accounts" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts obj : "filled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Filled obj : "fingerprint" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Fingerprint obj : "flow" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Flow obj : "funding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Funding obj : "giropay" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Giropay obj : "id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Id obj : "ideal" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Ideal obj : "inbound_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200InboundAddress obj : "individual" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Individual obj : "klarna" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Klarna obj : "last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Last4 obj : "livemode" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Livemode obj : "metadata" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Metadata obj : "multibanco" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Multibanco obj : "name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Name obj : "owner" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner obj : "p24" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200P24 obj : "payment" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Payment obj : "payment_amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200PaymentAmount obj : "payment_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200PaymentCurrency obj : "payouts_enabled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200PayoutsEnabled obj : "receiver" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Receiver obj : "recipient" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Recipient obj : "redirect" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Redirect obj : "refund_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200RefundAddress obj : "requirements" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Requirements obj : "reusable" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Reusable obj : "routing_number" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200RoutingNumber obj : "sepa_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200SepaDebit obj : "settings" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings obj : "sofort" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Sofort obj : "source_order" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200SourceOrder obj : "statement_descriptor" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200StatementDescriptor obj : "status" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Status obj : "three_d_secure" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ThreeDSecure obj : "tokenization_method" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200TokenizationMethod obj : "tos_acceptance" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200TosAcceptance obj : "transactions" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Transactions obj : "type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Type obj : "uncaptured_funds" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200UncapturedFunds obj : "usage" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Usage obj : "used" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Used obj : "used_for_payment" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200UsedForPayment obj : "username" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Username obj : "wechat" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Wechat obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "account" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Account obj) GHC.Base.<> (("account_holder_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AccountHolderName obj) GHC.Base.<> (("account_holder_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AccountHolderType obj) GHC.Base.<> (("ach_credit_transfer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AchCreditTransfer obj) GHC.Base.<> (("ach_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AchDebit obj) GHC.Base.<> (("acss_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AcssDebit obj) GHC.Base.<> (("active" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Active obj) GHC.Base.<> (("address_city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressCity obj) GHC.Base.<> (("address_country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressCountry obj) GHC.Base.<> (("address_line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine1 obj) GHC.Base.<> (("address_line1_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine1Check obj) GHC.Base.<> (("address_line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine2 obj) GHC.Base.<> (("address_state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressState obj) GHC.Base.<> (("address_zip" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressZip obj) GHC.Base.<> (("address_zip_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AddressZipCheck obj) GHC.Base.<> (("alipay" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Alipay obj) GHC.Base.<> (("amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Amount obj) GHC.Base.<> (("amount_received" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AmountReceived obj) GHC.Base.<> (("au_becs_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AuBecsDebit obj) GHC.Base.<> (("available_payout_methods" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods obj) GHC.Base.<> (("bancontact" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Bancontact obj) GHC.Base.<> (("bank_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BankName obj) GHC.Base.<> (("bitcoin_amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinAmount obj) GHC.Base.<> (("bitcoin_amount_received" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinAmountReceived obj) GHC.Base.<> (("bitcoin_uri" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinUri obj) GHC.Base.<> (("brand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Brand obj) GHC.Base.<> (("business_profile" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile obj) GHC.Base.<> (("business_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessType obj) GHC.Base.<> (("capabilities" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Capabilities obj) GHC.Base.<> (("card" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Card obj) GHC.Base.<> (("card_present" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200CardPresent obj) GHC.Base.<> (("charges_enabled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ChargesEnabled obj) GHC.Base.<> (("client_secret" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ClientSecret obj) GHC.Base.<> (("code_verification" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200CodeVerification obj) GHC.Base.<> (("company" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Company obj) GHC.Base.<> (("controller" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Controller obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Country obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Created obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Currency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Customer obj) GHC.Base.<> (("cvc_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200CvcCheck obj) GHC.Base.<> (("default_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200DefaultCurrency obj) GHC.Base.<> (("default_for_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200DefaultForCurrency obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Description obj) GHC.Base.<> (("details_submitted" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200DetailsSubmitted obj) GHC.Base.<> (("dynamic_last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200DynamicLast4 obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Email obj) GHC.Base.<> (("eps" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Eps obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExpYear obj) GHC.Base.<> (("external_accounts" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts obj) GHC.Base.<> (("filled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Filled obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Fingerprint obj) GHC.Base.<> (("flow" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Flow obj) GHC.Base.<> (("funding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Funding obj) GHC.Base.<> (("giropay" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Giropay obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Id obj) GHC.Base.<> (("ideal" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Ideal obj) GHC.Base.<> (("inbound_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200InboundAddress obj) GHC.Base.<> (("individual" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Individual obj) GHC.Base.<> (("klarna" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Klarna obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Last4 obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Livemode obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Metadata obj) GHC.Base.<> (("multibanco" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Multibanco obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Name obj) GHC.Base.<> (("owner" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner obj) GHC.Base.<> (("p24" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200P24 obj) GHC.Base.<> (("payment" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Payment obj) GHC.Base.<> (("payment_amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200PaymentAmount obj) GHC.Base.<> (("payment_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200PaymentCurrency obj) GHC.Base.<> (("payouts_enabled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200PayoutsEnabled obj) GHC.Base.<> (("receiver" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Receiver obj) GHC.Base.<> (("recipient" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Recipient obj) GHC.Base.<> (("redirect" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Redirect obj) GHC.Base.<> (("refund_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200RefundAddress obj) GHC.Base.<> (("requirements" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Requirements obj) GHC.Base.<> (("reusable" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Reusable obj) GHC.Base.<> (("routing_number" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200RoutingNumber obj) GHC.Base.<> (("sepa_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200SepaDebit obj) GHC.Base.<> (("settings" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings obj) GHC.Base.<> (("sofort" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Sofort obj) GHC.Base.<> (("source_order" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200SourceOrder obj) GHC.Base.<> (("statement_descriptor" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200StatementDescriptor obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Status obj) GHC.Base.<> (("three_d_secure" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ThreeDSecure obj) GHC.Base.<> (("tokenization_method" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200TokenizationMethod obj) GHC.Base.<> (("tos_acceptance" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200TosAcceptance obj) GHC.Base.<> (("transactions" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Transactions obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Type obj) GHC.Base.<> (("uncaptured_funds" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200UncapturedFunds obj) GHC.Base.<> (("usage" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Usage obj) GHC.Base.<> (("used" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Used obj) GHC.Base.<> (("used_for_payment" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200UsedForPayment obj) GHC.Base.<> (("username" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Username obj) GHC.Base.<> (("wechat" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Wechat obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "account")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "au_becs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_uri")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_profile")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "capabilities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charges_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "controller")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details_submitted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "external_accounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "individual")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reusable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tos_acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncaptured_funds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used_for_payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200 :: DeleteCustomersCustomerBankAccountsIdResponseBody200
mkDeleteCustomersCustomerBankAccountsIdResponseBody200 =
  DeleteCustomersCustomerBankAccountsIdResponseBody200
    { deleteCustomersCustomerBankAccountsIdResponseBody200Account = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AccountHolderName = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AccountHolderType = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AchCreditTransfer = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AchDebit = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AcssDebit = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Active = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AddressCity = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AddressCountry = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine1Check = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AddressLine2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AddressState = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AddressZip = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AddressZipCheck = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Alipay = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Amount = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AmountReceived = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AuBecsDebit = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Bancontact = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BankName = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinAmount = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinAmountReceived = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BitcoinUri = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Brand = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessType = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Capabilities = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Card = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200CardPresent = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ChargesEnabled = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ClientSecret = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200CodeVerification = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Company = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Controller = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Created = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Currency = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Customer = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200CvcCheck = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200DefaultCurrency = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200DefaultForCurrency = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Description = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200DetailsSubmitted = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200DynamicLast4 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Email = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Eps = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExpMonth = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExpYear = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Filled = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Fingerprint = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Flow = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Funding = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Giropay = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Id = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Ideal = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200InboundAddress = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Individual = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Klarna = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Last4 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Livemode = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Metadata = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Multibanco = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Name = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200P24 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Payment = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200PaymentAmount = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200PaymentCurrency = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200PayoutsEnabled = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Receiver = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Recipient = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Redirect = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200RefundAddress = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Requirements = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Reusable = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200RoutingNumber = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200SepaDebit = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Settings = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Sofort = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200SourceOrder = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200StatementDescriptor = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Status = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ThreeDSecure = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200TokenizationMethod = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200TosAcceptance = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Transactions = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Type = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200UncapturedFunds = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Usage = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Used = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200UsedForPayment = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Username = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Wechat = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Variants
  = DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Variants where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Variants where
  parseJSON val = case (DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerBankAccountsIdResponseBody200Account'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.available_payout_methods.items@ in the specification.
data DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'EnumInstant
  | -- | Represents the JSON value @"standard"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods' where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'Other val) = val
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'EnumInstant) = "instant"
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "instant" -> DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'EnumInstant
            | val GHC.Classes.== "standard" -> DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'EnumStandard
            | GHC.Base.otherwise -> DeleteCustomersCustomerBankAccountsIdResponseBody200AvailablePayoutMethods'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.business_profile.anyOf@ in the specification.
--
-- Business information about the account.
data DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile' = DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'
  { -- | mcc: [The merchant category code for the account](https:\/\/stripe.com\/docs\/connect\/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Mcc :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name: The customer-facing business name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | product_description: Internal-only description of the product sold or service provided by the business. It\'s used by Stripe for risk and underwriting purposes.
    --
    -- Constraints:
    --
    -- * Maximum length of 40000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'ProductDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | support_address: A publicly available mailing address for sending support issues to.
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'),
    -- | support_email: A publicly available email address for sending support issues to.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | support_phone: A publicly available phone number to call with support issues.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportPhone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | support_url: A publicly available website for handling support issues.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | url: The business\'s publicly available website.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile' where
  toJSON obj = Data.Aeson.Types.Internal.object ("mcc" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Mcc obj : "name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Name obj : "product_description" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'ProductDescription obj : "support_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress obj : "support_email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportEmail obj : "support_phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportPhone obj : "support_url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportUrl obj : "url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Url obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("mcc" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Mcc obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Name obj) GHC.Base.<> (("product_description" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'ProductDescription obj) GHC.Base.<> (("support_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress obj) GHC.Base.<> (("support_email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportEmail obj) GHC.Base.<> (("support_phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportPhone obj) GHC.Base.<> (("support_url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportUrl obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Url obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'" (\obj -> (((((((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mcc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile' :: DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'
mkDeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile' =
  DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'
    { deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Mcc = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Name = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'ProductDescription = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportEmail = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportPhone = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportUrl = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'Url = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.business_profile.anyOf.properties.support_address.anyOf@ in the specification.
--
-- A publicly available mailing address for sending support issues to.
data DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress' = DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'City obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Country obj : "line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'" (\obj -> (((((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress' :: DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'
mkDeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress' =
  DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'
    { deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'City = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Line1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'Line2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'PostalCode = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200BusinessProfile'SupportAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.business_type@ in the specification.
--
-- The business type.
data DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumCompany
  | -- | Represents the JSON value @"government_entity"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumGovernmentEntity
  | -- | Represents the JSON value @"individual"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumIndividual
  | -- | Represents the JSON value @"non_profit"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumNonProfit
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType' where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'Other val) = val
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumCompany) = "company"
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumGovernmentEntity) = "government_entity"
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumIndividual) = "individual"
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumNonProfit) = "non_profit"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "company" -> DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumCompany
            | val GHC.Classes.== "government_entity" -> DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumGovernmentEntity
            | val GHC.Classes.== "individual" -> DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumIndividual
            | val GHC.Classes.== "non_profit" -> DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'EnumNonProfit
            | GHC.Base.otherwise -> DeleteCustomersCustomerBankAccountsIdResponseBody200BusinessType'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer associated with this Alipay Account.
data DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Variants
  = DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Customer Customer
  | DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'DeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Variants where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Variants where
  parseJSON val = case (DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerBankAccountsIdResponseBody200Customer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts@ in the specification.
--
-- External accounts (bank accounts and debit cards) currently attached to this account
data DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts' = DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'
  { -- | data: The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data :: ([DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data']),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts' where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data obj : "has_more" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'HasMore obj : "url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'" (\obj -> ((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts' ::
  -- | 'deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'
  [DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'] ->
  -- | 'deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'HasMore'
  GHC.Types.Bool ->
  -- | 'deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Url'
  Data.Text.Internal.Text ->
  DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'
mkDeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts' deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'HasMore deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Url =
  DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'
    { deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data = deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'HasMore = deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'HasMore,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Url = deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Url
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf@ in the specification.
data DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data' = DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'
  { -- | account: The ID of the account that the bank account is associated with.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Variants),
    -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AccountHolderType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_city: City\/District\/Suburb\/Town\/Village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_country: Billing address country, if provided when creating card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine1Check :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_state: State\/County\/Province\/Region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_zip: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressZipCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | available_payout_methods: A set of available payout methods for this bank account. Only values from this set should be passed as the \`method\` when creating a payout.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'])),
    -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'BankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter ISO code representing the country the bank account is located in.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The ID of the customer that the bank account is associated with.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Variants),
    -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`. A result of unchecked indicates that CVC was provided but hasn\'t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https:\/\/support.stripe.com\/questions\/check-if-a-card-is-valid-without-a-charge).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'CvcCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | default_for_currency: Whether this bank account is the default external account for its currency.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'DynamicLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Fingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last4: The last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | name: Cardholder name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | recipient: The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Variants),
    -- | routing_number: The routing transit number for the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'RoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a transfer sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send transfers until the bank details are updated.
    --
    -- For external accounts, possible values are \`new\` and \`errored\`. Validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply. If a transfer fails, the status is set to \`errored\` and transfers are stopped until account details are updated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'TokenizationMethod :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data' where
  toJSON obj = Data.Aeson.Types.Internal.object ("account" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account obj : "account_holder_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AccountHolderName obj : "account_holder_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AccountHolderType obj : "address_city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressCity obj : "address_country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressCountry obj : "address_line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine1 obj : "address_line1_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine1Check obj : "address_line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine2 obj : "address_state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressState obj : "address_zip" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressZip obj : "address_zip_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressZipCheck obj : "available_payout_methods" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods obj : "bank_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'BankName obj : "brand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Brand obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Country obj : "currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Currency obj : "customer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer obj : "cvc_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'CvcCheck obj : "default_for_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'DefaultForCurrency obj : "dynamic_last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'DynamicLast4 obj : "exp_month" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'ExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'ExpYear obj : "fingerprint" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Fingerprint obj : "funding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Funding obj : "id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Id obj : "last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Last4 obj : "metadata" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Metadata obj : "name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Name obj : "recipient" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient obj : "routing_number" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'RoutingNumber obj : "status" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Status obj : "tokenization_method" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'TokenizationMethod obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account obj) GHC.Base.<> (("account_holder_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AccountHolderName obj) GHC.Base.<> (("account_holder_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AccountHolderType obj) GHC.Base.<> (("address_city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressCity obj) GHC.Base.<> (("address_country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressCountry obj) GHC.Base.<> (("address_line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine1 obj) GHC.Base.<> (("address_line1_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine1Check obj) GHC.Base.<> (("address_line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine2 obj) GHC.Base.<> (("address_state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressState obj) GHC.Base.<> (("address_zip" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressZip obj) GHC.Base.<> (("address_zip_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressZipCheck obj) GHC.Base.<> (("available_payout_methods" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods obj) GHC.Base.<> (("bank_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'BankName obj) GHC.Base.<> (("brand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Brand obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Country obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Currency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer obj) GHC.Base.<> (("cvc_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'CvcCheck obj) GHC.Base.<> (("default_for_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'DefaultForCurrency obj) GHC.Base.<> (("dynamic_last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'DynamicLast4 obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'ExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'ExpYear obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Fingerprint obj) GHC.Base.<> (("funding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Funding obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Id obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Last4 obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Metadata obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Name obj) GHC.Base.<> (("recipient" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient obj) GHC.Base.<> (("routing_number" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'RoutingNumber obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Status obj) GHC.Base.<> (("tokenization_method" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'TokenizationMethod obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account")))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'" (\obj -> (((((((((((((((((((((((((((((((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data' :: DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'
mkDeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data' =
  DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'
    { deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AccountHolderName = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AccountHolderType = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressCity = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressCountry = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine1Check = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressLine2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressState = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressZip = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AddressZipCheck = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'BankName = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Brand = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Currency = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'CvcCheck = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'DefaultForCurrency = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'DynamicLast4 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'ExpMonth = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'ExpYear = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Fingerprint = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Funding = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Id = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Last4 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Metadata = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Name = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'RoutingNumber = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Status = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'TokenizationMethod = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Variants
  = DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Variants where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Variants where
  parseJSON val = case (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Account'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.available_payout_methods.items@ in the specification.
data DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumInstant
  | -- | Represents the JSON value @"standard"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods' where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Other val) = val
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumInstant) = "instant"
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "instant" -> DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumInstant
            | val GHC.Classes.== "standard" -> DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumStandard
            | GHC.Base.otherwise -> DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer that the bank account is associated with.
data DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Variants
  = DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Customer Customer
  | DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'DeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Variants where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Variants where
  parseJSON val = case (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Customer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.recipient.anyOf@ in the specification.
--
-- The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
data DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Variants
  = DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Recipient Recipient
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Variants where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Recipient a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Variants where
  parseJSON val = case (DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerBankAccountsIdResponseBody200ExternalAccounts'Data'Recipient'Recipient Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.owner.anyOf@ in the specification.
--
-- Information about the owner of the payment instrument that may be used or required by particular source types.
data DeleteCustomersCustomerBankAccountsIdResponseBody200Owner' = DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'
  { -- | address: Owner\'s address.
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'),
    -- | email: Owner\'s email address.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name: Owner\'s full name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone: Owner\'s phone number (including extension).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verified_address: Verified owner\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress :: (GHC.Maybe.Maybe DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'),
    -- | verified_email: Verified owner\'s email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verified_name: Verified owner\'s full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verified_phone: Verified owner\'s phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedPhone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Owner' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address obj : "email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Email obj : "name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Name obj : "phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Phone obj : "verified_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress obj : "verified_email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedEmail obj : "verified_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedName obj : "verified_phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedPhone obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Email obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Name obj) GHC.Base.<> (("phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Phone obj) GHC.Base.<> (("verified_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress obj) GHC.Base.<> (("verified_email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedEmail obj) GHC.Base.<> (("verified_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedName obj) GHC.Base.<> ("verified_phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedPhone obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Owner' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'" (\obj -> (((((((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200Owner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Owner' :: DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Owner' =
  DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'
    { deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Email = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Name = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Phone = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedEmail = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedName = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedPhone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.owner.anyOf.properties.address.anyOf@ in the specification.
--
-- Owner\\\'s address.
data DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address' = DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'City obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Country obj : "line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'" (\obj -> (((((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address' :: DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address' =
  DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'
    { deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'City = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Line1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'Line2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'PostalCode = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'Address'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.owner.anyOf.properties.verified_address.anyOf@ in the specification.
--
-- Verified owner\\\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
data DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress' = DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'City obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Country obj : "line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'" (\obj -> (((((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress' :: DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress' =
  DeleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'
    { deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'City = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Line1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'Line2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'PostalCode = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Owner'VerifiedAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.recipient.anyOf@ in the specification.
--
-- The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
data DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Variants
  = DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Recipient Recipient
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Variants where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Recipient a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Variants where
  parseJSON val = case (DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerBankAccountsIdResponseBody200Recipient'Recipient Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.settings.anyOf@ in the specification.
--
-- Options for customizing how the account functions within Stripe.
data DeleteCustomersCustomerBankAccountsIdResponseBody200Settings' = DeleteCustomersCustomerBankAccountsIdResponseBody200Settings'
  { -- | bacs_debit_payments:
    deleteCustomersCustomerBankAccountsIdResponseBody200Settings'BacsDebitPayments :: (GHC.Maybe.Maybe AccountBacsDebitPaymentsSettings),
    -- | branding:
    deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Branding :: (GHC.Maybe.Maybe AccountBrandingSettings),
    -- | card_issuing:
    deleteCustomersCustomerBankAccountsIdResponseBody200Settings'CardIssuing :: (GHC.Maybe.Maybe AccountCardIssuingSettings),
    -- | card_payments:
    deleteCustomersCustomerBankAccountsIdResponseBody200Settings'CardPayments :: (GHC.Maybe.Maybe AccountCardPaymentsSettings),
    -- | dashboard:
    deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Dashboard :: (GHC.Maybe.Maybe AccountDashboardSettings),
    -- | payments:
    deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Payments :: (GHC.Maybe.Maybe AccountPaymentsSettings),
    -- | payouts:
    deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Payouts :: (GHC.Maybe.Maybe AccountPayoutSettings),
    -- | sepa_debit_payments:
    deleteCustomersCustomerBankAccountsIdResponseBody200Settings'SepaDebitPayments :: (GHC.Maybe.Maybe AccountSepaDebitPaymentsSettings)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Settings' where
  toJSON obj = Data.Aeson.Types.Internal.object ("bacs_debit_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'BacsDebitPayments obj : "branding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Branding obj : "card_issuing" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'CardIssuing obj : "card_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'CardPayments obj : "dashboard" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Dashboard obj : "payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Payments obj : "payouts" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Payouts obj : "sepa_debit_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'SepaDebitPayments obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bacs_debit_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'BacsDebitPayments obj) GHC.Base.<> (("branding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Branding obj) GHC.Base.<> (("card_issuing" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'CardIssuing obj) GHC.Base.<> (("card_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'CardPayments obj) GHC.Base.<> (("dashboard" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Dashboard obj) GHC.Base.<> (("payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Payments obj) GHC.Base.<> (("payouts" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Payouts obj) GHC.Base.<> ("sepa_debit_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Settings'SepaDebitPayments obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Settings' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200Settings'" (\obj -> (((((((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200Settings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bacs_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "branding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_issuing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dashboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit_payments"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200Settings'' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Settings' :: DeleteCustomersCustomerBankAccountsIdResponseBody200Settings'
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Settings' =
  DeleteCustomersCustomerBankAccountsIdResponseBody200Settings'
    { deleteCustomersCustomerBankAccountsIdResponseBody200Settings'BacsDebitPayments = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Branding = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Settings'CardIssuing = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Settings'CardPayments = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Dashboard = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Payments = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Settings'Payouts = GHC.Maybe.Nothing,
      deleteCustomersCustomerBankAccountsIdResponseBody200Settings'SepaDebitPayments = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.transactions@ in the specification.
--
-- A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
data DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions' = DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions'
  { -- | data: Details about each object.
    deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Data :: ([BitcoinTransaction]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions' where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Data obj : "has_more" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'HasMore obj : "url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions'" (\obj -> ((GHC.Base.pure DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions'' with all required fields.
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Transactions' ::
  -- | 'deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Data'
  [BitcoinTransaction] ->
  -- | 'deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'HasMore'
  GHC.Types.Bool ->
  -- | 'deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Url'
  Data.Text.Internal.Text ->
  DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions'
mkDeleteCustomersCustomerBankAccountsIdResponseBody200Transactions' deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Data deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'HasMore deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Url =
  DeleteCustomersCustomerBankAccountsIdResponseBody200Transactions'
    { deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Data = deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Data,
      deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'HasMore = deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'HasMore,
      deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Url = deleteCustomersCustomerBankAccountsIdResponseBody200Transactions'Url
    }

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/bank_accounts\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.type@ in the specification.
--
-- The Stripe account type. Can be \`standard\`, \`express\`, or \`custom\`.
data DeleteCustomersCustomerBankAccountsIdResponseBody200Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerBankAccountsIdResponseBody200Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerBankAccountsIdResponseBody200Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"custom"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200Type'EnumCustom
  | -- | Represents the JSON value @"express"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200Type'EnumExpress
  | -- | Represents the JSON value @"standard"@
    DeleteCustomersCustomerBankAccountsIdResponseBody200Type'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Type' where
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Type'Other val) = val
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Type'EnumCustom) = "custom"
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Type'EnumExpress) = "express"
  toJSON (DeleteCustomersCustomerBankAccountsIdResponseBody200Type'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerBankAccountsIdResponseBody200Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "custom" -> DeleteCustomersCustomerBankAccountsIdResponseBody200Type'EnumCustom
            | val GHC.Classes.== "express" -> DeleteCustomersCustomerBankAccountsIdResponseBody200Type'EnumExpress
            | val GHC.Classes.== "standard" -> DeleteCustomersCustomerBankAccountsIdResponseBody200Type'EnumStandard
            | GHC.Base.otherwise -> DeleteCustomersCustomerBankAccountsIdResponseBody200Type'Other val
      )
