{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getAppsSecrets
module StripeAPI.Operations.GetAppsSecrets where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/apps/secrets
--
-- \<p>List all secrets stored on the given scope.\<\/p>
getAppsSecrets ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetAppsSecretsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetAppsSecretsResponse)
getAppsSecrets parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetAppsSecretsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetAppsSecretsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetAppsSecretsResponseBody200
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetAppsSecretsResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/v1/apps/secrets"
        [ StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAppsSecretsParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAppsSecretsParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAppsSecretsParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "scope") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getAppsSecretsParametersQueryScope parameters)) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAppsSecretsParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/apps\/secrets.GET.parameters@ in the specification.
data GetAppsSecretsParameters = GetAppsSecretsParameters
  { -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAppsSecretsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getAppsSecretsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getAppsSecretsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryScope: Represents the parameter named \'scope\'
    --
    -- Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
    getAppsSecretsParametersQueryScope :: GetAppsSecretsParametersQueryScope',
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAppsSecretsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAppsSecretsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryLimit obj) : ["queryScope" Data.Aeson.Types.ToJSON..= getAppsSecretsParametersQueryScope obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryStartingAfter obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryLimit obj) : ["queryScope" Data.Aeson.Types.ToJSON..= getAppsSecretsParametersQueryScope obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryStartingAfter obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetAppsSecretsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAppsSecretsParameters" (\obj -> ((((GHC.Base.pure GetAppsSecretsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryScope")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))

-- | Create a new 'GetAppsSecretsParameters' with all required fields.
mkGetAppsSecretsParameters ::
  -- | 'getAppsSecretsParametersQueryScope'
  GetAppsSecretsParametersQueryScope' ->
  GetAppsSecretsParameters
mkGetAppsSecretsParameters getAppsSecretsParametersQueryScope =
  GetAppsSecretsParameters
    { getAppsSecretsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getAppsSecretsParametersQueryExpand = GHC.Maybe.Nothing,
      getAppsSecretsParametersQueryLimit = GHC.Maybe.Nothing,
      getAppsSecretsParametersQueryScope = getAppsSecretsParametersQueryScope,
      getAppsSecretsParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/apps\/secrets.GET.parameters.properties.queryScope@ in the specification.
--
-- Represents the parameter named \'scope\'
--
-- Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user.
data GetAppsSecretsParametersQueryScope' = GetAppsSecretsParametersQueryScope'
  { -- | type
    getAppsSecretsParametersQueryScope'Type :: GetAppsSecretsParametersQueryScope'Type',
    -- | user
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getAppsSecretsParametersQueryScope'User :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAppsSecretsParametersQueryScope' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= getAppsSecretsParametersQueryScope'Type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryScope'User obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["type" Data.Aeson.Types.ToJSON..= getAppsSecretsParametersQueryScope'Type obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user" Data.Aeson.Types.ToJSON..=)) (getAppsSecretsParametersQueryScope'User obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetAppsSecretsParametersQueryScope' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAppsSecretsParametersQueryScope'" (\obj -> (GHC.Base.pure GetAppsSecretsParametersQueryScope' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user"))

-- | Create a new 'GetAppsSecretsParametersQueryScope'' with all required fields.
mkGetAppsSecretsParametersQueryScope' ::
  -- | 'getAppsSecretsParametersQueryScope'Type'
  GetAppsSecretsParametersQueryScope'Type' ->
  GetAppsSecretsParametersQueryScope'
mkGetAppsSecretsParametersQueryScope' getAppsSecretsParametersQueryScope'Type =
  GetAppsSecretsParametersQueryScope'
    { getAppsSecretsParametersQueryScope'Type = getAppsSecretsParametersQueryScope'Type,
      getAppsSecretsParametersQueryScope'User = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/apps\/secrets.GET.parameters.properties.queryScope.properties.type@ in the specification.
data GetAppsSecretsParametersQueryScope'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetAppsSecretsParametersQueryScope'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetAppsSecretsParametersQueryScope'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"account"@
    GetAppsSecretsParametersQueryScope'Type'EnumAccount
  | -- | Represents the JSON value @"user"@
    GetAppsSecretsParametersQueryScope'Type'EnumUser
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetAppsSecretsParametersQueryScope'Type' where
  toJSON (GetAppsSecretsParametersQueryScope'Type'Other val) = val
  toJSON (GetAppsSecretsParametersQueryScope'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetAppsSecretsParametersQueryScope'Type'EnumAccount) = "account"
  toJSON (GetAppsSecretsParametersQueryScope'Type'EnumUser) = "user"

instance Data.Aeson.Types.FromJSON.FromJSON GetAppsSecretsParametersQueryScope'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "account" -> GetAppsSecretsParametersQueryScope'Type'EnumAccount
            | val GHC.Classes.== "user" -> GetAppsSecretsParametersQueryScope'Type'EnumUser
            | GHC.Base.otherwise -> GetAppsSecretsParametersQueryScope'Type'Other val
      )

-- | Represents a response of the operation 'getAppsSecrets'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAppsSecretsResponseError' is used.
data GetAppsSecretsResponse
  = -- | Means either no matching case available or a parse error
    GetAppsSecretsResponseError GHC.Base.String
  | -- | Successful response.
    GetAppsSecretsResponse200 GetAppsSecretsResponseBody200
  | -- | Error response.
    GetAppsSecretsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/apps\/secrets.GET.responses.200.content.application\/json.schema@ in the specification.
data GetAppsSecretsResponseBody200 = GetAppsSecretsResponseBody200
  { -- | data
    getAppsSecretsResponseBody200Data :: ([Apps'secret]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getAppsSecretsResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    -- * Must match pattern \'^\/v1\/apps\/secrets\'
    getAppsSecretsResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetAppsSecretsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getAppsSecretsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getAppsSecretsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getAppsSecretsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getAppsSecretsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getAppsSecretsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getAppsSecretsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetAppsSecretsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAppsSecretsResponseBody200" (\obj -> ((GHC.Base.pure GetAppsSecretsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetAppsSecretsResponseBody200' with all required fields.
mkGetAppsSecretsResponseBody200 ::
  -- | 'getAppsSecretsResponseBody200Data'
  [Apps'secret] ->
  -- | 'getAppsSecretsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getAppsSecretsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetAppsSecretsResponseBody200
mkGetAppsSecretsResponseBody200 getAppsSecretsResponseBody200Data getAppsSecretsResponseBody200HasMore getAppsSecretsResponseBody200Url =
  GetAppsSecretsResponseBody200
    { getAppsSecretsResponseBody200Data = getAppsSecretsResponseBody200Data,
      getAppsSecretsResponseBody200HasMore = getAppsSecretsResponseBody200HasMore,
      getAppsSecretsResponseBody200Url = getAppsSecretsResponseBody200Url
    }
