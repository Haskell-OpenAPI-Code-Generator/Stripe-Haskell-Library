-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postChargesChargeRefunds
module StripeAPI.Operations.PostChargesChargeRefunds where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/charges/{charge}/refunds
-- 
-- \<p>Create a refund.\<\/p>
postChargesChargeRefunds :: forall m . StripeAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ charge | Constraints: Maximum length of 5000
  -> GHC.Maybe.Maybe PostChargesChargeRefundsRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostChargesChargeRefundsResponse) -- ^ Monadic computation which returns the result of the operation
postChargesChargeRefunds charge
                         body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostChargesChargeRefundsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostChargesChargeRefundsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                           Refund)
                                                                                                                                                                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostChargesChargeRefundsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                             Error)
                                                                                                                                                                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/charges/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel charge)) GHC.Base.++ "/refunds"))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/charges\/{charge}\/refunds.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostChargesChargeRefundsRequestBody = PostChargesChargeRefundsRequestBody {
  -- | amount
  postChargesChargeRefundsRequestBodyAmount :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | expand: Specifies which fields in the response should be expanded.
  , postChargesChargeRefundsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | instructions_email
  , postChargesChargeRefundsRequestBodyInstructionsEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
  , postChargesChargeRefundsRequestBodyMetadata :: (GHC.Maybe.Maybe PostChargesChargeRefundsRequestBodyMetadata'Variants)
  -- | payment_intent
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postChargesChargeRefundsRequestBodyPaymentIntent :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | reason
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postChargesChargeRefundsRequestBodyReason :: (GHC.Maybe.Maybe PostChargesChargeRefundsRequestBodyReason')
  -- | refund_application_fee
  , postChargesChargeRefundsRequestBodyRefundApplicationFee :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | reverse_transfer
  , postChargesChargeRefundsRequestBodyReverseTransfer :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeRefundsRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instructions_email" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyInstructionsEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyPaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refund_application_fee" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyRefundApplicationFee obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reverse_transfer" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyReverseTransfer obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instructions_email" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyInstructionsEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyPaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refund_application_fee" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyRefundApplicationFee obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reverse_transfer" Data.Aeson.Types.ToJSON..=)) (postChargesChargeRefundsRequestBodyReverseTransfer obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundsRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostChargesChargeRefundsRequestBody" (\obj -> (((((((GHC.Base.pure PostChargesChargeRefundsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "instructions_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "refund_application_fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reverse_transfer"))
-- | Create a new 'PostChargesChargeRefundsRequestBody' with all required fields.
mkPostChargesChargeRefundsRequestBody :: PostChargesChargeRefundsRequestBody
mkPostChargesChargeRefundsRequestBody = PostChargesChargeRefundsRequestBody{postChargesChargeRefundsRequestBodyAmount = GHC.Maybe.Nothing,
                                                                            postChargesChargeRefundsRequestBodyExpand = GHC.Maybe.Nothing,
                                                                            postChargesChargeRefundsRequestBodyInstructionsEmail = GHC.Maybe.Nothing,
                                                                            postChargesChargeRefundsRequestBodyMetadata = GHC.Maybe.Nothing,
                                                                            postChargesChargeRefundsRequestBodyPaymentIntent = GHC.Maybe.Nothing,
                                                                            postChargesChargeRefundsRequestBodyReason = GHC.Maybe.Nothing,
                                                                            postChargesChargeRefundsRequestBodyRefundApplicationFee = GHC.Maybe.Nothing,
                                                                            postChargesChargeRefundsRequestBodyReverseTransfer = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/charges\/{charge}\/refunds.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.metadata.anyOf@ in the specification.
-- 
-- Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
data PostChargesChargeRefundsRequestBodyMetadata'Variants =
   PostChargesChargeRefundsRequestBodyMetadata'EmptyString -- ^ Represents the JSON value @""@
  | PostChargesChargeRefundsRequestBodyMetadata'Object Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeRefundsRequestBodyMetadata'Variants
    where toJSON (PostChargesChargeRefundsRequestBodyMetadata'Object a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostChargesChargeRefundsRequestBodyMetadata'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundsRequestBodyMetadata'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostChargesChargeRefundsRequestBodyMetadata'EmptyString
                             | GHC.Base.otherwise -> case (PostChargesChargeRefundsRequestBodyMetadata'Object Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema located at @paths.\/v1\/charges\/{charge}\/refunds.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.reason@ in the specification.
-- 
-- 
data PostChargesChargeRefundsRequestBodyReason' =
   PostChargesChargeRefundsRequestBodyReason'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostChargesChargeRefundsRequestBodyReason'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostChargesChargeRefundsRequestBodyReason'EnumDuplicate -- ^ Represents the JSON value @"duplicate"@
  | PostChargesChargeRefundsRequestBodyReason'EnumFraudulent -- ^ Represents the JSON value @"fraudulent"@
  | PostChargesChargeRefundsRequestBodyReason'EnumRequestedByCustomer -- ^ Represents the JSON value @"requested_by_customer"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeRefundsRequestBodyReason'
    where toJSON (PostChargesChargeRefundsRequestBodyReason'Other val) = val
          toJSON (PostChargesChargeRefundsRequestBodyReason'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostChargesChargeRefundsRequestBodyReason'EnumDuplicate) = "duplicate"
          toJSON (PostChargesChargeRefundsRequestBodyReason'EnumFraudulent) = "fraudulent"
          toJSON (PostChargesChargeRefundsRequestBodyReason'EnumRequestedByCustomer) = "requested_by_customer"
instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundsRequestBodyReason'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "duplicate" -> PostChargesChargeRefundsRequestBodyReason'EnumDuplicate
                                            | val GHC.Classes.== "fraudulent" -> PostChargesChargeRefundsRequestBodyReason'EnumFraudulent
                                            | val GHC.Classes.== "requested_by_customer" -> PostChargesChargeRefundsRequestBodyReason'EnumRequestedByCustomer
                                            | GHC.Base.otherwise -> PostChargesChargeRefundsRequestBodyReason'Other val)
-- | Represents a response of the operation 'postChargesChargeRefunds'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostChargesChargeRefundsResponseError' is used.
data PostChargesChargeRefundsResponse =
   PostChargesChargeRefundsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostChargesChargeRefundsResponse200 Refund -- ^ Successful response.
  | PostChargesChargeRefundsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
