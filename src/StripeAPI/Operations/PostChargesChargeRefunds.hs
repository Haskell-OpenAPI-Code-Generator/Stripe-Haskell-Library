{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postChargesChargeRefunds
module StripeAPI.Operations.PostChargesChargeRefunds where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/charges/{charge}/refunds
--
-- \<p>Create a refund.\<\/p>
postChargesChargeRefunds ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | charge | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostChargesChargeRefundsRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostChargesChargeRefundsResponse)
postChargesChargeRefunds
  charge
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostChargesChargeRefundsResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostChargesChargeRefundsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Refund
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostChargesChargeRefundsResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/charges/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel charge)) GHC.Base.++ "/refunds"))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the data type for the schema postChargesChargeRefundsRequestBody
data PostChargesChargeRefundsRequestBody
  = PostChargesChargeRefundsRequestBody
      { -- | amount
        postChargesChargeRefundsRequestBodyAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | expand: Specifies which fields in the response should be expanded.
        postChargesChargeRefundsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
        postChargesChargeRefundsRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | payment_intent
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postChargesChargeRefundsRequestBodyPaymentIntent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | reason
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postChargesChargeRefundsRequestBodyReason :: (GHC.Maybe.Maybe PostChargesChargeRefundsRequestBodyReason'),
        -- | refund_application_fee
        postChargesChargeRefundsRequestBodyRefundApplicationFee :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | reverse_transfer
        postChargesChargeRefundsRequestBodyReverseTransfer :: (GHC.Maybe.Maybe GHC.Types.Bool)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeRefundsRequestBody where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (postChargesChargeRefundsRequestBodyAmount obj) : (Data.Aeson..=) "expand" (postChargesChargeRefundsRequestBodyExpand obj) : (Data.Aeson..=) "metadata" (postChargesChargeRefundsRequestBodyMetadata obj) : (Data.Aeson..=) "payment_intent" (postChargesChargeRefundsRequestBodyPaymentIntent obj) : (Data.Aeson..=) "reason" (postChargesChargeRefundsRequestBodyReason obj) : (Data.Aeson..=) "refund_application_fee" (postChargesChargeRefundsRequestBodyRefundApplicationFee obj) : (Data.Aeson..=) "reverse_transfer" (postChargesChargeRefundsRequestBodyReverseTransfer obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (postChargesChargeRefundsRequestBodyAmount obj) GHC.Base.<> ((Data.Aeson..=) "expand" (postChargesChargeRefundsRequestBodyExpand obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (postChargesChargeRefundsRequestBodyMetadata obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (postChargesChargeRefundsRequestBodyPaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "reason" (postChargesChargeRefundsRequestBodyReason obj) GHC.Base.<> ((Data.Aeson..=) "refund_application_fee" (postChargesChargeRefundsRequestBodyRefundApplicationFee obj) GHC.Base.<> (Data.Aeson..=) "reverse_transfer" (postChargesChargeRefundsRequestBodyReverseTransfer obj)))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundsRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostChargesChargeRefundsRequestBody" (\obj -> ((((((GHC.Base.pure PostChargesChargeRefundsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_application_fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reverse_transfer"))

-- | Defines the enum schema postChargesChargeRefundsRequestBodyReason\'
data PostChargesChargeRefundsRequestBodyReason'
  = PostChargesChargeRefundsRequestBodyReason'EnumOther Data.Aeson.Types.Internal.Value
  | PostChargesChargeRefundsRequestBodyReason'EnumTyped Data.Text.Internal.Text
  | PostChargesChargeRefundsRequestBodyReason'EnumStringDuplicate
  | PostChargesChargeRefundsRequestBodyReason'EnumStringFraudulent
  | PostChargesChargeRefundsRequestBodyReason'EnumStringRequestedByCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeRefundsRequestBodyReason' where
  toJSON (PostChargesChargeRefundsRequestBodyReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PostChargesChargeRefundsRequestBodyReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PostChargesChargeRefundsRequestBodyReason'EnumStringDuplicate) = "duplicate"
  toJSON (PostChargesChargeRefundsRequestBodyReason'EnumStringFraudulent) = "fraudulent"
  toJSON (PostChargesChargeRefundsRequestBodyReason'EnumStringRequestedByCustomer) = "requested_by_customer"

instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundsRequestBodyReason' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "duplicate" -> PostChargesChargeRefundsRequestBodyReason'EnumStringDuplicate
            | val GHC.Classes.== "fraudulent" -> PostChargesChargeRefundsRequestBodyReason'EnumStringFraudulent
            | val GHC.Classes.== "requested_by_customer" -> PostChargesChargeRefundsRequestBodyReason'EnumStringRequestedByCustomer
            | GHC.Base.otherwise -> PostChargesChargeRefundsRequestBodyReason'EnumOther val
      )

-- | Represents a response of the operation 'postChargesChargeRefunds'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostChargesChargeRefundsResponseError' is used.
data PostChargesChargeRefundsResponse
  = -- | Means either no matching case available or a parse error
    PostChargesChargeRefundsResponseError GHC.Base.String
  | -- | Successful response.
    PostChargesChargeRefundsResponse200 Refund
  | -- | Error response.
    PostChargesChargeRefundsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
