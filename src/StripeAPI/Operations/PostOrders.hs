{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postOrders
module StripeAPI.Operations.PostOrders where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/orders
--
-- \<p>Creates a new order object.\<\/p>
postOrders ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostOrdersRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostOrdersResponse)
postOrders body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostOrdersResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostOrdersResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Order
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostOrdersResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/orders") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/orders.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostOrdersRequestBody = PostOrdersRequestBody
  { -- | coupon: A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyCoupon :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    postOrdersRequestBodyCurrency :: Data.Text.Internal.Text,
    -- | customer: The ID of an existing customer to use for this order. If provided, the customer email and shipping address will be used to create the order. Subsequently, the customer will also be charged to pay the order. If \`email\` or \`shipping\` are also provided, they will override the values retrieved from the customer object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyCustomer :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | email: The email address of the customer placing the order.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | expand: Specifies which fields in the response should be expanded.
    postOrdersRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | items: List of items constituting the order. An order can have up to 25 items.
    postOrdersRequestBodyItems :: (GHC.Maybe.Maybe ([PostOrdersRequestBodyItems'])),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
    postOrdersRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | shipping: Shipping address for the order. Required if any of the SKUs are for products that have \`shippable\` set to true.
    postOrdersRequestBodyShipping :: (GHC.Maybe.Maybe PostOrdersRequestBodyShipping')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostOrdersRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("coupon" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyCoupon obj : "currency" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyCurrency obj : "customer" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyCustomer obj : "email" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyEmail obj : "expand" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyExpand obj : "items" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems obj : "metadata" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyMetadata obj : "shipping" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("coupon" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyCoupon obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyCurrency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyCustomer obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyEmail obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyExpand obj) GHC.Base.<> (("items" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyMetadata obj) GHC.Base.<> ("shipping" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostOrdersRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostOrdersRequestBody" (\obj -> (((((((GHC.Base.pure PostOrdersRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping"))

-- | Create a new 'PostOrdersRequestBody' with all required fields.
mkPostOrdersRequestBody ::
  -- | 'postOrdersRequestBodyCurrency'
  Data.Text.Internal.Text ->
  PostOrdersRequestBody
mkPostOrdersRequestBody postOrdersRequestBodyCurrency =
  PostOrdersRequestBody
    { postOrdersRequestBodyCoupon = GHC.Maybe.Nothing,
      postOrdersRequestBodyCurrency = postOrdersRequestBodyCurrency,
      postOrdersRequestBodyCustomer = GHC.Maybe.Nothing,
      postOrdersRequestBodyEmail = GHC.Maybe.Nothing,
      postOrdersRequestBodyExpand = GHC.Maybe.Nothing,
      postOrdersRequestBodyItems = GHC.Maybe.Nothing,
      postOrdersRequestBodyMetadata = GHC.Maybe.Nothing,
      postOrdersRequestBodyShipping = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/orders.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.items.items@ in the specification.
data PostOrdersRequestBodyItems' = PostOrdersRequestBodyItems'
  { -- | amount
    postOrdersRequestBodyItems'Amount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency
    postOrdersRequestBodyItems'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | description
    --
    -- Constraints:
    --
    -- * Maximum length of 1000
    postOrdersRequestBodyItems'Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | parent
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyItems'Parent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | quantity
    postOrdersRequestBodyItems'Quantity :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | type
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyItems'Type :: (GHC.Maybe.Maybe PostOrdersRequestBodyItems'Type')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostOrdersRequestBodyItems' where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Amount obj : "currency" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Currency obj : "description" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Description obj : "parent" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Parent obj : "quantity" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Quantity obj : "type" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Type obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Amount obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Currency obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Description obj) GHC.Base.<> (("parent" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Parent obj) GHC.Base.<> (("quantity" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Quantity obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyItems'Type obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostOrdersRequestBodyItems' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostOrdersRequestBodyItems'" (\obj -> (((((GHC.Base.pure PostOrdersRequestBodyItems' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))

-- | Create a new 'PostOrdersRequestBodyItems'' with all required fields.
mkPostOrdersRequestBodyItems' :: PostOrdersRequestBodyItems'
mkPostOrdersRequestBodyItems' =
  PostOrdersRequestBodyItems'
    { postOrdersRequestBodyItems'Amount = GHC.Maybe.Nothing,
      postOrdersRequestBodyItems'Currency = GHC.Maybe.Nothing,
      postOrdersRequestBodyItems'Description = GHC.Maybe.Nothing,
      postOrdersRequestBodyItems'Parent = GHC.Maybe.Nothing,
      postOrdersRequestBodyItems'Quantity = GHC.Maybe.Nothing,
      postOrdersRequestBodyItems'Type = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/orders.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.items.items.properties.type@ in the specification.
data PostOrdersRequestBodyItems'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostOrdersRequestBodyItems'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostOrdersRequestBodyItems'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"discount"@
    PostOrdersRequestBodyItems'Type'EnumDiscount
  | -- | Represents the JSON value @"shipping"@
    PostOrdersRequestBodyItems'Type'EnumShipping
  | -- | Represents the JSON value @"sku"@
    PostOrdersRequestBodyItems'Type'EnumSku
  | -- | Represents the JSON value @"tax"@
    PostOrdersRequestBodyItems'Type'EnumTax
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostOrdersRequestBodyItems'Type' where
  toJSON (PostOrdersRequestBodyItems'Type'Other val) = val
  toJSON (PostOrdersRequestBodyItems'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostOrdersRequestBodyItems'Type'EnumDiscount) = "discount"
  toJSON (PostOrdersRequestBodyItems'Type'EnumShipping) = "shipping"
  toJSON (PostOrdersRequestBodyItems'Type'EnumSku) = "sku"
  toJSON (PostOrdersRequestBodyItems'Type'EnumTax) = "tax"

instance Data.Aeson.Types.FromJSON.FromJSON PostOrdersRequestBodyItems'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "discount" -> PostOrdersRequestBodyItems'Type'EnumDiscount
            | val GHC.Classes.== "shipping" -> PostOrdersRequestBodyItems'Type'EnumShipping
            | val GHC.Classes.== "sku" -> PostOrdersRequestBodyItems'Type'EnumSku
            | val GHC.Classes.== "tax" -> PostOrdersRequestBodyItems'Type'EnumTax
            | GHC.Base.otherwise -> PostOrdersRequestBodyItems'Type'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/orders.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.shipping@ in the specification.
--
-- Shipping address for the order. Required if any of the SKUs are for products that have \`shippable\` set to true.
data PostOrdersRequestBodyShipping' = PostOrdersRequestBodyShipping'
  { -- | address
    postOrdersRequestBodyShipping'Address :: PostOrdersRequestBodyShipping'Address',
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyShipping'Name :: Data.Text.Internal.Text,
    -- | phone
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyShipping'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostOrdersRequestBodyShipping' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address obj : "name" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Name obj : "phone" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Phone obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Name obj) GHC.Base.<> ("phone" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Phone obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PostOrdersRequestBodyShipping' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostOrdersRequestBodyShipping'" (\obj -> ((GHC.Base.pure PostOrdersRequestBodyShipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone"))

-- | Create a new 'PostOrdersRequestBodyShipping'' with all required fields.
mkPostOrdersRequestBodyShipping' ::
  -- | 'postOrdersRequestBodyShipping'Address'
  PostOrdersRequestBodyShipping'Address' ->
  -- | 'postOrdersRequestBodyShipping'Name'
  Data.Text.Internal.Text ->
  PostOrdersRequestBodyShipping'
mkPostOrdersRequestBodyShipping' postOrdersRequestBodyShipping'Address postOrdersRequestBodyShipping'Name =
  PostOrdersRequestBodyShipping'
    { postOrdersRequestBodyShipping'Address = postOrdersRequestBodyShipping'Address,
      postOrdersRequestBodyShipping'Name = postOrdersRequestBodyShipping'Name,
      postOrdersRequestBodyShipping'Phone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/orders.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.shipping.properties.address@ in the specification.
data PostOrdersRequestBodyShipping'Address' = PostOrdersRequestBodyShipping'Address'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyShipping'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyShipping'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyShipping'Address'Line1 :: Data.Text.Internal.Text,
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyShipping'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyShipping'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersRequestBodyShipping'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostOrdersRequestBodyShipping'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'City obj : "country" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'Country obj : "line1" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= postOrdersRequestBodyShipping'Address'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostOrdersRequestBodyShipping'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostOrdersRequestBodyShipping'Address'" (\obj -> (((((GHC.Base.pure PostOrdersRequestBodyShipping'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'PostOrdersRequestBodyShipping'Address'' with all required fields.
mkPostOrdersRequestBodyShipping'Address' ::
  -- | 'postOrdersRequestBodyShipping'Address'Line1'
  Data.Text.Internal.Text ->
  PostOrdersRequestBodyShipping'Address'
mkPostOrdersRequestBodyShipping'Address' postOrdersRequestBodyShipping'Address'Line1 =
  PostOrdersRequestBodyShipping'Address'
    { postOrdersRequestBodyShipping'Address'City = GHC.Maybe.Nothing,
      postOrdersRequestBodyShipping'Address'Country = GHC.Maybe.Nothing,
      postOrdersRequestBodyShipping'Address'Line1 = postOrdersRequestBodyShipping'Address'Line1,
      postOrdersRequestBodyShipping'Address'Line2 = GHC.Maybe.Nothing,
      postOrdersRequestBodyShipping'Address'PostalCode = GHC.Maybe.Nothing,
      postOrdersRequestBodyShipping'Address'State = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postOrders'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostOrdersResponseError' is used.
data PostOrdersResponse
  = -- | Means either no matching case available or a parse error
    PostOrdersResponseError GHC.Base.String
  | -- | Successful response.
    PostOrdersResponse200 Order
  | -- | Error response.
    PostOrdersResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
