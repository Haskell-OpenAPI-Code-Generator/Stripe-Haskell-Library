{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getTreasuryFinancialAccounts
module StripeAPI.Operations.GetTreasuryFinancialAccounts where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/treasury/financial_accounts
--
-- \<p>Returns a list of FinancialAccounts.\<\/p>
getTreasuryFinancialAccounts ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetTreasuryFinancialAccountsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetTreasuryFinancialAccountsResponse)
getTreasuryFinancialAccounts parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetTreasuryFinancialAccountsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetTreasuryFinancialAccountsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetTreasuryFinancialAccountsResponseBody200
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetTreasuryFinancialAccountsResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/v1/treasury/financial_accounts"
        [ StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTreasuryFinancialAccountsParametersQueryCreated parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTreasuryFinancialAccountsParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTreasuryFinancialAccountsParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTreasuryFinancialAccountsParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTreasuryFinancialAccountsParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/treasury\/financial_accounts.GET.parameters@ in the specification.
data GetTreasuryFinancialAccountsParameters = GetTreasuryFinancialAccountsParameters
  { -- | queryCreated: Represents the parameter named \'created\'
    getTreasuryFinancialAccountsParametersQueryCreated :: (GHC.Maybe.Maybe GetTreasuryFinancialAccountsParametersQueryCreated'Variants),
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- An object ID cursor for use in pagination.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getTreasuryFinancialAccountsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getTreasuryFinancialAccountsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit ranging from 1 to 100 (defaults to 10).
    getTreasuryFinancialAccountsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- An object ID cursor for use in pagination.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getTreasuryFinancialAccountsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetTreasuryFinancialAccountsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryStartingAfter obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryStartingAfter obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetTreasuryFinancialAccountsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTreasuryFinancialAccountsParameters" (\obj -> ((((GHC.Base.pure GetTreasuryFinancialAccountsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))

-- | Create a new 'GetTreasuryFinancialAccountsParameters' with all required fields.
mkGetTreasuryFinancialAccountsParameters :: GetTreasuryFinancialAccountsParameters
mkGetTreasuryFinancialAccountsParameters =
  GetTreasuryFinancialAccountsParameters
    { getTreasuryFinancialAccountsParametersQueryCreated = GHC.Maybe.Nothing,
      getTreasuryFinancialAccountsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getTreasuryFinancialAccountsParametersQueryExpand = GHC.Maybe.Nothing,
      getTreasuryFinancialAccountsParametersQueryLimit = GHC.Maybe.Nothing,
      getTreasuryFinancialAccountsParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/treasury\/financial_accounts.GET.parameters.properties.queryCreated.anyOf@ in the specification.
data GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1 = GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1
  { -- | gt
    getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | gte
    getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lt
    getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lte
    getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Lte obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Lte obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1" (\obj -> (((GHC.Base.pure GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lte"))

-- | Create a new 'GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1' with all required fields.
mkGetTreasuryFinancialAccountsParametersQueryCreated'OneOf1 :: GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1
mkGetTreasuryFinancialAccountsParametersQueryCreated'OneOf1 =
  GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1
    { getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Gt = GHC.Maybe.Nothing,
      getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Gte = GHC.Maybe.Nothing,
      getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Lt = GHC.Maybe.Nothing,
      getTreasuryFinancialAccountsParametersQueryCreated'OneOf1Lte = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/treasury\/financial_accounts.GET.parameters.properties.queryCreated.anyOf@ in the specification.
--
-- Represents the parameter named \'created\'
data GetTreasuryFinancialAccountsParametersQueryCreated'Variants
  = GetTreasuryFinancialAccountsParametersQueryCreated'GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1 GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1
  | GetTreasuryFinancialAccountsParametersQueryCreated'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetTreasuryFinancialAccountsParametersQueryCreated'Variants where
  toJSON (GetTreasuryFinancialAccountsParametersQueryCreated'GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetTreasuryFinancialAccountsParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetTreasuryFinancialAccountsParametersQueryCreated'Variants where
  parseJSON val = case (GetTreasuryFinancialAccountsParametersQueryCreated'GetTreasuryFinancialAccountsParametersQueryCreated'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetTreasuryFinancialAccountsParametersQueryCreated'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'getTreasuryFinancialAccounts'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTreasuryFinancialAccountsResponseError' is used.
data GetTreasuryFinancialAccountsResponse
  = -- | Means either no matching case available or a parse error
    GetTreasuryFinancialAccountsResponseError GHC.Base.String
  | -- | Successful response.
    GetTreasuryFinancialAccountsResponse200 GetTreasuryFinancialAccountsResponseBody200
  | -- | Error response.
    GetTreasuryFinancialAccountsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/treasury\/financial_accounts.GET.responses.200.content.application\/json.schema@ in the specification.
data GetTreasuryFinancialAccountsResponseBody200 = GetTreasuryFinancialAccountsResponseBody200
  { -- | data
    getTreasuryFinancialAccountsResponseBody200Data :: ([Treasury'financialAccount]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getTreasuryFinancialAccountsResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    -- * Must match pattern \'^\/v1\/treasury\/financial_accounts\'
    getTreasuryFinancialAccountsResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetTreasuryFinancialAccountsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getTreasuryFinancialAccountsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getTreasuryFinancialAccountsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getTreasuryFinancialAccountsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getTreasuryFinancialAccountsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getTreasuryFinancialAccountsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getTreasuryFinancialAccountsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetTreasuryFinancialAccountsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTreasuryFinancialAccountsResponseBody200" (\obj -> ((GHC.Base.pure GetTreasuryFinancialAccountsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetTreasuryFinancialAccountsResponseBody200' with all required fields.
mkGetTreasuryFinancialAccountsResponseBody200 ::
  -- | 'getTreasuryFinancialAccountsResponseBody200Data'
  [Treasury'financialAccount] ->
  -- | 'getTreasuryFinancialAccountsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getTreasuryFinancialAccountsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetTreasuryFinancialAccountsResponseBody200
mkGetTreasuryFinancialAccountsResponseBody200 getTreasuryFinancialAccountsResponseBody200Data getTreasuryFinancialAccountsResponseBody200HasMore getTreasuryFinancialAccountsResponseBody200Url =
  GetTreasuryFinancialAccountsResponseBody200
    { getTreasuryFinancialAccountsResponseBody200Data = getTreasuryFinancialAccountsResponseBody200Data,
      getTreasuryFinancialAccountsResponseBody200HasMore = getTreasuryFinancialAccountsResponseBody200HasMore,
      getTreasuryFinancialAccountsResponseBody200Url = getTreasuryFinancialAccountsResponseBody200Url
    }
