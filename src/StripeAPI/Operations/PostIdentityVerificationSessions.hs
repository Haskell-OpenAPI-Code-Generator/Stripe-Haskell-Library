{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postIdentityVerificationSessions
module StripeAPI.Operations.PostIdentityVerificationSessions where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/identity/verification_sessions
--
-- \<p>Creates a VerificationSession object.\<\/p>
--
-- \<p>After the VerificationSession is created, display a verification modal using the session \<code>client_secret\<\/code> or send your users to the session’s \<code>url\<\/code>.\<\/p>
--
-- \<p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.\<\/p>
--
-- \<p>Related guide: \<a href=\"\/docs\/identity\/verify-identity-documents\">Verify your users’ identity documents\<\/a>.\<\/p>
postIdentityVerificationSessions ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  PostIdentityVerificationSessionsRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostIdentityVerificationSessionsResponse)
postIdentityVerificationSessions body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostIdentityVerificationSessionsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostIdentityVerificationSessionsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Identity'verificationSession
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostIdentityVerificationSessionsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/identity/verification_sessions") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/identity\/verification_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostIdentityVerificationSessionsRequestBody = PostIdentityVerificationSessionsRequestBody
  { -- | expand: Specifies which fields in the response should be expanded.
    postIdentityVerificationSessionsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
    postIdentityVerificationSessionsRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | options: A set of options for the session’s verification checks.
    postIdentityVerificationSessionsRequestBodyOptions :: (GHC.Maybe.Maybe PostIdentityVerificationSessionsRequestBodyOptions'),
    -- | return_url: The URL that the user will be redirected to upon completing the verification flow.
    postIdentityVerificationSessionsRequestBodyReturnUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | type: The type of [verification check](https:\/\/stripe.com\/docs\/identity\/verification-checks) to be performed.
    postIdentityVerificationSessionsRequestBodyType :: PostIdentityVerificationSessionsRequestBodyType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostIdentityVerificationSessionsRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("expand" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyExpand obj : "metadata" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyMetadata obj : "options" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions obj : "return_url" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyReturnUrl obj : "type" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyType obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("expand" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyExpand obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyMetadata obj) GHC.Base.<> (("options" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions obj) GHC.Base.<> (("return_url" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyReturnUrl obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyType obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON PostIdentityVerificationSessionsRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIdentityVerificationSessionsRequestBody" (\obj -> ((((GHC.Base.pure PostIdentityVerificationSessionsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "return_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'PostIdentityVerificationSessionsRequestBody' with all required fields.
mkPostIdentityVerificationSessionsRequestBody ::
  -- | 'postIdentityVerificationSessionsRequestBodyType'
  PostIdentityVerificationSessionsRequestBodyType' ->
  PostIdentityVerificationSessionsRequestBody
mkPostIdentityVerificationSessionsRequestBody postIdentityVerificationSessionsRequestBodyType =
  PostIdentityVerificationSessionsRequestBody
    { postIdentityVerificationSessionsRequestBodyExpand = GHC.Maybe.Nothing,
      postIdentityVerificationSessionsRequestBodyMetadata = GHC.Maybe.Nothing,
      postIdentityVerificationSessionsRequestBodyOptions = GHC.Maybe.Nothing,
      postIdentityVerificationSessionsRequestBodyReturnUrl = GHC.Maybe.Nothing,
      postIdentityVerificationSessionsRequestBodyType = postIdentityVerificationSessionsRequestBodyType
    }

-- | Defines the object schema located at @paths.\/v1\/identity\/verification_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.options@ in the specification.
--
-- A set of options for the session’s verification checks.
data PostIdentityVerificationSessionsRequestBodyOptions' = PostIdentityVerificationSessionsRequestBodyOptions'
  { -- | document
    postIdentityVerificationSessionsRequestBodyOptions'Document :: (GHC.Maybe.Maybe PostIdentityVerificationSessionsRequestBodyOptions'Document'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostIdentityVerificationSessionsRequestBodyOptions' where
  toJSON obj = Data.Aeson.Types.Internal.object ("document" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("document" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document obj)

instance Data.Aeson.Types.FromJSON.FromJSON PostIdentityVerificationSessionsRequestBodyOptions' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIdentityVerificationSessionsRequestBodyOptions'" (\obj -> GHC.Base.pure PostIdentityVerificationSessionsRequestBodyOptions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "document"))

-- | Create a new 'PostIdentityVerificationSessionsRequestBodyOptions'' with all required fields.
mkPostIdentityVerificationSessionsRequestBodyOptions' :: PostIdentityVerificationSessionsRequestBodyOptions'
mkPostIdentityVerificationSessionsRequestBodyOptions' = PostIdentityVerificationSessionsRequestBodyOptions' {postIdentityVerificationSessionsRequestBodyOptions'Document = GHC.Maybe.Nothing}

-- | Defines the object schema located at @paths.\/v1\/identity\/verification_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.options.properties.document.anyOf@ in the specification.
data PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1 = PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1
  { -- | allowed_types
    postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes :: (GHC.Maybe.Maybe ([PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'])),
    -- | require_id_number
    postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireIdNumber :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_live_capture
    postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireLiveCapture :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_matching_selfie
    postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireMatchingSelfie :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object ("allowed_types" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes obj : "require_id_number" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireIdNumber obj : "require_live_capture" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireLiveCapture obj : "require_matching_selfie" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireMatchingSelfie obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("allowed_types" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes obj) GHC.Base.<> (("require_id_number" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireIdNumber obj) GHC.Base.<> (("require_live_capture" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireLiveCapture obj) GHC.Base.<> ("require_matching_selfie" Data.Aeson.Types.ToJSON..= postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireMatchingSelfie obj))))

instance Data.Aeson.Types.FromJSON.FromJSON PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1" (\obj -> (((GHC.Base.pure PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allowed_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "require_id_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "require_live_capture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "require_matching_selfie"))

-- | Create a new 'PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1' with all required fields.
mkPostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1 :: PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1
mkPostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1 =
  PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1
    { postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes = GHC.Maybe.Nothing,
      postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireIdNumber = GHC.Maybe.Nothing,
      postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireLiveCapture = GHC.Maybe.Nothing,
      postIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1RequireMatchingSelfie = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/identity\/verification_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.options.properties.document.anyOf.properties.allowed_types.items@ in the specification.
data PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"driving_license"@
    PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'EnumDrivingLicense
  | -- | Represents the JSON value @"id_card"@
    PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'EnumIdCard
  | -- | Represents the JSON value @"passport"@
    PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'EnumPassport
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes' where
  toJSON (PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'Other val) = val
  toJSON (PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'EnumDrivingLicense) = "driving_license"
  toJSON (PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'EnumIdCard) = "id_card"
  toJSON (PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'EnumPassport) = "passport"

instance Data.Aeson.Types.FromJSON.FromJSON PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "driving_license" -> PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'EnumDrivingLicense
            | val GHC.Classes.== "id_card" -> PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'EnumIdCard
            | val GHC.Classes.== "passport" -> PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'EnumPassport
            | GHC.Base.otherwise -> PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1AllowedTypes'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/identity\/verification_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.options.properties.document.anyOf@ in the specification.
data PostIdentityVerificationSessionsRequestBodyOptions'Document'Variants
  = -- | Represents the JSON value @""@
    PostIdentityVerificationSessionsRequestBodyOptions'Document'EmptyString
  | PostIdentityVerificationSessionsRequestBodyOptions'Document'PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1 PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostIdentityVerificationSessionsRequestBodyOptions'Document'Variants where
  toJSON (PostIdentityVerificationSessionsRequestBodyOptions'Document'PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostIdentityVerificationSessionsRequestBodyOptions'Document'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostIdentityVerificationSessionsRequestBodyOptions'Document'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostIdentityVerificationSessionsRequestBodyOptions'Document'EmptyString
        | GHC.Base.otherwise -> case (PostIdentityVerificationSessionsRequestBodyOptions'Document'PostIdentityVerificationSessionsRequestBodyOptions'Document'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/identity\/verification_sessions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.type@ in the specification.
--
-- The type of [verification check](https:\/\/stripe.com\/docs\/identity\/verification-checks) to be performed.
data PostIdentityVerificationSessionsRequestBodyType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostIdentityVerificationSessionsRequestBodyType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostIdentityVerificationSessionsRequestBodyType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"document"@
    PostIdentityVerificationSessionsRequestBodyType'EnumDocument
  | -- | Represents the JSON value @"id_number"@
    PostIdentityVerificationSessionsRequestBodyType'EnumIdNumber
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostIdentityVerificationSessionsRequestBodyType' where
  toJSON (PostIdentityVerificationSessionsRequestBodyType'Other val) = val
  toJSON (PostIdentityVerificationSessionsRequestBodyType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostIdentityVerificationSessionsRequestBodyType'EnumDocument) = "document"
  toJSON (PostIdentityVerificationSessionsRequestBodyType'EnumIdNumber) = "id_number"

instance Data.Aeson.Types.FromJSON.FromJSON PostIdentityVerificationSessionsRequestBodyType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "document" -> PostIdentityVerificationSessionsRequestBodyType'EnumDocument
            | val GHC.Classes.== "id_number" -> PostIdentityVerificationSessionsRequestBodyType'EnumIdNumber
            | GHC.Base.otherwise -> PostIdentityVerificationSessionsRequestBodyType'Other val
      )

-- | Represents a response of the operation 'postIdentityVerificationSessions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostIdentityVerificationSessionsResponseError' is used.
data PostIdentityVerificationSessionsResponse
  = -- | Means either no matching case available or a parse error
    PostIdentityVerificationSessionsResponseError GHC.Base.String
  | -- | Successful response.
    PostIdentityVerificationSessionsResponse200 Identity'verificationSession
  | -- | Error response.
    PostIdentityVerificationSessionsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
