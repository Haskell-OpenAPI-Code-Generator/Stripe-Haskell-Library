-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postQuotesQuote
module StripeAPI.Operations.PostQuotesQuote where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/quotes/{quote}
-- 
-- \<p>A quote models prices and services for a customer.\<\/p>
postQuotesQuote :: forall m . StripeAPI.Common.MonadHTTP m => Data.Text.Internal.Text -- ^ quote | Constraints: Maximum length of 5000
  -> GHC.Maybe.Maybe PostQuotesQuoteRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostQuotesQuoteResponse) -- ^ Monadic computation which returns the result of the operation
postQuotesQuote quote
                body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostQuotesQuoteResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostQuotesQuoteResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                Quote)
                                                                                                                                                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostQuotesQuoteResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                  Error)
                                                                                                                                                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/quotes/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel quote)) GHC.Base.++ ""))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBody = PostQuotesQuoteRequestBody {
  -- | application_fee_amount: The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner\'s Stripe account. There cannot be any line items with recurring prices when using this field.
  postQuotesQuoteRequestBodyApplicationFeeAmount :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyApplicationFeeAmount'Variants)
  -- | application_fee_percent: A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner\'s Stripe account. There must be at least 1 line item with a recurring price to use this field.
  , postQuotesQuoteRequestBodyApplicationFeePercent :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyApplicationFeePercent'Variants)
  -- | automatic_tax: Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
  , postQuotesQuoteRequestBodyAutomaticTax :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyAutomaticTax')
  -- | collection_method: Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to \`charge_automatically\`.
  , postQuotesQuoteRequestBodyCollectionMethod :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyCollectionMethod')
  -- | customer: The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postQuotesQuoteRequestBodyCustomer :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | default_tax_rates: The tax rates that will apply to any line item that does not have \`tax_rates\` set.
  , postQuotesQuoteRequestBodyDefaultTaxRates :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyDefaultTaxRates'Variants)
  -- | description: A description that will be displayed on the quote PDF.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 500
  , postQuotesQuoteRequestBodyDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | discounts: The discounts applied to the quote. You can only set up to one discount.
  , postQuotesQuoteRequestBodyDiscounts :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyDiscounts'Variants)
  -- | expand: Specifies which fields in the response should be expanded.
  , postQuotesQuoteRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | expires_at: A future timestamp on which the quote will be canceled if in \`open\` or \`draft\` status. Measured in seconds since the Unix epoch.
  , postQuotesQuoteRequestBodyExpiresAt :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | footer: A footer that will be displayed on the quote PDF.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 500
  , postQuotesQuoteRequestBodyFooter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | header: A header that will be displayed on the quote PDF.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 50
  , postQuotesQuoteRequestBodyHeader :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | invoice_settings: All invoices will be billed using the specified settings.
  , postQuotesQuoteRequestBodyInvoiceSettings :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyInvoiceSettings')
  -- | line_items: A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
  , postQuotesQuoteRequestBodyLineItems :: (GHC.Maybe.Maybe ([PostQuotesQuoteRequestBodyLineItems']))
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
  , postQuotesQuoteRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | on_behalf_of: The account on behalf of which to charge.
  , postQuotesQuoteRequestBodyOnBehalfOf :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyOnBehalfOf'Variants)
  -- | subscription_data: When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if \`subscription_data[effective_date]\` is present and in the future, otherwise a subscription is created.
  , postQuotesQuoteRequestBodySubscriptionData :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodySubscriptionData')
  -- | transfer_data: The data with which to automatically create a Transfer for each of the invoices.
  , postQuotesQuoteRequestBodyTransferData :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyTransferData'Variants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_percent" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyApplicationFeePercent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("automatic_tax" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyAutomaticTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyCollectionMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_tax_rates" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDefaultTaxRates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounts" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDiscounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyFooter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyHeader obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_settings" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyInvoiceSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_data" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodySubscriptionData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyTransferData obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_percent" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyApplicationFeePercent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("automatic_tax" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyAutomaticTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyCollectionMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_tax_rates" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDefaultTaxRates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounts" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDiscounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyFooter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyHeader obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_settings" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyInvoiceSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_data" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodySubscriptionData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyTransferData obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesQuoteRequestBody" (\obj -> (((((((((((((((((GHC.Base.pure PostQuotesQuoteRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_fee_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "automatic_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "discounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "footer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "header")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invoice_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subscription_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfer_data"))
-- | Create a new 'PostQuotesQuoteRequestBody' with all required fields.
mkPostQuotesQuoteRequestBody :: PostQuotesQuoteRequestBody
mkPostQuotesQuoteRequestBody = PostQuotesQuoteRequestBody{postQuotesQuoteRequestBodyApplicationFeeAmount = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyApplicationFeePercent = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyAutomaticTax = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyCollectionMethod = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyCustomer = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyDefaultTaxRates = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyDescription = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyDiscounts = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyExpand = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyExpiresAt = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyFooter = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyHeader = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyInvoiceSettings = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyLineItems = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyMetadata = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyOnBehalfOf = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodySubscriptionData = GHC.Maybe.Nothing,
                                                          postQuotesQuoteRequestBodyTransferData = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.application_fee_amount.anyOf@ in the specification.
-- 
-- The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner\'s Stripe account. There cannot be any line items with recurring prices when using this field.
data PostQuotesQuoteRequestBodyApplicationFeeAmount'Variants =
   PostQuotesQuoteRequestBodyApplicationFeeAmount'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesQuoteRequestBodyApplicationFeeAmount'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyApplicationFeeAmount'Variants
    where toJSON (PostQuotesQuoteRequestBodyApplicationFeeAmount'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesQuoteRequestBodyApplicationFeeAmount'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyApplicationFeeAmount'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesQuoteRequestBodyApplicationFeeAmount'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesQuoteRequestBodyApplicationFeeAmount'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.application_fee_percent.anyOf@ in the specification.
-- 
-- A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner\'s Stripe account. There must be at least 1 line item with a recurring price to use this field.
data PostQuotesQuoteRequestBodyApplicationFeePercent'Variants =
   PostQuotesQuoteRequestBodyApplicationFeePercent'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesQuoteRequestBodyApplicationFeePercent'Double GHC.Types.Double
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyApplicationFeePercent'Variants
    where toJSON (PostQuotesQuoteRequestBodyApplicationFeePercent'Double a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesQuoteRequestBodyApplicationFeePercent'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyApplicationFeePercent'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesQuoteRequestBodyApplicationFeePercent'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesQuoteRequestBodyApplicationFeePercent'Double Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.automatic_tax@ in the specification.
-- 
-- Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
data PostQuotesQuoteRequestBodyAutomaticTax' = PostQuotesQuoteRequestBodyAutomaticTax' {
  -- | enabled
  postQuotesQuoteRequestBodyAutomaticTax'Enabled :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyAutomaticTax'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyAutomaticTax'Enabled obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyAutomaticTax'Enabled obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyAutomaticTax'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesQuoteRequestBodyAutomaticTax'" (\obj -> GHC.Base.pure PostQuotesQuoteRequestBodyAutomaticTax' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled"))
-- | Create a new 'PostQuotesQuoteRequestBodyAutomaticTax'' with all required fields.
mkPostQuotesQuoteRequestBodyAutomaticTax' :: GHC.Types.Bool -- ^ 'postQuotesQuoteRequestBodyAutomaticTax'Enabled'
  -> PostQuotesQuoteRequestBodyAutomaticTax'
mkPostQuotesQuoteRequestBodyAutomaticTax' postQuotesQuoteRequestBodyAutomaticTax'Enabled = PostQuotesQuoteRequestBodyAutomaticTax'{postQuotesQuoteRequestBodyAutomaticTax'Enabled = postQuotesQuoteRequestBodyAutomaticTax'Enabled}
-- | Defines the enum schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.collection_method@ in the specification.
-- 
-- Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to \`charge_automatically\`.
data PostQuotesQuoteRequestBodyCollectionMethod' =
   PostQuotesQuoteRequestBodyCollectionMethod'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostQuotesQuoteRequestBodyCollectionMethod'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostQuotesQuoteRequestBodyCollectionMethod'EnumChargeAutomatically -- ^ Represents the JSON value @"charge_automatically"@
  | PostQuotesQuoteRequestBodyCollectionMethod'EnumSendInvoice -- ^ Represents the JSON value @"send_invoice"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyCollectionMethod'
    where toJSON (PostQuotesQuoteRequestBodyCollectionMethod'Other val) = val
          toJSON (PostQuotesQuoteRequestBodyCollectionMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostQuotesQuoteRequestBodyCollectionMethod'EnumChargeAutomatically) = "charge_automatically"
          toJSON (PostQuotesQuoteRequestBodyCollectionMethod'EnumSendInvoice) = "send_invoice"
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyCollectionMethod'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "charge_automatically" -> PostQuotesQuoteRequestBodyCollectionMethod'EnumChargeAutomatically
                                            | val GHC.Classes.== "send_invoice" -> PostQuotesQuoteRequestBodyCollectionMethod'EnumSendInvoice
                                            | GHC.Base.otherwise -> PostQuotesQuoteRequestBodyCollectionMethod'Other val)
-- | Defines the oneOf schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.default_tax_rates.anyOf@ in the specification.
-- 
-- The tax rates that will apply to any line item that does not have \`tax_rates\` set.
data PostQuotesQuoteRequestBodyDefaultTaxRates'Variants =
   PostQuotesQuoteRequestBodyDefaultTaxRates'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesQuoteRequestBodyDefaultTaxRates'ListTText ([Data.Text.Internal.Text])
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyDefaultTaxRates'Variants
    where toJSON (PostQuotesQuoteRequestBodyDefaultTaxRates'ListTText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesQuoteRequestBodyDefaultTaxRates'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyDefaultTaxRates'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesQuoteRequestBodyDefaultTaxRates'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesQuoteRequestBodyDefaultTaxRates'ListTText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.discounts.anyOf.items@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodyDiscounts'OneOf1 = PostQuotesQuoteRequestBodyDiscounts'OneOf1 {
  -- | coupon
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postQuotesQuoteRequestBodyDiscounts'OneOf1Coupon :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | discount
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postQuotesQuoteRequestBodyDiscounts'OneOf1Discount :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyDiscounts'OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDiscounts'OneOf1Coupon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDiscounts'OneOf1Discount obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDiscounts'OneOf1Coupon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyDiscounts'OneOf1Discount obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyDiscounts'OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesQuoteRequestBodyDiscounts'OneOf1" (\obj -> (GHC.Base.pure PostQuotesQuoteRequestBodyDiscounts'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "discount"))
-- | Create a new 'PostQuotesQuoteRequestBodyDiscounts'OneOf1' with all required fields.
mkPostQuotesQuoteRequestBodyDiscounts'OneOf1 :: PostQuotesQuoteRequestBodyDiscounts'OneOf1
mkPostQuotesQuoteRequestBodyDiscounts'OneOf1 = PostQuotesQuoteRequestBodyDiscounts'OneOf1{postQuotesQuoteRequestBodyDiscounts'OneOf1Coupon = GHC.Maybe.Nothing,
                                                                                          postQuotesQuoteRequestBodyDiscounts'OneOf1Discount = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.discounts.anyOf@ in the specification.
-- 
-- The discounts applied to the quote. You can only set up to one discount.
data PostQuotesQuoteRequestBodyDiscounts'Variants =
   PostQuotesQuoteRequestBodyDiscounts'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesQuoteRequestBodyDiscounts'ListTPostQuotesQuoteRequestBodyDiscounts'OneOf1 ([PostQuotesQuoteRequestBodyDiscounts'OneOf1])
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyDiscounts'Variants
    where toJSON (PostQuotesQuoteRequestBodyDiscounts'ListTPostQuotesQuoteRequestBodyDiscounts'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesQuoteRequestBodyDiscounts'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyDiscounts'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesQuoteRequestBodyDiscounts'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesQuoteRequestBodyDiscounts'ListTPostQuotesQuoteRequestBodyDiscounts'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.invoice_settings@ in the specification.
-- 
-- All invoices will be billed using the specified settings.
data PostQuotesQuoteRequestBodyInvoiceSettings' = PostQuotesQuoteRequestBodyInvoiceSettings' {
  -- | days_until_due
  postQuotesQuoteRequestBodyInvoiceSettings'DaysUntilDue :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyInvoiceSettings'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("days_until_due" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyInvoiceSettings'DaysUntilDue obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("days_until_due" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyInvoiceSettings'DaysUntilDue obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyInvoiceSettings'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesQuoteRequestBodyInvoiceSettings'" (\obj -> GHC.Base.pure PostQuotesQuoteRequestBodyInvoiceSettings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "days_until_due"))
-- | Create a new 'PostQuotesQuoteRequestBodyInvoiceSettings'' with all required fields.
mkPostQuotesQuoteRequestBodyInvoiceSettings' :: PostQuotesQuoteRequestBodyInvoiceSettings'
mkPostQuotesQuoteRequestBodyInvoiceSettings' = PostQuotesQuoteRequestBodyInvoiceSettings'{postQuotesQuoteRequestBodyInvoiceSettings'DaysUntilDue = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodyLineItems' = PostQuotesQuoteRequestBodyLineItems' {
  -- | id
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postQuotesQuoteRequestBodyLineItems'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | price
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postQuotesQuoteRequestBodyLineItems'Price :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | price_data
  , postQuotesQuoteRequestBodyLineItems'PriceData :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyLineItems'PriceData')
  -- | quantity
  , postQuotesQuoteRequestBodyLineItems'Quantity :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | tax_rates
  , postQuotesQuoteRequestBodyLineItems'TaxRates :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyLineItems'TaxRates'Variants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyLineItems'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'Price obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price_data" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'Quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rates" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'TaxRates obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'Price obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price_data" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'Quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rates" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'TaxRates obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyLineItems'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesQuoteRequestBodyLineItems'" (\obj -> ((((GHC.Base.pure PostQuotesQuoteRequestBodyLineItems' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_rates"))
-- | Create a new 'PostQuotesQuoteRequestBodyLineItems'' with all required fields.
mkPostQuotesQuoteRequestBodyLineItems' :: PostQuotesQuoteRequestBodyLineItems'
mkPostQuotesQuoteRequestBodyLineItems' = PostQuotesQuoteRequestBodyLineItems'{postQuotesQuoteRequestBodyLineItems'Id = GHC.Maybe.Nothing,
                                                                              postQuotesQuoteRequestBodyLineItems'Price = GHC.Maybe.Nothing,
                                                                              postQuotesQuoteRequestBodyLineItems'PriceData = GHC.Maybe.Nothing,
                                                                              postQuotesQuoteRequestBodyLineItems'Quantity = GHC.Maybe.Nothing,
                                                                              postQuotesQuoteRequestBodyLineItems'TaxRates = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.price_data@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodyLineItems'PriceData' = PostQuotesQuoteRequestBodyLineItems'PriceData' {
  -- | currency
  postQuotesQuoteRequestBodyLineItems'PriceData'Currency :: Data.Text.Internal.Text
  -- | product
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postQuotesQuoteRequestBodyLineItems'PriceData'Product :: Data.Text.Internal.Text
  -- | recurring
  , postQuotesQuoteRequestBodyLineItems'PriceData'Recurring :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring')
  -- | tax_behavior
  , postQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior')
  -- | unit_amount
  , postQuotesQuoteRequestBodyLineItems'PriceData'UnitAmount :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | unit_amount_decimal
  , postQuotesQuoteRequestBodyLineItems'PriceData'UnitAmountDecimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyLineItems'PriceData'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["currency" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyLineItems'PriceData'Currency obj] : ["product" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyLineItems'PriceData'Product obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recurring" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'Recurring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'UnitAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'UnitAmountDecimal obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["currency" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyLineItems'PriceData'Currency obj] : ["product" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyLineItems'PriceData'Product obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recurring" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'Recurring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'UnitAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'UnitAmountDecimal obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyLineItems'PriceData'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesQuoteRequestBodyLineItems'PriceData'" (\obj -> (((((GHC.Base.pure PostQuotesQuoteRequestBodyLineItems'PriceData' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "recurring")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit_amount_decimal"))
-- | Create a new 'PostQuotesQuoteRequestBodyLineItems'PriceData'' with all required fields.
mkPostQuotesQuoteRequestBodyLineItems'PriceData' :: Data.Text.Internal.Text -- ^ 'postQuotesQuoteRequestBodyLineItems'PriceData'Currency'
  -> Data.Text.Internal.Text -- ^ 'postQuotesQuoteRequestBodyLineItems'PriceData'Product'
  -> PostQuotesQuoteRequestBodyLineItems'PriceData'
mkPostQuotesQuoteRequestBodyLineItems'PriceData' postQuotesQuoteRequestBodyLineItems'PriceData'Currency postQuotesQuoteRequestBodyLineItems'PriceData'Product = PostQuotesQuoteRequestBodyLineItems'PriceData'{postQuotesQuoteRequestBodyLineItems'PriceData'Currency = postQuotesQuoteRequestBodyLineItems'PriceData'Currency,
                                                                                                                                                                                                               postQuotesQuoteRequestBodyLineItems'PriceData'Product = postQuotesQuoteRequestBodyLineItems'PriceData'Product,
                                                                                                                                                                                                               postQuotesQuoteRequestBodyLineItems'PriceData'Recurring = GHC.Maybe.Nothing,
                                                                                                                                                                                                               postQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior = GHC.Maybe.Nothing,
                                                                                                                                                                                                               postQuotesQuoteRequestBodyLineItems'PriceData'UnitAmount = GHC.Maybe.Nothing,
                                                                                                                                                                                                               postQuotesQuoteRequestBodyLineItems'PriceData'UnitAmountDecimal = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.price_data.properties.recurring@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring' = PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring' {
  -- | interval
  postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval :: PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'
  -- | interval_count
  , postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'IntervalCount :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["interval" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'IntervalCount obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["interval" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'IntervalCount obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'" (\obj -> (GHC.Base.pure PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval_count"))
-- | Create a new 'PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'' with all required fields.
mkPostQuotesQuoteRequestBodyLineItems'PriceData'Recurring' :: PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval' -- ^ 'postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'
  -> PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'
mkPostQuotesQuoteRequestBodyLineItems'PriceData'Recurring' postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval = PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'{postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval = postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval,
                                                                                                                                                                                       postQuotesQuoteRequestBodyLineItems'PriceData'Recurring'IntervalCount = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.price_data.properties.recurring.properties.interval@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval' =
   PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumDay -- ^ Represents the JSON value @"day"@
  | PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumMonth -- ^ Represents the JSON value @"month"@
  | PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumWeek -- ^ Represents the JSON value @"week"@
  | PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumYear -- ^ Represents the JSON value @"year"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'
    where toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'Other val) = val
          toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumDay) = "day"
          toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumMonth) = "month"
          toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumWeek) = "week"
          toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumYear) = "year"
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "day" -> PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumDay
                                            | val GHC.Classes.== "month" -> PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumMonth
                                            | val GHC.Classes.== "week" -> PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumWeek
                                            | val GHC.Classes.== "year" -> PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'EnumYear
                                            | GHC.Base.otherwise -> PostQuotesQuoteRequestBodyLineItems'PriceData'Recurring'Interval'Other val)
-- | Defines the enum schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.price_data.properties.tax_behavior@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior' =
   PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'EnumExclusive -- ^ Represents the JSON value @"exclusive"@
  | PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'EnumInclusive -- ^ Represents the JSON value @"inclusive"@
  | PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'EnumUnspecified -- ^ Represents the JSON value @"unspecified"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'
    where toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'Other val) = val
          toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'EnumExclusive) = "exclusive"
          toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'EnumInclusive) = "inclusive"
          toJSON (PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'EnumUnspecified) = "unspecified"
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "exclusive" -> PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'EnumExclusive
                                            | val GHC.Classes.== "inclusive" -> PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'EnumInclusive
                                            | val GHC.Classes.== "unspecified" -> PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'EnumUnspecified
                                            | GHC.Base.otherwise -> PostQuotesQuoteRequestBodyLineItems'PriceData'TaxBehavior'Other val)
-- | Defines the oneOf schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.tax_rates.anyOf@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodyLineItems'TaxRates'Variants =
   PostQuotesQuoteRequestBodyLineItems'TaxRates'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesQuoteRequestBodyLineItems'TaxRates'ListTText ([Data.Text.Internal.Text])
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyLineItems'TaxRates'Variants
    where toJSON (PostQuotesQuoteRequestBodyLineItems'TaxRates'ListTText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesQuoteRequestBodyLineItems'TaxRates'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyLineItems'TaxRates'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesQuoteRequestBodyLineItems'TaxRates'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesQuoteRequestBodyLineItems'TaxRates'ListTText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.on_behalf_of.anyOf@ in the specification.
-- 
-- The account on behalf of which to charge.
data PostQuotesQuoteRequestBodyOnBehalfOf'Variants =
   PostQuotesQuoteRequestBodyOnBehalfOf'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesQuoteRequestBodyOnBehalfOf'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyOnBehalfOf'Variants
    where toJSON (PostQuotesQuoteRequestBodyOnBehalfOf'Text a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesQuoteRequestBodyOnBehalfOf'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyOnBehalfOf'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesQuoteRequestBodyOnBehalfOf'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesQuoteRequestBodyOnBehalfOf'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.subscription_data@ in the specification.
-- 
-- When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if \`subscription_data[effective_date]\` is present and in the future, otherwise a subscription is created.
data PostQuotesQuoteRequestBodySubscriptionData' = PostQuotesQuoteRequestBodySubscriptionData' {
  -- | effective_date
  postQuotesQuoteRequestBodySubscriptionData'EffectiveDate :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'Variants)
  -- | trial_period_days
  , postQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays :: (GHC.Maybe.Maybe PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'Variants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodySubscriptionData'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("effective_date" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodySubscriptionData'EffectiveDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_period_days" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("effective_date" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodySubscriptionData'EffectiveDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_period_days" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodySubscriptionData'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesQuoteRequestBodySubscriptionData'" (\obj -> (GHC.Base.pure PostQuotesQuoteRequestBodySubscriptionData' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "effective_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "trial_period_days"))
-- | Create a new 'PostQuotesQuoteRequestBodySubscriptionData'' with all required fields.
mkPostQuotesQuoteRequestBodySubscriptionData' :: PostQuotesQuoteRequestBodySubscriptionData'
mkPostQuotesQuoteRequestBodySubscriptionData' = PostQuotesQuoteRequestBodySubscriptionData'{postQuotesQuoteRequestBodySubscriptionData'EffectiveDate = GHC.Maybe.Nothing,
                                                                                            postQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.subscription_data.properties.effective_date.anyOf@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'Variants =
   PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'CurrentPeriodEnd -- ^ Represents the JSON value @"current_period_end"@
  | PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'Variants
    where toJSON (PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'CurrentPeriodEnd) = "current_period_end"
          toJSON (PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'Variants
    where parseJSON val = if | val GHC.Classes.== "current_period_end" -> GHC.Base.pure PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'CurrentPeriodEnd
                             | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesQuoteRequestBodySubscriptionData'EffectiveDate'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.subscription_data.properties.trial_period_days.anyOf@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'Variants =
   PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'Variants
    where toJSON (PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesQuoteRequestBodySubscriptionData'TrialPeriodDays'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.transfer_data.anyOf@ in the specification.
-- 
-- 
data PostQuotesQuoteRequestBodyTransferData'OneOf1 = PostQuotesQuoteRequestBodyTransferData'OneOf1 {
  -- | amount
  postQuotesQuoteRequestBodyTransferData'OneOf1Amount :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | amount_percent
  , postQuotesQuoteRequestBodyTransferData'OneOf1AmountPercent :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | destination
  , postQuotesQuoteRequestBodyTransferData'OneOf1Destination :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyTransferData'OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyTransferData'OneOf1Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_percent" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyTransferData'OneOf1AmountPercent obj) : ["destination" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyTransferData'OneOf1Destination obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyTransferData'OneOf1Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_percent" Data.Aeson.Types.ToJSON..=)) (postQuotesQuoteRequestBodyTransferData'OneOf1AmountPercent obj) : ["destination" Data.Aeson.Types.ToJSON..= postQuotesQuoteRequestBodyTransferData'OneOf1Destination obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyTransferData'OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesQuoteRequestBodyTransferData'OneOf1" (\obj -> ((GHC.Base.pure PostQuotesQuoteRequestBodyTransferData'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination"))
-- | Create a new 'PostQuotesQuoteRequestBodyTransferData'OneOf1' with all required fields.
mkPostQuotesQuoteRequestBodyTransferData'OneOf1 :: Data.Text.Internal.Text -- ^ 'postQuotesQuoteRequestBodyTransferData'OneOf1Destination'
  -> PostQuotesQuoteRequestBodyTransferData'OneOf1
mkPostQuotesQuoteRequestBodyTransferData'OneOf1 postQuotesQuoteRequestBodyTransferData'OneOf1Destination = PostQuotesQuoteRequestBodyTransferData'OneOf1{postQuotesQuoteRequestBodyTransferData'OneOf1Amount = GHC.Maybe.Nothing,
                                                                                                                                                         postQuotesQuoteRequestBodyTransferData'OneOf1AmountPercent = GHC.Maybe.Nothing,
                                                                                                                                                         postQuotesQuoteRequestBodyTransferData'OneOf1Destination = postQuotesQuoteRequestBodyTransferData'OneOf1Destination}
-- | Defines the oneOf schema located at @paths.\/v1\/quotes\/{quote}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.transfer_data.anyOf@ in the specification.
-- 
-- The data with which to automatically create a Transfer for each of the invoices.
data PostQuotesQuoteRequestBodyTransferData'Variants =
   PostQuotesQuoteRequestBodyTransferData'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesQuoteRequestBodyTransferData'PostQuotesQuoteRequestBodyTransferData'OneOf1 PostQuotesQuoteRequestBodyTransferData'OneOf1
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesQuoteRequestBodyTransferData'Variants
    where toJSON (PostQuotesQuoteRequestBodyTransferData'PostQuotesQuoteRequestBodyTransferData'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesQuoteRequestBodyTransferData'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesQuoteRequestBodyTransferData'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesQuoteRequestBodyTransferData'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesQuoteRequestBodyTransferData'PostQuotesQuoteRequestBodyTransferData'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postQuotesQuote'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostQuotesQuoteResponseError' is used.
data PostQuotesQuoteResponse =
   PostQuotesQuoteResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostQuotesQuoteResponse200 Quote -- ^ Successful response.
  | PostQuotesQuoteResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
