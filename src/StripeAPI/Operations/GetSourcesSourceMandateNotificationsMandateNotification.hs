{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getSourcesSourceMandateNotificationsMandateNotification
module StripeAPI.Operations.GetSourcesSourceMandateNotificationsMandateNotification where

import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/sources/{source}/mandate_notifications/{mandate_notification}
--
-- \<p>Retrieves a new Source MandateNotification.\<\/p>
getSourcesSourceMandateNotificationsMandateNotification ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSourcesSourceMandateNotificationsMandateNotificationParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetSourcesSourceMandateNotificationsMandateNotificationResponse)
getSourcesSourceMandateNotificationsMandateNotification parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSourcesSourceMandateNotificationsMandateNotificationResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSourcesSourceMandateNotificationsMandateNotificationResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            SourceMandateNotification
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSourcesSourceMandateNotificationsMandateNotificationResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack (("/v1/sources/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceMandateNotificationsMandateNotificationParametersPathSource parameters))) GHC.Base.++ "/mandate_notifications/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceMandateNotificationsMandateNotificationParametersPathMandateNotification parameters))) GHC.Base.++ ""))) [StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceMandateNotificationsMandateNotificationParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True])

-- | Defines the data type for the schema getSourcesSourceMandateNotificationsMandateNotificationParameters
data GetSourcesSourceMandateNotificationsMandateNotificationParameters
  = GetSourcesSourceMandateNotificationsMandateNotificationParameters
      { -- | pathMandate_notification: Represents the parameter named \'mandate_notification\'
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSourcesSourceMandateNotificationsMandateNotificationParametersPathMandateNotification :: Data.Text.Internal.Text,
        -- | pathSource: Represents the parameter named \'source\'
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getSourcesSourceMandateNotificationsMandateNotificationParametersPathSource :: Data.Text.Internal.Text,
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getSourcesSourceMandateNotificationsMandateNotificationParametersQueryExpand :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text))
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.ToJSON GetSourcesSourceMandateNotificationsMandateNotificationParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pathMandate_notification" (getSourcesSourceMandateNotificationsMandateNotificationParametersPathMandateNotification obj) : (Data.Aeson..=) "pathSource" (getSourcesSourceMandateNotificationsMandateNotificationParametersPathSource obj) : (Data.Aeson..=) "queryExpand" (getSourcesSourceMandateNotificationsMandateNotificationParametersQueryExpand obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pathMandate_notification" (getSourcesSourceMandateNotificationsMandateNotificationParametersPathMandateNotification obj) GHC.Base.<> ((Data.Aeson..=) "pathSource" (getSourcesSourceMandateNotificationsMandateNotificationParametersPathSource obj) GHC.Base.<> (Data.Aeson..=) "queryExpand" (getSourcesSourceMandateNotificationsMandateNotificationParametersQueryExpand obj)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSourcesSourceMandateNotificationsMandateNotificationParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSourcesSourceMandateNotificationsMandateNotificationParameters" (\obj -> ((GHC.Base.pure GetSourcesSourceMandateNotificationsMandateNotificationParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathMandate_notification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathSource")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand"))

-- | Represents a response of the operation 'getSourcesSourceMandateNotificationsMandateNotification'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSourcesSourceMandateNotificationsMandateNotificationResponseError' is used.
data GetSourcesSourceMandateNotificationsMandateNotificationResponse
  = -- | Means either no matching case available or a parse error
    GetSourcesSourceMandateNotificationsMandateNotificationResponseError GHC.Base.String
  | -- | Successful response.
    GetSourcesSourceMandateNotificationsMandateNotificationResponse200 SourceMandateNotification
  | -- | Error response.
    GetSourcesSourceMandateNotificationsMandateNotificationResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | > GET /v1/sources/{source}/mandate_notifications/{mandate_notification}
--
-- The same as 'getSourcesSourceMandateNotificationsMandateNotification' but accepts an explicit configuration.
getSourcesSourceMandateNotificationsMandateNotificationWithConfiguration ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  StripeAPI.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSourcesSourceMandateNotificationsMandateNotificationParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response GetSourcesSourceMandateNotificationsMandateNotificationResponse)
getSourcesSourceMandateNotificationsMandateNotificationWithConfiguration
  config
  parameters =
    GHC.Base.fmap
      ( \response_2 ->
          GHC.Base.fmap
            ( Data.Either.either GetSourcesSourceMandateNotificationsMandateNotificationResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSourcesSourceMandateNotificationsMandateNotificationResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              SourceMandateNotification
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetSourcesSourceMandateNotificationsMandateNotificationResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_2
            )
            response_2
      )
      (StripeAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack (("/v1/sources/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceMandateNotificationsMandateNotificationParametersPathSource parameters))) GHC.Base.++ "/mandate_notifications/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceMandateNotificationsMandateNotificationParametersPathMandateNotification parameters))) GHC.Base.++ ""))) [StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceMandateNotificationsMandateNotificationParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True])

-- | > GET /v1/sources/{source}/mandate_notifications/{mandate_notification}
--
-- The same as 'getSourcesSourceMandateNotificationsMandateNotification' but returns the raw 'Data.ByteString.Char8.ByteString'.
getSourcesSourceMandateNotificationsMandateNotificationRaw ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSourcesSourceMandateNotificationsMandateNotificationParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSourcesSourceMandateNotificationsMandateNotificationRaw parameters = GHC.Base.id (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack (("/v1/sources/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceMandateNotificationsMandateNotificationParametersPathSource parameters))) GHC.Base.++ "/mandate_notifications/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceMandateNotificationsMandateNotificationParametersPathMandateNotification parameters))) GHC.Base.++ ""))) [StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceMandateNotificationsMandateNotificationParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True])

-- | > GET /v1/sources/{source}/mandate_notifications/{mandate_notification}
--
-- The same as 'getSourcesSourceMandateNotificationsMandateNotification' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
getSourcesSourceMandateNotificationsMandateNotificationWithConfigurationRaw ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  StripeAPI.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSourcesSourceMandateNotificationsMandateNotificationParameters ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
getSourcesSourceMandateNotificationsMandateNotificationWithConfigurationRaw
  config
  parameters = GHC.Base.id (StripeAPI.Common.doCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack (("/v1/sources/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceMandateNotificationsMandateNotificationParametersPathSource parameters))) GHC.Base.++ "/mandate_notifications/")) GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSourcesSourceMandateNotificationsMandateNotificationParametersPathMandateNotification parameters))) GHC.Base.++ ""))) [StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSourcesSourceMandateNotificationsMandateNotificationParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True])
