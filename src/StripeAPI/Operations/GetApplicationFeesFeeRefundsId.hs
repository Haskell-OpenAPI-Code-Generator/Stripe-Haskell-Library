-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getApplicationFeesFeeRefundsId
module StripeAPI.Operations.GetApplicationFeesFeeRefundsId where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/application_fees/{fee}/refunds/{id}
-- 
-- \<p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.\<\/p>
getApplicationFeesFeeRefundsId :: forall m . StripeAPI.Common.MonadHTTP m => GetApplicationFeesFeeRefundsIdParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetApplicationFeesFeeRefundsIdResponse) -- ^ Monadic computation which returns the result of the operation
getApplicationFeesFeeRefundsId parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetApplicationFeesFeeRefundsIdResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetApplicationFeesFeeRefundsIdResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   FeeRefund)
                                                                                                                                                                                                     | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetApplicationFeesFeeRefundsIdResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                     Error)
                                                                                                                                                                                                     | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/v1/application_fees/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getApplicationFeesFeeRefundsIdParametersPathFee parameters))) GHC.Base.++ ("/refunds/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getApplicationFeesFeeRefundsIdParametersPathId parameters))) GHC.Base.++ ""))))) [StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplicationFeesFeeRefundsIdParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/application_fees\/{fee}\/refunds\/{id}.GET.parameters@ in the specification.
-- 
-- 
data GetApplicationFeesFeeRefundsIdParameters = GetApplicationFeesFeeRefundsIdParameters {
  -- | pathFee: Represents the parameter named \'fee\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getApplicationFeesFeeRefundsIdParametersPathFee :: Data.Text.Internal.Text
  -- | pathId: Represents the parameter named \'id\'
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getApplicationFeesFeeRefundsIdParametersPathId :: Data.Text.Internal.Text
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getApplicationFeesFeeRefundsIdParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetApplicationFeesFeeRefundsIdParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathFee" Data.Aeson.Types.ToJSON..= getApplicationFeesFeeRefundsIdParametersPathFee obj] : ["pathId" Data.Aeson.Types.ToJSON..= getApplicationFeesFeeRefundsIdParametersPathId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getApplicationFeesFeeRefundsIdParametersQueryExpand obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathFee" Data.Aeson.Types.ToJSON..= getApplicationFeesFeeRefundsIdParametersPathFee obj] : ["pathId" Data.Aeson.Types.ToJSON..= getApplicationFeesFeeRefundsIdParametersPathId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getApplicationFeesFeeRefundsIdParametersQueryExpand obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetApplicationFeesFeeRefundsIdParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApplicationFeesFeeRefundsIdParameters" (\obj -> ((GHC.Base.pure GetApplicationFeesFeeRefundsIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathFee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand"))
-- | Create a new 'GetApplicationFeesFeeRefundsIdParameters' with all required fields.
mkGetApplicationFeesFeeRefundsIdParameters :: Data.Text.Internal.Text -- ^ 'getApplicationFeesFeeRefundsIdParametersPathFee'
  -> Data.Text.Internal.Text -- ^ 'getApplicationFeesFeeRefundsIdParametersPathId'
  -> GetApplicationFeesFeeRefundsIdParameters
mkGetApplicationFeesFeeRefundsIdParameters getApplicationFeesFeeRefundsIdParametersPathFee getApplicationFeesFeeRefundsIdParametersPathId = GetApplicationFeesFeeRefundsIdParameters{getApplicationFeesFeeRefundsIdParametersPathFee = getApplicationFeesFeeRefundsIdParametersPathFee,
                                                                                                                                                                                     getApplicationFeesFeeRefundsIdParametersPathId = getApplicationFeesFeeRefundsIdParametersPathId,
                                                                                                                                                                                     getApplicationFeesFeeRefundsIdParametersQueryExpand = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getApplicationFeesFeeRefundsId'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApplicationFeesFeeRefundsIdResponseError' is used.
data GetApplicationFeesFeeRefundsIdResponse =
   GetApplicationFeesFeeRefundsIdResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetApplicationFeesFeeRefundsIdResponse200 FeeRefund -- ^ Successful response.
  | GetApplicationFeesFeeRefundsIdResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
