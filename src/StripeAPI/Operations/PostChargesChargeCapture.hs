{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postChargesChargeCapture
module StripeAPI.Operations.PostChargesChargeCapture where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/charges/{charge}/capture
--
-- \<p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you \<a href=\"\#create_charge\">created a charge\<\/a> with the capture option set to false.\<\/p>
--
-- \<p>Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.\<\/p>
postChargesChargeCapture ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | charge | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostChargesChargeCaptureRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostChargesChargeCaptureResponse)
postChargesChargeCapture
  charge
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostChargesChargeCaptureResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostChargesChargeCaptureResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Charge
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostChargesChargeCaptureResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/charges/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel charge)) GHC.Base.++ "/capture"))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/charges\/{charge}\/capture.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostChargesChargeCaptureRequestBody = PostChargesChargeCaptureRequestBody
  { -- | amount: The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded.
    postChargesChargeCaptureRequestBodyAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | application_fee: An application fee to add on to this charge.
    postChargesChargeCaptureRequestBodyApplicationFee :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | application_fee_amount: An application fee amount to add on to this charge, which must be less than or equal to the original amount.
    postChargesChargeCaptureRequestBodyApplicationFeeAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | expand: Specifies which fields in the response should be expanded.
    postChargesChargeCaptureRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | receipt_email: The email address to send this charge\'s receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode.
    postChargesChargeCaptureRequestBodyReceiptEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | statement_descriptor: For card charges, use \`statement_descriptor_suffix\` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 22
    postChargesChargeCaptureRequestBodyStatementDescriptor :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | statement_descriptor_suffix: Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    --
    -- Constraints:
    --
    -- * Maximum length of 22
    postChargesChargeCaptureRequestBodyStatementDescriptorSuffix :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | transfer_data: An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https:\/\/stripe.com\/docs\/connect\/destination-charges) for details.
    postChargesChargeCaptureRequestBodyTransferData :: (GHC.Maybe.Maybe PostChargesChargeCaptureRequestBodyTransferData'),
    -- | transfer_group: A string that identifies this transaction as part of a group. \`transfer_group\` may only be provided if it has not been set. See the [Connect documentation](https:\/\/stripe.com\/docs\/connect\/charges-transfers\#transfer-options) for details.
    postChargesChargeCaptureRequestBodyTransferGroup :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeCaptureRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyAmount obj : "application_fee" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyApplicationFee obj : "application_fee_amount" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyApplicationFeeAmount obj : "expand" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyExpand obj : "receipt_email" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyReceiptEmail obj : "statement_descriptor" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyStatementDescriptor obj : "statement_descriptor_suffix" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyStatementDescriptorSuffix obj : "transfer_data" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyTransferData obj : "transfer_group" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyTransferGroup obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyAmount obj) GHC.Base.<> (("application_fee" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyApplicationFee obj) GHC.Base.<> (("application_fee_amount" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyApplicationFeeAmount obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyExpand obj) GHC.Base.<> (("receipt_email" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyReceiptEmail obj) GHC.Base.<> (("statement_descriptor" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyStatementDescriptor obj) GHC.Base.<> (("statement_descriptor_suffix" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyStatementDescriptorSuffix obj) GHC.Base.<> (("transfer_data" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyTransferData obj) GHC.Base.<> ("transfer_group" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyTransferGroup obj)))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeCaptureRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostChargesChargeCaptureRequestBody" (\obj -> ((((((((GHC.Base.pure PostChargesChargeCaptureRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor_suffix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_group"))

-- | Create a new 'PostChargesChargeCaptureRequestBody' with all required fields.
mkPostChargesChargeCaptureRequestBody :: PostChargesChargeCaptureRequestBody
mkPostChargesChargeCaptureRequestBody =
  PostChargesChargeCaptureRequestBody
    { postChargesChargeCaptureRequestBodyAmount = GHC.Maybe.Nothing,
      postChargesChargeCaptureRequestBodyApplicationFee = GHC.Maybe.Nothing,
      postChargesChargeCaptureRequestBodyApplicationFeeAmount = GHC.Maybe.Nothing,
      postChargesChargeCaptureRequestBodyExpand = GHC.Maybe.Nothing,
      postChargesChargeCaptureRequestBodyReceiptEmail = GHC.Maybe.Nothing,
      postChargesChargeCaptureRequestBodyStatementDescriptor = GHC.Maybe.Nothing,
      postChargesChargeCaptureRequestBodyStatementDescriptorSuffix = GHC.Maybe.Nothing,
      postChargesChargeCaptureRequestBodyTransferData = GHC.Maybe.Nothing,
      postChargesChargeCaptureRequestBodyTransferGroup = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/charges\/{charge}\/capture.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.transfer_data@ in the specification.
--
-- An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https:\/\/stripe.com\/docs\/connect\/destination-charges) for details.
data PostChargesChargeCaptureRequestBodyTransferData' = PostChargesChargeCaptureRequestBodyTransferData'
  { -- | amount
    postChargesChargeCaptureRequestBodyTransferData'Amount :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostChargesChargeCaptureRequestBodyTransferData' where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyTransferData'Amount obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("amount" Data.Aeson.Types.ToJSON..= postChargesChargeCaptureRequestBodyTransferData'Amount obj)

instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeCaptureRequestBodyTransferData' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostChargesChargeCaptureRequestBodyTransferData'" (\obj -> GHC.Base.pure PostChargesChargeCaptureRequestBodyTransferData' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount"))

-- | Create a new 'PostChargesChargeCaptureRequestBodyTransferData'' with all required fields.
mkPostChargesChargeCaptureRequestBodyTransferData' :: PostChargesChargeCaptureRequestBodyTransferData'
mkPostChargesChargeCaptureRequestBodyTransferData' = PostChargesChargeCaptureRequestBodyTransferData' {postChargesChargeCaptureRequestBodyTransferData'Amount = GHC.Maybe.Nothing}

-- | Represents a response of the operation 'postChargesChargeCapture'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostChargesChargeCaptureResponseError' is used.
data PostChargesChargeCaptureResponse
  = -- | Means either no matching case available or a parse error
    PostChargesChargeCaptureResponseError GHC.Base.String
  | -- | Successful response.
    PostChargesChargeCaptureResponse200 Charge
  | -- | Error response.
    PostChargesChargeCaptureResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
