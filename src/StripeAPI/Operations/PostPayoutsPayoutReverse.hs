{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postPayoutsPayoutReverse
module StripeAPI.Operations.PostPayoutsPayoutReverse where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/payouts/{payout}/reverse
--
-- \<p>Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the \<code>pending\<\/code> status, \<code>\/v1\/payouts\/:id\/cancel\<\/code> should be used instead.\<\/p>
--
-- \<p>By requesting a reversal via \<code>\/v1\/payouts\/:id\/reverse\<\/code>, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.\<\/p>
postPayoutsPayoutReverse ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | payout | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostPayoutsPayoutReverseRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostPayoutsPayoutReverseResponse)
postPayoutsPayoutReverse
  payout
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostPayoutsPayoutReverseResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostPayoutsPayoutReverseResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Payout
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostPayoutsPayoutReverseResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/payouts/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel payout)) GHC.Base.++ "/reverse"))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/payouts\/{payout}\/reverse.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostPayoutsPayoutReverseRequestBody = PostPayoutsPayoutReverseRequestBody
  { -- | expand: Specifies which fields in the response should be expanded.
    postPayoutsPayoutReverseRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
    postPayoutsPayoutReverseRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostPayoutsPayoutReverseRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("expand" Data.Aeson.Types.ToJSON..= postPayoutsPayoutReverseRequestBodyExpand obj : "metadata" Data.Aeson.Types.ToJSON..= postPayoutsPayoutReverseRequestBodyMetadata obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("expand" Data.Aeson.Types.ToJSON..= postPayoutsPayoutReverseRequestBodyExpand obj) GHC.Base.<> ("metadata" Data.Aeson.Types.ToJSON..= postPayoutsPayoutReverseRequestBodyMetadata obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostPayoutsPayoutReverseRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPayoutsPayoutReverseRequestBody" (\obj -> (GHC.Base.pure PostPayoutsPayoutReverseRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata"))

-- | Create a new 'PostPayoutsPayoutReverseRequestBody' with all required fields.
mkPostPayoutsPayoutReverseRequestBody :: PostPayoutsPayoutReverseRequestBody
mkPostPayoutsPayoutReverseRequestBody =
  PostPayoutsPayoutReverseRequestBody
    { postPayoutsPayoutReverseRequestBodyExpand = GHC.Maybe.Nothing,
      postPayoutsPayoutReverseRequestBodyMetadata = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postPayoutsPayoutReverse'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostPayoutsPayoutReverseResponseError' is used.
data PostPayoutsPayoutReverseResponse
  = -- | Means either no matching case available or a parse error
    PostPayoutsPayoutReverseResponseError GHC.Base.String
  | -- | Successful response.
    PostPayoutsPayoutReverseResponse200 Payout
  | -- | Error response.
    PostPayoutsPayoutReverseResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
