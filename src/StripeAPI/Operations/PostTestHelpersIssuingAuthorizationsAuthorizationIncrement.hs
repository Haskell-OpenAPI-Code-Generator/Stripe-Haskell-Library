{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postTestHelpersIssuingAuthorizationsAuthorizationIncrement
module StripeAPI.Operations.PostTestHelpersIssuingAuthorizationsAuthorizationIncrement where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/test_helpers/issuing/authorizations/{authorization}/increment
--
-- \<p>Increment a test-mode Authorization.\<\/p>
postTestHelpersIssuingAuthorizationsAuthorizationIncrement ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | authorization | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponse)
postTestHelpersIssuingAuthorizationsAuthorizationIncrement
  authorization
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                       PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponse200
                                         Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                              Data.Either.Either
                                                                GHC.Base.String
                                                                Issuing'authorization
                                                          )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                       PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponseDefault
                                         Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                              Data.Either.Either
                                                                GHC.Base.String
                                                                Error
                                                          )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/v1/test_helpers/issuing/authorizations/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel authorization)) GHC.Base.<> "/increment")) GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/test_helpers\/issuing\/authorizations\/{authorization}\/increment.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody = PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody
  { -- | expand: Specifies which fields in the response should be expanded.
    postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | increment_amount: The amount to increment the authorization by. This amount is in the authorization currency and in the [smallest currency unit](https:\/\/stripe.com\/docs\/currencies\#zero-decimal).
    postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIncrementAmount :: GHC.Types.Int,
    -- | is_amount_controllable: If set \`true\`, you may provide [amount](https:\/\/stripe.com\/docs\/api\/issuing\/authorizations\/approve\#approve_issuing_authorization-amount) to control how much to hold for the authorization.
    postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIsAmountControllable :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyExpand obj) : ["increment_amount" Data.Aeson.Types.ToJSON..= postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIncrementAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_amount_controllable" Data.Aeson.Types.ToJSON..=)) (postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIsAmountControllable obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyExpand obj) : ["increment_amount" Data.Aeson.Types.ToJSON..= postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIncrementAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_amount_controllable" Data.Aeson.Types.ToJSON..=)) (postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIsAmountControllable obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody" (\obj -> ((GHC.Base.pure PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "increment_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_amount_controllable"))

-- | Create a new 'PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody' with all required fields.
mkPostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody ::
  -- | 'postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIncrementAmount'
  GHC.Types.Int ->
  PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody
mkPostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIncrementAmount =
  PostTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBody
    { postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyExpand = GHC.Maybe.Nothing,
      postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIncrementAmount = postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIncrementAmount,
      postTestHelpersIssuingAuthorizationsAuthorizationIncrementRequestBodyIsAmountControllable = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postTestHelpersIssuingAuthorizationsAuthorizationIncrement'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponseError' is used.
data PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponse
  = -- | Means either no matching case available or a parse error
    PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponseError GHC.Base.String
  | -- | Successful response.
    PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponse200 Issuing'authorization
  | -- | Error response.
    PostTestHelpersIssuingAuthorizationsAuthorizationIncrementResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
