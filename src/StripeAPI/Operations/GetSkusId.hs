{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSkusId
module StripeAPI.Operations.GetSkusId where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/skus/{id}
--
-- \<p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.\<\/p>
getSkusId ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSkusIdParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetSkusIdResponse)
getSkusId parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSkusIdResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSkusIdResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSkusIdResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSkusIdResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack ("/v1/skus/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (getSkusIdParametersPathId parameters))) GHC.Base.++ ""))) [StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSkusIdParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True])

-- | Defines the object schema located at @paths.\/v1\/skus\/{id}.GET.parameters@ in the specification.
data GetSkusIdParameters = GetSkusIdParameters
  { -- | pathId: Represents the parameter named \'id\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSkusIdParametersPathId :: Data.Text.Internal.Text,
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getSkusIdParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSkusIdParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathId" Data.Aeson.Types.ToJSON..= getSkusIdParametersPathId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getSkusIdParametersQueryExpand obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathId" Data.Aeson.Types.ToJSON..= getSkusIdParametersPathId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getSkusIdParametersQueryExpand obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSkusIdParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSkusIdParameters" (\obj -> (GHC.Base.pure GetSkusIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand"))

-- | Create a new 'GetSkusIdParameters' with all required fields.
mkGetSkusIdParameters ::
  -- | 'getSkusIdParametersPathId'
  Data.Text.Internal.Text ->
  GetSkusIdParameters
mkGetSkusIdParameters getSkusIdParametersPathId =
  GetSkusIdParameters
    { getSkusIdParametersPathId = getSkusIdParametersPathId,
      getSkusIdParametersQueryExpand = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getSkusId'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSkusIdResponseError' is used.
data GetSkusIdResponse
  = -- | Means either no matching case available or a parse error
    GetSkusIdResponseError GHC.Base.String
  | -- | Successful response.
    GetSkusIdResponse200 GetSkusIdResponseBody200
  | -- | Error response.
    GetSkusIdResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/skus\/{id}.GET.responses.200.content.application\/json.schema.anyOf@ in the specification.
data GetSkusIdResponseBody200 = GetSkusIdResponseBody200
  { -- | active: Whether the SKU is available for purchase.
    getSkusIdResponseBody200Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | attributes: A dictionary of attributes and values for the attributes defined by the product. If, for example, a product\'s attributes are \`[\"size\", \"gender\"]\`, a valid SKU has the following dictionary of attributes: \`{\"size\": \"Medium\", \"gender\": \"Unisex\"}\`.
    getSkusIdResponseBody200Attributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    getSkusIdResponseBody200Created :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    getSkusIdResponseBody200Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | deleted: Always true for a deleted object
    getSkusIdResponseBody200Deleted :: (GHC.Maybe.Maybe GetSkusIdResponseBody200Deleted'),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSkusIdResponseBody200Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | image: The URL of an image for this SKU, meant to be displayable to the customer.
    --
    -- Constraints:
    --
    -- * Maximum length of 2048
    getSkusIdResponseBody200Image :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | inventory:
    getSkusIdResponseBody200Inventory :: (GHC.Maybe.Maybe SkuInventory),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    getSkusIdResponseBody200Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    getSkusIdResponseBody200Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | object: String representing the object\'s type. Objects of the same type share the same value.
    getSkusIdResponseBody200Object :: (GHC.Maybe.Maybe GetSkusIdResponseBody200Object'),
    -- | package_dimensions: The dimensions of this SKU for shipping purposes.
    getSkusIdResponseBody200PackageDimensions :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetSkusIdResponseBody200PackageDimensions'NonNullable)),
    -- | price: The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge \$1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency).
    getSkusIdResponseBody200Price :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | product: The ID of the product this SKU is associated with. The product must be currently active.
    getSkusIdResponseBody200Product :: (GHC.Maybe.Maybe GetSkusIdResponseBody200Product'Variants),
    -- | updated: Time at which the object was last updated. Measured in seconds since the Unix epoch.
    getSkusIdResponseBody200Updated :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSkusIdResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("active" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Active obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Created obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Deleted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("image" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Image obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("inventory" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Inventory obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Livemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("package_dimensions" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Price obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Product obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Updated obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("active" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Active obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attributes" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Attributes obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Created obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deleted" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Deleted obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("image" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Image obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("inventory" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Inventory obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Livemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("package_dimensions" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Price obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Product obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("updated" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200Updated obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSkusIdResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSkusIdResponseBody200" (\obj -> ((((((((((((((GHC.Base.pure GetSkusIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attributes")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "deleted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "inventory")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "package_dimensions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "updated"))

-- | Create a new 'GetSkusIdResponseBody200' with all required fields.
mkGetSkusIdResponseBody200 :: GetSkusIdResponseBody200
mkGetSkusIdResponseBody200 =
  GetSkusIdResponseBody200
    { getSkusIdResponseBody200Active = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Attributes = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Created = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Currency = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Deleted = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Id = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Image = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Inventory = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Livemode = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Metadata = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Object = GHC.Maybe.Nothing,
      getSkusIdResponseBody200PackageDimensions = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Price = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Product = GHC.Maybe.Nothing,
      getSkusIdResponseBody200Updated = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/skus\/{id}.GET.responses.200.content.application\/json.schema.anyOf.properties.deleted@ in the specification.
--
-- Always true for a deleted object
data GetSkusIdResponseBody200Deleted'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetSkusIdResponseBody200Deleted'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetSkusIdResponseBody200Deleted'Typed GHC.Types.Bool
  | -- | Represents the JSON value @true@
    GetSkusIdResponseBody200Deleted'EnumTrue
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSkusIdResponseBody200Deleted' where
  toJSON (GetSkusIdResponseBody200Deleted'Other val) = val
  toJSON (GetSkusIdResponseBody200Deleted'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetSkusIdResponseBody200Deleted'EnumTrue) = Data.Aeson.Types.Internal.Bool GHC.Types.True

instance Data.Aeson.Types.FromJSON.FromJSON GetSkusIdResponseBody200Deleted' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== Data.Aeson.Types.Internal.Bool GHC.Types.True -> GetSkusIdResponseBody200Deleted'EnumTrue
            | GHC.Base.otherwise -> GetSkusIdResponseBody200Deleted'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/skus\/{id}.GET.responses.200.content.application\/json.schema.anyOf.properties.object@ in the specification.
--
-- String representing the object\'s type. Objects of the same type share the same value.
data GetSkusIdResponseBody200Object'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetSkusIdResponseBody200Object'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetSkusIdResponseBody200Object'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"sku"@
    GetSkusIdResponseBody200Object'EnumSku
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSkusIdResponseBody200Object' where
  toJSON (GetSkusIdResponseBody200Object'Other val) = val
  toJSON (GetSkusIdResponseBody200Object'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetSkusIdResponseBody200Object'EnumSku) = "sku"

instance Data.Aeson.Types.FromJSON.FromJSON GetSkusIdResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "sku" -> GetSkusIdResponseBody200Object'EnumSku
            | GHC.Base.otherwise -> GetSkusIdResponseBody200Object'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/skus\/{id}.GET.responses.200.content.application\/json.schema.anyOf.properties.package_dimensions.anyOf@ in the specification.
--
-- The dimensions of this SKU for shipping purposes.
data GetSkusIdResponseBody200PackageDimensions'NonNullable = GetSkusIdResponseBody200PackageDimensions'NonNullable
  { -- | height: Height, in inches.
    getSkusIdResponseBody200PackageDimensions'NonNullableHeight :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | length: Length, in inches.
    getSkusIdResponseBody200PackageDimensions'NonNullableLength :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | weight: Weight, in ounces.
    getSkusIdResponseBody200PackageDimensions'NonNullableWeight :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | width: Width, in inches.
    getSkusIdResponseBody200PackageDimensions'NonNullableWidth :: (GHC.Maybe.Maybe GHC.Types.Double)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSkusIdResponseBody200PackageDimensions'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("height" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions'NonNullableHeight obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions'NonNullableLength obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("weight" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions'NonNullableWeight obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("width" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions'NonNullableWidth obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("height" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions'NonNullableHeight obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("length" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions'NonNullableLength obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("weight" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions'NonNullableWeight obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("width" Data.Aeson.Types.ToJSON..=)) (getSkusIdResponseBody200PackageDimensions'NonNullableWidth obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSkusIdResponseBody200PackageDimensions'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSkusIdResponseBody200PackageDimensions'NonNullable" (\obj -> (((GHC.Base.pure GetSkusIdResponseBody200PackageDimensions'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "height")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "length")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "weight")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "width"))

-- | Create a new 'GetSkusIdResponseBody200PackageDimensions'NonNullable' with all required fields.
mkGetSkusIdResponseBody200PackageDimensions'NonNullable :: GetSkusIdResponseBody200PackageDimensions'NonNullable
mkGetSkusIdResponseBody200PackageDimensions'NonNullable =
  GetSkusIdResponseBody200PackageDimensions'NonNullable
    { getSkusIdResponseBody200PackageDimensions'NonNullableHeight = GHC.Maybe.Nothing,
      getSkusIdResponseBody200PackageDimensions'NonNullableLength = GHC.Maybe.Nothing,
      getSkusIdResponseBody200PackageDimensions'NonNullableWeight = GHC.Maybe.Nothing,
      getSkusIdResponseBody200PackageDimensions'NonNullableWidth = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/skus\/{id}.GET.responses.200.content.application\/json.schema.anyOf.properties.product.anyOf@ in the specification.
--
-- The ID of the product this SKU is associated with. The product must be currently active.
data GetSkusIdResponseBody200Product'Variants
  = GetSkusIdResponseBody200Product'Text Data.Text.Internal.Text
  | GetSkusIdResponseBody200Product'Product Product
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetSkusIdResponseBody200Product'Variants where
  toJSON (GetSkusIdResponseBody200Product'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetSkusIdResponseBody200Product'Product a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetSkusIdResponseBody200Product'Variants where
  parseJSON val = case (GetSkusIdResponseBody200Product'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetSkusIdResponseBody200Product'Product Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
