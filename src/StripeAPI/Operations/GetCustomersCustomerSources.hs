{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getCustomersCustomerSources
module StripeAPI.Operations.GetCustomersCustomerSources where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/customers/{customer}/sources
--
-- \<p>List sources for a specified customer.\<\/p>
getCustomersCustomerSources ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetCustomersCustomerSourcesParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetCustomersCustomerSourcesResponse)
getCustomersCustomerSources parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetCustomersCustomerSourcesResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetCustomersCustomerSourcesResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetCustomersCustomerSourcesResponseBody200
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetCustomersCustomerSourcesResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        ("/v1/customers/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel (getCustomersCustomerSourcesParametersPathCustomer parameters))) GHC.Base.<> "/sources"))
        [ StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCustomersCustomerSourcesParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCustomersCustomerSourcesParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCustomersCustomerSourcesParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "object") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCustomersCustomerSourcesParametersQueryObject parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getCustomersCustomerSourcesParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.parameters@ in the specification.
data GetCustomersCustomerSourcesParameters = GetCustomersCustomerSourcesParameters
  { -- | pathCustomer: Represents the parameter named \'customer\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesParametersPathCustomer :: Data.Text.Internal.Text,
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    getCustomersCustomerSourcesParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getCustomersCustomerSourcesParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getCustomersCustomerSourcesParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryObject: Represents the parameter named \'object\'
    --
    -- Filter sources according to a particular object type.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesParametersQueryObject :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    getCustomersCustomerSourcesParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathCustomer" Data.Aeson.Types.ToJSON..= getCustomersCustomerSourcesParametersPathCustomer obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryObject" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryStartingAfter obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathCustomer" Data.Aeson.Types.ToJSON..= getCustomersCustomerSourcesParametersPathCustomer obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryObject" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesParametersQueryStartingAfter obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCustomersCustomerSourcesParameters" (\obj -> (((((GHC.Base.pure GetCustomersCustomerSourcesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathCustomer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryObject")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))

-- | Create a new 'GetCustomersCustomerSourcesParameters' with all required fields.
mkGetCustomersCustomerSourcesParameters ::
  -- | 'getCustomersCustomerSourcesParametersPathCustomer'
  Data.Text.Internal.Text ->
  GetCustomersCustomerSourcesParameters
mkGetCustomersCustomerSourcesParameters getCustomersCustomerSourcesParametersPathCustomer =
  GetCustomersCustomerSourcesParameters
    { getCustomersCustomerSourcesParametersPathCustomer = getCustomersCustomerSourcesParametersPathCustomer,
      getCustomersCustomerSourcesParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesParametersQueryExpand = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesParametersQueryLimit = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesParametersQueryObject = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getCustomersCustomerSources'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetCustomersCustomerSourcesResponseError' is used.
data GetCustomersCustomerSourcesResponse
  = -- | Means either no matching case available or a parse error
    GetCustomersCustomerSourcesResponseError GHC.Base.String
  | -- | Successful response.
    GetCustomersCustomerSourcesResponse200 GetCustomersCustomerSourcesResponseBody200
  | -- | Error response.
    GetCustomersCustomerSourcesResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema@ in the specification.
data GetCustomersCustomerSourcesResponseBody200 = GetCustomersCustomerSourcesResponseBody200
  { -- | data: Details about each object.
    getCustomersCustomerSourcesResponseBody200Data :: ([GetCustomersCustomerSourcesResponseBody200Data']),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getCustomersCustomerSourcesResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getCustomersCustomerSourcesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getCustomersCustomerSourcesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getCustomersCustomerSourcesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getCustomersCustomerSourcesResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getCustomersCustomerSourcesResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getCustomersCustomerSourcesResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCustomersCustomerSourcesResponseBody200" (\obj -> ((GHC.Base.pure GetCustomersCustomerSourcesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetCustomersCustomerSourcesResponseBody200' with all required fields.
mkGetCustomersCustomerSourcesResponseBody200 ::
  -- | 'getCustomersCustomerSourcesResponseBody200Data'
  [GetCustomersCustomerSourcesResponseBody200Data'] ->
  -- | 'getCustomersCustomerSourcesResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getCustomersCustomerSourcesResponseBody200Url'
  Data.Text.Internal.Text ->
  GetCustomersCustomerSourcesResponseBody200
mkGetCustomersCustomerSourcesResponseBody200 getCustomersCustomerSourcesResponseBody200Data getCustomersCustomerSourcesResponseBody200HasMore getCustomersCustomerSourcesResponseBody200Url =
  GetCustomersCustomerSourcesResponseBody200
    { getCustomersCustomerSourcesResponseBody200Data = getCustomersCustomerSourcesResponseBody200Data,
      getCustomersCustomerSourcesResponseBody200HasMore = getCustomersCustomerSourcesResponseBody200HasMore,
      getCustomersCustomerSourcesResponseBody200Url = getCustomersCustomerSourcesResponseBody200Url
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf@ in the specification.
data GetCustomersCustomerSourcesResponseBody200Data' = GetCustomersCustomerSourcesResponseBody200Data'
  { -- | account: The ID of the account that the bank account is associated with.
    getCustomersCustomerSourcesResponseBody200Data'Account :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableVariants)),
    -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AccountHolderName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AccountHolderType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_type: The bank account type. This can only be \`checking\` or \`savings\` in most countries. In Japan, this can only be \`futsu\` or \`toza\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AccountType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | ach_credit_transfer
    getCustomersCustomerSourcesResponseBody200Data'AchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
    -- | ach_debit
    getCustomersCustomerSourcesResponseBody200Data'AchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
    -- | acss_debit
    getCustomersCustomerSourcesResponseBody200Data'AcssDebit :: (GHC.Maybe.Maybe SourceTypeAcssDebit),
    -- | address_city: City\/District\/Suburb\/Town\/Village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AddressCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_country: Billing address country, if provided when creating card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AddressCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AddressLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AddressLine1Check :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AddressLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_state: State\/County\/Province\/Region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AddressState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AddressZip :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'AddressZipCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | alipay
    getCustomersCustomerSourcesResponseBody200Data'Alipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
    -- | amount: A positive integer in the smallest currency unit (that is, 100 cents for \$1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for \`single_use\` sources.
    getCustomersCustomerSourcesResponseBody200Data'Amount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | au_becs_debit
    getCustomersCustomerSourcesResponseBody200Data'AuBecsDebit :: (GHC.Maybe.Maybe SourceTypeAuBecsDebit),
    -- | available_payout_methods: A set of available payout methods for this bank account. Only values from this set should be passed as the \`method\` when creating a payout.
    getCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullable]))),
    -- | bancontact
    getCustomersCustomerSourcesResponseBody200Data'Bancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
    -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'BankName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`Eftpos Australia\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | card
    getCustomersCustomerSourcesResponseBody200Data'Card :: (GHC.Maybe.Maybe SourceTypeCard),
    -- | card_present
    getCustomersCustomerSourcesResponseBody200Data'CardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
    -- | client_secret: The client secret of the source. Used for client-side retrieval using a publishable key.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'ClientSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | code_verification:
    getCustomersCustomerSourcesResponseBody200Data'CodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
    -- | country: Two-letter ISO code representing the country the bank account is located in.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    getCustomersCustomerSourcesResponseBody200Data'Created :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
    getCustomersCustomerSourcesResponseBody200Data'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The ID of the customer that the bank account is associated with.
    getCustomersCustomerSourcesResponseBody200Data'Customer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableVariants)),
    -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`. A result of unchecked indicates that CVC was provided but hasn\'t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https:\/\/support.stripe.com\/questions\/check-if-a-card-is-valid-without-a-charge).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'CvcCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | default_for_currency: Whether this bank account is the default external account for its currency.
    getCustomersCustomerSourcesResponseBody200Data'DefaultForCurrency :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool)),
    -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'DynamicLast4 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | eps
    getCustomersCustomerSourcesResponseBody200Data'Eps :: (GHC.Maybe.Maybe SourceTypeEps),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    getCustomersCustomerSourcesResponseBody200Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    getCustomersCustomerSourcesResponseBody200Data'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Fingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow: The authentication \`flow\` of the source. \`flow\` is one of \`redirect\`, \`receiver\`, \`code_verification\`, \`none\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Flow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | future_requirements: Information about the [upcoming new requirements for the bank account](https:\/\/stripe.com\/docs\/connect\/custom-accounts\/future-requirements), including what information needs to be collected, and by when.
    getCustomersCustomerSourcesResponseBody200Data'FutureRequirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable)),
    -- | giropay
    getCustomersCustomerSourcesResponseBody200Data'Giropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | ideal
    getCustomersCustomerSourcesResponseBody200Data'Ideal :: (GHC.Maybe.Maybe SourceTypeIdeal),
    -- | klarna
    getCustomersCustomerSourcesResponseBody200Data'Klarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
    -- | last4: The last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    getCustomersCustomerSourcesResponseBody200Data'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    getCustomersCustomerSourcesResponseBody200Data'Metadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | multibanco
    getCustomersCustomerSourcesResponseBody200Data'Multibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
    -- | name: Cardholder name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Name :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | object: String representing the object\'s type. Objects of the same type share the same value.
    getCustomersCustomerSourcesResponseBody200Data'Object :: (GHC.Maybe.Maybe GetCustomersCustomerSourcesResponseBody200Data'Object'),
    -- | owner: Information about the owner of the payment instrument that may be used or required by particular source types.
    getCustomersCustomerSourcesResponseBody200Data'Owner :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable)),
    -- | p24
    getCustomersCustomerSourcesResponseBody200Data'P24 :: (GHC.Maybe.Maybe SourceTypeP24),
    -- | receiver:
    getCustomersCustomerSourcesResponseBody200Data'Receiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
    -- | redirect:
    getCustomersCustomerSourcesResponseBody200Data'Redirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
    -- | requirements: Information about the requirements for the bank account, including what information needs to be collected.
    getCustomersCustomerSourcesResponseBody200Data'Requirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable)),
    -- | routing_number: The routing transit number for the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'RoutingNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | sepa_debit
    getCustomersCustomerSourcesResponseBody200Data'SepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
    -- | sofort
    getCustomersCustomerSourcesResponseBody200Data'Sofort :: (GHC.Maybe.Maybe SourceTypeSofort),
    -- | source_order:
    getCustomersCustomerSourcesResponseBody200Data'SourceOrder :: (GHC.Maybe.Maybe SourceOrder),
    -- | statement_descriptor: Extra information about a source. This will appear on your customer\'s statement every time you charge the source.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'StatementDescriptor :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a payout sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send [scheduled payouts](https:\/\/stripe.com\/docs\/payouts\#payout-schedule) until the bank details are updated.
    --
    -- For external accounts, possible values are \`new\`, \`errored\` and \`verification_failed\`. If a payouts fails, the status is set to \`errored\` and scheduled payouts are stopped until account details are updated. In India, if we can\'t [verify the owner of the bank account](https:\/\/support.stripe.com\/questions\/bank-account-ownership-verification), we\'ll set the status to \`verification_failed\`. Other validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | three_d_secure
    getCustomersCustomerSourcesResponseBody200Data'ThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
    -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'TokenizationMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | type: The \`type\` of the source. The \`type\` is a payment method, one of \`ach_credit_transfer\`, \`ach_debit\`, \`alipay\`, \`bancontact\`, \`card\`, \`card_present\`, \`eps\`, \`giropay\`, \`ideal\`, \`multibanco\`, \`klarna\`, \`p24\`, \`sepa_debit\`, \`sofort\`, \`three_d_secure\`, or \`wechat\`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https:\/\/stripe.com\/docs\/sources) used.
    getCustomersCustomerSourcesResponseBody200Data'Type :: (GHC.Maybe.Maybe GetCustomersCustomerSourcesResponseBody200Data'Type'),
    -- | usage: Either \`reusable\` or \`single_use\`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Usage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | wechat
    getCustomersCustomerSourcesResponseBody200Data'Wechat :: (GHC.Maybe.Maybe SourceTypeWechat)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_credit_transfer" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AchCreditTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_debit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AchDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Alipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Bancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Card obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'CardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'ClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code_verification" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'CodeVerification obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Created obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Eps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Flow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Giropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Ideal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Klarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Livemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Multibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'P24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receiver" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Receiver obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Redirect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'SepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Sofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_order" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'SourceOrder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'StatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("three_d_secure" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'ThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'TokenizationMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Usage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Wechat obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_credit_transfer" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AchCreditTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_debit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AchDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Alipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Bancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Card obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'CardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'ClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code_verification" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'CodeVerification obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Created obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Eps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Flow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Giropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Ideal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Klarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Livemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Multibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'P24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receiver" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Receiver obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Redirect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'SepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Sofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_order" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'SourceOrder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'StatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("three_d_secure" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'ThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'TokenizationMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Usage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Wechat obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCustomersCustomerSourcesResponseBody200Data'" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure GetCustomersCustomerSourcesResponseBody200Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "au_becs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "future_requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat"))

-- | Create a new 'GetCustomersCustomerSourcesResponseBody200Data'' with all required fields.
mkGetCustomersCustomerSourcesResponseBody200Data' :: GetCustomersCustomerSourcesResponseBody200Data'
mkGetCustomersCustomerSourcesResponseBody200Data' =
  GetCustomersCustomerSourcesResponseBody200Data'
    { getCustomersCustomerSourcesResponseBody200Data'Account = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AccountHolderName = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AccountHolderType = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AccountType = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AchCreditTransfer = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AchDebit = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AcssDebit = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AddressCity = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AddressCountry = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AddressLine1 = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AddressLine1Check = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AddressLine2 = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AddressState = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AddressZip = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AddressZipCheck = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Alipay = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Amount = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AuBecsDebit = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Bancontact = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'BankName = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Brand = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Card = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'CardPresent = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'ClientSecret = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'CodeVerification = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Country = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Created = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Currency = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Customer = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'CvcCheck = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'DefaultForCurrency = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'DynamicLast4 = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Eps = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'ExpMonth = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'ExpYear = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Fingerprint = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Flow = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Funding = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'FutureRequirements = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Giropay = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Id = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Ideal = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Klarna = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Last4 = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Livemode = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Metadata = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Multibanco = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Name = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Object = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'P24 = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Receiver = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Redirect = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Requirements = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'RoutingNumber = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'SepaDebit = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Sofort = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'SourceOrder = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'StatementDescriptor = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Status = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'ThreeDSecure = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'TokenizationMethod = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Type = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Usage = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Wechat = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableVariants
  = GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableText Data.Text.Internal.Text
  | GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableAccount Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableVariants where
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableAccount a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableVariants where
  parseJSON val = case (GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetCustomersCustomerSourcesResponseBody200Data'Account'NonNullableAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.available_payout_methods.items@ in the specification.
data GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableEnumInstant
  | -- | Represents the JSON value @"standard"@
    GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableEnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullable where
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableOther val) = val
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableEnumInstant) = "instant"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableEnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "instant" -> GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableEnumInstant
            | val GHC.Classes.== "standard" -> GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableEnumStandard
            | GHC.Base.otherwise -> GetCustomersCustomerSourcesResponseBody200Data'AvailablePayoutMethods'NonNullableOther val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer that the bank account is associated with.
data GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableVariants
  = GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableText Data.Text.Internal.Text
  | GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableCustomer Customer
  | GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableDeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableVariants where
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableDeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableVariants where
  parseJSON val = case (GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetCustomersCustomerSourcesResponseBody200Data'Customer'NonNullableDeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.future_requirements.anyOf@ in the specification.
--
-- Information about the [upcoming new requirements for the bank account](https:\\\/\\\/stripe.com\\\/docs\\\/connect\\\/custom-accounts\\\/future-requirements), including what information needs to be collected, and by when.
data GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable = GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([AccountRequirementsError]))),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | pending_verification: Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`.
    getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text])))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable" (\obj -> (((GHC.Base.pure GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable' with all required fields.
mkGetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable :: GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable
mkGetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable =
  GetCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullable
    { getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullableErrors = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullablePastDue = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'FutureRequirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.object@ in the specification.
--
-- String representing the object\'s type. Objects of the same type share the same value.
data GetCustomersCustomerSourcesResponseBody200Data'Object'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetCustomersCustomerSourcesResponseBody200Data'Object'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetCustomersCustomerSourcesResponseBody200Data'Object'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_account"@
    GetCustomersCustomerSourcesResponseBody200Data'Object'EnumBankAccount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'Object' where
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Object'Other val) = val
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Object'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Object'EnumBankAccount) = "bank_account"

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "bank_account" -> GetCustomersCustomerSourcesResponseBody200Data'Object'EnumBankAccount
            | GHC.Base.otherwise -> GetCustomersCustomerSourcesResponseBody200Data'Object'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.owner.anyOf@ in the specification.
--
-- Information about the owner of the payment instrument that may be used or required by particular source types.
data GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable = GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable
  { -- | address: Owner\'s address.
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable)),
    -- | email: Owner\'s email address.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: Owner\'s full name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | phone: Owner\'s phone number (including extension).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullablePhone :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verified_address: Verified owner\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable)),
    -- | verified_email: Verified owner\'s email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verified_name: Verified owner\'s full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verified_phone: Verified owner\'s phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedPhone :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_address" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_email" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_phone" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedPhone obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_address" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_email" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_name" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_phone" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedPhone obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable" (\obj -> (((((((GHC.Base.pure GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_phone"))

-- | Create a new 'GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable' with all required fields.
mkGetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable :: GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable
mkGetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable =
  GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullable
    { getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableEmail = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableName = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullablePhone = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedEmail = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedName = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedPhone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.owner.anyOf.properties.address.anyOf@ in the specification.
--
-- Owner\\\'s address.
data GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable = GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable" (\obj -> (((((GHC.Base.pure GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable' with all required fields.
mkGetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable :: GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable
mkGetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable =
  GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullable
    { getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableCity = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableCountry = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableAddress'NonNullableState = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.owner.anyOf.properties.verified_address.anyOf@ in the specification.
--
-- Verified owner\\\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
data GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable = GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable" (\obj -> (((((GHC.Base.pure GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable' with all required fields.
mkGetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable :: GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable
mkGetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable =
  GetCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullable
    { getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableCity = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableCountry = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Owner'NonNullableVerifiedAddress'NonNullableState = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.requirements.anyOf@ in the specification.
--
-- Information about the requirements for the bank account, including what information needs to be collected.
data GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable = GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([AccountRequirementsError]))),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | pending_verification: Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`.
    getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text])))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable" (\obj -> (((GHC.Base.pure GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable' with all required fields.
mkGetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable :: GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable
mkGetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable =
  GetCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullable
    { getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullableErrors = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullablePastDue = GHC.Maybe.Nothing,
      getCustomersCustomerSourcesResponseBody200Data'Requirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/sources.GET.responses.200.content.application\/json.schema.properties.data.items.anyOf.properties.type@ in the specification.
--
-- The \`type\` of the source. The \`type\` is a payment method, one of \`ach_credit_transfer\`, \`ach_debit\`, \`alipay\`, \`bancontact\`, \`card\`, \`card_present\`, \`eps\`, \`giropay\`, \`ideal\`, \`multibanco\`, \`klarna\`, \`p24\`, \`sepa_debit\`, \`sofort\`, \`three_d_secure\`, or \`wechat\`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https:\/\/stripe.com\/docs\/sources) used.
data GetCustomersCustomerSourcesResponseBody200Data'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetCustomersCustomerSourcesResponseBody200Data'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetCustomersCustomerSourcesResponseBody200Data'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"ach_credit_transfer"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAchCreditTransfer
  | -- | Represents the JSON value @"ach_debit"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAchDebit
  | -- | Represents the JSON value @"acss_debit"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAcssDebit
  | -- | Represents the JSON value @"alipay"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAlipay
  | -- | Represents the JSON value @"au_becs_debit"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAuBecsDebit
  | -- | Represents the JSON value @"bancontact"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumBancontact
  | -- | Represents the JSON value @"card"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumCard
  | -- | Represents the JSON value @"card_present"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumCardPresent
  | -- | Represents the JSON value @"eps"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumEps
  | -- | Represents the JSON value @"giropay"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumGiropay
  | -- | Represents the JSON value @"ideal"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumIdeal
  | -- | Represents the JSON value @"klarna"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumKlarna
  | -- | Represents the JSON value @"multibanco"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumMultibanco
  | -- | Represents the JSON value @"p24"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumP24
  | -- | Represents the JSON value @"sepa_debit"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumSepaDebit
  | -- | Represents the JSON value @"sofort"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumSofort
  | -- | Represents the JSON value @"three_d_secure"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumThreeDSecure
  | -- | Represents the JSON value @"wechat"@
    GetCustomersCustomerSourcesResponseBody200Data'Type'EnumWechat
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetCustomersCustomerSourcesResponseBody200Data'Type' where
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'Other val) = val
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAchCreditTransfer) = "ach_credit_transfer"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAchDebit) = "ach_debit"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAcssDebit) = "acss_debit"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAlipay) = "alipay"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAuBecsDebit) = "au_becs_debit"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumBancontact) = "bancontact"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumCard) = "card"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumCardPresent) = "card_present"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumEps) = "eps"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumGiropay) = "giropay"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumIdeal) = "ideal"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumKlarna) = "klarna"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumMultibanco) = "multibanco"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumP24) = "p24"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumSepaDebit) = "sepa_debit"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumSofort) = "sofort"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumThreeDSecure) = "three_d_secure"
  toJSON (GetCustomersCustomerSourcesResponseBody200Data'Type'EnumWechat) = "wechat"

instance Data.Aeson.Types.FromJSON.FromJSON GetCustomersCustomerSourcesResponseBody200Data'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ach_credit_transfer" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAchCreditTransfer
            | val GHC.Classes.== "ach_debit" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAchDebit
            | val GHC.Classes.== "acss_debit" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAcssDebit
            | val GHC.Classes.== "alipay" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAlipay
            | val GHC.Classes.== "au_becs_debit" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumAuBecsDebit
            | val GHC.Classes.== "bancontact" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumBancontact
            | val GHC.Classes.== "card" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumCard
            | val GHC.Classes.== "card_present" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumCardPresent
            | val GHC.Classes.== "eps" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumEps
            | val GHC.Classes.== "giropay" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumGiropay
            | val GHC.Classes.== "ideal" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumIdeal
            | val GHC.Classes.== "klarna" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumKlarna
            | val GHC.Classes.== "multibanco" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumMultibanco
            | val GHC.Classes.== "p24" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumP24
            | val GHC.Classes.== "sepa_debit" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumSepaDebit
            | val GHC.Classes.== "sofort" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumSofort
            | val GHC.Classes.== "three_d_secure" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumThreeDSecure
            | val GHC.Classes.== "wechat" -> GetCustomersCustomerSourcesResponseBody200Data'Type'EnumWechat
            | GHC.Base.otherwise -> GetCustomersCustomerSourcesResponseBody200Data'Type'Other val
      )
