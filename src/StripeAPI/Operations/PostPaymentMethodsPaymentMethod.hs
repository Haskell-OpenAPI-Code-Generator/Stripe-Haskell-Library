{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postPaymentMethodsPaymentMethod
module StripeAPI.Operations.PostPaymentMethodsPaymentMethod where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/payment_methods/{payment_method}
--
-- \<p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.\<\/p>
postPaymentMethodsPaymentMethod ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | payment_method | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostPaymentMethodsPaymentMethodRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostPaymentMethodsPaymentMethodResponse)
postPaymentMethodsPaymentMethod
  paymentMethod
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostPaymentMethodsPaymentMethodResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostPaymentMethodsPaymentMethodResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              PaymentMethod
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostPaymentMethodsPaymentMethodResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/payment_methods/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel paymentMethod)) GHC.Base.++ ""))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/payment_methods\/{payment_method}.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostPaymentMethodsPaymentMethodRequestBody = PostPaymentMethodsPaymentMethodRequestBody
  { -- | billing_details: Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails :: (GHC.Maybe.Maybe PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'),
    -- | card: If this is a \`card\` PaymentMethod, this hash contains the user\'s card details.
    postPaymentMethodsPaymentMethodRequestBodyCard :: (GHC.Maybe.Maybe PostPaymentMethodsPaymentMethodRequestBodyCard'),
    -- | expand: Specifies which fields in the response should be expanded.
    postPaymentMethodsPaymentMethodRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
    postPaymentMethodsPaymentMethodRequestBodyMetadata :: (GHC.Maybe.Maybe PostPaymentMethodsPaymentMethodRequestBodyMetadata'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostPaymentMethodsPaymentMethodRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("billing_details" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails obj : "card" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyCard obj : "expand" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyExpand obj : "metadata" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyMetadata obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("billing_details" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails obj) GHC.Base.<> (("card" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyCard obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyExpand obj) GHC.Base.<> ("metadata" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyMetadata obj))))

instance Data.Aeson.Types.FromJSON.FromJSON PostPaymentMethodsPaymentMethodRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPaymentMethodsPaymentMethodRequestBody" (\obj -> (((GHC.Base.pure PostPaymentMethodsPaymentMethodRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata"))

-- | Create a new 'PostPaymentMethodsPaymentMethodRequestBody' with all required fields.
mkPostPaymentMethodsPaymentMethodRequestBody :: PostPaymentMethodsPaymentMethodRequestBody
mkPostPaymentMethodsPaymentMethodRequestBody =
  PostPaymentMethodsPaymentMethodRequestBody
    { postPaymentMethodsPaymentMethodRequestBodyBillingDetails = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyCard = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyExpand = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyMetadata = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/payment_methods\/{payment_method}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.billing_details@ in the specification.
--
-- Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
data PostPaymentMethodsPaymentMethodRequestBodyBillingDetails' = PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'
  { -- | address
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address :: (GHC.Maybe.Maybe PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'Variants),
    -- | email
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostPaymentMethodsPaymentMethodRequestBodyBillingDetails' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address obj : "email" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Email obj : "name" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Name obj : "phone" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Phone obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Email obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Name obj) GHC.Base.<> ("phone" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Phone obj))))

instance Data.Aeson.Types.FromJSON.FromJSON PostPaymentMethodsPaymentMethodRequestBodyBillingDetails' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'" (\obj -> (((GHC.Base.pure PostPaymentMethodsPaymentMethodRequestBodyBillingDetails' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone"))

-- | Create a new 'PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'' with all required fields.
mkPostPaymentMethodsPaymentMethodRequestBodyBillingDetails' :: PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'
mkPostPaymentMethodsPaymentMethodRequestBodyBillingDetails' =
  PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'
    { postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Email = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Name = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Phone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/payment_methods\/{payment_method}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.billing_details.properties.address.anyOf@ in the specification.
data PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1 = PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1City obj : "country" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Country obj : "line1" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Line1 obj : "line2" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1PostalCode obj : "state" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1" (\obj -> (((((GHC.Base.pure PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1' with all required fields.
mkPostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1 :: PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1
mkPostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1 =
  PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1
    { postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1City = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Country = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Line1 = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1Line2 = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1PostalCode = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1State = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/payment_methods\/{payment_method}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.billing_details.properties.address.anyOf@ in the specification.
data PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'Variants
  = -- | Represents the JSON value @""@
    PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'EmptyString
  | PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1 PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'Variants where
  toJSON (PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'EmptyString
        | GHC.Base.otherwise -> case (PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'PostPaymentMethodsPaymentMethodRequestBodyBillingDetails'Address'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/payment_methods\/{payment_method}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.card@ in the specification.
--
-- If this is a \`card\` PaymentMethod, this hash contains the user\'s card details.
data PostPaymentMethodsPaymentMethodRequestBodyCard' = PostPaymentMethodsPaymentMethodRequestBodyCard'
  { -- | exp_month
    postPaymentMethodsPaymentMethodRequestBodyCard'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year
    postPaymentMethodsPaymentMethodRequestBodyCard'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostPaymentMethodsPaymentMethodRequestBodyCard' where
  toJSON obj = Data.Aeson.Types.Internal.object ("exp_month" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyCard'ExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyCard'ExpYear obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("exp_month" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyCard'ExpMonth obj) GHC.Base.<> ("exp_year" Data.Aeson.Types.ToJSON..= postPaymentMethodsPaymentMethodRequestBodyCard'ExpYear obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostPaymentMethodsPaymentMethodRequestBodyCard' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostPaymentMethodsPaymentMethodRequestBodyCard'" (\obj -> (GHC.Base.pure PostPaymentMethodsPaymentMethodRequestBodyCard' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year"))

-- | Create a new 'PostPaymentMethodsPaymentMethodRequestBodyCard'' with all required fields.
mkPostPaymentMethodsPaymentMethodRequestBodyCard' :: PostPaymentMethodsPaymentMethodRequestBodyCard'
mkPostPaymentMethodsPaymentMethodRequestBodyCard' =
  PostPaymentMethodsPaymentMethodRequestBodyCard'
    { postPaymentMethodsPaymentMethodRequestBodyCard'ExpMonth = GHC.Maybe.Nothing,
      postPaymentMethodsPaymentMethodRequestBodyCard'ExpYear = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/payment_methods\/{payment_method}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.metadata.anyOf@ in the specification.
--
-- Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
data PostPaymentMethodsPaymentMethodRequestBodyMetadata'Variants
  = -- | Represents the JSON value @""@
    PostPaymentMethodsPaymentMethodRequestBodyMetadata'EmptyString
  | PostPaymentMethodsPaymentMethodRequestBodyMetadata'Object Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostPaymentMethodsPaymentMethodRequestBodyMetadata'Variants where
  toJSON (PostPaymentMethodsPaymentMethodRequestBodyMetadata'Object a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostPaymentMethodsPaymentMethodRequestBodyMetadata'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostPaymentMethodsPaymentMethodRequestBodyMetadata'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostPaymentMethodsPaymentMethodRequestBodyMetadata'EmptyString
        | GHC.Base.otherwise -> case (PostPaymentMethodsPaymentMethodRequestBodyMetadata'Object Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'postPaymentMethodsPaymentMethod'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostPaymentMethodsPaymentMethodResponseError' is used.
data PostPaymentMethodsPaymentMethodResponse
  = -- | Means either no matching case available or a parse error
    PostPaymentMethodsPaymentMethodResponseError GHC.Base.String
  | -- | Successful response.
    PostPaymentMethodsPaymentMethodResponse200 PaymentMethod
  | -- | Error response.
    PostPaymentMethodsPaymentMethodResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
