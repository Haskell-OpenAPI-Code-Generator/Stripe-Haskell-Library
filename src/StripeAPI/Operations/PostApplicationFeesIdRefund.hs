{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postApplicationFeesIdRefund
module StripeAPI.Operations.PostApplicationFeesIdRefund where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/application_fees/{id}/refund
postApplicationFeesIdRefund ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | id | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostApplicationFeesIdRefundRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostApplicationFeesIdRefundResponse)
postApplicationFeesIdRefund
  id
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostApplicationFeesIdRefundResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApplicationFeesIdRefundResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              ApplicationFee
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostApplicationFeesIdRefundResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/application_fees/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel id)) GHC.Base.++ "/refund"))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/application_fees\/{id}\/refund.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostApplicationFeesIdRefundRequestBody
  = PostApplicationFeesIdRefundRequestBody
      { -- | amount
        postApplicationFeesIdRefundRequestBodyAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | directive
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        postApplicationFeesIdRefundRequestBodyDirective :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | expand: Specifies which fields in the response should be expanded.
        postApplicationFeesIdRefundRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostApplicationFeesIdRefundRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= postApplicationFeesIdRefundRequestBodyAmount obj : "directive" Data.Aeson.Types.ToJSON..= postApplicationFeesIdRefundRequestBodyDirective obj : "expand" Data.Aeson.Types.ToJSON..= postApplicationFeesIdRefundRequestBodyExpand obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= postApplicationFeesIdRefundRequestBodyAmount obj) GHC.Base.<> (("directive" Data.Aeson.Types.ToJSON..= postApplicationFeesIdRefundRequestBodyDirective obj) GHC.Base.<> ("expand" Data.Aeson.Types.ToJSON..= postApplicationFeesIdRefundRequestBodyExpand obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PostApplicationFeesIdRefundRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostApplicationFeesIdRefundRequestBody" (\obj -> ((GHC.Base.pure PostApplicationFeesIdRefundRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "directive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand"))

-- | Create a new 'PostApplicationFeesIdRefundRequestBody' with all required fields.
mkPostApplicationFeesIdRefundRequestBody :: PostApplicationFeesIdRefundRequestBody
mkPostApplicationFeesIdRefundRequestBody =
  PostApplicationFeesIdRefundRequestBody
    { postApplicationFeesIdRefundRequestBodyAmount = GHC.Maybe.Nothing,
      postApplicationFeesIdRefundRequestBodyDirective = GHC.Maybe.Nothing,
      postApplicationFeesIdRefundRequestBodyExpand = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postApplicationFeesIdRefund'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostApplicationFeesIdRefundResponseError' is used.
data PostApplicationFeesIdRefundResponse
  = -- | Means either no matching case available or a parse error
    PostApplicationFeesIdRefundResponseError GHC.Base.String
  | -- | Successful response.
    PostApplicationFeesIdRefundResponse200 ApplicationFee
  | -- | Error response.
    PostApplicationFeesIdRefundResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
