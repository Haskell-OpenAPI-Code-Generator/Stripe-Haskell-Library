{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getEvents
module StripeAPI.Operations.GetEvents where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/events
--
-- \<p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in \<a href=\"\/docs\/api\/events\/object\">event object\<\/a> \<code>api_version\<\/code> attribute (not according to your current Stripe API version or \<code>Stripe-Version\<\/code> header).\<\/p>
getEvents ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetEventsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetEventsResponse)
getEvents parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetEventsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetEventsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetEventsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetEventsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/events")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEventsParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "delivery_success") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEventsParametersQueryDeliverySuccess parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEventsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEventsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEventsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEventsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEventsParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "types") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getEventsParametersQueryTypes parameters) (Data.Text.pack "deepObject") GHC.Types.True
        ]
    )

-- | Defines the data type for the schema getEventsParameters
data GetEventsParameters
  = GetEventsParameters
      { -- | queryCreated: Represents the parameter named \'created\'
        getEventsParametersQueryCreated :: (GHC.Maybe.Maybe GetEventsParametersQueryCreated'Variants),
        -- | queryDelivery_success: Represents the parameter named \'delivery_success\'
        --
        -- Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned.
        getEventsParametersQueryDeliverySuccess :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getEventsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getEventsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getEventsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getEventsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryType: Represents the parameter named \'type\'
        --
        -- A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getEventsParametersQueryType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryTypes: Represents the parameter named \'types\'
        --
        -- An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either \`type\` or \`types\`, but not both.
        getEventsParametersQueryTypes :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetEventsParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "queryCreated" (getEventsParametersQueryCreated obj) : (Data.Aeson..=) "queryDelivery_success" (getEventsParametersQueryDeliverySuccess obj) : (Data.Aeson..=) "queryEnding_before" (getEventsParametersQueryEndingBefore obj) : (Data.Aeson..=) "queryExpand" (getEventsParametersQueryExpand obj) : (Data.Aeson..=) "queryLimit" (getEventsParametersQueryLimit obj) : (Data.Aeson..=) "queryStarting_after" (getEventsParametersQueryStartingAfter obj) : (Data.Aeson..=) "queryType" (getEventsParametersQueryType obj) : (Data.Aeson..=) "queryTypes" (getEventsParametersQueryTypes obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "queryCreated" (getEventsParametersQueryCreated obj) GHC.Base.<> ((Data.Aeson..=) "queryDelivery_success" (getEventsParametersQueryDeliverySuccess obj) GHC.Base.<> ((Data.Aeson..=) "queryEnding_before" (getEventsParametersQueryEndingBefore obj) GHC.Base.<> ((Data.Aeson..=) "queryExpand" (getEventsParametersQueryExpand obj) GHC.Base.<> ((Data.Aeson..=) "queryLimit" (getEventsParametersQueryLimit obj) GHC.Base.<> ((Data.Aeson..=) "queryStarting_after" (getEventsParametersQueryStartingAfter obj) GHC.Base.<> ((Data.Aeson..=) "queryType" (getEventsParametersQueryType obj) GHC.Base.<> (Data.Aeson..=) "queryTypes" (getEventsParametersQueryTypes obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetEventsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEventsParameters" (\obj -> (((((((GHC.Base.pure GetEventsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryDelivery_success")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryType")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryTypes"))

-- | Defines the data type for the schema getEventsParametersQueryCreated\'OneOf2
data GetEventsParametersQueryCreated'OneOf2
  = GetEventsParametersQueryCreated'OneOf2
      { -- | gt
        getEventsParametersQueryCreated'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getEventsParametersQueryCreated'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getEventsParametersQueryCreated'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getEventsParametersQueryCreated'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetEventsParametersQueryCreated'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getEventsParametersQueryCreated'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getEventsParametersQueryCreated'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getEventsParametersQueryCreated'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getEventsParametersQueryCreated'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getEventsParametersQueryCreated'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getEventsParametersQueryCreated'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getEventsParametersQueryCreated'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getEventsParametersQueryCreated'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetEventsParametersQueryCreated'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEventsParametersQueryCreated'OneOf2" (\obj -> (((GHC.Base.pure GetEventsParametersQueryCreated'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getEventsParametersQueryCreated\'
--
-- Represents the parameter named \'created\'
data GetEventsParametersQueryCreated'Variants
  = GetEventsParametersQueryCreated'Int GHC.Types.Int
  | GetEventsParametersQueryCreated'GetEventsParametersQueryCreated'OneOf2 GetEventsParametersQueryCreated'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetEventsParametersQueryCreated'Variants where
  toJSON (GetEventsParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetEventsParametersQueryCreated'GetEventsParametersQueryCreated'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetEventsParametersQueryCreated'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetEventsParametersQueryCreated'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetEventsParametersQueryCreated'GetEventsParametersQueryCreated'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'getEvents'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetEventsResponseError' is used.
data GetEventsResponse
  = -- | Means either no matching case available or a parse error
    GetEventsResponseError GHC.Base.String
  | -- | Successful response.
    GetEventsResponse200 GetEventsResponseBody200
  | -- | Error response.
    GetEventsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the data type for the schema GetEventsResponseBody200
data GetEventsResponseBody200
  = GetEventsResponseBody200
      { -- | data
        getEventsResponseBody200Data :: ([Event]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getEventsResponseBody200HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        getEventsResponseBody200Object :: GetEventsResponseBody200Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        -- * Must match pattern \'^\/v1\/events\'
        getEventsResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetEventsResponseBody200 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getEventsResponseBody200Data obj) : (Data.Aeson..=) "has_more" (getEventsResponseBody200HasMore obj) : (Data.Aeson..=) "object" (getEventsResponseBody200Object obj) : (Data.Aeson..=) "url" (getEventsResponseBody200Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getEventsResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (getEventsResponseBody200HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (getEventsResponseBody200Object obj) GHC.Base.<> (Data.Aeson..=) "url" (getEventsResponseBody200Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetEventsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetEventsResponseBody200" (\obj -> (((GHC.Base.pure GetEventsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema GetEventsResponseBody200Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data GetEventsResponseBody200Object'
  = GetEventsResponseBody200Object'EnumOther Data.Aeson.Types.Internal.Value
  | GetEventsResponseBody200Object'EnumTyped Data.Text.Internal.Text
  | GetEventsResponseBody200Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetEventsResponseBody200Object' where
  toJSON (GetEventsResponseBody200Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetEventsResponseBody200Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetEventsResponseBody200Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON GetEventsResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> GetEventsResponseBody200Object'EnumStringList
            | GHC.Base.otherwise -> GetEventsResponseBody200Object'EnumOther val
      )
