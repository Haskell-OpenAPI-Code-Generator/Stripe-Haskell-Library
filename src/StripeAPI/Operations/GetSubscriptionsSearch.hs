{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getSubscriptionsSearch
module StripeAPI.Operations.GetSubscriptionsSearch where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/subscriptions/search
--
-- \<p>Search for subscriptions you’ve previously created using Stripe’s \<a href=\"\/docs\/search\#search-query-language\">Search Query Language\<\/a>.
-- Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
-- conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
-- to an hour behind during outages. Search functionality is not available to merchants in India.\<\/p>
getSubscriptionsSearch ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetSubscriptionsSearchParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetSubscriptionsSearchResponse)
getSubscriptionsSearch parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetSubscriptionsSearchResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSubscriptionsSearchResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetSubscriptionsSearchResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetSubscriptionsSearchResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/subscriptions/search")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsSearchParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsSearchParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getSubscriptionsSearchParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "query") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getSubscriptionsSearchParametersQueryQuery parameters)) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/subscriptions\/search.GET.parameters@ in the specification.
data GetSubscriptionsSearchParameters = GetSubscriptionsSearchParameters
  { -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getSubscriptionsSearchParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getSubscriptionsSearchParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- A cursor for pagination across multiple pages of results. Don\'t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSubscriptionsSearchParametersQueryPage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryQuery: Represents the parameter named \'query\'
    --
    -- The search query string. See [search query language](https:\/\/stripe.com\/docs\/search\#search-query-language) and the list of supported [query fields for subscriptions](https:\/\/stripe.com\/docs\/search\#query-fields-for-subscriptions).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSubscriptionsSearchParametersQueryQuery :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsSearchParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchParametersQueryPage obj) : ["queryQuery" Data.Aeson.Types.ToJSON..= getSubscriptionsSearchParametersQueryQuery obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchParametersQueryPage obj) : ["queryQuery" Data.Aeson.Types.ToJSON..= getSubscriptionsSearchParametersQueryQuery obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsSearchParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSubscriptionsSearchParameters" (\obj -> (((GHC.Base.pure GetSubscriptionsSearchParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuery"))

-- | Create a new 'GetSubscriptionsSearchParameters' with all required fields.
mkGetSubscriptionsSearchParameters ::
  -- | 'getSubscriptionsSearchParametersQueryQuery'
  Data.Text.Internal.Text ->
  GetSubscriptionsSearchParameters
mkGetSubscriptionsSearchParameters getSubscriptionsSearchParametersQueryQuery =
  GetSubscriptionsSearchParameters
    { getSubscriptionsSearchParametersQueryExpand = GHC.Maybe.Nothing,
      getSubscriptionsSearchParametersQueryLimit = GHC.Maybe.Nothing,
      getSubscriptionsSearchParametersQueryPage = GHC.Maybe.Nothing,
      getSubscriptionsSearchParametersQueryQuery = getSubscriptionsSearchParametersQueryQuery
    }

-- | Represents a response of the operation 'getSubscriptionsSearch'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetSubscriptionsSearchResponseError' is used.
data GetSubscriptionsSearchResponse
  = -- | Means either no matching case available or a parse error
    GetSubscriptionsSearchResponseError GHC.Base.String
  | -- | Successful response.
    GetSubscriptionsSearchResponse200 GetSubscriptionsSearchResponseBody200
  | -- | Error response.
    GetSubscriptionsSearchResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/subscriptions\/search.GET.responses.200.content.application\/json.schema@ in the specification.
data GetSubscriptionsSearchResponseBody200 = GetSubscriptionsSearchResponseBody200
  { -- | data
    getSubscriptionsSearchResponseBody200Data :: ([Subscription]),
    -- | has_more
    getSubscriptionsSearchResponseBody200HasMore :: GHC.Types.Bool,
    -- | next_page
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSubscriptionsSearchResponseBody200NextPage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | total_count: The total number of objects that match the query, only accurate up to 10,000.
    getSubscriptionsSearchResponseBody200TotalCount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | url
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getSubscriptionsSearchResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetSubscriptionsSearchResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getSubscriptionsSearchResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getSubscriptionsSearchResponseBody200HasMore obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_page" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchResponseBody200NextPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_count" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchResponseBody200TotalCount obj) : ["url" Data.Aeson.Types.ToJSON..= getSubscriptionsSearchResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "search_result"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getSubscriptionsSearchResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getSubscriptionsSearchResponseBody200HasMore obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_page" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchResponseBody200NextPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_count" Data.Aeson.Types.ToJSON..=)) (getSubscriptionsSearchResponseBody200TotalCount obj) : ["url" Data.Aeson.Types.ToJSON..= getSubscriptionsSearchResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "search_result"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetSubscriptionsSearchResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetSubscriptionsSearchResponseBody200" (\obj -> ((((GHC.Base.pure GetSubscriptionsSearchResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "total_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetSubscriptionsSearchResponseBody200' with all required fields.
mkGetSubscriptionsSearchResponseBody200 ::
  -- | 'getSubscriptionsSearchResponseBody200Data'
  [Subscription] ->
  -- | 'getSubscriptionsSearchResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getSubscriptionsSearchResponseBody200Url'
  Data.Text.Internal.Text ->
  GetSubscriptionsSearchResponseBody200
mkGetSubscriptionsSearchResponseBody200 getSubscriptionsSearchResponseBody200Data getSubscriptionsSearchResponseBody200HasMore getSubscriptionsSearchResponseBody200Url =
  GetSubscriptionsSearchResponseBody200
    { getSubscriptionsSearchResponseBody200Data = getSubscriptionsSearchResponseBody200Data,
      getSubscriptionsSearchResponseBody200HasMore = getSubscriptionsSearchResponseBody200HasMore,
      getSubscriptionsSearchResponseBody200NextPage = GHC.Maybe.Nothing,
      getSubscriptionsSearchResponseBody200TotalCount = GHC.Maybe.Nothing,
      getSubscriptionsSearchResponseBody200Url = getSubscriptionsSearchResponseBody200Url
    }
