{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postSourcesSource
module StripeAPI.Operations.PostSourcesSource where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/sources/{source}
--
-- \<p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\<\/p>
--
-- \<p>This request accepts the \<code>metadata\<\/code> and \<code>owner\<\/code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our \<a href=\"\/docs\/sources\">payment method guides\<\/a> for more detail.\<\/p>
postSourcesSource ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | source | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostSourcesSourceRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostSourcesSourceResponse)
postSourcesSource
  source
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostSourcesSourceResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSourcesSourceResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Source
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostSourcesSourceResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/sources/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel source)) GHC.Base.++ ""))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostSourcesSourceRequestBody = PostSourcesSourceRequestBody
  { -- | amount: Amount associated with the source.
    postSourcesSourceRequestBodyAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | expand: Specifies which fields in the response should be expanded.
    postSourcesSourceRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | mandate: Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
    postSourcesSourceRequestBodyMandate :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyMandate'),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
    postSourcesSourceRequestBodyMetadata :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyMetadata'Variants),
    -- | owner: Information about the owner of the payment instrument that may be used or required by particular source types.
    postSourcesSourceRequestBodyOwner :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyOwner'),
    -- | source_order: Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
    postSourcesSourceRequestBodySourceOrder :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodySourceOrder')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyAmount obj : "expand" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyExpand obj : "mandate" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate obj : "metadata" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMetadata obj : "owner" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner obj : "source_order" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyAmount obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyExpand obj) GHC.Base.<> (("mandate" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMetadata obj) GHC.Base.<> (("owner" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner obj) GHC.Base.<> ("source_order" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBody" (\obj -> (((((GHC.Base.pure PostSourcesSourceRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mandate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order"))

-- | Create a new 'PostSourcesSourceRequestBody' with all required fields.
mkPostSourcesSourceRequestBody :: PostSourcesSourceRequestBody
mkPostSourcesSourceRequestBody =
  PostSourcesSourceRequestBody
    { postSourcesSourceRequestBodyAmount = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyExpand = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMetadata = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyOwner = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate@ in the specification.
--
-- Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
data PostSourcesSourceRequestBodyMandate' = PostSourcesSourceRequestBodyMandate'
  { -- | acceptance
    postSourcesSourceRequestBodyMandate'Acceptance :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyMandate'Acceptance'),
    -- | amount
    postSourcesSourceRequestBodyMandate'Amount :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyMandate'Amount'Variants),
    -- | currency
    postSourcesSourceRequestBodyMandate'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | interval
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyMandate'Interval :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyMandate'Interval'),
    -- | notification_method
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyMandate'NotificationMethod :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyMandate'NotificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMandate' where
  toJSON obj = Data.Aeson.Types.Internal.object ("acceptance" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance obj : "amount" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Amount obj : "currency" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Currency obj : "interval" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Interval obj : "notification_method" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'NotificationMethod obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("acceptance" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance obj) GHC.Base.<> (("amount" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Amount obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Currency obj) GHC.Base.<> (("interval" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Interval obj) GHC.Base.<> ("notification_method" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'NotificationMethod obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMandate' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodyMandate'" (\obj -> ((((GHC.Base.pure PostSourcesSourceRequestBodyMandate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "notification_method"))

-- | Create a new 'PostSourcesSourceRequestBodyMandate'' with all required fields.
mkPostSourcesSourceRequestBodyMandate' :: PostSourcesSourceRequestBodyMandate'
mkPostSourcesSourceRequestBodyMandate' =
  PostSourcesSourceRequestBodyMandate'
    { postSourcesSourceRequestBodyMandate'Acceptance = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Amount = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Currency = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Interval = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'NotificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance@ in the specification.
data PostSourcesSourceRequestBodyMandate'Acceptance' = PostSourcesSourceRequestBodyMandate'Acceptance'
  { -- | date
    postSourcesSourceRequestBodyMandate'Acceptance'Date :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | ip
    postSourcesSourceRequestBodyMandate'Acceptance'Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | offline
    postSourcesSourceRequestBodyMandate'Acceptance'Offline :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyMandate'Acceptance'Offline'),
    -- | online
    postSourcesSourceRequestBodyMandate'Acceptance'Online :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyMandate'Acceptance'Online'),
    -- | status
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyMandate'Acceptance'Status :: PostSourcesSourceRequestBodyMandate'Acceptance'Status',
    -- | type
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyMandate'Acceptance'Type :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyMandate'Acceptance'Type'),
    -- | user_agent
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyMandate'Acceptance'UserAgent :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMandate'Acceptance' where
  toJSON obj = Data.Aeson.Types.Internal.object ("date" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Date obj : "ip" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Ip obj : "offline" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Offline obj : "online" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Online obj : "status" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Status obj : "type" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Type obj : "user_agent" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'UserAgent obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("date" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Date obj) GHC.Base.<> (("ip" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Ip obj) GHC.Base.<> (("offline" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Offline obj) GHC.Base.<> (("online" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Online obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Status obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Type obj) GHC.Base.<> ("user_agent" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'UserAgent obj)))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMandate'Acceptance' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodyMandate'Acceptance'" (\obj -> ((((((GHC.Base.pure PostSourcesSourceRequestBodyMandate'Acceptance' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "offline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "online")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "user_agent"))

-- | Create a new 'PostSourcesSourceRequestBodyMandate'Acceptance'' with all required fields.
mkPostSourcesSourceRequestBodyMandate'Acceptance' ::
  -- | 'postSourcesSourceRequestBodyMandate'Acceptance'Status'
  PostSourcesSourceRequestBodyMandate'Acceptance'Status' ->
  PostSourcesSourceRequestBodyMandate'Acceptance'
mkPostSourcesSourceRequestBodyMandate'Acceptance' postSourcesSourceRequestBodyMandate'Acceptance'Status =
  PostSourcesSourceRequestBodyMandate'Acceptance'
    { postSourcesSourceRequestBodyMandate'Acceptance'Date = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Acceptance'Ip = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Acceptance'Offline = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Acceptance'Online = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Acceptance'Status = postSourcesSourceRequestBodyMandate'Acceptance'Status,
      postSourcesSourceRequestBodyMandate'Acceptance'Type = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Acceptance'UserAgent = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance.properties.offline@ in the specification.
data PostSourcesSourceRequestBodyMandate'Acceptance'Offline' = PostSourcesSourceRequestBodyMandate'Acceptance'Offline'
  { -- | contact_email
    postSourcesSourceRequestBodyMandate'Acceptance'Offline'ContactEmail :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMandate'Acceptance'Offline' where
  toJSON obj = Data.Aeson.Types.Internal.object ("contact_email" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Offline'ContactEmail obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("contact_email" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Offline'ContactEmail obj)

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMandate'Acceptance'Offline' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodyMandate'Acceptance'Offline'" (\obj -> GHC.Base.pure PostSourcesSourceRequestBodyMandate'Acceptance'Offline' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "contact_email"))

-- | Create a new 'PostSourcesSourceRequestBodyMandate'Acceptance'Offline'' with all required fields.
mkPostSourcesSourceRequestBodyMandate'Acceptance'Offline' ::
  -- | 'postSourcesSourceRequestBodyMandate'Acceptance'Offline'ContactEmail'
  Data.Text.Internal.Text ->
  PostSourcesSourceRequestBodyMandate'Acceptance'Offline'
mkPostSourcesSourceRequestBodyMandate'Acceptance'Offline' postSourcesSourceRequestBodyMandate'Acceptance'Offline'ContactEmail = PostSourcesSourceRequestBodyMandate'Acceptance'Offline' {postSourcesSourceRequestBodyMandate'Acceptance'Offline'ContactEmail = postSourcesSourceRequestBodyMandate'Acceptance'Offline'ContactEmail}

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance.properties.online@ in the specification.
data PostSourcesSourceRequestBodyMandate'Acceptance'Online' = PostSourcesSourceRequestBodyMandate'Acceptance'Online'
  { -- | date
    postSourcesSourceRequestBodyMandate'Acceptance'Online'Date :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | ip
    postSourcesSourceRequestBodyMandate'Acceptance'Online'Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_agent
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyMandate'Acceptance'Online'UserAgent :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMandate'Acceptance'Online' where
  toJSON obj = Data.Aeson.Types.Internal.object ("date" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Online'Date obj : "ip" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Online'Ip obj : "user_agent" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Online'UserAgent obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("date" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Online'Date obj) GHC.Base.<> (("ip" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Online'Ip obj) GHC.Base.<> ("user_agent" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyMandate'Acceptance'Online'UserAgent obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMandate'Acceptance'Online' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodyMandate'Acceptance'Online'" (\obj -> ((GHC.Base.pure PostSourcesSourceRequestBodyMandate'Acceptance'Online' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "user_agent"))

-- | Create a new 'PostSourcesSourceRequestBodyMandate'Acceptance'Online'' with all required fields.
mkPostSourcesSourceRequestBodyMandate'Acceptance'Online' :: PostSourcesSourceRequestBodyMandate'Acceptance'Online'
mkPostSourcesSourceRequestBodyMandate'Acceptance'Online' =
  PostSourcesSourceRequestBodyMandate'Acceptance'Online'
    { postSourcesSourceRequestBodyMandate'Acceptance'Online'Date = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Acceptance'Online'Ip = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyMandate'Acceptance'Online'UserAgent = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance.properties.status@ in the specification.
data PostSourcesSourceRequestBodyMandate'Acceptance'Status'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesSourceRequestBodyMandate'Acceptance'Status'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesSourceRequestBodyMandate'Acceptance'Status'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"accepted"@
    PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumAccepted
  | -- | Represents the JSON value @"pending"@
    PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumPending
  | -- | Represents the JSON value @"refused"@
    PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumRefused
  | -- | Represents the JSON value @"revoked"@
    PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumRevoked
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMandate'Acceptance'Status' where
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Status'Other val) = val
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Status'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumAccepted) = "accepted"
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumPending) = "pending"
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumRefused) = "refused"
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumRevoked) = "revoked"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMandate'Acceptance'Status' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "accepted" -> PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumAccepted
            | val GHC.Classes.== "pending" -> PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumPending
            | val GHC.Classes.== "refused" -> PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumRefused
            | val GHC.Classes.== "revoked" -> PostSourcesSourceRequestBodyMandate'Acceptance'Status'EnumRevoked
            | GHC.Base.otherwise -> PostSourcesSourceRequestBodyMandate'Acceptance'Status'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.acceptance.properties.type@ in the specification.
data PostSourcesSourceRequestBodyMandate'Acceptance'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesSourceRequestBodyMandate'Acceptance'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesSourceRequestBodyMandate'Acceptance'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"offline"@
    PostSourcesSourceRequestBodyMandate'Acceptance'Type'EnumOffline
  | -- | Represents the JSON value @"online"@
    PostSourcesSourceRequestBodyMandate'Acceptance'Type'EnumOnline
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMandate'Acceptance'Type' where
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Type'Other val) = val
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Type'EnumOffline) = "offline"
  toJSON (PostSourcesSourceRequestBodyMandate'Acceptance'Type'EnumOnline) = "online"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMandate'Acceptance'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "offline" -> PostSourcesSourceRequestBodyMandate'Acceptance'Type'EnumOffline
            | val GHC.Classes.== "online" -> PostSourcesSourceRequestBodyMandate'Acceptance'Type'EnumOnline
            | GHC.Base.otherwise -> PostSourcesSourceRequestBodyMandate'Acceptance'Type'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.amount.anyOf@ in the specification.
data PostSourcesSourceRequestBodyMandate'Amount'Variants
  = -- | Represents the JSON value @""@
    PostSourcesSourceRequestBodyMandate'Amount'EmptyString
  | PostSourcesSourceRequestBodyMandate'Amount'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMandate'Amount'Variants where
  toJSON (PostSourcesSourceRequestBodyMandate'Amount'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostSourcesSourceRequestBodyMandate'Amount'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMandate'Amount'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostSourcesSourceRequestBodyMandate'Amount'EmptyString
        | GHC.Base.otherwise -> case (PostSourcesSourceRequestBodyMandate'Amount'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.interval@ in the specification.
data PostSourcesSourceRequestBodyMandate'Interval'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesSourceRequestBodyMandate'Interval'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesSourceRequestBodyMandate'Interval'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"one_time"@
    PostSourcesSourceRequestBodyMandate'Interval'EnumOneTime
  | -- | Represents the JSON value @"scheduled"@
    PostSourcesSourceRequestBodyMandate'Interval'EnumScheduled
  | -- | Represents the JSON value @"variable"@
    PostSourcesSourceRequestBodyMandate'Interval'EnumVariable
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMandate'Interval' where
  toJSON (PostSourcesSourceRequestBodyMandate'Interval'Other val) = val
  toJSON (PostSourcesSourceRequestBodyMandate'Interval'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesSourceRequestBodyMandate'Interval'EnumOneTime) = "one_time"
  toJSON (PostSourcesSourceRequestBodyMandate'Interval'EnumScheduled) = "scheduled"
  toJSON (PostSourcesSourceRequestBodyMandate'Interval'EnumVariable) = "variable"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMandate'Interval' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "one_time" -> PostSourcesSourceRequestBodyMandate'Interval'EnumOneTime
            | val GHC.Classes.== "scheduled" -> PostSourcesSourceRequestBodyMandate'Interval'EnumScheduled
            | val GHC.Classes.== "variable" -> PostSourcesSourceRequestBodyMandate'Interval'EnumVariable
            | GHC.Base.otherwise -> PostSourcesSourceRequestBodyMandate'Interval'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.mandate.properties.notification_method@ in the specification.
data PostSourcesSourceRequestBodyMandate'NotificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesSourceRequestBodyMandate'NotificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesSourceRequestBodyMandate'NotificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"deprecated_none"@
    PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumDeprecatedNone
  | -- | Represents the JSON value @"email"@
    PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumEmail
  | -- | Represents the JSON value @"manual"@
    PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumManual
  | -- | Represents the JSON value @"none"@
    PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumNone
  | -- | Represents the JSON value @"stripe_email"@
    PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumStripeEmail
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMandate'NotificationMethod' where
  toJSON (PostSourcesSourceRequestBodyMandate'NotificationMethod'Other val) = val
  toJSON (PostSourcesSourceRequestBodyMandate'NotificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumDeprecatedNone) = "deprecated_none"
  toJSON (PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumEmail) = "email"
  toJSON (PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumManual) = "manual"
  toJSON (PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumNone) = "none"
  toJSON (PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumStripeEmail) = "stripe_email"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMandate'NotificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "deprecated_none" -> PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumDeprecatedNone
            | val GHC.Classes.== "email" -> PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumEmail
            | val GHC.Classes.== "manual" -> PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumManual
            | val GHC.Classes.== "none" -> PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumNone
            | val GHC.Classes.== "stripe_email" -> PostSourcesSourceRequestBodyMandate'NotificationMethod'EnumStripeEmail
            | GHC.Base.otherwise -> PostSourcesSourceRequestBodyMandate'NotificationMethod'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.metadata.anyOf@ in the specification.
--
-- Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
data PostSourcesSourceRequestBodyMetadata'Variants
  = -- | Represents the JSON value @""@
    PostSourcesSourceRequestBodyMetadata'EmptyString
  | PostSourcesSourceRequestBodyMetadata'Object Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyMetadata'Variants where
  toJSON (PostSourcesSourceRequestBodyMetadata'Object a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostSourcesSourceRequestBodyMetadata'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyMetadata'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostSourcesSourceRequestBodyMetadata'EmptyString
        | GHC.Base.otherwise -> case (PostSourcesSourceRequestBodyMetadata'Object Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.owner@ in the specification.
--
-- Information about the owner of the payment instrument that may be used or required by particular source types.
data PostSourcesSourceRequestBodyOwner' = PostSourcesSourceRequestBodyOwner'
  { -- | address
    postSourcesSourceRequestBodyOwner'Address :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodyOwner'Address'),
    -- | email
    postSourcesSourceRequestBodyOwner'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyOwner'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyOwner'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyOwner' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address obj : "email" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Email obj : "name" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Name obj : "phone" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Phone obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Email obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Name obj) GHC.Base.<> ("phone" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Phone obj))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyOwner' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodyOwner'" (\obj -> (((GHC.Base.pure PostSourcesSourceRequestBodyOwner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone"))

-- | Create a new 'PostSourcesSourceRequestBodyOwner'' with all required fields.
mkPostSourcesSourceRequestBodyOwner' :: PostSourcesSourceRequestBodyOwner'
mkPostSourcesSourceRequestBodyOwner' =
  PostSourcesSourceRequestBodyOwner'
    { postSourcesSourceRequestBodyOwner'Address = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyOwner'Email = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyOwner'Name = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyOwner'Phone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.owner.properties.address@ in the specification.
data PostSourcesSourceRequestBodyOwner'Address' = PostSourcesSourceRequestBodyOwner'Address'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyOwner'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyOwner'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyOwner'Address'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyOwner'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyOwner'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodyOwner'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodyOwner'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'City obj : "country" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'Country obj : "line1" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodyOwner'Address'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodyOwner'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodyOwner'Address'" (\obj -> (((((GHC.Base.pure PostSourcesSourceRequestBodyOwner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'PostSourcesSourceRequestBodyOwner'Address'' with all required fields.
mkPostSourcesSourceRequestBodyOwner'Address' :: PostSourcesSourceRequestBodyOwner'Address'
mkPostSourcesSourceRequestBodyOwner'Address' =
  PostSourcesSourceRequestBodyOwner'Address'
    { postSourcesSourceRequestBodyOwner'Address'City = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyOwner'Address'Country = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyOwner'Address'Line1 = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyOwner'Address'Line2 = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyOwner'Address'PostalCode = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodyOwner'Address'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order@ in the specification.
--
-- Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
data PostSourcesSourceRequestBodySourceOrder' = PostSourcesSourceRequestBodySourceOrder'
  { -- | items
    postSourcesSourceRequestBodySourceOrder'Items :: (GHC.Maybe.Maybe ([PostSourcesSourceRequestBodySourceOrder'Items'])),
    -- | shipping
    postSourcesSourceRequestBodySourceOrder'Shipping :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodySourceOrder'Shipping')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodySourceOrder' where
  toJSON obj = Data.Aeson.Types.Internal.object ("items" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items obj : "shipping" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("items" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items obj) GHC.Base.<> ("shipping" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodySourceOrder' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodySourceOrder'" (\obj -> (GHC.Base.pure PostSourcesSourceRequestBodySourceOrder' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "shipping"))

-- | Create a new 'PostSourcesSourceRequestBodySourceOrder'' with all required fields.
mkPostSourcesSourceRequestBodySourceOrder' :: PostSourcesSourceRequestBodySourceOrder'
mkPostSourcesSourceRequestBodySourceOrder' =
  PostSourcesSourceRequestBodySourceOrder'
    { postSourcesSourceRequestBodySourceOrder'Items = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Shipping = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order.properties.items.items@ in the specification.
data PostSourcesSourceRequestBodySourceOrder'Items' = PostSourcesSourceRequestBodySourceOrder'Items'
  { -- | amount
    postSourcesSourceRequestBodySourceOrder'Items'Amount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency
    postSourcesSourceRequestBodySourceOrder'Items'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | description
    --
    -- Constraints:
    --
    -- * Maximum length of 1000
    postSourcesSourceRequestBodySourceOrder'Items'Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | parent
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Items'Parent :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | quantity
    postSourcesSourceRequestBodySourceOrder'Items'Quantity :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | type
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Items'Type :: (GHC.Maybe.Maybe PostSourcesSourceRequestBodySourceOrder'Items'Type')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodySourceOrder'Items' where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Amount obj : "currency" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Currency obj : "description" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Description obj : "parent" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Parent obj : "quantity" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Quantity obj : "type" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Type obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Amount obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Currency obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Description obj) GHC.Base.<> (("parent" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Parent obj) GHC.Base.<> (("quantity" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Quantity obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Items'Type obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodySourceOrder'Items' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodySourceOrder'Items'" (\obj -> (((((GHC.Base.pure PostSourcesSourceRequestBodySourceOrder'Items' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "parent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))

-- | Create a new 'PostSourcesSourceRequestBodySourceOrder'Items'' with all required fields.
mkPostSourcesSourceRequestBodySourceOrder'Items' :: PostSourcesSourceRequestBodySourceOrder'Items'
mkPostSourcesSourceRequestBodySourceOrder'Items' =
  PostSourcesSourceRequestBodySourceOrder'Items'
    { postSourcesSourceRequestBodySourceOrder'Items'Amount = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Items'Currency = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Items'Description = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Items'Parent = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Items'Quantity = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Items'Type = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order.properties.items.items.properties.type@ in the specification.
data PostSourcesSourceRequestBodySourceOrder'Items'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostSourcesSourceRequestBodySourceOrder'Items'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostSourcesSourceRequestBodySourceOrder'Items'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"discount"@
    PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumDiscount
  | -- | Represents the JSON value @"shipping"@
    PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumShipping
  | -- | Represents the JSON value @"sku"@
    PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumSku
  | -- | Represents the JSON value @"tax"@
    PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumTax
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodySourceOrder'Items'Type' where
  toJSON (PostSourcesSourceRequestBodySourceOrder'Items'Type'Other val) = val
  toJSON (PostSourcesSourceRequestBodySourceOrder'Items'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumDiscount) = "discount"
  toJSON (PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumShipping) = "shipping"
  toJSON (PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumSku) = "sku"
  toJSON (PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumTax) = "tax"

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodySourceOrder'Items'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "discount" -> PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumDiscount
            | val GHC.Classes.== "shipping" -> PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumShipping
            | val GHC.Classes.== "sku" -> PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumSku
            | val GHC.Classes.== "tax" -> PostSourcesSourceRequestBodySourceOrder'Items'Type'EnumTax
            | GHC.Base.otherwise -> PostSourcesSourceRequestBodySourceOrder'Items'Type'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order.properties.shipping@ in the specification.
data PostSourcesSourceRequestBodySourceOrder'Shipping' = PostSourcesSourceRequestBodySourceOrder'Shipping'
  { -- | address
    postSourcesSourceRequestBodySourceOrder'Shipping'Address :: PostSourcesSourceRequestBodySourceOrder'Shipping'Address',
    -- | carrier
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'Carrier :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tracking_number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'TrackingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodySourceOrder'Shipping' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address obj : "carrier" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Carrier obj : "name" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Name obj : "phone" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Phone obj : "tracking_number" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'TrackingNumber obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address obj) GHC.Base.<> (("carrier" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Carrier obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Name obj) GHC.Base.<> (("phone" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Phone obj) GHC.Base.<> ("tracking_number" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'TrackingNumber obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodySourceOrder'Shipping' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodySourceOrder'Shipping'" (\obj -> ((((GHC.Base.pure PostSourcesSourceRequestBodySourceOrder'Shipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number"))

-- | Create a new 'PostSourcesSourceRequestBodySourceOrder'Shipping'' with all required fields.
mkPostSourcesSourceRequestBodySourceOrder'Shipping' ::
  -- | 'postSourcesSourceRequestBodySourceOrder'Shipping'Address'
  PostSourcesSourceRequestBodySourceOrder'Shipping'Address' ->
  PostSourcesSourceRequestBodySourceOrder'Shipping'
mkPostSourcesSourceRequestBodySourceOrder'Shipping' postSourcesSourceRequestBodySourceOrder'Shipping'Address =
  PostSourcesSourceRequestBodySourceOrder'Shipping'
    { postSourcesSourceRequestBodySourceOrder'Shipping'Address = postSourcesSourceRequestBodySourceOrder'Shipping'Address,
      postSourcesSourceRequestBodySourceOrder'Shipping'Carrier = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Shipping'Name = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Shipping'Phone = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Shipping'TrackingNumber = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/sources\/{source}.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_order.properties.shipping.properties.address@ in the specification.
data PostSourcesSourceRequestBodySourceOrder'Shipping'Address' = PostSourcesSourceRequestBodySourceOrder'Shipping'Address'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line1 :: Data.Text.Internal.Text,
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postSourcesSourceRequestBodySourceOrder'Shipping'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostSourcesSourceRequestBodySourceOrder'Shipping'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'City obj : "country" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'Country obj : "line1" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= postSourcesSourceRequestBodySourceOrder'Shipping'Address'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostSourcesSourceRequestBodySourceOrder'Shipping'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostSourcesSourceRequestBodySourceOrder'Shipping'Address'" (\obj -> (((((GHC.Base.pure PostSourcesSourceRequestBodySourceOrder'Shipping'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'PostSourcesSourceRequestBodySourceOrder'Shipping'Address'' with all required fields.
mkPostSourcesSourceRequestBodySourceOrder'Shipping'Address' ::
  -- | 'postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line1'
  Data.Text.Internal.Text ->
  PostSourcesSourceRequestBodySourceOrder'Shipping'Address'
mkPostSourcesSourceRequestBodySourceOrder'Shipping'Address' postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line1 =
  PostSourcesSourceRequestBodySourceOrder'Shipping'Address'
    { postSourcesSourceRequestBodySourceOrder'Shipping'Address'City = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Shipping'Address'Country = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line1 = postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line1,
      postSourcesSourceRequestBodySourceOrder'Shipping'Address'Line2 = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Shipping'Address'PostalCode = GHC.Maybe.Nothing,
      postSourcesSourceRequestBodySourceOrder'Shipping'Address'State = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postSourcesSource'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostSourcesSourceResponseError' is used.
data PostSourcesSourceResponse
  = -- | Means either no matching case available or a parse error
    PostSourcesSourceResponseError GHC.Base.String
  | -- | Successful response.
    PostSourcesSourceResponse200 Source
  | -- | Error response.
    PostSourcesSourceResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
