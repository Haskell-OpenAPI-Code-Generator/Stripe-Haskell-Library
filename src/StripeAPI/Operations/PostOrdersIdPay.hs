{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postOrdersIdPay
module StripeAPI.Operations.PostOrdersIdPay where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/orders/{id}/pay
--
-- \<p>Pay an order by providing a \<code>source\<\/code> to create a payment.\<\/p>
postOrdersIdPay ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | id | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  GHC.Maybe.Maybe PostOrdersIdPayRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostOrdersIdPayResponse)
postOrdersIdPay
  id
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostOrdersIdPayResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostOrdersIdPayResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Order
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostOrdersIdPayResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/orders/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel id)) GHC.Base.++ "/pay"))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/orders\/{id}\/pay.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostOrdersIdPayRequestBody = PostOrdersIdPayRequestBody
  { -- | application_fee: A fee in %s that will be applied to the order and transferred to the application owner\'s Stripe account. The request must be made with an OAuth key or the \`Stripe-Account\` header in order to take an application fee. For more information, see the application fees [documentation](https:\/\/stripe.com\/docs\/connect\/direct-charges\#collecting-fees).
    postOrdersIdPayRequestBodyApplicationFee :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | customer: The ID of an existing customer that will be charged for this order. If no customer was attached to the order at creation, either \`source\` or \`customer\` is required. Otherwise, the specified customer will be charged instead of the one attached to the order.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersIdPayRequestBodyCustomer :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | email: The email address of the customer placing the order. Required if not previously specified for the order.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersIdPayRequestBodyEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | expand: Specifies which fields in the response should be expanded.
    postOrdersIdPayRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
    postOrdersIdPayRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | source: A [Token](https:\/\/stripe.com\/docs\/api\#tokens)\'s or a [Source](https:\/\/stripe.com\/docs\/api\#sources)\'s ID, as returned by [Elements](https:\/\/stripe.com\/docs\/elements). If no customer was attached to the order at creation, either \`source\` or \`customer\` is required. Otherwise, the specified source will be charged intead of the customer attached to the order.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postOrdersIdPayRequestBodySource :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostOrdersIdPayRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("application_fee" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyApplicationFee obj : "customer" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyCustomer obj : "email" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyEmail obj : "expand" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyExpand obj : "metadata" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyMetadata obj : "source" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodySource obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("application_fee" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyApplicationFee obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyCustomer obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyEmail obj) GHC.Base.<> (("expand" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyExpand obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodyMetadata obj) GHC.Base.<> ("source" Data.Aeson.Types.ToJSON..= postOrdersIdPayRequestBodySource obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PostOrdersIdPayRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostOrdersIdPayRequestBody" (\obj -> (((((GHC.Base.pure PostOrdersIdPayRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source"))

-- | Create a new 'PostOrdersIdPayRequestBody' with all required fields.
mkPostOrdersIdPayRequestBody :: PostOrdersIdPayRequestBody
mkPostOrdersIdPayRequestBody =
  PostOrdersIdPayRequestBody
    { postOrdersIdPayRequestBodyApplicationFee = GHC.Maybe.Nothing,
      postOrdersIdPayRequestBodyCustomer = GHC.Maybe.Nothing,
      postOrdersIdPayRequestBodyEmail = GHC.Maybe.Nothing,
      postOrdersIdPayRequestBodyExpand = GHC.Maybe.Nothing,
      postOrdersIdPayRequestBodyMetadata = GHC.Maybe.Nothing,
      postOrdersIdPayRequestBodySource = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'postOrdersIdPay'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostOrdersIdPayResponseError' is used.
data PostOrdersIdPayResponse
  = -- | Means either no matching case available or a parse error
    PostOrdersIdPayResponseError GHC.Base.String
  | -- | Successful response.
    PostOrdersIdPayResponse200 Order
  | -- | Error response.
    PostOrdersIdPayResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
