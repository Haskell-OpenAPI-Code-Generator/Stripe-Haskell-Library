{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getPaymentMethodDomains
module StripeAPI.Operations.GetPaymentMethodDomains where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/payment_method_domains
--
-- \<p>Lists the details of existing payment method domains.\<\/p>
getPaymentMethodDomains ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetPaymentMethodDomainsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetPaymentMethodDomainsResponse)
getPaymentMethodDomains parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetPaymentMethodDomainsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetPaymentMethodDomainsResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetPaymentMethodDomainsResponseBody200
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetPaymentMethodDomainsResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/v1/payment_method_domains"
        [ StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "domain_name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPaymentMethodDomainsParametersQueryDomainName parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "enabled") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPaymentMethodDomainsParametersQueryEnabled parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPaymentMethodDomainsParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPaymentMethodDomainsParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPaymentMethodDomainsParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getPaymentMethodDomainsParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/payment_method_domains.GET.parameters@ in the specification.
data GetPaymentMethodDomainsParameters = GetPaymentMethodDomainsParameters
  { -- | queryDomain_name: Represents the parameter named \'domain_name\'
    --
    -- The domain name that this payment method domain object represents.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getPaymentMethodDomainsParametersQueryDomainName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEnabled: Represents the parameter named \'enabled\'
    --
    -- Whether this payment method domain is enabled. If the domain is not enabled, payment methods will not appear in Elements
    getPaymentMethodDomainsParametersQueryEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getPaymentMethodDomainsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getPaymentMethodDomainsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getPaymentMethodDomainsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getPaymentMethodDomainsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetPaymentMethodDomainsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryDomain_name" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryDomainName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnabled" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryStartingAfter obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryDomain_name" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryDomainName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnabled" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryEnabled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getPaymentMethodDomainsParametersQueryStartingAfter obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetPaymentMethodDomainsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPaymentMethodDomainsParameters" (\obj -> (((((GHC.Base.pure GetPaymentMethodDomainsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryDomain_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))

-- | Create a new 'GetPaymentMethodDomainsParameters' with all required fields.
mkGetPaymentMethodDomainsParameters :: GetPaymentMethodDomainsParameters
mkGetPaymentMethodDomainsParameters =
  GetPaymentMethodDomainsParameters
    { getPaymentMethodDomainsParametersQueryDomainName = GHC.Maybe.Nothing,
      getPaymentMethodDomainsParametersQueryEnabled = GHC.Maybe.Nothing,
      getPaymentMethodDomainsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getPaymentMethodDomainsParametersQueryExpand = GHC.Maybe.Nothing,
      getPaymentMethodDomainsParametersQueryLimit = GHC.Maybe.Nothing,
      getPaymentMethodDomainsParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getPaymentMethodDomains'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetPaymentMethodDomainsResponseError' is used.
data GetPaymentMethodDomainsResponse
  = -- | Means either no matching case available or a parse error
    GetPaymentMethodDomainsResponseError GHC.Base.String
  | -- | Successful response.
    GetPaymentMethodDomainsResponse200 GetPaymentMethodDomainsResponseBody200
  | -- | Error response.
    GetPaymentMethodDomainsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/payment_method_domains.GET.responses.200.content.application\/json.schema@ in the specification.
data GetPaymentMethodDomainsResponseBody200 = GetPaymentMethodDomainsResponseBody200
  { -- | data
    getPaymentMethodDomainsResponseBody200Data :: ([PaymentMethodDomain]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getPaymentMethodDomainsResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    -- * Must match pattern \'^\/v1\/payment_method_domains\'
    getPaymentMethodDomainsResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetPaymentMethodDomainsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getPaymentMethodDomainsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getPaymentMethodDomainsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getPaymentMethodDomainsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getPaymentMethodDomainsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getPaymentMethodDomainsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getPaymentMethodDomainsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetPaymentMethodDomainsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetPaymentMethodDomainsResponseBody200" (\obj -> ((GHC.Base.pure GetPaymentMethodDomainsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetPaymentMethodDomainsResponseBody200' with all required fields.
mkGetPaymentMethodDomainsResponseBody200 ::
  -- | 'getPaymentMethodDomainsResponseBody200Data'
  [PaymentMethodDomain] ->
  -- | 'getPaymentMethodDomainsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getPaymentMethodDomainsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetPaymentMethodDomainsResponseBody200
mkGetPaymentMethodDomainsResponseBody200 getPaymentMethodDomainsResponseBody200Data getPaymentMethodDomainsResponseBody200HasMore getPaymentMethodDomainsResponseBody200Url =
  GetPaymentMethodDomainsResponseBody200
    { getPaymentMethodDomainsResponseBody200Data = getPaymentMethodDomainsResponseBody200Data,
      getPaymentMethodDomainsResponseBody200HasMore = getPaymentMethodDomainsResponseBody200HasMore,
      getPaymentMethodDomainsResponseBody200Url = getPaymentMethodDomainsResponseBody200Url
    }
