{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getBalanceTransactions
module StripeAPI.Operations.GetBalanceTransactions where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/balance_transactions
--
-- \<p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.\<\/p>
--
-- \<p>Note that this endpoint was previously called “Balance history” and used the path \<code>\/v1\/balance\/history\<\/code>.\<\/p>
getBalanceTransactions ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetBalanceTransactionsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetBalanceTransactionsResponse)
getBalanceTransactions parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetBalanceTransactionsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetBalanceTransactionsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetBalanceTransactionsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetBalanceTransactionsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/balance_transactions")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "available_on") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQueryAvailableOn parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "currency") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQueryCurrency parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "payout") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQueryPayout parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "source") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQuerySource parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "type") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getBalanceTransactionsParametersQueryType parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the data type for the schema getBalanceTransactionsParameters
data GetBalanceTransactionsParameters
  = GetBalanceTransactionsParameters
      { -- | queryAvailable_on: Represents the parameter named \'available_on\'
        getBalanceTransactionsParametersQueryAvailableOn :: (GHC.Maybe.Maybe GetBalanceTransactionsParametersQueryAvailableOn'Variants),
        -- | queryCreated: Represents the parameter named \'created\'
        getBalanceTransactionsParametersQueryCreated :: (GHC.Maybe.Maybe GetBalanceTransactionsParametersQueryCreated'Variants),
        -- | queryCurrency: Represents the parameter named \'currency\'
        --
        -- Only return transactions in a certain currency. Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        getBalanceTransactionsParametersQueryCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getBalanceTransactionsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getBalanceTransactionsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getBalanceTransactionsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryPayout: Represents the parameter named \'payout\'
        --
        -- For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getBalanceTransactionsParametersQueryPayout :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | querySource: Represents the parameter named \'source\'
        --
        -- Only returns the original transaction.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getBalanceTransactionsParametersQuerySource :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getBalanceTransactionsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryType: Represents the parameter named \'type\'
        --
        -- Only returns transactions of the given type. One of: \`charge\`, \`refund\`, \`adjustment\`, \`application_fee\`, \`application_fee_refund\`, \`transfer\`, \`payment\`, \`payout\`, \`payout_failure\`, \`stripe_fee\`, or \`network_cost\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getBalanceTransactionsParametersQueryType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetBalanceTransactionsParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "queryAvailable_on" (getBalanceTransactionsParametersQueryAvailableOn obj) : (Data.Aeson..=) "queryCreated" (getBalanceTransactionsParametersQueryCreated obj) : (Data.Aeson..=) "queryCurrency" (getBalanceTransactionsParametersQueryCurrency obj) : (Data.Aeson..=) "queryEnding_before" (getBalanceTransactionsParametersQueryEndingBefore obj) : (Data.Aeson..=) "queryExpand" (getBalanceTransactionsParametersQueryExpand obj) : (Data.Aeson..=) "queryLimit" (getBalanceTransactionsParametersQueryLimit obj) : (Data.Aeson..=) "queryPayout" (getBalanceTransactionsParametersQueryPayout obj) : (Data.Aeson..=) "querySource" (getBalanceTransactionsParametersQuerySource obj) : (Data.Aeson..=) "queryStarting_after" (getBalanceTransactionsParametersQueryStartingAfter obj) : (Data.Aeson..=) "queryType" (getBalanceTransactionsParametersQueryType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "queryAvailable_on" (getBalanceTransactionsParametersQueryAvailableOn obj) GHC.Base.<> ((Data.Aeson..=) "queryCreated" (getBalanceTransactionsParametersQueryCreated obj) GHC.Base.<> ((Data.Aeson..=) "queryCurrency" (getBalanceTransactionsParametersQueryCurrency obj) GHC.Base.<> ((Data.Aeson..=) "queryEnding_before" (getBalanceTransactionsParametersQueryEndingBefore obj) GHC.Base.<> ((Data.Aeson..=) "queryExpand" (getBalanceTransactionsParametersQueryExpand obj) GHC.Base.<> ((Data.Aeson..=) "queryLimit" (getBalanceTransactionsParametersQueryLimit obj) GHC.Base.<> ((Data.Aeson..=) "queryPayout" (getBalanceTransactionsParametersQueryPayout obj) GHC.Base.<> ((Data.Aeson..=) "querySource" (getBalanceTransactionsParametersQuerySource obj) GHC.Base.<> ((Data.Aeson..=) "queryStarting_after" (getBalanceTransactionsParametersQueryStartingAfter obj) GHC.Base.<> (Data.Aeson..=) "queryType" (getBalanceTransactionsParametersQueryType obj))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetBalanceTransactionsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBalanceTransactionsParameters" (\obj -> (((((((((GHC.Base.pure GetBalanceTransactionsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryAvailable_on")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCurrency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryPayout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "querySource")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryType"))

-- | Defines the data type for the schema getBalanceTransactionsParametersQueryAvailable_on\'OneOf2
data GetBalanceTransactionsParametersQueryAvailableOn'OneOf2
  = GetBalanceTransactionsParametersQueryAvailableOn'OneOf2
      { -- | gt
        getBalanceTransactionsParametersQueryAvailableOn'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getBalanceTransactionsParametersQueryAvailableOn'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getBalanceTransactionsParametersQueryAvailableOn'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getBalanceTransactionsParametersQueryAvailableOn'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetBalanceTransactionsParametersQueryAvailableOn'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getBalanceTransactionsParametersQueryAvailableOn'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getBalanceTransactionsParametersQueryAvailableOn'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getBalanceTransactionsParametersQueryAvailableOn'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getBalanceTransactionsParametersQueryAvailableOn'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getBalanceTransactionsParametersQueryAvailableOn'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getBalanceTransactionsParametersQueryAvailableOn'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getBalanceTransactionsParametersQueryAvailableOn'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getBalanceTransactionsParametersQueryAvailableOn'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetBalanceTransactionsParametersQueryAvailableOn'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBalanceTransactionsParametersQueryAvailableOn'OneOf2" (\obj -> (((GHC.Base.pure GetBalanceTransactionsParametersQueryAvailableOn'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getBalanceTransactionsParametersQueryAvailable_on\'
--
-- Represents the parameter named \'available_on\'
data GetBalanceTransactionsParametersQueryAvailableOn'Variants
  = GetBalanceTransactionsParametersQueryAvailableOn'Int GHC.Types.Int
  | GetBalanceTransactionsParametersQueryAvailableOn'GetBalanceTransactionsParametersQueryAvailableOn'OneOf2 GetBalanceTransactionsParametersQueryAvailableOn'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetBalanceTransactionsParametersQueryAvailableOn'Variants where
  toJSON (GetBalanceTransactionsParametersQueryAvailableOn'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetBalanceTransactionsParametersQueryAvailableOn'GetBalanceTransactionsParametersQueryAvailableOn'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetBalanceTransactionsParametersQueryAvailableOn'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetBalanceTransactionsParametersQueryAvailableOn'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetBalanceTransactionsParametersQueryAvailableOn'GetBalanceTransactionsParametersQueryAvailableOn'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema getBalanceTransactionsParametersQueryCreated\'OneOf2
data GetBalanceTransactionsParametersQueryCreated'OneOf2
  = GetBalanceTransactionsParametersQueryCreated'OneOf2
      { -- | gt
        getBalanceTransactionsParametersQueryCreated'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getBalanceTransactionsParametersQueryCreated'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getBalanceTransactionsParametersQueryCreated'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getBalanceTransactionsParametersQueryCreated'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetBalanceTransactionsParametersQueryCreated'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getBalanceTransactionsParametersQueryCreated'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getBalanceTransactionsParametersQueryCreated'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getBalanceTransactionsParametersQueryCreated'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getBalanceTransactionsParametersQueryCreated'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getBalanceTransactionsParametersQueryCreated'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getBalanceTransactionsParametersQueryCreated'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getBalanceTransactionsParametersQueryCreated'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getBalanceTransactionsParametersQueryCreated'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetBalanceTransactionsParametersQueryCreated'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBalanceTransactionsParametersQueryCreated'OneOf2" (\obj -> (((GHC.Base.pure GetBalanceTransactionsParametersQueryCreated'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getBalanceTransactionsParametersQueryCreated\'
--
-- Represents the parameter named \'created\'
data GetBalanceTransactionsParametersQueryCreated'Variants
  = GetBalanceTransactionsParametersQueryCreated'Int GHC.Types.Int
  | GetBalanceTransactionsParametersQueryCreated'GetBalanceTransactionsParametersQueryCreated'OneOf2 GetBalanceTransactionsParametersQueryCreated'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetBalanceTransactionsParametersQueryCreated'Variants where
  toJSON (GetBalanceTransactionsParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetBalanceTransactionsParametersQueryCreated'GetBalanceTransactionsParametersQueryCreated'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetBalanceTransactionsParametersQueryCreated'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetBalanceTransactionsParametersQueryCreated'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetBalanceTransactionsParametersQueryCreated'GetBalanceTransactionsParametersQueryCreated'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'getBalanceTransactions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetBalanceTransactionsResponseError' is used.
data GetBalanceTransactionsResponse
  = -- | Means either no matching case available or a parse error
    GetBalanceTransactionsResponseError GHC.Base.String
  | -- | Successful response.
    GetBalanceTransactionsResponse200 GetBalanceTransactionsResponseBody200
  | -- | Error response.
    GetBalanceTransactionsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the data type for the schema GetBalanceTransactionsResponseBody200
data GetBalanceTransactionsResponseBody200
  = GetBalanceTransactionsResponseBody200
      { -- | data
        getBalanceTransactionsResponseBody200Data :: ([BalanceTransaction]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getBalanceTransactionsResponseBody200HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        getBalanceTransactionsResponseBody200Object :: GetBalanceTransactionsResponseBody200Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        -- * Must match pattern \'^\/v1\/balance_transactions\'
        getBalanceTransactionsResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetBalanceTransactionsResponseBody200 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getBalanceTransactionsResponseBody200Data obj) : (Data.Aeson..=) "has_more" (getBalanceTransactionsResponseBody200HasMore obj) : (Data.Aeson..=) "object" (getBalanceTransactionsResponseBody200Object obj) : (Data.Aeson..=) "url" (getBalanceTransactionsResponseBody200Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getBalanceTransactionsResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (getBalanceTransactionsResponseBody200HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (getBalanceTransactionsResponseBody200Object obj) GHC.Base.<> (Data.Aeson..=) "url" (getBalanceTransactionsResponseBody200Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetBalanceTransactionsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetBalanceTransactionsResponseBody200" (\obj -> (((GHC.Base.pure GetBalanceTransactionsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema GetBalanceTransactionsResponseBody200Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data GetBalanceTransactionsResponseBody200Object'
  = GetBalanceTransactionsResponseBody200Object'EnumOther Data.Aeson.Types.Internal.Value
  | GetBalanceTransactionsResponseBody200Object'EnumTyped Data.Text.Internal.Text
  | GetBalanceTransactionsResponseBody200Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetBalanceTransactionsResponseBody200Object' where
  toJSON (GetBalanceTransactionsResponseBody200Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetBalanceTransactionsResponseBody200Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetBalanceTransactionsResponseBody200Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON GetBalanceTransactionsResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> GetBalanceTransactionsResponseBody200Object'EnumStringList
            | GHC.Base.otherwise -> GetBalanceTransactionsResponseBody200Object'EnumOther val
      )
