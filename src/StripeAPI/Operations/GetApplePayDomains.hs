{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getApplePayDomains
module StripeAPI.Operations.GetApplePayDomains where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/apple_pay/domains
--
-- \<p>List apple pay domains.\<\/p>
getApplePayDomains ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApplePayDomainsParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetApplePayDomainsResponse)
getApplePayDomains parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetApplePayDomainsResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApplePayDomainsResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetApplePayDomainsResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApplePayDomainsResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/apple_pay/domains")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "domain_name") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplePayDomainsParametersQueryDomainName parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplePayDomainsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplePayDomainsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplePayDomainsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplePayDomainsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/apple_pay\/domains.GET.parameters@ in the specification.
data GetApplePayDomainsParameters = GetApplePayDomainsParameters
  { -- | queryDomain_name: Represents the parameter named \'domain_name\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getApplePayDomainsParametersQueryDomainName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getApplePayDomainsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getApplePayDomainsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getApplePayDomainsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getApplePayDomainsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApplePayDomainsParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("queryDomain_name" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryDomainName obj : "queryEnding_before" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryEndingBefore obj : "queryExpand" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryExpand obj : "queryLimit" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryLimit obj : "queryStarting_after" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryStartingAfter obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("queryDomain_name" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryDomainName obj) GHC.Base.<> (("queryEnding_before" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryEndingBefore obj) GHC.Base.<> (("queryExpand" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryExpand obj) GHC.Base.<> (("queryLimit" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryLimit obj) GHC.Base.<> ("queryStarting_after" Data.Aeson.Types.ToJSON..= getApplePayDomainsParametersQueryStartingAfter obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON GetApplePayDomainsParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApplePayDomainsParameters" (\obj -> ((((GHC.Base.pure GetApplePayDomainsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryDomain_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after"))

-- | Create a new 'GetApplePayDomainsParameters' with all required fields.
mkGetApplePayDomainsParameters :: GetApplePayDomainsParameters
mkGetApplePayDomainsParameters =
  GetApplePayDomainsParameters
    { getApplePayDomainsParametersQueryDomainName = GHC.Maybe.Nothing,
      getApplePayDomainsParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getApplePayDomainsParametersQueryExpand = GHC.Maybe.Nothing,
      getApplePayDomainsParametersQueryLimit = GHC.Maybe.Nothing,
      getApplePayDomainsParametersQueryStartingAfter = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'getApplePayDomains'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApplePayDomainsResponseError' is used.
data GetApplePayDomainsResponse
  = -- | Means either no matching case available or a parse error
    GetApplePayDomainsResponseError GHC.Base.String
  | -- | Successful response.
    GetApplePayDomainsResponse200 GetApplePayDomainsResponseBody200
  | -- | Error response.
    GetApplePayDomainsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/apple_pay\/domains.GET.responses.200.content.application\/json.schema@ in the specification.
data GetApplePayDomainsResponseBody200 = GetApplePayDomainsResponseBody200
  { -- | data
    getApplePayDomainsResponseBody200Data :: ([ApplePayDomain]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getApplePayDomainsResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    -- * Must match pattern \'^\/v1\/apple_pay\/domains\'
    getApplePayDomainsResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApplePayDomainsResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= getApplePayDomainsResponseBody200Data obj : "has_more" Data.Aeson.Types.ToJSON..= getApplePayDomainsResponseBody200HasMore obj : "url" Data.Aeson.Types.ToJSON..= getApplePayDomainsResponseBody200Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= getApplePayDomainsResponseBody200Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= getApplePayDomainsResponseBody200HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= getApplePayDomainsResponseBody200Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON GetApplePayDomainsResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApplePayDomainsResponseBody200" (\obj -> ((GHC.Base.pure GetApplePayDomainsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetApplePayDomainsResponseBody200' with all required fields.
mkGetApplePayDomainsResponseBody200 ::
  -- | 'getApplePayDomainsResponseBody200Data'
  [ApplePayDomain] ->
  -- | 'getApplePayDomainsResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getApplePayDomainsResponseBody200Url'
  Data.Text.Internal.Text ->
  GetApplePayDomainsResponseBody200
mkGetApplePayDomainsResponseBody200 getApplePayDomainsResponseBody200Data getApplePayDomainsResponseBody200HasMore getApplePayDomainsResponseBody200Url =
  GetApplePayDomainsResponseBody200
    { getApplePayDomainsResponseBody200Data = getApplePayDomainsResponseBody200Data,
      getApplePayDomainsResponseBody200HasMore = getApplePayDomainsResponseBody200HasMore,
      getApplePayDomainsResponseBody200Url = getApplePayDomainsResponseBody200Url
    }
