-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation getAccountPersons
module StripeAPI.Operations.GetAccountPersons where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > GET /v1/account/persons
-- 
-- \<p>Returns a list of people associated with the accountâ€™s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.\<\/p>
getAccountPersons :: forall m . StripeAPI.Common.MonadHTTP m => GetAccountPersonsParameters -- ^ Contains all available parameters of this operation (query and path parameters)
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetAccountPersonsResponse) -- ^ Monadic computation which returns the result of the operation
getAccountPersons parameters = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either GetAccountPersonsResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> GetAccountPersonsResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                                            GetAccountPersonsResponseBody200)
                                                                                                                                                                           | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> GetAccountPersonsResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                              Error)
                                                                                                                                                                           | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET") (Data.Text.pack "/v1/account/persons") [StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountPersonsParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountPersonsParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountPersonsParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.pack "relationship") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountPersonsParametersQueryRelationship parameters) (Data.Text.pack "deepObject") GHC.Types.True,
                                                                                                                                                                                                                                                                                                                                                                                                                  StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getAccountPersonsParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True])
-- | Defines the object schema located at @paths.\/v1\/account\/persons.GET.parameters@ in the specification.
-- 
-- 
data GetAccountPersonsParameters = GetAccountPersonsParameters {
  -- | queryEnding_before: Represents the parameter named \'ending_before\'
  -- 
  -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  getAccountPersonsParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | queryExpand: Represents the parameter named \'expand\'
  -- 
  -- Specifies which fields in the response should be expanded.
  , getAccountPersonsParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | queryLimit: Represents the parameter named \'limit\'
  -- 
  -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
  , getAccountPersonsParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | queryRelationship: Represents the parameter named \'relationship\'
  -- 
  -- Filters on the list of people returned based on the person\'s relationship to the account\'s company.
  , getAccountPersonsParametersQueryRelationship :: (GHC.Maybe.Maybe GetAccountPersonsParametersQueryRelationship')
  -- | queryStarting_after: Represents the parameter named \'starting_after\'
  -- 
  -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getAccountPersonsParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountPersonsParameters
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRelationship" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryStartingAfter obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryRelationship" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryStartingAfter obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountPersonsParameters
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountPersonsParameters" (\obj -> ((((GHC.Base.pure GetAccountPersonsParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryRelationship")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after"))
-- | Create a new 'GetAccountPersonsParameters' with all required fields.
mkGetAccountPersonsParameters :: GetAccountPersonsParameters
mkGetAccountPersonsParameters = GetAccountPersonsParameters{getAccountPersonsParametersQueryEndingBefore = GHC.Maybe.Nothing,
                                                            getAccountPersonsParametersQueryExpand = GHC.Maybe.Nothing,
                                                            getAccountPersonsParametersQueryLimit = GHC.Maybe.Nothing,
                                                            getAccountPersonsParametersQueryRelationship = GHC.Maybe.Nothing,
                                                            getAccountPersonsParametersQueryStartingAfter = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/account\/persons.GET.parameters.properties.queryRelationship@ in the specification.
-- 
-- Represents the parameter named \'relationship\'
-- 
-- Filters on the list of people returned based on the person\'s relationship to the account\'s company.
data GetAccountPersonsParametersQueryRelationship' = GetAccountPersonsParametersQueryRelationship' {
  -- | director
  getAccountPersonsParametersQueryRelationship'Director :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | executive
  , getAccountPersonsParametersQueryRelationship'Executive :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | owner
  , getAccountPersonsParametersQueryRelationship'Owner :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | representative
  , getAccountPersonsParametersQueryRelationship'Representative :: (GHC.Maybe.Maybe GHC.Types.Bool)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountPersonsParametersQueryRelationship'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("director" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship'Director obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("executive" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship'Executive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("representative" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship'Representative obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("director" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship'Director obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("executive" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship'Executive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("representative" Data.Aeson.Types.ToJSON..=)) (getAccountPersonsParametersQueryRelationship'Representative obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountPersonsParametersQueryRelationship'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountPersonsParametersQueryRelationship'" (\obj -> (((GHC.Base.pure GetAccountPersonsParametersQueryRelationship' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "director")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "executive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "representative"))
-- | Create a new 'GetAccountPersonsParametersQueryRelationship'' with all required fields.
mkGetAccountPersonsParametersQueryRelationship' :: GetAccountPersonsParametersQueryRelationship'
mkGetAccountPersonsParametersQueryRelationship' = GetAccountPersonsParametersQueryRelationship'{getAccountPersonsParametersQueryRelationship'Director = GHC.Maybe.Nothing,
                                                                                                getAccountPersonsParametersQueryRelationship'Executive = GHC.Maybe.Nothing,
                                                                                                getAccountPersonsParametersQueryRelationship'Owner = GHC.Maybe.Nothing,
                                                                                                getAccountPersonsParametersQueryRelationship'Representative = GHC.Maybe.Nothing}
-- | Represents a response of the operation 'getAccountPersons'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetAccountPersonsResponseError' is used.
data GetAccountPersonsResponse =
   GetAccountPersonsResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | GetAccountPersonsResponse200 GetAccountPersonsResponseBody200 -- ^ Successful response.
  | GetAccountPersonsResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
-- | Defines the object schema located at @paths.\/v1\/account\/persons.GET.responses.200.content.application\/json.schema@ in the specification.
-- 
-- 
data GetAccountPersonsResponseBody200 = GetAccountPersonsResponseBody200 {
  -- | data
  getAccountPersonsResponseBody200Data :: ([Person])
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , getAccountPersonsResponseBody200HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , getAccountPersonsResponseBody200Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON GetAccountPersonsResponseBody200
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getAccountPersonsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getAccountPersonsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getAccountPersonsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getAccountPersonsResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getAccountPersonsResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getAccountPersonsResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON GetAccountPersonsResponseBody200
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "GetAccountPersonsResponseBody200" (\obj -> ((GHC.Base.pure GetAccountPersonsResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
-- | Create a new 'GetAccountPersonsResponseBody200' with all required fields.
mkGetAccountPersonsResponseBody200 :: [Person] -- ^ 'getAccountPersonsResponseBody200Data'
  -> GHC.Types.Bool -- ^ 'getAccountPersonsResponseBody200HasMore'
  -> Data.Text.Internal.Text -- ^ 'getAccountPersonsResponseBody200Url'
  -> GetAccountPersonsResponseBody200
mkGetAccountPersonsResponseBody200 getAccountPersonsResponseBody200Data getAccountPersonsResponseBody200HasMore getAccountPersonsResponseBody200Url = GetAccountPersonsResponseBody200{getAccountPersonsResponseBody200Data = getAccountPersonsResponseBody200Data,
                                                                                                                                                                                       getAccountPersonsResponseBody200HasMore = getAccountPersonsResponseBody200HasMore,
                                                                                                                                                                                       getAccountPersonsResponseBody200Url = getAccountPersonsResponseBody200Url}
