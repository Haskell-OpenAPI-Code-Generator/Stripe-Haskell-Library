{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postTokens
module StripeAPI.Operations.PostTokens where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/tokens
--
-- \<p>Creates a single-use token that represents a bank accountâ€™s details.
-- This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a \<a href=\"\#accounts\">Custom account\<\/a>.\<\/p>
postTokens ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The request body to send
  GHC.Maybe.Maybe PostTokensRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostTokensResponse)
postTokens body =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either PostTokensResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostTokensResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Token
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   PostTokensResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/tokens") GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostTokensRequestBody = PostTokensRequestBody
  { -- | account: Information for the account this token will represent.
    postTokensRequestBodyAccount :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'),
    -- | bank_account: The bank account this token will represent.
    postTokensRequestBodyBankAccount :: (GHC.Maybe.Maybe PostTokensRequestBodyBankAccount'),
    -- | card
    postTokensRequestBodyCard :: (GHC.Maybe.Maybe PostTokensRequestBodyCard'Variants),
    -- | customer: The customer (owned by the application\'s account) for which to create a token. This can be used only with an [OAuth access token](https:\/\/stripe.com\/docs\/connect\/standard-accounts) or [Stripe-Account header](https:\/\/stripe.com\/docs\/connect\/authentication). For more details, see [Cloning Saved Payment Methods](https:\/\/stripe.com\/docs\/connect\/cloning-saved-payment-methods).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCustomer :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | cvc_update: The updated CVC value this token will represent.
    postTokensRequestBodyCvcUpdate :: (GHC.Maybe.Maybe PostTokensRequestBodyCvcUpdate'),
    -- | expand: Specifies which fields in the response should be expanded.
    postTokensRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | person: Information for the person this token will represent.
    postTokensRequestBodyPerson :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'),
    -- | pii: The PII this token will represent.
    postTokensRequestBodyPii :: (GHC.Maybe.Maybe PostTokensRequestBodyPii')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_account" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_update" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCvcUpdate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("person" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pii" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPii obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_account" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_update" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCvcUpdate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("person" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pii" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPii obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBody" (\obj -> (((((((GHC.Base.pure PostTokensRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cvc_update")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "person")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pii"))

-- | Create a new 'PostTokensRequestBody' with all required fields.
mkPostTokensRequestBody :: PostTokensRequestBody
mkPostTokensRequestBody =
  PostTokensRequestBody
    { postTokensRequestBodyAccount = GHC.Maybe.Nothing,
      postTokensRequestBodyBankAccount = GHC.Maybe.Nothing,
      postTokensRequestBodyCard = GHC.Maybe.Nothing,
      postTokensRequestBodyCustomer = GHC.Maybe.Nothing,
      postTokensRequestBodyCvcUpdate = GHC.Maybe.Nothing,
      postTokensRequestBodyExpand = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson = GHC.Maybe.Nothing,
      postTokensRequestBodyPii = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account@ in the specification.
--
-- Information for the account this token will represent.
data PostTokensRequestBodyAccount' = PostTokensRequestBodyAccount'
  { -- | business_type
    postTokensRequestBodyAccount'BusinessType :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'BusinessType'),
    -- | company
    postTokensRequestBodyAccount'Company :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Company'),
    -- | individual
    postTokensRequestBodyAccount'Individual :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'),
    -- | tos_shown_and_accepted
    postTokensRequestBodyAccount'TosShownAndAccepted :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_type" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'BusinessType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("individual" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tos_shown_and_accepted" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'TosShownAndAccepted obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("business_type" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'BusinessType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("individual" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tos_shown_and_accepted" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'TosShownAndAccepted obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'" (\obj -> (((GHC.Base.pure PostTokensRequestBodyAccount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "business_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "individual")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tos_shown_and_accepted"))

-- | Create a new 'PostTokensRequestBodyAccount'' with all required fields.
mkPostTokensRequestBodyAccount' :: PostTokensRequestBodyAccount'
mkPostTokensRequestBodyAccount' =
  PostTokensRequestBodyAccount'
    { postTokensRequestBodyAccount'BusinessType = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'TosShownAndAccepted = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.business_type@ in the specification.
data PostTokensRequestBodyAccount'BusinessType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostTokensRequestBodyAccount'BusinessType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostTokensRequestBodyAccount'BusinessType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    PostTokensRequestBodyAccount'BusinessType'EnumCompany
  | -- | Represents the JSON value @"government_entity"@
    PostTokensRequestBodyAccount'BusinessType'EnumGovernmentEntity
  | -- | Represents the JSON value @"individual"@
    PostTokensRequestBodyAccount'BusinessType'EnumIndividual
  | -- | Represents the JSON value @"non_profit"@
    PostTokensRequestBodyAccount'BusinessType'EnumNonProfit
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'BusinessType' where
  toJSON (PostTokensRequestBodyAccount'BusinessType'Other val) = val
  toJSON (PostTokensRequestBodyAccount'BusinessType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostTokensRequestBodyAccount'BusinessType'EnumCompany) = "company"
  toJSON (PostTokensRequestBodyAccount'BusinessType'EnumGovernmentEntity) = "government_entity"
  toJSON (PostTokensRequestBodyAccount'BusinessType'EnumIndividual) = "individual"
  toJSON (PostTokensRequestBodyAccount'BusinessType'EnumNonProfit) = "non_profit"

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'BusinessType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "company" -> PostTokensRequestBodyAccount'BusinessType'EnumCompany
            | val GHC.Classes.== "government_entity" -> PostTokensRequestBodyAccount'BusinessType'EnumGovernmentEntity
            | val GHC.Classes.== "individual" -> PostTokensRequestBodyAccount'BusinessType'EnumIndividual
            | val GHC.Classes.== "non_profit" -> PostTokensRequestBodyAccount'BusinessType'EnumNonProfit
            | GHC.Base.otherwise -> PostTokensRequestBodyAccount'BusinessType'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.company@ in the specification.
data PostTokensRequestBodyAccount'Company' = PostTokensRequestBodyAccount'Company'
  { -- | address
    postTokensRequestBodyAccount'Company'Address :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Company'Address'),
    -- | address_kana
    postTokensRequestBodyAccount'Company'AddressKana :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Company'AddressKana'),
    -- | address_kanji
    postTokensRequestBodyAccount'Company'AddressKanji :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Company'AddressKanji'),
    -- | directors_provided
    postTokensRequestBodyAccount'Company'DirectorsProvided :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | executives_provided
    postTokensRequestBodyAccount'Company'ExecutivesProvided :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyAccount'Company'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name_kana
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyAccount'Company'NameKana :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name_kanji
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyAccount'Company'NameKanji :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | owners_provided
    postTokensRequestBodyAccount'Company'OwnersProvided :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | ownership_declaration
    postTokensRequestBodyAccount'Company'OwnershipDeclaration :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Company'OwnershipDeclaration'),
    -- | ownership_declaration_shown_and_signed
    postTokensRequestBodyAccount'Company'OwnershipDeclarationShownAndSigned :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | phone
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | registration_number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'RegistrationNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | structure
    postTokensRequestBodyAccount'Company'Structure :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Company'Structure'),
    -- | tax_id
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'TaxId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tax_id_registrar
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'TaxIdRegistrar :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | vat_id
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'VatId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification
    postTokensRequestBodyAccount'Company'Verification :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Company'Verification')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Company' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("directors_provided" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'DirectorsProvided obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("executives_provided" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'ExecutivesProvided obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'NameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'NameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owners_provided" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnersProvided obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ownership_declaration" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclaration obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ownership_declaration_shown_and_signed" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclarationShownAndSigned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Phone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("registration_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'RegistrationNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("structure" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Structure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_id" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'TaxId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_id_registrar" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'TaxIdRegistrar obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_id" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'VatId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Verification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("directors_provided" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'DirectorsProvided obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("executives_provided" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'ExecutivesProvided obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'NameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'NameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owners_provided" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnersProvided obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ownership_declaration" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclaration obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ownership_declaration_shown_and_signed" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclarationShownAndSigned obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Phone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("registration_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'RegistrationNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("structure" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Structure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_id" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'TaxId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_id_registrar" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'TaxIdRegistrar obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("vat_id" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'VatId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Verification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Company' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Company'" (\obj -> (((((((((((((((((GHC.Base.pure PostTokensRequestBodyAccount'Company' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "directors_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "executives_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "owners_provided")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ownership_declaration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ownership_declaration_shown_and_signed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "registration_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "structure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_id_registrar")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "vat_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification"))

-- | Create a new 'PostTokensRequestBodyAccount'Company'' with all required fields.
mkPostTokensRequestBodyAccount'Company' :: PostTokensRequestBodyAccount'Company'
mkPostTokensRequestBodyAccount'Company' =
  PostTokensRequestBodyAccount'Company'
    { postTokensRequestBodyAccount'Company'Address = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKana = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKanji = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'DirectorsProvided = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'ExecutivesProvided = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Name = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'NameKana = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'NameKanji = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'OwnersProvided = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'OwnershipDeclaration = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'OwnershipDeclarationShownAndSigned = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Phone = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'RegistrationNumber = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Structure = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'TaxId = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'TaxIdRegistrar = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'VatId = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Verification = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.company.properties.address@ in the specification.
data PostTokensRequestBodyAccount'Company'Address' = PostTokensRequestBodyAccount'Company'Address'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyAccount'Company'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyAccount'Company'Address'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyAccount'Company'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Company'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'State obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Address'State obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Company'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Company'Address'" (\obj -> (((((GHC.Base.pure PostTokensRequestBodyAccount'Company'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'PostTokensRequestBodyAccount'Company'Address'' with all required fields.
mkPostTokensRequestBodyAccount'Company'Address' :: PostTokensRequestBodyAccount'Company'Address'
mkPostTokensRequestBodyAccount'Company'Address' =
  PostTokensRequestBodyAccount'Company'Address'
    { postTokensRequestBodyAccount'Company'Address'City = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Address'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Address'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Address'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Address'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Address'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.company.properties.address_kana@ in the specification.
data PostTokensRequestBodyAccount'Company'AddressKana' = PostTokensRequestBodyAccount'Company'AddressKana'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKana'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKana'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKana'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKana'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKana'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKana'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | town
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKana'Town :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Company'AddressKana' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'Town obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKana'Town obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Company'AddressKana' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Company'AddressKana'" (\obj -> ((((((GHC.Base.pure PostTokensRequestBodyAccount'Company'AddressKana' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "town"))

-- | Create a new 'PostTokensRequestBodyAccount'Company'AddressKana'' with all required fields.
mkPostTokensRequestBodyAccount'Company'AddressKana' :: PostTokensRequestBodyAccount'Company'AddressKana'
mkPostTokensRequestBodyAccount'Company'AddressKana' =
  PostTokensRequestBodyAccount'Company'AddressKana'
    { postTokensRequestBodyAccount'Company'AddressKana'City = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKana'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKana'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKana'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKana'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKana'State = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKana'Town = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.company.properties.address_kanji@ in the specification.
data PostTokensRequestBodyAccount'Company'AddressKanji' = PostTokensRequestBodyAccount'Company'AddressKanji'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKanji'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKanji'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKanji'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKanji'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKanji'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKanji'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | town
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'AddressKanji'Town :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Company'AddressKanji' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'Town obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'AddressKanji'Town obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Company'AddressKanji' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Company'AddressKanji'" (\obj -> ((((((GHC.Base.pure PostTokensRequestBodyAccount'Company'AddressKanji' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "town"))

-- | Create a new 'PostTokensRequestBodyAccount'Company'AddressKanji'' with all required fields.
mkPostTokensRequestBodyAccount'Company'AddressKanji' :: PostTokensRequestBodyAccount'Company'AddressKanji'
mkPostTokensRequestBodyAccount'Company'AddressKanji' =
  PostTokensRequestBodyAccount'Company'AddressKanji'
    { postTokensRequestBodyAccount'Company'AddressKanji'City = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKanji'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKanji'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKanji'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKanji'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKanji'State = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'AddressKanji'Town = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.company.properties.ownership_declaration@ in the specification.
data PostTokensRequestBodyAccount'Company'OwnershipDeclaration' = PostTokensRequestBodyAccount'Company'OwnershipDeclaration'
  { -- | date
    postTokensRequestBodyAccount'Company'OwnershipDeclaration'Date :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | ip
    postTokensRequestBodyAccount'Company'OwnershipDeclaration'Ip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_agent
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Company'OwnershipDeclaration'UserAgent :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Company'OwnershipDeclaration' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("date" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclaration'Date obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclaration'Ip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_agent" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclaration'UserAgent obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("date" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclaration'Date obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclaration'Ip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_agent" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'OwnershipDeclaration'UserAgent obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Company'OwnershipDeclaration' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Company'OwnershipDeclaration'" (\obj -> ((GHC.Base.pure PostTokensRequestBodyAccount'Company'OwnershipDeclaration' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_agent"))

-- | Create a new 'PostTokensRequestBodyAccount'Company'OwnershipDeclaration'' with all required fields.
mkPostTokensRequestBodyAccount'Company'OwnershipDeclaration' :: PostTokensRequestBodyAccount'Company'OwnershipDeclaration'
mkPostTokensRequestBodyAccount'Company'OwnershipDeclaration' =
  PostTokensRequestBodyAccount'Company'OwnershipDeclaration'
    { postTokensRequestBodyAccount'Company'OwnershipDeclaration'Date = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'OwnershipDeclaration'Ip = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'OwnershipDeclaration'UserAgent = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.company.properties.structure@ in the specification.
data PostTokensRequestBodyAccount'Company'Structure'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostTokensRequestBodyAccount'Company'Structure'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostTokensRequestBodyAccount'Company'Structure'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @""@
    PostTokensRequestBodyAccount'Company'Structure'EnumEmptyString
  | -- | Represents the JSON value @"free_zone_establishment"@
    PostTokensRequestBodyAccount'Company'Structure'EnumFreeZoneEstablishment
  | -- | Represents the JSON value @"free_zone_llc"@
    PostTokensRequestBodyAccount'Company'Structure'EnumFreeZoneLlc
  | -- | Represents the JSON value @"government_instrumentality"@
    PostTokensRequestBodyAccount'Company'Structure'EnumGovernmentInstrumentality
  | -- | Represents the JSON value @"governmental_unit"@
    PostTokensRequestBodyAccount'Company'Structure'EnumGovernmentalUnit
  | -- | Represents the JSON value @"incorporated_non_profit"@
    PostTokensRequestBodyAccount'Company'Structure'EnumIncorporatedNonProfit
  | -- | Represents the JSON value @"limited_liability_partnership"@
    PostTokensRequestBodyAccount'Company'Structure'EnumLimitedLiabilityPartnership
  | -- | Represents the JSON value @"llc"@
    PostTokensRequestBodyAccount'Company'Structure'EnumLlc
  | -- | Represents the JSON value @"multi_member_llc"@
    PostTokensRequestBodyAccount'Company'Structure'EnumMultiMemberLlc
  | -- | Represents the JSON value @"private_company"@
    PostTokensRequestBodyAccount'Company'Structure'EnumPrivateCompany
  | -- | Represents the JSON value @"private_corporation"@
    PostTokensRequestBodyAccount'Company'Structure'EnumPrivateCorporation
  | -- | Represents the JSON value @"private_partnership"@
    PostTokensRequestBodyAccount'Company'Structure'EnumPrivatePartnership
  | -- | Represents the JSON value @"public_company"@
    PostTokensRequestBodyAccount'Company'Structure'EnumPublicCompany
  | -- | Represents the JSON value @"public_corporation"@
    PostTokensRequestBodyAccount'Company'Structure'EnumPublicCorporation
  | -- | Represents the JSON value @"public_partnership"@
    PostTokensRequestBodyAccount'Company'Structure'EnumPublicPartnership
  | -- | Represents the JSON value @"single_member_llc"@
    PostTokensRequestBodyAccount'Company'Structure'EnumSingleMemberLlc
  | -- | Represents the JSON value @"sole_establishment"@
    PostTokensRequestBodyAccount'Company'Structure'EnumSoleEstablishment
  | -- | Represents the JSON value @"sole_proprietorship"@
    PostTokensRequestBodyAccount'Company'Structure'EnumSoleProprietorship
  | -- | Represents the JSON value @"tax_exempt_government_instrumentality"@
    PostTokensRequestBodyAccount'Company'Structure'EnumTaxExemptGovernmentInstrumentality
  | -- | Represents the JSON value @"unincorporated_association"@
    PostTokensRequestBodyAccount'Company'Structure'EnumUnincorporatedAssociation
  | -- | Represents the JSON value @"unincorporated_non_profit"@
    PostTokensRequestBodyAccount'Company'Structure'EnumUnincorporatedNonProfit
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Company'Structure' where
  toJSON (PostTokensRequestBodyAccount'Company'Structure'Other val) = val
  toJSON (PostTokensRequestBodyAccount'Company'Structure'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumEmptyString) = ""
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumFreeZoneEstablishment) = "free_zone_establishment"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumFreeZoneLlc) = "free_zone_llc"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumGovernmentInstrumentality) = "government_instrumentality"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumGovernmentalUnit) = "governmental_unit"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumIncorporatedNonProfit) = "incorporated_non_profit"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumLimitedLiabilityPartnership) = "limited_liability_partnership"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumLlc) = "llc"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumMultiMemberLlc) = "multi_member_llc"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumPrivateCompany) = "private_company"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumPrivateCorporation) = "private_corporation"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumPrivatePartnership) = "private_partnership"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumPublicCompany) = "public_company"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumPublicCorporation) = "public_corporation"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumPublicPartnership) = "public_partnership"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumSingleMemberLlc) = "single_member_llc"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumSoleEstablishment) = "sole_establishment"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumSoleProprietorship) = "sole_proprietorship"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumTaxExemptGovernmentInstrumentality) = "tax_exempt_government_instrumentality"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumUnincorporatedAssociation) = "unincorporated_association"
  toJSON (PostTokensRequestBodyAccount'Company'Structure'EnumUnincorporatedNonProfit) = "unincorporated_non_profit"

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Company'Structure' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "" -> PostTokensRequestBodyAccount'Company'Structure'EnumEmptyString
            | val GHC.Classes.== "free_zone_establishment" -> PostTokensRequestBodyAccount'Company'Structure'EnumFreeZoneEstablishment
            | val GHC.Classes.== "free_zone_llc" -> PostTokensRequestBodyAccount'Company'Structure'EnumFreeZoneLlc
            | val GHC.Classes.== "government_instrumentality" -> PostTokensRequestBodyAccount'Company'Structure'EnumGovernmentInstrumentality
            | val GHC.Classes.== "governmental_unit" -> PostTokensRequestBodyAccount'Company'Structure'EnumGovernmentalUnit
            | val GHC.Classes.== "incorporated_non_profit" -> PostTokensRequestBodyAccount'Company'Structure'EnumIncorporatedNonProfit
            | val GHC.Classes.== "limited_liability_partnership" -> PostTokensRequestBodyAccount'Company'Structure'EnumLimitedLiabilityPartnership
            | val GHC.Classes.== "llc" -> PostTokensRequestBodyAccount'Company'Structure'EnumLlc
            | val GHC.Classes.== "multi_member_llc" -> PostTokensRequestBodyAccount'Company'Structure'EnumMultiMemberLlc
            | val GHC.Classes.== "private_company" -> PostTokensRequestBodyAccount'Company'Structure'EnumPrivateCompany
            | val GHC.Classes.== "private_corporation" -> PostTokensRequestBodyAccount'Company'Structure'EnumPrivateCorporation
            | val GHC.Classes.== "private_partnership" -> PostTokensRequestBodyAccount'Company'Structure'EnumPrivatePartnership
            | val GHC.Classes.== "public_company" -> PostTokensRequestBodyAccount'Company'Structure'EnumPublicCompany
            | val GHC.Classes.== "public_corporation" -> PostTokensRequestBodyAccount'Company'Structure'EnumPublicCorporation
            | val GHC.Classes.== "public_partnership" -> PostTokensRequestBodyAccount'Company'Structure'EnumPublicPartnership
            | val GHC.Classes.== "single_member_llc" -> PostTokensRequestBodyAccount'Company'Structure'EnumSingleMemberLlc
            | val GHC.Classes.== "sole_establishment" -> PostTokensRequestBodyAccount'Company'Structure'EnumSoleEstablishment
            | val GHC.Classes.== "sole_proprietorship" -> PostTokensRequestBodyAccount'Company'Structure'EnumSoleProprietorship
            | val GHC.Classes.== "tax_exempt_government_instrumentality" -> PostTokensRequestBodyAccount'Company'Structure'EnumTaxExemptGovernmentInstrumentality
            | val GHC.Classes.== "unincorporated_association" -> PostTokensRequestBodyAccount'Company'Structure'EnumUnincorporatedAssociation
            | val GHC.Classes.== "unincorporated_non_profit" -> PostTokensRequestBodyAccount'Company'Structure'EnumUnincorporatedNonProfit
            | GHC.Base.otherwise -> PostTokensRequestBodyAccount'Company'Structure'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.company.properties.verification@ in the specification.
data PostTokensRequestBodyAccount'Company'Verification' = PostTokensRequestBodyAccount'Company'Verification'
  { -- | document
    postTokensRequestBodyAccount'Company'Verification'Document :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Company'Verification'Document')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Company'Verification' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Verification'Document obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Verification'Document obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Company'Verification' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Company'Verification'" (\obj -> GHC.Base.pure PostTokensRequestBodyAccount'Company'Verification' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "document"))

-- | Create a new 'PostTokensRequestBodyAccount'Company'Verification'' with all required fields.
mkPostTokensRequestBodyAccount'Company'Verification' :: PostTokensRequestBodyAccount'Company'Verification'
mkPostTokensRequestBodyAccount'Company'Verification' = PostTokensRequestBodyAccount'Company'Verification' {postTokensRequestBodyAccount'Company'Verification'Document = GHC.Maybe.Nothing}

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.company.properties.verification.properties.document@ in the specification.
data PostTokensRequestBodyAccount'Company'Verification'Document' = PostTokensRequestBodyAccount'Company'Verification'Document'
  { -- | back
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyAccount'Company'Verification'Document'Back :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | front
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyAccount'Company'Verification'Document'Front :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Company'Verification'Document' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Verification'Document'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Verification'Document'Front obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Verification'Document'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Company'Verification'Document'Front obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Company'Verification'Document' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Company'Verification'Document'" (\obj -> (GHC.Base.pure PostTokensRequestBodyAccount'Company'Verification'Document' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "front"))

-- | Create a new 'PostTokensRequestBodyAccount'Company'Verification'Document'' with all required fields.
mkPostTokensRequestBodyAccount'Company'Verification'Document' :: PostTokensRequestBodyAccount'Company'Verification'Document'
mkPostTokensRequestBodyAccount'Company'Verification'Document' =
  PostTokensRequestBodyAccount'Company'Verification'Document'
    { postTokensRequestBodyAccount'Company'Verification'Document'Back = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Company'Verification'Document'Front = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual@ in the specification.
data PostTokensRequestBodyAccount'Individual' = PostTokensRequestBodyAccount'Individual'
  { -- | address
    postTokensRequestBodyAccount'Individual'Address :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'Address'),
    -- | address_kana
    postTokensRequestBodyAccount'Individual'AddressKana :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'AddressKana'),
    -- | address_kanji
    postTokensRequestBodyAccount'Individual'AddressKanji :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'AddressKanji'),
    -- | dob
    postTokensRequestBodyAccount'Individual'Dob :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'Dob'Variants),
    -- | email
    postTokensRequestBodyAccount'Individual'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | first_name
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyAccount'Individual'FirstName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | first_name_kana
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'FirstNameKana :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | first_name_kanji
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'FirstNameKanji :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | full_name_aliases
    postTokensRequestBodyAccount'Individual'FullNameAliases :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'FullNameAliases'Variants),
    -- | gender
    postTokensRequestBodyAccount'Individual'Gender :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | id_number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'IdNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | id_number_secondary
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'IdNumberSecondary :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last_name
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyAccount'Individual'LastName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last_name_kana
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'LastNameKana :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last_name_kanji
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'LastNameKanji :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | maiden_name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'MaidenName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | metadata
    postTokensRequestBodyAccount'Individual'Metadata :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'Metadata'Variants),
    -- | phone
    postTokensRequestBodyAccount'Individual'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | political_exposure
    postTokensRequestBodyAccount'Individual'PoliticalExposure :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'PoliticalExposure'),
    -- | registered_address
    postTokensRequestBodyAccount'Individual'RegisteredAddress :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'RegisteredAddress'),
    -- | ssn_last_4
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'SsnLast_4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification
    postTokensRequestBodyAccount'Individual'Verification :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'Verification')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dob" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Dob obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'FirstName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'FirstNameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'FirstNameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("full_name_aliases" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'FullNameAliases obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gender" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Gender obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'IdNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number_secondary" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'IdNumberSecondary obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'LastName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'LastNameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'LastNameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maiden_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'MaidenName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Phone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("political_exposure" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'PoliticalExposure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("registered_address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ssn_last_4" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'SsnLast_4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dob" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Dob obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'FirstName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'FirstNameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'FirstNameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("full_name_aliases" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'FullNameAliases obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gender" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Gender obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'IdNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number_secondary" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'IdNumberSecondary obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'LastName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'LastNameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'LastNameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maiden_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'MaidenName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Phone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("political_exposure" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'PoliticalExposure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("registered_address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ssn_last_4" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'SsnLast_4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Individual'" (\obj -> (((((((((((((((((((((GHC.Base.pure PostTokensRequestBodyAccount'Individual' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dob")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "first_name_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "first_name_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "full_name_aliases")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gender")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id_number_secondary")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_name_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_name_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "maiden_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "political_exposure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "registered_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ssn_last_4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification"))

-- | Create a new 'PostTokensRequestBodyAccount'Individual'' with all required fields.
mkPostTokensRequestBodyAccount'Individual' :: PostTokensRequestBodyAccount'Individual'
mkPostTokensRequestBodyAccount'Individual' =
  PostTokensRequestBodyAccount'Individual'
    { postTokensRequestBodyAccount'Individual'Address = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKana = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKanji = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Dob = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Email = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'FirstName = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'FirstNameKana = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'FirstNameKanji = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'FullNameAliases = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Gender = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'IdNumber = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'IdNumberSecondary = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'LastName = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'LastNameKana = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'LastNameKanji = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'MaidenName = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Metadata = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Phone = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'PoliticalExposure = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'RegisteredAddress = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'SsnLast_4 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Verification = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.address@ in the specification.
data PostTokensRequestBodyAccount'Individual'Address' = PostTokensRequestBodyAccount'Individual'Address'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyAccount'Individual'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyAccount'Individual'Address'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyAccount'Individual'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'State obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Address'State obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Individual'Address'" (\obj -> (((((GHC.Base.pure PostTokensRequestBodyAccount'Individual'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'PostTokensRequestBodyAccount'Individual'Address'' with all required fields.
mkPostTokensRequestBodyAccount'Individual'Address' :: PostTokensRequestBodyAccount'Individual'Address'
mkPostTokensRequestBodyAccount'Individual'Address' =
  PostTokensRequestBodyAccount'Individual'Address'
    { postTokensRequestBodyAccount'Individual'Address'City = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Address'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Address'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Address'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Address'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Address'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.address_kana@ in the specification.
data PostTokensRequestBodyAccount'Individual'AddressKana' = PostTokensRequestBodyAccount'Individual'AddressKana'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKana'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKana'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKana'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKana'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKana'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKana'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | town
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKana'Town :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'AddressKana' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'Town obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKana'Town obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'AddressKana' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Individual'AddressKana'" (\obj -> ((((((GHC.Base.pure PostTokensRequestBodyAccount'Individual'AddressKana' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "town"))

-- | Create a new 'PostTokensRequestBodyAccount'Individual'AddressKana'' with all required fields.
mkPostTokensRequestBodyAccount'Individual'AddressKana' :: PostTokensRequestBodyAccount'Individual'AddressKana'
mkPostTokensRequestBodyAccount'Individual'AddressKana' =
  PostTokensRequestBodyAccount'Individual'AddressKana'
    { postTokensRequestBodyAccount'Individual'AddressKana'City = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKana'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKana'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKana'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKana'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKana'State = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKana'Town = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.address_kanji@ in the specification.
data PostTokensRequestBodyAccount'Individual'AddressKanji' = PostTokensRequestBodyAccount'Individual'AddressKanji'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKanji'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKanji'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKanji'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKanji'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKanji'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKanji'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | town
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'AddressKanji'Town :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'AddressKanji' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'Town obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'AddressKanji'Town obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'AddressKanji' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Individual'AddressKanji'" (\obj -> ((((((GHC.Base.pure PostTokensRequestBodyAccount'Individual'AddressKanji' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "town"))

-- | Create a new 'PostTokensRequestBodyAccount'Individual'AddressKanji'' with all required fields.
mkPostTokensRequestBodyAccount'Individual'AddressKanji' :: PostTokensRequestBodyAccount'Individual'AddressKanji'
mkPostTokensRequestBodyAccount'Individual'AddressKanji' =
  PostTokensRequestBodyAccount'Individual'AddressKanji'
    { postTokensRequestBodyAccount'Individual'AddressKanji'City = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKanji'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKanji'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKanji'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKanji'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKanji'State = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'AddressKanji'Town = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.dob.anyOf@ in the specification.
data PostTokensRequestBodyAccount'Individual'Dob'OneOf1 = PostTokensRequestBodyAccount'Individual'Dob'OneOf1
  { -- | day
    postTokensRequestBodyAccount'Individual'Dob'OneOf1Day :: GHC.Types.Int,
    -- | month
    postTokensRequestBodyAccount'Individual'Dob'OneOf1Month :: GHC.Types.Int,
    -- | year
    postTokensRequestBodyAccount'Individual'Dob'OneOf1Year :: GHC.Types.Int
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'Dob'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["day" Data.Aeson.Types.ToJSON..= postTokensRequestBodyAccount'Individual'Dob'OneOf1Day obj] : ["month" Data.Aeson.Types.ToJSON..= postTokensRequestBodyAccount'Individual'Dob'OneOf1Month obj] : ["year" Data.Aeson.Types.ToJSON..= postTokensRequestBodyAccount'Individual'Dob'OneOf1Year obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["day" Data.Aeson.Types.ToJSON..= postTokensRequestBodyAccount'Individual'Dob'OneOf1Day obj] : ["month" Data.Aeson.Types.ToJSON..= postTokensRequestBodyAccount'Individual'Dob'OneOf1Month obj] : ["year" Data.Aeson.Types.ToJSON..= postTokensRequestBodyAccount'Individual'Dob'OneOf1Year obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'Dob'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Individual'Dob'OneOf1" (\obj -> ((GHC.Base.pure PostTokensRequestBodyAccount'Individual'Dob'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "day")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "year"))

-- | Create a new 'PostTokensRequestBodyAccount'Individual'Dob'OneOf1' with all required fields.
mkPostTokensRequestBodyAccount'Individual'Dob'OneOf1 ::
  -- | 'postTokensRequestBodyAccount'Individual'Dob'OneOf1Day'
  GHC.Types.Int ->
  -- | 'postTokensRequestBodyAccount'Individual'Dob'OneOf1Month'
  GHC.Types.Int ->
  -- | 'postTokensRequestBodyAccount'Individual'Dob'OneOf1Year'
  GHC.Types.Int ->
  PostTokensRequestBodyAccount'Individual'Dob'OneOf1
mkPostTokensRequestBodyAccount'Individual'Dob'OneOf1 postTokensRequestBodyAccount'Individual'Dob'OneOf1Day postTokensRequestBodyAccount'Individual'Dob'OneOf1Month postTokensRequestBodyAccount'Individual'Dob'OneOf1Year =
  PostTokensRequestBodyAccount'Individual'Dob'OneOf1
    { postTokensRequestBodyAccount'Individual'Dob'OneOf1Day = postTokensRequestBodyAccount'Individual'Dob'OneOf1Day,
      postTokensRequestBodyAccount'Individual'Dob'OneOf1Month = postTokensRequestBodyAccount'Individual'Dob'OneOf1Month,
      postTokensRequestBodyAccount'Individual'Dob'OneOf1Year = postTokensRequestBodyAccount'Individual'Dob'OneOf1Year
    }

-- | Defines the oneOf schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.dob.anyOf@ in the specification.
data PostTokensRequestBodyAccount'Individual'Dob'Variants
  = -- | Represents the JSON value @""@
    PostTokensRequestBodyAccount'Individual'Dob'EmptyString
  | PostTokensRequestBodyAccount'Individual'Dob'PostTokensRequestBodyAccount'Individual'Dob'OneOf1 PostTokensRequestBodyAccount'Individual'Dob'OneOf1
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'Dob'Variants where
  toJSON (PostTokensRequestBodyAccount'Individual'Dob'PostTokensRequestBodyAccount'Individual'Dob'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostTokensRequestBodyAccount'Individual'Dob'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'Dob'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostTokensRequestBodyAccount'Individual'Dob'EmptyString
        | GHC.Base.otherwise -> case (PostTokensRequestBodyAccount'Individual'Dob'PostTokensRequestBodyAccount'Individual'Dob'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.full_name_aliases.anyOf@ in the specification.
data PostTokensRequestBodyAccount'Individual'FullNameAliases'Variants
  = -- | Represents the JSON value @""@
    PostTokensRequestBodyAccount'Individual'FullNameAliases'EmptyString
  | PostTokensRequestBodyAccount'Individual'FullNameAliases'ListTText ([Data.Text.Internal.Text])
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'FullNameAliases'Variants where
  toJSON (PostTokensRequestBodyAccount'Individual'FullNameAliases'ListTText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostTokensRequestBodyAccount'Individual'FullNameAliases'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'FullNameAliases'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostTokensRequestBodyAccount'Individual'FullNameAliases'EmptyString
        | GHC.Base.otherwise -> case (PostTokensRequestBodyAccount'Individual'FullNameAliases'ListTText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.metadata.anyOf@ in the specification.
data PostTokensRequestBodyAccount'Individual'Metadata'Variants
  = -- | Represents the JSON value @""@
    PostTokensRequestBodyAccount'Individual'Metadata'EmptyString
  | PostTokensRequestBodyAccount'Individual'Metadata'Object Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'Metadata'Variants where
  toJSON (PostTokensRequestBodyAccount'Individual'Metadata'Object a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostTokensRequestBodyAccount'Individual'Metadata'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'Metadata'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostTokensRequestBodyAccount'Individual'Metadata'EmptyString
        | GHC.Base.otherwise -> case (PostTokensRequestBodyAccount'Individual'Metadata'Object Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.political_exposure@ in the specification.
data PostTokensRequestBodyAccount'Individual'PoliticalExposure'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostTokensRequestBodyAccount'Individual'PoliticalExposure'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostTokensRequestBodyAccount'Individual'PoliticalExposure'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"existing"@
    PostTokensRequestBodyAccount'Individual'PoliticalExposure'EnumExisting
  | -- | Represents the JSON value @"none"@
    PostTokensRequestBodyAccount'Individual'PoliticalExposure'EnumNone
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'PoliticalExposure' where
  toJSON (PostTokensRequestBodyAccount'Individual'PoliticalExposure'Other val) = val
  toJSON (PostTokensRequestBodyAccount'Individual'PoliticalExposure'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostTokensRequestBodyAccount'Individual'PoliticalExposure'EnumExisting) = "existing"
  toJSON (PostTokensRequestBodyAccount'Individual'PoliticalExposure'EnumNone) = "none"

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'PoliticalExposure' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "existing" -> PostTokensRequestBodyAccount'Individual'PoliticalExposure'EnumExisting
            | val GHC.Classes.== "none" -> PostTokensRequestBodyAccount'Individual'PoliticalExposure'EnumNone
            | GHC.Base.otherwise -> PostTokensRequestBodyAccount'Individual'PoliticalExposure'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.registered_address@ in the specification.
data PostTokensRequestBodyAccount'Individual'RegisteredAddress' = PostTokensRequestBodyAccount'Individual'RegisteredAddress'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyAccount'Individual'RegisteredAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'RegisteredAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyAccount'Individual'RegisteredAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyAccount'Individual'RegisteredAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'RegisteredAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyAccount'Individual'RegisteredAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'RegisteredAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'State obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'RegisteredAddress'State obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'RegisteredAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Individual'RegisteredAddress'" (\obj -> (((((GHC.Base.pure PostTokensRequestBodyAccount'Individual'RegisteredAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'PostTokensRequestBodyAccount'Individual'RegisteredAddress'' with all required fields.
mkPostTokensRequestBodyAccount'Individual'RegisteredAddress' :: PostTokensRequestBodyAccount'Individual'RegisteredAddress'
mkPostTokensRequestBodyAccount'Individual'RegisteredAddress' =
  PostTokensRequestBodyAccount'Individual'RegisteredAddress'
    { postTokensRequestBodyAccount'Individual'RegisteredAddress'City = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'RegisteredAddress'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'RegisteredAddress'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'RegisteredAddress'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'RegisteredAddress'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'RegisteredAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.verification@ in the specification.
data PostTokensRequestBodyAccount'Individual'Verification' = PostTokensRequestBodyAccount'Individual'Verification'
  { -- | additional_document
    postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'),
    -- | document
    postTokensRequestBodyAccount'Individual'Verification'Document :: (GHC.Maybe.Maybe PostTokensRequestBodyAccount'Individual'Verification'Document')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'Verification' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("additional_document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'Document obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("additional_document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'Document obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'Verification' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Individual'Verification'" (\obj -> (GHC.Base.pure PostTokensRequestBodyAccount'Individual'Verification' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "additional_document")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "document"))

-- | Create a new 'PostTokensRequestBodyAccount'Individual'Verification'' with all required fields.
mkPostTokensRequestBodyAccount'Individual'Verification' :: PostTokensRequestBodyAccount'Individual'Verification'
mkPostTokensRequestBodyAccount'Individual'Verification' =
  PostTokensRequestBodyAccount'Individual'Verification'
    { postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Verification'Document = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.verification.properties.additional_document@ in the specification.
data PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument' = PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'
  { -- | back
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'Back :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | front
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'Front :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'Front obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'Front obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'" (\obj -> (GHC.Base.pure PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "front"))

-- | Create a new 'PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'' with all required fields.
mkPostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument' :: PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'
mkPostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument' =
  PostTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'
    { postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'Back = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Verification'AdditionalDocument'Front = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.account.properties.individual.properties.verification.properties.document@ in the specification.
data PostTokensRequestBodyAccount'Individual'Verification'Document' = PostTokensRequestBodyAccount'Individual'Verification'Document'
  { -- | back
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyAccount'Individual'Verification'Document'Back :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | front
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyAccount'Individual'Verification'Document'Front :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyAccount'Individual'Verification'Document' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'Document'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'Document'Front obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'Document'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyAccount'Individual'Verification'Document'Front obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyAccount'Individual'Verification'Document' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyAccount'Individual'Verification'Document'" (\obj -> (GHC.Base.pure PostTokensRequestBodyAccount'Individual'Verification'Document' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "front"))

-- | Create a new 'PostTokensRequestBodyAccount'Individual'Verification'Document'' with all required fields.
mkPostTokensRequestBodyAccount'Individual'Verification'Document' :: PostTokensRequestBodyAccount'Individual'Verification'Document'
mkPostTokensRequestBodyAccount'Individual'Verification'Document' =
  PostTokensRequestBodyAccount'Individual'Verification'Document'
    { postTokensRequestBodyAccount'Individual'Verification'Document'Back = GHC.Maybe.Nothing,
      postTokensRequestBodyAccount'Individual'Verification'Document'Front = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_account@ in the specification.
--
-- The bank account this token will represent.
data PostTokensRequestBodyBankAccount' = PostTokensRequestBodyBankAccount'
  { -- | account_holder_name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyBankAccount'AccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | account_holder_type
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyBankAccount'AccountHolderType :: (GHC.Maybe.Maybe PostTokensRequestBodyBankAccount'AccountHolderType'),
    -- | account_number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyBankAccount'AccountNumber :: Data.Text.Internal.Text,
    -- | account_type
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyBankAccount'AccountType :: (GHC.Maybe.Maybe PostTokensRequestBodyBankAccount'AccountType'),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyBankAccount'Country :: Data.Text.Internal.Text,
    -- | currency
    postTokensRequestBodyBankAccount'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | routing_number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyBankAccount'RoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyBankAccount' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'AccountHolderType obj) : ["account_number" Data.Aeson.Types.ToJSON..= postTokensRequestBodyBankAccount'AccountNumber obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'AccountType obj) : ["country" Data.Aeson.Types.ToJSON..= postTokensRequestBodyBankAccount'Country obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'RoutingNumber obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'AccountHolderType obj) : ["account_number" Data.Aeson.Types.ToJSON..= postTokensRequestBodyBankAccount'AccountNumber obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'AccountType obj) : ["country" Data.Aeson.Types.ToJSON..= postTokensRequestBodyBankAccount'Country obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyBankAccount'RoutingNumber obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyBankAccount' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyBankAccount'" (\obj -> ((((((GHC.Base.pure PostTokensRequestBodyBankAccount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing_number"))

-- | Create a new 'PostTokensRequestBodyBankAccount'' with all required fields.
mkPostTokensRequestBodyBankAccount' ::
  -- | 'postTokensRequestBodyBankAccount'AccountNumber'
  Data.Text.Internal.Text ->
  -- | 'postTokensRequestBodyBankAccount'Country'
  Data.Text.Internal.Text ->
  PostTokensRequestBodyBankAccount'
mkPostTokensRequestBodyBankAccount' postTokensRequestBodyBankAccount'AccountNumber postTokensRequestBodyBankAccount'Country =
  PostTokensRequestBodyBankAccount'
    { postTokensRequestBodyBankAccount'AccountHolderName = GHC.Maybe.Nothing,
      postTokensRequestBodyBankAccount'AccountHolderType = GHC.Maybe.Nothing,
      postTokensRequestBodyBankAccount'AccountNumber = postTokensRequestBodyBankAccount'AccountNumber,
      postTokensRequestBodyBankAccount'AccountType = GHC.Maybe.Nothing,
      postTokensRequestBodyBankAccount'Country = postTokensRequestBodyBankAccount'Country,
      postTokensRequestBodyBankAccount'Currency = GHC.Maybe.Nothing,
      postTokensRequestBodyBankAccount'RoutingNumber = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_account.properties.account_holder_type@ in the specification.
data PostTokensRequestBodyBankAccount'AccountHolderType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostTokensRequestBodyBankAccount'AccountHolderType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostTokensRequestBodyBankAccount'AccountHolderType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    PostTokensRequestBodyBankAccount'AccountHolderType'EnumCompany
  | -- | Represents the JSON value @"individual"@
    PostTokensRequestBodyBankAccount'AccountHolderType'EnumIndividual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyBankAccount'AccountHolderType' where
  toJSON (PostTokensRequestBodyBankAccount'AccountHolderType'Other val) = val
  toJSON (PostTokensRequestBodyBankAccount'AccountHolderType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostTokensRequestBodyBankAccount'AccountHolderType'EnumCompany) = "company"
  toJSON (PostTokensRequestBodyBankAccount'AccountHolderType'EnumIndividual) = "individual"

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyBankAccount'AccountHolderType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "company" -> PostTokensRequestBodyBankAccount'AccountHolderType'EnumCompany
            | val GHC.Classes.== "individual" -> PostTokensRequestBodyBankAccount'AccountHolderType'EnumIndividual
            | GHC.Base.otherwise -> PostTokensRequestBodyBankAccount'AccountHolderType'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_account.properties.account_type@ in the specification.
data PostTokensRequestBodyBankAccount'AccountType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostTokensRequestBodyBankAccount'AccountType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostTokensRequestBodyBankAccount'AccountType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"checking"@
    PostTokensRequestBodyBankAccount'AccountType'EnumChecking
  | -- | Represents the JSON value @"futsu"@
    PostTokensRequestBodyBankAccount'AccountType'EnumFutsu
  | -- | Represents the JSON value @"savings"@
    PostTokensRequestBodyBankAccount'AccountType'EnumSavings
  | -- | Represents the JSON value @"toza"@
    PostTokensRequestBodyBankAccount'AccountType'EnumToza
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyBankAccount'AccountType' where
  toJSON (PostTokensRequestBodyBankAccount'AccountType'Other val) = val
  toJSON (PostTokensRequestBodyBankAccount'AccountType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostTokensRequestBodyBankAccount'AccountType'EnumChecking) = "checking"
  toJSON (PostTokensRequestBodyBankAccount'AccountType'EnumFutsu) = "futsu"
  toJSON (PostTokensRequestBodyBankAccount'AccountType'EnumSavings) = "savings"
  toJSON (PostTokensRequestBodyBankAccount'AccountType'EnumToza) = "toza"

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyBankAccount'AccountType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "checking" -> PostTokensRequestBodyBankAccount'AccountType'EnumChecking
            | val GHC.Classes.== "futsu" -> PostTokensRequestBodyBankAccount'AccountType'EnumFutsu
            | val GHC.Classes.== "savings" -> PostTokensRequestBodyBankAccount'AccountType'EnumSavings
            | val GHC.Classes.== "toza" -> PostTokensRequestBodyBankAccount'AccountType'EnumToza
            | GHC.Base.otherwise -> PostTokensRequestBodyBankAccount'AccountType'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.card.anyOf@ in the specification.
data PostTokensRequestBodyCard'OneOf1 = PostTokensRequestBodyCard'OneOf1
  { -- | address_city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1AddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1AddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1AddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1AddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1AddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_zip
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1AddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | currency
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | cvc
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1Cvc :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | exp_month
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1ExpMonth :: Data.Text.Internal.Text,
    -- | exp_year
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1ExpYear :: Data.Text.Internal.Text,
    -- | name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCard'OneOf1Number :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyCard'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1Cvc obj) : ["exp_month" Data.Aeson.Types.ToJSON..= postTokensRequestBodyCard'OneOf1ExpMonth obj] : ["exp_year" Data.Aeson.Types.ToJSON..= postTokensRequestBodyCard'OneOf1ExpYear obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1Name obj) : ["number" Data.Aeson.Types.ToJSON..= postTokensRequestBodyCard'OneOf1Number obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1Cvc obj) : ["exp_month" Data.Aeson.Types.ToJSON..= postTokensRequestBodyCard'OneOf1ExpMonth obj] : ["exp_year" Data.Aeson.Types.ToJSON..= postTokensRequestBodyCard'OneOf1ExpYear obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyCard'OneOf1Name obj) : ["number" Data.Aeson.Types.ToJSON..= postTokensRequestBodyCard'OneOf1Number obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyCard'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyCard'OneOf1" (\obj -> (((((((((((GHC.Base.pure PostTokensRequestBodyCard'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cvc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "number"))

-- | Create a new 'PostTokensRequestBodyCard'OneOf1' with all required fields.
mkPostTokensRequestBodyCard'OneOf1 ::
  -- | 'postTokensRequestBodyCard'OneOf1ExpMonth'
  Data.Text.Internal.Text ->
  -- | 'postTokensRequestBodyCard'OneOf1ExpYear'
  Data.Text.Internal.Text ->
  -- | 'postTokensRequestBodyCard'OneOf1Number'
  Data.Text.Internal.Text ->
  PostTokensRequestBodyCard'OneOf1
mkPostTokensRequestBodyCard'OneOf1 postTokensRequestBodyCard'OneOf1ExpMonth postTokensRequestBodyCard'OneOf1ExpYear postTokensRequestBodyCard'OneOf1Number =
  PostTokensRequestBodyCard'OneOf1
    { postTokensRequestBodyCard'OneOf1AddressCity = GHC.Maybe.Nothing,
      postTokensRequestBodyCard'OneOf1AddressCountry = GHC.Maybe.Nothing,
      postTokensRequestBodyCard'OneOf1AddressLine1 = GHC.Maybe.Nothing,
      postTokensRequestBodyCard'OneOf1AddressLine2 = GHC.Maybe.Nothing,
      postTokensRequestBodyCard'OneOf1AddressState = GHC.Maybe.Nothing,
      postTokensRequestBodyCard'OneOf1AddressZip = GHC.Maybe.Nothing,
      postTokensRequestBodyCard'OneOf1Currency = GHC.Maybe.Nothing,
      postTokensRequestBodyCard'OneOf1Cvc = GHC.Maybe.Nothing,
      postTokensRequestBodyCard'OneOf1ExpMonth = postTokensRequestBodyCard'OneOf1ExpMonth,
      postTokensRequestBodyCard'OneOf1ExpYear = postTokensRequestBodyCard'OneOf1ExpYear,
      postTokensRequestBodyCard'OneOf1Name = GHC.Maybe.Nothing,
      postTokensRequestBodyCard'OneOf1Number = postTokensRequestBodyCard'OneOf1Number
    }

-- | Defines the oneOf schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.card.anyOf@ in the specification.
data PostTokensRequestBodyCard'Variants
  = PostTokensRequestBodyCard'PostTokensRequestBodyCard'OneOf1 PostTokensRequestBodyCard'OneOf1
  | PostTokensRequestBodyCard'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyCard'Variants where
  toJSON (PostTokensRequestBodyCard'PostTokensRequestBodyCard'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostTokensRequestBodyCard'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyCard'Variants where
  parseJSON val = case (PostTokensRequestBodyCard'PostTokensRequestBodyCard'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PostTokensRequestBodyCard'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.cvc_update@ in the specification.
--
-- The updated CVC value this token will represent.
data PostTokensRequestBodyCvcUpdate' = PostTokensRequestBodyCvcUpdate'
  { -- | cvc
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyCvcUpdate'Cvc :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyCvcUpdate' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cvc" Data.Aeson.Types.ToJSON..= postTokensRequestBodyCvcUpdate'Cvc obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cvc" Data.Aeson.Types.ToJSON..= postTokensRequestBodyCvcUpdate'Cvc obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyCvcUpdate' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyCvcUpdate'" (\obj -> GHC.Base.pure PostTokensRequestBodyCvcUpdate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cvc"))

-- | Create a new 'PostTokensRequestBodyCvcUpdate'' with all required fields.
mkPostTokensRequestBodyCvcUpdate' ::
  -- | 'postTokensRequestBodyCvcUpdate'Cvc'
  Data.Text.Internal.Text ->
  PostTokensRequestBodyCvcUpdate'
mkPostTokensRequestBodyCvcUpdate' postTokensRequestBodyCvcUpdate'Cvc = PostTokensRequestBodyCvcUpdate' {postTokensRequestBodyCvcUpdate'Cvc = postTokensRequestBodyCvcUpdate'Cvc}

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person@ in the specification.
--
-- Information for the person this token will represent.
data PostTokensRequestBodyPerson' = PostTokensRequestBodyPerson'
  { -- | address
    postTokensRequestBodyPerson'Address :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Address'),
    -- | address_kana
    postTokensRequestBodyPerson'AddressKana :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'AddressKana'),
    -- | address_kanji
    postTokensRequestBodyPerson'AddressKanji :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'AddressKanji'),
    -- | dob
    postTokensRequestBodyPerson'Dob :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Dob'Variants),
    -- | documents
    postTokensRequestBodyPerson'Documents :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Documents'),
    -- | email
    postTokensRequestBodyPerson'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | first_name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'FirstName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | first_name_kana
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'FirstNameKana :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | first_name_kanji
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'FirstNameKanji :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | full_name_aliases
    postTokensRequestBodyPerson'FullNameAliases :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'FullNameAliases'Variants),
    -- | gender
    postTokensRequestBodyPerson'Gender :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | id_number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'IdNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | id_number_secondary
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'IdNumberSecondary :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last_name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'LastName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last_name_kana
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'LastNameKana :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last_name_kanji
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'LastNameKanji :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | maiden_name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'MaidenName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | metadata
    postTokensRequestBodyPerson'Metadata :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Metadata'Variants),
    -- | nationality
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'Nationality :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone
    postTokensRequestBodyPerson'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | political_exposure
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'PoliticalExposure :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | registered_address
    postTokensRequestBodyPerson'RegisteredAddress :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'RegisteredAddress'),
    -- | relationship
    postTokensRequestBodyPerson'Relationship :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Relationship'),
    -- | ssn_last_4
    postTokensRequestBodyPerson'SsnLast_4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verification
    postTokensRequestBodyPerson'Verification :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Verification')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dob" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Dob obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("documents" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'FirstName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'FirstNameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'FirstNameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("full_name_aliases" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'FullNameAliases obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gender" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Gender obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'IdNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number_secondary" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'IdNumberSecondary obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'LastName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'LastNameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'LastNameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maiden_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'MaidenName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nationality" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Nationality obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Phone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("political_exposure" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'PoliticalExposure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("registered_address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("relationship" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ssn_last_4" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'SsnLast_4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dob" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Dob obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("documents" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Email obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'FirstName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'FirstNameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("first_name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'FirstNameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("full_name_aliases" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'FullNameAliases obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gender" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Gender obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'IdNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number_secondary" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'IdNumberSecondary obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'LastName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name_kana" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'LastNameKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_name_kanji" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'LastNameKanji obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maiden_name" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'MaidenName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nationality" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Nationality obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Phone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("political_exposure" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'PoliticalExposure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("registered_address" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("relationship" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ssn_last_4" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'SsnLast_4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'" (\obj -> ((((((((((((((((((((((((GHC.Base.pure PostTokensRequestBodyPerson' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dob")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "documents")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "first_name_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "first_name_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "full_name_aliases")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gender")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id_number_secondary")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_name_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_name_kanji")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "maiden_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "nationality")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "political_exposure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "registered_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "relationship")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ssn_last_4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification"))

-- | Create a new 'PostTokensRequestBodyPerson'' with all required fields.
mkPostTokensRequestBodyPerson' :: PostTokensRequestBodyPerson'
mkPostTokensRequestBodyPerson' =
  PostTokensRequestBodyPerson'
    { postTokensRequestBodyPerson'Address = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKana = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKanji = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Dob = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Documents = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Email = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'FirstName = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'FirstNameKana = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'FirstNameKanji = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'FullNameAliases = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Gender = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'IdNumber = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'IdNumberSecondary = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'LastName = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'LastNameKana = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'LastNameKanji = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'MaidenName = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Metadata = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Nationality = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Phone = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'PoliticalExposure = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'RegisteredAddress = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Relationship = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'SsnLast_4 = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Verification = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.address@ in the specification.
data PostTokensRequestBodyPerson'Address' = PostTokensRequestBodyPerson'Address'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyPerson'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyPerson'Address'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyPerson'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'State obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Address'State obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Address'" (\obj -> (((((GHC.Base.pure PostTokensRequestBodyPerson'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'PostTokensRequestBodyPerson'Address'' with all required fields.
mkPostTokensRequestBodyPerson'Address' :: PostTokensRequestBodyPerson'Address'
mkPostTokensRequestBodyPerson'Address' =
  PostTokensRequestBodyPerson'Address'
    { postTokensRequestBodyPerson'Address'City = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Address'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Address'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Address'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Address'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Address'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.address_kana@ in the specification.
data PostTokensRequestBodyPerson'AddressKana' = PostTokensRequestBodyPerson'AddressKana'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKana'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKana'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKana'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKana'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKana'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKana'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | town
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKana'Town :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'AddressKana' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'Town obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKana'Town obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'AddressKana' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'AddressKana'" (\obj -> ((((((GHC.Base.pure PostTokensRequestBodyPerson'AddressKana' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "town"))

-- | Create a new 'PostTokensRequestBodyPerson'AddressKana'' with all required fields.
mkPostTokensRequestBodyPerson'AddressKana' :: PostTokensRequestBodyPerson'AddressKana'
mkPostTokensRequestBodyPerson'AddressKana' =
  PostTokensRequestBodyPerson'AddressKana'
    { postTokensRequestBodyPerson'AddressKana'City = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKana'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKana'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKana'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKana'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKana'State = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKana'Town = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.address_kanji@ in the specification.
data PostTokensRequestBodyPerson'AddressKanji' = PostTokensRequestBodyPerson'AddressKanji'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKanji'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKanji'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKanji'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKanji'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKanji'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKanji'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | town
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'AddressKanji'Town :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'AddressKanji' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'Town obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'State obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("town" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'AddressKanji'Town obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'AddressKanji' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'AddressKanji'" (\obj -> ((((((GHC.Base.pure PostTokensRequestBodyPerson'AddressKanji' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "town"))

-- | Create a new 'PostTokensRequestBodyPerson'AddressKanji'' with all required fields.
mkPostTokensRequestBodyPerson'AddressKanji' :: PostTokensRequestBodyPerson'AddressKanji'
mkPostTokensRequestBodyPerson'AddressKanji' =
  PostTokensRequestBodyPerson'AddressKanji'
    { postTokensRequestBodyPerson'AddressKanji'City = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKanji'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKanji'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKanji'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKanji'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKanji'State = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'AddressKanji'Town = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.dob.anyOf@ in the specification.
data PostTokensRequestBodyPerson'Dob'OneOf1 = PostTokensRequestBodyPerson'Dob'OneOf1
  { -- | day
    postTokensRequestBodyPerson'Dob'OneOf1Day :: GHC.Types.Int,
    -- | month
    postTokensRequestBodyPerson'Dob'OneOf1Month :: GHC.Types.Int,
    -- | year
    postTokensRequestBodyPerson'Dob'OneOf1Year :: GHC.Types.Int
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Dob'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["day" Data.Aeson.Types.ToJSON..= postTokensRequestBodyPerson'Dob'OneOf1Day obj] : ["month" Data.Aeson.Types.ToJSON..= postTokensRequestBodyPerson'Dob'OneOf1Month obj] : ["year" Data.Aeson.Types.ToJSON..= postTokensRequestBodyPerson'Dob'OneOf1Year obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["day" Data.Aeson.Types.ToJSON..= postTokensRequestBodyPerson'Dob'OneOf1Day obj] : ["month" Data.Aeson.Types.ToJSON..= postTokensRequestBodyPerson'Dob'OneOf1Month obj] : ["year" Data.Aeson.Types.ToJSON..= postTokensRequestBodyPerson'Dob'OneOf1Year obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Dob'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Dob'OneOf1" (\obj -> ((GHC.Base.pure PostTokensRequestBodyPerson'Dob'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "day")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "year"))

-- | Create a new 'PostTokensRequestBodyPerson'Dob'OneOf1' with all required fields.
mkPostTokensRequestBodyPerson'Dob'OneOf1 ::
  -- | 'postTokensRequestBodyPerson'Dob'OneOf1Day'
  GHC.Types.Int ->
  -- | 'postTokensRequestBodyPerson'Dob'OneOf1Month'
  GHC.Types.Int ->
  -- | 'postTokensRequestBodyPerson'Dob'OneOf1Year'
  GHC.Types.Int ->
  PostTokensRequestBodyPerson'Dob'OneOf1
mkPostTokensRequestBodyPerson'Dob'OneOf1 postTokensRequestBodyPerson'Dob'OneOf1Day postTokensRequestBodyPerson'Dob'OneOf1Month postTokensRequestBodyPerson'Dob'OneOf1Year =
  PostTokensRequestBodyPerson'Dob'OneOf1
    { postTokensRequestBodyPerson'Dob'OneOf1Day = postTokensRequestBodyPerson'Dob'OneOf1Day,
      postTokensRequestBodyPerson'Dob'OneOf1Month = postTokensRequestBodyPerson'Dob'OneOf1Month,
      postTokensRequestBodyPerson'Dob'OneOf1Year = postTokensRequestBodyPerson'Dob'OneOf1Year
    }

-- | Defines the oneOf schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.dob.anyOf@ in the specification.
data PostTokensRequestBodyPerson'Dob'Variants
  = -- | Represents the JSON value @""@
    PostTokensRequestBodyPerson'Dob'EmptyString
  | PostTokensRequestBodyPerson'Dob'PostTokensRequestBodyPerson'Dob'OneOf1 PostTokensRequestBodyPerson'Dob'OneOf1
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Dob'Variants where
  toJSON (PostTokensRequestBodyPerson'Dob'PostTokensRequestBodyPerson'Dob'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostTokensRequestBodyPerson'Dob'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Dob'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostTokensRequestBodyPerson'Dob'EmptyString
        | GHC.Base.otherwise -> case (PostTokensRequestBodyPerson'Dob'PostTokensRequestBodyPerson'Dob'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.documents@ in the specification.
data PostTokensRequestBodyPerson'Documents' = PostTokensRequestBodyPerson'Documents'
  { -- | company_authorization
    postTokensRequestBodyPerson'Documents'CompanyAuthorization :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Documents'CompanyAuthorization'),
    -- | passport
    postTokensRequestBodyPerson'Documents'Passport :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Documents'Passport'),
    -- | visa
    postTokensRequestBodyPerson'Documents'Visa :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Documents'Visa')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Documents' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_authorization" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'CompanyAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passport" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'Passport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("visa" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'Visa obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("company_authorization" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'CompanyAuthorization obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("passport" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'Passport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("visa" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'Visa obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Documents' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Documents'" (\obj -> ((GHC.Base.pure PostTokensRequestBodyPerson'Documents' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "company_authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "passport")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "visa"))

-- | Create a new 'PostTokensRequestBodyPerson'Documents'' with all required fields.
mkPostTokensRequestBodyPerson'Documents' :: PostTokensRequestBodyPerson'Documents'
mkPostTokensRequestBodyPerson'Documents' =
  PostTokensRequestBodyPerson'Documents'
    { postTokensRequestBodyPerson'Documents'CompanyAuthorization = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Documents'Passport = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Documents'Visa = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.documents.properties.company_authorization@ in the specification.
data PostTokensRequestBodyPerson'Documents'CompanyAuthorization' = PostTokensRequestBodyPerson'Documents'CompanyAuthorization'
  { -- | files
    postTokensRequestBodyPerson'Documents'CompanyAuthorization'Files :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Documents'CompanyAuthorization' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("files" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'CompanyAuthorization'Files obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("files" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'CompanyAuthorization'Files obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Documents'CompanyAuthorization' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Documents'CompanyAuthorization'" (\obj -> GHC.Base.pure PostTokensRequestBodyPerson'Documents'CompanyAuthorization' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "files"))

-- | Create a new 'PostTokensRequestBodyPerson'Documents'CompanyAuthorization'' with all required fields.
mkPostTokensRequestBodyPerson'Documents'CompanyAuthorization' :: PostTokensRequestBodyPerson'Documents'CompanyAuthorization'
mkPostTokensRequestBodyPerson'Documents'CompanyAuthorization' = PostTokensRequestBodyPerson'Documents'CompanyAuthorization' {postTokensRequestBodyPerson'Documents'CompanyAuthorization'Files = GHC.Maybe.Nothing}

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.documents.properties.passport@ in the specification.
data PostTokensRequestBodyPerson'Documents'Passport' = PostTokensRequestBodyPerson'Documents'Passport'
  { -- | files
    postTokensRequestBodyPerson'Documents'Passport'Files :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Documents'Passport' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("files" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'Passport'Files obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("files" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'Passport'Files obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Documents'Passport' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Documents'Passport'" (\obj -> GHC.Base.pure PostTokensRequestBodyPerson'Documents'Passport' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "files"))

-- | Create a new 'PostTokensRequestBodyPerson'Documents'Passport'' with all required fields.
mkPostTokensRequestBodyPerson'Documents'Passport' :: PostTokensRequestBodyPerson'Documents'Passport'
mkPostTokensRequestBodyPerson'Documents'Passport' = PostTokensRequestBodyPerson'Documents'Passport' {postTokensRequestBodyPerson'Documents'Passport'Files = GHC.Maybe.Nothing}

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.documents.properties.visa@ in the specification.
data PostTokensRequestBodyPerson'Documents'Visa' = PostTokensRequestBodyPerson'Documents'Visa'
  { -- | files
    postTokensRequestBodyPerson'Documents'Visa'Files :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Documents'Visa' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("files" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'Visa'Files obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("files" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Documents'Visa'Files obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Documents'Visa' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Documents'Visa'" (\obj -> GHC.Base.pure PostTokensRequestBodyPerson'Documents'Visa' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "files"))

-- | Create a new 'PostTokensRequestBodyPerson'Documents'Visa'' with all required fields.
mkPostTokensRequestBodyPerson'Documents'Visa' :: PostTokensRequestBodyPerson'Documents'Visa'
mkPostTokensRequestBodyPerson'Documents'Visa' = PostTokensRequestBodyPerson'Documents'Visa' {postTokensRequestBodyPerson'Documents'Visa'Files = GHC.Maybe.Nothing}

-- | Defines the oneOf schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.full_name_aliases.anyOf@ in the specification.
data PostTokensRequestBodyPerson'FullNameAliases'Variants
  = -- | Represents the JSON value @""@
    PostTokensRequestBodyPerson'FullNameAliases'EmptyString
  | PostTokensRequestBodyPerson'FullNameAliases'ListTText ([Data.Text.Internal.Text])
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'FullNameAliases'Variants where
  toJSON (PostTokensRequestBodyPerson'FullNameAliases'ListTText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostTokensRequestBodyPerson'FullNameAliases'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'FullNameAliases'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostTokensRequestBodyPerson'FullNameAliases'EmptyString
        | GHC.Base.otherwise -> case (PostTokensRequestBodyPerson'FullNameAliases'ListTText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.metadata.anyOf@ in the specification.
data PostTokensRequestBodyPerson'Metadata'Variants
  = -- | Represents the JSON value @""@
    PostTokensRequestBodyPerson'Metadata'EmptyString
  | PostTokensRequestBodyPerson'Metadata'Object Data.Aeson.Types.Internal.Object
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Metadata'Variants where
  toJSON (PostTokensRequestBodyPerson'Metadata'Object a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostTokensRequestBodyPerson'Metadata'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Metadata'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostTokensRequestBodyPerson'Metadata'EmptyString
        | GHC.Base.otherwise -> case (PostTokensRequestBodyPerson'Metadata'Object Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.registered_address@ in the specification.
data PostTokensRequestBodyPerson'RegisteredAddress' = PostTokensRequestBodyPerson'RegisteredAddress'
  { -- | city
    --
    -- Constraints:
    --
    -- * Maximum length of 100
    postTokensRequestBodyPerson'RegisteredAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'RegisteredAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyPerson'RegisteredAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2
    --
    -- Constraints:
    --
    -- * Maximum length of 200
    postTokensRequestBodyPerson'RegisteredAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'RegisteredAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'RegisteredAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'RegisteredAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'State obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'City obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'Line1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'Line2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'PostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'RegisteredAddress'State obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'RegisteredAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'RegisteredAddress'" (\obj -> (((((GHC.Base.pure PostTokensRequestBodyPerson'RegisteredAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'PostTokensRequestBodyPerson'RegisteredAddress'' with all required fields.
mkPostTokensRequestBodyPerson'RegisteredAddress' :: PostTokensRequestBodyPerson'RegisteredAddress'
mkPostTokensRequestBodyPerson'RegisteredAddress' =
  PostTokensRequestBodyPerson'RegisteredAddress'
    { postTokensRequestBodyPerson'RegisteredAddress'City = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'RegisteredAddress'Country = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'RegisteredAddress'Line1 = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'RegisteredAddress'Line2 = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'RegisteredAddress'PostalCode = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'RegisteredAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.relationship@ in the specification.
data PostTokensRequestBodyPerson'Relationship' = PostTokensRequestBodyPerson'Relationship'
  { -- | director
    postTokensRequestBodyPerson'Relationship'Director :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | executive
    postTokensRequestBodyPerson'Relationship'Executive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | owner
    postTokensRequestBodyPerson'Relationship'Owner :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | percent_ownership
    postTokensRequestBodyPerson'Relationship'PercentOwnership :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Relationship'PercentOwnership'Variants),
    -- | representative
    postTokensRequestBodyPerson'Relationship'Representative :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | title
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPerson'Relationship'Title :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Relationship' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("director" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Director obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("executive" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Executive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percent_ownership" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'PercentOwnership obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("representative" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Representative obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("title" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Title obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("director" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Director obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("executive" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Executive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percent_ownership" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'PercentOwnership obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("representative" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Representative obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("title" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Relationship'Title obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Relationship' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Relationship'" (\obj -> (((((GHC.Base.pure PostTokensRequestBodyPerson'Relationship' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "director")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "executive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "percent_ownership")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "representative")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "title"))

-- | Create a new 'PostTokensRequestBodyPerson'Relationship'' with all required fields.
mkPostTokensRequestBodyPerson'Relationship' :: PostTokensRequestBodyPerson'Relationship'
mkPostTokensRequestBodyPerson'Relationship' =
  PostTokensRequestBodyPerson'Relationship'
    { postTokensRequestBodyPerson'Relationship'Director = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Relationship'Executive = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Relationship'Owner = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Relationship'PercentOwnership = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Relationship'Representative = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Relationship'Title = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.relationship.properties.percent_ownership.anyOf@ in the specification.
data PostTokensRequestBodyPerson'Relationship'PercentOwnership'Variants
  = -- | Represents the JSON value @""@
    PostTokensRequestBodyPerson'Relationship'PercentOwnership'EmptyString
  | PostTokensRequestBodyPerson'Relationship'PercentOwnership'Double GHC.Types.Double
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Relationship'PercentOwnership'Variants where
  toJSON (PostTokensRequestBodyPerson'Relationship'PercentOwnership'Double a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PostTokensRequestBodyPerson'Relationship'PercentOwnership'EmptyString) = ""

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Relationship'PercentOwnership'Variants where
  parseJSON val =
    if
        | val GHC.Classes.== "" -> GHC.Base.pure PostTokensRequestBodyPerson'Relationship'PercentOwnership'EmptyString
        | GHC.Base.otherwise -> case (PostTokensRequestBodyPerson'Relationship'PercentOwnership'Double Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
          Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.verification@ in the specification.
data PostTokensRequestBodyPerson'Verification' = PostTokensRequestBodyPerson'Verification'
  { -- | additional_document
    postTokensRequestBodyPerson'Verification'AdditionalDocument :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Verification'AdditionalDocument'),
    -- | document
    postTokensRequestBodyPerson'Verification'Document :: (GHC.Maybe.Maybe PostTokensRequestBodyPerson'Verification'Document')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Verification' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("additional_document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'AdditionalDocument obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'Document obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("additional_document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'AdditionalDocument obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("document" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'Document obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Verification' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Verification'" (\obj -> (GHC.Base.pure PostTokensRequestBodyPerson'Verification' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "additional_document")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "document"))

-- | Create a new 'PostTokensRequestBodyPerson'Verification'' with all required fields.
mkPostTokensRequestBodyPerson'Verification' :: PostTokensRequestBodyPerson'Verification'
mkPostTokensRequestBodyPerson'Verification' =
  PostTokensRequestBodyPerson'Verification'
    { postTokensRequestBodyPerson'Verification'AdditionalDocument = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Verification'Document = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.verification.properties.additional_document@ in the specification.
data PostTokensRequestBodyPerson'Verification'AdditionalDocument' = PostTokensRequestBodyPerson'Verification'AdditionalDocument'
  { -- | back
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyPerson'Verification'AdditionalDocument'Back :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | front
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyPerson'Verification'AdditionalDocument'Front :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Verification'AdditionalDocument' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'AdditionalDocument'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'AdditionalDocument'Front obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'AdditionalDocument'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'AdditionalDocument'Front obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Verification'AdditionalDocument' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Verification'AdditionalDocument'" (\obj -> (GHC.Base.pure PostTokensRequestBodyPerson'Verification'AdditionalDocument' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "front"))

-- | Create a new 'PostTokensRequestBodyPerson'Verification'AdditionalDocument'' with all required fields.
mkPostTokensRequestBodyPerson'Verification'AdditionalDocument' :: PostTokensRequestBodyPerson'Verification'AdditionalDocument'
mkPostTokensRequestBodyPerson'Verification'AdditionalDocument' =
  PostTokensRequestBodyPerson'Verification'AdditionalDocument'
    { postTokensRequestBodyPerson'Verification'AdditionalDocument'Back = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Verification'AdditionalDocument'Front = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.person.properties.verification.properties.document@ in the specification.
data PostTokensRequestBodyPerson'Verification'Document' = PostTokensRequestBodyPerson'Verification'Document'
  { -- | back
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyPerson'Verification'Document'Back :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | front
    --
    -- Constraints:
    --
    -- * Maximum length of 500
    postTokensRequestBodyPerson'Verification'Document'Front :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPerson'Verification'Document' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'Document'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'Document'Front obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("back" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'Document'Back obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("front" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPerson'Verification'Document'Front obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPerson'Verification'Document' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPerson'Verification'Document'" (\obj -> (GHC.Base.pure PostTokensRequestBodyPerson'Verification'Document' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "back")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "front"))

-- | Create a new 'PostTokensRequestBodyPerson'Verification'Document'' with all required fields.
mkPostTokensRequestBodyPerson'Verification'Document' :: PostTokensRequestBodyPerson'Verification'Document'
mkPostTokensRequestBodyPerson'Verification'Document' =
  PostTokensRequestBodyPerson'Verification'Document'
    { postTokensRequestBodyPerson'Verification'Document'Back = GHC.Maybe.Nothing,
      postTokensRequestBodyPerson'Verification'Document'Front = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/tokens.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.pii@ in the specification.
--
-- The PII this token will represent.
data PostTokensRequestBodyPii' = PostTokensRequestBodyPii'
  { -- | id_number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postTokensRequestBodyPii'IdNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostTokensRequestBodyPii' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPii'IdNumber obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id_number" Data.Aeson.Types.ToJSON..=)) (postTokensRequestBodyPii'IdNumber obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostTokensRequestBodyPii' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTokensRequestBodyPii'" (\obj -> GHC.Base.pure PostTokensRequestBodyPii' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id_number"))

-- | Create a new 'PostTokensRequestBodyPii'' with all required fields.
mkPostTokensRequestBodyPii' :: PostTokensRequestBodyPii'
mkPostTokensRequestBodyPii' = PostTokensRequestBodyPii' {postTokensRequestBodyPii'IdNumber = GHC.Maybe.Nothing}

-- | Represents a response of the operation 'postTokens'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTokensResponseError' is used.
data PostTokensResponse
  = -- | Means either no matching case available or a parse error
    PostTokensResponseError GHC.Base.String
  | -- | Successful response.
    PostTokensResponse200 Token
  | -- | Error response.
    PostTokensResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
