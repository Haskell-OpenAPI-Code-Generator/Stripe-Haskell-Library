-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postQuotes
module StripeAPI.Operations.PostQuotes where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/quotes
-- 
-- \<p>A quote models prices and services for a customer. Default options for \<code>header\<\/code>, \<code>description\<\/code>, \<code>footer\<\/code>, and \<code>expires_at\<\/code> can be set in the dashboard via the \<a href=\"https:\/\/dashboard.stripe.com\/settings\/billing\/quote\">quote template\<\/a>.\<\/p>
postQuotes :: forall m . StripeAPI.Common.MonadHTTP m => GHC.Maybe.Maybe PostQuotesRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostQuotesResponse) -- ^ Monadic computation which returns the result of the operation
postQuotes body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostQuotesResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostQuotesResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                 Quote)
                                                                                                                                                       | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostQuotesResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                   Error)
                                                                                                                                                       | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/quotes") GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostQuotesRequestBody = PostQuotesRequestBody {
  -- | application_fee_amount: The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner\'s Stripe account. There cannot be any line items with recurring prices when using this field.
  postQuotesRequestBodyApplicationFeeAmount :: (GHC.Maybe.Maybe PostQuotesRequestBodyApplicationFeeAmount'Variants)
  -- | application_fee_percent: A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner\'s Stripe account. There must be at least 1 line item with a recurring price to use this field.
  , postQuotesRequestBodyApplicationFeePercent :: (GHC.Maybe.Maybe PostQuotesRequestBodyApplicationFeePercent'Variants)
  -- | automatic_tax: Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
  , postQuotesRequestBodyAutomaticTax :: (GHC.Maybe.Maybe PostQuotesRequestBodyAutomaticTax')
  -- | collection_method: Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to \`charge_automatically\`.
  , postQuotesRequestBodyCollectionMethod :: (GHC.Maybe.Maybe PostQuotesRequestBodyCollectionMethod')
  -- | customer: The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postQuotesRequestBodyCustomer :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | default_tax_rates: The tax rates that will apply to any line item that does not have \`tax_rates\` set.
  , postQuotesRequestBodyDefaultTaxRates :: (GHC.Maybe.Maybe PostQuotesRequestBodyDefaultTaxRates'Variants)
  -- | description: A description that will be displayed on the quote PDF. If no value is passed, the default description configured in your [quote template settings](https:\/\/dashboard.stripe.com\/settings\/billing\/quote) will be used.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 500
  , postQuotesRequestBodyDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | discounts: The discounts applied to the quote. You can only set up to one discount.
  , postQuotesRequestBodyDiscounts :: (GHC.Maybe.Maybe PostQuotesRequestBodyDiscounts'Variants)
  -- | expand: Specifies which fields in the response should be expanded.
  , postQuotesRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | expires_at: A future timestamp on which the quote will be canceled if in \`open\` or \`draft\` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https:\/\/dashboard.stripe.com\/settings\/billing\/quote) will be used.
  , postQuotesRequestBodyExpiresAt :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | footer: A footer that will be displayed on the quote PDF. If no value is passed, the default footer configured in your [quote template settings](https:\/\/dashboard.stripe.com\/settings\/billing\/quote) will be used.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 500
  , postQuotesRequestBodyFooter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | from_quote: Clone an existing quote. The new quote will be created in \`status=draft\`. When using this parameter, you cannot specify any other parameters except for \`expires_at\`.
  , postQuotesRequestBodyFromQuote :: (GHC.Maybe.Maybe PostQuotesRequestBodyFromQuote')
  -- | header: A header that will be displayed on the quote PDF. If no value is passed, the default header configured in your [quote template settings](https:\/\/dashboard.stripe.com\/settings\/billing\/quote) will be used.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 50
  , postQuotesRequestBodyHeader :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | invoice_settings: All invoices will be billed using the specified settings.
  , postQuotesRequestBodyInvoiceSettings :: (GHC.Maybe.Maybe PostQuotesRequestBodyInvoiceSettings')
  -- | line_items: A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
  , postQuotesRequestBodyLineItems :: (GHC.Maybe.Maybe ([PostQuotesRequestBodyLineItems']))
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
  , postQuotesRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | on_behalf_of: The account on behalf of which to charge.
  , postQuotesRequestBodyOnBehalfOf :: (GHC.Maybe.Maybe PostQuotesRequestBodyOnBehalfOf'Variants)
  -- | subscription_data: When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if \`subscription_data[effective_date]\` is present and in the future, otherwise a subscription is created.
  , postQuotesRequestBodySubscriptionData :: (GHC.Maybe.Maybe PostQuotesRequestBodySubscriptionData')
  -- | test_clock: ID of the test clock to attach to the quote.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postQuotesRequestBodyTestClock :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | transfer_data: The data with which to automatically create a Transfer for each of the invoices.
  , postQuotesRequestBodyTransferData :: (GHC.Maybe.Maybe PostQuotesRequestBodyTransferData'Variants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_percent" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyApplicationFeePercent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("automatic_tax" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyAutomaticTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyCollectionMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_tax_rates" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDefaultTaxRates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounts" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDiscounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyFooter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from_quote" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyFromQuote obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyHeader obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_settings" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyInvoiceSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_data" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodySubscriptionData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("test_clock" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyTestClock obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyTransferData obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_percent" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyApplicationFeePercent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("automatic_tax" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyAutomaticTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("collection_method" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyCollectionMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_tax_rates" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDefaultTaxRates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounts" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDiscounts obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyExpiresAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyFooter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from_quote" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyFromQuote obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyHeader obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_settings" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyInvoiceSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_data" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodySubscriptionData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("test_clock" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyTestClock obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyTransferData obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBody" (\obj -> (((((((((((((((((((GHC.Base.pure PostQuotesRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_fee_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "automatic_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "discounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "footer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "from_quote")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "header")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invoice_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subscription_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "test_clock")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfer_data"))
-- | Create a new 'PostQuotesRequestBody' with all required fields.
mkPostQuotesRequestBody :: PostQuotesRequestBody
mkPostQuotesRequestBody = PostQuotesRequestBody{postQuotesRequestBodyApplicationFeeAmount = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyApplicationFeePercent = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyAutomaticTax = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyCollectionMethod = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyCustomer = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyDefaultTaxRates = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyDescription = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyDiscounts = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyExpand = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyExpiresAt = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyFooter = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyFromQuote = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyHeader = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyInvoiceSettings = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyLineItems = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyMetadata = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyOnBehalfOf = GHC.Maybe.Nothing,
                                                postQuotesRequestBodySubscriptionData = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyTestClock = GHC.Maybe.Nothing,
                                                postQuotesRequestBodyTransferData = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.application_fee_amount.anyOf@ in the specification.
-- 
-- The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner\'s Stripe account. There cannot be any line items with recurring prices when using this field.
data PostQuotesRequestBodyApplicationFeeAmount'Variants =
   PostQuotesRequestBodyApplicationFeeAmount'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesRequestBodyApplicationFeeAmount'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyApplicationFeeAmount'Variants
    where toJSON (PostQuotesRequestBodyApplicationFeeAmount'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesRequestBodyApplicationFeeAmount'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyApplicationFeeAmount'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesRequestBodyApplicationFeeAmount'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesRequestBodyApplicationFeeAmount'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.application_fee_percent.anyOf@ in the specification.
-- 
-- A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner\'s Stripe account. There must be at least 1 line item with a recurring price to use this field.
data PostQuotesRequestBodyApplicationFeePercent'Variants =
   PostQuotesRequestBodyApplicationFeePercent'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesRequestBodyApplicationFeePercent'Double GHC.Types.Double
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyApplicationFeePercent'Variants
    where toJSON (PostQuotesRequestBodyApplicationFeePercent'Double a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesRequestBodyApplicationFeePercent'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyApplicationFeePercent'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesRequestBodyApplicationFeePercent'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesRequestBodyApplicationFeePercent'Double Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.automatic_tax@ in the specification.
-- 
-- Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
data PostQuotesRequestBodyAutomaticTax' = PostQuotesRequestBodyAutomaticTax' {
  -- | enabled
  postQuotesRequestBodyAutomaticTax'Enabled :: GHC.Types.Bool
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyAutomaticTax'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyAutomaticTax'Enabled obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["enabled" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyAutomaticTax'Enabled obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyAutomaticTax'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBodyAutomaticTax'" (\obj -> GHC.Base.pure PostQuotesRequestBodyAutomaticTax' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled"))
-- | Create a new 'PostQuotesRequestBodyAutomaticTax'' with all required fields.
mkPostQuotesRequestBodyAutomaticTax' :: GHC.Types.Bool -- ^ 'postQuotesRequestBodyAutomaticTax'Enabled'
  -> PostQuotesRequestBodyAutomaticTax'
mkPostQuotesRequestBodyAutomaticTax' postQuotesRequestBodyAutomaticTax'Enabled = PostQuotesRequestBodyAutomaticTax'{postQuotesRequestBodyAutomaticTax'Enabled = postQuotesRequestBodyAutomaticTax'Enabled}
-- | Defines the enum schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.collection_method@ in the specification.
-- 
-- Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to \`charge_automatically\`.
data PostQuotesRequestBodyCollectionMethod' =
   PostQuotesRequestBodyCollectionMethod'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostQuotesRequestBodyCollectionMethod'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostQuotesRequestBodyCollectionMethod'EnumChargeAutomatically -- ^ Represents the JSON value @"charge_automatically"@
  | PostQuotesRequestBodyCollectionMethod'EnumSendInvoice -- ^ Represents the JSON value @"send_invoice"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyCollectionMethod'
    where toJSON (PostQuotesRequestBodyCollectionMethod'Other val) = val
          toJSON (PostQuotesRequestBodyCollectionMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostQuotesRequestBodyCollectionMethod'EnumChargeAutomatically) = "charge_automatically"
          toJSON (PostQuotesRequestBodyCollectionMethod'EnumSendInvoice) = "send_invoice"
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyCollectionMethod'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "charge_automatically" -> PostQuotesRequestBodyCollectionMethod'EnumChargeAutomatically
                                            | val GHC.Classes.== "send_invoice" -> PostQuotesRequestBodyCollectionMethod'EnumSendInvoice
                                            | GHC.Base.otherwise -> PostQuotesRequestBodyCollectionMethod'Other val)
-- | Defines the oneOf schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.default_tax_rates.anyOf@ in the specification.
-- 
-- The tax rates that will apply to any line item that does not have \`tax_rates\` set.
data PostQuotesRequestBodyDefaultTaxRates'Variants =
   PostQuotesRequestBodyDefaultTaxRates'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesRequestBodyDefaultTaxRates'ListTText ([Data.Text.Internal.Text])
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyDefaultTaxRates'Variants
    where toJSON (PostQuotesRequestBodyDefaultTaxRates'ListTText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesRequestBodyDefaultTaxRates'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyDefaultTaxRates'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesRequestBodyDefaultTaxRates'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesRequestBodyDefaultTaxRates'ListTText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.discounts.anyOf.items@ in the specification.
-- 
-- 
data PostQuotesRequestBodyDiscounts'OneOf1 = PostQuotesRequestBodyDiscounts'OneOf1 {
  -- | coupon
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postQuotesRequestBodyDiscounts'OneOf1Coupon :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | discount
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postQuotesRequestBodyDiscounts'OneOf1Discount :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyDiscounts'OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDiscounts'OneOf1Coupon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDiscounts'OneOf1Discount obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("coupon" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDiscounts'OneOf1Coupon obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discount" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyDiscounts'OneOf1Discount obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyDiscounts'OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBodyDiscounts'OneOf1" (\obj -> (GHC.Base.pure PostQuotesRequestBodyDiscounts'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "discount"))
-- | Create a new 'PostQuotesRequestBodyDiscounts'OneOf1' with all required fields.
mkPostQuotesRequestBodyDiscounts'OneOf1 :: PostQuotesRequestBodyDiscounts'OneOf1
mkPostQuotesRequestBodyDiscounts'OneOf1 = PostQuotesRequestBodyDiscounts'OneOf1{postQuotesRequestBodyDiscounts'OneOf1Coupon = GHC.Maybe.Nothing,
                                                                                postQuotesRequestBodyDiscounts'OneOf1Discount = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.discounts.anyOf@ in the specification.
-- 
-- The discounts applied to the quote. You can only set up to one discount.
data PostQuotesRequestBodyDiscounts'Variants =
   PostQuotesRequestBodyDiscounts'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesRequestBodyDiscounts'ListTPostQuotesRequestBodyDiscounts'OneOf1 ([PostQuotesRequestBodyDiscounts'OneOf1])
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyDiscounts'Variants
    where toJSON (PostQuotesRequestBodyDiscounts'ListTPostQuotesRequestBodyDiscounts'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesRequestBodyDiscounts'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyDiscounts'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesRequestBodyDiscounts'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesRequestBodyDiscounts'ListTPostQuotesRequestBodyDiscounts'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.from_quote@ in the specification.
-- 
-- Clone an existing quote. The new quote will be created in \`status=draft\`. When using this parameter, you cannot specify any other parameters except for \`expires_at\`.
data PostQuotesRequestBodyFromQuote' = PostQuotesRequestBodyFromQuote' {
  -- | is_revision
  postQuotesRequestBodyFromQuote'IsRevision :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | quote
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postQuotesRequestBodyFromQuote'Quote :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyFromQuote'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_revision" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyFromQuote'IsRevision obj) : ["quote" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyFromQuote'Quote obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_revision" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyFromQuote'IsRevision obj) : ["quote" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyFromQuote'Quote obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyFromQuote'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBodyFromQuote'" (\obj -> (GHC.Base.pure PostQuotesRequestBodyFromQuote' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_revision")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quote"))
-- | Create a new 'PostQuotesRequestBodyFromQuote'' with all required fields.
mkPostQuotesRequestBodyFromQuote' :: Data.Text.Internal.Text -- ^ 'postQuotesRequestBodyFromQuote'Quote'
  -> PostQuotesRequestBodyFromQuote'
mkPostQuotesRequestBodyFromQuote' postQuotesRequestBodyFromQuote'Quote = PostQuotesRequestBodyFromQuote'{postQuotesRequestBodyFromQuote'IsRevision = GHC.Maybe.Nothing,
                                                                                                         postQuotesRequestBodyFromQuote'Quote = postQuotesRequestBodyFromQuote'Quote}
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.invoice_settings@ in the specification.
-- 
-- All invoices will be billed using the specified settings.
data PostQuotesRequestBodyInvoiceSettings' = PostQuotesRequestBodyInvoiceSettings' {
  -- | days_until_due
  postQuotesRequestBodyInvoiceSettings'DaysUntilDue :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyInvoiceSettings'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("days_until_due" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyInvoiceSettings'DaysUntilDue obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("days_until_due" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyInvoiceSettings'DaysUntilDue obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyInvoiceSettings'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBodyInvoiceSettings'" (\obj -> GHC.Base.pure PostQuotesRequestBodyInvoiceSettings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "days_until_due"))
-- | Create a new 'PostQuotesRequestBodyInvoiceSettings'' with all required fields.
mkPostQuotesRequestBodyInvoiceSettings' :: PostQuotesRequestBodyInvoiceSettings'
mkPostQuotesRequestBodyInvoiceSettings' = PostQuotesRequestBodyInvoiceSettings'{postQuotesRequestBodyInvoiceSettings'DaysUntilDue = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items@ in the specification.
-- 
-- 
data PostQuotesRequestBodyLineItems' = PostQuotesRequestBodyLineItems' {
  -- | price
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  postQuotesRequestBodyLineItems'Price :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | price_data
  , postQuotesRequestBodyLineItems'PriceData :: (GHC.Maybe.Maybe PostQuotesRequestBodyLineItems'PriceData')
  -- | quantity
  , postQuotesRequestBodyLineItems'Quantity :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | tax_rates
  , postQuotesRequestBodyLineItems'TaxRates :: (GHC.Maybe.Maybe PostQuotesRequestBodyLineItems'TaxRates'Variants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyLineItems'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'Price obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price_data" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'Quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rates" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'TaxRates obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'Price obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price_data" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'Quantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rates" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'TaxRates obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyLineItems'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBodyLineItems'" (\obj -> (((GHC.Base.pure PostQuotesRequestBodyLineItems' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_rates"))
-- | Create a new 'PostQuotesRequestBodyLineItems'' with all required fields.
mkPostQuotesRequestBodyLineItems' :: PostQuotesRequestBodyLineItems'
mkPostQuotesRequestBodyLineItems' = PostQuotesRequestBodyLineItems'{postQuotesRequestBodyLineItems'Price = GHC.Maybe.Nothing,
                                                                    postQuotesRequestBodyLineItems'PriceData = GHC.Maybe.Nothing,
                                                                    postQuotesRequestBodyLineItems'Quantity = GHC.Maybe.Nothing,
                                                                    postQuotesRequestBodyLineItems'TaxRates = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.price_data@ in the specification.
-- 
-- 
data PostQuotesRequestBodyLineItems'PriceData' = PostQuotesRequestBodyLineItems'PriceData' {
  -- | currency
  postQuotesRequestBodyLineItems'PriceData'Currency :: Data.Text.Internal.Text
  -- | product
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postQuotesRequestBodyLineItems'PriceData'Product :: Data.Text.Internal.Text
  -- | recurring
  , postQuotesRequestBodyLineItems'PriceData'Recurring :: (GHC.Maybe.Maybe PostQuotesRequestBodyLineItems'PriceData'Recurring')
  -- | tax_behavior
  , postQuotesRequestBodyLineItems'PriceData'TaxBehavior :: (GHC.Maybe.Maybe PostQuotesRequestBodyLineItems'PriceData'TaxBehavior')
  -- | unit_amount
  , postQuotesRequestBodyLineItems'PriceData'UnitAmount :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | unit_amount_decimal
  , postQuotesRequestBodyLineItems'PriceData'UnitAmountDecimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyLineItems'PriceData'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["currency" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyLineItems'PriceData'Currency obj] : ["product" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyLineItems'PriceData'Product obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recurring" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'Recurring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'TaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'UnitAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'UnitAmountDecimal obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["currency" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyLineItems'PriceData'Currency obj] : ["product" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyLineItems'PriceData'Product obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recurring" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'Recurring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'TaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'UnitAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'UnitAmountDecimal obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyLineItems'PriceData'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBodyLineItems'PriceData'" (\obj -> (((((GHC.Base.pure PostQuotesRequestBodyLineItems'PriceData' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "recurring")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit_amount_decimal"))
-- | Create a new 'PostQuotesRequestBodyLineItems'PriceData'' with all required fields.
mkPostQuotesRequestBodyLineItems'PriceData' :: Data.Text.Internal.Text -- ^ 'postQuotesRequestBodyLineItems'PriceData'Currency'
  -> Data.Text.Internal.Text -- ^ 'postQuotesRequestBodyLineItems'PriceData'Product'
  -> PostQuotesRequestBodyLineItems'PriceData'
mkPostQuotesRequestBodyLineItems'PriceData' postQuotesRequestBodyLineItems'PriceData'Currency postQuotesRequestBodyLineItems'PriceData'Product = PostQuotesRequestBodyLineItems'PriceData'{postQuotesRequestBodyLineItems'PriceData'Currency = postQuotesRequestBodyLineItems'PriceData'Currency,
                                                                                                                                                                                           postQuotesRequestBodyLineItems'PriceData'Product = postQuotesRequestBodyLineItems'PriceData'Product,
                                                                                                                                                                                           postQuotesRequestBodyLineItems'PriceData'Recurring = GHC.Maybe.Nothing,
                                                                                                                                                                                           postQuotesRequestBodyLineItems'PriceData'TaxBehavior = GHC.Maybe.Nothing,
                                                                                                                                                                                           postQuotesRequestBodyLineItems'PriceData'UnitAmount = GHC.Maybe.Nothing,
                                                                                                                                                                                           postQuotesRequestBodyLineItems'PriceData'UnitAmountDecimal = GHC.Maybe.Nothing}
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.price_data.properties.recurring@ in the specification.
-- 
-- 
data PostQuotesRequestBodyLineItems'PriceData'Recurring' = PostQuotesRequestBodyLineItems'PriceData'Recurring' {
  -- | interval
  postQuotesRequestBodyLineItems'PriceData'Recurring'Interval :: PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'
  -- | interval_count
  , postQuotesRequestBodyLineItems'PriceData'Recurring'IntervalCount :: (GHC.Maybe.Maybe GHC.Types.Int)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyLineItems'PriceData'Recurring'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["interval" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyLineItems'PriceData'Recurring'Interval obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'Recurring'IntervalCount obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["interval" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyLineItems'PriceData'Recurring'Interval obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyLineItems'PriceData'Recurring'IntervalCount obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyLineItems'PriceData'Recurring'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBodyLineItems'PriceData'Recurring'" (\obj -> (GHC.Base.pure PostQuotesRequestBodyLineItems'PriceData'Recurring' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval_count"))
-- | Create a new 'PostQuotesRequestBodyLineItems'PriceData'Recurring'' with all required fields.
mkPostQuotesRequestBodyLineItems'PriceData'Recurring' :: PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval' -- ^ 'postQuotesRequestBodyLineItems'PriceData'Recurring'Interval'
  -> PostQuotesRequestBodyLineItems'PriceData'Recurring'
mkPostQuotesRequestBodyLineItems'PriceData'Recurring' postQuotesRequestBodyLineItems'PriceData'Recurring'Interval = PostQuotesRequestBodyLineItems'PriceData'Recurring'{postQuotesRequestBodyLineItems'PriceData'Recurring'Interval = postQuotesRequestBodyLineItems'PriceData'Recurring'Interval,
                                                                                                                                                                        postQuotesRequestBodyLineItems'PriceData'Recurring'IntervalCount = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.price_data.properties.recurring.properties.interval@ in the specification.
-- 
-- 
data PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval' =
   PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumDay -- ^ Represents the JSON value @"day"@
  | PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumMonth -- ^ Represents the JSON value @"month"@
  | PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumWeek -- ^ Represents the JSON value @"week"@
  | PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumYear -- ^ Represents the JSON value @"year"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'
    where toJSON (PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'Other val) = val
          toJSON (PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumDay) = "day"
          toJSON (PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumMonth) = "month"
          toJSON (PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumWeek) = "week"
          toJSON (PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumYear) = "year"
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "day" -> PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumDay
                                            | val GHC.Classes.== "month" -> PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumMonth
                                            | val GHC.Classes.== "week" -> PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumWeek
                                            | val GHC.Classes.== "year" -> PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'EnumYear
                                            | GHC.Base.otherwise -> PostQuotesRequestBodyLineItems'PriceData'Recurring'Interval'Other val)
-- | Defines the enum schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.price_data.properties.tax_behavior@ in the specification.
-- 
-- 
data PostQuotesRequestBodyLineItems'PriceData'TaxBehavior' =
   PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'EnumExclusive -- ^ Represents the JSON value @"exclusive"@
  | PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'EnumInclusive -- ^ Represents the JSON value @"inclusive"@
  | PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'EnumUnspecified -- ^ Represents the JSON value @"unspecified"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'
    where toJSON (PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'Other val) = val
          toJSON (PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'EnumExclusive) = "exclusive"
          toJSON (PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'EnumInclusive) = "inclusive"
          toJSON (PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'EnumUnspecified) = "unspecified"
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "exclusive" -> PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'EnumExclusive
                                            | val GHC.Classes.== "inclusive" -> PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'EnumInclusive
                                            | val GHC.Classes.== "unspecified" -> PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'EnumUnspecified
                                            | GHC.Base.otherwise -> PostQuotesRequestBodyLineItems'PriceData'TaxBehavior'Other val)
-- | Defines the oneOf schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.line_items.items.properties.tax_rates.anyOf@ in the specification.
-- 
-- 
data PostQuotesRequestBodyLineItems'TaxRates'Variants =
   PostQuotesRequestBodyLineItems'TaxRates'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesRequestBodyLineItems'TaxRates'ListTText ([Data.Text.Internal.Text])
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyLineItems'TaxRates'Variants
    where toJSON (PostQuotesRequestBodyLineItems'TaxRates'ListTText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesRequestBodyLineItems'TaxRates'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyLineItems'TaxRates'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesRequestBodyLineItems'TaxRates'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesRequestBodyLineItems'TaxRates'ListTText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.on_behalf_of.anyOf@ in the specification.
-- 
-- The account on behalf of which to charge.
data PostQuotesRequestBodyOnBehalfOf'Variants =
   PostQuotesRequestBodyOnBehalfOf'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesRequestBodyOnBehalfOf'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyOnBehalfOf'Variants
    where toJSON (PostQuotesRequestBodyOnBehalfOf'Text a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesRequestBodyOnBehalfOf'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyOnBehalfOf'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesRequestBodyOnBehalfOf'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesRequestBodyOnBehalfOf'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.subscription_data@ in the specification.
-- 
-- When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if \`subscription_data[effective_date]\` is present and in the future, otherwise a subscription is created.
data PostQuotesRequestBodySubscriptionData' = PostQuotesRequestBodySubscriptionData' {
  -- | effective_date
  postQuotesRequestBodySubscriptionData'EffectiveDate :: (GHC.Maybe.Maybe PostQuotesRequestBodySubscriptionData'EffectiveDate'Variants)
  -- | trial_period_days
  , postQuotesRequestBodySubscriptionData'TrialPeriodDays :: (GHC.Maybe.Maybe PostQuotesRequestBodySubscriptionData'TrialPeriodDays'Variants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodySubscriptionData'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("effective_date" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodySubscriptionData'EffectiveDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_period_days" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodySubscriptionData'TrialPeriodDays obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("effective_date" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodySubscriptionData'EffectiveDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_period_days" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodySubscriptionData'TrialPeriodDays obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodySubscriptionData'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBodySubscriptionData'" (\obj -> (GHC.Base.pure PostQuotesRequestBodySubscriptionData' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "effective_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "trial_period_days"))
-- | Create a new 'PostQuotesRequestBodySubscriptionData'' with all required fields.
mkPostQuotesRequestBodySubscriptionData' :: PostQuotesRequestBodySubscriptionData'
mkPostQuotesRequestBodySubscriptionData' = PostQuotesRequestBodySubscriptionData'{postQuotesRequestBodySubscriptionData'EffectiveDate = GHC.Maybe.Nothing,
                                                                                  postQuotesRequestBodySubscriptionData'TrialPeriodDays = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.subscription_data.properties.effective_date.anyOf@ in the specification.
-- 
-- 
data PostQuotesRequestBodySubscriptionData'EffectiveDate'Variants =
   PostQuotesRequestBodySubscriptionData'EffectiveDate'CurrentPeriodEnd -- ^ Represents the JSON value @"current_period_end"@
  | PostQuotesRequestBodySubscriptionData'EffectiveDate'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesRequestBodySubscriptionData'EffectiveDate'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodySubscriptionData'EffectiveDate'Variants
    where toJSON (PostQuotesRequestBodySubscriptionData'EffectiveDate'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesRequestBodySubscriptionData'EffectiveDate'CurrentPeriodEnd) = "current_period_end"
          toJSON (PostQuotesRequestBodySubscriptionData'EffectiveDate'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodySubscriptionData'EffectiveDate'Variants
    where parseJSON val = if | val GHC.Classes.== "current_period_end" -> GHC.Base.pure PostQuotesRequestBodySubscriptionData'EffectiveDate'CurrentPeriodEnd
                             | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesRequestBodySubscriptionData'EffectiveDate'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesRequestBodySubscriptionData'EffectiveDate'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.subscription_data.properties.trial_period_days.anyOf@ in the specification.
-- 
-- 
data PostQuotesRequestBodySubscriptionData'TrialPeriodDays'Variants =
   PostQuotesRequestBodySubscriptionData'TrialPeriodDays'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesRequestBodySubscriptionData'TrialPeriodDays'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodySubscriptionData'TrialPeriodDays'Variants
    where toJSON (PostQuotesRequestBodySubscriptionData'TrialPeriodDays'Int a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesRequestBodySubscriptionData'TrialPeriodDays'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodySubscriptionData'TrialPeriodDays'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesRequestBodySubscriptionData'TrialPeriodDays'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesRequestBodySubscriptionData'TrialPeriodDays'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.transfer_data.anyOf@ in the specification.
-- 
-- 
data PostQuotesRequestBodyTransferData'OneOf1 = PostQuotesRequestBodyTransferData'OneOf1 {
  -- | amount
  postQuotesRequestBodyTransferData'OneOf1Amount :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | amount_percent
  , postQuotesRequestBodyTransferData'OneOf1AmountPercent :: (GHC.Maybe.Maybe GHC.Types.Double)
  -- | destination
  , postQuotesRequestBodyTransferData'OneOf1Destination :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyTransferData'OneOf1
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyTransferData'OneOf1Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_percent" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyTransferData'OneOf1AmountPercent obj) : ["destination" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyTransferData'OneOf1Destination obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyTransferData'OneOf1Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_percent" Data.Aeson.Types.ToJSON..=)) (postQuotesRequestBodyTransferData'OneOf1AmountPercent obj) : ["destination" Data.Aeson.Types.ToJSON..= postQuotesRequestBodyTransferData'OneOf1Destination obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyTransferData'OneOf1
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostQuotesRequestBodyTransferData'OneOf1" (\obj -> ((GHC.Base.pure PostQuotesRequestBodyTransferData'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination"))
-- | Create a new 'PostQuotesRequestBodyTransferData'OneOf1' with all required fields.
mkPostQuotesRequestBodyTransferData'OneOf1 :: Data.Text.Internal.Text -- ^ 'postQuotesRequestBodyTransferData'OneOf1Destination'
  -> PostQuotesRequestBodyTransferData'OneOf1
mkPostQuotesRequestBodyTransferData'OneOf1 postQuotesRequestBodyTransferData'OneOf1Destination = PostQuotesRequestBodyTransferData'OneOf1{postQuotesRequestBodyTransferData'OneOf1Amount = GHC.Maybe.Nothing,
                                                                                                                                          postQuotesRequestBodyTransferData'OneOf1AmountPercent = GHC.Maybe.Nothing,
                                                                                                                                          postQuotesRequestBodyTransferData'OneOf1Destination = postQuotesRequestBodyTransferData'OneOf1Destination}
-- | Defines the oneOf schema located at @paths.\/v1\/quotes.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.transfer_data.anyOf@ in the specification.
-- 
-- The data with which to automatically create a Transfer for each of the invoices.
data PostQuotesRequestBodyTransferData'Variants =
   PostQuotesRequestBodyTransferData'EmptyString -- ^ Represents the JSON value @""@
  | PostQuotesRequestBodyTransferData'PostQuotesRequestBodyTransferData'OneOf1 PostQuotesRequestBodyTransferData'OneOf1
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostQuotesRequestBodyTransferData'Variants
    where toJSON (PostQuotesRequestBodyTransferData'PostQuotesRequestBodyTransferData'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (PostQuotesRequestBodyTransferData'EmptyString) = ""
instance Data.Aeson.Types.FromJSON.FromJSON PostQuotesRequestBodyTransferData'Variants
    where parseJSON val = if | val GHC.Classes.== "" -> GHC.Base.pure PostQuotesRequestBodyTransferData'EmptyString
                             | GHC.Base.otherwise -> case (PostQuotesRequestBodyTransferData'PostQuotesRequestBodyTransferData'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched" of
                                                         Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                                                         Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Represents a response of the operation 'postQuotes'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostQuotesResponseError' is used.
data PostQuotesResponse =
   PostQuotesResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostQuotesResponse200 Quote -- ^ Successful response.
  | PostQuotesResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
