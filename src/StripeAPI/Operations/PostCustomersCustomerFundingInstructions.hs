{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation postCustomersCustomerFundingInstructions
module StripeAPI.Operations.PostCustomersCustomerFundingInstructions where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/customers/{customer}/funding_instructions
--
-- \<p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer, new
-- funding instructions will be created. If funding instructions have already been created for a given customer, the same
-- funding instructions will be retrieved. In other words, we will return the same funding instructions each time.\<\/p>
postCustomersCustomerFundingInstructions ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | customer | Constraints: Maximum length of 5000
  Data.Text.Internal.Text ->
  -- | The request body to send
  PostCustomersCustomerFundingInstructionsRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostCustomersCustomerFundingInstructionsResponse)
postCustomersCustomerFundingInstructions
  customer
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostCustomersCustomerFundingInstructionsResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                       PostCustomersCustomerFundingInstructionsResponse200
                                         Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                              Data.Either.Either
                                                                GHC.Base.String
                                                                FundingInstructions
                                                          )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                       PostCustomersCustomerFundingInstructionsResponseDefault
                                         Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                              Data.Either.Either
                                                                GHC.Base.String
                                                                Error
                                                          )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "POST") ("/v1/customers/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel customer)) GHC.Base.<> "/funding_instructions")) GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/funding_instructions.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data PostCustomersCustomerFundingInstructionsRequestBody = PostCustomersCustomerFundingInstructionsRequestBody
  { -- | bank_transfer: Additional parameters for \`bank_transfer\` funding types
    postCustomersCustomerFundingInstructionsRequestBodyBankTransfer :: PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer',
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    postCustomersCustomerFundingInstructionsRequestBodyCurrency :: Data.Text.Internal.Text,
    -- | expand: Specifies which fields in the response should be expanded.
    postCustomersCustomerFundingInstructionsRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerFundingInstructionsRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["bank_transfer" Data.Aeson.Types.ToJSON..= postCustomersCustomerFundingInstructionsRequestBodyBankTransfer obj] : ["currency" Data.Aeson.Types.ToJSON..= postCustomersCustomerFundingInstructionsRequestBodyCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postCustomersCustomerFundingInstructionsRequestBodyExpand obj) : ["funding_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_transfer"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["bank_transfer" Data.Aeson.Types.ToJSON..= postCustomersCustomerFundingInstructionsRequestBodyBankTransfer obj] : ["currency" Data.Aeson.Types.ToJSON..= postCustomersCustomerFundingInstructionsRequestBodyCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postCustomersCustomerFundingInstructionsRequestBodyExpand obj) : ["funding_type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_transfer"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerFundingInstructionsRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCustomersCustomerFundingInstructionsRequestBody" (\obj -> ((GHC.Base.pure PostCustomersCustomerFundingInstructionsRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bank_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand"))

-- | Create a new 'PostCustomersCustomerFundingInstructionsRequestBody' with all required fields.
mkPostCustomersCustomerFundingInstructionsRequestBody ::
  -- | 'postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'
  PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer' ->
  -- | 'postCustomersCustomerFundingInstructionsRequestBodyCurrency'
  Data.Text.Internal.Text ->
  PostCustomersCustomerFundingInstructionsRequestBody
mkPostCustomersCustomerFundingInstructionsRequestBody postCustomersCustomerFundingInstructionsRequestBodyBankTransfer postCustomersCustomerFundingInstructionsRequestBodyCurrency =
  PostCustomersCustomerFundingInstructionsRequestBody
    { postCustomersCustomerFundingInstructionsRequestBodyBankTransfer = postCustomersCustomerFundingInstructionsRequestBodyBankTransfer,
      postCustomersCustomerFundingInstructionsRequestBodyCurrency = postCustomersCustomerFundingInstructionsRequestBodyCurrency,
      postCustomersCustomerFundingInstructionsRequestBodyExpand = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/funding_instructions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_transfer@ in the specification.
--
-- Additional parameters for \`bank_transfer\` funding types
data PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer' = PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'
  { -- | eu_bank_transfer
    postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer :: (GHC.Maybe.Maybe PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'),
    -- | requested_address_types
    postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes :: (GHC.Maybe.Maybe ([PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'])),
    -- | type
    postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type :: PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eu_bank_transfer" Data.Aeson.Types.ToJSON..=)) (postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requested_address_types" Data.Aeson.Types.ToJSON..=)) (postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes obj) : ["type" Data.Aeson.Types.ToJSON..= postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eu_bank_transfer" Data.Aeson.Types.ToJSON..=)) (postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requested_address_types" Data.Aeson.Types.ToJSON..=)) (postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes obj) : ["type" Data.Aeson.Types.ToJSON..= postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'" (\obj -> ((GHC.Base.pure PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eu_bank_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requested_address_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'' with all required fields.
mkPostCustomersCustomerFundingInstructionsRequestBodyBankTransfer' ::
  -- | 'postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'
  PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type' ->
  PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'
mkPostCustomersCustomerFundingInstructionsRequestBodyBankTransfer' postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type =
  PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'
    { postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer = GHC.Maybe.Nothing,
      postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes = GHC.Maybe.Nothing,
      postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type = postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/funding_instructions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_transfer.properties.eu_bank_transfer@ in the specification.
data PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer' = PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'
  { -- | country
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'Country :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["country" Data.Aeson.Types.ToJSON..= postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'Country obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["country" Data.Aeson.Types.ToJSON..= postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'Country obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'" (\obj -> GHC.Base.pure PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country"))

-- | Create a new 'PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'' with all required fields.
mkPostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer' ::
  -- | 'postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'Country'
  Data.Text.Internal.Text ->
  PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'
mkPostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer' postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'Country = PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer' {postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'Country = postCustomersCustomerFundingInstructionsRequestBodyBankTransfer'EuBankTransfer'Country}

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/funding_instructions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_transfer.properties.requested_address_types.items@ in the specification.
data PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"iban"@
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumIban
  | -- | Represents the JSON value @"sort_code"@
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumSortCode
  | -- | Represents the JSON value @"spei"@
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumSpei
  | -- | Represents the JSON value @"zengin"@
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumZengin
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes' where
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'Other val) = val
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumIban) = "iban"
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumSortCode) = "sort_code"
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumSpei) = "spei"
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumZengin) = "zengin"

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "iban" -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumIban
            | val GHC.Classes.== "sort_code" -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumSortCode
            | val GHC.Classes.== "spei" -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumSpei
            | val GHC.Classes.== "zengin" -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'EnumZengin
            | GHC.Base.otherwise -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'RequestedAddressTypes'Other val
      )

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/funding_instructions.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.bank_transfer.properties.type@ in the specification.
data PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"eu_bank_transfer"@
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumEuBankTransfer
  | -- | Represents the JSON value @"gb_bank_transfer"@
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumGbBankTransfer
  | -- | Represents the JSON value @"jp_bank_transfer"@
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumJpBankTransfer
  | -- | Represents the JSON value @"mx_bank_transfer"@
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumMxBankTransfer
  | -- | Represents the JSON value @"us_bank_transfer"@
    PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumUsBankTransfer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type' where
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'Other val) = val
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumEuBankTransfer) = "eu_bank_transfer"
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumGbBankTransfer) = "gb_bank_transfer"
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumJpBankTransfer) = "jp_bank_transfer"
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumMxBankTransfer) = "mx_bank_transfer"
  toJSON (PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumUsBankTransfer) = "us_bank_transfer"

instance Data.Aeson.Types.FromJSON.FromJSON PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "eu_bank_transfer" -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumEuBankTransfer
            | val GHC.Classes.== "gb_bank_transfer" -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumGbBankTransfer
            | val GHC.Classes.== "jp_bank_transfer" -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumJpBankTransfer
            | val GHC.Classes.== "mx_bank_transfer" -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumMxBankTransfer
            | val GHC.Classes.== "us_bank_transfer" -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'EnumUsBankTransfer
            | GHC.Base.otherwise -> PostCustomersCustomerFundingInstructionsRequestBodyBankTransfer'Type'Other val
      )

-- | Represents a response of the operation 'postCustomersCustomerFundingInstructions'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostCustomersCustomerFundingInstructionsResponseError' is used.
data PostCustomersCustomerFundingInstructionsResponse
  = -- | Means either no matching case available or a parse error
    PostCustomersCustomerFundingInstructionsResponseError GHC.Base.String
  | -- | Successful response.
    PostCustomersCustomerFundingInstructionsResponse200 FundingInstructions
  | -- | Error response.
    PostCustomersCustomerFundingInstructionsResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
