{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getTransfers
module StripeAPI.Operations.GetTransfers where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/transfers
--
-- \<p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.\<\/p>
getTransfers ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetTransfersParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetTransfersResponse)
getTransfers parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetTransfersResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetTransfersResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetTransfersResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetTransfersResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/transfers")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "destination") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersParametersQueryDestination parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "transfer_group") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getTransfersParametersQueryTransferGroup parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the data type for the schema getTransfersParameters
data GetTransfersParameters
  = GetTransfersParameters
      { -- | queryCreated: Represents the parameter named \'created\'
        getTransfersParametersQueryCreated :: (GHC.Maybe.Maybe GetTransfersParametersQueryCreated'Variants),
        -- | queryDestination: Represents the parameter named \'destination\'
        --
        -- Only return transfers for the destination specified by this account ID.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getTransfersParametersQueryDestination :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getTransfersParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getTransfersParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getTransfersParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getTransfersParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryTransfer_group: Represents the parameter named \'transfer_group\'
        --
        -- Only return transfers with the specified transfer group.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getTransfersParametersQueryTransferGroup :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetTransfersParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "queryCreated" (getTransfersParametersQueryCreated obj) : (Data.Aeson..=) "queryDestination" (getTransfersParametersQueryDestination obj) : (Data.Aeson..=) "queryEnding_before" (getTransfersParametersQueryEndingBefore obj) : (Data.Aeson..=) "queryExpand" (getTransfersParametersQueryExpand obj) : (Data.Aeson..=) "queryLimit" (getTransfersParametersQueryLimit obj) : (Data.Aeson..=) "queryStarting_after" (getTransfersParametersQueryStartingAfter obj) : (Data.Aeson..=) "queryTransfer_group" (getTransfersParametersQueryTransferGroup obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "queryCreated" (getTransfersParametersQueryCreated obj) GHC.Base.<> ((Data.Aeson..=) "queryDestination" (getTransfersParametersQueryDestination obj) GHC.Base.<> ((Data.Aeson..=) "queryEnding_before" (getTransfersParametersQueryEndingBefore obj) GHC.Base.<> ((Data.Aeson..=) "queryExpand" (getTransfersParametersQueryExpand obj) GHC.Base.<> ((Data.Aeson..=) "queryLimit" (getTransfersParametersQueryLimit obj) GHC.Base.<> ((Data.Aeson..=) "queryStarting_after" (getTransfersParametersQueryStartingAfter obj) GHC.Base.<> (Data.Aeson..=) "queryTransfer_group" (getTransfersParametersQueryTransferGroup obj)))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetTransfersParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTransfersParameters" (\obj -> ((((((GHC.Base.pure GetTransfersParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryDestination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryTransfer_group"))

-- | Defines the data type for the schema getTransfersParametersQueryCreated\'OneOf2
data GetTransfersParametersQueryCreated'OneOf2
  = GetTransfersParametersQueryCreated'OneOf2
      { -- | gt
        getTransfersParametersQueryCreated'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getTransfersParametersQueryCreated'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getTransfersParametersQueryCreated'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getTransfersParametersQueryCreated'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetTransfersParametersQueryCreated'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getTransfersParametersQueryCreated'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getTransfersParametersQueryCreated'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getTransfersParametersQueryCreated'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getTransfersParametersQueryCreated'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getTransfersParametersQueryCreated'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getTransfersParametersQueryCreated'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getTransfersParametersQueryCreated'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getTransfersParametersQueryCreated'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetTransfersParametersQueryCreated'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTransfersParametersQueryCreated'OneOf2" (\obj -> (((GHC.Base.pure GetTransfersParametersQueryCreated'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getTransfersParametersQueryCreated\'
--
-- Represents the parameter named \'created\'
data GetTransfersParametersQueryCreated'Variants
  = GetTransfersParametersQueryCreated'Int GHC.Types.Int
  | GetTransfersParametersQueryCreated'GetTransfersParametersQueryCreated'OneOf2 GetTransfersParametersQueryCreated'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetTransfersParametersQueryCreated'Variants where
  toJSON (GetTransfersParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetTransfersParametersQueryCreated'GetTransfersParametersQueryCreated'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetTransfersParametersQueryCreated'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetTransfersParametersQueryCreated'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetTransfersParametersQueryCreated'GetTransfersParametersQueryCreated'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'getTransfers'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetTransfersResponseError' is used.
data GetTransfersResponse
  = -- | Means either no matching case available or a parse error
    GetTransfersResponseError GHC.Base.String
  | -- | Successful response.
    GetTransfersResponse200 GetTransfersResponseBody200
  | -- | Error response.
    GetTransfersResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the data type for the schema GetTransfersResponseBody200
data GetTransfersResponseBody200
  = GetTransfersResponseBody200
      { -- | data: Details about each object.
        getTransfersResponseBody200Data :: ([Transfer]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getTransfersResponseBody200HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        getTransfersResponseBody200Object :: GetTransfersResponseBody200Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        -- * Must match pattern \'^\/v1\/transfers\'
        getTransfersResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetTransfersResponseBody200 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getTransfersResponseBody200Data obj) : (Data.Aeson..=) "has_more" (getTransfersResponseBody200HasMore obj) : (Data.Aeson..=) "object" (getTransfersResponseBody200Object obj) : (Data.Aeson..=) "url" (getTransfersResponseBody200Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getTransfersResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (getTransfersResponseBody200HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (getTransfersResponseBody200Object obj) GHC.Base.<> (Data.Aeson..=) "url" (getTransfersResponseBody200Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetTransfersResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetTransfersResponseBody200" (\obj -> (((GHC.Base.pure GetTransfersResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema GetTransfersResponseBody200Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data GetTransfersResponseBody200Object'
  = GetTransfersResponseBody200Object'EnumOther Data.Aeson.Types.Internal.Value
  | GetTransfersResponseBody200Object'EnumTyped Data.Text.Internal.Text
  | GetTransfersResponseBody200Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetTransfersResponseBody200Object' where
  toJSON (GetTransfersResponseBody200Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetTransfersResponseBody200Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetTransfersResponseBody200Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON GetTransfersResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> GetTransfersResponseBody200Object'EnumStringList
            | GHC.Base.otherwise -> GetTransfersResponseBody200Object'EnumOther val
      )
