{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation deleteCustomersCustomerSourcesId
module StripeAPI.Operations.DeleteCustomersCustomerSourcesId where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > DELETE /v1/customers/{customer}/sources/{id}
--
-- \<p>Delete a specified source for a given customer.\<\/p>
deleteCustomersCustomerSourcesId ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteCustomersCustomerSourcesIdParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response DeleteCustomersCustomerSourcesIdResponse)
deleteCustomersCustomerSourcesId
  parameters
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either DeleteCustomersCustomerSourcesIdResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteCustomersCustomerSourcesIdResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              DeleteCustomersCustomerSourcesIdResponseBody200
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteCustomersCustomerSourcesIdResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/v1/customers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (deleteCustomersCustomerSourcesIdParametersPathCustomer parameters))) GHC.Base.++ ("/sources/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (deleteCustomersCustomerSourcesIdParametersPathId parameters))) GHC.Base.++ ""))))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.parameters@ in the specification.
data DeleteCustomersCustomerSourcesIdParameters
  = DeleteCustomersCustomerSourcesIdParameters
      { -- | pathCustomer: Represents the parameter named \'customer\'
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        deleteCustomersCustomerSourcesIdParametersPathCustomer :: Data.Text.Internal.Text,
        -- | pathId: Represents the parameter named \'id\'
        deleteCustomersCustomerSourcesIdParametersPathId :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("pathCustomer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdParametersPathCustomer obj : "pathId" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdParametersPathId obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathCustomer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdParametersPathCustomer obj) GHC.Base.<> ("pathId" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdParametersPathId obj))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdParameters" (\obj -> (GHC.Base.pure DeleteCustomersCustomerSourcesIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathCustomer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdParameters' with all required fields.
mkDeleteCustomersCustomerSourcesIdParameters ::
  -- | 'deleteCustomersCustomerSourcesIdParametersPathCustomer'
  Data.Text.Internal.Text ->
  -- | 'deleteCustomersCustomerSourcesIdParametersPathId'
  Data.Text.Internal.Text ->
  DeleteCustomersCustomerSourcesIdParameters
mkDeleteCustomersCustomerSourcesIdParameters deleteCustomersCustomerSourcesIdParametersPathCustomer deleteCustomersCustomerSourcesIdParametersPathId =
  DeleteCustomersCustomerSourcesIdParameters
    { deleteCustomersCustomerSourcesIdParametersPathCustomer = deleteCustomersCustomerSourcesIdParametersPathCustomer,
      deleteCustomersCustomerSourcesIdParametersPathId = deleteCustomersCustomerSourcesIdParametersPathId
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data DeleteCustomersCustomerSourcesIdRequestBody
  = DeleteCustomersCustomerSourcesIdRequestBody
      { -- | expand: Specifies which fields in the response should be expanded.
        deleteCustomersCustomerSourcesIdRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("expand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdRequestBodyExpand obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("expand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdRequestBodyExpand obj)

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdRequestBody" (\obj -> GHC.Base.pure DeleteCustomersCustomerSourcesIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdRequestBody' with all required fields.
mkDeleteCustomersCustomerSourcesIdRequestBody :: DeleteCustomersCustomerSourcesIdRequestBody
mkDeleteCustomersCustomerSourcesIdRequestBody = DeleteCustomersCustomerSourcesIdRequestBody {deleteCustomersCustomerSourcesIdRequestBodyExpand = GHC.Maybe.Nothing}

-- | Represents a response of the operation 'deleteCustomersCustomerSourcesId'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteCustomersCustomerSourcesIdResponseError' is used.
data DeleteCustomersCustomerSourcesIdResponse
  = -- | Means either no matching case available or a parse error
    DeleteCustomersCustomerSourcesIdResponseError GHC.Base.String
  | -- | Successful response.
    DeleteCustomersCustomerSourcesIdResponse200 DeleteCustomersCustomerSourcesIdResponseBody200
  | -- | Error response.
    DeleteCustomersCustomerSourcesIdResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf@ in the specification.
data DeleteCustomersCustomerSourcesIdResponseBody200
  = DeleteCustomersCustomerSourcesIdResponseBody200
      { -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        deleteCustomersCustomerSourcesIdResponseBody200Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        deleteCustomersCustomerSourcesIdResponseBody200Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Currency obj : "id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Id obj : "deleted" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.Bool GHC.Types.True : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "alipay_account" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Currency obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Id obj) GHC.Base.<> (("deleted" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.Bool GHC.Types.True) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "alipay_account"))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200" (\obj -> (GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200 :: DeleteCustomersCustomerSourcesIdResponseBody200
mkDeleteCustomersCustomerSourcesIdResponseBody200 =
  DeleteCustomersCustomerSourcesIdResponseBody200
    { deleteCustomersCustomerSourcesIdResponseBody200Currency = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Id = GHC.Maybe.Nothing
    }
