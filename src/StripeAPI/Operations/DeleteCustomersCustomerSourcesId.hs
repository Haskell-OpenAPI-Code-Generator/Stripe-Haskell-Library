{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation deleteCustomersCustomerSourcesId
module StripeAPI.Operations.DeleteCustomersCustomerSourcesId where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > DELETE /v1/customers/{customer}/sources/{id}
--
-- \<p>Delete a specified source for a given customer.\<\/p>
deleteCustomersCustomerSourcesId ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteCustomersCustomerSourcesIdParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteCustomersCustomerSourcesIdResponse)
deleteCustomersCustomerSourcesId
  parameters
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either DeleteCustomersCustomerSourcesIdResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteCustomersCustomerSourcesIdResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              DeleteCustomersCustomerSourcesIdResponseBody200
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     DeleteCustomersCustomerSourcesIdResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "DELETE") (Data.Text.pack ("/v1/customers/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (deleteCustomersCustomerSourcesIdParametersPathCustomer parameters))) GHC.Base.++ ("/sources/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (deleteCustomersCustomerSourcesIdParametersPathId parameters))) GHC.Base.++ ""))))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.parameters@ in the specification.
data DeleteCustomersCustomerSourcesIdParameters = DeleteCustomersCustomerSourcesIdParameters
  { -- | pathCustomer: Represents the parameter named \'customer\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdParametersPathCustomer :: Data.Text.Internal.Text,
    -- | pathId: Represents the parameter named \'id\'
    deleteCustomersCustomerSourcesIdParametersPathId :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdParameters where
  toJSON obj = Data.Aeson.Types.Internal.object ("pathCustomer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdParametersPathCustomer obj : "pathId" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdParametersPathId obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("pathCustomer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdParametersPathCustomer obj) GHC.Base.<> ("pathId" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdParametersPathId obj))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdParameters" (\obj -> (GHC.Base.pure DeleteCustomersCustomerSourcesIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathCustomer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathId"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdParameters' with all required fields.
mkDeleteCustomersCustomerSourcesIdParameters ::
  -- | 'deleteCustomersCustomerSourcesIdParametersPathCustomer'
  Data.Text.Internal.Text ->
  -- | 'deleteCustomersCustomerSourcesIdParametersPathId'
  Data.Text.Internal.Text ->
  DeleteCustomersCustomerSourcesIdParameters
mkDeleteCustomersCustomerSourcesIdParameters deleteCustomersCustomerSourcesIdParametersPathCustomer deleteCustomersCustomerSourcesIdParametersPathId =
  DeleteCustomersCustomerSourcesIdParameters
    { deleteCustomersCustomerSourcesIdParametersPathCustomer = deleteCustomersCustomerSourcesIdParametersPathCustomer,
      deleteCustomersCustomerSourcesIdParametersPathId = deleteCustomersCustomerSourcesIdParametersPathId
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data DeleteCustomersCustomerSourcesIdRequestBody = DeleteCustomersCustomerSourcesIdRequestBody
  { -- | expand: Specifies which fields in the response should be expanded.
    deleteCustomersCustomerSourcesIdRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object ("expand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdRequestBodyExpand obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("expand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdRequestBodyExpand obj)

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdRequestBody" (\obj -> GHC.Base.pure DeleteCustomersCustomerSourcesIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdRequestBody' with all required fields.
mkDeleteCustomersCustomerSourcesIdRequestBody :: DeleteCustomersCustomerSourcesIdRequestBody
mkDeleteCustomersCustomerSourcesIdRequestBody = DeleteCustomersCustomerSourcesIdRequestBody {deleteCustomersCustomerSourcesIdRequestBodyExpand = GHC.Maybe.Nothing}

-- | Represents a response of the operation 'deleteCustomersCustomerSourcesId'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteCustomersCustomerSourcesIdResponseError' is used.
data DeleteCustomersCustomerSourcesIdResponse
  = -- | Means either no matching case available or a parse error
    DeleteCustomersCustomerSourcesIdResponseError GHC.Base.String
  | -- | Successful response.
    DeleteCustomersCustomerSourcesIdResponse200 DeleteCustomersCustomerSourcesIdResponseBody200
  | -- | Error response.
    DeleteCustomersCustomerSourcesIdResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf@ in the specification.
data DeleteCustomersCustomerSourcesIdResponseBody200 = DeleteCustomersCustomerSourcesIdResponseBody200
  { -- | account: The ID of the account that the bank account is associated with.
    deleteCustomersCustomerSourcesIdResponseBody200Account :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Account'Variants),
    -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AccountHolderType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | ach_credit_transfer
    deleteCustomersCustomerSourcesIdResponseBody200AchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
    -- | ach_debit
    deleteCustomersCustomerSourcesIdResponseBody200AchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
    -- | acss_debit
    deleteCustomersCustomerSourcesIdResponseBody200AcssDebit :: (GHC.Maybe.Maybe SourceTypeAcssDebit),
    -- | active: True when this bitcoin receiver has received a non-zero amount of bitcoin.
    deleteCustomersCustomerSourcesIdResponseBody200Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | address_city: City\/District\/Suburb\/Town\/Village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_country: Billing address country, if provided when creating card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AddressLine1Check :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_state: State\/County\/Province\/Region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_zip: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200AddressZipCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | alipay
    deleteCustomersCustomerSourcesIdResponseBody200Alipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
    -- | amount: The amount of \`currency\` that you are collecting as payment.
    deleteCustomersCustomerSourcesIdResponseBody200Amount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_received: The amount of \`currency\` to which \`bitcoin_amount_received\` has been converted.
    deleteCustomersCustomerSourcesIdResponseBody200AmountReceived :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | au_becs_debit
    deleteCustomersCustomerSourcesIdResponseBody200AuBecsDebit :: (GHC.Maybe.Maybe SourceTypeAuBecsDebit),
    -- | available_payout_methods: A set of available payout methods for this bank account. Only values from this set should be passed as the \`method\` when creating a payout.
    deleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods :: (GHC.Maybe.Maybe ([DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'])),
    -- | bancontact
    deleteCustomersCustomerSourcesIdResponseBody200Bancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
    -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | bitcoin_amount: The amount of bitcoin that the customer should send to fill the receiver. The \`bitcoin_amount\` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.
    deleteCustomersCustomerSourcesIdResponseBody200BitcoinAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | bitcoin_amount_received: The amount of bitcoin that has been sent by the customer to this receiver.
    deleteCustomersCustomerSourcesIdResponseBody200BitcoinAmountReceived :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | bitcoin_uri: This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BitcoinUri :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | business_profile: Business information about the account.
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'),
    -- | business_type: The business type.
    deleteCustomersCustomerSourcesIdResponseBody200BusinessType :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'),
    -- | capabilities:
    deleteCustomersCustomerSourcesIdResponseBody200Capabilities :: (GHC.Maybe.Maybe AccountCapabilities),
    -- | card
    deleteCustomersCustomerSourcesIdResponseBody200Card :: (GHC.Maybe.Maybe SourceTypeCard),
    -- | card_present
    deleteCustomersCustomerSourcesIdResponseBody200CardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
    -- | charges_enabled: Whether the account can create live charges.
    deleteCustomersCustomerSourcesIdResponseBody200ChargesEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | client_secret: The client secret of the source. Used for client-side retrieval using a publishable key.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ClientSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | code_verification:
    deleteCustomersCustomerSourcesIdResponseBody200CodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
    -- | company:
    deleteCustomersCustomerSourcesIdResponseBody200Company :: (GHC.Maybe.Maybe LegalEntityCompany),
    -- | controller:
    deleteCustomersCustomerSourcesIdResponseBody200Controller :: (GHC.Maybe.Maybe AccountController),
    -- | country: The account\'s country.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    deleteCustomersCustomerSourcesIdResponseBody200Created :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
    deleteCustomersCustomerSourcesIdResponseBody200Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The ID of the customer associated with this Alipay Account.
    deleteCustomersCustomerSourcesIdResponseBody200Customer :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Customer'Variants),
    -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`. A result of unchecked indicates that CVC was provided but hasn\'t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https:\/\/support.stripe.com\/questions\/check-if-a-card-is-valid-without-a-charge).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200CvcCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | default_currency: Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account\'s country](https:\/\/stripe.com\/docs\/payouts).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200DefaultCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | default_for_currency: Whether this bank account is the default external account for its currency.
    deleteCustomersCustomerSourcesIdResponseBody200DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Description :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | details_submitted: Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
    deleteCustomersCustomerSourcesIdResponseBody200DetailsSubmitted :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200DynamicLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | email: An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | eps
    deleteCustomersCustomerSourcesIdResponseBody200Eps :: (GHC.Maybe.Maybe SourceTypeEps),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    deleteCustomersCustomerSourcesIdResponseBody200ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    deleteCustomersCustomerSourcesIdResponseBody200ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | external_accounts: External accounts (bank accounts and debit cards) currently attached to this account
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'),
    -- | filled: This flag is initially false and updates to true when the customer sends the \`bitcoin_amount\` to this receiver.
    deleteCustomersCustomerSourcesIdResponseBody200Filled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | fingerprint: Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Fingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | flow: The authentication \`flow\` of the source. \`flow\` is one of \`redirect\`, \`receiver\`, \`code_verification\`, \`none\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Flow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | giropay
    deleteCustomersCustomerSourcesIdResponseBody200Giropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | ideal
    deleteCustomersCustomerSourcesIdResponseBody200Ideal :: (GHC.Maybe.Maybe SourceTypeIdeal),
    -- | inbound_address: A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200InboundAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | individual: This is an object representing a person associated with a Stripe account.
    --
    -- A platform cannot access a Standard or Express account\'s persons after the account starts onboarding, such as after generating an account link for the account.
    -- See the [Standard onboarding](https:\/\/stripe.com\/docs\/connect\/standard-accounts) or [Express onboarding documentation](https:\/\/stripe.com\/docs\/connect\/express-accounts) for information about platform pre-filling and account onboarding steps.
    --
    -- Related guide: [Handling Identity Verification with the API](https:\/\/stripe.com\/docs\/connect\/identity-verification-api\#person-information).
    deleteCustomersCustomerSourcesIdResponseBody200Individual :: (GHC.Maybe.Maybe Person),
    -- | klarna
    deleteCustomersCustomerSourcesIdResponseBody200Klarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
    -- | last4: The last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    deleteCustomersCustomerSourcesIdResponseBody200Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    deleteCustomersCustomerSourcesIdResponseBody200Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | multibanco
    deleteCustomersCustomerSourcesIdResponseBody200Multibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
    -- | name: Cardholder name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | object: String representing the object\'s type. Objects of the same type share the same value.
    deleteCustomersCustomerSourcesIdResponseBody200Object :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Object'),
    -- | owner: Information about the owner of the payment instrument that may be used or required by particular source types.
    deleteCustomersCustomerSourcesIdResponseBody200Owner :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Owner'),
    -- | p24
    deleteCustomersCustomerSourcesIdResponseBody200P24 :: (GHC.Maybe.Maybe SourceTypeP24),
    -- | payment: The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Payment :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | payment_amount: If the Alipay account object is not reusable, the exact amount that you can create a charge for.
    deleteCustomersCustomerSourcesIdResponseBody200PaymentAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | payment_currency: If the Alipay account object is not reusable, the exact currency that you can create a charge for.
    deleteCustomersCustomerSourcesIdResponseBody200PaymentCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | payouts_enabled: Whether Stripe can send payouts to this account.
    deleteCustomersCustomerSourcesIdResponseBody200PayoutsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | receiver:
    deleteCustomersCustomerSourcesIdResponseBody200Receiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
    -- | recipient: The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
    deleteCustomersCustomerSourcesIdResponseBody200Recipient :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Variants),
    -- | redirect:
    deleteCustomersCustomerSourcesIdResponseBody200Redirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
    -- | refund_address: The refund address of this bitcoin receiver.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200RefundAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | requirements:
    deleteCustomersCustomerSourcesIdResponseBody200Requirements :: (GHC.Maybe.Maybe AccountRequirements),
    -- | reusable: True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.
    deleteCustomersCustomerSourcesIdResponseBody200Reusable :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | routing_number: The routing transit number for the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200RoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | sepa_debit
    deleteCustomersCustomerSourcesIdResponseBody200SepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
    -- | settings: Options for customizing how the account functions within Stripe.
    deleteCustomersCustomerSourcesIdResponseBody200Settings :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Settings'),
    -- | sofort
    deleteCustomersCustomerSourcesIdResponseBody200Sofort :: (GHC.Maybe.Maybe SourceTypeSofort),
    -- | source_order:
    deleteCustomersCustomerSourcesIdResponseBody200SourceOrder :: (GHC.Maybe.Maybe SourceOrder),
    -- | statement_descriptor: Extra information about a source. This will appear on your customer\'s statement every time you charge the source.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200StatementDescriptor :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a transfer sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send transfers until the bank details are updated.
    --
    -- For external accounts, possible values are \`new\` and \`errored\`. Validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply. If a transfer fails, the status is set to \`errored\` and transfers are stopped until account details are updated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | three_d_secure
    deleteCustomersCustomerSourcesIdResponseBody200ThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
    -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200TokenizationMethod :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tos_acceptance:
    deleteCustomersCustomerSourcesIdResponseBody200TosAcceptance :: (GHC.Maybe.Maybe AccountTosAcceptance),
    -- | transactions: A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
    deleteCustomersCustomerSourcesIdResponseBody200Transactions :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Transactions'),
    -- | type: The Stripe account type. Can be \`standard\`, \`express\`, or \`custom\`.
    deleteCustomersCustomerSourcesIdResponseBody200Type :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Type'),
    -- | uncaptured_funds: This receiver contains uncaptured funds that can be used for a payment or refunded.
    deleteCustomersCustomerSourcesIdResponseBody200UncapturedFunds :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | usage: Either \`reusable\` or \`single_use\`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Usage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | used: Whether this Alipay account object has ever been used for a payment.
    deleteCustomersCustomerSourcesIdResponseBody200Used :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | used_for_payment: Indicate if this source is used for payment.
    deleteCustomersCustomerSourcesIdResponseBody200UsedForPayment :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | username: The username for the Alipay account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Username :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | wechat
    deleteCustomersCustomerSourcesIdResponseBody200Wechat :: (GHC.Maybe.Maybe SourceTypeWechat)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object ("account" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Account obj : "account_holder_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AccountHolderName obj : "account_holder_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AccountHolderType obj : "ach_credit_transfer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AchCreditTransfer obj : "ach_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AchDebit obj : "acss_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AcssDebit obj : "active" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Active obj : "address_city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressCity obj : "address_country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressCountry obj : "address_line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressLine1 obj : "address_line1_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressLine1Check obj : "address_line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressLine2 obj : "address_state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressState obj : "address_zip" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressZip obj : "address_zip_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressZipCheck obj : "alipay" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Alipay obj : "amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Amount obj : "amount_received" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AmountReceived obj : "au_becs_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AuBecsDebit obj : "available_payout_methods" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods obj : "bancontact" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Bancontact obj : "bank_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BankName obj : "bitcoin_amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BitcoinAmount obj : "bitcoin_amount_received" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BitcoinAmountReceived obj : "bitcoin_uri" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BitcoinUri obj : "brand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Brand obj : "business_profile" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile obj : "business_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessType obj : "capabilities" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Capabilities obj : "card" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Card obj : "card_present" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200CardPresent obj : "charges_enabled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ChargesEnabled obj : "client_secret" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ClientSecret obj : "code_verification" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200CodeVerification obj : "company" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Company obj : "controller" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Controller obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Country obj : "created" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Created obj : "currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Currency obj : "customer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Customer obj : "cvc_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200CvcCheck obj : "default_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200DefaultCurrency obj : "default_for_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200DefaultForCurrency obj : "description" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Description obj : "details_submitted" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200DetailsSubmitted obj : "dynamic_last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200DynamicLast4 obj : "email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Email obj : "eps" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Eps obj : "exp_month" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExpYear obj : "external_accounts" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts obj : "filled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Filled obj : "fingerprint" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Fingerprint obj : "flow" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Flow obj : "funding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Funding obj : "giropay" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Giropay obj : "id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Id obj : "ideal" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Ideal obj : "inbound_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200InboundAddress obj : "individual" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Individual obj : "klarna" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Klarna obj : "last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Last4 obj : "livemode" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Livemode obj : "metadata" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Metadata obj : "multibanco" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Multibanco obj : "name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Name obj : "object" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Object obj : "owner" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner obj : "p24" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200P24 obj : "payment" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Payment obj : "payment_amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200PaymentAmount obj : "payment_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200PaymentCurrency obj : "payouts_enabled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200PayoutsEnabled obj : "receiver" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Receiver obj : "recipient" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Recipient obj : "redirect" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Redirect obj : "refund_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200RefundAddress obj : "requirements" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Requirements obj : "reusable" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Reusable obj : "routing_number" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200RoutingNumber obj : "sepa_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200SepaDebit obj : "settings" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings obj : "sofort" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Sofort obj : "source_order" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200SourceOrder obj : "statement_descriptor" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200StatementDescriptor obj : "status" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Status obj : "three_d_secure" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ThreeDSecure obj : "tokenization_method" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200TokenizationMethod obj : "tos_acceptance" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200TosAcceptance obj : "transactions" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Transactions obj : "type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Type obj : "uncaptured_funds" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200UncapturedFunds obj : "usage" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Usage obj : "used" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Used obj : "used_for_payment" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200UsedForPayment obj : "username" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Username obj : "wechat" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Wechat obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Account obj) GHC.Base.<> (("account_holder_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AccountHolderName obj) GHC.Base.<> (("account_holder_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AccountHolderType obj) GHC.Base.<> (("ach_credit_transfer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AchCreditTransfer obj) GHC.Base.<> (("ach_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AchDebit obj) GHC.Base.<> (("acss_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AcssDebit obj) GHC.Base.<> (("active" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Active obj) GHC.Base.<> (("address_city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressCity obj) GHC.Base.<> (("address_country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressCountry obj) GHC.Base.<> (("address_line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressLine1 obj) GHC.Base.<> (("address_line1_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressLine1Check obj) GHC.Base.<> (("address_line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressLine2 obj) GHC.Base.<> (("address_state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressState obj) GHC.Base.<> (("address_zip" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressZip obj) GHC.Base.<> (("address_zip_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AddressZipCheck obj) GHC.Base.<> (("alipay" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Alipay obj) GHC.Base.<> (("amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Amount obj) GHC.Base.<> (("amount_received" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AmountReceived obj) GHC.Base.<> (("au_becs_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AuBecsDebit obj) GHC.Base.<> (("available_payout_methods" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods obj) GHC.Base.<> (("bancontact" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Bancontact obj) GHC.Base.<> (("bank_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BankName obj) GHC.Base.<> (("bitcoin_amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BitcoinAmount obj) GHC.Base.<> (("bitcoin_amount_received" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BitcoinAmountReceived obj) GHC.Base.<> (("bitcoin_uri" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BitcoinUri obj) GHC.Base.<> (("brand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Brand obj) GHC.Base.<> (("business_profile" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile obj) GHC.Base.<> (("business_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessType obj) GHC.Base.<> (("capabilities" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Capabilities obj) GHC.Base.<> (("card" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Card obj) GHC.Base.<> (("card_present" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200CardPresent obj) GHC.Base.<> (("charges_enabled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ChargesEnabled obj) GHC.Base.<> (("client_secret" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ClientSecret obj) GHC.Base.<> (("code_verification" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200CodeVerification obj) GHC.Base.<> (("company" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Company obj) GHC.Base.<> (("controller" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Controller obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Country obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Created obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Currency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Customer obj) GHC.Base.<> (("cvc_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200CvcCheck obj) GHC.Base.<> (("default_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200DefaultCurrency obj) GHC.Base.<> (("default_for_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200DefaultForCurrency obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Description obj) GHC.Base.<> (("details_submitted" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200DetailsSubmitted obj) GHC.Base.<> (("dynamic_last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200DynamicLast4 obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Email obj) GHC.Base.<> (("eps" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Eps obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExpYear obj) GHC.Base.<> (("external_accounts" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts obj) GHC.Base.<> (("filled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Filled obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Fingerprint obj) GHC.Base.<> (("flow" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Flow obj) GHC.Base.<> (("funding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Funding obj) GHC.Base.<> (("giropay" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Giropay obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Id obj) GHC.Base.<> (("ideal" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Ideal obj) GHC.Base.<> (("inbound_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200InboundAddress obj) GHC.Base.<> (("individual" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Individual obj) GHC.Base.<> (("klarna" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Klarna obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Last4 obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Livemode obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Metadata obj) GHC.Base.<> (("multibanco" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Multibanco obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Name obj) GHC.Base.<> (("object" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Object obj) GHC.Base.<> (("owner" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner obj) GHC.Base.<> (("p24" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200P24 obj) GHC.Base.<> (("payment" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Payment obj) GHC.Base.<> (("payment_amount" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200PaymentAmount obj) GHC.Base.<> (("payment_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200PaymentCurrency obj) GHC.Base.<> (("payouts_enabled" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200PayoutsEnabled obj) GHC.Base.<> (("receiver" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Receiver obj) GHC.Base.<> (("recipient" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Recipient obj) GHC.Base.<> (("redirect" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Redirect obj) GHC.Base.<> (("refund_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200RefundAddress obj) GHC.Base.<> (("requirements" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Requirements obj) GHC.Base.<> (("reusable" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Reusable obj) GHC.Base.<> (("routing_number" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200RoutingNumber obj) GHC.Base.<> (("sepa_debit" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200SepaDebit obj) GHC.Base.<> (("settings" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings obj) GHC.Base.<> (("sofort" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Sofort obj) GHC.Base.<> (("source_order" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200SourceOrder obj) GHC.Base.<> (("statement_descriptor" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200StatementDescriptor obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Status obj) GHC.Base.<> (("three_d_secure" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ThreeDSecure obj) GHC.Base.<> (("tokenization_method" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200TokenizationMethod obj) GHC.Base.<> (("tos_acceptance" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200TosAcceptance obj) GHC.Base.<> (("transactions" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Transactions obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Type obj) GHC.Base.<> (("uncaptured_funds" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200UncapturedFunds obj) GHC.Base.<> (("usage" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Usage obj) GHC.Base.<> (("used" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Used obj) GHC.Base.<> (("used_for_payment" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200UsedForPayment obj) GHC.Base.<> (("username" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Username obj) GHC.Base.<> ("wechat" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Wechat obj)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200" (\obj -> ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "au_becs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_uri")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_profile")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "capabilities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charges_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "controller")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details_submitted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "external_accounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "individual")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reusable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tos_acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncaptured_funds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used_for_payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200 :: DeleteCustomersCustomerSourcesIdResponseBody200
mkDeleteCustomersCustomerSourcesIdResponseBody200 =
  DeleteCustomersCustomerSourcesIdResponseBody200
    { deleteCustomersCustomerSourcesIdResponseBody200Account = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AccountHolderName = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AccountHolderType = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AchCreditTransfer = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AchDebit = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AcssDebit = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Active = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AddressCity = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AddressCountry = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AddressLine1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AddressLine1Check = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AddressLine2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AddressState = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AddressZip = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AddressZipCheck = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Alipay = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Amount = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AmountReceived = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AuBecsDebit = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Bancontact = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BankName = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BitcoinAmount = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BitcoinAmountReceived = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BitcoinUri = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Brand = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessType = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Capabilities = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Card = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200CardPresent = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ChargesEnabled = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ClientSecret = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200CodeVerification = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Company = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Controller = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Created = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Currency = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Customer = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200CvcCheck = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200DefaultCurrency = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200DefaultForCurrency = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Description = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200DetailsSubmitted = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200DynamicLast4 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Email = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Eps = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExpMonth = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExpYear = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Filled = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Fingerprint = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Flow = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Funding = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Giropay = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Id = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Ideal = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200InboundAddress = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Individual = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Klarna = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Last4 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Livemode = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Metadata = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Multibanco = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Name = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Object = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200P24 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Payment = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200PaymentAmount = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200PaymentCurrency = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200PayoutsEnabled = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Receiver = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Recipient = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Redirect = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200RefundAddress = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Requirements = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Reusable = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200RoutingNumber = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200SepaDebit = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Settings = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Sofort = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200SourceOrder = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200StatementDescriptor = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Status = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ThreeDSecure = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200TokenizationMethod = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200TosAcceptance = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Transactions = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Type = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200UncapturedFunds = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Usage = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Used = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200UsedForPayment = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Username = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Wechat = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data DeleteCustomersCustomerSourcesIdResponseBody200Account'Variants
  = DeleteCustomersCustomerSourcesIdResponseBody200Account'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerSourcesIdResponseBody200Account'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Account'Variants where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Account'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Account'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Account'Variants where
  parseJSON val = case (DeleteCustomersCustomerSourcesIdResponseBody200Account'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerSourcesIdResponseBody200Account'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.available_payout_methods.items@ in the specification.
data DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'EnumInstant
  | -- | Represents the JSON value @"standard"@
    DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods' where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'Other val) = val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'EnumInstant) = "instant"
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "instant" -> DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'EnumInstant
            | val GHC.Classes.== "standard" -> DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'EnumStandard
            | GHC.Base.otherwise -> DeleteCustomersCustomerSourcesIdResponseBody200AvailablePayoutMethods'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.business_profile.anyOf@ in the specification.
--
-- Business information about the account.
data DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile' = DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'
  { -- | mcc: [The merchant category code for the account](https:\/\/stripe.com\/docs\/connect\/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Mcc :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name: The customer-facing business name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | product_description: Internal-only description of the product sold or service provided by the business. It\'s used by Stripe for risk and underwriting purposes.
    --
    -- Constraints:
    --
    -- * Maximum length of 40000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'ProductDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | support_address: A publicly available mailing address for sending support issues to.
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'),
    -- | support_email: A publicly available email address for sending support issues to.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | support_phone: A publicly available phone number to call with support issues.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportPhone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | support_url: A publicly available website for handling support issues.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | url: The business\'s publicly available website.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile' where
  toJSON obj = Data.Aeson.Types.Internal.object ("mcc" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Mcc obj : "name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Name obj : "product_description" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'ProductDescription obj : "support_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress obj : "support_email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportEmail obj : "support_phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportPhone obj : "support_url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportUrl obj : "url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Url obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("mcc" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Mcc obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Name obj) GHC.Base.<> (("product_description" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'ProductDescription obj) GHC.Base.<> (("support_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress obj) GHC.Base.<> (("support_email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportEmail obj) GHC.Base.<> (("support_phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportPhone obj) GHC.Base.<> (("support_url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportUrl obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Url obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'" (\obj -> (((((((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mcc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile' :: DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'
mkDeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile' =
  DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'
    { deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Mcc = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Name = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'ProductDescription = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportEmail = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportPhone = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportUrl = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'Url = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.business_profile.anyOf.properties.support_address.anyOf@ in the specification.
--
-- A publicly available mailing address for sending support issues to.
data DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress' = DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'City obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Country obj : "line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'" (\obj -> (((((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress' :: DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'
mkDeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress' =
  DeleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'
    { deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'City = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Line1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'Line2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'PostalCode = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200BusinessProfile'SupportAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.business_type@ in the specification.
--
-- The business type.
data DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumCompany
  | -- | Represents the JSON value @"government_entity"@
    DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumGovernmentEntity
  | -- | Represents the JSON value @"individual"@
    DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumIndividual
  | -- | Represents the JSON value @"non_profit"@
    DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumNonProfit
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200BusinessType' where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'Other val) = val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumCompany) = "company"
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumGovernmentEntity) = "government_entity"
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumIndividual) = "individual"
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumNonProfit) = "non_profit"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200BusinessType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "company" -> DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumCompany
            | val GHC.Classes.== "government_entity" -> DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumGovernmentEntity
            | val GHC.Classes.== "individual" -> DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumIndividual
            | val GHC.Classes.== "non_profit" -> DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'EnumNonProfit
            | GHC.Base.otherwise -> DeleteCustomersCustomerSourcesIdResponseBody200BusinessType'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer associated with this Alipay Account.
data DeleteCustomersCustomerSourcesIdResponseBody200Customer'Variants
  = DeleteCustomersCustomerSourcesIdResponseBody200Customer'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerSourcesIdResponseBody200Customer'Customer Customer
  | DeleteCustomersCustomerSourcesIdResponseBody200Customer'DeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Customer'Variants where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Customer'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Customer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Customer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Customer'Variants where
  parseJSON val = case (DeleteCustomersCustomerSourcesIdResponseBody200Customer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerSourcesIdResponseBody200Customer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerSourcesIdResponseBody200Customer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts@ in the specification.
--
-- External accounts (bank accounts and debit cards) currently attached to this account
data DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts' = DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'
  { -- | data: The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data :: ([DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data']),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts' where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data obj : "has_more" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'HasMore obj : "url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'" (\obj -> ((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts' ::
  -- | 'deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'
  [DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'] ->
  -- | 'deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'HasMore'
  GHC.Types.Bool ->
  -- | 'deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Url'
  Data.Text.Internal.Text ->
  DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'
mkDeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts' deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'HasMore deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Url =
  DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'
    { deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data = deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'HasMore = deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'HasMore,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Url = deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Url
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf@ in the specification.
data DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data' = DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'
  { -- | account: The ID of the account that the bank account is associated with.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Variants),
    -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AccountHolderType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_city: City\/District\/Suburb\/Town\/Village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_country: Billing address country, if provided when creating card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine1Check :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_state: State\/County\/Province\/Region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_zip: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressZipCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | available_payout_methods: A set of available payout methods for this bank account. Only values from this set should be passed as the \`method\` when creating a payout.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'])),
    -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'BankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter ISO code representing the country the bank account is located in.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The ID of the customer that the bank account is associated with.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Variants),
    -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`. A result of unchecked indicates that CVC was provided but hasn\'t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https:\/\/support.stripe.com\/questions\/check-if-a-card-is-valid-without-a-charge).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'CvcCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | default_for_currency: Whether this bank account is the default external account for its currency.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'DynamicLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Fingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last4: The last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | name: Cardholder name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | object: String representing the object\'s type. Objects of the same type share the same value.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'),
    -- | recipient: The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Variants),
    -- | routing_number: The routing transit number for the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'RoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a transfer sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send transfers until the bank details are updated.
    --
    -- For external accounts, possible values are \`new\` and \`errored\`. Validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply. If a transfer fails, the status is set to \`errored\` and transfers are stopped until account details are updated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'TokenizationMethod :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data' where
  toJSON obj = Data.Aeson.Types.Internal.object ("account" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account obj : "account_holder_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AccountHolderName obj : "account_holder_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AccountHolderType obj : "address_city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressCity obj : "address_country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressCountry obj : "address_line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine1 obj : "address_line1_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine1Check obj : "address_line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine2 obj : "address_state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressState obj : "address_zip" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressZip obj : "address_zip_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressZipCheck obj : "available_payout_methods" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods obj : "bank_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'BankName obj : "brand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Brand obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Country obj : "currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Currency obj : "customer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer obj : "cvc_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'CvcCheck obj : "default_for_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'DefaultForCurrency obj : "dynamic_last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'DynamicLast4 obj : "exp_month" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'ExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'ExpYear obj : "fingerprint" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Fingerprint obj : "funding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Funding obj : "id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Id obj : "last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Last4 obj : "metadata" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Metadata obj : "name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Name obj : "object" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object obj : "recipient" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient obj : "routing_number" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'RoutingNumber obj : "status" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Status obj : "tokenization_method" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'TokenizationMethod obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account obj) GHC.Base.<> (("account_holder_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AccountHolderName obj) GHC.Base.<> (("account_holder_type" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AccountHolderType obj) GHC.Base.<> (("address_city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressCity obj) GHC.Base.<> (("address_country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressCountry obj) GHC.Base.<> (("address_line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine1 obj) GHC.Base.<> (("address_line1_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine1Check obj) GHC.Base.<> (("address_line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine2 obj) GHC.Base.<> (("address_state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressState obj) GHC.Base.<> (("address_zip" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressZip obj) GHC.Base.<> (("address_zip_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressZipCheck obj) GHC.Base.<> (("available_payout_methods" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods obj) GHC.Base.<> (("bank_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'BankName obj) GHC.Base.<> (("brand" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Brand obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Country obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Currency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer obj) GHC.Base.<> (("cvc_check" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'CvcCheck obj) GHC.Base.<> (("default_for_currency" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'DefaultForCurrency obj) GHC.Base.<> (("dynamic_last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'DynamicLast4 obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'ExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'ExpYear obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Fingerprint obj) GHC.Base.<> (("funding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Funding obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Id obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Last4 obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Metadata obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Name obj) GHC.Base.<> (("object" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object obj) GHC.Base.<> (("recipient" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient obj) GHC.Base.<> (("routing_number" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'RoutingNumber obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Status obj) GHC.Base.<> ("tokenization_method" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'TokenizationMethod obj)))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'" (\obj -> ((((((((((((((((((((((((((((((((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data' :: DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'
mkDeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data' =
  DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'
    { deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AccountHolderName = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AccountHolderType = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressCity = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressCountry = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine1Check = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressLine2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressState = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressZip = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AddressZipCheck = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'BankName = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Brand = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Currency = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'CvcCheck = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'DefaultForCurrency = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'DynamicLast4 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'ExpMonth = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'ExpYear = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Fingerprint = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Funding = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Id = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Last4 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Metadata = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Name = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'RoutingNumber = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Status = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'TokenizationMethod = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Variants
  = DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Variants where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Variants where
  parseJSON val = case (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Account'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.available_payout_methods.items@ in the specification.
data DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumInstant
  | -- | Represents the JSON value @"standard"@
    DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods' where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Other val) = val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumInstant) = "instant"
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "instant" -> DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumInstant
            | val GHC.Classes.== "standard" -> DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'EnumStandard
            | GHC.Base.otherwise -> DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'AvailablePayoutMethods'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer that the bank account is associated with.
data DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Variants
  = DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Customer Customer
  | DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'DeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Variants where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Variants where
  parseJSON val = case (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Customer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.object@ in the specification.
--
-- String representing the object\'s type. Objects of the same type share the same value.
data DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_account"@
    DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'EnumBankAccount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object' where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'Other val) = val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'EnumBankAccount) = "bank_account"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "bank_account" -> DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'EnumBankAccount
            | GHC.Base.otherwise -> DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Object'Other val
      )

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.recipient.anyOf@ in the specification.
--
-- The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
data DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Variants
  = DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Recipient Recipient
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Variants where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Recipient a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Variants where
  parseJSON val = case (DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerSourcesIdResponseBody200ExternalAccounts'Data'Recipient'Recipient Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.object@ in the specification.
--
-- String representing the object\'s type. Objects of the same type share the same value.
data DeleteCustomersCustomerSourcesIdResponseBody200Object'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerSourcesIdResponseBody200Object'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerSourcesIdResponseBody200Object'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"account"@
    DeleteCustomersCustomerSourcesIdResponseBody200Object'EnumAccount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Object' where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Object'Other val) = val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Object'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Object'EnumAccount) = "account"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "account" -> DeleteCustomersCustomerSourcesIdResponseBody200Object'EnumAccount
            | GHC.Base.otherwise -> DeleteCustomersCustomerSourcesIdResponseBody200Object'Other val
      )

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.owner.anyOf@ in the specification.
--
-- Information about the owner of the payment instrument that may be used or required by particular source types.
data DeleteCustomersCustomerSourcesIdResponseBody200Owner' = DeleteCustomersCustomerSourcesIdResponseBody200Owner'
  { -- | address: Owner\'s address.
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Address :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address'),
    -- | email: Owner\'s email address.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name: Owner\'s full name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone: Owner\'s phone number (including extension).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verified_address: Verified owner\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress :: (GHC.Maybe.Maybe DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'),
    -- | verified_email: Verified owner\'s email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verified_name: Verified owner\'s full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verified_phone: Verified owner\'s phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedPhone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Owner' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address obj : "email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Email obj : "name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Name obj : "phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Phone obj : "verified_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress obj : "verified_email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedEmail obj : "verified_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedName obj : "verified_phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedPhone obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Email obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Name obj) GHC.Base.<> (("phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Phone obj) GHC.Base.<> (("verified_address" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress obj) GHC.Base.<> (("verified_email" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedEmail obj) GHC.Base.<> (("verified_name" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedName obj) GHC.Base.<> ("verified_phone" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedPhone obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Owner' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200Owner'" (\obj -> (((((((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200Owner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200Owner'' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200Owner' :: DeleteCustomersCustomerSourcesIdResponseBody200Owner'
mkDeleteCustomersCustomerSourcesIdResponseBody200Owner' =
  DeleteCustomersCustomerSourcesIdResponseBody200Owner'
    { deleteCustomersCustomerSourcesIdResponseBody200Owner'Address = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'Email = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'Name = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'Phone = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedEmail = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedName = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedPhone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.owner.anyOf.properties.address.anyOf@ in the specification.
--
-- Owner\\\'s address.
data DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address' = DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address'
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'City obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Country obj : "line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address'" (\obj -> (((((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address'' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200Owner'Address' :: DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address'
mkDeleteCustomersCustomerSourcesIdResponseBody200Owner'Address' =
  DeleteCustomersCustomerSourcesIdResponseBody200Owner'Address'
    { deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'City = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Line1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'Line2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'PostalCode = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'Address'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.owner.anyOf.properties.verified_address.anyOf@ in the specification.
--
-- Verified owner\\\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
data DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress' = DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'City obj : "country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Country obj : "line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'" (\obj -> (((((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress' :: DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'
mkDeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress' =
  DeleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'
    { deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'City = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Country = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Line1 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'Line2 = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'PostalCode = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Owner'VerifiedAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.recipient.anyOf@ in the specification.
--
-- The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
data DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Variants
  = DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Text Data.Text.Internal.Text
  | DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Recipient Recipient
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Variants where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Recipient a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Variants where
  parseJSON val = case (DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((DeleteCustomersCustomerSourcesIdResponseBody200Recipient'Recipient Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.settings.anyOf@ in the specification.
--
-- Options for customizing how the account functions within Stripe.
data DeleteCustomersCustomerSourcesIdResponseBody200Settings' = DeleteCustomersCustomerSourcesIdResponseBody200Settings'
  { -- | bacs_debit_payments:
    deleteCustomersCustomerSourcesIdResponseBody200Settings'BacsDebitPayments :: (GHC.Maybe.Maybe AccountBacsDebitPaymentsSettings),
    -- | branding:
    deleteCustomersCustomerSourcesIdResponseBody200Settings'Branding :: (GHC.Maybe.Maybe AccountBrandingSettings),
    -- | card_issuing:
    deleteCustomersCustomerSourcesIdResponseBody200Settings'CardIssuing :: (GHC.Maybe.Maybe AccountCardIssuingSettings),
    -- | card_payments:
    deleteCustomersCustomerSourcesIdResponseBody200Settings'CardPayments :: (GHC.Maybe.Maybe AccountCardPaymentsSettings),
    -- | dashboard:
    deleteCustomersCustomerSourcesIdResponseBody200Settings'Dashboard :: (GHC.Maybe.Maybe AccountDashboardSettings),
    -- | payments:
    deleteCustomersCustomerSourcesIdResponseBody200Settings'Payments :: (GHC.Maybe.Maybe AccountPaymentsSettings),
    -- | payouts:
    deleteCustomersCustomerSourcesIdResponseBody200Settings'Payouts :: (GHC.Maybe.Maybe AccountPayoutSettings),
    -- | sepa_debit_payments:
    deleteCustomersCustomerSourcesIdResponseBody200Settings'SepaDebitPayments :: (GHC.Maybe.Maybe AccountSepaDebitPaymentsSettings)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Settings' where
  toJSON obj = Data.Aeson.Types.Internal.object ("bacs_debit_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'BacsDebitPayments obj : "branding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'Branding obj : "card_issuing" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'CardIssuing obj : "card_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'CardPayments obj : "dashboard" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'Dashboard obj : "payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'Payments obj : "payouts" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'Payouts obj : "sepa_debit_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'SepaDebitPayments obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bacs_debit_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'BacsDebitPayments obj) GHC.Base.<> (("branding" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'Branding obj) GHC.Base.<> (("card_issuing" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'CardIssuing obj) GHC.Base.<> (("card_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'CardPayments obj) GHC.Base.<> (("dashboard" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'Dashboard obj) GHC.Base.<> (("payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'Payments obj) GHC.Base.<> (("payouts" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'Payouts obj) GHC.Base.<> ("sepa_debit_payments" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Settings'SepaDebitPayments obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Settings' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200Settings'" (\obj -> (((((((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200Settings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bacs_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "branding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_issuing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dashboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit_payments"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200Settings'' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200Settings' :: DeleteCustomersCustomerSourcesIdResponseBody200Settings'
mkDeleteCustomersCustomerSourcesIdResponseBody200Settings' =
  DeleteCustomersCustomerSourcesIdResponseBody200Settings'
    { deleteCustomersCustomerSourcesIdResponseBody200Settings'BacsDebitPayments = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Settings'Branding = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Settings'CardIssuing = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Settings'CardPayments = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Settings'Dashboard = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Settings'Payments = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Settings'Payouts = GHC.Maybe.Nothing,
      deleteCustomersCustomerSourcesIdResponseBody200Settings'SepaDebitPayments = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.transactions@ in the specification.
--
-- A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
data DeleteCustomersCustomerSourcesIdResponseBody200Transactions' = DeleteCustomersCustomerSourcesIdResponseBody200Transactions'
  { -- | data: Details about each object.
    deleteCustomersCustomerSourcesIdResponseBody200Transactions'Data :: ([BitcoinTransaction]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    deleteCustomersCustomerSourcesIdResponseBody200Transactions'HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSourcesIdResponseBody200Transactions'Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Transactions' where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Transactions'Data obj : "has_more" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Transactions'HasMore obj : "url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Transactions'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Transactions'Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Transactions'HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSourcesIdResponseBody200Transactions'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Transactions' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSourcesIdResponseBody200Transactions'" (\obj -> ((GHC.Base.pure DeleteCustomersCustomerSourcesIdResponseBody200Transactions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'DeleteCustomersCustomerSourcesIdResponseBody200Transactions'' with all required fields.
mkDeleteCustomersCustomerSourcesIdResponseBody200Transactions' ::
  -- | 'deleteCustomersCustomerSourcesIdResponseBody200Transactions'Data'
  [BitcoinTransaction] ->
  -- | 'deleteCustomersCustomerSourcesIdResponseBody200Transactions'HasMore'
  GHC.Types.Bool ->
  -- | 'deleteCustomersCustomerSourcesIdResponseBody200Transactions'Url'
  Data.Text.Internal.Text ->
  DeleteCustomersCustomerSourcesIdResponseBody200Transactions'
mkDeleteCustomersCustomerSourcesIdResponseBody200Transactions' deleteCustomersCustomerSourcesIdResponseBody200Transactions'Data deleteCustomersCustomerSourcesIdResponseBody200Transactions'HasMore deleteCustomersCustomerSourcesIdResponseBody200Transactions'Url =
  DeleteCustomersCustomerSourcesIdResponseBody200Transactions'
    { deleteCustomersCustomerSourcesIdResponseBody200Transactions'Data = deleteCustomersCustomerSourcesIdResponseBody200Transactions'Data,
      deleteCustomersCustomerSourcesIdResponseBody200Transactions'HasMore = deleteCustomersCustomerSourcesIdResponseBody200Transactions'HasMore,
      deleteCustomersCustomerSourcesIdResponseBody200Transactions'Url = deleteCustomersCustomerSourcesIdResponseBody200Transactions'Url
    }

-- | Defines the enum schema located at @paths.\/v1\/customers\/{customer}\/sources\/{id}.DELETE.responses.200.content.application\/json.schema.anyOf.anyOf.properties.type@ in the specification.
--
-- The Stripe account type. Can be \`standard\`, \`express\`, or \`custom\`.
data DeleteCustomersCustomerSourcesIdResponseBody200Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    DeleteCustomersCustomerSourcesIdResponseBody200Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    DeleteCustomersCustomerSourcesIdResponseBody200Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"custom"@
    DeleteCustomersCustomerSourcesIdResponseBody200Type'EnumCustom
  | -- | Represents the JSON value @"express"@
    DeleteCustomersCustomerSourcesIdResponseBody200Type'EnumExpress
  | -- | Represents the JSON value @"standard"@
    DeleteCustomersCustomerSourcesIdResponseBody200Type'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSourcesIdResponseBody200Type' where
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Type'Other val) = val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Type'EnumCustom) = "custom"
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Type'EnumExpress) = "express"
  toJSON (DeleteCustomersCustomerSourcesIdResponseBody200Type'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSourcesIdResponseBody200Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "custom" -> DeleteCustomersCustomerSourcesIdResponseBody200Type'EnumCustom
            | val GHC.Classes.== "express" -> DeleteCustomersCustomerSourcesIdResponseBody200Type'EnumExpress
            | val GHC.Classes.== "standard" -> DeleteCustomersCustomerSourcesIdResponseBody200Type'EnumStandard
            | GHC.Base.otherwise -> DeleteCustomersCustomerSourcesIdResponseBody200Type'Other val
      )
