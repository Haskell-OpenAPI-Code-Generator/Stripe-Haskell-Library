{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getInvoicesSearch
module StripeAPI.Operations.GetInvoicesSearch where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/invoices/search
--
-- \<p>Search for invoices you’ve previously created using Stripe’s \<a href=\"\/docs\/search\#search-query-language\">Search Query Language\<\/a>.
-- Don’t use search in read-after-write flows where strict consistency is necessary. Under normal operating
-- conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be up
-- to an hour behind during outages. Search functionality is not available to merchants in India.\<\/p>
getInvoicesSearch ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetInvoicesSearchParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetInvoicesSearchResponse)
getInvoicesSearch parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetInvoicesSearchResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetInvoicesSearchResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            GetInvoicesSearchResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetInvoicesSearchResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either
                                                            GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/invoices/search")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicesSearchParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicesSearchParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "page") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getInvoicesSearchParametersQueryPage parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "query") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getInvoicesSearchParametersQueryQuery parameters)) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/invoices\/search.GET.parameters@ in the specification.
data GetInvoicesSearchParameters = GetInvoicesSearchParameters
  { -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getInvoicesSearchParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getInvoicesSearchParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryPage: Represents the parameter named \'page\'
    --
    -- A cursor for pagination across multiple pages of results. Don\'t include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getInvoicesSearchParametersQueryPage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryQuery: Represents the parameter named \'query\'
    --
    -- The search query string. See [search query language](https:\/\/stripe.com\/docs\/search\#search-query-language) and the list of supported [query fields for invoices](https:\/\/stripe.com\/docs\/search\#query-fields-for-invoices).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getInvoicesSearchParametersQueryQuery :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicesSearchParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchParametersQueryPage obj) : ["queryQuery" Data.Aeson.Types.ToJSON..= getInvoicesSearchParametersQueryQuery obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryPage" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchParametersQueryPage obj) : ["queryQuery" Data.Aeson.Types.ToJSON..= getInvoicesSearchParametersQueryQuery obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicesSearchParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoicesSearchParameters" (\obj -> (((GHC.Base.pure GetInvoicesSearchParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryPage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryQuery"))

-- | Create a new 'GetInvoicesSearchParameters' with all required fields.
mkGetInvoicesSearchParameters ::
  -- | 'getInvoicesSearchParametersQueryQuery'
  Data.Text.Internal.Text ->
  GetInvoicesSearchParameters
mkGetInvoicesSearchParameters getInvoicesSearchParametersQueryQuery =
  GetInvoicesSearchParameters
    { getInvoicesSearchParametersQueryExpand = GHC.Maybe.Nothing,
      getInvoicesSearchParametersQueryLimit = GHC.Maybe.Nothing,
      getInvoicesSearchParametersQueryPage = GHC.Maybe.Nothing,
      getInvoicesSearchParametersQueryQuery = getInvoicesSearchParametersQueryQuery
    }

-- | Represents a response of the operation 'getInvoicesSearch'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetInvoicesSearchResponseError' is used.
data GetInvoicesSearchResponse
  = -- | Means either no matching case available or a parse error
    GetInvoicesSearchResponseError GHC.Base.String
  | -- | Successful response.
    GetInvoicesSearchResponse200 GetInvoicesSearchResponseBody200
  | -- | Error response.
    GetInvoicesSearchResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/invoices\/search.GET.responses.200.content.application\/json.schema@ in the specification.
data GetInvoicesSearchResponseBody200 = GetInvoicesSearchResponseBody200
  { -- | data
    getInvoicesSearchResponseBody200Data :: ([Invoice]),
    -- | has_more
    getInvoicesSearchResponseBody200HasMore :: GHC.Types.Bool,
    -- | next_page
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getInvoicesSearchResponseBody200NextPage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | total_count: The total number of objects that match the query, only accurate up to 10,000.
    getInvoicesSearchResponseBody200TotalCount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | url
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getInvoicesSearchResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetInvoicesSearchResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getInvoicesSearchResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getInvoicesSearchResponseBody200HasMore obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_page" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchResponseBody200NextPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_count" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchResponseBody200TotalCount obj) : ["url" Data.Aeson.Types.ToJSON..= getInvoicesSearchResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "search_result"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getInvoicesSearchResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getInvoicesSearchResponseBody200HasMore obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_page" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchResponseBody200NextPage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total_count" Data.Aeson.Types.ToJSON..=)) (getInvoicesSearchResponseBody200TotalCount obj) : ["url" Data.Aeson.Types.ToJSON..= getInvoicesSearchResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "search_result"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetInvoicesSearchResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetInvoicesSearchResponseBody200" (\obj -> ((((GHC.Base.pure GetInvoicesSearchResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "next_page")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "total_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetInvoicesSearchResponseBody200' with all required fields.
mkGetInvoicesSearchResponseBody200 ::
  -- | 'getInvoicesSearchResponseBody200Data'
  [Invoice] ->
  -- | 'getInvoicesSearchResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getInvoicesSearchResponseBody200Url'
  Data.Text.Internal.Text ->
  GetInvoicesSearchResponseBody200
mkGetInvoicesSearchResponseBody200 getInvoicesSearchResponseBody200Data getInvoicesSearchResponseBody200HasMore getInvoicesSearchResponseBody200Url =
  GetInvoicesSearchResponseBody200
    { getInvoicesSearchResponseBody200Data = getInvoicesSearchResponseBody200Data,
      getInvoicesSearchResponseBody200HasMore = getInvoicesSearchResponseBody200HasMore,
      getInvoicesSearchResponseBody200NextPage = GHC.Maybe.Nothing,
      getInvoicesSearchResponseBody200TotalCount = GHC.Maybe.Nothing,
      getInvoicesSearchResponseBody200Url = getInvoicesSearchResponseBody200Url
    }
