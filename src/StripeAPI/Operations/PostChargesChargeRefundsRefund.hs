{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation postChargesChargeRefundsRefund
module StripeAPI.Operations.PostChargesChargeRefundsRefund where

import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > POST /v1/charges/{charge}/refunds/{refund}
--
-- \<p>Update a specified refund.\<\/p>
postChargesChargeRefundsRefund ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostChargesChargeRefundsRefundParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe PostChargesChargeRefundsRefundRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response PostChargesChargeRefundsRefundResponse)
postChargesChargeRefundsRefund
  parameters
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either PostChargesChargeRefundsRefundResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostChargesChargeRefundsRefundResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Refund
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostChargesChargeRefundsRefundResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/charges/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postChargesChargeRefundsRefundParametersPathCharge parameters))) GHC.Base.++ ("/refunds/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postChargesChargeRefundsRefundParametersPathRefund parameters))) GHC.Base.++ ""))))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the data type for the schema postChargesChargeRefundsRefundParameters
data PostChargesChargeRefundsRefundParameters
  = PostChargesChargeRefundsRefundParameters
      { -- | pathCharge: Represents the parameter named \'charge\'
        postChargesChargeRefundsRefundParametersPathCharge :: Data.Text.Internal.Text,
        -- | pathRefund: Represents the parameter named \'refund\'
        postChargesChargeRefundsRefundParametersPathRefund :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.ToJSON PostChargesChargeRefundsRefundParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "pathCharge" (postChargesChargeRefundsRefundParametersPathCharge obj) : (Data.Aeson..=) "pathRefund" (postChargesChargeRefundsRefundParametersPathRefund obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "pathCharge" (postChargesChargeRefundsRefundParametersPathCharge obj) GHC.Base.<> (Data.Aeson..=) "pathRefund" (postChargesChargeRefundsRefundParametersPathRefund obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundsRefundParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostChargesChargeRefundsRefundParameters" (\obj -> (GHC.Base.pure PostChargesChargeRefundsRefundParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathCharge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathRefund"))

-- | Defines the data type for the schema postChargesChargeRefundsRefundRequestBody
data PostChargesChargeRefundsRefundRequestBody
  = PostChargesChargeRefundsRefundRequestBody
      { -- | expand: Specifies which fields in the response should be expanded.
        postChargesChargeRefundsRefundRequestBodyExpand :: (GHC.Maybe.Maybe ([] Data.Text.Internal.Text)),
        -- | metadata
        postChargesChargeRefundsRefundRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.ToJSON PostChargesChargeRefundsRefundRequestBody where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "expand" (postChargesChargeRefundsRefundRequestBodyExpand obj) : (Data.Aeson..=) "metadata" (postChargesChargeRefundsRefundRequestBodyMetadata obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "expand" (postChargesChargeRefundsRefundRequestBodyExpand obj) GHC.Base.<> (Data.Aeson..=) "metadata" (postChargesChargeRefundsRefundRequestBodyMetadata obj))

instance Data.Aeson.Types.FromJSON.FromJSON PostChargesChargeRefundsRefundRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PostChargesChargeRefundsRefundRequestBody" (\obj -> (GHC.Base.pure PostChargesChargeRefundsRefundRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata"))

-- | Represents a response of the operation 'postChargesChargeRefundsRefund'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostChargesChargeRefundsRefundResponseError' is used.
data PostChargesChargeRefundsRefundResponse
  = -- | Means either no matching case available or a parse error
    PostChargesChargeRefundsRefundResponseError GHC.Base.String
  | -- | Successful response.
    PostChargesChargeRefundsRefundResponse200 Refund
  | -- | Error response.
    PostChargesChargeRefundsRefundResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | > POST /v1/charges/{charge}/refunds/{refund}
--
-- The same as 'postChargesChargeRefundsRefund' but accepts an explicit configuration.
postChargesChargeRefundsRefundWithConfiguration ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  StripeAPI.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostChargesChargeRefundsRefundParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe PostChargesChargeRefundsRefundRequestBody ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response PostChargesChargeRefundsRefundResponse)
postChargesChargeRefundsRefundWithConfiguration
  config
  parameters
  body =
    GHC.Base.fmap
      ( \response_2 ->
          GHC.Base.fmap
            ( Data.Either.either PostChargesChargeRefundsRefundResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if  | (\status_3 -> Network.HTTP.Types.Status.statusCode status_3 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostChargesChargeRefundsRefundResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Refund
                                                        )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     PostChargesChargeRefundsRefundResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either GHC.Base.String
                                                              Error
                                                        )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_2
            )
            response_2
      )
      (StripeAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/charges/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postChargesChargeRefundsRefundParametersPathCharge parameters))) GHC.Base.++ ("/refunds/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postChargesChargeRefundsRefundParametersPathRefund parameters))) GHC.Base.++ ""))))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | > POST /v1/charges/{charge}/refunds/{refund}
--
-- The same as 'postChargesChargeRefundsRefund' but returns the raw 'Data.ByteString.Char8.ByteString'.
postChargesChargeRefundsRefundRaw ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  PostChargesChargeRefundsRefundParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe PostChargesChargeRefundsRefundRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postChargesChargeRefundsRefundRaw
  parameters
  body = GHC.Base.id (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/charges/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postChargesChargeRefundsRefundParametersPathCharge parameters))) GHC.Base.++ ("/refunds/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postChargesChargeRefundsRefundParametersPathRefund parameters))) GHC.Base.++ ""))))) [] body StripeAPI.Common.RequestBodyEncodingFormData)

-- | > POST /v1/charges/{charge}/refunds/{refund}
--
-- The same as 'postChargesChargeRefundsRefund' but accepts an explicit configuration and returns the raw 'Data.ByteString.Char8.ByteString'.
postChargesChargeRefundsRefundWithConfigurationRaw ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | The configuration to use in the request
  StripeAPI.Common.Configuration ->
  -- | Contains all available parameters of this operation (query and path parameters)
  PostChargesChargeRefundsRefundParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe PostChargesChargeRefundsRefundRequestBody ->
  -- | Monadic computation which returns the result of the operation
  m (Network.HTTP.Client.Types.Response Data.ByteString.Internal.ByteString)
postChargesChargeRefundsRefundWithConfigurationRaw
  config
  parameters
  body = GHC.Base.id (StripeAPI.Common.doBodyCallWithConfiguration config (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack ("/v1/charges/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postChargesChargeRefundsRefundParametersPathCharge parameters))) GHC.Base.++ ("/refunds/" GHC.Base.++ (Data.ByteString.Char8.unpack (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (Data.ByteString.Char8.pack GHC.Base.$ StripeAPI.Common.stringifyModel (postChargesChargeRefundsRefundParametersPathRefund parameters))) GHC.Base.++ ""))))) [] body StripeAPI.Common.RequestBodyEncodingFormData)
