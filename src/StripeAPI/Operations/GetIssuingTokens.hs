{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation getIssuingTokens
module StripeAPI.Operations.GetIssuingTokens where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/issuing/tokens
--
-- \<p>Lists all Issuing \<code>Token\<\/code> objects for a given card.\<\/p>
getIssuingTokens ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetIssuingTokensParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response GetIssuingTokensResponse)
getIssuingTokens parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetIssuingTokensResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if
                                 | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetIssuingTokensResponse200
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              GetIssuingTokensResponseBody200
                                                        )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                     GetIssuingTokensResponseDefault
                                       Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                            Data.Either.Either
                                                              GHC.Base.String
                                                              Error
                                                        )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "GET")
        "/v1/issuing/tokens"
        [ StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "card") (GHC.Maybe.Just GHC.Base.$ Data.Aeson.Types.ToJSON.toJSON (getIssuingTokensParametersQueryCard parameters)) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingTokensParametersQueryCreated parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingTokensParametersQueryEndingBefore parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingTokensParametersQueryExpand parameters) (Data.Text.Internal.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingTokensParametersQueryLimit parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingTokensParametersQueryStartingAfter parameters) (Data.Text.Internal.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.Internal.pack "status") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getIssuingTokensParametersQueryStatus parameters) (Data.Text.Internal.pack "form") GHC.Types.True
        ]
    )

-- | Defines the object schema located at @paths.\/v1\/issuing\/tokens.GET.parameters@ in the specification.
data GetIssuingTokensParameters = GetIssuingTokensParameters
  { -- | queryCard: Represents the parameter named \'card\'
    --
    -- The Issuing card identifier to list tokens for.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getIssuingTokensParametersQueryCard :: Data.Text.Internal.Text,
    -- | queryCreated: Represents the parameter named \'created\'
    --
    -- Select Issuing tokens that were created during the given date interval.
    getIssuingTokensParametersQueryCreated :: (GHC.Maybe.Maybe GetIssuingTokensParametersQueryCreated'Variants),
    -- | queryEnding_before: Represents the parameter named \'ending_before\'
    --
    -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getIssuingTokensParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryExpand: Represents the parameter named \'expand\'
    --
    -- Specifies which fields in the response should be expanded.
    getIssuingTokensParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | queryLimit: Represents the parameter named \'limit\'
    --
    -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    getIssuingTokensParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | queryStarting_after: Represents the parameter named \'starting_after\'
    --
    -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getIssuingTokensParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | queryStatus: Represents the parameter named \'status\'
    --
    -- Select Issuing tokens with the given status.
    getIssuingTokensParametersQueryStatus :: (GHC.Maybe.Maybe GetIssuingTokensParametersQueryStatus')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingTokensParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["queryCard" Data.Aeson.Types.ToJSON..= getIssuingTokensParametersQueryCard obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryStatus obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["queryCard" Data.Aeson.Types.ToJSON..= getIssuingTokensParametersQueryCard obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryCreated" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryEnding_before" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryEndingBefore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryExpand" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryLimit" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryLimit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStarting_after" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryStartingAfter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("queryStatus" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryStatus obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingTokensParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingTokensParameters" (\obj -> ((((((GHC.Base.pure GetIssuingTokensParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "queryCard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStarting_after")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "queryStatus"))

-- | Create a new 'GetIssuingTokensParameters' with all required fields.
mkGetIssuingTokensParameters ::
  -- | 'getIssuingTokensParametersQueryCard'
  Data.Text.Internal.Text ->
  GetIssuingTokensParameters
mkGetIssuingTokensParameters getIssuingTokensParametersQueryCard =
  GetIssuingTokensParameters
    { getIssuingTokensParametersQueryCard = getIssuingTokensParametersQueryCard,
      getIssuingTokensParametersQueryCreated = GHC.Maybe.Nothing,
      getIssuingTokensParametersQueryEndingBefore = GHC.Maybe.Nothing,
      getIssuingTokensParametersQueryExpand = GHC.Maybe.Nothing,
      getIssuingTokensParametersQueryLimit = GHC.Maybe.Nothing,
      getIssuingTokensParametersQueryStartingAfter = GHC.Maybe.Nothing,
      getIssuingTokensParametersQueryStatus = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @paths.\/v1\/issuing\/tokens.GET.parameters.properties.queryCreated.anyOf@ in the specification.
data GetIssuingTokensParametersQueryCreated'OneOf1 = GetIssuingTokensParametersQueryCreated'OneOf1
  { -- | gt
    getIssuingTokensParametersQueryCreated'OneOf1Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | gte
    getIssuingTokensParametersQueryCreated'OneOf1Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lt
    getIssuingTokensParametersQueryCreated'OneOf1Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | lte
    getIssuingTokensParametersQueryCreated'OneOf1Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingTokensParametersQueryCreated'OneOf1 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated'OneOf1Lte obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gt" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated'OneOf1Gt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gte" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated'OneOf1Gte obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lt" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated'OneOf1Lt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lte" Data.Aeson.Types.ToJSON..=)) (getIssuingTokensParametersQueryCreated'OneOf1Lte obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingTokensParametersQueryCreated'OneOf1 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingTokensParametersQueryCreated'OneOf1" (\obj -> (((GHC.Base.pure GetIssuingTokensParametersQueryCreated'OneOf1 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lte"))

-- | Create a new 'GetIssuingTokensParametersQueryCreated'OneOf1' with all required fields.
mkGetIssuingTokensParametersQueryCreated'OneOf1 :: GetIssuingTokensParametersQueryCreated'OneOf1
mkGetIssuingTokensParametersQueryCreated'OneOf1 =
  GetIssuingTokensParametersQueryCreated'OneOf1
    { getIssuingTokensParametersQueryCreated'OneOf1Gt = GHC.Maybe.Nothing,
      getIssuingTokensParametersQueryCreated'OneOf1Gte = GHC.Maybe.Nothing,
      getIssuingTokensParametersQueryCreated'OneOf1Lt = GHC.Maybe.Nothing,
      getIssuingTokensParametersQueryCreated'OneOf1Lte = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @paths.\/v1\/issuing\/tokens.GET.parameters.properties.queryCreated.anyOf@ in the specification.
--
-- Represents the parameter named \'created\'
--
-- Select Issuing tokens that were created during the given date interval.
data GetIssuingTokensParametersQueryCreated'Variants
  = GetIssuingTokensParametersQueryCreated'GetIssuingTokensParametersQueryCreated'OneOf1 GetIssuingTokensParametersQueryCreated'OneOf1
  | GetIssuingTokensParametersQueryCreated'Int GHC.Types.Int
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingTokensParametersQueryCreated'Variants where
  toJSON (GetIssuingTokensParametersQueryCreated'GetIssuingTokensParametersQueryCreated'OneOf1 a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetIssuingTokensParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingTokensParametersQueryCreated'Variants where
  parseJSON val = case (GetIssuingTokensParametersQueryCreated'GetIssuingTokensParametersQueryCreated'OneOf1 Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((GetIssuingTokensParametersQueryCreated'Int Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @paths.\/v1\/issuing\/tokens.GET.parameters.properties.queryStatus@ in the specification.
--
-- Represents the parameter named \'status\'
--
-- Select Issuing tokens with the given status.
data GetIssuingTokensParametersQueryStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GetIssuingTokensParametersQueryStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GetIssuingTokensParametersQueryStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    GetIssuingTokensParametersQueryStatus'EnumActive
  | -- | Represents the JSON value @"deleted"@
    GetIssuingTokensParametersQueryStatus'EnumDeleted
  | -- | Represents the JSON value @"requested"@
    GetIssuingTokensParametersQueryStatus'EnumRequested
  | -- | Represents the JSON value @"suspended"@
    GetIssuingTokensParametersQueryStatus'EnumSuspended
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingTokensParametersQueryStatus' where
  toJSON (GetIssuingTokensParametersQueryStatus'Other val) = val
  toJSON (GetIssuingTokensParametersQueryStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GetIssuingTokensParametersQueryStatus'EnumActive) = "active"
  toJSON (GetIssuingTokensParametersQueryStatus'EnumDeleted) = "deleted"
  toJSON (GetIssuingTokensParametersQueryStatus'EnumRequested) = "requested"
  toJSON (GetIssuingTokensParametersQueryStatus'EnumSuspended) = "suspended"

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingTokensParametersQueryStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> GetIssuingTokensParametersQueryStatus'EnumActive
            | val GHC.Classes.== "deleted" -> GetIssuingTokensParametersQueryStatus'EnumDeleted
            | val GHC.Classes.== "requested" -> GetIssuingTokensParametersQueryStatus'EnumRequested
            | val GHC.Classes.== "suspended" -> GetIssuingTokensParametersQueryStatus'EnumSuspended
            | GHC.Base.otherwise -> GetIssuingTokensParametersQueryStatus'Other val
      )

-- | Represents a response of the operation 'getIssuingTokens'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetIssuingTokensResponseError' is used.
data GetIssuingTokensResponse
  = -- | Means either no matching case available or a parse error
    GetIssuingTokensResponseError GHC.Base.String
  | -- | Successful response.
    GetIssuingTokensResponse200 GetIssuingTokensResponseBody200
  | -- | Error response.
    GetIssuingTokensResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the object schema located at @paths.\/v1\/issuing\/tokens.GET.responses.200.content.application\/json.schema@ in the specification.
data GetIssuingTokensResponseBody200 = GetIssuingTokensResponseBody200
  { -- | data
    getIssuingTokensResponseBody200Data :: ([Issuing'token]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    getIssuingTokensResponseBody200HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    getIssuingTokensResponseBody200Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetIssuingTokensResponseBody200 where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getIssuingTokensResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getIssuingTokensResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getIssuingTokensResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= getIssuingTokensResponseBody200Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= getIssuingTokensResponseBody200HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= getIssuingTokensResponseBody200Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON GetIssuingTokensResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetIssuingTokensResponseBody200" (\obj -> ((GHC.Base.pure GetIssuingTokensResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'GetIssuingTokensResponseBody200' with all required fields.
mkGetIssuingTokensResponseBody200 ::
  -- | 'getIssuingTokensResponseBody200Data'
  [Issuing'token] ->
  -- | 'getIssuingTokensResponseBody200HasMore'
  GHC.Types.Bool ->
  -- | 'getIssuingTokensResponseBody200Url'
  Data.Text.Internal.Text ->
  GetIssuingTokensResponseBody200
mkGetIssuingTokensResponseBody200 getIssuingTokensResponseBody200Data getIssuingTokensResponseBody200HasMore getIssuingTokensResponseBody200Url =
  GetIssuingTokensResponseBody200
    { getIssuingTokensResponseBody200Data = getIssuingTokensResponseBody200Data,
      getIssuingTokensResponseBody200HasMore = getIssuingTokensResponseBody200HasMore,
      getIssuingTokensResponseBody200Url = getIssuingTokensResponseBody200Url
    }
