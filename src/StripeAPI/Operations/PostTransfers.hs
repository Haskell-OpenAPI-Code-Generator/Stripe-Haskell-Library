-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the different functions to run the operation postTransfers
module StripeAPI.Operations.PostTransfers where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types

-- | > POST /v1/transfers
-- 
-- \<p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your \<a href=\"\#balance\">Stripe balance\<\/a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.\<\/p>
postTransfers :: forall m . StripeAPI.Common.MonadHTTP m => PostTransfersRequestBody -- ^ The request body to send
  -> StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response PostTransfersResponse) -- ^ Monadic computation which returns the result of the operation
postTransfers body = GHC.Base.fmap (\response_0 -> GHC.Base.fmap (Data.Either.either PostTransfersResponseError GHC.Base.id GHC.Base.. (\response body -> if | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) -> PostTransfersResponse200 Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                                                                          Transfer)
                                                                                                                                                             | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) -> PostTransfersResponseDefault Data.Functor.<$> (Data.Aeson.eitherDecodeStrict body :: Data.Either.Either GHC.Base.String
                                                                                                                                                                                                                                                                                                                                                            Error)
                                                                                                                                                             | GHC.Base.otherwise -> Data.Either.Left "Missing default response type") response_0) response_0) (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.pack "POST") (Data.Text.pack "/v1/transfers") GHC.Base.mempty (GHC.Maybe.Just body) StripeAPI.Common.RequestBodyEncodingFormData)
-- | Defines the object schema located at @paths.\/v1\/transfers.POST.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
-- 
-- 
data PostTransfersRequestBody = PostTransfersRequestBody {
  -- | amount: A positive integer in cents (or local equivalent) representing how much to transfer.
  postTransfersRequestBodyAmount :: (GHC.Maybe.Maybe GHC.Types.Int)
  -- | currency: 3-letter [ISO code for currency](https:\/\/stripe.com\/docs\/payouts).
  , postTransfersRequestBodyCurrency :: Data.Text.Internal.Text
  -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postTransfersRequestBodyDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | destination: The ID of a connected Stripe account. \<a href=\"\/docs\/connect\/charges-transfers\">See the Connect documentation\<\/a> for details.
  , postTransfersRequestBodyDestination :: Data.Text.Internal.Text
  -- | expand: Specifies which fields in the response should be expanded.
  , postTransfersRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text]))
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to \`metadata\`.
  , postTransfersRequestBodyMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
  -- | source_transaction: You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https:\/\/stripe.com\/docs\/connect\/charges-transfers\#transfer-availability) for details.
  , postTransfersRequestBodySourceTransaction :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  -- | source_type: The source balance to use for this transfer. One of \`bank_account\`, \`card\`, or \`fpx\`. For most users, this will default to \`card\`.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , postTransfersRequestBodySourceType :: (GHC.Maybe.Maybe PostTransfersRequestBodySourceType')
  -- | transfer_group: A string that identifies this transaction as part of a group. See the [Connect documentation](https:\/\/stripe.com\/docs\/connect\/charges-transfers\#transfer-options) for details.
  , postTransfersRequestBodyTransferGroup :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTransfersRequestBody
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyAmount obj) : ["currency" Data.Aeson.Types.ToJSON..= postTransfersRequestBodyCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyDescription obj) : ["destination" Data.Aeson.Types.ToJSON..= postTransfersRequestBodyDestination obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_transaction" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodySourceTransaction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_type" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodySourceType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_group" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyTransferGroup obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyAmount obj) : ["currency" Data.Aeson.Types.ToJSON..= postTransfersRequestBodyCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyDescription obj) : ["destination" Data.Aeson.Types.ToJSON..= postTransfersRequestBodyDestination obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_transaction" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodySourceTransaction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_type" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodySourceType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_group" Data.Aeson.Types.ToJSON..=)) (postTransfersRequestBodyTransferGroup obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PostTransfersRequestBody
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PostTransfersRequestBody" (\obj -> ((((((((GHC.Base.pure PostTransfersRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "source_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "source_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfer_group"))
-- | Create a new 'PostTransfersRequestBody' with all required fields.
mkPostTransfersRequestBody :: Data.Text.Internal.Text -- ^ 'postTransfersRequestBodyCurrency'
  -> Data.Text.Internal.Text -- ^ 'postTransfersRequestBodyDestination'
  -> PostTransfersRequestBody
mkPostTransfersRequestBody postTransfersRequestBodyCurrency postTransfersRequestBodyDestination = PostTransfersRequestBody{postTransfersRequestBodyAmount = GHC.Maybe.Nothing,
                                                                                                                           postTransfersRequestBodyCurrency = postTransfersRequestBodyCurrency,
                                                                                                                           postTransfersRequestBodyDescription = GHC.Maybe.Nothing,
                                                                                                                           postTransfersRequestBodyDestination = postTransfersRequestBodyDestination,
                                                                                                                           postTransfersRequestBodyExpand = GHC.Maybe.Nothing,
                                                                                                                           postTransfersRequestBodyMetadata = GHC.Maybe.Nothing,
                                                                                                                           postTransfersRequestBodySourceTransaction = GHC.Maybe.Nothing,
                                                                                                                           postTransfersRequestBodySourceType = GHC.Maybe.Nothing,
                                                                                                                           postTransfersRequestBodyTransferGroup = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @paths.\/v1\/transfers.POST.requestBody.content.application\/x-www-form-urlencoded.schema.properties.source_type@ in the specification.
-- 
-- The source balance to use for this transfer. One of \`bank_account\`, \`card\`, or \`fpx\`. For most users, this will default to \`card\`.
data PostTransfersRequestBodySourceType' =
   PostTransfersRequestBodySourceType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PostTransfersRequestBodySourceType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PostTransfersRequestBodySourceType'EnumBankAccount -- ^ Represents the JSON value @"bank_account"@
  | PostTransfersRequestBodySourceType'EnumCard -- ^ Represents the JSON value @"card"@
  | PostTransfersRequestBodySourceType'EnumFpx -- ^ Represents the JSON value @"fpx"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PostTransfersRequestBodySourceType'
    where toJSON (PostTransfersRequestBodySourceType'Other val) = val
          toJSON (PostTransfersRequestBodySourceType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PostTransfersRequestBodySourceType'EnumBankAccount) = "bank_account"
          toJSON (PostTransfersRequestBodySourceType'EnumCard) = "card"
          toJSON (PostTransfersRequestBodySourceType'EnumFpx) = "fpx"
instance Data.Aeson.Types.FromJSON.FromJSON PostTransfersRequestBodySourceType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "bank_account" -> PostTransfersRequestBodySourceType'EnumBankAccount
                                            | val GHC.Classes.== "card" -> PostTransfersRequestBodySourceType'EnumCard
                                            | val GHC.Classes.== "fpx" -> PostTransfersRequestBodySourceType'EnumFpx
                                            | GHC.Base.otherwise -> PostTransfersRequestBodySourceType'Other val)
-- | Represents a response of the operation 'postTransfers'.
-- 
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'PostTransfersResponseError' is used.
data PostTransfersResponse =
   PostTransfersResponseError GHC.Base.String -- ^ Means either no matching case available or a parse error
  | PostTransfersResponse200 Transfer -- ^ Successful response.
  | PostTransfersResponseDefault Error -- ^ Error response.
  deriving (GHC.Show.Show, GHC.Classes.Eq)
