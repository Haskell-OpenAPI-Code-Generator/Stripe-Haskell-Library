{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the different functions to run the operation deleteCustomersCustomerSubscriptionsSubscriptionExposedId
module StripeAPI.Operations.DeleteCustomersCustomerSubscriptionsSubscriptionExposedId where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.ByteString as Data.ByteString.Internal.Type
import qualified Data.Either
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > DELETE /v1/customers/{customer}/subscriptions/{subscription_exposed_id}
--
-- \<p>Cancels a customer’s subscription. If you set the \<code>at_period_end\<\/code> parameter to \<code>true\<\/code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default \<code>false\<\/code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.\<\/p>
--
-- \<p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually \<a href=\"\#delete_invoiceitem\">deleted\<\/a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.\<\/p>
--
-- \<p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.\<\/p>
deleteCustomersCustomerSubscriptionsSubscriptionExposedId ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters ->
  -- | The request body to send
  GHC.Maybe.Maybe DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.ClientT m (Network.HTTP.Client.Types.Response DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponse)
deleteCustomersCustomerSubscriptionsSubscriptionExposedId
  parameters
  body =
    GHC.Base.fmap
      ( \response_0 ->
          GHC.Base.fmap
            ( Data.Either.either DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponseError GHC.Base.id
                GHC.Base.. ( \response body ->
                               if
                                   | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                       DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponse200
                                         Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                              Data.Either.Either
                                                                GHC.Base.String
                                                                Subscription
                                                          )
                                   | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                       DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponseDefault
                                         Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                              Data.Either.Either
                                                                GHC.Base.String
                                                                Error
                                                          )
                                   | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                           )
                  response_0
            )
            response_0
      )
      (StripeAPI.Common.doBodyCallWithConfigurationM (Data.Text.toUpper GHC.Base.$ Data.Text.Internal.pack "DELETE") ("/v1/customers/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel (deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathCustomer parameters))) GHC.Base.<> ("/subscriptions/" GHC.Base.<> (StripeAPI.Common.byteToText (Network.HTTP.Types.URI.urlEncode GHC.Types.True GHC.Base.$ (StripeAPI.Common.textToByte GHC.Base.$ StripeAPI.Common.stringifyModel (deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathSubscriptionExposedId parameters))) GHC.Base.<> "")))) GHC.Base.mempty body StripeAPI.Common.RequestBodyEncodingFormData)

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/subscriptions\/{subscription_exposed_id}.DELETE.parameters@ in the specification.
data DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters = DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters
  { -- | pathCustomer: Represents the parameter named \'customer\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathCustomer :: Data.Text.Internal.Text,
    -- | pathSubscription_exposed_id: Represents the parameter named \'subscription_exposed_id\'
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathSubscriptionExposedId :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["pathCustomer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathCustomer obj] : ["pathSubscription_exposed_id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathSubscriptionExposedId obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["pathCustomer" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathCustomer obj] : ["pathSubscription_exposed_id" Data.Aeson.Types.ToJSON..= deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathSubscriptionExposedId obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters" (\obj -> (GHC.Base.pure DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathCustomer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pathSubscription_exposed_id"))

-- | Create a new 'DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters' with all required fields.
mkDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters ::
  -- | 'deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathCustomer'
  Data.Text.Internal.Text ->
  -- | 'deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathSubscriptionExposedId'
  Data.Text.Internal.Text ->
  DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters
mkDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathCustomer deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathSubscriptionExposedId =
  DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParameters
    { deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathCustomer = deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathCustomer,
      deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathSubscriptionExposedId = deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParametersPathSubscriptionExposedId
    }

-- | Defines the object schema located at @paths.\/v1\/customers\/{customer}\/subscriptions\/{subscription_exposed_id}.DELETE.requestBody.content.application\/x-www-form-urlencoded.schema@ in the specification.
data DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody = DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody
  { -- | expand: Specifies which fields in the response should be expanded.
    deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
    -- | invoice_now: Can be set to \`true\` if \`at_period_end\` is not set to \`true\`. Will generate a final invoice that invoices for any un-invoiced metered usage and new\/pending proration invoice items.
    deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyInvoiceNow :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | prorate: Can be set to \`true\` if \`at_period_end\` is not set to \`true\`. Will generate a proration invoice item that credits remaining unused time until the subscription period end.
    deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyProrate :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_now" Data.Aeson.Types.ToJSON..=)) (deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyInvoiceNow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("prorate" Data.Aeson.Types.ToJSON..=)) (deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyProrate obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expand" Data.Aeson.Types.ToJSON..=)) (deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyExpand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_now" Data.Aeson.Types.ToJSON..=)) (deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyInvoiceNow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("prorate" Data.Aeson.Types.ToJSON..=)) (deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyProrate obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody" (\obj -> ((GHC.Base.pure DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invoice_now")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "prorate"))

-- | Create a new 'DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody' with all required fields.
mkDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody :: DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody
mkDeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody =
  DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBody
    { deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyExpand = GHC.Maybe.Nothing,
      deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyInvoiceNow = GHC.Maybe.Nothing,
      deleteCustomersCustomerSubscriptionsSubscriptionExposedIdRequestBodyProrate = GHC.Maybe.Nothing
    }

-- | Represents a response of the operation 'deleteCustomersCustomerSubscriptionsSubscriptionExposedId'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponseError' is used.
data DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponse
  = -- | Means either no matching case available or a parse error
    DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponseError GHC.Base.String
  | -- | Successful response.
    DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponse200 Subscription
  | -- | Error response.
    DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)
