{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the different functions to run the operation getApplicationFees
module StripeAPI.Operations.GetApplicationFees where

import qualified Control.Monad.Fail
import qualified Control.Monad.Trans.Reader
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Either
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified Data.Vector
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified Network.HTTP.Client
import qualified Network.HTTP.Client as Network.HTTP.Client.Request
import qualified Network.HTTP.Client as Network.HTTP.Client.Types
import qualified Network.HTTP.Simple
import qualified Network.HTTP.Types
import qualified Network.HTTP.Types as Network.HTTP.Types.Status
import qualified Network.HTTP.Types as Network.HTTP.Types.URI
import qualified StripeAPI.Common
import StripeAPI.Types
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | > GET /v1/application_fees
--
-- \<p>Returns a list of application fees youâ€™ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.\<\/p>
getApplicationFees ::
  forall m.
  StripeAPI.Common.MonadHTTP m =>
  -- | Contains all available parameters of this operation (query and path parameters)
  GetApplicationFeesParameters ->
  -- | Monadic computation which returns the result of the operation
  StripeAPI.Common.StripeT m (Network.HTTP.Client.Types.Response GetApplicationFeesResponse)
getApplicationFees parameters =
  GHC.Base.fmap
    ( \response_0 ->
        GHC.Base.fmap
          ( Data.Either.either GetApplicationFeesResponseError GHC.Base.id
              GHC.Base.. ( \response body ->
                             if  | (\status_1 -> Network.HTTP.Types.Status.statusCode status_1 GHC.Classes.== 200) (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApplicationFeesResponse200
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            GetApplicationFeesResponseBody200
                                                      )
                                 | GHC.Base.const GHC.Types.True (Network.HTTP.Client.Types.responseStatus response) ->
                                   GetApplicationFeesResponseDefault
                                     Data.Functor.<$> ( Data.Aeson.eitherDecodeStrict body ::
                                                          Data.Either.Either GHC.Base.String
                                                            Error
                                                      )
                                 | GHC.Base.otherwise -> Data.Either.Left "Missing default response type"
                         )
                response_0
          )
          response_0
    )
    ( StripeAPI.Common.doCallWithConfigurationM
        (Data.Text.toUpper GHC.Base.$ Data.Text.pack "GET")
        (Data.Text.pack "/v1/application_fees")
        [ StripeAPI.Common.QueryParameter (Data.Text.pack "charge") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplicationFeesParametersQueryCharge parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "created") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplicationFeesParametersQueryCreated parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "ending_before") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplicationFeesParametersQueryEndingBefore parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "expand") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplicationFeesParametersQueryExpand parameters) (Data.Text.pack "deepObject") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "limit") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplicationFeesParametersQueryLimit parameters) (Data.Text.pack "form") GHC.Types.True,
          StripeAPI.Common.QueryParameter (Data.Text.pack "starting_after") (Data.Aeson.Types.ToJSON.toJSON Data.Functor.<$> getApplicationFeesParametersQueryStartingAfter parameters) (Data.Text.pack "form") GHC.Types.True
        ]
    )

-- | Defines the data type for the schema getApplicationFeesParameters
data GetApplicationFeesParameters
  = GetApplicationFeesParameters
      { -- | queryCharge: Represents the parameter named \'charge\'
        --
        -- Only return application fees for the charge specified by this charge ID.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getApplicationFeesParametersQueryCharge :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryCreated: Represents the parameter named \'created\'
        getApplicationFeesParametersQueryCreated :: (GHC.Maybe.Maybe GetApplicationFeesParametersQueryCreated'Variants),
        -- | queryEnding_before: Represents the parameter named \'ending_before\'
        --
        -- A cursor for use in pagination. \`ending_before\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with \`obj_bar\`, your subsequent call can include \`ending_before=obj_bar\` in order to fetch the previous page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getApplicationFeesParametersQueryEndingBefore :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | queryExpand: Represents the parameter named \'expand\'
        --
        -- Specifies which fields in the response should be expanded.
        getApplicationFeesParametersQueryExpand :: (GHC.Maybe.Maybe ([Data.Text.Internal.Text])),
        -- | queryLimit: Represents the parameter named \'limit\'
        --
        -- A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        getApplicationFeesParametersQueryLimit :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | queryStarting_after: Represents the parameter named \'starting_after\'
        --
        -- A cursor for use in pagination. \`starting_after\` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with \`obj_foo\`, your subsequent call can include \`starting_after=obj_foo\` in order to fetch the next page of the list.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        getApplicationFeesParametersQueryStartingAfter :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApplicationFeesParameters where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "queryCharge" (getApplicationFeesParametersQueryCharge obj) : (Data.Aeson..=) "queryCreated" (getApplicationFeesParametersQueryCreated obj) : (Data.Aeson..=) "queryEnding_before" (getApplicationFeesParametersQueryEndingBefore obj) : (Data.Aeson..=) "queryExpand" (getApplicationFeesParametersQueryExpand obj) : (Data.Aeson..=) "queryLimit" (getApplicationFeesParametersQueryLimit obj) : (Data.Aeson..=) "queryStarting_after" (getApplicationFeesParametersQueryStartingAfter obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "queryCharge" (getApplicationFeesParametersQueryCharge obj) GHC.Base.<> ((Data.Aeson..=) "queryCreated" (getApplicationFeesParametersQueryCreated obj) GHC.Base.<> ((Data.Aeson..=) "queryEnding_before" (getApplicationFeesParametersQueryEndingBefore obj) GHC.Base.<> ((Data.Aeson..=) "queryExpand" (getApplicationFeesParametersQueryExpand obj) GHC.Base.<> ((Data.Aeson..=) "queryLimit" (getApplicationFeesParametersQueryLimit obj) GHC.Base.<> (Data.Aeson..=) "queryStarting_after" (getApplicationFeesParametersQueryStartingAfter obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON GetApplicationFeesParameters where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApplicationFeesParameters" (\obj -> (((((GHC.Base.pure GetApplicationFeesParameters GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCharge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryCreated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryEnding_before")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryExpand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryLimit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "queryStarting_after"))

-- | Defines the data type for the schema getApplicationFeesParametersQueryCreated\'OneOf2
data GetApplicationFeesParametersQueryCreated'OneOf2
  = GetApplicationFeesParametersQueryCreated'OneOf2
      { -- | gt
        getApplicationFeesParametersQueryCreated'OneOf2Gt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | gte
        getApplicationFeesParametersQueryCreated'OneOf2Gte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lt
        getApplicationFeesParametersQueryCreated'OneOf2Lt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | lte
        getApplicationFeesParametersQueryCreated'OneOf2Lte :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApplicationFeesParametersQueryCreated'OneOf2 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "gt" (getApplicationFeesParametersQueryCreated'OneOf2Gt obj) : (Data.Aeson..=) "gte" (getApplicationFeesParametersQueryCreated'OneOf2Gte obj) : (Data.Aeson..=) "lt" (getApplicationFeesParametersQueryCreated'OneOf2Lt obj) : (Data.Aeson..=) "lte" (getApplicationFeesParametersQueryCreated'OneOf2Lte obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "gt" (getApplicationFeesParametersQueryCreated'OneOf2Gt obj) GHC.Base.<> ((Data.Aeson..=) "gte" (getApplicationFeesParametersQueryCreated'OneOf2Gte obj) GHC.Base.<> ((Data.Aeson..=) "lt" (getApplicationFeesParametersQueryCreated'OneOf2Lt obj) GHC.Base.<> (Data.Aeson..=) "lte" (getApplicationFeesParametersQueryCreated'OneOf2Lte obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetApplicationFeesParametersQueryCreated'OneOf2 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApplicationFeesParametersQueryCreated'OneOf2" (\obj -> (((GHC.Base.pure GetApplicationFeesParametersQueryCreated'OneOf2 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "lte"))

-- | Define the one-of schema getApplicationFeesParametersQueryCreated\'
--
-- Represents the parameter named \'created\'
data GetApplicationFeesParametersQueryCreated'Variants
  = GetApplicationFeesParametersQueryCreated'Int GHC.Types.Int
  | GetApplicationFeesParametersQueryCreated'GetApplicationFeesParametersQueryCreated'OneOf2 GetApplicationFeesParametersQueryCreated'OneOf2
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetApplicationFeesParametersQueryCreated'Variants where
  toJSON (GetApplicationFeesParametersQueryCreated'Int a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (GetApplicationFeesParametersQueryCreated'GetApplicationFeesParametersQueryCreated'OneOf2 a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON GetApplicationFeesParametersQueryCreated'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetApplicationFeesParametersQueryCreated'Int a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ GetApplicationFeesParametersQueryCreated'GetApplicationFeesParametersQueryCreated'OneOf2 a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Represents a response of the operation 'getApplicationFees'.
--
-- The response constructor is chosen by the status code of the response. If no case matches (no specific case for the response code, no range case, no default case), 'GetApplicationFeesResponseError' is used.
data GetApplicationFeesResponse
  = -- | Means either no matching case available or a parse error
    GetApplicationFeesResponseError GHC.Base.String
  | -- | Successful response.
    GetApplicationFeesResponse200 GetApplicationFeesResponseBody200
  | -- | Error response.
    GetApplicationFeesResponseDefault Error
  deriving (GHC.Show.Show, GHC.Classes.Eq)

-- | Defines the data type for the schema GetApplicationFeesResponseBody200
data GetApplicationFeesResponseBody200
  = GetApplicationFeesResponseBody200
      { -- | data
        getApplicationFeesResponseBody200Data :: ([ApplicationFee]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        getApplicationFeesResponseBody200HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        getApplicationFeesResponseBody200Object :: GetApplicationFeesResponseBody200Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        -- * Must match pattern \'^\/v1\/application_fees\'
        getApplicationFeesResponseBody200Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GetApplicationFeesResponseBody200 where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (getApplicationFeesResponseBody200Data obj) : (Data.Aeson..=) "has_more" (getApplicationFeesResponseBody200HasMore obj) : (Data.Aeson..=) "object" (getApplicationFeesResponseBody200Object obj) : (Data.Aeson..=) "url" (getApplicationFeesResponseBody200Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (getApplicationFeesResponseBody200Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (getApplicationFeesResponseBody200HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (getApplicationFeesResponseBody200Object obj) GHC.Base.<> (Data.Aeson..=) "url" (getApplicationFeesResponseBody200Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GetApplicationFeesResponseBody200 where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GetApplicationFeesResponseBody200" (\obj -> (((GHC.Base.pure GetApplicationFeesResponseBody200 GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema GetApplicationFeesResponseBody200Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data GetApplicationFeesResponseBody200Object'
  = GetApplicationFeesResponseBody200Object'EnumOther Data.Aeson.Types.Internal.Value
  | GetApplicationFeesResponseBody200Object'EnumTyped Data.Text.Internal.Text
  | GetApplicationFeesResponseBody200Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GetApplicationFeesResponseBody200Object' where
  toJSON (GetApplicationFeesResponseBody200Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetApplicationFeesResponseBody200Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (GetApplicationFeesResponseBody200Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON GetApplicationFeesResponseBody200Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> GetApplicationFeesResponseBody200Object'EnumStringList
            | GHC.Base.otherwise -> GetApplicationFeesResponseBody200Object'EnumOther val
      )
