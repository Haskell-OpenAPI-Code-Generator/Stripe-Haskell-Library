{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingDisputeDuplicateEvidence
module StripeAPI.Types.IssuingDisputeDuplicateEvidence where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.File
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_dispute_duplicate_evidence@ in the specification.
data IssuingDisputeDuplicateEvidence = IssuingDisputeDuplicateEvidence
  { -- | additional_documentation: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional documentation supporting the dispute.
    issuingDisputeDuplicateEvidenceAdditionalDocumentation :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableVariants)),
    -- | card_statement: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Copy of the card statement showing that the product had already been paid for.
    issuingDisputeDuplicateEvidenceCardStatement :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingDisputeDuplicateEvidenceCardStatement'NonNullableVariants)),
    -- | cash_receipt: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Copy of the receipt showing that the product had been paid for in cash.
    issuingDisputeDuplicateEvidenceCashReceipt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableVariants)),
    -- | check_image: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Image of the front and back of the check that was used to pay for the product.
    issuingDisputeDuplicateEvidenceCheckImage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingDisputeDuplicateEvidenceCheckImage'NonNullableVariants)),
    -- | explanation: Explanation of why the cardholder is disputing this transaction.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingDisputeDuplicateEvidenceExplanation :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | original_transaction: Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingDisputeDuplicateEvidenceOriginalTransaction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeDuplicateEvidence where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("additional_documentation" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceAdditionalDocumentation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_statement" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceCardStatement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cash_receipt" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceCashReceipt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_image" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceCheckImage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("explanation" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceExplanation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_transaction" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceOriginalTransaction obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("additional_documentation" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceAdditionalDocumentation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_statement" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceCardStatement obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cash_receipt" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceCashReceipt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("check_image" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceCheckImage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("explanation" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceExplanation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_transaction" Data.Aeson.Types.ToJSON..=)) (issuingDisputeDuplicateEvidenceOriginalTransaction obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeDuplicateEvidence where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeDuplicateEvidence" (\obj -> (((((GHC.Base.pure IssuingDisputeDuplicateEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "additional_documentation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_statement")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cash_receipt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "check_image")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "original_transaction"))

-- | Create a new 'IssuingDisputeDuplicateEvidence' with all required fields.
mkIssuingDisputeDuplicateEvidence :: IssuingDisputeDuplicateEvidence
mkIssuingDisputeDuplicateEvidence =
  IssuingDisputeDuplicateEvidence
    { issuingDisputeDuplicateEvidenceAdditionalDocumentation = GHC.Maybe.Nothing,
      issuingDisputeDuplicateEvidenceCardStatement = GHC.Maybe.Nothing,
      issuingDisputeDuplicateEvidenceCashReceipt = GHC.Maybe.Nothing,
      issuingDisputeDuplicateEvidenceCheckImage = GHC.Maybe.Nothing,
      issuingDisputeDuplicateEvidenceExplanation = GHC.Maybe.Nothing,
      issuingDisputeDuplicateEvidenceOriginalTransaction = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.issuing_dispute_duplicate_evidence.properties.additional_documentation.anyOf@ in the specification.
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional documentation supporting the dispute.
data IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableVariants
  = IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableText Data.Text.Internal.Text
  | IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableFile File
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableVariants where
  toJSON (IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableFile a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableVariants where
  parseJSON val = case (IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((IssuingDisputeDuplicateEvidenceAdditionalDocumentation'NonNullableFile Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.issuing_dispute_duplicate_evidence.properties.card_statement.anyOf@ in the specification.
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Copy of the card statement showing that the product had already been paid for.
data IssuingDisputeDuplicateEvidenceCardStatement'NonNullableVariants
  = IssuingDisputeDuplicateEvidenceCardStatement'NonNullableText Data.Text.Internal.Text
  | IssuingDisputeDuplicateEvidenceCardStatement'NonNullableFile File
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeDuplicateEvidenceCardStatement'NonNullableVariants where
  toJSON (IssuingDisputeDuplicateEvidenceCardStatement'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuingDisputeDuplicateEvidenceCardStatement'NonNullableFile a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeDuplicateEvidenceCardStatement'NonNullableVariants where
  parseJSON val = case (IssuingDisputeDuplicateEvidenceCardStatement'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((IssuingDisputeDuplicateEvidenceCardStatement'NonNullableFile Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.issuing_dispute_duplicate_evidence.properties.cash_receipt.anyOf@ in the specification.
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Copy of the receipt showing that the product had been paid for in cash.
data IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableVariants
  = IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableText Data.Text.Internal.Text
  | IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableFile File
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableVariants where
  toJSON (IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableFile a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableVariants where
  parseJSON val = case (IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((IssuingDisputeDuplicateEvidenceCashReceipt'NonNullableFile Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.issuing_dispute_duplicate_evidence.properties.check_image.anyOf@ in the specification.
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Image of the front and back of the check that was used to pay for the product.
data IssuingDisputeDuplicateEvidenceCheckImage'NonNullableVariants
  = IssuingDisputeDuplicateEvidenceCheckImage'NonNullableText Data.Text.Internal.Text
  | IssuingDisputeDuplicateEvidenceCheckImage'NonNullableFile File
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeDuplicateEvidenceCheckImage'NonNullableVariants where
  toJSON (IssuingDisputeDuplicateEvidenceCheckImage'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuingDisputeDuplicateEvidenceCheckImage'NonNullableFile a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeDuplicateEvidenceCheckImage'NonNullableVariants where
  parseJSON val = case (IssuingDisputeDuplicateEvidenceCheckImage'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((IssuingDisputeDuplicateEvidenceCheckImage'NonNullableFile Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
