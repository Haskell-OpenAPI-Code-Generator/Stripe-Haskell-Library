{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Payout
module StripeAPI.Types.Payout where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.BankAccount
import {-# SOURCE #-} StripeAPI.Types.Card
import {-# SOURCE #-} StripeAPI.Types.DeletedBankAccount
import {-# SOURCE #-} StripeAPI.Types.DeletedCard
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payout@ in the specification.
--
-- A \`Payout\` object is created when you receive funds from Stripe, or when you
-- initiate a payout to either a bank account or debit card of a [connected
-- Stripe account](\/docs\/connect\/bank-debit-card-payouts). You can retrieve individual payouts,
-- and list all payouts. Payouts are made on [varying
-- schedules](\/docs\/connect\/manage-payout-schedule), depending on your country and
-- industry.
--
-- Related guide: [Receiving payouts](https:\/\/stripe.com\/docs\/payouts)
data Payout = Payout
  { -- | amount: The amount (in cents (or local equivalent)) that transfers to your bank account or debit card.
    payoutAmount :: GHC.Types.Int,
    -- | arrival_date: Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.
    payoutArrivalDate :: GHC.Types.Int,
    -- | automatic: Returns \`true\` if the payout is created by an [automated payout schedule](https:\/\/stripe.com\/docs\/payouts\#payout-schedule) and \`false\` if it\'s [requested manually](https:\/\/stripe.com\/docs\/payouts\#manual-payouts).
    payoutAutomatic :: GHC.Types.Bool,
    -- | balance_transaction: ID of the balance transaction that describes the impact of this payout on your account balance.
    payoutBalanceTransaction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PayoutBalanceTransaction'NonNullableVariants)),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    payoutCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    payoutCurrency :: Data.Text.Internal.Text,
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    payoutDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | destination: ID of the bank account or card the payout is sent to.
    payoutDestination :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PayoutDestination'NonNullableVariants)),
    -- | failure_balance_transaction: If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance.
    payoutFailureBalanceTransaction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PayoutFailureBalanceTransaction'NonNullableVariants)),
    -- | failure_code: Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https:\/\/stripe.com\/docs\/api\#payout_failures).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    payoutFailureCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | failure_message: Message that provides the reason for a payout failure, if available.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    payoutFailureMessage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    payoutId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    payoutLivemode :: GHC.Types.Bool,
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    payoutMetadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | method: The method used to send this payout, which can be \`standard\` or \`instant\`. \`instant\` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https:\/\/stripe.com\/docs\/payouts\/instant-payouts-banks).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    payoutMethod :: Data.Text.Internal.Text,
    -- | original_payout: If the payout reverses another, this is the ID of the original payout.
    payoutOriginalPayout :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PayoutOriginalPayout'NonNullableVariants)),
    -- | reconciliation_status: If \`completed\`, you can use the [Balance Transactions API](https:\/\/stripe.com\/docs\/api\/balance_transactions\/list\#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout.
    payoutReconciliationStatus :: PayoutReconciliationStatus',
    -- | reversed_by: If the payout reverses, this is the ID of the payout that reverses this payout.
    payoutReversedBy :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PayoutReversedBy'NonNullableVariants)),
    -- | source_type: The source balance this payout came from, which can be one of the following: \`card\`, \`fpx\`, or \`bank_account\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    payoutSourceType :: Data.Text.Internal.Text,
    -- | statement_descriptor: Extra information about a payout that displays on the user\'s bank statement.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    payoutStatementDescriptor :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | status: Current status of the payout: \`paid\`, \`pending\`, \`in_transit\`, \`canceled\` or \`failed\`. A payout is \`pending\` until it\'s submitted to the bank, when it becomes \`in_transit\`. The status changes to \`paid\` if the transaction succeeds, or to \`failed\` or \`canceled\` (within 5 business days). Some payouts that fail might initially show as \`paid\`, then change to \`failed\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    payoutStatus :: Data.Text.Internal.Text,
    -- | type: Can be \`bank_account\` or \`card\`.
    payoutType :: PayoutType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Payout where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= payoutAmount obj] : ["arrival_date" Data.Aeson.Types.ToJSON..= payoutArrivalDate obj] : ["automatic" Data.Aeson.Types.ToJSON..= payoutAutomatic obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance_transaction" Data.Aeson.Types.ToJSON..=)) (payoutBalanceTransaction obj) : ["created" Data.Aeson.Types.ToJSON..= payoutCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= payoutCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (payoutDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination" Data.Aeson.Types.ToJSON..=)) (payoutDestination obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_balance_transaction" Data.Aeson.Types.ToJSON..=)) (payoutFailureBalanceTransaction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_code" Data.Aeson.Types.ToJSON..=)) (payoutFailureCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_message" Data.Aeson.Types.ToJSON..=)) (payoutFailureMessage obj) : ["id" Data.Aeson.Types.ToJSON..= payoutId obj] : ["livemode" Data.Aeson.Types.ToJSON..= payoutLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (payoutMetadata obj) : ["method" Data.Aeson.Types.ToJSON..= payoutMethod obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_payout" Data.Aeson.Types.ToJSON..=)) (payoutOriginalPayout obj) : ["reconciliation_status" Data.Aeson.Types.ToJSON..= payoutReconciliationStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reversed_by" Data.Aeson.Types.ToJSON..=)) (payoutReversedBy obj) : ["source_type" Data.Aeson.Types.ToJSON..= payoutSourceType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (payoutStatementDescriptor obj) : ["status" Data.Aeson.Types.ToJSON..= payoutStatus obj] : ["type" Data.Aeson.Types.ToJSON..= payoutType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "payout"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= payoutAmount obj] : ["arrival_date" Data.Aeson.Types.ToJSON..= payoutArrivalDate obj] : ["automatic" Data.Aeson.Types.ToJSON..= payoutAutomatic obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance_transaction" Data.Aeson.Types.ToJSON..=)) (payoutBalanceTransaction obj) : ["created" Data.Aeson.Types.ToJSON..= payoutCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= payoutCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (payoutDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination" Data.Aeson.Types.ToJSON..=)) (payoutDestination obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_balance_transaction" Data.Aeson.Types.ToJSON..=)) (payoutFailureBalanceTransaction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_code" Data.Aeson.Types.ToJSON..=)) (payoutFailureCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_message" Data.Aeson.Types.ToJSON..=)) (payoutFailureMessage obj) : ["id" Data.Aeson.Types.ToJSON..= payoutId obj] : ["livemode" Data.Aeson.Types.ToJSON..= payoutLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (payoutMetadata obj) : ["method" Data.Aeson.Types.ToJSON..= payoutMethod obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_payout" Data.Aeson.Types.ToJSON..=)) (payoutOriginalPayout obj) : ["reconciliation_status" Data.Aeson.Types.ToJSON..= payoutReconciliationStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reversed_by" Data.Aeson.Types.ToJSON..=)) (payoutReversedBy obj) : ["source_type" Data.Aeson.Types.ToJSON..= payoutSourceType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (payoutStatementDescriptor obj) : ["status" Data.Aeson.Types.ToJSON..= payoutStatus obj] : ["type" Data.Aeson.Types.ToJSON..= payoutType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "payout"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Payout where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Payout" (\obj -> (((((((((((((((((((((GHC.Base.pure Payout GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "arrival_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "automatic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failure_balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failure_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failure_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "original_payout")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reconciliation_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reversed_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'Payout' with all required fields.
mkPayout ::
  -- | 'payoutAmount'
  GHC.Types.Int ->
  -- | 'payoutArrivalDate'
  GHC.Types.Int ->
  -- | 'payoutAutomatic'
  GHC.Types.Bool ->
  -- | 'payoutCreated'
  GHC.Types.Int ->
  -- | 'payoutCurrency'
  Data.Text.Internal.Text ->
  -- | 'payoutId'
  Data.Text.Internal.Text ->
  -- | 'payoutLivemode'
  GHC.Types.Bool ->
  -- | 'payoutMethod'
  Data.Text.Internal.Text ->
  -- | 'payoutReconciliationStatus'
  PayoutReconciliationStatus' ->
  -- | 'payoutSourceType'
  Data.Text.Internal.Text ->
  -- | 'payoutStatus'
  Data.Text.Internal.Text ->
  -- | 'payoutType'
  PayoutType' ->
  Payout
mkPayout payoutAmount payoutArrivalDate payoutAutomatic payoutCreated payoutCurrency payoutId payoutLivemode payoutMethod payoutReconciliationStatus payoutSourceType payoutStatus payoutType =
  Payout
    { payoutAmount = payoutAmount,
      payoutArrivalDate = payoutArrivalDate,
      payoutAutomatic = payoutAutomatic,
      payoutBalanceTransaction = GHC.Maybe.Nothing,
      payoutCreated = payoutCreated,
      payoutCurrency = payoutCurrency,
      payoutDescription = GHC.Maybe.Nothing,
      payoutDestination = GHC.Maybe.Nothing,
      payoutFailureBalanceTransaction = GHC.Maybe.Nothing,
      payoutFailureCode = GHC.Maybe.Nothing,
      payoutFailureMessage = GHC.Maybe.Nothing,
      payoutId = payoutId,
      payoutLivemode = payoutLivemode,
      payoutMetadata = GHC.Maybe.Nothing,
      payoutMethod = payoutMethod,
      payoutOriginalPayout = GHC.Maybe.Nothing,
      payoutReconciliationStatus = payoutReconciliationStatus,
      payoutReversedBy = GHC.Maybe.Nothing,
      payoutSourceType = payoutSourceType,
      payoutStatementDescriptor = GHC.Maybe.Nothing,
      payoutStatus = payoutStatus,
      payoutType = payoutType
    }

-- | Defines the oneOf schema located at @components.schemas.payout.properties.balance_transaction.anyOf@ in the specification.
--
-- ID of the balance transaction that describes the impact of this payout on your account balance.
data PayoutBalanceTransaction'NonNullableVariants
  = PayoutBalanceTransaction'NonNullableText Data.Text.Internal.Text
  | PayoutBalanceTransaction'NonNullableBalanceTransaction BalanceTransaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutBalanceTransaction'NonNullableVariants where
  toJSON (PayoutBalanceTransaction'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutBalanceTransaction'NonNullableBalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PayoutBalanceTransaction'NonNullableVariants where
  parseJSON val = case (PayoutBalanceTransaction'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PayoutBalanceTransaction'NonNullableBalanceTransaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.payout.properties.destination.anyOf@ in the specification.
--
-- ID of the bank account or card the payout is sent to.
data PayoutDestination'NonNullableVariants
  = PayoutDestination'NonNullableText Data.Text.Internal.Text
  | PayoutDestination'NonNullableBankAccount BankAccount
  | PayoutDestination'NonNullableCard Card
  | PayoutDestination'NonNullableDeletedBankAccount DeletedBankAccount
  | PayoutDestination'NonNullableDeletedCard DeletedCard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutDestination'NonNullableVariants where
  toJSON (PayoutDestination'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutDestination'NonNullableBankAccount a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutDestination'NonNullableCard a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutDestination'NonNullableDeletedBankAccount a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutDestination'NonNullableDeletedCard a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PayoutDestination'NonNullableVariants where
  parseJSON val = case (PayoutDestination'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PayoutDestination'NonNullableBankAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PayoutDestination'NonNullableCard Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PayoutDestination'NonNullableDeletedBankAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PayoutDestination'NonNullableDeletedCard Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")))) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.payout.properties.failure_balance_transaction.anyOf@ in the specification.
--
-- If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance.
data PayoutFailureBalanceTransaction'NonNullableVariants
  = PayoutFailureBalanceTransaction'NonNullableText Data.Text.Internal.Text
  | PayoutFailureBalanceTransaction'NonNullableBalanceTransaction BalanceTransaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutFailureBalanceTransaction'NonNullableVariants where
  toJSON (PayoutFailureBalanceTransaction'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutFailureBalanceTransaction'NonNullableBalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PayoutFailureBalanceTransaction'NonNullableVariants where
  parseJSON val = case (PayoutFailureBalanceTransaction'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PayoutFailureBalanceTransaction'NonNullableBalanceTransaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.payout.properties.original_payout.anyOf@ in the specification.
--
-- If the payout reverses another, this is the ID of the original payout.
data PayoutOriginalPayout'NonNullableVariants
  = PayoutOriginalPayout'NonNullableText Data.Text.Internal.Text
  | PayoutOriginalPayout'NonNullablePayout Payout
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutOriginalPayout'NonNullableVariants where
  toJSON (PayoutOriginalPayout'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutOriginalPayout'NonNullablePayout a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PayoutOriginalPayout'NonNullableVariants where
  parseJSON val = case (PayoutOriginalPayout'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PayoutOriginalPayout'NonNullablePayout Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.payout.properties.reconciliation_status@ in the specification.
--
-- If \`completed\`, you can use the [Balance Transactions API](https:\/\/stripe.com\/docs\/api\/balance_transactions\/list\#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout.
data PayoutReconciliationStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PayoutReconciliationStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PayoutReconciliationStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"completed"@
    PayoutReconciliationStatus'EnumCompleted
  | -- | Represents the JSON value @"in_progress"@
    PayoutReconciliationStatus'EnumInProgress
  | -- | Represents the JSON value @"not_applicable"@
    PayoutReconciliationStatus'EnumNotApplicable
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutReconciliationStatus' where
  toJSON (PayoutReconciliationStatus'Other val) = val
  toJSON (PayoutReconciliationStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PayoutReconciliationStatus'EnumCompleted) = "completed"
  toJSON (PayoutReconciliationStatus'EnumInProgress) = "in_progress"
  toJSON (PayoutReconciliationStatus'EnumNotApplicable) = "not_applicable"

instance Data.Aeson.Types.FromJSON.FromJSON PayoutReconciliationStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "completed" -> PayoutReconciliationStatus'EnumCompleted
            | val GHC.Classes.== "in_progress" -> PayoutReconciliationStatus'EnumInProgress
            | val GHC.Classes.== "not_applicable" -> PayoutReconciliationStatus'EnumNotApplicable
            | GHC.Base.otherwise -> PayoutReconciliationStatus'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.payout.properties.reversed_by.anyOf@ in the specification.
--
-- If the payout reverses, this is the ID of the payout that reverses this payout.
data PayoutReversedBy'NonNullableVariants
  = PayoutReversedBy'NonNullableText Data.Text.Internal.Text
  | PayoutReversedBy'NonNullablePayout Payout
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutReversedBy'NonNullableVariants where
  toJSON (PayoutReversedBy'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutReversedBy'NonNullablePayout a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PayoutReversedBy'NonNullableVariants where
  parseJSON val = case (PayoutReversedBy'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PayoutReversedBy'NonNullablePayout Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.payout.properties.type@ in the specification.
--
-- Can be \`bank_account\` or \`card\`.
data PayoutType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PayoutType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PayoutType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_account"@
    PayoutType'EnumBankAccount
  | -- | Represents the JSON value @"card"@
    PayoutType'EnumCard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutType' where
  toJSON (PayoutType'Other val) = val
  toJSON (PayoutType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PayoutType'EnumBankAccount) = "bank_account"
  toJSON (PayoutType'EnumCard) = "card"

instance Data.Aeson.Types.FromJSON.FromJSON PayoutType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "bank_account" -> PayoutType'EnumBankAccount
            | val GHC.Classes.== "card" -> PayoutType'EnumCard
            | GHC.Base.otherwise -> PayoutType'Other val
      )
