{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Payout
module StripeAPI.Types.Payout where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.BankAccount
import {-# SOURCE #-} StripeAPI.Types.Card
import {-# SOURCE #-} StripeAPI.Types.DeletedBankAccount
import {-# SOURCE #-} StripeAPI.Types.DeletedCard
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema payout
--
-- A \`Payout\` object is created when you receive funds from Stripe, or when you
-- initiate a payout to either a bank account or debit card of a [connected
-- Stripe account](\/docs\/connect\/payouts). You can retrieve individual payouts,
-- as well as list all payouts. Payouts are made on [varying
-- schedules](\/docs\/payouts\#payout-schedule), depending on your country and
-- industry.
--
-- Related guide: [Receiving Payouts](https:\/\/stripe.com\/docs\/payouts).
data Payout
  = Payout
      { -- | amount: Amount (in %s) to be transferred to your bank account or debit card.
        payoutAmount :: GHC.Types.Int,
        -- | arrival_date: Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
        payoutArrivalDate :: GHC.Types.Int,
        -- | automatic: Returns \`true\` if the payout was created by an [automated payout schedule](https:\/\/stripe.com\/docs\/payouts\#payout-schedule), and \`false\` if it was [requested manually](https:\/\/stripe.com\/docs\/payouts\#manual-payouts).
        payoutAutomatic :: GHC.Types.Bool,
        -- | balance_transaction: ID of the balance transaction that describes the impact of this payout on your account balance.
        payoutBalanceTransaction :: (GHC.Maybe.Maybe PayoutBalanceTransaction'Variants),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        payoutCreated :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        payoutCurrency :: Data.Text.Internal.Text,
        -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        payoutDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | destination: ID of the bank account or card the payout was sent to.
        payoutDestination :: (GHC.Maybe.Maybe PayoutDestination'Variants),
        -- | failure_balance_transaction: If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance.
        payoutFailureBalanceTransaction :: (GHC.Maybe.Maybe PayoutFailureBalanceTransaction'Variants),
        -- | failure_code: Error code explaining reason for payout failure if available. See [Types of payout failures](https:\/\/stripe.com\/docs\/api\#payout_failures) for a list of failure codes.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        payoutFailureCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | failure_message: Message to user further explaining reason for payout failure if available.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        payoutFailureMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        payoutId :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        payoutLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        payoutMetadata :: Data.Aeson.Types.Internal.Object,
        -- | method: The method used to send this payout, which can be \`standard\` or \`instant\`. \`instant\` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https:\/\/stripe.com\/blog\/instant-payouts-for-marketplaces) for more information.)
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        payoutMethod :: Data.Text.Internal.Text,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        payoutObject :: PayoutObject',
        -- | source_type: The source balance this payout came from. One of \`card\`, \`fpx\`, or \`bank_account\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        payoutSourceType :: Data.Text.Internal.Text,
        -- | statement_descriptor: Extra information about a payout to be displayed on the user\'s bank statement.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        payoutStatementDescriptor :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | status: Current status of the payout (\`paid\`, \`pending\`, \`in_transit\`, \`canceled\` or \`failed\`). A payout will be \`pending\` until it is submitted to the bank, at which point it becomes \`in_transit\`. It will then change to \`paid\` if the transaction goes through. If it does not go through successfully, its status will change to \`failed\` or \`canceled\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        payoutStatus :: Data.Text.Internal.Text,
        -- | type: Can be \`bank_account\` or \`card\`.
        payoutType :: PayoutType'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Payout where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (payoutAmount obj) : (Data.Aeson..=) "arrival_date" (payoutArrivalDate obj) : (Data.Aeson..=) "automatic" (payoutAutomatic obj) : (Data.Aeson..=) "balance_transaction" (payoutBalanceTransaction obj) : (Data.Aeson..=) "created" (payoutCreated obj) : (Data.Aeson..=) "currency" (payoutCurrency obj) : (Data.Aeson..=) "description" (payoutDescription obj) : (Data.Aeson..=) "destination" (payoutDestination obj) : (Data.Aeson..=) "failure_balance_transaction" (payoutFailureBalanceTransaction obj) : (Data.Aeson..=) "failure_code" (payoutFailureCode obj) : (Data.Aeson..=) "failure_message" (payoutFailureMessage obj) : (Data.Aeson..=) "id" (payoutId obj) : (Data.Aeson..=) "livemode" (payoutLivemode obj) : (Data.Aeson..=) "metadata" (payoutMetadata obj) : (Data.Aeson..=) "method" (payoutMethod obj) : (Data.Aeson..=) "object" (payoutObject obj) : (Data.Aeson..=) "source_type" (payoutSourceType obj) : (Data.Aeson..=) "statement_descriptor" (payoutStatementDescriptor obj) : (Data.Aeson..=) "status" (payoutStatus obj) : (Data.Aeson..=) "type" (payoutType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (payoutAmount obj) GHC.Base.<> ((Data.Aeson..=) "arrival_date" (payoutArrivalDate obj) GHC.Base.<> ((Data.Aeson..=) "automatic" (payoutAutomatic obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (payoutBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "created" (payoutCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (payoutCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (payoutDescription obj) GHC.Base.<> ((Data.Aeson..=) "destination" (payoutDestination obj) GHC.Base.<> ((Data.Aeson..=) "failure_balance_transaction" (payoutFailureBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "failure_code" (payoutFailureCode obj) GHC.Base.<> ((Data.Aeson..=) "failure_message" (payoutFailureMessage obj) GHC.Base.<> ((Data.Aeson..=) "id" (payoutId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (payoutLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (payoutMetadata obj) GHC.Base.<> ((Data.Aeson..=) "method" (payoutMethod obj) GHC.Base.<> ((Data.Aeson..=) "object" (payoutObject obj) GHC.Base.<> ((Data.Aeson..=) "source_type" (payoutSourceType obj) GHC.Base.<> ((Data.Aeson..=) "statement_descriptor" (payoutStatementDescriptor obj) GHC.Base.<> ((Data.Aeson..=) "status" (payoutStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (payoutType obj))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Payout where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Payout" (\obj -> (((((((((((((((((((GHC.Base.pure Payout GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "arrival_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "automatic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "failure_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Define the one-of schema payoutBalance_transaction\'
--
-- ID of the balance transaction that describes the impact of this payout on your account balance.
data PayoutBalanceTransaction'Variants
  = PayoutBalanceTransaction'BalanceTransaction BalanceTransaction
  | PayoutBalanceTransaction'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutBalanceTransaction'Variants where
  toJSON (PayoutBalanceTransaction'BalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutBalanceTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PayoutBalanceTransaction'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PayoutBalanceTransaction'BalanceTransaction a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PayoutBalanceTransaction'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema payoutDestination\'
--
-- ID of the bank account or card the payout was sent to.
data PayoutDestination'Variants
  = PayoutDestination'BankAccount BankAccount
  | PayoutDestination'Card Card
  | PayoutDestination'DeletedBankAccount DeletedBankAccount
  | PayoutDestination'DeletedCard DeletedCard
  | PayoutDestination'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutDestination'Variants where
  toJSON (PayoutDestination'BankAccount a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutDestination'Card a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutDestination'DeletedBankAccount a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutDestination'DeletedCard a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutDestination'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PayoutDestination'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PayoutDestination'BankAccount a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PayoutDestination'Card a
      Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
        Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PayoutDestination'DeletedBankAccount a
        Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PayoutDestination'DeletedCard a
          Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
            Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PayoutDestination'Text a
            Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema payoutFailure_balance_transaction\'
--
-- If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance.
data PayoutFailureBalanceTransaction'Variants
  = PayoutFailureBalanceTransaction'BalanceTransaction BalanceTransaction
  | PayoutFailureBalanceTransaction'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutFailureBalanceTransaction'Variants where
  toJSON (PayoutFailureBalanceTransaction'BalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PayoutFailureBalanceTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PayoutFailureBalanceTransaction'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PayoutFailureBalanceTransaction'BalanceTransaction a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PayoutFailureBalanceTransaction'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema payoutObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data PayoutObject'
  = PayoutObject'EnumOther Data.Aeson.Types.Internal.Value
  | PayoutObject'EnumTyped Data.Text.Internal.Text
  | PayoutObject'EnumStringPayout
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutObject' where
  toJSON (PayoutObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PayoutObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PayoutObject'EnumStringPayout) = "payout"

instance Data.Aeson.Types.FromJSON.FromJSON PayoutObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "payout" -> PayoutObject'EnumStringPayout
            | GHC.Base.otherwise -> PayoutObject'EnumOther val
      )

-- | Defines the enum schema payoutType\'
--
-- Can be \`bank_account\` or \`card\`.
data PayoutType'
  = PayoutType'EnumOther Data.Aeson.Types.Internal.Value
  | PayoutType'EnumTyped Data.Text.Internal.Text
  | PayoutType'EnumStringBankAccount
  | PayoutType'EnumStringCard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PayoutType' where
  toJSON (PayoutType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PayoutType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PayoutType'EnumStringBankAccount) = "bank_account"
  toJSON (PayoutType'EnumStringCard) = "card"

instance Data.Aeson.Types.FromJSON.FromJSON PayoutType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "bank_account" -> PayoutType'EnumStringBankAccount
            | val GHC.Classes.== "card" -> PayoutType'EnumStringCard
            | GHC.Base.otherwise -> PayoutType'EnumOther val
      )
