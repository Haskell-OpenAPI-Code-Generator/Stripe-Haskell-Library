{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema MandateBacsDebit
module StripeAPI.Types.MandateBacsDebit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.mandate_bacs_debit@ in the specification.
data MandateBacsDebit = MandateBacsDebit
  { -- | network_status: The status of the mandate on the Bacs network. Can be one of \`pending\`, \`revoked\`, \`refused\`, or \`accepted\`.
    mandateBacsDebitNetworkStatus :: MandateBacsDebitNetworkStatus',
    -- | reference: The unique reference identifying the mandate on the Bacs network.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    mandateBacsDebitReference :: Data.Text.Internal.Text,
    -- | url: The URL that will contain the mandate that the customer has signed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    mandateBacsDebitUrl :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON MandateBacsDebit where
  toJSON obj = Data.Aeson.Types.Internal.object ("network_status" Data.Aeson.Types.ToJSON..= mandateBacsDebitNetworkStatus obj : "reference" Data.Aeson.Types.ToJSON..= mandateBacsDebitReference obj : "url" Data.Aeson.Types.ToJSON..= mandateBacsDebitUrl obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("network_status" Data.Aeson.Types.ToJSON..= mandateBacsDebitNetworkStatus obj) GHC.Base.<> (("reference" Data.Aeson.Types.ToJSON..= mandateBacsDebitReference obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= mandateBacsDebitUrl obj)))

instance Data.Aeson.Types.FromJSON.FromJSON MandateBacsDebit where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "MandateBacsDebit" (\obj -> ((GHC.Base.pure MandateBacsDebit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'MandateBacsDebit' with all required fields.
mkMandateBacsDebit ::
  -- | 'mandateBacsDebitNetworkStatus'
  MandateBacsDebitNetworkStatus' ->
  -- | 'mandateBacsDebitReference'
  Data.Text.Internal.Text ->
  -- | 'mandateBacsDebitUrl'
  Data.Text.Internal.Text ->
  MandateBacsDebit
mkMandateBacsDebit mandateBacsDebitNetworkStatus mandateBacsDebitReference mandateBacsDebitUrl =
  MandateBacsDebit
    { mandateBacsDebitNetworkStatus = mandateBacsDebitNetworkStatus,
      mandateBacsDebitReference = mandateBacsDebitReference,
      mandateBacsDebitUrl = mandateBacsDebitUrl
    }

-- | Defines the enum schema located at @components.schemas.mandate_bacs_debit.properties.network_status@ in the specification.
--
-- The status of the mandate on the Bacs network. Can be one of \`pending\`, \`revoked\`, \`refused\`, or \`accepted\`.
data MandateBacsDebitNetworkStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    MandateBacsDebitNetworkStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    MandateBacsDebitNetworkStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"accepted"@
    MandateBacsDebitNetworkStatus'EnumAccepted
  | -- | Represents the JSON value @"pending"@
    MandateBacsDebitNetworkStatus'EnumPending
  | -- | Represents the JSON value @"refused"@
    MandateBacsDebitNetworkStatus'EnumRefused
  | -- | Represents the JSON value @"revoked"@
    MandateBacsDebitNetworkStatus'EnumRevoked
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON MandateBacsDebitNetworkStatus' where
  toJSON (MandateBacsDebitNetworkStatus'Other val) = val
  toJSON (MandateBacsDebitNetworkStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (MandateBacsDebitNetworkStatus'EnumAccepted) = "accepted"
  toJSON (MandateBacsDebitNetworkStatus'EnumPending) = "pending"
  toJSON (MandateBacsDebitNetworkStatus'EnumRefused) = "refused"
  toJSON (MandateBacsDebitNetworkStatus'EnumRevoked) = "revoked"

instance Data.Aeson.Types.FromJSON.FromJSON MandateBacsDebitNetworkStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "accepted" -> MandateBacsDebitNetworkStatus'EnumAccepted
            | val GHC.Classes.== "pending" -> MandateBacsDebitNetworkStatus'EnumPending
            | val GHC.Classes.== "refused" -> MandateBacsDebitNetworkStatus'EnumRefused
            | val GHC.Classes.== "revoked" -> MandateBacsDebitNetworkStatus'EnumRevoked
            | GHC.Base.otherwise -> MandateBacsDebitNetworkStatus'Other val
      )
