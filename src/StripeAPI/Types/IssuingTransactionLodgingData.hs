{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingTransactionLodgingData
module StripeAPI.Types.IssuingTransactionLodgingData where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_transaction_lodging_data@ in the specification.
data IssuingTransactionLodgingData = IssuingTransactionLodgingData
  { -- | check_in_at: The time of checking into the lodging.
    issuingTransactionLodgingDataCheckInAt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | nights: The number of nights stayed at the lodging.
    issuingTransactionLodgingDataNights :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingTransactionLodgingData where
  toJSON obj = Data.Aeson.Types.Internal.object ("check_in_at" Data.Aeson.Types.ToJSON..= issuingTransactionLodgingDataCheckInAt obj : "nights" Data.Aeson.Types.ToJSON..= issuingTransactionLodgingDataNights obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("check_in_at" Data.Aeson.Types.ToJSON..= issuingTransactionLodgingDataCheckInAt obj) GHC.Base.<> ("nights" Data.Aeson.Types.ToJSON..= issuingTransactionLodgingDataNights obj))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingTransactionLodgingData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingTransactionLodgingData" (\obj -> (GHC.Base.pure IssuingTransactionLodgingData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "check_in_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nights"))

-- | Create a new 'IssuingTransactionLodgingData' with all required fields.
mkIssuingTransactionLodgingData :: IssuingTransactionLodgingData
mkIssuingTransactionLodgingData =
  IssuingTransactionLodgingData
    { issuingTransactionLodgingDataCheckInAt = GHC.Maybe.Nothing,
      issuingTransactionLodgingDataNights = GHC.Maybe.Nothing
    }
