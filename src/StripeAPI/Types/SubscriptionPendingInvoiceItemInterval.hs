{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema SubscriptionPendingInvoiceItemInterval
module StripeAPI.Types.SubscriptionPendingInvoiceItemInterval where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.subscription_pending_invoice_item_interval@ in the specification.
data SubscriptionPendingInvoiceItemInterval
  = SubscriptionPendingInvoiceItemInterval
      { -- | interval: Specifies invoicing frequency. Either \`day\`, \`week\`, \`month\` or \`year\`.
        subscriptionPendingInvoiceItemIntervalInterval :: SubscriptionPendingInvoiceItemIntervalInterval',
        -- | interval_count: The number of intervals between invoices. For example, \`interval=month\` and \`interval_count=3\` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
        subscriptionPendingInvoiceItemIntervalIntervalCount :: GHC.Types.Int
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPendingInvoiceItemInterval where
  toJSON obj = Data.Aeson.Types.Internal.object ("interval" Data.Aeson.Types.ToJSON..= subscriptionPendingInvoiceItemIntervalInterval obj : "interval_count" Data.Aeson.Types.ToJSON..= subscriptionPendingInvoiceItemIntervalIntervalCount obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("interval" Data.Aeson.Types.ToJSON..= subscriptionPendingInvoiceItemIntervalInterval obj) GHC.Base.<> ("interval_count" Data.Aeson.Types.ToJSON..= subscriptionPendingInvoiceItemIntervalIntervalCount obj))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPendingInvoiceItemInterval where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPendingInvoiceItemInterval" (\obj -> (GHC.Base.pure SubscriptionPendingInvoiceItemInterval GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval_count"))

-- | Create a new 'SubscriptionPendingInvoiceItemInterval' with all required fields.
mkSubscriptionPendingInvoiceItemInterval ::
  -- | 'subscriptionPendingInvoiceItemIntervalInterval'
  SubscriptionPendingInvoiceItemIntervalInterval' ->
  -- | 'subscriptionPendingInvoiceItemIntervalIntervalCount'
  GHC.Types.Int ->
  SubscriptionPendingInvoiceItemInterval
mkSubscriptionPendingInvoiceItemInterval subscriptionPendingInvoiceItemIntervalInterval subscriptionPendingInvoiceItemIntervalIntervalCount =
  SubscriptionPendingInvoiceItemInterval
    { subscriptionPendingInvoiceItemIntervalInterval = subscriptionPendingInvoiceItemIntervalInterval,
      subscriptionPendingInvoiceItemIntervalIntervalCount = subscriptionPendingInvoiceItemIntervalIntervalCount
    }

-- | Defines the enum schema located at @components.schemas.subscription_pending_invoice_item_interval.properties.interval@ in the specification.
--
-- Specifies invoicing frequency. Either \`day\`, \`week\`, \`month\` or \`year\`.
data SubscriptionPendingInvoiceItemIntervalInterval'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionPendingInvoiceItemIntervalInterval'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionPendingInvoiceItemIntervalInterval'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"day"@
    SubscriptionPendingInvoiceItemIntervalInterval'EnumDay
  | -- | Represents the JSON value @"month"@
    SubscriptionPendingInvoiceItemIntervalInterval'EnumMonth
  | -- | Represents the JSON value @"week"@
    SubscriptionPendingInvoiceItemIntervalInterval'EnumWeek
  | -- | Represents the JSON value @"year"@
    SubscriptionPendingInvoiceItemIntervalInterval'EnumYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPendingInvoiceItemIntervalInterval' where
  toJSON (SubscriptionPendingInvoiceItemIntervalInterval'Other val) = val
  toJSON (SubscriptionPendingInvoiceItemIntervalInterval'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionPendingInvoiceItemIntervalInterval'EnumDay) = "day"
  toJSON (SubscriptionPendingInvoiceItemIntervalInterval'EnumMonth) = "month"
  toJSON (SubscriptionPendingInvoiceItemIntervalInterval'EnumWeek) = "week"
  toJSON (SubscriptionPendingInvoiceItemIntervalInterval'EnumYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPendingInvoiceItemIntervalInterval' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "day" -> SubscriptionPendingInvoiceItemIntervalInterval'EnumDay
            | val GHC.Classes.== "month" -> SubscriptionPendingInvoiceItemIntervalInterval'EnumMonth
            | val GHC.Classes.== "week" -> SubscriptionPendingInvoiceItemIntervalInterval'EnumWeek
            | val GHC.Classes.== "year" -> SubscriptionPendingInvoiceItemIntervalInterval'EnumYear
            | GHC.Base.otherwise -> SubscriptionPendingInvoiceItemIntervalInterval'Other val
      )
