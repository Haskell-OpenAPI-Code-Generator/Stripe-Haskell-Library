{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodAcssDebit
module StripeAPI.Types.PaymentMethodAcssDebit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_acss_debit@ in the specification.
data PaymentMethodAcssDebit = PaymentMethodAcssDebit
  { -- | bank_name: Name of the bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodAcssDebitBankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodAcssDebitFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | institution_number: Institution number of the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodAcssDebitInstitutionNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last4: Last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodAcssDebitLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | transit_number: Transit number of the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodAcssDebitTransitNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodAcssDebit where
  toJSON obj = Data.Aeson.Types.Internal.object ("bank_name" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitBankName obj : "fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitFingerprint obj : "institution_number" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitInstitutionNumber obj : "last4" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitLast4 obj : "transit_number" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitTransitNumber obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bank_name" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitBankName obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitFingerprint obj) GHC.Base.<> (("institution_number" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitInstitutionNumber obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitLast4 obj) GHC.Base.<> ("transit_number" Data.Aeson.Types.ToJSON..= paymentMethodAcssDebitTransitNumber obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodAcssDebit where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodAcssDebit" (\obj -> ((((GHC.Base.pure PaymentMethodAcssDebit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "institution_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transit_number"))

-- | Create a new 'PaymentMethodAcssDebit' with all required fields.
mkPaymentMethodAcssDebit :: PaymentMethodAcssDebit
mkPaymentMethodAcssDebit =
  PaymentMethodAcssDebit
    { paymentMethodAcssDebitBankName = GHC.Maybe.Nothing,
      paymentMethodAcssDebitFingerprint = GHC.Maybe.Nothing,
      paymentMethodAcssDebitInstitutionNumber = GHC.Maybe.Nothing,
      paymentMethodAcssDebitLast4 = GHC.Maybe.Nothing,
      paymentMethodAcssDebitTransitNumber = GHC.Maybe.Nothing
    }
