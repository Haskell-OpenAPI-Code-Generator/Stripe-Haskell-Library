{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema FinancialConnections_Account
module StripeAPI.Types.FinancialConnections_Account where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.BankConnectionsResourceAccountholder
import {-# SOURCE #-} StripeAPI.Types.BankConnectionsResourceBalance
import {-# SOURCE #-} StripeAPI.Types.BankConnectionsResourceBalanceApiResourceCashBalance
import {-# SOURCE #-} StripeAPI.Types.BankConnectionsResourceBalanceApiResourceCreditBalance
import {-# SOURCE #-} StripeAPI.Types.BankConnectionsResourceBalanceRefresh
import {-# SOURCE #-} StripeAPI.Types.BankConnectionsResourceOwnershipRefresh
import {-# SOURCE #-} StripeAPI.Types.BankConnectionsResourceTransactionRefresh
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.FinancialConnections_AccountOwnership
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.financial_connections.account@ in the specification.
--
-- A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
data FinancialConnections'account = FinancialConnections'account
  { -- | account_holder: The account holder that this account belongs to.
    financialConnections'accountAccountHolder :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable FinancialConnections'accountAccountHolder'NonNullable)),
    -- | balance: The most recent information about the account\'s balance.
    financialConnections'accountBalance :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable FinancialConnections'accountBalance'NonNullable)),
    -- | balance_refresh: The state of the most recent attempt to refresh the account balance.
    financialConnections'accountBalanceRefresh :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable FinancialConnections'accountBalanceRefresh'NonNullable)),
    -- | category: The type of the account. Account category is further divided in \`subcategory\`.
    financialConnections'accountCategory :: FinancialConnections'accountCategory',
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    financialConnections'accountCreated :: GHC.Types.Int,
    -- | display_name: A human-readable name that has been assigned to this account, either by the account holder or by the institution.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    financialConnections'accountDisplayName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    financialConnections'accountId :: Data.Text.Internal.Text,
    -- | institution_name: The name of the institution that holds this account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    financialConnections'accountInstitutionName :: Data.Text.Internal.Text,
    -- | last4: The last 4 digits of the account number. If present, this will be 4 numeric characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    financialConnections'accountLast4 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    financialConnections'accountLivemode :: GHC.Types.Bool,
    -- | ownership: The most recent information about the account\'s owners.
    financialConnections'accountOwnership :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable FinancialConnections'accountOwnership'NonNullableVariants)),
    -- | ownership_refresh: The state of the most recent attempt to refresh the account owners.
    financialConnections'accountOwnershipRefresh :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable FinancialConnections'accountOwnershipRefresh'NonNullable)),
    -- | permissions: The list of permissions granted by this account.
    financialConnections'accountPermissions :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([FinancialConnections'accountPermissions'NonNullable]))),
    -- | status: The status of the link to the account.
    financialConnections'accountStatus :: FinancialConnections'accountStatus',
    -- | subcategory: If \`category\` is \`cash\`, one of:
    --
    --  - \`checking\`
    --  - \`savings\`
    --  - \`other\`
    --
    -- If \`category\` is \`credit\`, one of:
    --
    --  - \`mortgage\`
    --  - \`line_of_credit\`
    --  - \`credit_card\`
    --  - \`other\`
    --
    -- If \`category\` is \`investment\` or \`other\`, this will be \`other\`.
    financialConnections'accountSubcategory :: FinancialConnections'accountSubcategory',
    -- | subscriptions: The list of data refresh subscriptions requested on this account.
    financialConnections'accountSubscriptions :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([FinancialConnections'accountSubscriptions'NonNullable]))),
    -- | supported_payment_method_types: The [PaymentMethod type](https:\/\/stripe.com\/docs\/api\/payment_methods\/object\#payment_method_object-type)(s) that can be created from this account.
    financialConnections'accountSupportedPaymentMethodTypes :: ([FinancialConnections'accountSupportedPaymentMethodTypes']),
    -- | transaction_refresh: The state of the most recent attempt to refresh the account transactions.
    financialConnections'accountTransactionRefresh :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable FinancialConnections'accountTransactionRefresh'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'account where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountAccountHolder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance_refresh" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalanceRefresh obj) : ["category" Data.Aeson.Types.ToJSON..= financialConnections'accountCategory obj] : ["created" Data.Aeson.Types.ToJSON..= financialConnections'accountCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountDisplayName obj) : ["id" Data.Aeson.Types.ToJSON..= financialConnections'accountId obj] : ["institution_name" Data.Aeson.Types.ToJSON..= financialConnections'accountInstitutionName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountLast4 obj) : ["livemode" Data.Aeson.Types.ToJSON..= financialConnections'accountLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ownership" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountOwnership obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ownership_refresh" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountOwnershipRefresh obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountPermissions obj) : ["status" Data.Aeson.Types.ToJSON..= financialConnections'accountStatus obj] : ["subcategory" Data.Aeson.Types.ToJSON..= financialConnections'accountSubcategory obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscriptions" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountSubscriptions obj) : ["supported_payment_method_types" Data.Aeson.Types.ToJSON..= financialConnections'accountSupportedPaymentMethodTypes obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_refresh" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "financial_connections.account"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountAccountHolder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance_refresh" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalanceRefresh obj) : ["category" Data.Aeson.Types.ToJSON..= financialConnections'accountCategory obj] : ["created" Data.Aeson.Types.ToJSON..= financialConnections'accountCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountDisplayName obj) : ["id" Data.Aeson.Types.ToJSON..= financialConnections'accountId obj] : ["institution_name" Data.Aeson.Types.ToJSON..= financialConnections'accountInstitutionName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountLast4 obj) : ["livemode" Data.Aeson.Types.ToJSON..= financialConnections'accountLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ownership" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountOwnership obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ownership_refresh" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountOwnershipRefresh obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountPermissions obj) : ["status" Data.Aeson.Types.ToJSON..= financialConnections'accountStatus obj] : ["subcategory" Data.Aeson.Types.ToJSON..= financialConnections'accountSubcategory obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscriptions" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountSubscriptions obj) : ["supported_payment_method_types" Data.Aeson.Types.ToJSON..= financialConnections'accountSupportedPaymentMethodTypes obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_refresh" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "financial_connections.account"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'account where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FinancialConnections'account" (\obj -> (((((((((((((((((GHC.Base.pure FinancialConnections'account GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "balance_refresh")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "category")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "institution_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ownership")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ownership_refresh")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subcategory")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subscriptions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "supported_payment_method_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transaction_refresh"))

-- | Create a new 'FinancialConnections'account' with all required fields.
mkFinancialConnections'account ::
  -- | 'financialConnections'accountCategory'
  FinancialConnections'accountCategory' ->
  -- | 'financialConnections'accountCreated'
  GHC.Types.Int ->
  -- | 'financialConnections'accountId'
  Data.Text.Internal.Text ->
  -- | 'financialConnections'accountInstitutionName'
  Data.Text.Internal.Text ->
  -- | 'financialConnections'accountLivemode'
  GHC.Types.Bool ->
  -- | 'financialConnections'accountStatus'
  FinancialConnections'accountStatus' ->
  -- | 'financialConnections'accountSubcategory'
  FinancialConnections'accountSubcategory' ->
  -- | 'financialConnections'accountSupportedPaymentMethodTypes'
  [FinancialConnections'accountSupportedPaymentMethodTypes'] ->
  FinancialConnections'account
mkFinancialConnections'account financialConnections'accountCategory financialConnections'accountCreated financialConnections'accountId financialConnections'accountInstitutionName financialConnections'accountLivemode financialConnections'accountStatus financialConnections'accountSubcategory financialConnections'accountSupportedPaymentMethodTypes =
  FinancialConnections'account
    { financialConnections'accountAccountHolder = GHC.Maybe.Nothing,
      financialConnections'accountBalance = GHC.Maybe.Nothing,
      financialConnections'accountBalanceRefresh = GHC.Maybe.Nothing,
      financialConnections'accountCategory = financialConnections'accountCategory,
      financialConnections'accountCreated = financialConnections'accountCreated,
      financialConnections'accountDisplayName = GHC.Maybe.Nothing,
      financialConnections'accountId = financialConnections'accountId,
      financialConnections'accountInstitutionName = financialConnections'accountInstitutionName,
      financialConnections'accountLast4 = GHC.Maybe.Nothing,
      financialConnections'accountLivemode = financialConnections'accountLivemode,
      financialConnections'accountOwnership = GHC.Maybe.Nothing,
      financialConnections'accountOwnershipRefresh = GHC.Maybe.Nothing,
      financialConnections'accountPermissions = GHC.Maybe.Nothing,
      financialConnections'accountStatus = financialConnections'accountStatus,
      financialConnections'accountSubcategory = financialConnections'accountSubcategory,
      financialConnections'accountSubscriptions = GHC.Maybe.Nothing,
      financialConnections'accountSupportedPaymentMethodTypes = financialConnections'accountSupportedPaymentMethodTypes,
      financialConnections'accountTransactionRefresh = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.financial_connections.account.properties.account_holder.anyOf@ in the specification.
--
-- The account holder that this account belongs to.
data FinancialConnections'accountAccountHolder'NonNullable = FinancialConnections'accountAccountHolder'NonNullable
  { -- | account: The ID of the Stripe account this account belongs to. Should only be present if \`account_holder.type\` is \`account\`.
    financialConnections'accountAccountHolder'NonNullableAccount :: (GHC.Maybe.Maybe FinancialConnections'accountAccountHolder'NonNullableAccount'Variants),
    -- | customer: ID of the Stripe customer this account belongs to. Present if and only if \`account_holder.type\` is \`customer\`.
    financialConnections'accountAccountHolder'NonNullableCustomer :: (GHC.Maybe.Maybe FinancialConnections'accountAccountHolder'NonNullableCustomer'Variants),
    -- | type: Type of account holder that this account belongs to.
    financialConnections'accountAccountHolder'NonNullableType :: (GHC.Maybe.Maybe FinancialConnections'accountAccountHolder'NonNullableType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountAccountHolder'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountAccountHolder'NonNullableAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountAccountHolder'NonNullableCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountAccountHolder'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountAccountHolder'NonNullableAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountAccountHolder'NonNullableCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountAccountHolder'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountAccountHolder'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FinancialConnections'accountAccountHolder'NonNullable" (\obj -> ((GHC.Base.pure FinancialConnections'accountAccountHolder'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'FinancialConnections'accountAccountHolder'NonNullable' with all required fields.
mkFinancialConnections'accountAccountHolder'NonNullable :: FinancialConnections'accountAccountHolder'NonNullable
mkFinancialConnections'accountAccountHolder'NonNullable =
  FinancialConnections'accountAccountHolder'NonNullable
    { financialConnections'accountAccountHolder'NonNullableAccount = GHC.Maybe.Nothing,
      financialConnections'accountAccountHolder'NonNullableCustomer = GHC.Maybe.Nothing,
      financialConnections'accountAccountHolder'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.financial_connections.account.properties.account_holder.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the Stripe account this account belongs to. Should only be present if \`account_holder.type\` is \`account\`.
data FinancialConnections'accountAccountHolder'NonNullableAccount'Variants
  = FinancialConnections'accountAccountHolder'NonNullableAccount'Text Data.Text.Internal.Text
  | FinancialConnections'accountAccountHolder'NonNullableAccount'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountAccountHolder'NonNullableAccount'Variants where
  toJSON (FinancialConnections'accountAccountHolder'NonNullableAccount'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (FinancialConnections'accountAccountHolder'NonNullableAccount'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountAccountHolder'NonNullableAccount'Variants where
  parseJSON val = case (FinancialConnections'accountAccountHolder'NonNullableAccount'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((FinancialConnections'accountAccountHolder'NonNullableAccount'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.financial_connections.account.properties.account_holder.anyOf.properties.customer.anyOf@ in the specification.
--
-- ID of the Stripe customer this account belongs to. Present if and only if \`account_holder.type\` is \`customer\`.
data FinancialConnections'accountAccountHolder'NonNullableCustomer'Variants
  = FinancialConnections'accountAccountHolder'NonNullableCustomer'Text Data.Text.Internal.Text
  | FinancialConnections'accountAccountHolder'NonNullableCustomer'Customer Customer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountAccountHolder'NonNullableCustomer'Variants where
  toJSON (FinancialConnections'accountAccountHolder'NonNullableCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (FinancialConnections'accountAccountHolder'NonNullableCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountAccountHolder'NonNullableCustomer'Variants where
  parseJSON val = case (FinancialConnections'accountAccountHolder'NonNullableCustomer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((FinancialConnections'accountAccountHolder'NonNullableCustomer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.account_holder.anyOf.properties.type@ in the specification.
--
-- Type of account holder that this account belongs to.
data FinancialConnections'accountAccountHolder'NonNullableType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountAccountHolder'NonNullableType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountAccountHolder'NonNullableType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"account"@
    FinancialConnections'accountAccountHolder'NonNullableType'EnumAccount
  | -- | Represents the JSON value @"customer"@
    FinancialConnections'accountAccountHolder'NonNullableType'EnumCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountAccountHolder'NonNullableType' where
  toJSON (FinancialConnections'accountAccountHolder'NonNullableType'Other val) = val
  toJSON (FinancialConnections'accountAccountHolder'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountAccountHolder'NonNullableType'EnumAccount) = "account"
  toJSON (FinancialConnections'accountAccountHolder'NonNullableType'EnumCustomer) = "customer"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountAccountHolder'NonNullableType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "account" -> FinancialConnections'accountAccountHolder'NonNullableType'EnumAccount
            | val GHC.Classes.== "customer" -> FinancialConnections'accountAccountHolder'NonNullableType'EnumCustomer
            | GHC.Base.otherwise -> FinancialConnections'accountAccountHolder'NonNullableType'Other val
      )

-- | Defines the object schema located at @components.schemas.financial_connections.account.properties.balance.anyOf@ in the specification.
--
-- The most recent information about the account\\\'s balance.
data FinancialConnections'accountBalance'NonNullable = FinancialConnections'accountBalance'NonNullable
  { -- | as_of: The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.
    financialConnections'accountBalance'NonNullableAsOf :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | cash:
    financialConnections'accountBalance'NonNullableCash :: (GHC.Maybe.Maybe BankConnectionsResourceBalanceApiResourceCashBalance),
    -- | credit:
    financialConnections'accountBalance'NonNullableCredit :: (GHC.Maybe.Maybe BankConnectionsResourceBalanceApiResourceCreditBalance),
    -- | current: The balances owed to (or by) the account holder.
    --
    -- Each key is a three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase.
    --
    -- Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
    financialConnections'accountBalance'NonNullableCurrent :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | type: The \`type\` of the balance. An additional hash is included on the balance with a name matching this value.
    financialConnections'accountBalance'NonNullableType :: (GHC.Maybe.Maybe FinancialConnections'accountBalance'NonNullableType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountBalance'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("as_of" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableAsOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cash" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableCash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableCredit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableCurrent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("as_of" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableAsOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cash" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableCash obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("credit" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableCredit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableCurrent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalance'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountBalance'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FinancialConnections'accountBalance'NonNullable" (\obj -> ((((GHC.Base.pure FinancialConnections'accountBalance'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "as_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "credit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "current")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'FinancialConnections'accountBalance'NonNullable' with all required fields.
mkFinancialConnections'accountBalance'NonNullable :: FinancialConnections'accountBalance'NonNullable
mkFinancialConnections'accountBalance'NonNullable =
  FinancialConnections'accountBalance'NonNullable
    { financialConnections'accountBalance'NonNullableAsOf = GHC.Maybe.Nothing,
      financialConnections'accountBalance'NonNullableCash = GHC.Maybe.Nothing,
      financialConnections'accountBalance'NonNullableCredit = GHC.Maybe.Nothing,
      financialConnections'accountBalance'NonNullableCurrent = GHC.Maybe.Nothing,
      financialConnections'accountBalance'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.balance.anyOf.properties.type@ in the specification.
--
-- The \`type\` of the balance. An additional hash is included on the balance with a name matching this value.
data FinancialConnections'accountBalance'NonNullableType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountBalance'NonNullableType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountBalance'NonNullableType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"cash"@
    FinancialConnections'accountBalance'NonNullableType'EnumCash
  | -- | Represents the JSON value @"credit"@
    FinancialConnections'accountBalance'NonNullableType'EnumCredit
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountBalance'NonNullableType' where
  toJSON (FinancialConnections'accountBalance'NonNullableType'Other val) = val
  toJSON (FinancialConnections'accountBalance'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountBalance'NonNullableType'EnumCash) = "cash"
  toJSON (FinancialConnections'accountBalance'NonNullableType'EnumCredit) = "credit"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountBalance'NonNullableType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "cash" -> FinancialConnections'accountBalance'NonNullableType'EnumCash
            | val GHC.Classes.== "credit" -> FinancialConnections'accountBalance'NonNullableType'EnumCredit
            | GHC.Base.otherwise -> FinancialConnections'accountBalance'NonNullableType'Other val
      )

-- | Defines the object schema located at @components.schemas.financial_connections.account.properties.balance_refresh.anyOf@ in the specification.
--
-- The state of the most recent attempt to refresh the account balance.
data FinancialConnections'accountBalanceRefresh'NonNullable = FinancialConnections'accountBalanceRefresh'NonNullable
  { -- | last_attempted_at: The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
    financialConnections'accountBalanceRefresh'NonNullableLastAttemptedAt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | next_refresh_available_at: Time at which the next balance refresh can be initiated. This value will be \`null\` when \`status\` is \`pending\`. Measured in seconds since the Unix epoch.
    financialConnections'accountBalanceRefresh'NonNullableNextRefreshAvailableAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | status: The status of the last refresh attempt.
    financialConnections'accountBalanceRefresh'NonNullableStatus :: (GHC.Maybe.Maybe FinancialConnections'accountBalanceRefresh'NonNullableStatus')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountBalanceRefresh'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_attempted_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalanceRefresh'NonNullableLastAttemptedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_refresh_available_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalanceRefresh'NonNullableNextRefreshAvailableAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalanceRefresh'NonNullableStatus obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_attempted_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalanceRefresh'NonNullableLastAttemptedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_refresh_available_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalanceRefresh'NonNullableNextRefreshAvailableAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountBalanceRefresh'NonNullableStatus obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountBalanceRefresh'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FinancialConnections'accountBalanceRefresh'NonNullable" (\obj -> ((GHC.Base.pure FinancialConnections'accountBalanceRefresh'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_attempted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "next_refresh_available_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status"))

-- | Create a new 'FinancialConnections'accountBalanceRefresh'NonNullable' with all required fields.
mkFinancialConnections'accountBalanceRefresh'NonNullable :: FinancialConnections'accountBalanceRefresh'NonNullable
mkFinancialConnections'accountBalanceRefresh'NonNullable =
  FinancialConnections'accountBalanceRefresh'NonNullable
    { financialConnections'accountBalanceRefresh'NonNullableLastAttemptedAt = GHC.Maybe.Nothing,
      financialConnections'accountBalanceRefresh'NonNullableNextRefreshAvailableAt = GHC.Maybe.Nothing,
      financialConnections'accountBalanceRefresh'NonNullableStatus = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.balance_refresh.anyOf.properties.status@ in the specification.
--
-- The status of the last refresh attempt.
data FinancialConnections'accountBalanceRefresh'NonNullableStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountBalanceRefresh'NonNullableStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountBalanceRefresh'NonNullableStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"failed"@
    FinancialConnections'accountBalanceRefresh'NonNullableStatus'EnumFailed
  | -- | Represents the JSON value @"pending"@
    FinancialConnections'accountBalanceRefresh'NonNullableStatus'EnumPending
  | -- | Represents the JSON value @"succeeded"@
    FinancialConnections'accountBalanceRefresh'NonNullableStatus'EnumSucceeded
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountBalanceRefresh'NonNullableStatus' where
  toJSON (FinancialConnections'accountBalanceRefresh'NonNullableStatus'Other val) = val
  toJSON (FinancialConnections'accountBalanceRefresh'NonNullableStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountBalanceRefresh'NonNullableStatus'EnumFailed) = "failed"
  toJSON (FinancialConnections'accountBalanceRefresh'NonNullableStatus'EnumPending) = "pending"
  toJSON (FinancialConnections'accountBalanceRefresh'NonNullableStatus'EnumSucceeded) = "succeeded"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountBalanceRefresh'NonNullableStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "failed" -> FinancialConnections'accountBalanceRefresh'NonNullableStatus'EnumFailed
            | val GHC.Classes.== "pending" -> FinancialConnections'accountBalanceRefresh'NonNullableStatus'EnumPending
            | val GHC.Classes.== "succeeded" -> FinancialConnections'accountBalanceRefresh'NonNullableStatus'EnumSucceeded
            | GHC.Base.otherwise -> FinancialConnections'accountBalanceRefresh'NonNullableStatus'Other val
      )

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.category@ in the specification.
--
-- The type of the account. Account category is further divided in \`subcategory\`.
data FinancialConnections'accountCategory'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountCategory'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountCategory'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"cash"@
    FinancialConnections'accountCategory'EnumCash
  | -- | Represents the JSON value @"credit"@
    FinancialConnections'accountCategory'EnumCredit
  | -- | Represents the JSON value @"investment"@
    FinancialConnections'accountCategory'EnumInvestment
  | -- | Represents the JSON value @"other"@
    FinancialConnections'accountCategory'EnumOther
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountCategory' where
  toJSON (FinancialConnections'accountCategory'Other val) = val
  toJSON (FinancialConnections'accountCategory'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountCategory'EnumCash) = "cash"
  toJSON (FinancialConnections'accountCategory'EnumCredit) = "credit"
  toJSON (FinancialConnections'accountCategory'EnumInvestment) = "investment"
  toJSON (FinancialConnections'accountCategory'EnumOther) = "other"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountCategory' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "cash" -> FinancialConnections'accountCategory'EnumCash
            | val GHC.Classes.== "credit" -> FinancialConnections'accountCategory'EnumCredit
            | val GHC.Classes.== "investment" -> FinancialConnections'accountCategory'EnumInvestment
            | val GHC.Classes.== "other" -> FinancialConnections'accountCategory'EnumOther
            | GHC.Base.otherwise -> FinancialConnections'accountCategory'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.financial_connections.account.properties.ownership.anyOf@ in the specification.
--
-- The most recent information about the account\'s owners.
data FinancialConnections'accountOwnership'NonNullableVariants
  = FinancialConnections'accountOwnership'NonNullableText Data.Text.Internal.Text
  | FinancialConnections'accountOwnership'NonNullableFinancialConnections'accountOwnership FinancialConnections'accountOwnership
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountOwnership'NonNullableVariants where
  toJSON (FinancialConnections'accountOwnership'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (FinancialConnections'accountOwnership'NonNullableFinancialConnections'accountOwnership a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountOwnership'NonNullableVariants where
  parseJSON val = case (FinancialConnections'accountOwnership'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((FinancialConnections'accountOwnership'NonNullableFinancialConnections'accountOwnership Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.financial_connections.account.properties.ownership_refresh.anyOf@ in the specification.
--
-- The state of the most recent attempt to refresh the account owners.
data FinancialConnections'accountOwnershipRefresh'NonNullable = FinancialConnections'accountOwnershipRefresh'NonNullable
  { -- | last_attempted_at: The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
    financialConnections'accountOwnershipRefresh'NonNullableLastAttemptedAt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | status: The status of the last refresh attempt.
    financialConnections'accountOwnershipRefresh'NonNullableStatus :: (GHC.Maybe.Maybe FinancialConnections'accountOwnershipRefresh'NonNullableStatus')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountOwnershipRefresh'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_attempted_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountOwnershipRefresh'NonNullableLastAttemptedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountOwnershipRefresh'NonNullableStatus obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_attempted_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountOwnershipRefresh'NonNullableLastAttemptedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountOwnershipRefresh'NonNullableStatus obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountOwnershipRefresh'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FinancialConnections'accountOwnershipRefresh'NonNullable" (\obj -> (GHC.Base.pure FinancialConnections'accountOwnershipRefresh'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_attempted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status"))

-- | Create a new 'FinancialConnections'accountOwnershipRefresh'NonNullable' with all required fields.
mkFinancialConnections'accountOwnershipRefresh'NonNullable :: FinancialConnections'accountOwnershipRefresh'NonNullable
mkFinancialConnections'accountOwnershipRefresh'NonNullable =
  FinancialConnections'accountOwnershipRefresh'NonNullable
    { financialConnections'accountOwnershipRefresh'NonNullableLastAttemptedAt = GHC.Maybe.Nothing,
      financialConnections'accountOwnershipRefresh'NonNullableStatus = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.ownership_refresh.anyOf.properties.status@ in the specification.
--
-- The status of the last refresh attempt.
data FinancialConnections'accountOwnershipRefresh'NonNullableStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountOwnershipRefresh'NonNullableStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountOwnershipRefresh'NonNullableStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"failed"@
    FinancialConnections'accountOwnershipRefresh'NonNullableStatus'EnumFailed
  | -- | Represents the JSON value @"pending"@
    FinancialConnections'accountOwnershipRefresh'NonNullableStatus'EnumPending
  | -- | Represents the JSON value @"succeeded"@
    FinancialConnections'accountOwnershipRefresh'NonNullableStatus'EnumSucceeded
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountOwnershipRefresh'NonNullableStatus' where
  toJSON (FinancialConnections'accountOwnershipRefresh'NonNullableStatus'Other val) = val
  toJSON (FinancialConnections'accountOwnershipRefresh'NonNullableStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountOwnershipRefresh'NonNullableStatus'EnumFailed) = "failed"
  toJSON (FinancialConnections'accountOwnershipRefresh'NonNullableStatus'EnumPending) = "pending"
  toJSON (FinancialConnections'accountOwnershipRefresh'NonNullableStatus'EnumSucceeded) = "succeeded"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountOwnershipRefresh'NonNullableStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "failed" -> FinancialConnections'accountOwnershipRefresh'NonNullableStatus'EnumFailed
            | val GHC.Classes.== "pending" -> FinancialConnections'accountOwnershipRefresh'NonNullableStatus'EnumPending
            | val GHC.Classes.== "succeeded" -> FinancialConnections'accountOwnershipRefresh'NonNullableStatus'EnumSucceeded
            | GHC.Base.otherwise -> FinancialConnections'accountOwnershipRefresh'NonNullableStatus'Other val
      )

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.permissions.items@ in the specification.
data FinancialConnections'accountPermissions'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountPermissions'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountPermissions'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"balances"@
    FinancialConnections'accountPermissions'NonNullableEnumBalances
  | -- | Represents the JSON value @"ownership"@
    FinancialConnections'accountPermissions'NonNullableEnumOwnership
  | -- | Represents the JSON value @"payment_method"@
    FinancialConnections'accountPermissions'NonNullableEnumPaymentMethod
  | -- | Represents the JSON value @"transactions"@
    FinancialConnections'accountPermissions'NonNullableEnumTransactions
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountPermissions'NonNullable where
  toJSON (FinancialConnections'accountPermissions'NonNullableOther val) = val
  toJSON (FinancialConnections'accountPermissions'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountPermissions'NonNullableEnumBalances) = "balances"
  toJSON (FinancialConnections'accountPermissions'NonNullableEnumOwnership) = "ownership"
  toJSON (FinancialConnections'accountPermissions'NonNullableEnumPaymentMethod) = "payment_method"
  toJSON (FinancialConnections'accountPermissions'NonNullableEnumTransactions) = "transactions"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountPermissions'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "balances" -> FinancialConnections'accountPermissions'NonNullableEnumBalances
            | val GHC.Classes.== "ownership" -> FinancialConnections'accountPermissions'NonNullableEnumOwnership
            | val GHC.Classes.== "payment_method" -> FinancialConnections'accountPermissions'NonNullableEnumPaymentMethod
            | val GHC.Classes.== "transactions" -> FinancialConnections'accountPermissions'NonNullableEnumTransactions
            | GHC.Base.otherwise -> FinancialConnections'accountPermissions'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.status@ in the specification.
--
-- The status of the link to the account.
data FinancialConnections'accountStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    FinancialConnections'accountStatus'EnumActive
  | -- | Represents the JSON value @"disconnected"@
    FinancialConnections'accountStatus'EnumDisconnected
  | -- | Represents the JSON value @"inactive"@
    FinancialConnections'accountStatus'EnumInactive
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountStatus' where
  toJSON (FinancialConnections'accountStatus'Other val) = val
  toJSON (FinancialConnections'accountStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountStatus'EnumActive) = "active"
  toJSON (FinancialConnections'accountStatus'EnumDisconnected) = "disconnected"
  toJSON (FinancialConnections'accountStatus'EnumInactive) = "inactive"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> FinancialConnections'accountStatus'EnumActive
            | val GHC.Classes.== "disconnected" -> FinancialConnections'accountStatus'EnumDisconnected
            | val GHC.Classes.== "inactive" -> FinancialConnections'accountStatus'EnumInactive
            | GHC.Base.otherwise -> FinancialConnections'accountStatus'Other val
      )

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.subcategory@ in the specification.
--
-- If \`category\` is \`cash\`, one of:
--
--  - \`checking\`
--  - \`savings\`
--  - \`other\`
--
-- If \`category\` is \`credit\`, one of:
--
--  - \`mortgage\`
--  - \`line_of_credit\`
--  - \`credit_card\`
--  - \`other\`
--
-- If \`category\` is \`investment\` or \`other\`, this will be \`other\`.
data FinancialConnections'accountSubcategory'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountSubcategory'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountSubcategory'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"checking"@
    FinancialConnections'accountSubcategory'EnumChecking
  | -- | Represents the JSON value @"credit_card"@
    FinancialConnections'accountSubcategory'EnumCreditCard
  | -- | Represents the JSON value @"line_of_credit"@
    FinancialConnections'accountSubcategory'EnumLineOfCredit
  | -- | Represents the JSON value @"mortgage"@
    FinancialConnections'accountSubcategory'EnumMortgage
  | -- | Represents the JSON value @"other"@
    FinancialConnections'accountSubcategory'EnumOther
  | -- | Represents the JSON value @"savings"@
    FinancialConnections'accountSubcategory'EnumSavings
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountSubcategory' where
  toJSON (FinancialConnections'accountSubcategory'Other val) = val
  toJSON (FinancialConnections'accountSubcategory'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountSubcategory'EnumChecking) = "checking"
  toJSON (FinancialConnections'accountSubcategory'EnumCreditCard) = "credit_card"
  toJSON (FinancialConnections'accountSubcategory'EnumLineOfCredit) = "line_of_credit"
  toJSON (FinancialConnections'accountSubcategory'EnumMortgage) = "mortgage"
  toJSON (FinancialConnections'accountSubcategory'EnumOther) = "other"
  toJSON (FinancialConnections'accountSubcategory'EnumSavings) = "savings"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountSubcategory' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "checking" -> FinancialConnections'accountSubcategory'EnumChecking
            | val GHC.Classes.== "credit_card" -> FinancialConnections'accountSubcategory'EnumCreditCard
            | val GHC.Classes.== "line_of_credit" -> FinancialConnections'accountSubcategory'EnumLineOfCredit
            | val GHC.Classes.== "mortgage" -> FinancialConnections'accountSubcategory'EnumMortgage
            | val GHC.Classes.== "other" -> FinancialConnections'accountSubcategory'EnumOther
            | val GHC.Classes.== "savings" -> FinancialConnections'accountSubcategory'EnumSavings
            | GHC.Base.otherwise -> FinancialConnections'accountSubcategory'Other val
      )

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.subscriptions.items@ in the specification.
data FinancialConnections'accountSubscriptions'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountSubscriptions'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountSubscriptions'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"transactions"@
    FinancialConnections'accountSubscriptions'NonNullableEnumTransactions
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountSubscriptions'NonNullable where
  toJSON (FinancialConnections'accountSubscriptions'NonNullableOther val) = val
  toJSON (FinancialConnections'accountSubscriptions'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountSubscriptions'NonNullableEnumTransactions) = "transactions"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountSubscriptions'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "transactions" -> FinancialConnections'accountSubscriptions'NonNullableEnumTransactions
            | GHC.Base.otherwise -> FinancialConnections'accountSubscriptions'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.supported_payment_method_types.items@ in the specification.
data FinancialConnections'accountSupportedPaymentMethodTypes'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountSupportedPaymentMethodTypes'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountSupportedPaymentMethodTypes'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"link"@
    FinancialConnections'accountSupportedPaymentMethodTypes'EnumLink
  | -- | Represents the JSON value @"us_bank_account"@
    FinancialConnections'accountSupportedPaymentMethodTypes'EnumUsBankAccount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountSupportedPaymentMethodTypes' where
  toJSON (FinancialConnections'accountSupportedPaymentMethodTypes'Other val) = val
  toJSON (FinancialConnections'accountSupportedPaymentMethodTypes'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountSupportedPaymentMethodTypes'EnumLink) = "link"
  toJSON (FinancialConnections'accountSupportedPaymentMethodTypes'EnumUsBankAccount) = "us_bank_account"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountSupportedPaymentMethodTypes' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "link" -> FinancialConnections'accountSupportedPaymentMethodTypes'EnumLink
            | val GHC.Classes.== "us_bank_account" -> FinancialConnections'accountSupportedPaymentMethodTypes'EnumUsBankAccount
            | GHC.Base.otherwise -> FinancialConnections'accountSupportedPaymentMethodTypes'Other val
      )

-- | Defines the object schema located at @components.schemas.financial_connections.account.properties.transaction_refresh.anyOf@ in the specification.
--
-- The state of the most recent attempt to refresh the account transactions.
data FinancialConnections'accountTransactionRefresh'NonNullable = FinancialConnections'accountTransactionRefresh'NonNullable
  { -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    financialConnections'accountTransactionRefresh'NonNullableId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last_attempted_at: The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
    financialConnections'accountTransactionRefresh'NonNullableLastAttemptedAt :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | next_refresh_available_at: Time at which the next transaction refresh can be initiated. This value will be \`null\` when \`status\` is \`pending\`. Measured in seconds since the Unix epoch.
    financialConnections'accountTransactionRefresh'NonNullableNextRefreshAvailableAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | status: The status of the last refresh attempt.
    financialConnections'accountTransactionRefresh'NonNullableStatus :: (GHC.Maybe.Maybe FinancialConnections'accountTransactionRefresh'NonNullableStatus')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountTransactionRefresh'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_attempted_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh'NonNullableLastAttemptedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_refresh_available_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh'NonNullableNextRefreshAvailableAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh'NonNullableStatus obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_attempted_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh'NonNullableLastAttemptedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_refresh_available_at" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh'NonNullableNextRefreshAvailableAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (financialConnections'accountTransactionRefresh'NonNullableStatus obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountTransactionRefresh'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FinancialConnections'accountTransactionRefresh'NonNullable" (\obj -> (((GHC.Base.pure FinancialConnections'accountTransactionRefresh'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_attempted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "next_refresh_available_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status"))

-- | Create a new 'FinancialConnections'accountTransactionRefresh'NonNullable' with all required fields.
mkFinancialConnections'accountTransactionRefresh'NonNullable :: FinancialConnections'accountTransactionRefresh'NonNullable
mkFinancialConnections'accountTransactionRefresh'NonNullable =
  FinancialConnections'accountTransactionRefresh'NonNullable
    { financialConnections'accountTransactionRefresh'NonNullableId = GHC.Maybe.Nothing,
      financialConnections'accountTransactionRefresh'NonNullableLastAttemptedAt = GHC.Maybe.Nothing,
      financialConnections'accountTransactionRefresh'NonNullableNextRefreshAvailableAt = GHC.Maybe.Nothing,
      financialConnections'accountTransactionRefresh'NonNullableStatus = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.financial_connections.account.properties.transaction_refresh.anyOf.properties.status@ in the specification.
--
-- The status of the last refresh attempt.
data FinancialConnections'accountTransactionRefresh'NonNullableStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    FinancialConnections'accountTransactionRefresh'NonNullableStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    FinancialConnections'accountTransactionRefresh'NonNullableStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"failed"@
    FinancialConnections'accountTransactionRefresh'NonNullableStatus'EnumFailed
  | -- | Represents the JSON value @"pending"@
    FinancialConnections'accountTransactionRefresh'NonNullableStatus'EnumPending
  | -- | Represents the JSON value @"succeeded"@
    FinancialConnections'accountTransactionRefresh'NonNullableStatus'EnumSucceeded
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FinancialConnections'accountTransactionRefresh'NonNullableStatus' where
  toJSON (FinancialConnections'accountTransactionRefresh'NonNullableStatus'Other val) = val
  toJSON (FinancialConnections'accountTransactionRefresh'NonNullableStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (FinancialConnections'accountTransactionRefresh'NonNullableStatus'EnumFailed) = "failed"
  toJSON (FinancialConnections'accountTransactionRefresh'NonNullableStatus'EnumPending) = "pending"
  toJSON (FinancialConnections'accountTransactionRefresh'NonNullableStatus'EnumSucceeded) = "succeeded"

instance Data.Aeson.Types.FromJSON.FromJSON FinancialConnections'accountTransactionRefresh'NonNullableStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "failed" -> FinancialConnections'accountTransactionRefresh'NonNullableStatus'EnumFailed
            | val GHC.Classes.== "pending" -> FinancialConnections'accountTransactionRefresh'NonNullableStatus'EnumPending
            | val GHC.Classes.== "succeeded" -> FinancialConnections'accountTransactionRefresh'NonNullableStatus'EnumSucceeded
            | GHC.Base.otherwise -> FinancialConnections'accountTransactionRefresh'NonNullableStatus'Other val
      )
