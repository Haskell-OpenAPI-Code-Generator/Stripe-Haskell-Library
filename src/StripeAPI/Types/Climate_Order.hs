{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Climate_Order
module StripeAPI.Types.Climate_Order where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.ClimateRemovalsBeneficiary
import {-# SOURCE #-} StripeAPI.Types.ClimateRemovalsOrderDeliveries
import {-# SOURCE #-} StripeAPI.Types.Climate_Product
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.climate.order@ in the specification.
--
-- Orders represent your intent to purchase a particular Climate product. When you create an order, the
-- payment is deducted from your merchant balance.
data Climate'order = Climate'order
  { -- | amount_fees: Total amount of [Frontier](https:\/\/frontierclimate.com\/)\'s service fees in the currency\'s smallest unit.
    climate'orderAmountFees :: GHC.Types.Int,
    -- | amount_subtotal: Total amount of the carbon removal in the currency\'s smallest unit.
    climate'orderAmountSubtotal :: GHC.Types.Int,
    -- | amount_total: Total amount of the order including fees in the currency\'s smallest unit.
    climate'orderAmountTotal :: GHC.Types.Int,
    -- | beneficiary:
    climate'orderBeneficiary :: (GHC.Maybe.Maybe ClimateRemovalsBeneficiary),
    -- | canceled_at: Time at which the order was canceled. Measured in seconds since the Unix epoch.
    climate'orderCanceledAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | cancellation_reason: Reason for the cancellation of this order.
    climate'orderCancellationReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Climate'orderCancellationReason'NonNullable)),
    -- | certificate: For delivered orders, a URL to a delivery certificate for the order.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climate'orderCertificate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | confirmed_at: Time at which the order was confirmed. Measured in seconds since the Unix epoch.
    climate'orderConfirmedAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    climate'orderCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase, representing the currency for this order.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climate'orderCurrency :: Data.Text.Internal.Text,
    -- | delayed_at: Time at which the order\'s expected_delivery_year was delayed. Measured in seconds since the Unix epoch.
    climate'orderDelayedAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | delivered_at: Time at which the order was delivered. Measured in seconds since the Unix epoch.
    climate'orderDeliveredAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | delivery_details: Details about the delivery of carbon removal for this order.
    climate'orderDeliveryDetails :: ([ClimateRemovalsOrderDeliveries]),
    -- | expected_delivery_year: The year this order is expected to be delivered.
    climate'orderExpectedDeliveryYear :: GHC.Types.Int,
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climate'orderId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    climate'orderLivemode :: GHC.Types.Bool,
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    climate'orderMetadata :: Data.Aeson.Types.Internal.Object,
    -- | metric_tons: Quantity of carbon removal that is included in this order.
    climate'orderMetricTons :: Data.Text.Internal.Text,
    -- | product: Unique ID for the Climate \`Product\` this order is purchasing.
    climate'orderProduct :: Climate'orderProduct'Variants,
    -- | product_substituted_at: Time at which the order\'s product was substituted for a different product. Measured in seconds since the Unix epoch.
    climate'orderProductSubstitutedAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | status: The current status of this order.
    climate'orderStatus :: Climate'orderStatus'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Climate'order where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount_fees" Data.Aeson.Types.ToJSON..= climate'orderAmountFees obj] : ["amount_subtotal" Data.Aeson.Types.ToJSON..= climate'orderAmountSubtotal obj] : ["amount_total" Data.Aeson.Types.ToJSON..= climate'orderAmountTotal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("beneficiary" Data.Aeson.Types.ToJSON..=)) (climate'orderBeneficiary obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (climate'orderCanceledAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancellation_reason" Data.Aeson.Types.ToJSON..=)) (climate'orderCancellationReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (climate'orderCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmed_at" Data.Aeson.Types.ToJSON..=)) (climate'orderConfirmedAt obj) : ["created" Data.Aeson.Types.ToJSON..= climate'orderCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= climate'orderCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delayed_at" Data.Aeson.Types.ToJSON..=)) (climate'orderDelayedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delivered_at" Data.Aeson.Types.ToJSON..=)) (climate'orderDeliveredAt obj) : ["delivery_details" Data.Aeson.Types.ToJSON..= climate'orderDeliveryDetails obj] : ["expected_delivery_year" Data.Aeson.Types.ToJSON..= climate'orderExpectedDeliveryYear obj] : ["id" Data.Aeson.Types.ToJSON..= climate'orderId obj] : ["livemode" Data.Aeson.Types.ToJSON..= climate'orderLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= climate'orderMetadata obj] : ["metric_tons" Data.Aeson.Types.ToJSON..= climate'orderMetricTons obj] : ["product" Data.Aeson.Types.ToJSON..= climate'orderProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_substituted_at" Data.Aeson.Types.ToJSON..=)) (climate'orderProductSubstitutedAt obj) : ["status" Data.Aeson.Types.ToJSON..= climate'orderStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "climate.order"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount_fees" Data.Aeson.Types.ToJSON..= climate'orderAmountFees obj] : ["amount_subtotal" Data.Aeson.Types.ToJSON..= climate'orderAmountSubtotal obj] : ["amount_total" Data.Aeson.Types.ToJSON..= climate'orderAmountTotal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("beneficiary" Data.Aeson.Types.ToJSON..=)) (climate'orderBeneficiary obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (climate'orderCanceledAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancellation_reason" Data.Aeson.Types.ToJSON..=)) (climate'orderCancellationReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("certificate" Data.Aeson.Types.ToJSON..=)) (climate'orderCertificate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("confirmed_at" Data.Aeson.Types.ToJSON..=)) (climate'orderConfirmedAt obj) : ["created" Data.Aeson.Types.ToJSON..= climate'orderCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= climate'orderCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delayed_at" Data.Aeson.Types.ToJSON..=)) (climate'orderDelayedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("delivered_at" Data.Aeson.Types.ToJSON..=)) (climate'orderDeliveredAt obj) : ["delivery_details" Data.Aeson.Types.ToJSON..= climate'orderDeliveryDetails obj] : ["expected_delivery_year" Data.Aeson.Types.ToJSON..= climate'orderExpectedDeliveryYear obj] : ["id" Data.Aeson.Types.ToJSON..= climate'orderId obj] : ["livemode" Data.Aeson.Types.ToJSON..= climate'orderLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= climate'orderMetadata obj] : ["metric_tons" Data.Aeson.Types.ToJSON..= climate'orderMetricTons obj] : ["product" Data.Aeson.Types.ToJSON..= climate'orderProduct obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product_substituted_at" Data.Aeson.Types.ToJSON..=)) (climate'orderProductSubstitutedAt obj) : ["status" Data.Aeson.Types.ToJSON..= climate'orderStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "climate.order"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Climate'order where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Climate'order" (\obj -> ((((((((((((((((((((GHC.Base.pure Climate'order GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_fees")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "beneficiary")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "canceled_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cancellation_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "certificate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "confirmed_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delayed_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "delivered_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delivery_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expected_delivery_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metric_tons")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "product_substituted_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Create a new 'Climate'order' with all required fields.
mkClimate'order ::
  -- | 'climate'orderAmountFees'
  GHC.Types.Int ->
  -- | 'climate'orderAmountSubtotal'
  GHC.Types.Int ->
  -- | 'climate'orderAmountTotal'
  GHC.Types.Int ->
  -- | 'climate'orderCreated'
  GHC.Types.Int ->
  -- | 'climate'orderCurrency'
  Data.Text.Internal.Text ->
  -- | 'climate'orderDeliveryDetails'
  [ClimateRemovalsOrderDeliveries] ->
  -- | 'climate'orderExpectedDeliveryYear'
  GHC.Types.Int ->
  -- | 'climate'orderId'
  Data.Text.Internal.Text ->
  -- | 'climate'orderLivemode'
  GHC.Types.Bool ->
  -- | 'climate'orderMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'climate'orderMetricTons'
  Data.Text.Internal.Text ->
  -- | 'climate'orderProduct'
  Climate'orderProduct'Variants ->
  -- | 'climate'orderStatus'
  Climate'orderStatus' ->
  Climate'order
mkClimate'order climate'orderAmountFees climate'orderAmountSubtotal climate'orderAmountTotal climate'orderCreated climate'orderCurrency climate'orderDeliveryDetails climate'orderExpectedDeliveryYear climate'orderId climate'orderLivemode climate'orderMetadata climate'orderMetricTons climate'orderProduct climate'orderStatus =
  Climate'order
    { climate'orderAmountFees = climate'orderAmountFees,
      climate'orderAmountSubtotal = climate'orderAmountSubtotal,
      climate'orderAmountTotal = climate'orderAmountTotal,
      climate'orderBeneficiary = GHC.Maybe.Nothing,
      climate'orderCanceledAt = GHC.Maybe.Nothing,
      climate'orderCancellationReason = GHC.Maybe.Nothing,
      climate'orderCertificate = GHC.Maybe.Nothing,
      climate'orderConfirmedAt = GHC.Maybe.Nothing,
      climate'orderCreated = climate'orderCreated,
      climate'orderCurrency = climate'orderCurrency,
      climate'orderDelayedAt = GHC.Maybe.Nothing,
      climate'orderDeliveredAt = GHC.Maybe.Nothing,
      climate'orderDeliveryDetails = climate'orderDeliveryDetails,
      climate'orderExpectedDeliveryYear = climate'orderExpectedDeliveryYear,
      climate'orderId = climate'orderId,
      climate'orderLivemode = climate'orderLivemode,
      climate'orderMetadata = climate'orderMetadata,
      climate'orderMetricTons = climate'orderMetricTons,
      climate'orderProduct = climate'orderProduct,
      climate'orderProductSubstitutedAt = GHC.Maybe.Nothing,
      climate'orderStatus = climate'orderStatus
    }

-- | Defines the enum schema located at @components.schemas.climate.order.properties.cancellation_reason@ in the specification.
--
-- Reason for the cancellation of this order.
data Climate'orderCancellationReason'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Climate'orderCancellationReason'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Climate'orderCancellationReason'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"expired"@
    Climate'orderCancellationReason'NonNullableEnumExpired
  | -- | Represents the JSON value @"product_unavailable"@
    Climate'orderCancellationReason'NonNullableEnumProductUnavailable
  | -- | Represents the JSON value @"requested"@
    Climate'orderCancellationReason'NonNullableEnumRequested
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Climate'orderCancellationReason'NonNullable where
  toJSON (Climate'orderCancellationReason'NonNullableOther val) = val
  toJSON (Climate'orderCancellationReason'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Climate'orderCancellationReason'NonNullableEnumExpired) = "expired"
  toJSON (Climate'orderCancellationReason'NonNullableEnumProductUnavailable) = "product_unavailable"
  toJSON (Climate'orderCancellationReason'NonNullableEnumRequested) = "requested"

instance Data.Aeson.Types.FromJSON.FromJSON Climate'orderCancellationReason'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "expired" -> Climate'orderCancellationReason'NonNullableEnumExpired
            | val GHC.Classes.== "product_unavailable" -> Climate'orderCancellationReason'NonNullableEnumProductUnavailable
            | val GHC.Classes.== "requested" -> Climate'orderCancellationReason'NonNullableEnumRequested
            | GHC.Base.otherwise -> Climate'orderCancellationReason'NonNullableOther val
      )

-- | Defines the oneOf schema located at @components.schemas.climate.order.properties.product.anyOf@ in the specification.
--
-- Unique ID for the Climate \`Product\` this order is purchasing.
data Climate'orderProduct'Variants
  = Climate'orderProduct'Text Data.Text.Internal.Text
  | Climate'orderProduct'Climate'product Climate'product
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Climate'orderProduct'Variants where
  toJSON (Climate'orderProduct'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Climate'orderProduct'Climate'product a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Climate'orderProduct'Variants where
  parseJSON val = case (Climate'orderProduct'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Climate'orderProduct'Climate'product Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.climate.order.properties.status@ in the specification.
--
-- The current status of this order.
data Climate'orderStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Climate'orderStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Climate'orderStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"awaiting_funds"@
    Climate'orderStatus'EnumAwaitingFunds
  | -- | Represents the JSON value @"canceled"@
    Climate'orderStatus'EnumCanceled
  | -- | Represents the JSON value @"confirmed"@
    Climate'orderStatus'EnumConfirmed
  | -- | Represents the JSON value @"delivered"@
    Climate'orderStatus'EnumDelivered
  | -- | Represents the JSON value @"open"@
    Climate'orderStatus'EnumOpen
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Climate'orderStatus' where
  toJSON (Climate'orderStatus'Other val) = val
  toJSON (Climate'orderStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Climate'orderStatus'EnumAwaitingFunds) = "awaiting_funds"
  toJSON (Climate'orderStatus'EnumCanceled) = "canceled"
  toJSON (Climate'orderStatus'EnumConfirmed) = "confirmed"
  toJSON (Climate'orderStatus'EnumDelivered) = "delivered"
  toJSON (Climate'orderStatus'EnumOpen) = "open"

instance Data.Aeson.Types.FromJSON.FromJSON Climate'orderStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "awaiting_funds" -> Climate'orderStatus'EnumAwaitingFunds
            | val GHC.Classes.== "canceled" -> Climate'orderStatus'EnumCanceled
            | val GHC.Classes.== "confirmed" -> Climate'orderStatus'EnumConfirmed
            | val GHC.Classes.== "delivered" -> Climate'orderStatus'EnumDelivered
            | val GHC.Classes.== "open" -> Climate'orderStatus'EnumOpen
            | GHC.Base.otherwise -> Climate'orderStatus'Other val
      )
