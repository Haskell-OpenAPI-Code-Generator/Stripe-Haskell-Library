{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema PaymentMethodDetails
module StripeAPI.Types.PaymentMethodDetails where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsAchCreditTransfer
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsAchDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsBancontact
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCard
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardPresent
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsEps
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsFpx
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsGiropay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsIdeal
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsMultibanco
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsP24
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsSepaDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsSofort
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_details@ in the specification.
data PaymentMethodDetails
  = PaymentMethodDetails
      { -- | ach_credit_transfer:
        paymentMethodDetailsAchCreditTransfer :: (GHC.Maybe.Maybe PaymentMethodDetailsAchCreditTransfer),
        -- | ach_debit:
        paymentMethodDetailsAchDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsAchDebit),
        -- | alipay:
        paymentMethodDetailsAlipay :: (GHC.Maybe.Maybe PaymentMethodDetailsAlipay),
        -- | bancontact:
        paymentMethodDetailsBancontact :: (GHC.Maybe.Maybe PaymentMethodDetailsBancontact),
        -- | card:
        paymentMethodDetailsCard :: (GHC.Maybe.Maybe PaymentMethodDetailsCard),
        -- | card_present:
        paymentMethodDetailsCardPresent :: (GHC.Maybe.Maybe PaymentMethodDetailsCardPresent),
        -- | eps:
        paymentMethodDetailsEps :: (GHC.Maybe.Maybe PaymentMethodDetailsEps),
        -- | fpx:
        paymentMethodDetailsFpx :: (GHC.Maybe.Maybe PaymentMethodDetailsFpx),
        -- | giropay:
        paymentMethodDetailsGiropay :: (GHC.Maybe.Maybe PaymentMethodDetailsGiropay),
        -- | ideal:
        paymentMethodDetailsIdeal :: (GHC.Maybe.Maybe PaymentMethodDetailsIdeal),
        -- | klarna:
        paymentMethodDetailsKlarna :: (GHC.Maybe.Maybe PaymentMethodDetailsKlarna),
        -- | multibanco:
        paymentMethodDetailsMultibanco :: (GHC.Maybe.Maybe PaymentMethodDetailsMultibanco),
        -- | p24:
        paymentMethodDetailsP24 :: (GHC.Maybe.Maybe PaymentMethodDetailsP24),
        -- | sepa_debit:
        paymentMethodDetailsSepaDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsSepaDebit),
        -- | sofort:
        paymentMethodDetailsSofort :: (GHC.Maybe.Maybe PaymentMethodDetailsSofort),
        -- | stripe_account:
        paymentMethodDetailsStripeAccount :: (GHC.Maybe.Maybe PaymentMethodDetailsStripeAccount),
        -- | type: The type of transaction-specific details of the payment method used in the payment, one of \`ach_credit_transfer\`, \`ach_debit\`, \`alipay\`, \`bancontact\`, \`card\`, \`card_present\`, \`eps\`, \`giropay\`, \`ideal\`, \`klarna\`, \`multibanco\`, \`p24\`, \`sepa_debit\`, \`sofort\`, \`stripe_account\`, or \`wechat\`.
        -- An additional hash is included on \`payment_method_details\` with a name matching this value.
        -- It contains information specific to the payment method.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsType :: Data.Text.Internal.Text,
        -- | wechat:
        paymentMethodDetailsWechat :: (GHC.Maybe.Maybe PaymentMethodDetailsWechat)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetails where
  toJSON obj = Data.Aeson.Types.Internal.object ("ach_credit_transfer" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAchCreditTransfer obj : "ach_debit" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAchDebit obj : "alipay" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAlipay obj : "bancontact" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontact obj : "card" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCard obj : "card_present" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresent obj : "eps" Data.Aeson.Types.ToJSON..= paymentMethodDetailsEps obj : "fpx" Data.Aeson.Types.ToJSON..= paymentMethodDetailsFpx obj : "giropay" Data.Aeson.Types.ToJSON..= paymentMethodDetailsGiropay obj : "ideal" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdeal obj : "klarna" Data.Aeson.Types.ToJSON..= paymentMethodDetailsKlarna obj : "multibanco" Data.Aeson.Types.ToJSON..= paymentMethodDetailsMultibanco obj : "p24" Data.Aeson.Types.ToJSON..= paymentMethodDetailsP24 obj : "sepa_debit" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebit obj : "sofort" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSofort obj : "stripe_account" Data.Aeson.Types.ToJSON..= paymentMethodDetailsStripeAccount obj : "type" Data.Aeson.Types.ToJSON..= paymentMethodDetailsType obj : "wechat" Data.Aeson.Types.ToJSON..= paymentMethodDetailsWechat obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ach_credit_transfer" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAchCreditTransfer obj) GHC.Base.<> (("ach_debit" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAchDebit obj) GHC.Base.<> (("alipay" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAlipay obj) GHC.Base.<> (("bancontact" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontact obj) GHC.Base.<> (("card" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCard obj) GHC.Base.<> (("card_present" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresent obj) GHC.Base.<> (("eps" Data.Aeson.Types.ToJSON..= paymentMethodDetailsEps obj) GHC.Base.<> (("fpx" Data.Aeson.Types.ToJSON..= paymentMethodDetailsFpx obj) GHC.Base.<> (("giropay" Data.Aeson.Types.ToJSON..= paymentMethodDetailsGiropay obj) GHC.Base.<> (("ideal" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdeal obj) GHC.Base.<> (("klarna" Data.Aeson.Types.ToJSON..= paymentMethodDetailsKlarna obj) GHC.Base.<> (("multibanco" Data.Aeson.Types.ToJSON..= paymentMethodDetailsMultibanco obj) GHC.Base.<> (("p24" Data.Aeson.Types.ToJSON..= paymentMethodDetailsP24 obj) GHC.Base.<> (("sepa_debit" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebit obj) GHC.Base.<> (("sofort" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSofort obj) GHC.Base.<> (("stripe_account" Data.Aeson.Types.ToJSON..= paymentMethodDetailsStripeAccount obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= paymentMethodDetailsType obj) GHC.Base.<> ("wechat" Data.Aeson.Types.ToJSON..= paymentMethodDetailsWechat obj))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetails where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetails" (\obj -> (((((((((((((((((GHC.Base.pure PaymentMethodDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fpx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "stripe_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))

-- | Create a new 'PaymentMethodDetails' with all required fields.
mkPaymentMethodDetails ::
  -- | 'paymentMethodDetailsType'
  Data.Text.Internal.Text ->
  PaymentMethodDetails
mkPaymentMethodDetails paymentMethodDetailsType =
  PaymentMethodDetails
    { paymentMethodDetailsAchCreditTransfer = GHC.Maybe.Nothing,
      paymentMethodDetailsAchDebit = GHC.Maybe.Nothing,
      paymentMethodDetailsAlipay = GHC.Maybe.Nothing,
      paymentMethodDetailsBancontact = GHC.Maybe.Nothing,
      paymentMethodDetailsCard = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresent = GHC.Maybe.Nothing,
      paymentMethodDetailsEps = GHC.Maybe.Nothing,
      paymentMethodDetailsFpx = GHC.Maybe.Nothing,
      paymentMethodDetailsGiropay = GHC.Maybe.Nothing,
      paymentMethodDetailsIdeal = GHC.Maybe.Nothing,
      paymentMethodDetailsKlarna = GHC.Maybe.Nothing,
      paymentMethodDetailsMultibanco = GHC.Maybe.Nothing,
      paymentMethodDetailsP24 = GHC.Maybe.Nothing,
      paymentMethodDetailsSepaDebit = GHC.Maybe.Nothing,
      paymentMethodDetailsSofort = GHC.Maybe.Nothing,
      paymentMethodDetailsStripeAccount = GHC.Maybe.Nothing,
      paymentMethodDetailsType = paymentMethodDetailsType,
      paymentMethodDetailsWechat = GHC.Maybe.Nothing
    }
