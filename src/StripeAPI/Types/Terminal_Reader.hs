{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Terminal_Reader
module StripeAPI.Types.Terminal_Reader where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.terminal.reader@ in the specification.
--
-- A Reader represents a physical device for accepting payment details.
--
-- Related guide: [Connecting to a Reader](https:\/\/stripe.com\/docs\/terminal\/readers\/connecting).
data Terminal'reader
  = Terminal'reader
      { -- | device_sw_version: The current software version of the reader.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        terminal'readerDeviceSwVersion :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | device_type: Type of reader, one of \`bbpos_chipper2x\` or \`verifone_P400\`.
        terminal'readerDeviceType :: Terminal'readerDeviceType',
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        terminal'readerId :: Data.Text.Internal.Text,
        -- | ip_address: The local IP address of the reader.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        terminal'readerIpAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | label: Custom label given to the reader for easier identification.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        terminal'readerLabel :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        terminal'readerLivemode :: GHC.Types.Bool,
        -- | location: The location identifier of the reader.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        terminal'readerLocation :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        terminal'readerMetadata :: Data.Aeson.Types.Internal.Object,
        -- | serial_number: Serial number of the reader.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        terminal'readerSerialNumber :: Data.Text.Internal.Text,
        -- | status: The networking status of the reader.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        terminal'readerStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Terminal'reader where
  toJSON obj = Data.Aeson.Types.Internal.object ("device_sw_version" Data.Aeson.Types.ToJSON..= terminal'readerDeviceSwVersion obj : "device_type" Data.Aeson.Types.ToJSON..= terminal'readerDeviceType obj : "id" Data.Aeson.Types.ToJSON..= terminal'readerId obj : "ip_address" Data.Aeson.Types.ToJSON..= terminal'readerIpAddress obj : "label" Data.Aeson.Types.ToJSON..= terminal'readerLabel obj : "livemode" Data.Aeson.Types.ToJSON..= terminal'readerLivemode obj : "location" Data.Aeson.Types.ToJSON..= terminal'readerLocation obj : "metadata" Data.Aeson.Types.ToJSON..= terminal'readerMetadata obj : "serial_number" Data.Aeson.Types.ToJSON..= terminal'readerSerialNumber obj : "status" Data.Aeson.Types.ToJSON..= terminal'readerStatus obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "terminal.reader" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("device_sw_version" Data.Aeson.Types.ToJSON..= terminal'readerDeviceSwVersion obj) GHC.Base.<> (("device_type" Data.Aeson.Types.ToJSON..= terminal'readerDeviceType obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= terminal'readerId obj) GHC.Base.<> (("ip_address" Data.Aeson.Types.ToJSON..= terminal'readerIpAddress obj) GHC.Base.<> (("label" Data.Aeson.Types.ToJSON..= terminal'readerLabel obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= terminal'readerLivemode obj) GHC.Base.<> (("location" Data.Aeson.Types.ToJSON..= terminal'readerLocation obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= terminal'readerMetadata obj) GHC.Base.<> (("serial_number" Data.Aeson.Types.ToJSON..= terminal'readerSerialNumber obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= terminal'readerStatus obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "terminal.reader")))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Terminal'reader where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Terminal'reader" (\obj -> (((((((((GHC.Base.pure Terminal'reader GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "device_sw_version")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "device_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "serial_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status"))

-- | Create a new 'Terminal'reader' with all required fields.
mkTerminal'reader ::
  -- | 'terminal'readerDeviceType'
  Terminal'readerDeviceType' ->
  -- | 'terminal'readerId'
  Data.Text.Internal.Text ->
  -- | 'terminal'readerLabel'
  Data.Text.Internal.Text ->
  -- | 'terminal'readerLivemode'
  GHC.Types.Bool ->
  -- | 'terminal'readerMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'terminal'readerSerialNumber'
  Data.Text.Internal.Text ->
  Terminal'reader
mkTerminal'reader terminal'readerDeviceType terminal'readerId terminal'readerLabel terminal'readerLivemode terminal'readerMetadata terminal'readerSerialNumber =
  Terminal'reader
    { terminal'readerDeviceSwVersion = GHC.Maybe.Nothing,
      terminal'readerDeviceType = terminal'readerDeviceType,
      terminal'readerId = terminal'readerId,
      terminal'readerIpAddress = GHC.Maybe.Nothing,
      terminal'readerLabel = terminal'readerLabel,
      terminal'readerLivemode = terminal'readerLivemode,
      terminal'readerLocation = GHC.Maybe.Nothing,
      terminal'readerMetadata = terminal'readerMetadata,
      terminal'readerSerialNumber = terminal'readerSerialNumber,
      terminal'readerStatus = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.terminal.reader.properties.device_type@ in the specification.
--
-- Type of reader, one of \`bbpos_chipper2x\` or \`verifone_P400\`.
data Terminal'readerDeviceType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Terminal'readerDeviceType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Terminal'readerDeviceType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bbpos_chipper2x"@
    Terminal'readerDeviceType'EnumBbposChipper2x
  | -- | Represents the JSON value @"verifone_P400"@
    Terminal'readerDeviceType'EnumVerifoneP400
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Terminal'readerDeviceType' where
  toJSON (Terminal'readerDeviceType'Other val) = val
  toJSON (Terminal'readerDeviceType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Terminal'readerDeviceType'EnumBbposChipper2x) = "bbpos_chipper2x"
  toJSON (Terminal'readerDeviceType'EnumVerifoneP400) = "verifone_P400"

instance Data.Aeson.Types.FromJSON.FromJSON Terminal'readerDeviceType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "bbpos_chipper2x" -> Terminal'readerDeviceType'EnumBbposChipper2x
            | val GHC.Classes.== "verifone_P400" -> Terminal'readerDeviceType'EnumVerifoneP400
            | GHC.Base.otherwise -> Terminal'readerDeviceType'Other val
      )
