{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema QuotesResourceSubscriptionData
module StripeAPI.Types.QuotesResourceSubscriptionData where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.quotes_resource_subscription_data@ in the specification.
data QuotesResourceSubscriptionData = QuotesResourceSubscriptionData
  { -- | effective_date: When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
    quotesResourceSubscriptionDataEffectiveDate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | trial_period_days: Integer representing the number of trial period days before the customer is charged for the first time.
    quotesResourceSubscriptionDataTrialPeriodDays :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON QuotesResourceSubscriptionData where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("effective_date" Data.Aeson.Types.ToJSON..=)) (quotesResourceSubscriptionDataEffectiveDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_period_days" Data.Aeson.Types.ToJSON..=)) (quotesResourceSubscriptionDataTrialPeriodDays obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("effective_date" Data.Aeson.Types.ToJSON..=)) (quotesResourceSubscriptionDataEffectiveDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("trial_period_days" Data.Aeson.Types.ToJSON..=)) (quotesResourceSubscriptionDataTrialPeriodDays obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON QuotesResourceSubscriptionData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "QuotesResourceSubscriptionData" (\obj -> (GHC.Base.pure QuotesResourceSubscriptionData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "effective_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "trial_period_days"))

-- | Create a new 'QuotesResourceSubscriptionData' with all required fields.
mkQuotesResourceSubscriptionData :: QuotesResourceSubscriptionData
mkQuotesResourceSubscriptionData =
  QuotesResourceSubscriptionData
    { quotesResourceSubscriptionDataEffectiveDate = GHC.Maybe.Nothing,
      quotesResourceSubscriptionDataTrialPeriodDays = GHC.Maybe.Nothing
    }
