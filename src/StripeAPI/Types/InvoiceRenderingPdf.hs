{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema InvoiceRenderingPdf
module StripeAPI.Types.InvoiceRenderingPdf where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.invoice_rendering_pdf@ in the specification.
data InvoiceRenderingPdf = InvoiceRenderingPdf
  { -- | page_size: Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale.
    invoiceRenderingPdfPageSize :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable InvoiceRenderingPdfPageSize'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceRenderingPdf where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("page_size" Data.Aeson.Types.ToJSON..=)) (invoiceRenderingPdfPageSize obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("page_size" Data.Aeson.Types.ToJSON..=)) (invoiceRenderingPdfPageSize obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceRenderingPdf where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceRenderingPdf" (\obj -> GHC.Base.pure InvoiceRenderingPdf GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "page_size"))

-- | Create a new 'InvoiceRenderingPdf' with all required fields.
mkInvoiceRenderingPdf :: InvoiceRenderingPdf
mkInvoiceRenderingPdf = InvoiceRenderingPdf {invoiceRenderingPdfPageSize = GHC.Maybe.Nothing}

-- | Defines the enum schema located at @components.schemas.invoice_rendering_pdf.properties.page_size@ in the specification.
--
-- Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale.
data InvoiceRenderingPdfPageSize'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    InvoiceRenderingPdfPageSize'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    InvoiceRenderingPdfPageSize'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"a4"@
    InvoiceRenderingPdfPageSize'NonNullableEnumA4
  | -- | Represents the JSON value @"auto"@
    InvoiceRenderingPdfPageSize'NonNullableEnumAuto
  | -- | Represents the JSON value @"letter"@
    InvoiceRenderingPdfPageSize'NonNullableEnumLetter
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceRenderingPdfPageSize'NonNullable where
  toJSON (InvoiceRenderingPdfPageSize'NonNullableOther val) = val
  toJSON (InvoiceRenderingPdfPageSize'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (InvoiceRenderingPdfPageSize'NonNullableEnumA4) = "a4"
  toJSON (InvoiceRenderingPdfPageSize'NonNullableEnumAuto) = "auto"
  toJSON (InvoiceRenderingPdfPageSize'NonNullableEnumLetter) = "letter"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceRenderingPdfPageSize'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "a4" -> InvoiceRenderingPdfPageSize'NonNullableEnumA4
            | val GHC.Classes.== "auto" -> InvoiceRenderingPdfPageSize'NonNullableEnumAuto
            | val GHC.Classes.== "letter" -> InvoiceRenderingPdfPageSize'NonNullableEnumLetter
            | GHC.Base.otherwise -> InvoiceRenderingPdfPageSize'NonNullableOther val
      )
