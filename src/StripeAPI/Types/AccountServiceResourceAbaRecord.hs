{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountServiceResourceAbaRecord
module StripeAPI.Types.AccountServiceResourceAbaRecord where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account_service_resource_aba_record@ in the specification.
--
-- ABA Records contain U.S. bank account details per the ABA format.
data AccountServiceResourceAbaRecord = AccountServiceResourceAbaRecord
  { -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountServiceResourceAbaRecordAccountHolderName :: Data.Text.Internal.Text,
    -- | account_number: The account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountServiceResourceAbaRecordAccountNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_number_last4: The last four characters of the account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountServiceResourceAbaRecordAccountNumberLast4 :: Data.Text.Internal.Text,
    -- | bank_name: Name of the bank.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountServiceResourceAbaRecordBankName :: Data.Text.Internal.Text,
    -- | routing_number: Routing number for the account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountServiceResourceAbaRecordRoutingNumber :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountServiceResourceAbaRecord where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_holder_name" Data.Aeson.Types.ToJSON..= accountServiceResourceAbaRecordAccountHolderName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_number" Data.Aeson.Types.ToJSON..=)) (accountServiceResourceAbaRecordAccountNumber obj) : ["account_number_last4" Data.Aeson.Types.ToJSON..= accountServiceResourceAbaRecordAccountNumberLast4 obj] : ["bank_name" Data.Aeson.Types.ToJSON..= accountServiceResourceAbaRecordBankName obj] : ["routing_number" Data.Aeson.Types.ToJSON..= accountServiceResourceAbaRecordRoutingNumber obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_holder_name" Data.Aeson.Types.ToJSON..= accountServiceResourceAbaRecordAccountHolderName obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_number" Data.Aeson.Types.ToJSON..=)) (accountServiceResourceAbaRecordAccountNumber obj) : ["account_number_last4" Data.Aeson.Types.ToJSON..= accountServiceResourceAbaRecordAccountNumberLast4 obj] : ["bank_name" Data.Aeson.Types.ToJSON..= accountServiceResourceAbaRecordBankName obj] : ["routing_number" Data.Aeson.Types.ToJSON..= accountServiceResourceAbaRecordRoutingNumber obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountServiceResourceAbaRecord where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountServiceResourceAbaRecord" (\obj -> ((((GHC.Base.pure AccountServiceResourceAbaRecord GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_number_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "routing_number"))

-- | Create a new 'AccountServiceResourceAbaRecord' with all required fields.
mkAccountServiceResourceAbaRecord ::
  -- | 'accountServiceResourceAbaRecordAccountHolderName'
  Data.Text.Internal.Text ->
  -- | 'accountServiceResourceAbaRecordAccountNumberLast4'
  Data.Text.Internal.Text ->
  -- | 'accountServiceResourceAbaRecordBankName'
  Data.Text.Internal.Text ->
  -- | 'accountServiceResourceAbaRecordRoutingNumber'
  Data.Text.Internal.Text ->
  AccountServiceResourceAbaRecord
mkAccountServiceResourceAbaRecord accountServiceResourceAbaRecordAccountHolderName accountServiceResourceAbaRecordAccountNumberLast4 accountServiceResourceAbaRecordBankName accountServiceResourceAbaRecordRoutingNumber =
  AccountServiceResourceAbaRecord
    { accountServiceResourceAbaRecordAccountHolderName = accountServiceResourceAbaRecordAccountHolderName,
      accountServiceResourceAbaRecordAccountNumber = GHC.Maybe.Nothing,
      accountServiceResourceAbaRecordAccountNumberLast4 = accountServiceResourceAbaRecordAccountNumberLast4,
      accountServiceResourceAbaRecordBankName = accountServiceResourceAbaRecordBankName,
      accountServiceResourceAbaRecordRoutingNumber = accountServiceResourceAbaRecordRoutingNumber
    }
