{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema FundingInstructionsBankTransferIbanRecord
module StripeAPI.Types.FundingInstructionsBankTransferIbanRecord where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.funding_instructions_bank_transfer_iban_record@ in the specification.
--
-- Iban Records contain E.U. bank account details per the SEPA format.
data FundingInstructionsBankTransferIbanRecord = FundingInstructionsBankTransferIbanRecord
  { -- | account_holder_name: The name of the person or business that owns the bank account
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferIbanRecordAccountHolderName :: Data.Text.Internal.Text,
    -- | bic: The BIC\/SWIFT code of the account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferIbanRecordBic :: Data.Text.Internal.Text,
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferIbanRecordCountry :: Data.Text.Internal.Text,
    -- | iban: The IBAN of the account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferIbanRecordIban :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FundingInstructionsBankTransferIbanRecord where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_holder_name" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferIbanRecordAccountHolderName obj] : ["bic" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferIbanRecordBic obj] : ["country" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferIbanRecordCountry obj] : ["iban" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferIbanRecordIban obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_holder_name" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferIbanRecordAccountHolderName obj] : ["bic" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferIbanRecordBic obj] : ["country" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferIbanRecordCountry obj] : ["iban" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferIbanRecordIban obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FundingInstructionsBankTransferIbanRecord where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FundingInstructionsBankTransferIbanRecord" (\obj -> (((GHC.Base.pure FundingInstructionsBankTransferIbanRecord GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "iban"))

-- | Create a new 'FundingInstructionsBankTransferIbanRecord' with all required fields.
mkFundingInstructionsBankTransferIbanRecord ::
  -- | 'fundingInstructionsBankTransferIbanRecordAccountHolderName'
  Data.Text.Internal.Text ->
  -- | 'fundingInstructionsBankTransferIbanRecordBic'
  Data.Text.Internal.Text ->
  -- | 'fundingInstructionsBankTransferIbanRecordCountry'
  Data.Text.Internal.Text ->
  -- | 'fundingInstructionsBankTransferIbanRecordIban'
  Data.Text.Internal.Text ->
  FundingInstructionsBankTransferIbanRecord
mkFundingInstructionsBankTransferIbanRecord fundingInstructionsBankTransferIbanRecordAccountHolderName fundingInstructionsBankTransferIbanRecordBic fundingInstructionsBankTransferIbanRecordCountry fundingInstructionsBankTransferIbanRecordIban =
  FundingInstructionsBankTransferIbanRecord
    { fundingInstructionsBankTransferIbanRecordAccountHolderName = fundingInstructionsBankTransferIbanRecordAccountHolderName,
      fundingInstructionsBankTransferIbanRecordBic = fundingInstructionsBankTransferIbanRecordBic,
      fundingInstructionsBankTransferIbanRecordCountry = fundingInstructionsBankTransferIbanRecordCountry,
      fundingInstructionsBankTransferIbanRecordIban = fundingInstructionsBankTransferIbanRecordIban
    }
