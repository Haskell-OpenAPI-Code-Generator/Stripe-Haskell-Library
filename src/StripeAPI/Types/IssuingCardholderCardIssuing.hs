{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingCardholderCardIssuing
module StripeAPI.Types.IssuingCardholderCardIssuing where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingCardholderUserTermsAcceptance
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_cardholder_card_issuing@ in the specification.
data IssuingCardholderCardIssuing = IssuingCardholderCardIssuing
  { -- | user_terms_acceptance: Information about cardholder acceptance of [Authorized User Terms](https:\/\/stripe.com\/docs\/issuing\/cards).
    issuingCardholderCardIssuingUserTermsAcceptance :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardholderCardIssuing where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_terms_acceptance" Data.Aeson.Types.ToJSON..=)) (issuingCardholderCardIssuingUserTermsAcceptance obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_terms_acceptance" Data.Aeson.Types.ToJSON..=)) (issuingCardholderCardIssuingUserTermsAcceptance obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderCardIssuing where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderCardIssuing" (\obj -> GHC.Base.pure IssuingCardholderCardIssuing GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_terms_acceptance"))

-- | Create a new 'IssuingCardholderCardIssuing' with all required fields.
mkIssuingCardholderCardIssuing :: IssuingCardholderCardIssuing
mkIssuingCardholderCardIssuing = IssuingCardholderCardIssuing {issuingCardholderCardIssuingUserTermsAcceptance = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.issuing_cardholder_card_issuing.properties.user_terms_acceptance.anyOf@ in the specification.
--
-- Information about cardholder acceptance of [Authorized User Terms](https:\\\/\\\/stripe.com\\\/docs\\\/issuing\\\/cards).
data IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable = IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable
  { -- | date: The Unix timestamp marking when the cardholder accepted the Authorized User Terms. Required for Celtic Spend Card users.
    issuingCardholderCardIssuingUserTermsAcceptance'NonNullableDate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | ip: The IP address from which the cardholder accepted the Authorized User Terms. Required for Celtic Spend Card users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardholderCardIssuingUserTermsAcceptance'NonNullableIp :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | user_agent: The user agent of the browser from which the cardholder accepted the Authorized User Terms.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardholderCardIssuingUserTermsAcceptance'NonNullableUserAgent :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("date" Data.Aeson.Types.ToJSON..=)) (issuingCardholderCardIssuingUserTermsAcceptance'NonNullableDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip" Data.Aeson.Types.ToJSON..=)) (issuingCardholderCardIssuingUserTermsAcceptance'NonNullableIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_agent" Data.Aeson.Types.ToJSON..=)) (issuingCardholderCardIssuingUserTermsAcceptance'NonNullableUserAgent obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("date" Data.Aeson.Types.ToJSON..=)) (issuingCardholderCardIssuingUserTermsAcceptance'NonNullableDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip" Data.Aeson.Types.ToJSON..=)) (issuingCardholderCardIssuingUserTermsAcceptance'NonNullableIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_agent" Data.Aeson.Types.ToJSON..=)) (issuingCardholderCardIssuingUserTermsAcceptance'NonNullableUserAgent obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable" (\obj -> ((GHC.Base.pure IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_agent"))

-- | Create a new 'IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable' with all required fields.
mkIssuingCardholderCardIssuingUserTermsAcceptance'NonNullable :: IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable
mkIssuingCardholderCardIssuingUserTermsAcceptance'NonNullable =
  IssuingCardholderCardIssuingUserTermsAcceptance'NonNullable
    { issuingCardholderCardIssuingUserTermsAcceptance'NonNullableDate = GHC.Maybe.Nothing,
      issuingCardholderCardIssuingUserTermsAcceptance'NonNullableIp = GHC.Maybe.Nothing,
      issuingCardholderCardIssuingUserTermsAcceptance'NonNullableUserAgent = GHC.Maybe.Nothing
    }
