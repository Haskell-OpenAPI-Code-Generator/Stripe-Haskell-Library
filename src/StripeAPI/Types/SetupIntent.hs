{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SetupIntent
module StripeAPI.Types.SetupIntent where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.AccountRequirementsError
import {-# SOURCE #-} StripeAPI.Types.Address
import {-# SOURCE #-} StripeAPI.Types.ApiErrors
import {-# SOURCE #-} StripeAPI.Types.Application
import {-# SOURCE #-} StripeAPI.Types.BankAccount
import {-# SOURCE #-} StripeAPI.Types.Card
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.ExternalAccountRequirements
import {-# SOURCE #-} StripeAPI.Types.LinkedAccountOptionsUsBankAccount
import {-# SOURCE #-} StripeAPI.Types.Mandate
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsAutomaticPaymentMethodsSetupIntent
import {-# SOURCE #-} StripeAPI.Types.PaymentIntent
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodConfigBizPaymentMethodConfigurationDetails
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsUsBankAccountMandateOptions
import {-# SOURCE #-} StripeAPI.Types.SetupAttempt
import {-# SOURCE #-} StripeAPI.Types.SetupIntentNextAction
import {-# SOURCE #-} StripeAPI.Types.SetupIntentNextActionRedirectToUrl
import {-# SOURCE #-} StripeAPI.Types.SetupIntentNextActionVerifyWithMicrodeposits
import {-# SOURCE #-} StripeAPI.Types.SetupIntentPaymentMethodOptions
import {-# SOURCE #-} StripeAPI.Types.SetupIntentPaymentMethodOptionsAcssDebit
import {-# SOURCE #-} StripeAPI.Types.SetupIntentPaymentMethodOptionsCard
import {-# SOURCE #-} StripeAPI.Types.SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit
import {-# SOURCE #-} StripeAPI.Types.SetupIntentPaymentMethodOptionsPaypal
import {-# SOURCE #-} StripeAPI.Types.SetupIntentPaymentMethodOptionsSepaDebit
import {-# SOURCE #-} StripeAPI.Types.SetupIntentPaymentMethodOptionsUsBankAccount
import {-# SOURCE #-} StripeAPI.Types.SetupIntentTypeSpecificPaymentMethodOptionsClient
import {-# SOURCE #-} StripeAPI.Types.Source
import {-# SOURCE #-} StripeAPI.Types.SourceCodeVerificationFlow
import {-# SOURCE #-} StripeAPI.Types.SourceOrder
import {-# SOURCE #-} StripeAPI.Types.SourceOwner
import {-# SOURCE #-} StripeAPI.Types.SourceReceiverFlow
import {-# SOURCE #-} StripeAPI.Types.SourceRedirectFlow
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAchCreditTransfer
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAchDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAcssDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAlipay
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAuBecsDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeBancontact
import {-# SOURCE #-} StripeAPI.Types.SourceTypeCard
import {-# SOURCE #-} StripeAPI.Types.SourceTypeCardPresent
import {-# SOURCE #-} StripeAPI.Types.SourceTypeEps
import {-# SOURCE #-} StripeAPI.Types.SourceTypeGiropay
import {-# SOURCE #-} StripeAPI.Types.SourceTypeIdeal
import {-# SOURCE #-} StripeAPI.Types.SourceTypeKlarna
import {-# SOURCE #-} StripeAPI.Types.SourceTypeMultibanco
import {-# SOURCE #-} StripeAPI.Types.SourceTypeP24
import {-# SOURCE #-} StripeAPI.Types.SourceTypeSepaDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeSofort
import {-# SOURCE #-} StripeAPI.Types.SourceTypeThreeDSecure
import {-# SOURCE #-} StripeAPI.Types.SourceTypeWechat
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.setup_intent@ in the specification.
--
-- A SetupIntent guides you through the process of setting up and saving a customer\'s payment credentials for future payments.
-- For example, you can use a SetupIntent to set up and save your customer\'s card without immediately collecting a payment.
-- Later, you can use [PaymentIntents](https:\/\/stripe.com\/docs\/api\#payment_intents) to drive the payment flow.
--
-- Create a SetupIntent when you\'re ready to collect your customer\'s payment credentials.
-- Don\'t maintain long-lived, unconfirmed SetupIntents because they might not be valid.
-- The SetupIntent transitions through multiple [statuses](https:\/\/stripe.com\/docs\/payments\/intents\#intent-statuses) as it guides
-- you through the setup process.
--
-- Successful SetupIntents result in payment credentials that are optimized for future payments.
-- For example, cardholders in [certain regions](\/guides\/strong-customer-authentication) might need to be run through
-- [Strong Customer Authentication](https:\/\/stripe.com\/docs\/strong-customer-authentication) during payment method collection
-- to streamline later [off-session payments](https:\/\/stripe.com\/docs\/payments\/setup-intents).
-- If you use the SetupIntent with a [Customer](https:\/\/stripe.com\/docs\/api\#setup_intent_object-customer),
-- it automatically attaches the resulting payment method to that Customer after successful setup.
-- We recommend using SetupIntents or [setup_future_usage](https:\/\/stripe.com\/docs\/api\#payment_intent_object-setup_future_usage) on
-- PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
--
-- By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
--
-- Related guide: [Setup Intents API](https:\/\/stripe.com\/docs\/payments\/setup-intents)
data SetupIntent = SetupIntent
  { -- | application: ID of the Connect application that created the SetupIntent.
    setupIntentApplication :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentApplication'NonNullableVariants)),
    -- | attach_to_self: If present, the SetupIntent\'s payment method will be attached to the in-context Stripe Account.
    --
    -- It can only be used for this Stripe Accountâ€™s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    setupIntentAttachToSelf :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | automatic_payment_methods: Settings for dynamic payment methods compatible with this Setup Intent
    setupIntentAutomaticPaymentMethods :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentAutomaticPaymentMethods'NonNullable)),
    -- | cancellation_reason: Reason for cancellation of this SetupIntent, one of \`abandoned\`, \`requested_by_customer\`, or \`duplicate\`.
    setupIntentCancellationReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentCancellationReason'NonNullable)),
    -- | client_secret: The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
    --
    -- The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentClientSecret :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    setupIntentCreated :: GHC.Types.Int,
    -- | customer: ID of the Customer this SetupIntent belongs to, if one exists.
    --
    -- If present, the SetupIntent\'s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
    setupIntentCustomer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentCustomer'NonNullableVariants)),
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow_directions: Indicates the directions of money movement for which this payment method is intended to be used.
    --
    -- Include \`inbound\` if you intend to use the payment method as the origin to pull funds from. Include \`outbound\` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    setupIntentFlowDirections :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([SetupIntentFlowDirections'NonNullable]))),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentId :: Data.Text.Internal.Text,
    -- | last_setup_error: The error encountered in the previous SetupIntent confirmation.
    setupIntentLastSetupError :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentLastSetupError'NonNullable)),
    -- | latest_attempt: The most recent SetupAttempt for this SetupIntent.
    setupIntentLatestAttempt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentLatestAttempt'NonNullableVariants)),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    setupIntentLivemode :: GHC.Types.Bool,
    -- | mandate: ID of the multi use Mandate generated by the SetupIntent.
    setupIntentMandate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentMandate'NonNullableVariants)),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    setupIntentMetadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | next_action: If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
    setupIntentNextAction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentNextAction'NonNullable)),
    -- | on_behalf_of: The account (if any) for which the setup is intended.
    setupIntentOnBehalfOf :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentOnBehalfOf'NonNullableVariants)),
    -- | payment_method: ID of the payment method used with this SetupIntent.
    setupIntentPaymentMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentPaymentMethod'NonNullableVariants)),
    -- | payment_method_configuration_details: Information about the payment method configuration used for this Setup Intent.
    setupIntentPaymentMethodConfigurationDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentPaymentMethodConfigurationDetails'NonNullable)),
    -- | payment_method_options: Payment method-specific configuration for this SetupIntent.
    setupIntentPaymentMethodOptions :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentPaymentMethodOptions'NonNullable)),
    -- | payment_method_types: The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
    setupIntentPaymentMethodTypes :: ([Data.Text.Internal.Text]),
    -- | single_use_mandate: ID of the single_use Mandate generated by the SetupIntent.
    setupIntentSingleUseMandate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentSingleUseMandate'NonNullableVariants)),
    -- | status: [Status](https:\/\/stripe.com\/docs\/payments\/intents\#intent-statuses) of this SetupIntent, one of \`requires_payment_method\`, \`requires_confirmation\`, \`requires_action\`, \`processing\`, \`canceled\`, or \`succeeded\`.
    setupIntentStatus :: SetupIntentStatus',
    -- | usage: Indicates how the payment method is intended to be used in the future.
    --
    -- Use \`on_session\` if you intend to only reuse the payment method when the customer is in your checkout flow. Use \`off_session\` if your customer may or may not be in your checkout flow. If not provided, this value defaults to \`off_session\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentUsage :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntent where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (setupIntentApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attach_to_self" Data.Aeson.Types.ToJSON..=)) (setupIntentAttachToSelf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("automatic_payment_methods" Data.Aeson.Types.ToJSON..=)) (setupIntentAutomaticPaymentMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancellation_reason" Data.Aeson.Types.ToJSON..=)) (setupIntentCancellationReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (setupIntentClientSecret obj) : ["created" Data.Aeson.Types.ToJSON..= setupIntentCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (setupIntentCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (setupIntentDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_directions" Data.Aeson.Types.ToJSON..=)) (setupIntentFlowDirections obj) : ["id" Data.Aeson.Types.ToJSON..= setupIntentId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_setup_error" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("latest_attempt" Data.Aeson.Types.ToJSON..=)) (setupIntentLatestAttempt obj) : ["livemode" Data.Aeson.Types.ToJSON..= setupIntentLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate" Data.Aeson.Types.ToJSON..=)) (setupIntentMandate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (setupIntentMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_action" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (setupIntentOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_configuration_details" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodConfigurationDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_options" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions obj) : ["payment_method_types" Data.Aeson.Types.ToJSON..= setupIntentPaymentMethodTypes obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("single_use_mandate" Data.Aeson.Types.ToJSON..=)) (setupIntentSingleUseMandate obj) : ["status" Data.Aeson.Types.ToJSON..= setupIntentStatus obj] : ["usage" Data.Aeson.Types.ToJSON..= setupIntentUsage obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "setup_intent"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (setupIntentApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("attach_to_self" Data.Aeson.Types.ToJSON..=)) (setupIntentAttachToSelf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("automatic_payment_methods" Data.Aeson.Types.ToJSON..=)) (setupIntentAutomaticPaymentMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancellation_reason" Data.Aeson.Types.ToJSON..=)) (setupIntentCancellationReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (setupIntentClientSecret obj) : ["created" Data.Aeson.Types.ToJSON..= setupIntentCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (setupIntentCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (setupIntentDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow_directions" Data.Aeson.Types.ToJSON..=)) (setupIntentFlowDirections obj) : ["id" Data.Aeson.Types.ToJSON..= setupIntentId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last_setup_error" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("latest_attempt" Data.Aeson.Types.ToJSON..=)) (setupIntentLatestAttempt obj) : ["livemode" Data.Aeson.Types.ToJSON..= setupIntentLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate" Data.Aeson.Types.ToJSON..=)) (setupIntentMandate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (setupIntentMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("next_action" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (setupIntentOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_configuration_details" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodConfigurationDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_options" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions obj) : ["payment_method_types" Data.Aeson.Types.ToJSON..= setupIntentPaymentMethodTypes obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("single_use_mandate" Data.Aeson.Types.ToJSON..=)) (setupIntentSingleUseMandate obj) : ["status" Data.Aeson.Types.ToJSON..= setupIntentStatus obj] : ["usage" Data.Aeson.Types.ToJSON..= setupIntentUsage obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "setup_intent"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntent where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntent" (\obj -> (((((((((((((((((((((((GHC.Base.pure SetupIntent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "attach_to_self")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "automatic_payment_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cancellation_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow_directions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last_setup_error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "latest_attempt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "next_action")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method_configuration_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "single_use_mandate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "usage"))

-- | Create a new 'SetupIntent' with all required fields.
mkSetupIntent ::
  -- | 'setupIntentCreated'
  GHC.Types.Int ->
  -- | 'setupIntentId'
  Data.Text.Internal.Text ->
  -- | 'setupIntentLivemode'
  GHC.Types.Bool ->
  -- | 'setupIntentPaymentMethodTypes'
  [Data.Text.Internal.Text] ->
  -- | 'setupIntentStatus'
  SetupIntentStatus' ->
  -- | 'setupIntentUsage'
  Data.Text.Internal.Text ->
  SetupIntent
mkSetupIntent setupIntentCreated setupIntentId setupIntentLivemode setupIntentPaymentMethodTypes setupIntentStatus setupIntentUsage =
  SetupIntent
    { setupIntentApplication = GHC.Maybe.Nothing,
      setupIntentAttachToSelf = GHC.Maybe.Nothing,
      setupIntentAutomaticPaymentMethods = GHC.Maybe.Nothing,
      setupIntentCancellationReason = GHC.Maybe.Nothing,
      setupIntentClientSecret = GHC.Maybe.Nothing,
      setupIntentCreated = setupIntentCreated,
      setupIntentCustomer = GHC.Maybe.Nothing,
      setupIntentDescription = GHC.Maybe.Nothing,
      setupIntentFlowDirections = GHC.Maybe.Nothing,
      setupIntentId = setupIntentId,
      setupIntentLastSetupError = GHC.Maybe.Nothing,
      setupIntentLatestAttempt = GHC.Maybe.Nothing,
      setupIntentLivemode = setupIntentLivemode,
      setupIntentMandate = GHC.Maybe.Nothing,
      setupIntentMetadata = GHC.Maybe.Nothing,
      setupIntentNextAction = GHC.Maybe.Nothing,
      setupIntentOnBehalfOf = GHC.Maybe.Nothing,
      setupIntentPaymentMethod = GHC.Maybe.Nothing,
      setupIntentPaymentMethodConfigurationDetails = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions = GHC.Maybe.Nothing,
      setupIntentPaymentMethodTypes = setupIntentPaymentMethodTypes,
      setupIntentSingleUseMandate = GHC.Maybe.Nothing,
      setupIntentStatus = setupIntentStatus,
      setupIntentUsage = setupIntentUsage
    }

-- | Defines the oneOf schema located at @components.schemas.setup_intent.properties.application.anyOf@ in the specification.
--
-- ID of the Connect application that created the SetupIntent.
data SetupIntentApplication'NonNullableVariants
  = SetupIntentApplication'NonNullableText Data.Text.Internal.Text
  | SetupIntentApplication'NonNullableApplication Application
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentApplication'NonNullableVariants where
  toJSON (SetupIntentApplication'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentApplication'NonNullableApplication a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentApplication'NonNullableVariants where
  parseJSON val = case (SetupIntentApplication'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentApplication'NonNullableApplication Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.setup_intent.properties.automatic_payment_methods.anyOf@ in the specification.
--
-- Settings for dynamic payment methods compatible with this Setup Intent
data SetupIntentAutomaticPaymentMethods'NonNullable = SetupIntentAutomaticPaymentMethods'NonNullable
  { -- | allow_redirects: Controls whether this SetupIntent will accept redirect-based payment methods.
    --
    -- Redirect-based payment methods may require your customer to be redirected to a payment method\'s app or site for authentication or additional steps. To [confirm](https:\/\/stripe.com\/docs\/api\/setup_intents\/confirm) this SetupIntent, you may be required to provide a \`return_url\` to redirect customers back to your site after they authenticate or complete the setup.
    setupIntentAutomaticPaymentMethods'NonNullableAllowRedirects :: (GHC.Maybe.Maybe SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'),
    -- | enabled: Automatically calculates compatible payment methods
    setupIntentAutomaticPaymentMethods'NonNullableEnabled :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentAutomaticPaymentMethods'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_redirects" Data.Aeson.Types.ToJSON..=)) (setupIntentAutomaticPaymentMethods'NonNullableAllowRedirects obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (setupIntentAutomaticPaymentMethods'NonNullableEnabled obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("allow_redirects" Data.Aeson.Types.ToJSON..=)) (setupIntentAutomaticPaymentMethods'NonNullableAllowRedirects obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("enabled" Data.Aeson.Types.ToJSON..=)) (setupIntentAutomaticPaymentMethods'NonNullableEnabled obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentAutomaticPaymentMethods'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentAutomaticPaymentMethods'NonNullable" (\obj -> (GHC.Base.pure SetupIntentAutomaticPaymentMethods'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "allow_redirects")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "enabled"))

-- | Create a new 'SetupIntentAutomaticPaymentMethods'NonNullable' with all required fields.
mkSetupIntentAutomaticPaymentMethods'NonNullable :: SetupIntentAutomaticPaymentMethods'NonNullable
mkSetupIntentAutomaticPaymentMethods'NonNullable =
  SetupIntentAutomaticPaymentMethods'NonNullable
    { setupIntentAutomaticPaymentMethods'NonNullableAllowRedirects = GHC.Maybe.Nothing,
      setupIntentAutomaticPaymentMethods'NonNullableEnabled = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.automatic_payment_methods.anyOf.properties.allow_redirects@ in the specification.
--
-- Controls whether this SetupIntent will accept redirect-based payment methods.
--
-- Redirect-based payment methods may require your customer to be redirected to a payment method\'s app or site for authentication or additional steps. To [confirm](https:\/\/stripe.com\/docs\/api\/setup_intents\/confirm) this SetupIntent, you may be required to provide a \`return_url\` to redirect customers back to your site after they authenticate or complete the setup.
data SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"always"@
    SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumAlways
  | -- | Represents the JSON value @"never"@
    SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumNever
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects' where
  toJSON (SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Other val) = val
  toJSON (SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumAlways) = "always"
  toJSON (SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumNever) = "never"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "always" -> SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumAlways
            | val GHC.Classes.== "never" -> SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'EnumNever
            | GHC.Base.otherwise -> SetupIntentAutomaticPaymentMethods'NonNullableAllowRedirects'Other val
      )

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.cancellation_reason@ in the specification.
--
-- Reason for cancellation of this SetupIntent, one of \`abandoned\`, \`requested_by_customer\`, or \`duplicate\`.
data SetupIntentCancellationReason'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentCancellationReason'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentCancellationReason'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"abandoned"@
    SetupIntentCancellationReason'NonNullableEnumAbandoned
  | -- | Represents the JSON value @"duplicate"@
    SetupIntentCancellationReason'NonNullableEnumDuplicate
  | -- | Represents the JSON value @"requested_by_customer"@
    SetupIntentCancellationReason'NonNullableEnumRequestedByCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentCancellationReason'NonNullable where
  toJSON (SetupIntentCancellationReason'NonNullableOther val) = val
  toJSON (SetupIntentCancellationReason'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentCancellationReason'NonNullableEnumAbandoned) = "abandoned"
  toJSON (SetupIntentCancellationReason'NonNullableEnumDuplicate) = "duplicate"
  toJSON (SetupIntentCancellationReason'NonNullableEnumRequestedByCustomer) = "requested_by_customer"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentCancellationReason'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "abandoned" -> SetupIntentCancellationReason'NonNullableEnumAbandoned
            | val GHC.Classes.== "duplicate" -> SetupIntentCancellationReason'NonNullableEnumDuplicate
            | val GHC.Classes.== "requested_by_customer" -> SetupIntentCancellationReason'NonNullableEnumRequestedByCustomer
            | GHC.Base.otherwise -> SetupIntentCancellationReason'NonNullableOther val
      )

-- | Defines the oneOf schema located at @components.schemas.setup_intent.properties.customer.anyOf@ in the specification.
--
-- ID of the Customer this SetupIntent belongs to, if one exists.
--
-- If present, the SetupIntent\'s payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
data SetupIntentCustomer'NonNullableVariants
  = SetupIntentCustomer'NonNullableText Data.Text.Internal.Text
  | SetupIntentCustomer'NonNullableCustomer Customer
  | SetupIntentCustomer'NonNullableDeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentCustomer'NonNullableVariants where
  toJSON (SetupIntentCustomer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentCustomer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentCustomer'NonNullableDeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentCustomer'NonNullableVariants where
  parseJSON val = case (SetupIntentCustomer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentCustomer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentCustomer'NonNullableDeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.flow_directions.items@ in the specification.
data SetupIntentFlowDirections'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentFlowDirections'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentFlowDirections'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"inbound"@
    SetupIntentFlowDirections'NonNullableEnumInbound
  | -- | Represents the JSON value @"outbound"@
    SetupIntentFlowDirections'NonNullableEnumOutbound
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentFlowDirections'NonNullable where
  toJSON (SetupIntentFlowDirections'NonNullableOther val) = val
  toJSON (SetupIntentFlowDirections'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentFlowDirections'NonNullableEnumInbound) = "inbound"
  toJSON (SetupIntentFlowDirections'NonNullableEnumOutbound) = "outbound"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentFlowDirections'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "inbound" -> SetupIntentFlowDirections'NonNullableEnumInbound
            | val GHC.Classes.== "outbound" -> SetupIntentFlowDirections'NonNullableEnumOutbound
            | GHC.Base.otherwise -> SetupIntentFlowDirections'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf@ in the specification.
--
-- The error encountered in the previous SetupIntent confirmation.
data SetupIntentLastSetupError'NonNullable = SetupIntentLastSetupError'NonNullable
  { -- | charge: For card errors, the ID of the failed charge.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableCharge :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | code: For some errors that could be handled programmatically, a short string indicating the [error code](https:\/\/stripe.com\/docs\/error-codes) reported.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | decline_code: For card errors resulting from a card issuer decline, a short string indicating the [card issuer\'s reason for the decline](https:\/\/stripe.com\/docs\/declines\#issuer-declines) if they provide one.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableDeclineCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | doc_url: A URL to more information about the [error code](https:\/\/stripe.com\/docs\/error-codes) reported.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableDocUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | message: A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
    --
    -- Constraints:
    --
    -- * Maximum length of 40000
    setupIntentLastSetupError'NonNullableMessage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | param: If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableParam :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | payment_intent: A PaymentIntent guides you through the process of collecting a payment from your customer.
    -- We recommend that you create exactly one PaymentIntent for each order or
    -- customer session in your system. You can reference the PaymentIntent later to
    -- see the history of payment attempts for a particular session.
    --
    -- A PaymentIntent transitions through
    -- [multiple statuses](https:\/\/stripe.com\/docs\/payments\/intents\#intent-statuses)
    -- throughout its lifetime as it interfaces with Stripe.js to perform
    -- authentication flows and ultimately creates at most one successful charge.
    --
    -- Related guide: [Payment Intents API](https:\/\/stripe.com\/docs\/payments\/payment-intents)
    setupIntentLastSetupError'NonNullablePaymentIntent :: (GHC.Maybe.Maybe PaymentIntent),
    -- | payment_method: PaymentMethod objects represent your customer\'s payment instruments.
    -- You can use them with [PaymentIntents](https:\/\/stripe.com\/docs\/payments\/payment-intents) to collect payments or save them to
    -- Customer objects to store instrument details for future payments.
    --
    -- Related guides: [Payment Methods](https:\/\/stripe.com\/docs\/payments\/payment-methods) and [More Payment Scenarios](https:\/\/stripe.com\/docs\/payments\/more-payment-scenarios).
    setupIntentLastSetupError'NonNullablePaymentMethod :: (GHC.Maybe.Maybe PaymentMethod),
    -- | payment_method_type: If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullablePaymentMethodType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | request_log_url: A URL to the request log entry in your dashboard.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableRequestLogUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | setup_intent: A SetupIntent guides you through the process of setting up and saving a customer\'s payment credentials for future payments.
    -- For example, you can use a SetupIntent to set up and save your customer\'s card without immediately collecting a payment.
    -- Later, you can use [PaymentIntents](https:\/\/stripe.com\/docs\/api\#payment_intents) to drive the payment flow.
    --
    -- Create a SetupIntent when you\'re ready to collect your customer\'s payment credentials.
    -- Don\'t maintain long-lived, unconfirmed SetupIntents because they might not be valid.
    -- The SetupIntent transitions through multiple [statuses](https:\/\/stripe.com\/docs\/payments\/intents\#intent-statuses) as it guides
    -- you through the setup process.
    --
    -- Successful SetupIntents result in payment credentials that are optimized for future payments.
    -- For example, cardholders in [certain regions](\/guides\/strong-customer-authentication) might need to be run through
    -- [Strong Customer Authentication](https:\/\/stripe.com\/docs\/strong-customer-authentication) during payment method collection
    -- to streamline later [off-session payments](https:\/\/stripe.com\/docs\/payments\/setup-intents).
    -- If you use the SetupIntent with a [Customer](https:\/\/stripe.com\/docs\/api\#setup_intent_object-customer),
    -- it automatically attaches the resulting payment method to that Customer after successful setup.
    -- We recommend using SetupIntents or [setup_future_usage](https:\/\/stripe.com\/docs\/api\#payment_intent_object-setup_future_usage) on
    -- PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
    --
    -- By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
    --
    -- Related guide: [Setup Intents API](https:\/\/stripe.com\/docs\/payments\/setup-intents)
    setupIntentLastSetupError'NonNullableSetupIntent :: (GHC.Maybe.Maybe SetupIntent),
    -- | source: The [source object](https:\/\/stripe.com\/docs\/api\/sources\/object) for errors returned on a request involving a source.
    setupIntentLastSetupError'NonNullableSource :: (GHC.Maybe.Maybe SetupIntentLastSetupError'NonNullableSource'),
    -- | type: The type of error returned. One of \`api_error\`, \`card_error\`, \`idempotency_error\`, or \`invalid_request_error\`
    setupIntentLastSetupError'NonNullableType :: (GHC.Maybe.Maybe SetupIntentLastSetupError'NonNullableType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charge" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableCharge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("decline_code" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableDeclineCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("doc_url" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableDocUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("message" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("param" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableParam obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullablePaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullablePaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullablePaymentMethodType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_log_url" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableRequestLogUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_intent" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSetupIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("charge" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableCharge obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("decline_code" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableDeclineCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("doc_url" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableDocUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("message" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("param" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableParam obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullablePaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullablePaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullablePaymentMethodType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_log_url" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableRequestLogUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_intent" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSetupIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'NonNullable" (\obj -> ((((((((((((GHC.Base.pure SetupIntentLastSetupError'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "decline_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "doc_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "param")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_log_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'SetupIntentLastSetupError'NonNullable' with all required fields.
mkSetupIntentLastSetupError'NonNullable :: SetupIntentLastSetupError'NonNullable
mkSetupIntentLastSetupError'NonNullable =
  SetupIntentLastSetupError'NonNullable
    { setupIntentLastSetupError'NonNullableCharge = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableCode = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableDeclineCode = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableDocUrl = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableMessage = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableParam = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullablePaymentIntent = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullablePaymentMethod = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullablePaymentMethodType = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableRequestLogUrl = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSetupIntent = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf@ in the specification.
--
-- The [source object](https:\\\/\\\/stripe.com\\\/docs\\\/api\\\/sources\\\/object) for errors returned on a request involving a source.
data SetupIntentLastSetupError'NonNullableSource' = SetupIntentLastSetupError'NonNullableSource'
  { -- | account: The ID of the account that the bank account is associated with.
    setupIntentLastSetupError'NonNullableSource'Account :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentLastSetupError'NonNullableSource'Account'NonNullableVariants)),
    -- | account_holder_name: The name of the person or business that owns the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AccountHolderName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AccountHolderType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_type: The bank account type. This can only be \`checking\` or \`savings\` in most countries. In Japan, this can only be \`futsu\` or \`toza\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AccountType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | ach_credit_transfer
    setupIntentLastSetupError'NonNullableSource'AchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
    -- | ach_debit
    setupIntentLastSetupError'NonNullableSource'AchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
    -- | acss_debit
    setupIntentLastSetupError'NonNullableSource'AcssDebit :: (GHC.Maybe.Maybe SourceTypeAcssDebit),
    -- | address_city: City\/District\/Suburb\/Town\/Village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AddressCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_country: Billing address country, if provided when creating card.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AddressCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AddressLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AddressLine1Check :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AddressLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_state: State\/County\/Province\/Region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AddressState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AddressZip :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'AddressZipCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | alipay
    setupIntentLastSetupError'NonNullableSource'Alipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
    -- | amount: A positive integer in the smallest currency unit (that is, 100 cents for \$1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for \`single_use\` sources.
    setupIntentLastSetupError'NonNullableSource'Amount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | au_becs_debit
    setupIntentLastSetupError'NonNullableSource'AuBecsDebit :: (GHC.Maybe.Maybe SourceTypeAuBecsDebit),
    -- | available_payout_methods: A set of available payout methods for this bank account. Only values from this set should be passed as the \`method\` when creating a payout.
    setupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullable]))),
    -- | bancontact
    setupIntentLastSetupError'NonNullableSource'Bancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
    -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'BankName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`Eftpos Australia\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | card
    setupIntentLastSetupError'NonNullableSource'Card :: (GHC.Maybe.Maybe SourceTypeCard),
    -- | card_present
    setupIntentLastSetupError'NonNullableSource'CardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
    -- | client_secret: The client secret of the source. Used for client-side retrieval using a publishable key.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'ClientSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | code_verification:
    setupIntentLastSetupError'NonNullableSource'CodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
    -- | country: Two-letter ISO code representing the country the bank account is located in.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    setupIntentLastSetupError'NonNullableSource'Created :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
    setupIntentLastSetupError'NonNullableSource'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | customer: The ID of the customer that the bank account is associated with.
    setupIntentLastSetupError'NonNullableSource'Customer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableVariants)),
    -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`. A result of unchecked indicates that CVC was provided but hasn\'t been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https:\/\/support.stripe.com\/questions\/check-if-a-card-is-valid-without-a-charge).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'CvcCheck :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | default_for_currency: Whether this bank account is the default external account for its currency.
    setupIntentLastSetupError'NonNullableSource'DefaultForCurrency :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool)),
    -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'DynamicLast4 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | eps
    setupIntentLastSetupError'NonNullableSource'Eps :: (GHC.Maybe.Maybe SourceTypeEps),
    -- | exp_month: Two-digit number representing the card\'s expiration month.
    setupIntentLastSetupError'NonNullableSource'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | exp_year: Four-digit number representing the card\'s expiration year.
    setupIntentLastSetupError'NonNullableSource'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Fingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | flow: The authentication \`flow\` of the source. \`flow\` is one of \`redirect\`, \`receiver\`, \`code_verification\`, \`none\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Flow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | future_requirements: Information about the [upcoming new requirements for the bank account](https:\/\/stripe.com\/docs\/connect\/custom-accounts\/future-requirements), including what information needs to be collected, and by when.
    setupIntentLastSetupError'NonNullableSource'FutureRequirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable)),
    -- | giropay
    setupIntentLastSetupError'NonNullableSource'Giropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | ideal
    setupIntentLastSetupError'NonNullableSource'Ideal :: (GHC.Maybe.Maybe SourceTypeIdeal),
    -- | klarna
    setupIntentLastSetupError'NonNullableSource'Klarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
    -- | last4: The last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    setupIntentLastSetupError'NonNullableSource'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    setupIntentLastSetupError'NonNullableSource'Metadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | multibanco
    setupIntentLastSetupError'NonNullableSource'Multibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
    -- | name: Cardholder name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Name :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | object: String representing the object\'s type. Objects of the same type share the same value.
    setupIntentLastSetupError'NonNullableSource'Object :: (GHC.Maybe.Maybe SetupIntentLastSetupError'NonNullableSource'Object'),
    -- | owner: Information about the owner of the payment instrument that may be used or required by particular source types.
    setupIntentLastSetupError'NonNullableSource'Owner :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable)),
    -- | p24
    setupIntentLastSetupError'NonNullableSource'P24 :: (GHC.Maybe.Maybe SourceTypeP24),
    -- | receiver:
    setupIntentLastSetupError'NonNullableSource'Receiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
    -- | redirect:
    setupIntentLastSetupError'NonNullableSource'Redirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
    -- | requirements: Information about the requirements for the bank account, including what information needs to be collected.
    setupIntentLastSetupError'NonNullableSource'Requirements :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable)),
    -- | routing_number: The routing transit number for the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'RoutingNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | sepa_debit
    setupIntentLastSetupError'NonNullableSource'SepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
    -- | sofort
    setupIntentLastSetupError'NonNullableSource'Sofort :: (GHC.Maybe.Maybe SourceTypeSofort),
    -- | source_order:
    setupIntentLastSetupError'NonNullableSource'SourceOrder :: (GHC.Maybe.Maybe SourceOrder),
    -- | statement_descriptor: Extra information about a source. This will appear on your customer\'s statement every time you charge the source.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'StatementDescriptor :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isnâ€™t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a payout sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send [scheduled payouts](https:\/\/stripe.com\/docs\/payouts\#payout-schedule) until the bank details are updated.
    --
    -- For external accounts, possible values are \`new\`, \`errored\` and \`verification_failed\`. If a payouts fails, the status is set to \`errored\` and scheduled payouts are stopped until account details are updated. In India, if we can\'t [verify the owner of the bank account](https:\/\/support.stripe.com\/questions\/bank-account-ownership-verification), we\'ll set the status to \`verification_failed\`. Other validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | three_d_secure
    setupIntentLastSetupError'NonNullableSource'ThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
    -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'TokenizationMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | type: The \`type\` of the source. The \`type\` is a payment method, one of \`ach_credit_transfer\`, \`ach_debit\`, \`alipay\`, \`bancontact\`, \`card\`, \`card_present\`, \`eps\`, \`giropay\`, \`ideal\`, \`multibanco\`, \`klarna\`, \`p24\`, \`sepa_debit\`, \`sofort\`, \`three_d_secure\`, or \`wechat\`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https:\/\/stripe.com\/docs\/sources) used.
    setupIntentLastSetupError'NonNullableSource'Type :: (GHC.Maybe.Maybe SetupIntentLastSetupError'NonNullableSource'Type'),
    -- | usage: Either \`reusable\` or \`single_use\`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Usage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | wechat
    setupIntentLastSetupError'NonNullableSource'Wechat :: (GHC.Maybe.Maybe SourceTypeWechat)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_credit_transfer" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AchCreditTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AchDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Alipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Bancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Card obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'CardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'ClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code_verification" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'CodeVerification obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Created obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Eps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Flow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Giropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Ideal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Klarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Livemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Multibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'P24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receiver" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Receiver obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Redirect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'SepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Sofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_order" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'SourceOrder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'StatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("three_d_secure" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'ThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'TokenizationMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Usage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Wechat obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Account obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_credit_transfer" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AchCreditTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AchDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_city" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_country" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line1_check" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressLine1Check obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_line2" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_state" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressState obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressZip obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address_zip_check" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AddressZipCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Alipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Amount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available_payout_methods" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Bancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'BankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Brand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Card obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'CardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("client_secret" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'ClientSecret obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code_verification" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'CodeVerification obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Country obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Created obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Customer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cvc_check" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'CvcCheck obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_for_currency" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'DefaultForCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dynamic_last4" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'DynamicLast4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Eps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_month" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'ExpMonth obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exp_year" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'ExpYear obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Fingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("flow" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Flow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Funding obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Giropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Id obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Ideal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Klarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Last4 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Livemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Metadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Multibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Name obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Object obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("owner" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'P24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receiver" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Receiver obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Redirect obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'RoutingNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'SepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Sofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_order" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'SourceOrder obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'StatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("status" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Status obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("three_d_secure" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'ThreeDSecure obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tokenization_method" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'TokenizationMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Type obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Usage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Wechat obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'NonNullableSource'" (\obj -> (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure SetupIntentLastSetupError'NonNullableSource' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "au_becs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "future_requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat"))

-- | Create a new 'SetupIntentLastSetupError'NonNullableSource'' with all required fields.
mkSetupIntentLastSetupError'NonNullableSource' :: SetupIntentLastSetupError'NonNullableSource'
mkSetupIntentLastSetupError'NonNullableSource' =
  SetupIntentLastSetupError'NonNullableSource'
    { setupIntentLastSetupError'NonNullableSource'Account = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AccountHolderName = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AccountHolderType = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AccountType = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AchCreditTransfer = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AchDebit = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AcssDebit = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AddressCity = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AddressCountry = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AddressLine1 = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AddressLine1Check = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AddressLine2 = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AddressState = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AddressZip = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AddressZipCheck = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Alipay = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Amount = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AuBecsDebit = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Bancontact = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'BankName = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Brand = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Card = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'CardPresent = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'ClientSecret = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'CodeVerification = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Country = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Created = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Currency = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Customer = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'CvcCheck = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'DefaultForCurrency = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'DynamicLast4 = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Eps = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'ExpMonth = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'ExpYear = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Fingerprint = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Flow = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Funding = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'FutureRequirements = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Giropay = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Id = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Ideal = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Klarna = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Last4 = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Livemode = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Metadata = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Multibanco = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Name = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Object = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'P24 = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Receiver = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Redirect = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Requirements = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'RoutingNumber = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'SepaDebit = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Sofort = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'SourceOrder = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'StatementDescriptor = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Status = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'ThreeDSecure = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'TokenizationMethod = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Type = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Usage = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Wechat = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data SetupIntentLastSetupError'NonNullableSource'Account'NonNullableVariants
  = SetupIntentLastSetupError'NonNullableSource'Account'NonNullableText Data.Text.Internal.Text
  | SetupIntentLastSetupError'NonNullableSource'Account'NonNullableAccount Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'Account'NonNullableVariants where
  toJSON (SetupIntentLastSetupError'NonNullableSource'Account'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentLastSetupError'NonNullableSource'Account'NonNullableAccount a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'Account'NonNullableVariants where
  parseJSON val = case (SetupIntentLastSetupError'NonNullableSource'Account'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentLastSetupError'NonNullableSource'Account'NonNullableAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.available_payout_methods.items@ in the specification.
data SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumInstant
  | -- | Represents the JSON value @"standard"@
    SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullable where
  toJSON (SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableOther val) = val
  toJSON (SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumInstant) = "instant"
  toJSON (SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "instant" -> SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumInstant
            | val GHC.Classes.== "standard" -> SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableEnumStandard
            | GHC.Base.otherwise -> SetupIntentLastSetupError'NonNullableSource'AvailablePayoutMethods'NonNullableOther val
      )

-- | Defines the oneOf schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer that the bank account is associated with.
data SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableVariants
  = SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableText Data.Text.Internal.Text
  | SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableCustomer Customer
  | SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableDeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableVariants where
  toJSON (SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableDeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableVariants where
  parseJSON val = case (SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentLastSetupError'NonNullableSource'Customer'NonNullableDeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.future_requirements.anyOf@ in the specification.
--
-- Information about the [upcoming new requirements for the bank account](https:\\\/\\\/stripe.com\\\/docs\\\/connect\\\/custom-accounts\\\/future-requirements), including what information needs to be collected, and by when.
data SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable = SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([AccountRequirementsError]))),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | pending_verification: Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`.
    setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text])))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable" (\obj -> (((GHC.Base.pure SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable' with all required fields.
mkSetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable :: SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable
mkSetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable =
  SetupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullable
    { setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullableErrors = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullablePastDue = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'FutureRequirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.object@ in the specification.
--
-- String representing the object\'s type. Objects of the same type share the same value.
data SetupIntentLastSetupError'NonNullableSource'Object'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentLastSetupError'NonNullableSource'Object'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentLastSetupError'NonNullableSource'Object'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_account"@
    SetupIntentLastSetupError'NonNullableSource'Object'EnumBankAccount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'Object' where
  toJSON (SetupIntentLastSetupError'NonNullableSource'Object'Other val) = val
  toJSON (SetupIntentLastSetupError'NonNullableSource'Object'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentLastSetupError'NonNullableSource'Object'EnumBankAccount) = "bank_account"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "bank_account" -> SetupIntentLastSetupError'NonNullableSource'Object'EnumBankAccount
            | GHC.Base.otherwise -> SetupIntentLastSetupError'NonNullableSource'Object'Other val
      )

-- | Defines the object schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.owner.anyOf@ in the specification.
--
-- Information about the owner of the payment instrument that may be used or required by particular source types.
data SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable = SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable
  { -- | address: Owner\'s address.
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable)),
    -- | email: Owner\'s email address.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: Owner\'s full name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | phone: Owner\'s phone number (including extension).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullablePhone :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verified_address: Verified owner\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable)),
    -- | verified_email: Verified owner\'s email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verified_name: Verified owner\'s full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verified_phone: Verified owner\'s phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedPhone :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_address" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_email" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_phone" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedPhone obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_address" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_email" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_name" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verified_phone" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedPhone obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable" (\obj -> (((((((GHC.Base.pure SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verified_phone"))

-- | Create a new 'SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable' with all required fields.
mkSetupIntentLastSetupError'NonNullableSource'Owner'NonNullable :: SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable
mkSetupIntentLastSetupError'NonNullableSource'Owner'NonNullable =
  SetupIntentLastSetupError'NonNullableSource'Owner'NonNullable
    { setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableEmail = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableName = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullablePhone = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedEmail = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedName = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedPhone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.owner.anyOf.properties.address.anyOf@ in the specification.
--
-- Owner\\\'s address.
data SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable = SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable" (\obj -> (((((GHC.Base.pure SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable' with all required fields.
mkSetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable :: SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable
mkSetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable =
  SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullable
    { setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableCity = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableCountry = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableAddress'NonNullableState = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.owner.anyOf.properties.verified_address.anyOf@ in the specification.
--
-- Verified owner\\\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
data SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable = SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCountry :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine1 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine2 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullablePostalCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line1" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine1 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line2" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine2 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("postal_code" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullablePostalCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable" (\obj -> (((((GHC.Base.pure SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable' with all required fields.
mkSetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable :: SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable
mkSetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable =
  SetupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullable
    { setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCity = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableCountry = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine1 = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableLine2 = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullablePostalCode = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Owner'NonNullableVerifiedAddress'NonNullableState = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.requirements.anyOf@ in the specification.
--
-- Information about the requirements for the bank account, including what information needs to be collected.
data SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable = SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable
  { -- | currently_due: Fields that need to be collected to keep the external account enabled. If not collected by \`current_deadline\`, these fields appear in \`past_due\` as well, and the account is disabled.
    setupIntentLastSetupError'NonNullableSource'Requirements'NonNullableCurrentlyDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    setupIntentLastSetupError'NonNullableSource'Requirements'NonNullableErrors :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([AccountRequirementsError]))),
    -- | past_due: Fields that weren\'t collected by \`current_deadline\`. These fields need to be collected to enable the external account.
    setupIntentLastSetupError'NonNullableSource'Requirements'NonNullablePastDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | pending_verification: Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\`, \`currently_due\`, or \`past_due\`.
    setupIntentLastSetupError'NonNullableSource'Requirements'NonNullablePendingVerification :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text])))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currently_due" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements'NonNullableCurrentlyDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("errors" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements'NonNullableErrors obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("past_due" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements'NonNullablePastDue obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pending_verification" Data.Aeson.Types.ToJSON..=)) (setupIntentLastSetupError'NonNullableSource'Requirements'NonNullablePendingVerification obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable" (\obj -> (((GHC.Base.pure SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pending_verification"))

-- | Create a new 'SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable' with all required fields.
mkSetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable :: SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable
mkSetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable =
  SetupIntentLastSetupError'NonNullableSource'Requirements'NonNullable
    { setupIntentLastSetupError'NonNullableSource'Requirements'NonNullableCurrentlyDue = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Requirements'NonNullableErrors = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Requirements'NonNullablePastDue = GHC.Maybe.Nothing,
      setupIntentLastSetupError'NonNullableSource'Requirements'NonNullablePendingVerification = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.source.anyOf.properties.type@ in the specification.
--
-- The \`type\` of the source. The \`type\` is a payment method, one of \`ach_credit_transfer\`, \`ach_debit\`, \`alipay\`, \`bancontact\`, \`card\`, \`card_present\`, \`eps\`, \`giropay\`, \`ideal\`, \`multibanco\`, \`klarna\`, \`p24\`, \`sepa_debit\`, \`sofort\`, \`three_d_secure\`, or \`wechat\`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https:\/\/stripe.com\/docs\/sources) used.
data SetupIntentLastSetupError'NonNullableSource'Type'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentLastSetupError'NonNullableSource'Type'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentLastSetupError'NonNullableSource'Type'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"ach_credit_transfer"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumAchCreditTransfer
  | -- | Represents the JSON value @"ach_debit"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumAchDebit
  | -- | Represents the JSON value @"acss_debit"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumAcssDebit
  | -- | Represents the JSON value @"alipay"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumAlipay
  | -- | Represents the JSON value @"au_becs_debit"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumAuBecsDebit
  | -- | Represents the JSON value @"bancontact"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumBancontact
  | -- | Represents the JSON value @"card"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumCard
  | -- | Represents the JSON value @"card_present"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumCardPresent
  | -- | Represents the JSON value @"eps"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumEps
  | -- | Represents the JSON value @"giropay"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumGiropay
  | -- | Represents the JSON value @"ideal"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumIdeal
  | -- | Represents the JSON value @"klarna"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumKlarna
  | -- | Represents the JSON value @"multibanco"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumMultibanco
  | -- | Represents the JSON value @"p24"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumP24
  | -- | Represents the JSON value @"sepa_debit"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumSepaDebit
  | -- | Represents the JSON value @"sofort"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumSofort
  | -- | Represents the JSON value @"three_d_secure"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumThreeDSecure
  | -- | Represents the JSON value @"wechat"@
    SetupIntentLastSetupError'NonNullableSource'Type'EnumWechat
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableSource'Type' where
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'Other val) = val
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumAchCreditTransfer) = "ach_credit_transfer"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumAchDebit) = "ach_debit"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumAcssDebit) = "acss_debit"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumAlipay) = "alipay"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumAuBecsDebit) = "au_becs_debit"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumBancontact) = "bancontact"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumCard) = "card"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumCardPresent) = "card_present"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumEps) = "eps"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumGiropay) = "giropay"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumIdeal) = "ideal"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumKlarna) = "klarna"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumMultibanco) = "multibanco"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumP24) = "p24"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumSepaDebit) = "sepa_debit"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumSofort) = "sofort"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumThreeDSecure) = "three_d_secure"
  toJSON (SetupIntentLastSetupError'NonNullableSource'Type'EnumWechat) = "wechat"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableSource'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ach_credit_transfer" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumAchCreditTransfer
            | val GHC.Classes.== "ach_debit" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumAchDebit
            | val GHC.Classes.== "acss_debit" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumAcssDebit
            | val GHC.Classes.== "alipay" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumAlipay
            | val GHC.Classes.== "au_becs_debit" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumAuBecsDebit
            | val GHC.Classes.== "bancontact" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumBancontact
            | val GHC.Classes.== "card" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumCard
            | val GHC.Classes.== "card_present" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumCardPresent
            | val GHC.Classes.== "eps" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumEps
            | val GHC.Classes.== "giropay" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumGiropay
            | val GHC.Classes.== "ideal" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumIdeal
            | val GHC.Classes.== "klarna" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumKlarna
            | val GHC.Classes.== "multibanco" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumMultibanco
            | val GHC.Classes.== "p24" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumP24
            | val GHC.Classes.== "sepa_debit" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumSepaDebit
            | val GHC.Classes.== "sofort" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumSofort
            | val GHC.Classes.== "three_d_secure" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumThreeDSecure
            | val GHC.Classes.== "wechat" -> SetupIntentLastSetupError'NonNullableSource'Type'EnumWechat
            | GHC.Base.otherwise -> SetupIntentLastSetupError'NonNullableSource'Type'Other val
      )

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.last_setup_error.anyOf.properties.type@ in the specification.
--
-- The type of error returned. One of \`api_error\`, \`card_error\`, \`idempotency_error\`, or \`invalid_request_error\`
data SetupIntentLastSetupError'NonNullableType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentLastSetupError'NonNullableType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentLastSetupError'NonNullableType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"api_error"@
    SetupIntentLastSetupError'NonNullableType'EnumApiError
  | -- | Represents the JSON value @"card_error"@
    SetupIntentLastSetupError'NonNullableType'EnumCardError
  | -- | Represents the JSON value @"idempotency_error"@
    SetupIntentLastSetupError'NonNullableType'EnumIdempotencyError
  | -- | Represents the JSON value @"invalid_request_error"@
    SetupIntentLastSetupError'NonNullableType'EnumInvalidRequestError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLastSetupError'NonNullableType' where
  toJSON (SetupIntentLastSetupError'NonNullableType'Other val) = val
  toJSON (SetupIntentLastSetupError'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentLastSetupError'NonNullableType'EnumApiError) = "api_error"
  toJSON (SetupIntentLastSetupError'NonNullableType'EnumCardError) = "card_error"
  toJSON (SetupIntentLastSetupError'NonNullableType'EnumIdempotencyError) = "idempotency_error"
  toJSON (SetupIntentLastSetupError'NonNullableType'EnumInvalidRequestError) = "invalid_request_error"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLastSetupError'NonNullableType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "api_error" -> SetupIntentLastSetupError'NonNullableType'EnumApiError
            | val GHC.Classes.== "card_error" -> SetupIntentLastSetupError'NonNullableType'EnumCardError
            | val GHC.Classes.== "idempotency_error" -> SetupIntentLastSetupError'NonNullableType'EnumIdempotencyError
            | val GHC.Classes.== "invalid_request_error" -> SetupIntentLastSetupError'NonNullableType'EnumInvalidRequestError
            | GHC.Base.otherwise -> SetupIntentLastSetupError'NonNullableType'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.setup_intent.properties.latest_attempt.anyOf@ in the specification.
--
-- The most recent SetupAttempt for this SetupIntent.
data SetupIntentLatestAttempt'NonNullableVariants
  = SetupIntentLatestAttempt'NonNullableText Data.Text.Internal.Text
  | SetupIntentLatestAttempt'NonNullableSetupAttempt SetupAttempt
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentLatestAttempt'NonNullableVariants where
  toJSON (SetupIntentLatestAttempt'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentLatestAttempt'NonNullableSetupAttempt a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentLatestAttempt'NonNullableVariants where
  parseJSON val = case (SetupIntentLatestAttempt'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentLatestAttempt'NonNullableSetupAttempt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.setup_intent.properties.mandate.anyOf@ in the specification.
--
-- ID of the multi use Mandate generated by the SetupIntent.
data SetupIntentMandate'NonNullableVariants
  = SetupIntentMandate'NonNullableText Data.Text.Internal.Text
  | SetupIntentMandate'NonNullableMandate Mandate
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentMandate'NonNullableVariants where
  toJSON (SetupIntentMandate'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentMandate'NonNullableMandate a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentMandate'NonNullableVariants where
  parseJSON val = case (SetupIntentMandate'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentMandate'NonNullableMandate Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.setup_intent.properties.next_action.anyOf@ in the specification.
--
-- If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
data SetupIntentNextAction'NonNullable = SetupIntentNextAction'NonNullable
  { -- | cashapp_handle_redirect_or_display_qr_code:
    setupIntentNextAction'NonNullableCashappHandleRedirectOrDisplayQrCode :: (GHC.Maybe.Maybe PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode),
    -- | redirect_to_url:
    setupIntentNextAction'NonNullableRedirectToUrl :: (GHC.Maybe.Maybe SetupIntentNextActionRedirectToUrl),
    -- | type: Type of the next action to perform, one of \`redirect_to_url\`, \`use_stripe_sdk\`, \`alipay_handle_redirect\`, \`oxxo_display_details\`, or \`verify_with_microdeposits\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentNextAction'NonNullableType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | use_stripe_sdk: When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
    setupIntentNextAction'NonNullableUseStripeSdk :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | verify_with_microdeposits:
    setupIntentNextAction'NonNullableVerifyWithMicrodeposits :: (GHC.Maybe.Maybe SetupIntentNextActionVerifyWithMicrodeposits)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentNextAction'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp_handle_redirect_or_display_qr_code" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableCashappHandleRedirectOrDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect_to_url" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableRedirectToUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_stripe_sdk" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableUseStripeSdk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_with_microdeposits" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableVerifyWithMicrodeposits obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp_handle_redirect_or_display_qr_code" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableCashappHandleRedirectOrDisplayQrCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("redirect_to_url" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableRedirectToUrl obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("use_stripe_sdk" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableUseStripeSdk obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verify_with_microdeposits" Data.Aeson.Types.ToJSON..=)) (setupIntentNextAction'NonNullableVerifyWithMicrodeposits obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentNextAction'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentNextAction'NonNullable" (\obj -> ((((GHC.Base.pure SetupIntentNextAction'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashapp_handle_redirect_or_display_qr_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "redirect_to_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "use_stripe_sdk")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verify_with_microdeposits"))

-- | Create a new 'SetupIntentNextAction'NonNullable' with all required fields.
mkSetupIntentNextAction'NonNullable :: SetupIntentNextAction'NonNullable
mkSetupIntentNextAction'NonNullable =
  SetupIntentNextAction'NonNullable
    { setupIntentNextAction'NonNullableCashappHandleRedirectOrDisplayQrCode = GHC.Maybe.Nothing,
      setupIntentNextAction'NonNullableRedirectToUrl = GHC.Maybe.Nothing,
      setupIntentNextAction'NonNullableType = GHC.Maybe.Nothing,
      setupIntentNextAction'NonNullableUseStripeSdk = GHC.Maybe.Nothing,
      setupIntentNextAction'NonNullableVerifyWithMicrodeposits = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.setup_intent.properties.on_behalf_of.anyOf@ in the specification.
--
-- The account (if any) for which the setup is intended.
data SetupIntentOnBehalfOf'NonNullableVariants
  = SetupIntentOnBehalfOf'NonNullableText Data.Text.Internal.Text
  | SetupIntentOnBehalfOf'NonNullableAccount Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentOnBehalfOf'NonNullableVariants where
  toJSON (SetupIntentOnBehalfOf'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentOnBehalfOf'NonNullableAccount a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentOnBehalfOf'NonNullableVariants where
  parseJSON val = case (SetupIntentOnBehalfOf'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentOnBehalfOf'NonNullableAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.setup_intent.properties.payment_method.anyOf@ in the specification.
--
-- ID of the payment method used with this SetupIntent.
data SetupIntentPaymentMethod'NonNullableVariants
  = SetupIntentPaymentMethod'NonNullableText Data.Text.Internal.Text
  | SetupIntentPaymentMethod'NonNullablePaymentMethod PaymentMethod
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethod'NonNullableVariants where
  toJSON (SetupIntentPaymentMethod'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentPaymentMethod'NonNullablePaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethod'NonNullableVariants where
  parseJSON val = case (SetupIntentPaymentMethod'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentPaymentMethod'NonNullablePaymentMethod Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.setup_intent.properties.payment_method_configuration_details.anyOf@ in the specification.
--
-- Information about the payment method configuration used for this Setup Intent.
data SetupIntentPaymentMethodConfigurationDetails'NonNullable = SetupIntentPaymentMethodConfigurationDetails'NonNullable
  { -- | id: ID of the payment method configuration used.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentPaymentMethodConfigurationDetails'NonNullableId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | parent: ID of the parent payment method configuration used.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentPaymentMethodConfigurationDetails'NonNullableParent :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodConfigurationDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodConfigurationDetails'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodConfigurationDetails'NonNullableParent obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodConfigurationDetails'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("parent" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodConfigurationDetails'NonNullableParent obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodConfigurationDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentPaymentMethodConfigurationDetails'NonNullable" (\obj -> (GHC.Base.pure SetupIntentPaymentMethodConfigurationDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "parent"))

-- | Create a new 'SetupIntentPaymentMethodConfigurationDetails'NonNullable' with all required fields.
mkSetupIntentPaymentMethodConfigurationDetails'NonNullable :: SetupIntentPaymentMethodConfigurationDetails'NonNullable
mkSetupIntentPaymentMethodConfigurationDetails'NonNullable =
  SetupIntentPaymentMethodConfigurationDetails'NonNullable
    { setupIntentPaymentMethodConfigurationDetails'NonNullableId = GHC.Maybe.Nothing,
      setupIntentPaymentMethodConfigurationDetails'NonNullableParent = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf@ in the specification.
--
-- Payment method-specific configuration for this SetupIntent.
data SetupIntentPaymentMethodOptions'NonNullable = SetupIntentPaymentMethodOptions'NonNullable
  { -- | acss_debit
    setupIntentPaymentMethodOptions'NonNullableAcssDebit :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullableAcssDebit'),
    -- | card:
    setupIntentPaymentMethodOptions'NonNullableCard :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptionsCard),
    -- | link
    setupIntentPaymentMethodOptions'NonNullableLink :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullableLink'),
    -- | paypal
    setupIntentPaymentMethodOptions'NonNullablePaypal :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullablePaypal'),
    -- | sepa_debit
    setupIntentPaymentMethodOptions'NonNullableSepaDebit :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullableSepaDebit'),
    -- | us_bank_account
    setupIntentPaymentMethodOptions'NonNullableUsBankAccount :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullableUsBankAccount')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableLink obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paypal" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullablePaypal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableSepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableUsBankAccount obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableLink obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paypal" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullablePaypal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableSepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableUsBankAccount obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentPaymentMethodOptions'NonNullable" (\obj -> (((((GHC.Base.pure SetupIntentPaymentMethodOptions'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "link")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "paypal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us_bank_account"))

-- | Create a new 'SetupIntentPaymentMethodOptions'NonNullable' with all required fields.
mkSetupIntentPaymentMethodOptions'NonNullable :: SetupIntentPaymentMethodOptions'NonNullable
mkSetupIntentPaymentMethodOptions'NonNullable =
  SetupIntentPaymentMethodOptions'NonNullable
    { setupIntentPaymentMethodOptions'NonNullableAcssDebit = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullableCard = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullableLink = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullablePaypal = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullableSepaDebit = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullableUsBankAccount = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.acss_debit.anyOf@ in the specification.
data SetupIntentPaymentMethodOptions'NonNullableAcssDebit' = SetupIntentPaymentMethodOptions'NonNullableAcssDebit'
  { -- | currency: Currency supported by the bank account
    setupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullable)),
    -- | mandate_options:
    setupIntentPaymentMethodOptions'NonNullableAcssDebit'MandateOptions :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit),
    -- | verification_method: Bank account verification method.
    setupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullableAcssDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableAcssDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableAcssDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullableAcssDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentPaymentMethodOptions'NonNullableAcssDebit'" (\obj -> ((GHC.Base.pure SetupIntentPaymentMethodOptions'NonNullableAcssDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'SetupIntentPaymentMethodOptions'NonNullableAcssDebit'' with all required fields.
mkSetupIntentPaymentMethodOptions'NonNullableAcssDebit' :: SetupIntentPaymentMethodOptions'NonNullableAcssDebit'
mkSetupIntentPaymentMethodOptions'NonNullableAcssDebit' =
  SetupIntentPaymentMethodOptions'NonNullableAcssDebit'
    { setupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullableAcssDebit'MandateOptions = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.acss_debit.anyOf.properties.currency@ in the specification.
--
-- Currency supported by the bank account
data SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"cad"@
    SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableEnumCad
  | -- | Represents the JSON value @"usd"@
    SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableEnumUsd
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullable where
  toJSON (SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableOther val) = val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableEnumCad) = "cad"
  toJSON (SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableEnumUsd) = "usd"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "cad" -> SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableEnumCad
            | val GHC.Classes.== "usd" -> SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableEnumUsd
            | GHC.Base.otherwise -> SetupIntentPaymentMethodOptions'NonNullableAcssDebit'Currency'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.acss_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod' where
  toJSON (SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Other val) = val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "automatic" -> SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumAutomatic
            | val GHC.Classes.== "instant" -> SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumInstant
            | val GHC.Classes.== "microdeposits" -> SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'EnumMicrodeposits
            | GHC.Base.otherwise -> SetupIntentPaymentMethodOptions'NonNullableAcssDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.link.anyOf@ in the specification.
data SetupIntentPaymentMethodOptions'NonNullableLink' = SetupIntentPaymentMethodOptions'NonNullableLink'
  { -- | verification_method: Bank account verification method.
    setupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullableLink' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullableLink' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentPaymentMethodOptions'NonNullableLink'" (\obj -> GHC.Base.pure SetupIntentPaymentMethodOptions'NonNullableLink' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'SetupIntentPaymentMethodOptions'NonNullableLink'' with all required fields.
mkSetupIntentPaymentMethodOptions'NonNullableLink' :: SetupIntentPaymentMethodOptions'NonNullableLink'
mkSetupIntentPaymentMethodOptions'NonNullableLink' = SetupIntentPaymentMethodOptions'NonNullableLink' {setupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod = GHC.Maybe.Nothing}

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.link.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod' where
  toJSON (SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Other val) = val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumInstant) = "instant"
  toJSON (SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "automatic" -> SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumAutomatic
            | val GHC.Classes.== "instant" -> SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumInstant
            | val GHC.Classes.== "microdeposits" -> SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'EnumMicrodeposits
            | GHC.Base.otherwise -> SetupIntentPaymentMethodOptions'NonNullableLink'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.paypal.anyOf@ in the specification.
data SetupIntentPaymentMethodOptions'NonNullablePaypal' = SetupIntentPaymentMethodOptions'NonNullablePaypal'
  { -- | billing_agreement_id: The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    setupIntentPaymentMethodOptions'NonNullablePaypal'BillingAgreementId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | verification_method: Bank account verification method.
    setupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullablePaypal' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_agreement_id" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullablePaypal'BillingAgreementId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_agreement_id" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullablePaypal'BillingAgreementId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullablePaypal' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentPaymentMethodOptions'NonNullablePaypal'" (\obj -> (GHC.Base.pure SetupIntentPaymentMethodOptions'NonNullablePaypal' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "billing_agreement_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'SetupIntentPaymentMethodOptions'NonNullablePaypal'' with all required fields.
mkSetupIntentPaymentMethodOptions'NonNullablePaypal' :: SetupIntentPaymentMethodOptions'NonNullablePaypal'
mkSetupIntentPaymentMethodOptions'NonNullablePaypal' =
  SetupIntentPaymentMethodOptions'NonNullablePaypal'
    { setupIntentPaymentMethodOptions'NonNullablePaypal'BillingAgreementId = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.paypal.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod' where
  toJSON (SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Other val) = val
  toJSON (SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumInstant) = "instant"
  toJSON (SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "automatic" -> SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumAutomatic
            | val GHC.Classes.== "instant" -> SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumInstant
            | val GHC.Classes.== "microdeposits" -> SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'EnumMicrodeposits
            | GHC.Base.otherwise -> SetupIntentPaymentMethodOptions'NonNullablePaypal'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.sepa_debit.anyOf@ in the specification.
data SetupIntentPaymentMethodOptions'NonNullableSepaDebit' = SetupIntentPaymentMethodOptions'NonNullableSepaDebit'
  { -- | mandate_options:
    setupIntentPaymentMethodOptions'NonNullableSepaDebit'MandateOptions :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit),
    -- | verification_method: Bank account verification method.
    setupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullableSepaDebit' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableSepaDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableSepaDebit'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullableSepaDebit' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentPaymentMethodOptions'NonNullableSepaDebit'" (\obj -> (GHC.Base.pure SetupIntentPaymentMethodOptions'NonNullableSepaDebit' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'SetupIntentPaymentMethodOptions'NonNullableSepaDebit'' with all required fields.
mkSetupIntentPaymentMethodOptions'NonNullableSepaDebit' :: SetupIntentPaymentMethodOptions'NonNullableSepaDebit'
mkSetupIntentPaymentMethodOptions'NonNullableSepaDebit' =
  SetupIntentPaymentMethodOptions'NonNullableSepaDebit'
    { setupIntentPaymentMethodOptions'NonNullableSepaDebit'MandateOptions = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.sepa_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod' where
  toJSON (SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Other val) = val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumInstant) = "instant"
  toJSON (SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "automatic" -> SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumAutomatic
            | val GHC.Classes.== "instant" -> SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumInstant
            | val GHC.Classes.== "microdeposits" -> SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'EnumMicrodeposits
            | GHC.Base.otherwise -> SetupIntentPaymentMethodOptions'NonNullableSepaDebit'VerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.us_bank_account.anyOf@ in the specification.
data SetupIntentPaymentMethodOptions'NonNullableUsBankAccount' = SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'
  { -- | financial_connections:
    setupIntentPaymentMethodOptions'NonNullableUsBankAccount'FinancialConnections :: (GHC.Maybe.Maybe LinkedAccountOptionsUsBankAccount),
    -- | mandate_options:
    setupIntentPaymentMethodOptions'NonNullableUsBankAccount'MandateOptions :: (GHC.Maybe.Maybe PaymentMethodOptionsUsBankAccountMandateOptions),
    -- | verification_method: Bank account verification method.
    setupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod :: (GHC.Maybe.Maybe SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullableUsBankAccount' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_connections" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableUsBankAccount'FinancialConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableUsBankAccount'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_connections" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableUsBankAccount'FinancialConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableUsBankAccount'MandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (setupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullableUsBankAccount' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'" (\obj -> ((GHC.Base.pure SetupIntentPaymentMethodOptions'NonNullableUsBankAccount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "financial_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'' with all required fields.
mkSetupIntentPaymentMethodOptions'NonNullableUsBankAccount' :: SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'
mkSetupIntentPaymentMethodOptions'NonNullableUsBankAccount' =
  SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'
    { setupIntentPaymentMethodOptions'NonNullableUsBankAccount'FinancialConnections = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullableUsBankAccount'MandateOptions = GHC.Maybe.Nothing,
      setupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.payment_method_options.anyOf.properties.us_bank_account.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod' where
  toJSON (SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Other val) = val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumAutomatic) = "automatic"
  toJSON (SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumInstant) = "instant"
  toJSON (SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "automatic" -> SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumAutomatic
            | val GHC.Classes.== "instant" -> SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumInstant
            | val GHC.Classes.== "microdeposits" -> SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'EnumMicrodeposits
            | GHC.Base.otherwise -> SetupIntentPaymentMethodOptions'NonNullableUsBankAccount'VerificationMethod'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.setup_intent.properties.single_use_mandate.anyOf@ in the specification.
--
-- ID of the single_use Mandate generated by the SetupIntent.
data SetupIntentSingleUseMandate'NonNullableVariants
  = SetupIntentSingleUseMandate'NonNullableText Data.Text.Internal.Text
  | SetupIntentSingleUseMandate'NonNullableMandate Mandate
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentSingleUseMandate'NonNullableVariants where
  toJSON (SetupIntentSingleUseMandate'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupIntentSingleUseMandate'NonNullableMandate a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentSingleUseMandate'NonNullableVariants where
  parseJSON val = case (SetupIntentSingleUseMandate'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupIntentSingleUseMandate'NonNullableMandate Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.setup_intent.properties.status@ in the specification.
--
-- [Status](https:\/\/stripe.com\/docs\/payments\/intents\#intent-statuses) of this SetupIntent, one of \`requires_payment_method\`, \`requires_confirmation\`, \`requires_action\`, \`processing\`, \`canceled\`, or \`succeeded\`.
data SetupIntentStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SetupIntentStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SetupIntentStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"canceled"@
    SetupIntentStatus'EnumCanceled
  | -- | Represents the JSON value @"processing"@
    SetupIntentStatus'EnumProcessing
  | -- | Represents the JSON value @"requires_action"@
    SetupIntentStatus'EnumRequiresAction
  | -- | Represents the JSON value @"requires_confirmation"@
    SetupIntentStatus'EnumRequiresConfirmation
  | -- | Represents the JSON value @"requires_payment_method"@
    SetupIntentStatus'EnumRequiresPaymentMethod
  | -- | Represents the JSON value @"succeeded"@
    SetupIntentStatus'EnumSucceeded
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupIntentStatus' where
  toJSON (SetupIntentStatus'Other val) = val
  toJSON (SetupIntentStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SetupIntentStatus'EnumCanceled) = "canceled"
  toJSON (SetupIntentStatus'EnumProcessing) = "processing"
  toJSON (SetupIntentStatus'EnumRequiresAction) = "requires_action"
  toJSON (SetupIntentStatus'EnumRequiresConfirmation) = "requires_confirmation"
  toJSON (SetupIntentStatus'EnumRequiresPaymentMethod) = "requires_payment_method"
  toJSON (SetupIntentStatus'EnumSucceeded) = "succeeded"

instance Data.Aeson.Types.FromJSON.FromJSON SetupIntentStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "canceled" -> SetupIntentStatus'EnumCanceled
            | val GHC.Classes.== "processing" -> SetupIntentStatus'EnumProcessing
            | val GHC.Classes.== "requires_action" -> SetupIntentStatus'EnumRequiresAction
            | val GHC.Classes.== "requires_confirmation" -> SetupIntentStatus'EnumRequiresConfirmation
            | val GHC.Classes.== "requires_payment_method" -> SetupIntentStatus'EnumRequiresPaymentMethod
            | val GHC.Classes.== "succeeded" -> SetupIntentStatus'EnumSucceeded
            | GHC.Base.otherwise -> SetupIntentStatus'Other val
      )
