{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Radar_EarlyFraudWarning
module StripeAPI.Types.Radar_EarlyFraudWarning where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Charge
import {-# SOURCE #-} StripeAPI.Types.PaymentIntent
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.radar.early_fraud_warning@ in the specification.
--
-- An early fraud warning indicates that the card issuer has notified us that a
-- charge may be fraudulent.
--
-- Related guide: [Early fraud warnings](https:\/\/stripe.com\/docs\/disputes\/measuring\#early-fraud-warnings)
data Radar'earlyFraudWarning = Radar'earlyFraudWarning
  { -- | actionable: An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.
    radar'earlyFraudWarningActionable :: GHC.Types.Bool,
    -- | charge: ID of the charge this early fraud warning is for, optionally expanded.
    radar'earlyFraudWarningCharge :: Radar'earlyFraudWarningCharge'Variants,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    radar'earlyFraudWarningCreated :: GHC.Types.Int,
    -- | fraud_type: The type of fraud labelled by the issuer. One of \`card_never_received\`, \`fraudulent_card_application\`, \`made_with_counterfeit_card\`, \`made_with_lost_card\`, \`made_with_stolen_card\`, \`misc\`, \`unauthorized_use_of_card\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    radar'earlyFraudWarningFraudType :: Data.Text.Internal.Text,
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    radar'earlyFraudWarningId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    radar'earlyFraudWarningLivemode :: GHC.Types.Bool,
    -- | payment_intent: ID of the Payment Intent this early fraud warning is for, optionally expanded.
    radar'earlyFraudWarningPaymentIntent :: (GHC.Maybe.Maybe Radar'earlyFraudWarningPaymentIntent'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Radar'earlyFraudWarning where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["actionable" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningActionable obj] : ["charge" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningCharge obj] : ["created" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningCreated obj] : ["fraud_type" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningFraudType obj] : ["id" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningId obj] : ["livemode" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (radar'earlyFraudWarningPaymentIntent obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "radar.early_fraud_warning"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["actionable" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningActionable obj] : ["charge" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningCharge obj] : ["created" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningCreated obj] : ["fraud_type" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningFraudType obj] : ["id" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningId obj] : ["livemode" Data.Aeson.Types.ToJSON..= radar'earlyFraudWarningLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (radar'earlyFraudWarningPaymentIntent obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "radar.early_fraud_warning"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Radar'earlyFraudWarning where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Radar'earlyFraudWarning" (\obj -> ((((((GHC.Base.pure Radar'earlyFraudWarning GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "actionable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fraud_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_intent"))

-- | Create a new 'Radar'earlyFraudWarning' with all required fields.
mkRadar'earlyFraudWarning ::
  -- | 'radar'earlyFraudWarningActionable'
  GHC.Types.Bool ->
  -- | 'radar'earlyFraudWarningCharge'
  Radar'earlyFraudWarningCharge'Variants ->
  -- | 'radar'earlyFraudWarningCreated'
  GHC.Types.Int ->
  -- | 'radar'earlyFraudWarningFraudType'
  Data.Text.Internal.Text ->
  -- | 'radar'earlyFraudWarningId'
  Data.Text.Internal.Text ->
  -- | 'radar'earlyFraudWarningLivemode'
  GHC.Types.Bool ->
  Radar'earlyFraudWarning
mkRadar'earlyFraudWarning radar'earlyFraudWarningActionable radar'earlyFraudWarningCharge radar'earlyFraudWarningCreated radar'earlyFraudWarningFraudType radar'earlyFraudWarningId radar'earlyFraudWarningLivemode =
  Radar'earlyFraudWarning
    { radar'earlyFraudWarningActionable = radar'earlyFraudWarningActionable,
      radar'earlyFraudWarningCharge = radar'earlyFraudWarningCharge,
      radar'earlyFraudWarningCreated = radar'earlyFraudWarningCreated,
      radar'earlyFraudWarningFraudType = radar'earlyFraudWarningFraudType,
      radar'earlyFraudWarningId = radar'earlyFraudWarningId,
      radar'earlyFraudWarningLivemode = radar'earlyFraudWarningLivemode,
      radar'earlyFraudWarningPaymentIntent = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.radar.early_fraud_warning.properties.charge.anyOf@ in the specification.
--
-- ID of the charge this early fraud warning is for, optionally expanded.
data Radar'earlyFraudWarningCharge'Variants
  = Radar'earlyFraudWarningCharge'Text Data.Text.Internal.Text
  | Radar'earlyFraudWarningCharge'Charge Charge
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Radar'earlyFraudWarningCharge'Variants where
  toJSON (Radar'earlyFraudWarningCharge'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Radar'earlyFraudWarningCharge'Charge a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Radar'earlyFraudWarningCharge'Variants where
  parseJSON val = case (Radar'earlyFraudWarningCharge'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Radar'earlyFraudWarningCharge'Charge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.radar.early_fraud_warning.properties.payment_intent.anyOf@ in the specification.
--
-- ID of the Payment Intent this early fraud warning is for, optionally expanded.
data Radar'earlyFraudWarningPaymentIntent'Variants
  = Radar'earlyFraudWarningPaymentIntent'Text Data.Text.Internal.Text
  | Radar'earlyFraudWarningPaymentIntent'PaymentIntent PaymentIntent
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Radar'earlyFraudWarningPaymentIntent'Variants where
  toJSON (Radar'earlyFraudWarningPaymentIntent'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Radar'earlyFraudWarningPaymentIntent'PaymentIntent a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Radar'earlyFraudWarningPaymentIntent'Variants where
  parseJSON val = case (Radar'earlyFraudWarningPaymentIntent'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Radar'earlyFraudWarningPaymentIntent'PaymentIntent Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
