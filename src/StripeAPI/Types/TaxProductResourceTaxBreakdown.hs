{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TaxProductResourceTaxBreakdown
module StripeAPI.Types.TaxProductResourceTaxBreakdown where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.TaxProductResourceTaxRateDetails
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax_product_resource_tax_breakdown@ in the specification.
data TaxProductResourceTaxBreakdown = TaxProductResourceTaxBreakdown
  { -- | amount: The amount of tax, in integer cents.
    taxProductResourceTaxBreakdownAmount :: GHC.Types.Int,
    -- | inclusive: Specifies whether the tax amount is included in the line item amount.
    taxProductResourceTaxBreakdownInclusive :: GHC.Types.Bool,
    -- | tax_rate_details:
    taxProductResourceTaxBreakdownTaxRateDetails :: TaxProductResourceTaxRateDetails,
    -- | taxability_reason: The reasoning behind this tax, for example, if the product is tax exempt. We might extend the possible values for this field to support new tax rules.
    taxProductResourceTaxBreakdownTaxabilityReason :: TaxProductResourceTaxBreakdownTaxabilityReason',
    -- | taxable_amount: The amount on which tax is calculated, in integer cents.
    taxProductResourceTaxBreakdownTaxableAmount :: GHC.Types.Int
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxBreakdown where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownAmount obj] : ["inclusive" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownInclusive obj] : ["tax_rate_details" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownTaxRateDetails obj] : ["taxability_reason" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownTaxabilityReason obj] : ["taxable_amount" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownTaxableAmount obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownAmount obj] : ["inclusive" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownInclusive obj] : ["tax_rate_details" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownTaxRateDetails obj] : ["taxability_reason" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownTaxabilityReason obj] : ["taxable_amount" Data.Aeson.Types.ToJSON..= taxProductResourceTaxBreakdownTaxableAmount obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxBreakdown where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxProductResourceTaxBreakdown" (\obj -> ((((GHC.Base.pure TaxProductResourceTaxBreakdown GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "inclusive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_rate_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "taxability_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "taxable_amount"))

-- | Create a new 'TaxProductResourceTaxBreakdown' with all required fields.
mkTaxProductResourceTaxBreakdown ::
  -- | 'taxProductResourceTaxBreakdownAmount'
  GHC.Types.Int ->
  -- | 'taxProductResourceTaxBreakdownInclusive'
  GHC.Types.Bool ->
  -- | 'taxProductResourceTaxBreakdownTaxRateDetails'
  TaxProductResourceTaxRateDetails ->
  -- | 'taxProductResourceTaxBreakdownTaxabilityReason'
  TaxProductResourceTaxBreakdownTaxabilityReason' ->
  -- | 'taxProductResourceTaxBreakdownTaxableAmount'
  GHC.Types.Int ->
  TaxProductResourceTaxBreakdown
mkTaxProductResourceTaxBreakdown taxProductResourceTaxBreakdownAmount taxProductResourceTaxBreakdownInclusive taxProductResourceTaxBreakdownTaxRateDetails taxProductResourceTaxBreakdownTaxabilityReason taxProductResourceTaxBreakdownTaxableAmount =
  TaxProductResourceTaxBreakdown
    { taxProductResourceTaxBreakdownAmount = taxProductResourceTaxBreakdownAmount,
      taxProductResourceTaxBreakdownInclusive = taxProductResourceTaxBreakdownInclusive,
      taxProductResourceTaxBreakdownTaxRateDetails = taxProductResourceTaxBreakdownTaxRateDetails,
      taxProductResourceTaxBreakdownTaxabilityReason = taxProductResourceTaxBreakdownTaxabilityReason,
      taxProductResourceTaxBreakdownTaxableAmount = taxProductResourceTaxBreakdownTaxableAmount
    }

-- | Defines the enum schema located at @components.schemas.tax_product_resource_tax_breakdown.properties.taxability_reason@ in the specification.
--
-- The reasoning behind this tax, for example, if the product is tax exempt. We might extend the possible values for this field to support new tax rules.
data TaxProductResourceTaxBreakdownTaxabilityReason'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    TaxProductResourceTaxBreakdownTaxabilityReason'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    TaxProductResourceTaxBreakdownTaxabilityReason'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"customer_exempt"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumCustomerExempt
  | -- | Represents the JSON value @"not_collecting"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumNotCollecting
  | -- | Represents the JSON value @"not_subject_to_tax"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumNotSubjectToTax
  | -- | Represents the JSON value @"not_supported"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumNotSupported
  | -- | Represents the JSON value @"portion_product_exempt"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumPortionProductExempt
  | -- | Represents the JSON value @"portion_reduced_rated"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumPortionReducedRated
  | -- | Represents the JSON value @"portion_standard_rated"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumPortionStandardRated
  | -- | Represents the JSON value @"product_exempt"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumProductExempt
  | -- | Represents the JSON value @"product_exempt_holiday"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumProductExemptHoliday
  | -- | Represents the JSON value @"proportionally_rated"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumProportionallyRated
  | -- | Represents the JSON value @"reduced_rated"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumReducedRated
  | -- | Represents the JSON value @"reverse_charge"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumReverseCharge
  | -- | Represents the JSON value @"standard_rated"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumStandardRated
  | -- | Represents the JSON value @"taxable_basis_reduced"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumTaxableBasisReduced
  | -- | Represents the JSON value @"zero_rated"@
    TaxProductResourceTaxBreakdownTaxabilityReason'EnumZeroRated
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxBreakdownTaxabilityReason' where
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'Other val) = val
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumCustomerExempt) = "customer_exempt"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumNotCollecting) = "not_collecting"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumNotSubjectToTax) = "not_subject_to_tax"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumNotSupported) = "not_supported"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumPortionProductExempt) = "portion_product_exempt"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumPortionReducedRated) = "portion_reduced_rated"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumPortionStandardRated) = "portion_standard_rated"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumProductExempt) = "product_exempt"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumProductExemptHoliday) = "product_exempt_holiday"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumProportionallyRated) = "proportionally_rated"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumReducedRated) = "reduced_rated"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumReverseCharge) = "reverse_charge"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumStandardRated) = "standard_rated"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumTaxableBasisReduced) = "taxable_basis_reduced"
  toJSON (TaxProductResourceTaxBreakdownTaxabilityReason'EnumZeroRated) = "zero_rated"

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxBreakdownTaxabilityReason' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "customer_exempt" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumCustomerExempt
            | val GHC.Classes.== "not_collecting" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumNotCollecting
            | val GHC.Classes.== "not_subject_to_tax" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumNotSubjectToTax
            | val GHC.Classes.== "not_supported" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumNotSupported
            | val GHC.Classes.== "portion_product_exempt" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumPortionProductExempt
            | val GHC.Classes.== "portion_reduced_rated" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumPortionReducedRated
            | val GHC.Classes.== "portion_standard_rated" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumPortionStandardRated
            | val GHC.Classes.== "product_exempt" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumProductExempt
            | val GHC.Classes.== "product_exempt_holiday" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumProductExemptHoliday
            | val GHC.Classes.== "proportionally_rated" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumProportionallyRated
            | val GHC.Classes.== "reduced_rated" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumReducedRated
            | val GHC.Classes.== "reverse_charge" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumReverseCharge
            | val GHC.Classes.== "standard_rated" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumStandardRated
            | val GHC.Classes.== "taxable_basis_reduced" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumTaxableBasisReduced
            | val GHC.Classes.== "zero_rated" -> TaxProductResourceTaxBreakdownTaxabilityReason'EnumZeroRated
            | GHC.Base.otherwise -> TaxProductResourceTaxBreakdownTaxabilityReason'Other val
      )
