{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Issuing_Authorization
module StripeAPI.Types.Issuing_Authorization where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationMerchantData
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationRequest
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationVerificationData
import {-# SOURCE #-} StripeAPI.Types.Issuing_Card
import {-# SOURCE #-} StripeAPI.Types.Issuing_Cardholder
import {-# SOURCE #-} StripeAPI.Types.Issuing_Transaction
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing.authorization@ in the specification.
--
-- When an [issued card](https:\/\/stripe.com\/docs\/issuing) is used to make a purchase, an Issuing \`Authorization\`
-- object is created. [Authorizations](https:\/\/stripe.com\/docs\/issuing\/authorizations) must be approved for the
-- purchase to be completed successfully.
--
-- Related guide: [Issued Card Authorizations](https:\/\/stripe.com\/docs\/issuing\/authorizations).
data Issuing'authorization
  = Issuing'authorization
      { -- | approved: Whether the authorization has been approved.
        issuing'authorizationApproved :: GHC.Types.Bool,
        -- | authorization_method: How the card details were provided.
        issuing'authorizationAuthorizationMethod :: Issuing'authorizationAuthorizationMethod',
        -- | authorized_amount: The amount that has been authorized. This will be \`0\` when the object is created, and increase after it has been approved.
        issuing'authorizationAuthorizedAmount :: GHC.Types.Int,
        -- | authorized_currency: The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        issuing'authorizationAuthorizedCurrency :: Data.Text.Internal.Text,
        -- | balance_transactions: List of balance transactions associated with this authorization.
        issuing'authorizationBalanceTransactions :: ([BalanceTransaction]),
        -- | card: You can [create physical or virtual cards](https:\/\/stripe.com\/docs\/issuing\/cards) that are issued to cardholders.
        issuing'authorizationCard :: Issuing'card,
        -- | cardholder: The cardholder to whom this authorization belongs.
        issuing'authorizationCardholder :: (GHC.Maybe.Maybe Issuing'authorizationCardholder'Variants),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        issuing'authorizationCreated :: GHC.Types.Int,
        -- | held_amount: The amount the authorization is expected to be in \`held_currency\`. When Stripe holds funds from you, this is the amount reserved for the authorization. This will be \`0\` when the object is created, and increase after it has been approved. For multi-currency transactions, \`held_amount\` can be used to determine the expected exchange rate.
        issuing'authorizationHeldAmount :: GHC.Types.Int,
        -- | held_currency: The currency of the [held amount](https:\/\/stripe.com\/docs\/api\#issuing_authorization_object-held_amount). This will always be the card currency.
        issuing'authorizationHeldCurrency :: Data.Text.Internal.Text,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuing'authorizationId :: Data.Text.Internal.Text,
        -- | is_held_amount_controllable: If set \`true\`, you may provide [held_amount](https:\/\/stripe.com\/docs\/api\/issuing\/authorizations\/approve\#approve_issuing_authorization-held_amount) to control how much to hold for the authorization.
        issuing'authorizationIsHeldAmountControllable :: GHC.Types.Bool,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        issuing'authorizationLivemode :: GHC.Types.Bool,
        -- | merchant_data:
        issuing'authorizationMerchantData :: IssuingAuthorizationMerchantData,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        issuing'authorizationMetadata :: Data.Aeson.Types.Internal.Object,
        -- | pending_authorized_amount: The amount the user is requesting to be authorized. This field will only be non-zero during an \`issuing.authorization.request\` webhook.
        issuing'authorizationPendingAuthorizedAmount :: GHC.Types.Int,
        -- | pending_held_amount: The additional amount Stripe will hold if the authorization is approved. This field will only be non-zero during an \`issuing.authorization.request\` webhook.
        issuing'authorizationPendingHeldAmount :: GHC.Types.Int,
        -- | request_history: History of every time the authorization was approved\/denied (whether approved\/denied by you directly, or by Stripe based on your authorization_controls). If the merchant changes the authorization by performing an [incremental authorization or partial capture](https:\/\/stripe.com\/docs\/issuing\/authorizations\/special_scenarios\#incremental-authorizations), you can look at request_history to see the previous states of the authorization.
        issuing'authorizationRequestHistory :: ([IssuingAuthorizationRequest]),
        -- | status: The current status of the authorization in its lifecycle.
        issuing'authorizationStatus :: Issuing'authorizationStatus',
        -- | transactions: List of [transactions](https:\/\/stripe.com\/docs\/api\/issuing\/transactions) associated with this authorization.
        issuing'authorizationTransactions :: ([Issuing'transaction]),
        -- | verification_data:
        issuing'authorizationVerificationData :: IssuingAuthorizationVerificationData,
        -- | wallet_provider: What, if any, digital wallet was used for this authorization. One of \`apple_pay\`, \`google_pay\`, or \`samsung_pay\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuing'authorizationWalletProvider :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'authorization where
  toJSON obj = Data.Aeson.Types.Internal.object ("approved" Data.Aeson.Types.ToJSON..= issuing'authorizationApproved obj : "authorization_method" Data.Aeson.Types.ToJSON..= issuing'authorizationAuthorizationMethod obj : "authorized_amount" Data.Aeson.Types.ToJSON..= issuing'authorizationAuthorizedAmount obj : "authorized_currency" Data.Aeson.Types.ToJSON..= issuing'authorizationAuthorizedCurrency obj : "balance_transactions" Data.Aeson.Types.ToJSON..= issuing'authorizationBalanceTransactions obj : "card" Data.Aeson.Types.ToJSON..= issuing'authorizationCard obj : "cardholder" Data.Aeson.Types.ToJSON..= issuing'authorizationCardholder obj : "created" Data.Aeson.Types.ToJSON..= issuing'authorizationCreated obj : "held_amount" Data.Aeson.Types.ToJSON..= issuing'authorizationHeldAmount obj : "held_currency" Data.Aeson.Types.ToJSON..= issuing'authorizationHeldCurrency obj : "id" Data.Aeson.Types.ToJSON..= issuing'authorizationId obj : "is_held_amount_controllable" Data.Aeson.Types.ToJSON..= issuing'authorizationIsHeldAmountControllable obj : "livemode" Data.Aeson.Types.ToJSON..= issuing'authorizationLivemode obj : "merchant_data" Data.Aeson.Types.ToJSON..= issuing'authorizationMerchantData obj : "metadata" Data.Aeson.Types.ToJSON..= issuing'authorizationMetadata obj : "pending_authorized_amount" Data.Aeson.Types.ToJSON..= issuing'authorizationPendingAuthorizedAmount obj : "pending_held_amount" Data.Aeson.Types.ToJSON..= issuing'authorizationPendingHeldAmount obj : "request_history" Data.Aeson.Types.ToJSON..= issuing'authorizationRequestHistory obj : "status" Data.Aeson.Types.ToJSON..= issuing'authorizationStatus obj : "transactions" Data.Aeson.Types.ToJSON..= issuing'authorizationTransactions obj : "verification_data" Data.Aeson.Types.ToJSON..= issuing'authorizationVerificationData obj : "wallet_provider" Data.Aeson.Types.ToJSON..= issuing'authorizationWalletProvider obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.authorization" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("approved" Data.Aeson.Types.ToJSON..= issuing'authorizationApproved obj) GHC.Base.<> (("authorization_method" Data.Aeson.Types.ToJSON..= issuing'authorizationAuthorizationMethod obj) GHC.Base.<> (("authorized_amount" Data.Aeson.Types.ToJSON..= issuing'authorizationAuthorizedAmount obj) GHC.Base.<> (("authorized_currency" Data.Aeson.Types.ToJSON..= issuing'authorizationAuthorizedCurrency obj) GHC.Base.<> (("balance_transactions" Data.Aeson.Types.ToJSON..= issuing'authorizationBalanceTransactions obj) GHC.Base.<> (("card" Data.Aeson.Types.ToJSON..= issuing'authorizationCard obj) GHC.Base.<> (("cardholder" Data.Aeson.Types.ToJSON..= issuing'authorizationCardholder obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= issuing'authorizationCreated obj) GHC.Base.<> (("held_amount" Data.Aeson.Types.ToJSON..= issuing'authorizationHeldAmount obj) GHC.Base.<> (("held_currency" Data.Aeson.Types.ToJSON..= issuing'authorizationHeldCurrency obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= issuing'authorizationId obj) GHC.Base.<> (("is_held_amount_controllable" Data.Aeson.Types.ToJSON..= issuing'authorizationIsHeldAmountControllable obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= issuing'authorizationLivemode obj) GHC.Base.<> (("merchant_data" Data.Aeson.Types.ToJSON..= issuing'authorizationMerchantData obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= issuing'authorizationMetadata obj) GHC.Base.<> (("pending_authorized_amount" Data.Aeson.Types.ToJSON..= issuing'authorizationPendingAuthorizedAmount obj) GHC.Base.<> (("pending_held_amount" Data.Aeson.Types.ToJSON..= issuing'authorizationPendingHeldAmount obj) GHC.Base.<> (("request_history" Data.Aeson.Types.ToJSON..= issuing'authorizationRequestHistory obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= issuing'authorizationStatus obj) GHC.Base.<> (("transactions" Data.Aeson.Types.ToJSON..= issuing'authorizationTransactions obj) GHC.Base.<> (("verification_data" Data.Aeson.Types.ToJSON..= issuing'authorizationVerificationData obj) GHC.Base.<> (("wallet_provider" Data.Aeson.Types.ToJSON..= issuing'authorizationWalletProvider obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.authorization")))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'authorization where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'authorization" (\obj -> (((((((((((((((((((((GHC.Base.pure Issuing'authorization GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "approved")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorized_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorized_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance_transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cardholder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "held_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "held_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_held_amount_controllable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_authorized_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_held_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "request_history")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verification_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wallet_provider"))

-- | Create a new 'Issuing'authorization' with all required fields.
mkIssuing'authorization ::
  -- | 'issuing'authorizationApproved'
  GHC.Types.Bool ->
  -- | 'issuing'authorizationAuthorizationMethod'
  Issuing'authorizationAuthorizationMethod' ->
  -- | 'issuing'authorizationAuthorizedAmount'
  GHC.Types.Int ->
  -- | 'issuing'authorizationAuthorizedCurrency'
  Data.Text.Internal.Text ->
  -- | 'issuing'authorizationBalanceTransactions'
  [BalanceTransaction] ->
  -- | 'issuing'authorizationCard'
  Issuing'card ->
  -- | 'issuing'authorizationCreated'
  GHC.Types.Int ->
  -- | 'issuing'authorizationHeldAmount'
  GHC.Types.Int ->
  -- | 'issuing'authorizationHeldCurrency'
  Data.Text.Internal.Text ->
  -- | 'issuing'authorizationId'
  Data.Text.Internal.Text ->
  -- | 'issuing'authorizationIsHeldAmountControllable'
  GHC.Types.Bool ->
  -- | 'issuing'authorizationLivemode'
  GHC.Types.Bool ->
  -- | 'issuing'authorizationMerchantData'
  IssuingAuthorizationMerchantData ->
  -- | 'issuing'authorizationMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'issuing'authorizationPendingAuthorizedAmount'
  GHC.Types.Int ->
  -- | 'issuing'authorizationPendingHeldAmount'
  GHC.Types.Int ->
  -- | 'issuing'authorizationRequestHistory'
  [IssuingAuthorizationRequest] ->
  -- | 'issuing'authorizationStatus'
  Issuing'authorizationStatus' ->
  -- | 'issuing'authorizationTransactions'
  [Issuing'transaction] ->
  -- | 'issuing'authorizationVerificationData'
  IssuingAuthorizationVerificationData ->
  Issuing'authorization
mkIssuing'authorization issuing'authorizationApproved issuing'authorizationAuthorizationMethod issuing'authorizationAuthorizedAmount issuing'authorizationAuthorizedCurrency issuing'authorizationBalanceTransactions issuing'authorizationCard issuing'authorizationCreated issuing'authorizationHeldAmount issuing'authorizationHeldCurrency issuing'authorizationId issuing'authorizationIsHeldAmountControllable issuing'authorizationLivemode issuing'authorizationMerchantData issuing'authorizationMetadata issuing'authorizationPendingAuthorizedAmount issuing'authorizationPendingHeldAmount issuing'authorizationRequestHistory issuing'authorizationStatus issuing'authorizationTransactions issuing'authorizationVerificationData =
  Issuing'authorization
    { issuing'authorizationApproved = issuing'authorizationApproved,
      issuing'authorizationAuthorizationMethod = issuing'authorizationAuthorizationMethod,
      issuing'authorizationAuthorizedAmount = issuing'authorizationAuthorizedAmount,
      issuing'authorizationAuthorizedCurrency = issuing'authorizationAuthorizedCurrency,
      issuing'authorizationBalanceTransactions = issuing'authorizationBalanceTransactions,
      issuing'authorizationCard = issuing'authorizationCard,
      issuing'authorizationCardholder = GHC.Maybe.Nothing,
      issuing'authorizationCreated = issuing'authorizationCreated,
      issuing'authorizationHeldAmount = issuing'authorizationHeldAmount,
      issuing'authorizationHeldCurrency = issuing'authorizationHeldCurrency,
      issuing'authorizationId = issuing'authorizationId,
      issuing'authorizationIsHeldAmountControllable = issuing'authorizationIsHeldAmountControllable,
      issuing'authorizationLivemode = issuing'authorizationLivemode,
      issuing'authorizationMerchantData = issuing'authorizationMerchantData,
      issuing'authorizationMetadata = issuing'authorizationMetadata,
      issuing'authorizationPendingAuthorizedAmount = issuing'authorizationPendingAuthorizedAmount,
      issuing'authorizationPendingHeldAmount = issuing'authorizationPendingHeldAmount,
      issuing'authorizationRequestHistory = issuing'authorizationRequestHistory,
      issuing'authorizationStatus = issuing'authorizationStatus,
      issuing'authorizationTransactions = issuing'authorizationTransactions,
      issuing'authorizationVerificationData = issuing'authorizationVerificationData,
      issuing'authorizationWalletProvider = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing.authorization.properties.authorization_method@ in the specification.
--
-- How the card details were provided.
data Issuing'authorizationAuthorizationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Issuing'authorizationAuthorizationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Issuing'authorizationAuthorizationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"chip"@
    Issuing'authorizationAuthorizationMethod'EnumChip
  | -- | Represents the JSON value @"contactless"@
    Issuing'authorizationAuthorizationMethod'EnumContactless
  | -- | Represents the JSON value @"keyed_in"@
    Issuing'authorizationAuthorizationMethod'EnumKeyedIn
  | -- | Represents the JSON value @"online"@
    Issuing'authorizationAuthorizationMethod'EnumOnline
  | -- | Represents the JSON value @"swipe"@
    Issuing'authorizationAuthorizationMethod'EnumSwipe
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'authorizationAuthorizationMethod' where
  toJSON (Issuing'authorizationAuthorizationMethod'Other val) = val
  toJSON (Issuing'authorizationAuthorizationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Issuing'authorizationAuthorizationMethod'EnumChip) = "chip"
  toJSON (Issuing'authorizationAuthorizationMethod'EnumContactless) = "contactless"
  toJSON (Issuing'authorizationAuthorizationMethod'EnumKeyedIn) = "keyed_in"
  toJSON (Issuing'authorizationAuthorizationMethod'EnumOnline) = "online"
  toJSON (Issuing'authorizationAuthorizationMethod'EnumSwipe) = "swipe"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'authorizationAuthorizationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "chip" -> Issuing'authorizationAuthorizationMethod'EnumChip
            | val GHC.Classes.== "contactless" -> Issuing'authorizationAuthorizationMethod'EnumContactless
            | val GHC.Classes.== "keyed_in" -> Issuing'authorizationAuthorizationMethod'EnumKeyedIn
            | val GHC.Classes.== "online" -> Issuing'authorizationAuthorizationMethod'EnumOnline
            | val GHC.Classes.== "swipe" -> Issuing'authorizationAuthorizationMethod'EnumSwipe
            | GHC.Base.otherwise -> Issuing'authorizationAuthorizationMethod'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.issuing.authorization.properties.cardholder.anyOf@ in the specification.
--
-- The cardholder to whom this authorization belongs.
data Issuing'authorizationCardholder'Variants
  = Issuing'authorizationCardholder'Issuing'cardholder Issuing'cardholder
  | Issuing'authorizationCardholder'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'authorizationCardholder'Variants where
  toJSON (Issuing'authorizationCardholder'Issuing'cardholder a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'authorizationCardholder'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'authorizationCardholder'Variants where
  parseJSON val = case (Issuing'authorizationCardholder'Issuing'cardholder Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Issuing'authorizationCardholder'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.issuing.authorization.properties.status@ in the specification.
--
-- The current status of the authorization in its lifecycle.
data Issuing'authorizationStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Issuing'authorizationStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Issuing'authorizationStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"closed"@
    Issuing'authorizationStatus'EnumClosed
  | -- | Represents the JSON value @"pending"@
    Issuing'authorizationStatus'EnumPending
  | -- | Represents the JSON value @"reversed"@
    Issuing'authorizationStatus'EnumReversed
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'authorizationStatus' where
  toJSON (Issuing'authorizationStatus'Other val) = val
  toJSON (Issuing'authorizationStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Issuing'authorizationStatus'EnumClosed) = "closed"
  toJSON (Issuing'authorizationStatus'EnumPending) = "pending"
  toJSON (Issuing'authorizationStatus'EnumReversed) = "reversed"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'authorizationStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "closed" -> Issuing'authorizationStatus'EnumClosed
            | val GHC.Classes.== "pending" -> Issuing'authorizationStatus'EnumPending
            | val GHC.Classes.== "reversed" -> Issuing'authorizationStatus'EnumReversed
            | GHC.Base.otherwise -> Issuing'authorizationStatus'Other val
      )
