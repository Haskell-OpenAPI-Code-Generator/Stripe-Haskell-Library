{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema FundingInstructionsBankTransferZenginRecord
module StripeAPI.Types.FundingInstructionsBankTransferZenginRecord where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.funding_instructions_bank_transfer_zengin_record@ in the specification.
--
-- Zengin Records contain Japan bank account details per the Zengin format.
data FundingInstructionsBankTransferZenginRecord = FundingInstructionsBankTransferZenginRecord
  { -- | account_holder_name: The account holder name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferZenginRecordAccountHolderName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_number: The account number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferZenginRecordAccountNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | account_type: The bank account type. In Japan, this can only be \`futsu\` or \`toza\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferZenginRecordAccountType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | bank_code: The bank code of the account
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferZenginRecordBankCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | bank_name: The bank name of the account
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferZenginRecordBankName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | branch_code: The branch code of the account
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferZenginRecordBranchCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | branch_name: The branch name of the account
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferZenginRecordBranchName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FundingInstructionsBankTransferZenginRecord where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordAccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_number" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordAccountNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordAccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_code" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordBankCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordBankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branch_code" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordBranchCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branch_name" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordBranchName obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_name" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordAccountHolderName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_number" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordAccountNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordAccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_code" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordBankCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordBankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branch_code" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordBranchCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("branch_name" Data.Aeson.Types.ToJSON..=)) (fundingInstructionsBankTransferZenginRecordBranchName obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FundingInstructionsBankTransferZenginRecord where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FundingInstructionsBankTransferZenginRecord" (\obj -> ((((((GHC.Base.pure FundingInstructionsBankTransferZenginRecord GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branch_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "branch_name"))

-- | Create a new 'FundingInstructionsBankTransferZenginRecord' with all required fields.
mkFundingInstructionsBankTransferZenginRecord :: FundingInstructionsBankTransferZenginRecord
mkFundingInstructionsBankTransferZenginRecord =
  FundingInstructionsBankTransferZenginRecord
    { fundingInstructionsBankTransferZenginRecordAccountHolderName = GHC.Maybe.Nothing,
      fundingInstructionsBankTransferZenginRecordAccountNumber = GHC.Maybe.Nothing,
      fundingInstructionsBankTransferZenginRecordAccountType = GHC.Maybe.Nothing,
      fundingInstructionsBankTransferZenginRecordBankCode = GHC.Maybe.Nothing,
      fundingInstructionsBankTransferZenginRecordBankName = GHC.Maybe.Nothing,
      fundingInstructionsBankTransferZenginRecordBranchCode = GHC.Maybe.Nothing,
      fundingInstructionsBankTransferZenginRecordBranchName = GHC.Maybe.Nothing
    }
