{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema IssuingDisputeFraudulentEvidence
module StripeAPI.Types.IssuingDisputeFraudulentEvidence where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.File
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_dispute_fraudulent_evidence@ in the specification.
data IssuingDisputeFraudulentEvidence
  = IssuingDisputeFraudulentEvidence
      { -- | dispute_explanation: Brief freeform text explaining why you are disputing this transaction.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingDisputeFraudulentEvidenceDisputeExplanation :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | uncategorized_file: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
        issuingDisputeFraudulentEvidenceUncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeFraudulentEvidenceUncategorizedFile'Variants)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeFraudulentEvidence where
  toJSON obj = Data.Aeson.Types.Internal.object ("dispute_explanation" Data.Aeson.Types.ToJSON..= issuingDisputeFraudulentEvidenceDisputeExplanation obj : "uncategorized_file" Data.Aeson.Types.ToJSON..= issuingDisputeFraudulentEvidenceUncategorizedFile obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("dispute_explanation" Data.Aeson.Types.ToJSON..= issuingDisputeFraudulentEvidenceDisputeExplanation obj) GHC.Base.<> ("uncategorized_file" Data.Aeson.Types.ToJSON..= issuingDisputeFraudulentEvidenceUncategorizedFile obj))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeFraudulentEvidence where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeFraudulentEvidence" (\obj -> (GHC.Base.pure IssuingDisputeFraudulentEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))

-- | Create a new 'IssuingDisputeFraudulentEvidence' with all required fields.
mkIssuingDisputeFraudulentEvidence :: IssuingDisputeFraudulentEvidence
mkIssuingDisputeFraudulentEvidence =
  IssuingDisputeFraudulentEvidence
    { issuingDisputeFraudulentEvidenceDisputeExplanation = GHC.Maybe.Nothing,
      issuingDisputeFraudulentEvidenceUncategorizedFile = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.issuing_dispute_fraudulent_evidence.properties.uncategorized_file.anyOf@ in the specification.
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
data IssuingDisputeFraudulentEvidenceUncategorizedFile'Variants
  = IssuingDisputeFraudulentEvidenceUncategorizedFile'File File
  | IssuingDisputeFraudulentEvidenceUncategorizedFile'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeFraudulentEvidenceUncategorizedFile'Variants where
  toJSON (IssuingDisputeFraudulentEvidenceUncategorizedFile'File a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuingDisputeFraudulentEvidenceUncategorizedFile'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeFraudulentEvidenceUncategorizedFile'Variants where
  parseJSON val = case (IssuingDisputeFraudulentEvidenceUncategorizedFile'File Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((IssuingDisputeFraudulentEvidenceUncategorizedFile'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
