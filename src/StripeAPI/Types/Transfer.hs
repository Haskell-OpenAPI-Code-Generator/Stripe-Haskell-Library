{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Transfer
module StripeAPI.Types.Transfer where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.BalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.Charge
import {-# SOURCE #-} StripeAPI.Types.TransferReversal
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema transfer
--
-- A \`Transfer\` object is created when you move funds between Stripe accounts as
-- part of Connect.
--
-- Before April 6, 2017, transfers also represented movement of funds from a
-- Stripe account to a card or bank account. This behavior has since been split
-- out into a [Payout](https:\/\/stripe.com\/docs\/api\#payout_object) object, with corresponding payout endpoints. For more
-- information, read about the
-- [transfer\/payout split](https:\/\/stripe.com\/docs\/transfer-payout-split).
--
-- Related guide: [Creating Separate Charges and Transfers](https:\/\/stripe.com\/docs\/connect\/charges-transfers).
data Transfer
  = Transfer
      { -- | amount: Amount in %s to be transferred.
        transferAmount :: GHC.Types.Int,
        -- | amount_reversed: Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
        transferAmountReversed :: GHC.Types.Int,
        -- | balance_transaction: Balance transaction that describes the impact of this transfer on your account balance.
        transferBalanceTransaction :: (GHC.Maybe.Maybe TransferBalanceTransaction'Variants),
        -- | created: Time that this record of the transfer was first created.
        transferCreated :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        transferCurrency :: Data.Text.Internal.Text,
        -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        transferDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | destination: ID of the Stripe account the transfer was sent to.
        transferDestination :: (GHC.Maybe.Maybe TransferDestination'Variants),
        -- | destination_payment: If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
        transferDestinationPayment :: (GHC.Maybe.Maybe TransferDestinationPayment'Variants),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        transferId :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        transferLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        transferMetadata :: Data.Aeson.Types.Internal.Object,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        transferObject :: TransferObject',
        -- | reversals: A list of reversals that have been applied to the transfer.
        transferReversals :: TransferReversals',
        -- | reversed: Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
        transferReversed :: GHC.Types.Bool,
        -- | source_transaction: ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.
        transferSourceTransaction :: (GHC.Maybe.Maybe TransferSourceTransaction'Variants),
        -- | source_type: The source balance this transfer came from. One of \`card\`, \`fpx\`, or \`bank_account\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        transferSourceType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | transfer_group: A string that identifies this transaction as part of a group. See the [Connect documentation](https:\/\/stripe.com\/docs\/connect\/charges-transfers\#transfer-options) for details.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        transferTransferGroup :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Transfer where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (transferAmount obj) : (Data.Aeson..=) "amount_reversed" (transferAmountReversed obj) : (Data.Aeson..=) "balance_transaction" (transferBalanceTransaction obj) : (Data.Aeson..=) "created" (transferCreated obj) : (Data.Aeson..=) "currency" (transferCurrency obj) : (Data.Aeson..=) "description" (transferDescription obj) : (Data.Aeson..=) "destination" (transferDestination obj) : (Data.Aeson..=) "destination_payment" (transferDestinationPayment obj) : (Data.Aeson..=) "id" (transferId obj) : (Data.Aeson..=) "livemode" (transferLivemode obj) : (Data.Aeson..=) "metadata" (transferMetadata obj) : (Data.Aeson..=) "object" (transferObject obj) : (Data.Aeson..=) "reversals" (transferReversals obj) : (Data.Aeson..=) "reversed" (transferReversed obj) : (Data.Aeson..=) "source_transaction" (transferSourceTransaction obj) : (Data.Aeson..=) "source_type" (transferSourceType obj) : (Data.Aeson..=) "transfer_group" (transferTransferGroup obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (transferAmount obj) GHC.Base.<> ((Data.Aeson..=) "amount_reversed" (transferAmountReversed obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (transferBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "created" (transferCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (transferCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (transferDescription obj) GHC.Base.<> ((Data.Aeson..=) "destination" (transferDestination obj) GHC.Base.<> ((Data.Aeson..=) "destination_payment" (transferDestinationPayment obj) GHC.Base.<> ((Data.Aeson..=) "id" (transferId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (transferLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (transferMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (transferObject obj) GHC.Base.<> ((Data.Aeson..=) "reversals" (transferReversals obj) GHC.Base.<> ((Data.Aeson..=) "reversed" (transferReversed obj) GHC.Base.<> ((Data.Aeson..=) "source_transaction" (transferSourceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "source_type" (transferSourceType obj) GHC.Base.<> (Data.Aeson..=) "transfer_group" (transferTransferGroup obj)))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Transfer where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Transfer" (\obj -> ((((((((((((((((GHC.Base.pure Transfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_reversed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination_payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reversals")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reversed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfer_group"))

-- | Define the one-of schema transferBalance_transaction\'
--
-- Balance transaction that describes the impact of this transfer on your account balance.
data TransferBalanceTransaction'Variants
  = TransferBalanceTransaction'BalanceTransaction BalanceTransaction
  | TransferBalanceTransaction'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferBalanceTransaction'Variants where
  toJSON (TransferBalanceTransaction'BalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TransferBalanceTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TransferBalanceTransaction'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferBalanceTransaction'BalanceTransaction a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferBalanceTransaction'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema transferDestination\'
--
-- ID of the Stripe account the transfer was sent to.
data TransferDestination'Variants
  = TransferDestination'Account Account
  | TransferDestination'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferDestination'Variants where
  toJSON (TransferDestination'Account a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TransferDestination'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TransferDestination'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferDestination'Account a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferDestination'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema transferDestination_payment\'
--
-- If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
data TransferDestinationPayment'Variants
  = TransferDestinationPayment'Charge Charge
  | TransferDestinationPayment'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferDestinationPayment'Variants where
  toJSON (TransferDestinationPayment'Charge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TransferDestinationPayment'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TransferDestinationPayment'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferDestinationPayment'Charge a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferDestinationPayment'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema transferObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data TransferObject'
  = TransferObject'EnumOther Data.Aeson.Types.Internal.Value
  | TransferObject'EnumTyped Data.Text.Internal.Text
  | TransferObject'EnumStringTransfer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferObject' where
  toJSON (TransferObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TransferObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TransferObject'EnumStringTransfer) = "transfer"

instance Data.Aeson.Types.FromJSON.FromJSON TransferObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "transfer" -> TransferObject'EnumStringTransfer
            | GHC.Base.otherwise -> TransferObject'EnumOther val
      )

-- | Defines the data type for the schema transferReversals\'
--
-- A list of reversals that have been applied to the transfer.
data TransferReversals'
  = TransferReversals'
      { -- | data: Details about each object.
        transferReversals'Data :: ([TransferReversal]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        transferReversals'HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        transferReversals'Object :: TransferReversals'Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        transferReversals'Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TransferReversals' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (transferReversals'Data obj) : (Data.Aeson..=) "has_more" (transferReversals'HasMore obj) : (Data.Aeson..=) "object" (transferReversals'Object obj) : (Data.Aeson..=) "url" (transferReversals'Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (transferReversals'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (transferReversals'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (transferReversals'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (transferReversals'Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON TransferReversals' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TransferReversals'" (\obj -> (((GHC.Base.pure TransferReversals' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema transferReversals\'Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data TransferReversals'Object'
  = TransferReversals'Object'EnumOther Data.Aeson.Types.Internal.Value
  | TransferReversals'Object'EnumTyped Data.Text.Internal.Text
  | TransferReversals'Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferReversals'Object' where
  toJSON (TransferReversals'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TransferReversals'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TransferReversals'Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON TransferReversals'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> TransferReversals'Object'EnumStringList
            | GHC.Base.otherwise -> TransferReversals'Object'EnumOther val
      )

-- | Define the one-of schema transferSource_transaction\'
--
-- ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.
data TransferSourceTransaction'Variants
  = TransferSourceTransaction'Charge Charge
  | TransferSourceTransaction'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferSourceTransaction'Variants where
  toJSON (TransferSourceTransaction'Charge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TransferSourceTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TransferSourceTransaction'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferSourceTransaction'Charge a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferSourceTransaction'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
