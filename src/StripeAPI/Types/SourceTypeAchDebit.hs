{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema SourceTypeAchDebit
module StripeAPI.Types.SourceTypeAchDebit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema source_type_ach_debit
data SourceTypeAchDebit
  = SourceTypeAchDebit
      { -- | bank_name
        sourceTypeAchDebitBankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country
        sourceTypeAchDebitCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | fingerprint
        sourceTypeAchDebitFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | last4
        sourceTypeAchDebitLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | routing_number
        sourceTypeAchDebitRoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | type
        sourceTypeAchDebitType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SourceTypeAchDebit where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "bank_name" (sourceTypeAchDebitBankName obj) : (Data.Aeson..=) "country" (sourceTypeAchDebitCountry obj) : (Data.Aeson..=) "fingerprint" (sourceTypeAchDebitFingerprint obj) : (Data.Aeson..=) "last4" (sourceTypeAchDebitLast4 obj) : (Data.Aeson..=) "routing_number" (sourceTypeAchDebitRoutingNumber obj) : (Data.Aeson..=) "type" (sourceTypeAchDebitType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "bank_name" (sourceTypeAchDebitBankName obj) GHC.Base.<> ((Data.Aeson..=) "country" (sourceTypeAchDebitCountry obj) GHC.Base.<> ((Data.Aeson..=) "fingerprint" (sourceTypeAchDebitFingerprint obj) GHC.Base.<> ((Data.Aeson..=) "last4" (sourceTypeAchDebitLast4 obj) GHC.Base.<> ((Data.Aeson..=) "routing_number" (sourceTypeAchDebitRoutingNumber obj) GHC.Base.<> (Data.Aeson..=) "type" (sourceTypeAchDebitType obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON SourceTypeAchDebit where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceTypeAchDebit" (\obj -> (((((GHC.Base.pure SourceTypeAchDebit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
