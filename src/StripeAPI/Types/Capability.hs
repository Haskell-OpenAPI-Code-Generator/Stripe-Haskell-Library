{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Capability
module StripeAPI.Types.Capability where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.AccountCapabilityRequirements
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema capability
--
-- This is an object representing a capability for a Stripe account.
--
-- Related guide: [Capabilities Overview](https:\/\/stripe.com\/docs\/connect\/capabilities-overview).
data Capability
  = Capability
      { -- | account: The account for which the capability enables functionality.
        capabilityAccount :: CapabilityAccount'Variants,
        -- | id: The identifier for the capability.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        capabilityId :: Data.Text.Internal.Text,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        capabilityObject :: CapabilityObject',
        -- | requested: Whether the capability has been requested.
        capabilityRequested :: GHC.Types.Bool,
        -- | requested_at: Time at which the capability was requested. Measured in seconds since the Unix epoch.
        capabilityRequestedAt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | requirements:
        capabilityRequirements :: (GHC.Maybe.Maybe AccountCapabilityRequirements),
        -- | status: The status of the capability. Can be \`active\`, \`inactive\`, \`pending\`, or \`unrequested\`.
        capabilityStatus :: CapabilityStatus'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Capability where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "account" (capabilityAccount obj) : (Data.Aeson..=) "id" (capabilityId obj) : (Data.Aeson..=) "object" (capabilityObject obj) : (Data.Aeson..=) "requested" (capabilityRequested obj) : (Data.Aeson..=) "requested_at" (capabilityRequestedAt obj) : (Data.Aeson..=) "requirements" (capabilityRequirements obj) : (Data.Aeson..=) "status" (capabilityStatus obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "account" (capabilityAccount obj) GHC.Base.<> ((Data.Aeson..=) "id" (capabilityId obj) GHC.Base.<> ((Data.Aeson..=) "object" (capabilityObject obj) GHC.Base.<> ((Data.Aeson..=) "requested" (capabilityRequested obj) GHC.Base.<> ((Data.Aeson..=) "requested_at" (capabilityRequestedAt obj) GHC.Base.<> ((Data.Aeson..=) "requirements" (capabilityRequirements obj) GHC.Base.<> (Data.Aeson..=) "status" (capabilityStatus obj)))))))

instance Data.Aeson.Types.FromJSON.FromJSON Capability where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Capability" (\obj -> ((((((GHC.Base.pure Capability GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "requested")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requested_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Define the one-of schema capabilityAccount\'
--
-- The account for which the capability enables functionality.
data CapabilityAccount'Variants
  = CapabilityAccount'Account Account
  | CapabilityAccount'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CapabilityAccount'Variants where
  toJSON (CapabilityAccount'Account a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CapabilityAccount'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CapabilityAccount'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CapabilityAccount'Account a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CapabilityAccount'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema capabilityObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data CapabilityObject'
  = CapabilityObject'EnumOther Data.Aeson.Types.Internal.Value
  | CapabilityObject'EnumTyped Data.Text.Internal.Text
  | CapabilityObject'EnumStringCapability
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CapabilityObject' where
  toJSON (CapabilityObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CapabilityObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CapabilityObject'EnumStringCapability) = "capability"

instance Data.Aeson.Types.FromJSON.FromJSON CapabilityObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "capability" -> CapabilityObject'EnumStringCapability
            | GHC.Base.otherwise -> CapabilityObject'EnumOther val
      )

-- | Defines the enum schema capabilityStatus\'
--
-- The status of the capability. Can be \`active\`, \`inactive\`, \`pending\`, or \`unrequested\`.
data CapabilityStatus'
  = CapabilityStatus'EnumOther Data.Aeson.Types.Internal.Value
  | CapabilityStatus'EnumTyped Data.Text.Internal.Text
  | CapabilityStatus'EnumStringActive
  | CapabilityStatus'EnumStringDisabled
  | CapabilityStatus'EnumStringInactive
  | CapabilityStatus'EnumStringPending
  | CapabilityStatus'EnumStringUnrequested
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CapabilityStatus' where
  toJSON (CapabilityStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CapabilityStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CapabilityStatus'EnumStringActive) = "active"
  toJSON (CapabilityStatus'EnumStringDisabled) = "disabled"
  toJSON (CapabilityStatus'EnumStringInactive) = "inactive"
  toJSON (CapabilityStatus'EnumStringPending) = "pending"
  toJSON (CapabilityStatus'EnumStringUnrequested) = "unrequested"

instance Data.Aeson.Types.FromJSON.FromJSON CapabilityStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "active" -> CapabilityStatus'EnumStringActive
            | val GHC.Classes.== "disabled" -> CapabilityStatus'EnumStringDisabled
            | val GHC.Classes.== "inactive" -> CapabilityStatus'EnumStringInactive
            | val GHC.Classes.== "pending" -> CapabilityStatus'EnumStringPending
            | val GHC.Classes.== "unrequested" -> CapabilityStatus'EnumStringUnrequested
            | GHC.Base.otherwise -> CapabilityStatus'EnumOther val
      )
