-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Capability
module StripeAPI.Types.Capability where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.AccountCapabilityFutureRequirements
import {-# SOURCE #-} StripeAPI.Types.AccountCapabilityRequirements

-- | Defines the object schema located at @components.schemas.capability@ in the specification.
-- 
-- This is an object representing a capability for a Stripe account.
-- 
-- Related guide: [Account capabilities](https:\/\/stripe.com\/docs\/connect\/account-capabilities).
data Capability = Capability {
  -- | account: The account for which the capability enables functionality.
  capabilityAccount :: CapabilityAccount'Variants
  -- | future_requirements: 
  , capabilityFutureRequirements :: (GHC.Maybe.Maybe AccountCapabilityFutureRequirements)
  -- | id: The identifier for the capability.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , capabilityId :: Data.Text.Internal.Text
  -- | requested: Whether the capability has been requested.
  , capabilityRequested :: GHC.Types.Bool
  -- | requested_at: Time at which the capability was requested. Measured in seconds since the Unix epoch.
  , capabilityRequestedAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  -- | requirements: 
  , capabilityRequirements :: (GHC.Maybe.Maybe AccountCapabilityRequirements)
  -- | status: The status of the capability. Can be \`active\`, \`inactive\`, \`pending\`, or \`unrequested\`.
  , capabilityStatus :: CapabilityStatus'
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Capability
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= capabilityAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (capabilityFutureRequirements obj) : ["id" Data.Aeson.Types.ToJSON..= capabilityId obj] : ["requested" Data.Aeson.Types.ToJSON..= capabilityRequested obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requested_at" Data.Aeson.Types.ToJSON..=)) (capabilityRequestedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (capabilityRequirements obj) : ["status" Data.Aeson.Types.ToJSON..= capabilityStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "capability"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= capabilityAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("future_requirements" Data.Aeson.Types.ToJSON..=)) (capabilityFutureRequirements obj) : ["id" Data.Aeson.Types.ToJSON..= capabilityId obj] : ["requested" Data.Aeson.Types.ToJSON..= capabilityRequested obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requested_at" Data.Aeson.Types.ToJSON..=)) (capabilityRequestedAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("requirements" Data.Aeson.Types.ToJSON..=)) (capabilityRequirements obj) : ["status" Data.Aeson.Types.ToJSON..= capabilityStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "capability"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Capability
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Capability" (\obj -> ((((((GHC.Base.pure Capability GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "future_requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "requested")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requested_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))
-- | Create a new 'Capability' with all required fields.
mkCapability :: CapabilityAccount'Variants -- ^ 'capabilityAccount'
  -> Data.Text.Internal.Text -- ^ 'capabilityId'
  -> GHC.Types.Bool -- ^ 'capabilityRequested'
  -> CapabilityStatus' -- ^ 'capabilityStatus'
  -> Capability
mkCapability capabilityAccount capabilityId capabilityRequested capabilityStatus = Capability{capabilityAccount = capabilityAccount,
                                                                                              capabilityFutureRequirements = GHC.Maybe.Nothing,
                                                                                              capabilityId = capabilityId,
                                                                                              capabilityRequested = capabilityRequested,
                                                                                              capabilityRequestedAt = GHC.Maybe.Nothing,
                                                                                              capabilityRequirements = GHC.Maybe.Nothing,
                                                                                              capabilityStatus = capabilityStatus}
-- | Defines the oneOf schema located at @components.schemas.capability.properties.account.anyOf@ in the specification.
-- 
-- The account for which the capability enables functionality.
data CapabilityAccount'Variants =
   CapabilityAccount'Text Data.Text.Internal.Text
  | CapabilityAccount'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CapabilityAccount'Variants
    where toJSON (CapabilityAccount'Text a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (CapabilityAccount'Account a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON CapabilityAccount'Variants
    where parseJSON val = case (CapabilityAccount'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CapabilityAccount'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema located at @components.schemas.capability.properties.status@ in the specification.
-- 
-- The status of the capability. Can be \`active\`, \`inactive\`, \`pending\`, or \`unrequested\`.
data CapabilityStatus' =
   CapabilityStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | CapabilityStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | CapabilityStatus'EnumActive -- ^ Represents the JSON value @"active"@
  | CapabilityStatus'EnumDisabled -- ^ Represents the JSON value @"disabled"@
  | CapabilityStatus'EnumInactive -- ^ Represents the JSON value @"inactive"@
  | CapabilityStatus'EnumPending -- ^ Represents the JSON value @"pending"@
  | CapabilityStatus'EnumUnrequested -- ^ Represents the JSON value @"unrequested"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CapabilityStatus'
    where toJSON (CapabilityStatus'Other val) = val
          toJSON (CapabilityStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (CapabilityStatus'EnumActive) = "active"
          toJSON (CapabilityStatus'EnumDisabled) = "disabled"
          toJSON (CapabilityStatus'EnumInactive) = "inactive"
          toJSON (CapabilityStatus'EnumPending) = "pending"
          toJSON (CapabilityStatus'EnumUnrequested) = "unrequested"
instance Data.Aeson.Types.FromJSON.FromJSON CapabilityStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "active" -> CapabilityStatus'EnumActive
                                            | val GHC.Classes.== "disabled" -> CapabilityStatus'EnumDisabled
                                            | val GHC.Classes.== "inactive" -> CapabilityStatus'EnumInactive
                                            | val GHC.Classes.== "pending" -> CapabilityStatus'EnumPending
                                            | val GHC.Classes.== "unrequested" -> CapabilityStatus'EnumUnrequested
                                            | GHC.Base.otherwise -> CapabilityStatus'Other val)
