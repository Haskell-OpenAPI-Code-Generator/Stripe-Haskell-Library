{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodDetailsAcssDebit
module StripeAPI.Types.PaymentMethodDetailsAcssDebit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_details_acss_debit@ in the specification.
data PaymentMethodDetailsAcssDebit = PaymentMethodDetailsAcssDebit
  { -- | bank_name: Name of the bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsAcssDebitBankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsAcssDebitFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | institution_number: Institution number of the bank account
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsAcssDebitInstitutionNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last4: Last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsAcssDebitLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | mandate: ID of the mandate used to make this payment.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsAcssDebitMandate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | transit_number: Transit number of the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsAcssDebitTransitNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsAcssDebit where
  toJSON obj = Data.Aeson.Types.Internal.object ("bank_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitBankName obj : "fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitFingerprint obj : "institution_number" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitInstitutionNumber obj : "last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitLast4 obj : "mandate" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitMandate obj : "transit_number" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitTransitNumber obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bank_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitBankName obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitFingerprint obj) GHC.Base.<> (("institution_number" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitInstitutionNumber obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitLast4 obj) GHC.Base.<> (("mandate" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitMandate obj) GHC.Base.<> ("transit_number" Data.Aeson.Types.ToJSON..= paymentMethodDetailsAcssDebitTransitNumber obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsAcssDebit where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsAcssDebit" (\obj -> (((((GHC.Base.pure PaymentMethodDetailsAcssDebit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "institution_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mandate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transit_number"))

-- | Create a new 'PaymentMethodDetailsAcssDebit' with all required fields.
mkPaymentMethodDetailsAcssDebit :: PaymentMethodDetailsAcssDebit
mkPaymentMethodDetailsAcssDebit =
  PaymentMethodDetailsAcssDebit
    { paymentMethodDetailsAcssDebitBankName = GHC.Maybe.Nothing,
      paymentMethodDetailsAcssDebitFingerprint = GHC.Maybe.Nothing,
      paymentMethodDetailsAcssDebitInstitutionNumber = GHC.Maybe.Nothing,
      paymentMethodDetailsAcssDebitLast4 = GHC.Maybe.Nothing,
      paymentMethodDetailsAcssDebitMandate = GHC.Maybe.Nothing,
      paymentMethodDetailsAcssDebitTransitNumber = GHC.Maybe.Nothing
    }
