{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Tax_TransactionLineItem
module StripeAPI.Types.Tax_TransactionLineItem where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.TaxProductResourceTaxTransactionLineItemResourceReversal
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax.transaction_line_item@ in the specification.
data Tax'transactionLineItem = Tax'transactionLineItem
  { -- | amount: The line item amount in integer cents. If \`tax_behavior=inclusive\`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
    tax'transactionLineItemAmount :: GHC.Types.Int,
    -- | amount_tax: The amount of tax calculated for this line item, in integer cents.
    tax'transactionLineItemAmountTax :: GHC.Types.Int,
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionLineItemId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    tax'transactionLineItemLivemode :: GHC.Types.Bool,
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    tax'transactionLineItemMetadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | product: The ID of an existing [Product](https:\/\/stripe.com\/docs\/api\/products\/object).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionLineItemProduct :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | quantity: The number of units of the item being purchased. For reversals, this is the quantity reversed.
    tax'transactionLineItemQuantity :: GHC.Types.Int,
    -- | reference: A custom identifier for this line item in the transaction.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionLineItemReference :: Data.Text.Internal.Text,
    -- | reversal: If \`type=reversal\`, contains information about what was reversed.
    tax'transactionLineItemReversal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Tax'transactionLineItemReversal'NonNullable)),
    -- | tax_behavior: Specifies whether the \`amount\` includes taxes. If \`tax_behavior=inclusive\`, then the amount includes taxes.
    tax'transactionLineItemTaxBehavior :: Tax'transactionLineItemTaxBehavior',
    -- | tax_code: The [tax code](https:\/\/stripe.com\/docs\/tax\/tax-categories) ID used for this resource.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionLineItemTaxCode :: Data.Text.Internal.Text,
    -- | type: If \`reversal\`, this line item reverses an earlier transaction.
    tax'transactionLineItemType :: Tax'transactionLineItemType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transactionLineItem where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= tax'transactionLineItemAmount obj] : ["amount_tax" Data.Aeson.Types.ToJSON..= tax'transactionLineItemAmountTax obj] : ["id" Data.Aeson.Types.ToJSON..= tax'transactionLineItemId obj] : ["livemode" Data.Aeson.Types.ToJSON..= tax'transactionLineItemLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItemMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItemProduct obj) : ["quantity" Data.Aeson.Types.ToJSON..= tax'transactionLineItemQuantity obj] : ["reference" Data.Aeson.Types.ToJSON..= tax'transactionLineItemReference obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reversal" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItemReversal obj) : ["tax_behavior" Data.Aeson.Types.ToJSON..= tax'transactionLineItemTaxBehavior obj] : ["tax_code" Data.Aeson.Types.ToJSON..= tax'transactionLineItemTaxCode obj] : ["type" Data.Aeson.Types.ToJSON..= tax'transactionLineItemType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax.transaction_line_item"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= tax'transactionLineItemAmount obj] : ["amount_tax" Data.Aeson.Types.ToJSON..= tax'transactionLineItemAmountTax obj] : ["id" Data.Aeson.Types.ToJSON..= tax'transactionLineItemId obj] : ["livemode" Data.Aeson.Types.ToJSON..= tax'transactionLineItemLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItemMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItemProduct obj) : ["quantity" Data.Aeson.Types.ToJSON..= tax'transactionLineItemQuantity obj] : ["reference" Data.Aeson.Types.ToJSON..= tax'transactionLineItemReference obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reversal" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItemReversal obj) : ["tax_behavior" Data.Aeson.Types.ToJSON..= tax'transactionLineItemTaxBehavior obj] : ["tax_code" Data.Aeson.Types.ToJSON..= tax'transactionLineItemTaxCode obj] : ["type" Data.Aeson.Types.ToJSON..= tax'transactionLineItemType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax.transaction_line_item"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transactionLineItem where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Tax'transactionLineItem" (\obj -> (((((((((((GHC.Base.pure Tax'transactionLineItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reversal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'Tax'transactionLineItem' with all required fields.
mkTax'transactionLineItem ::
  -- | 'tax'transactionLineItemAmount'
  GHC.Types.Int ->
  -- | 'tax'transactionLineItemAmountTax'
  GHC.Types.Int ->
  -- | 'tax'transactionLineItemId'
  Data.Text.Internal.Text ->
  -- | 'tax'transactionLineItemLivemode'
  GHC.Types.Bool ->
  -- | 'tax'transactionLineItemQuantity'
  GHC.Types.Int ->
  -- | 'tax'transactionLineItemReference'
  Data.Text.Internal.Text ->
  -- | 'tax'transactionLineItemTaxBehavior'
  Tax'transactionLineItemTaxBehavior' ->
  -- | 'tax'transactionLineItemTaxCode'
  Data.Text.Internal.Text ->
  -- | 'tax'transactionLineItemType'
  Tax'transactionLineItemType' ->
  Tax'transactionLineItem
mkTax'transactionLineItem tax'transactionLineItemAmount tax'transactionLineItemAmountTax tax'transactionLineItemId tax'transactionLineItemLivemode tax'transactionLineItemQuantity tax'transactionLineItemReference tax'transactionLineItemTaxBehavior tax'transactionLineItemTaxCode tax'transactionLineItemType =
  Tax'transactionLineItem
    { tax'transactionLineItemAmount = tax'transactionLineItemAmount,
      tax'transactionLineItemAmountTax = tax'transactionLineItemAmountTax,
      tax'transactionLineItemId = tax'transactionLineItemId,
      tax'transactionLineItemLivemode = tax'transactionLineItemLivemode,
      tax'transactionLineItemMetadata = GHC.Maybe.Nothing,
      tax'transactionLineItemProduct = GHC.Maybe.Nothing,
      tax'transactionLineItemQuantity = tax'transactionLineItemQuantity,
      tax'transactionLineItemReference = tax'transactionLineItemReference,
      tax'transactionLineItemReversal = GHC.Maybe.Nothing,
      tax'transactionLineItemTaxBehavior = tax'transactionLineItemTaxBehavior,
      tax'transactionLineItemTaxCode = tax'transactionLineItemTaxCode,
      tax'transactionLineItemType = tax'transactionLineItemType
    }

-- | Defines the object schema located at @components.schemas.tax.transaction_line_item.properties.reversal.anyOf@ in the specification.
--
-- If \\\`type=reversal\\\`, contains information about what was reversed.
data Tax'transactionLineItemReversal'NonNullable = Tax'transactionLineItemReversal'NonNullable
  { -- | original_line_item: The \`id\` of the line item to reverse in the original transaction.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionLineItemReversal'NonNullableOriginalLineItem :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transactionLineItemReversal'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_line_item" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItemReversal'NonNullableOriginalLineItem obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_line_item" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItemReversal'NonNullableOriginalLineItem obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transactionLineItemReversal'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Tax'transactionLineItemReversal'NonNullable" (\obj -> GHC.Base.pure Tax'transactionLineItemReversal'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "original_line_item"))

-- | Create a new 'Tax'transactionLineItemReversal'NonNullable' with all required fields.
mkTax'transactionLineItemReversal'NonNullable :: Tax'transactionLineItemReversal'NonNullable
mkTax'transactionLineItemReversal'NonNullable = Tax'transactionLineItemReversal'NonNullable {tax'transactionLineItemReversal'NonNullableOriginalLineItem = GHC.Maybe.Nothing}

-- | Defines the enum schema located at @components.schemas.tax.transaction_line_item.properties.tax_behavior@ in the specification.
--
-- Specifies whether the \`amount\` includes taxes. If \`tax_behavior=inclusive\`, then the amount includes taxes.
data Tax'transactionLineItemTaxBehavior'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Tax'transactionLineItemTaxBehavior'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Tax'transactionLineItemTaxBehavior'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"exclusive"@
    Tax'transactionLineItemTaxBehavior'EnumExclusive
  | -- | Represents the JSON value @"inclusive"@
    Tax'transactionLineItemTaxBehavior'EnumInclusive
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transactionLineItemTaxBehavior' where
  toJSON (Tax'transactionLineItemTaxBehavior'Other val) = val
  toJSON (Tax'transactionLineItemTaxBehavior'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Tax'transactionLineItemTaxBehavior'EnumExclusive) = "exclusive"
  toJSON (Tax'transactionLineItemTaxBehavior'EnumInclusive) = "inclusive"

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transactionLineItemTaxBehavior' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "exclusive" -> Tax'transactionLineItemTaxBehavior'EnumExclusive
            | val GHC.Classes.== "inclusive" -> Tax'transactionLineItemTaxBehavior'EnumInclusive
            | GHC.Base.otherwise -> Tax'transactionLineItemTaxBehavior'Other val
      )

-- | Defines the enum schema located at @components.schemas.tax.transaction_line_item.properties.type@ in the specification.
--
-- If \`reversal\`, this line item reverses an earlier transaction.
data Tax'transactionLineItemType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Tax'transactionLineItemType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Tax'transactionLineItemType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"reversal"@
    Tax'transactionLineItemType'EnumReversal
  | -- | Represents the JSON value @"transaction"@
    Tax'transactionLineItemType'EnumTransaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transactionLineItemType' where
  toJSON (Tax'transactionLineItemType'Other val) = val
  toJSON (Tax'transactionLineItemType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Tax'transactionLineItemType'EnumReversal) = "reversal"
  toJSON (Tax'transactionLineItemType'EnumTransaction) = "transaction"

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transactionLineItemType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "reversal" -> Tax'transactionLineItemType'EnumReversal
            | val GHC.Classes.== "transaction" -> Tax'transactionLineItemType'EnumTransaction
            | GHC.Base.otherwise -> Tax'transactionLineItemType'Other val
      )
