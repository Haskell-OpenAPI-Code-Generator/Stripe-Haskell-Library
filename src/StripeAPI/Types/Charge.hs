{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Charge
module StripeAPI.Types.Charge where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.Address
import {-# SOURCE #-} StripeAPI.Types.Application
import {-# SOURCE #-} StripeAPI.Types.ApplicationFee
import {-# SOURCE #-} StripeAPI.Types.BalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.BillingDetails
import {-# SOURCE #-} StripeAPI.Types.ChargeFraudDetails
import {-# SOURCE #-} StripeAPI.Types.ChargeOutcome
import {-# SOURCE #-} StripeAPI.Types.ChargeTransferData
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.Invoice
import {-# SOURCE #-} StripeAPI.Types.PaymentFlowsPrivatePaymentMethodsAlipayDetails
import {-# SOURCE #-} StripeAPI.Types.PaymentIntent
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetails
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsAchCreditTransfer
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsAchDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsAcssDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsAfterpayClearpay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsAuBecsDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsBacsDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsBancontact
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsBoleto
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCard
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardPresent
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCashapp
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsEps
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsFpx
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsGiropay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsGrabpay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsIdeal
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsInteracPresent
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsKlarna
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsKonbini
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsLink
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsMultibanco
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsOxxo
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsP24
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsPaynow
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsPaypal
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsPix
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsPromptpay
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsSepaDebit
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsSofort
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsUsBankAccount
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsWechatPay
import {-# SOURCE #-} StripeAPI.Types.RadarRadarOptions
import {-# SOURCE #-} StripeAPI.Types.Refund
import {-# SOURCE #-} StripeAPI.Types.Review
import {-# SOURCE #-} StripeAPI.Types.Rule
import {-# SOURCE #-} StripeAPI.Types.Shipping
import {-# SOURCE #-} StripeAPI.Types.Transfer
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.charge@ in the specification.
--
-- The \`Charge\` object represents a single attempt to move money into your Stripe account.
-- PaymentIntent confirmation is the most common way to create Charges, but transferring
-- money to a different Stripe account through Connect also creates Charges.
-- Some legacy payment flows create Charges directly, which is not recommended for new integrations.
data Charge = Charge
  { -- | amount: Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https:\/\/stripe.com\/docs\/currencies\#zero-decimal) (e.g., 100 cents to charge \$1.00 or 100 to charge Â¥100, a zero-decimal currency). The minimum amount is \$0.50 US or [equivalent in charge currency](https:\/\/stripe.com\/docs\/currencies\#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of \$999,999.99).
    chargeAmount :: GHC.Types.Int,
    -- | amount_captured: Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).
    chargeAmountCaptured :: GHC.Types.Int,
    -- | amount_refunded: Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).
    chargeAmountRefunded :: GHC.Types.Int,
    -- | application: ID of the Connect application that created the charge.
    chargeApplication :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeApplication'NonNullableVariants)),
    -- | application_fee: The application fee (if any) for the charge. [See the Connect documentation](https:\/\/stripe.com\/docs\/connect\/direct-charges\#collecting-fees) for details.
    chargeApplicationFee :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeApplicationFee'NonNullableVariants)),
    -- | application_fee_amount: The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https:\/\/stripe.com\/docs\/connect\/direct-charges\#collecting-fees) for details.
    chargeApplicationFeeAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | balance_transaction: ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
    chargeBalanceTransaction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeBalanceTransaction'NonNullableVariants)),
    -- | billing_details:
    chargeBillingDetails :: BillingDetails,
    -- | calculated_statement_descriptor: The full statement descriptor that is passed to card networks, and that is displayed on your customers\' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeCalculatedStatementDescriptor :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | captured: If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
    chargeCaptured :: GHC.Types.Bool,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    chargeCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    chargeCurrency :: Data.Text.Internal.Text,
    -- | customer: ID of the customer this charge is for if one exists.
    chargeCustomer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeCustomer'NonNullableVariants)),
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
    --
    -- Constraints:
    --
    -- * Maximum length of 40000
    chargeDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | disputed: Whether the charge has been disputed.
    chargeDisputed :: GHC.Types.Bool,
    -- | failure_balance_transaction: ID of the balance transaction that describes the reversal of the balance on your account due to payment failure.
    chargeFailureBalanceTransaction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeFailureBalanceTransaction'NonNullableVariants)),
    -- | failure_code: Error code explaining reason for charge failure if available (see [the errors section](https:\/\/stripe.com\/docs\/error-codes) for a list of codes).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeFailureCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | failure_message: Message to user further explaining reason for charge failure if available.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeFailureMessage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | fraud_details: Information on fraud assessments for the charge.
    chargeFraudDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeFraudDetails'NonNullable)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeId :: Data.Text.Internal.Text,
    -- | invoice: ID of the invoice this charge is for if one exists.
    chargeInvoice :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeInvoice'NonNullableVariants)),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    chargeLivemode :: GHC.Types.Bool,
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    chargeMetadata :: Data.Aeson.Types.Internal.Object,
    -- | on_behalf_of: The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https:\/\/stripe.com\/docs\/connect\/separate-charges-and-transfers) for details.
    chargeOnBehalfOf :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeOnBehalfOf'NonNullableVariants)),
    -- | outcome: Details about whether the payment was accepted, and why. See [understanding declines](https:\/\/stripe.com\/docs\/declines) for details.
    chargeOutcome :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeOutcome'NonNullable)),
    -- | paid: \`true\` if the charge succeeded, or was successfully authorized for later capture.
    chargePaid :: GHC.Types.Bool,
    -- | payment_intent: ID of the PaymentIntent associated with this charge, if one exists.
    chargePaymentIntent :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargePaymentIntent'NonNullableVariants)),
    -- | payment_method: ID of the payment method used in this charge.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargePaymentMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | payment_method_details: Details about the payment method at the time of the transaction.
    chargePaymentMethodDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargePaymentMethodDetails'NonNullable)),
    -- | radar_options: Options to configure Radar. See [Radar Session](https:\/\/stripe.com\/docs\/radar\/radar-session) for more information.
    chargeRadarOptions :: (GHC.Maybe.Maybe RadarRadarOptions),
    -- | receipt_email: This is the email address that the receipt for this charge was sent to.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeReceiptEmail :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | receipt_number: This is the transaction number that appears on email receipts sent for this charge. This attribute will be \`null\` until a receipt has been sent.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeReceiptNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | receipt_url: This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeReceiptUrl :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | refunded: Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
    chargeRefunded :: GHC.Types.Bool,
    -- | refunds: A list of refunds that have been applied to the charge.
    chargeRefunds :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeRefunds'NonNullable)),
    -- | review: ID of the review associated with this charge if one exists.
    chargeReview :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeReview'NonNullableVariants)),
    -- | shipping: Shipping information for the charge.
    chargeShipping :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeShipping'NonNullable)),
    -- | source_transfer: The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https:\/\/stripe.com\/docs\/connect\/destination-charges) for details.
    chargeSourceTransfer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeSourceTransfer'NonNullableVariants)),
    -- | statement_descriptor: For card charges, use \`statement_descriptor_suffix\` instead. Otherwise, you can use this value as the complete description of a charge on your customersâ statements. Must contain at least one letter, maximum 22 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeStatementDescriptor :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | statement_descriptor_suffix: Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor thatâs set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeStatementDescriptorSuffix :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | status: The status of the payment is either \`succeeded\`, \`pending\`, or \`failed\`.
    chargeStatus :: ChargeStatus',
    -- | transfer: ID of the transfer to the \`destination\` account (only applicable if the charge was created using the \`destination\` parameter).
    chargeTransfer :: (GHC.Maybe.Maybe ChargeTransfer'Variants),
    -- | transfer_data: An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https:\/\/stripe.com\/docs\/connect\/destination-charges) for details.
    chargeTransferData :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ChargeTransferData'NonNullable)),
    -- | transfer_group: A string that identifies this transaction as part of a group. See the [Connect documentation](https:\/\/stripe.com\/docs\/connect\/separate-charges-and-transfers\#transfer-options) for details.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeTransferGroup :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Charge where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= chargeAmount obj] : ["amount_captured" Data.Aeson.Types.ToJSON..= chargeAmountCaptured obj] : ["amount_refunded" Data.Aeson.Types.ToJSON..= chargeAmountRefunded obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (chargeApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee" Data.Aeson.Types.ToJSON..=)) (chargeApplicationFee obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (chargeApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance_transaction" Data.Aeson.Types.ToJSON..=)) (chargeBalanceTransaction obj) : ["billing_details" Data.Aeson.Types.ToJSON..= chargeBillingDetails obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("calculated_statement_descriptor" Data.Aeson.Types.ToJSON..=)) (chargeCalculatedStatementDescriptor obj) : ["captured" Data.Aeson.Types.ToJSON..= chargeCaptured obj] : ["created" Data.Aeson.Types.ToJSON..= chargeCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= chargeCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (chargeCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (chargeDescription obj) : ["disputed" Data.Aeson.Types.ToJSON..= chargeDisputed obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_balance_transaction" Data.Aeson.Types.ToJSON..=)) (chargeFailureBalanceTransaction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_code" Data.Aeson.Types.ToJSON..=)) (chargeFailureCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_message" Data.Aeson.Types.ToJSON..=)) (chargeFailureMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraud_details" Data.Aeson.Types.ToJSON..=)) (chargeFraudDetails obj) : ["id" Data.Aeson.Types.ToJSON..= chargeId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice" Data.Aeson.Types.ToJSON..=)) (chargeInvoice obj) : ["livemode" Data.Aeson.Types.ToJSON..= chargeLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= chargeMetadata obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (chargeOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("outcome" Data.Aeson.Types.ToJSON..=)) (chargeOutcome obj) : ["paid" Data.Aeson.Types.ToJSON..= chargePaid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (chargePaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_details" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("radar_options" Data.Aeson.Types.ToJSON..=)) (chargeRadarOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt_email" Data.Aeson.Types.ToJSON..=)) (chargeReceiptEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt_number" Data.Aeson.Types.ToJSON..=)) (chargeReceiptNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt_url" Data.Aeson.Types.ToJSON..=)) (chargeReceiptUrl obj) : ["refunded" Data.Aeson.Types.ToJSON..= chargeRefunded obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refunds" Data.Aeson.Types.ToJSON..=)) (chargeRefunds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("review" Data.Aeson.Types.ToJSON..=)) (chargeReview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (chargeShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_transfer" Data.Aeson.Types.ToJSON..=)) (chargeSourceTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (chargeStatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix" Data.Aeson.Types.ToJSON..=)) (chargeStatementDescriptorSuffix obj) : ["status" Data.Aeson.Types.ToJSON..= chargeStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer" Data.Aeson.Types.ToJSON..=)) (chargeTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (chargeTransferData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_group" Data.Aeson.Types.ToJSON..=)) (chargeTransferGroup obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "charge"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= chargeAmount obj] : ["amount_captured" Data.Aeson.Types.ToJSON..= chargeAmountCaptured obj] : ["amount_refunded" Data.Aeson.Types.ToJSON..= chargeAmountRefunded obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (chargeApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee" Data.Aeson.Types.ToJSON..=)) (chargeApplicationFee obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (chargeApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("balance_transaction" Data.Aeson.Types.ToJSON..=)) (chargeBalanceTransaction obj) : ["billing_details" Data.Aeson.Types.ToJSON..= chargeBillingDetails obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("calculated_statement_descriptor" Data.Aeson.Types.ToJSON..=)) (chargeCalculatedStatementDescriptor obj) : ["captured" Data.Aeson.Types.ToJSON..= chargeCaptured obj] : ["created" Data.Aeson.Types.ToJSON..= chargeCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= chargeCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (chargeCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (chargeDescription obj) : ["disputed" Data.Aeson.Types.ToJSON..= chargeDisputed obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_balance_transaction" Data.Aeson.Types.ToJSON..=)) (chargeFailureBalanceTransaction obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_code" Data.Aeson.Types.ToJSON..=)) (chargeFailureCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_message" Data.Aeson.Types.ToJSON..=)) (chargeFailureMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraud_details" Data.Aeson.Types.ToJSON..=)) (chargeFraudDetails obj) : ["id" Data.Aeson.Types.ToJSON..= chargeId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice" Data.Aeson.Types.ToJSON..=)) (chargeInvoice obj) : ["livemode" Data.Aeson.Types.ToJSON..= chargeLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= chargeMetadata obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (chargeOnBehalfOf obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("outcome" Data.Aeson.Types.ToJSON..=)) (chargeOutcome obj) : ["paid" Data.Aeson.Types.ToJSON..= chargePaid obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_intent" Data.Aeson.Types.ToJSON..=)) (chargePaymentIntent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("payment_method_details" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("radar_options" Data.Aeson.Types.ToJSON..=)) (chargeRadarOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt_email" Data.Aeson.Types.ToJSON..=)) (chargeReceiptEmail obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt_number" Data.Aeson.Types.ToJSON..=)) (chargeReceiptNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("receipt_url" Data.Aeson.Types.ToJSON..=)) (chargeReceiptUrl obj) : ["refunded" Data.Aeson.Types.ToJSON..= chargeRefunded obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("refunds" Data.Aeson.Types.ToJSON..=)) (chargeRefunds obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("review" Data.Aeson.Types.ToJSON..=)) (chargeReview obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping" Data.Aeson.Types.ToJSON..=)) (chargeShipping obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source_transfer" Data.Aeson.Types.ToJSON..=)) (chargeSourceTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor" Data.Aeson.Types.ToJSON..=)) (chargeStatementDescriptor obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix" Data.Aeson.Types.ToJSON..=)) (chargeStatementDescriptorSuffix obj) : ["status" Data.Aeson.Types.ToJSON..= chargeStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer" Data.Aeson.Types.ToJSON..=)) (chargeTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (chargeTransferData obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_group" Data.Aeson.Types.ToJSON..=)) (chargeTransferGroup obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "charge"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Charge where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Charge" (\obj -> (((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure Charge GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_captured")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_refunded")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "billing_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "calculated_statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "captured")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disputed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failure_balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failure_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failure_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fraud_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "outcome")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "paid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "payment_method_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "radar_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "receipt_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "receipt_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "receipt_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refunded")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "refunds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "review")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "source_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfer_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfer_group"))

-- | Create a new 'Charge' with all required fields.
mkCharge ::
  -- | 'chargeAmount'
  GHC.Types.Int ->
  -- | 'chargeAmountCaptured'
  GHC.Types.Int ->
  -- | 'chargeAmountRefunded'
  GHC.Types.Int ->
  -- | 'chargeBillingDetails'
  BillingDetails ->
  -- | 'chargeCaptured'
  GHC.Types.Bool ->
  -- | 'chargeCreated'
  GHC.Types.Int ->
  -- | 'chargeCurrency'
  Data.Text.Internal.Text ->
  -- | 'chargeDisputed'
  GHC.Types.Bool ->
  -- | 'chargeId'
  Data.Text.Internal.Text ->
  -- | 'chargeLivemode'
  GHC.Types.Bool ->
  -- | 'chargeMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'chargePaid'
  GHC.Types.Bool ->
  -- | 'chargeRefunded'
  GHC.Types.Bool ->
  -- | 'chargeStatus'
  ChargeStatus' ->
  Charge
mkCharge chargeAmount chargeAmountCaptured chargeAmountRefunded chargeBillingDetails chargeCaptured chargeCreated chargeCurrency chargeDisputed chargeId chargeLivemode chargeMetadata chargePaid chargeRefunded chargeStatus =
  Charge
    { chargeAmount = chargeAmount,
      chargeAmountCaptured = chargeAmountCaptured,
      chargeAmountRefunded = chargeAmountRefunded,
      chargeApplication = GHC.Maybe.Nothing,
      chargeApplicationFee = GHC.Maybe.Nothing,
      chargeApplicationFeeAmount = GHC.Maybe.Nothing,
      chargeBalanceTransaction = GHC.Maybe.Nothing,
      chargeBillingDetails = chargeBillingDetails,
      chargeCalculatedStatementDescriptor = GHC.Maybe.Nothing,
      chargeCaptured = chargeCaptured,
      chargeCreated = chargeCreated,
      chargeCurrency = chargeCurrency,
      chargeCustomer = GHC.Maybe.Nothing,
      chargeDescription = GHC.Maybe.Nothing,
      chargeDisputed = chargeDisputed,
      chargeFailureBalanceTransaction = GHC.Maybe.Nothing,
      chargeFailureCode = GHC.Maybe.Nothing,
      chargeFailureMessage = GHC.Maybe.Nothing,
      chargeFraudDetails = GHC.Maybe.Nothing,
      chargeId = chargeId,
      chargeInvoice = GHC.Maybe.Nothing,
      chargeLivemode = chargeLivemode,
      chargeMetadata = chargeMetadata,
      chargeOnBehalfOf = GHC.Maybe.Nothing,
      chargeOutcome = GHC.Maybe.Nothing,
      chargePaid = chargePaid,
      chargePaymentIntent = GHC.Maybe.Nothing,
      chargePaymentMethod = GHC.Maybe.Nothing,
      chargePaymentMethodDetails = GHC.Maybe.Nothing,
      chargeRadarOptions = GHC.Maybe.Nothing,
      chargeReceiptEmail = GHC.Maybe.Nothing,
      chargeReceiptNumber = GHC.Maybe.Nothing,
      chargeReceiptUrl = GHC.Maybe.Nothing,
      chargeRefunded = chargeRefunded,
      chargeRefunds = GHC.Maybe.Nothing,
      chargeReview = GHC.Maybe.Nothing,
      chargeShipping = GHC.Maybe.Nothing,
      chargeSourceTransfer = GHC.Maybe.Nothing,
      chargeStatementDescriptor = GHC.Maybe.Nothing,
      chargeStatementDescriptorSuffix = GHC.Maybe.Nothing,
      chargeStatus = chargeStatus,
      chargeTransfer = GHC.Maybe.Nothing,
      chargeTransferData = GHC.Maybe.Nothing,
      chargeTransferGroup = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.charge.properties.application.anyOf@ in the specification.
--
-- ID of the Connect application that created the charge.
data ChargeApplication'NonNullableVariants
  = ChargeApplication'NonNullableText Data.Text.Internal.Text
  | ChargeApplication'NonNullableApplication Application
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeApplication'NonNullableVariants where
  toJSON (ChargeApplication'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeApplication'NonNullableApplication a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeApplication'NonNullableVariants where
  parseJSON val = case (ChargeApplication'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeApplication'NonNullableApplication Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.charge.properties.application_fee.anyOf@ in the specification.
--
-- The application fee (if any) for the charge. [See the Connect documentation](https:\/\/stripe.com\/docs\/connect\/direct-charges\#collecting-fees) for details.
data ChargeApplicationFee'NonNullableVariants
  = ChargeApplicationFee'NonNullableText Data.Text.Internal.Text
  | ChargeApplicationFee'NonNullableApplicationFee ApplicationFee
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeApplicationFee'NonNullableVariants where
  toJSON (ChargeApplicationFee'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeApplicationFee'NonNullableApplicationFee a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeApplicationFee'NonNullableVariants where
  parseJSON val = case (ChargeApplicationFee'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeApplicationFee'NonNullableApplicationFee Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.charge.properties.balance_transaction.anyOf@ in the specification.
--
-- ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
data ChargeBalanceTransaction'NonNullableVariants
  = ChargeBalanceTransaction'NonNullableText Data.Text.Internal.Text
  | ChargeBalanceTransaction'NonNullableBalanceTransaction BalanceTransaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeBalanceTransaction'NonNullableVariants where
  toJSON (ChargeBalanceTransaction'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeBalanceTransaction'NonNullableBalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeBalanceTransaction'NonNullableVariants where
  parseJSON val = case (ChargeBalanceTransaction'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeBalanceTransaction'NonNullableBalanceTransaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.charge.properties.customer.anyOf@ in the specification.
--
-- ID of the customer this charge is for if one exists.
data ChargeCustomer'NonNullableVariants
  = ChargeCustomer'NonNullableText Data.Text.Internal.Text
  | ChargeCustomer'NonNullableCustomer Customer
  | ChargeCustomer'NonNullableDeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeCustomer'NonNullableVariants where
  toJSON (ChargeCustomer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeCustomer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeCustomer'NonNullableDeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeCustomer'NonNullableVariants where
  parseJSON val = case (ChargeCustomer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeCustomer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeCustomer'NonNullableDeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.charge.properties.failure_balance_transaction.anyOf@ in the specification.
--
-- ID of the balance transaction that describes the reversal of the balance on your account due to payment failure.
data ChargeFailureBalanceTransaction'NonNullableVariants
  = ChargeFailureBalanceTransaction'NonNullableText Data.Text.Internal.Text
  | ChargeFailureBalanceTransaction'NonNullableBalanceTransaction BalanceTransaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeFailureBalanceTransaction'NonNullableVariants where
  toJSON (ChargeFailureBalanceTransaction'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeFailureBalanceTransaction'NonNullableBalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeFailureBalanceTransaction'NonNullableVariants where
  parseJSON val = case (ChargeFailureBalanceTransaction'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeFailureBalanceTransaction'NonNullableBalanceTransaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.charge.properties.fraud_details.anyOf@ in the specification.
--
-- Information on fraud assessments for the charge.
data ChargeFraudDetails'NonNullable = ChargeFraudDetails'NonNullable
  { -- | stripe_report: Assessments from Stripe. If set, the value is \`fraudulent\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeFraudDetails'NonNullableStripeReport :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | user_report: Assessments reported by you. If set, possible values of are \`safe\` and \`fraudulent\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeFraudDetails'NonNullableUserReport :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ChargeFraudDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stripe_report" Data.Aeson.Types.ToJSON..=)) (chargeFraudDetails'NonNullableStripeReport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_report" Data.Aeson.Types.ToJSON..=)) (chargeFraudDetails'NonNullableUserReport obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stripe_report" Data.Aeson.Types.ToJSON..=)) (chargeFraudDetails'NonNullableStripeReport obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_report" Data.Aeson.Types.ToJSON..=)) (chargeFraudDetails'NonNullableUserReport obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ChargeFraudDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeFraudDetails'NonNullable" (\obj -> (GHC.Base.pure ChargeFraudDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stripe_report")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_report"))

-- | Create a new 'ChargeFraudDetails'NonNullable' with all required fields.
mkChargeFraudDetails'NonNullable :: ChargeFraudDetails'NonNullable
mkChargeFraudDetails'NonNullable =
  ChargeFraudDetails'NonNullable
    { chargeFraudDetails'NonNullableStripeReport = GHC.Maybe.Nothing,
      chargeFraudDetails'NonNullableUserReport = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.charge.properties.invoice.anyOf@ in the specification.
--
-- ID of the invoice this charge is for if one exists.
data ChargeInvoice'NonNullableVariants
  = ChargeInvoice'NonNullableText Data.Text.Internal.Text
  | ChargeInvoice'NonNullableInvoice Invoice
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeInvoice'NonNullableVariants where
  toJSON (ChargeInvoice'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeInvoice'NonNullableInvoice a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeInvoice'NonNullableVariants where
  parseJSON val = case (ChargeInvoice'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeInvoice'NonNullableInvoice Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.charge.properties.on_behalf_of.anyOf@ in the specification.
--
-- The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https:\/\/stripe.com\/docs\/connect\/separate-charges-and-transfers) for details.
data ChargeOnBehalfOf'NonNullableVariants
  = ChargeOnBehalfOf'NonNullableText Data.Text.Internal.Text
  | ChargeOnBehalfOf'NonNullableAccount Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeOnBehalfOf'NonNullableVariants where
  toJSON (ChargeOnBehalfOf'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeOnBehalfOf'NonNullableAccount a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeOnBehalfOf'NonNullableVariants where
  parseJSON val = case (ChargeOnBehalfOf'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeOnBehalfOf'NonNullableAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.charge.properties.outcome.anyOf@ in the specification.
--
-- Details about whether the payment was accepted, and why. See [understanding declines](https:\\\/\\\/stripe.com\\\/docs\\\/declines) for details.
data ChargeOutcome'NonNullable = ChargeOutcome'NonNullable
  { -- | network_status: Possible values are \`approved_by_network\`, \`declined_by_network\`, \`not_sent_to_network\`, and \`reversed_after_approval\`. The value \`reversed_after_approval\` indicates the payment was [blocked by Stripe](https:\/\/stripe.com\/docs\/declines\#blocked-payments) after bank authorization, and may temporarily appear as \"pending\" on a cardholder\'s statement.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeOutcome'NonNullableNetworkStatus :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | reason: An enumerated value providing a more detailed explanation of the outcome\'s \`type\`. Charges blocked by Radar\'s default block rule have the value \`highest_risk_level\`. Charges placed in review by Radar\'s default review rule have the value \`elevated_risk_level\`. Charges authorized, blocked, or placed in review by custom rules have the value \`rule\`. See [understanding declines](https:\/\/stripe.com\/docs\/declines) for more details.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeOutcome'NonNullableReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | risk_level: Stripe Radar\'s evaluation of the riskiness of the payment. Possible values for evaluated payments are \`normal\`, \`elevated\`, \`highest\`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value \`not_assessed\`. In the event of an error in the evaluation, this field will have the value \`unknown\`. This field is only available with Radar.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeOutcome'NonNullableRiskLevel :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | risk_score: Stripe Radar\'s evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
    chargeOutcome'NonNullableRiskScore :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | rule: The ID of the Radar rule that matched the payment, if applicable.
    chargeOutcome'NonNullableRule :: (GHC.Maybe.Maybe ChargeOutcome'NonNullableRule'Variants),
    -- | seller_message: A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeOutcome'NonNullableSellerMessage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | type: Possible values are \`authorized\`, \`manual_review\`, \`issuer_declined\`, \`blocked\`, and \`invalid\`. See [understanding declines](https:\/\/stripe.com\/docs\/declines) and [Radar reviews](https:\/\/stripe.com\/docs\/radar\/reviews) for details.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeOutcome'NonNullableType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ChargeOutcome'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_status" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableNetworkStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("risk_level" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableRiskLevel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("risk_score" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableRiskScore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rule" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableRule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("seller_message" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableSellerMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_status" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableNetworkStatus obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reason" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("risk_level" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableRiskLevel obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("risk_score" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableRiskScore obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("rule" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableRule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("seller_message" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableSellerMessage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (chargeOutcome'NonNullableType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ChargeOutcome'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeOutcome'NonNullable" (\obj -> ((((((GHC.Base.pure ChargeOutcome'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network_status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "risk_level")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "risk_score")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "rule")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "seller_message")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'ChargeOutcome'NonNullable' with all required fields.
mkChargeOutcome'NonNullable :: ChargeOutcome'NonNullable
mkChargeOutcome'NonNullable =
  ChargeOutcome'NonNullable
    { chargeOutcome'NonNullableNetworkStatus = GHC.Maybe.Nothing,
      chargeOutcome'NonNullableReason = GHC.Maybe.Nothing,
      chargeOutcome'NonNullableRiskLevel = GHC.Maybe.Nothing,
      chargeOutcome'NonNullableRiskScore = GHC.Maybe.Nothing,
      chargeOutcome'NonNullableRule = GHC.Maybe.Nothing,
      chargeOutcome'NonNullableSellerMessage = GHC.Maybe.Nothing,
      chargeOutcome'NonNullableType = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.charge.properties.outcome.anyOf.properties.rule.anyOf@ in the specification.
--
-- The ID of the Radar rule that matched the payment, if applicable.
data ChargeOutcome'NonNullableRule'Variants
  = ChargeOutcome'NonNullableRule'Text Data.Text.Internal.Text
  | ChargeOutcome'NonNullableRule'Rule Rule
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeOutcome'NonNullableRule'Variants where
  toJSON (ChargeOutcome'NonNullableRule'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeOutcome'NonNullableRule'Rule a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeOutcome'NonNullableRule'Variants where
  parseJSON val = case (ChargeOutcome'NonNullableRule'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeOutcome'NonNullableRule'Rule Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.charge.properties.payment_intent.anyOf@ in the specification.
--
-- ID of the PaymentIntent associated with this charge, if one exists.
data ChargePaymentIntent'NonNullableVariants
  = ChargePaymentIntent'NonNullableText Data.Text.Internal.Text
  | ChargePaymentIntent'NonNullablePaymentIntent PaymentIntent
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargePaymentIntent'NonNullableVariants where
  toJSON (ChargePaymentIntent'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargePaymentIntent'NonNullablePaymentIntent a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargePaymentIntent'NonNullableVariants where
  parseJSON val = case (ChargePaymentIntent'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargePaymentIntent'NonNullablePaymentIntent Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.charge.properties.payment_method_details.anyOf@ in the specification.
--
-- Details about the payment method at the time of the transaction.
data ChargePaymentMethodDetails'NonNullable = ChargePaymentMethodDetails'NonNullable
  { -- | ach_credit_transfer:
    chargePaymentMethodDetails'NonNullableAchCreditTransfer :: (GHC.Maybe.Maybe PaymentMethodDetailsAchCreditTransfer),
    -- | ach_debit:
    chargePaymentMethodDetails'NonNullableAchDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsAchDebit),
    -- | acss_debit:
    chargePaymentMethodDetails'NonNullableAcssDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsAcssDebit),
    -- | affirm:
    chargePaymentMethodDetails'NonNullableAffirm :: (GHC.Maybe.Maybe PaymentMethodDetailsAffirm),
    -- | afterpay_clearpay:
    chargePaymentMethodDetails'NonNullableAfterpayClearpay :: (GHC.Maybe.Maybe PaymentMethodDetailsAfterpayClearpay),
    -- | alipay:
    chargePaymentMethodDetails'NonNullableAlipay :: (GHC.Maybe.Maybe PaymentFlowsPrivatePaymentMethodsAlipayDetails),
    -- | au_becs_debit:
    chargePaymentMethodDetails'NonNullableAuBecsDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsAuBecsDebit),
    -- | bacs_debit:
    chargePaymentMethodDetails'NonNullableBacsDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsBacsDebit),
    -- | bancontact:
    chargePaymentMethodDetails'NonNullableBancontact :: (GHC.Maybe.Maybe PaymentMethodDetailsBancontact),
    -- | blik:
    chargePaymentMethodDetails'NonNullableBlik :: (GHC.Maybe.Maybe PaymentMethodDetailsBlik),
    -- | boleto:
    chargePaymentMethodDetails'NonNullableBoleto :: (GHC.Maybe.Maybe PaymentMethodDetailsBoleto),
    -- | card:
    chargePaymentMethodDetails'NonNullableCard :: (GHC.Maybe.Maybe PaymentMethodDetailsCard),
    -- | card_present:
    chargePaymentMethodDetails'NonNullableCardPresent :: (GHC.Maybe.Maybe PaymentMethodDetailsCardPresent),
    -- | cashapp:
    chargePaymentMethodDetails'NonNullableCashapp :: (GHC.Maybe.Maybe PaymentMethodDetailsCashapp),
    -- | customer_balance:
    chargePaymentMethodDetails'NonNullableCustomerBalance :: (GHC.Maybe.Maybe PaymentMethodDetailsCustomerBalance),
    -- | eps:
    chargePaymentMethodDetails'NonNullableEps :: (GHC.Maybe.Maybe PaymentMethodDetailsEps),
    -- | fpx:
    chargePaymentMethodDetails'NonNullableFpx :: (GHC.Maybe.Maybe PaymentMethodDetailsFpx),
    -- | giropay:
    chargePaymentMethodDetails'NonNullableGiropay :: (GHC.Maybe.Maybe PaymentMethodDetailsGiropay),
    -- | grabpay:
    chargePaymentMethodDetails'NonNullableGrabpay :: (GHC.Maybe.Maybe PaymentMethodDetailsGrabpay),
    -- | ideal:
    chargePaymentMethodDetails'NonNullableIdeal :: (GHC.Maybe.Maybe PaymentMethodDetailsIdeal),
    -- | interac_present:
    chargePaymentMethodDetails'NonNullableInteracPresent :: (GHC.Maybe.Maybe PaymentMethodDetailsInteracPresent),
    -- | klarna:
    chargePaymentMethodDetails'NonNullableKlarna :: (GHC.Maybe.Maybe PaymentMethodDetailsKlarna),
    -- | konbini:
    chargePaymentMethodDetails'NonNullableKonbini :: (GHC.Maybe.Maybe PaymentMethodDetailsKonbini),
    -- | link:
    chargePaymentMethodDetails'NonNullableLink :: (GHC.Maybe.Maybe PaymentMethodDetailsLink),
    -- | multibanco:
    chargePaymentMethodDetails'NonNullableMultibanco :: (GHC.Maybe.Maybe PaymentMethodDetailsMultibanco),
    -- | oxxo:
    chargePaymentMethodDetails'NonNullableOxxo :: (GHC.Maybe.Maybe PaymentMethodDetailsOxxo),
    -- | p24:
    chargePaymentMethodDetails'NonNullableP24 :: (GHC.Maybe.Maybe PaymentMethodDetailsP24),
    -- | paynow:
    chargePaymentMethodDetails'NonNullablePaynow :: (GHC.Maybe.Maybe PaymentMethodDetailsPaynow),
    -- | paypal:
    chargePaymentMethodDetails'NonNullablePaypal :: (GHC.Maybe.Maybe PaymentMethodDetailsPaypal),
    -- | pix:
    chargePaymentMethodDetails'NonNullablePix :: (GHC.Maybe.Maybe PaymentMethodDetailsPix),
    -- | promptpay:
    chargePaymentMethodDetails'NonNullablePromptpay :: (GHC.Maybe.Maybe PaymentMethodDetailsPromptpay),
    -- | revolut_pay:
    chargePaymentMethodDetails'NonNullableRevolutPay :: (GHC.Maybe.Maybe PaymentMethodDetailsRevolutPay),
    -- | sepa_debit:
    chargePaymentMethodDetails'NonNullableSepaDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsSepaDebit),
    -- | sofort:
    chargePaymentMethodDetails'NonNullableSofort :: (GHC.Maybe.Maybe PaymentMethodDetailsSofort),
    -- | stripe_account:
    chargePaymentMethodDetails'NonNullableStripeAccount :: (GHC.Maybe.Maybe PaymentMethodDetailsStripeAccount),
    -- | type: The type of transaction-specific details of the payment method used in the payment, one of \`ach_credit_transfer\`, \`ach_debit\`, \`acss_debit\`, \`alipay\`, \`au_becs_debit\`, \`bancontact\`, \`card\`, \`card_present\`, \`eps\`, \`giropay\`, \`ideal\`, \`klarna\`, \`multibanco\`, \`p24\`, \`sepa_debit\`, \`sofort\`, \`stripe_account\`, or \`wechat\`.
    -- An additional hash is included on \`payment_method_details\` with a name matching this value.
    -- It contains information specific to the payment method.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargePaymentMethodDetails'NonNullableType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | us_bank_account:
    chargePaymentMethodDetails'NonNullableUsBankAccount :: (GHC.Maybe.Maybe PaymentMethodDetailsUsBankAccount),
    -- | wechat:
    chargePaymentMethodDetails'NonNullableWechat :: (GHC.Maybe.Maybe PaymentMethodDetailsWechat),
    -- | wechat_pay:
    chargePaymentMethodDetails'NonNullableWechatPay :: (GHC.Maybe.Maybe PaymentMethodDetailsWechatPay),
    -- | zip:
    chargePaymentMethodDetails'NonNullableZip :: (GHC.Maybe.Maybe PaymentMethodDetailsZip)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ChargePaymentMethodDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_credit_transfer" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAchCreditTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAchDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("affirm" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAffirm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("afterpay_clearpay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAfterpayClearpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAlipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableBacsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableBancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("blik" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableBlik obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableBoleto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableCardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableCashapp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_balance" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableCustomerBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableEps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fpx" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableFpx obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableGiropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("grabpay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableGrabpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableIdeal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interac_present" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableInteracPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableKlarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableKonbini obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableLink obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableMultibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableOxxo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableP24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullablePaynow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paypal" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullablePaypal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pix" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullablePix obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullablePromptpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revolut_pay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableRevolutPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableSepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableSofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stripe_account" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableStripeAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableUsBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableWechat obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableWechatPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zip" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableZip obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_credit_transfer" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAchCreditTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ach_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAchDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("affirm" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAffirm obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("afterpay_clearpay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAfterpayClearpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alipay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAlipay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableAuBecsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableBacsDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableBancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("blik" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableBlik obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableBoleto obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_present" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableCardPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableCashapp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_balance" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableCustomerBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableEps obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fpx" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableFpx obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableGiropay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("grabpay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableGrabpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableIdeal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interac_present" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableInteracPresent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableKlarna obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableKonbini obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableLink obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multibanco" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableMultibanco obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableOxxo obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableP24 obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullablePaynow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paypal" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullablePaypal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("pix" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullablePix obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullablePromptpay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revolut_pay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableRevolutPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableSepaDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableSofort obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("stripe_account" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableStripeAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableUsBankAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableWechat obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wechat_pay" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableWechatPay obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zip" Data.Aeson.Types.ToJSON..=)) (chargePaymentMethodDetails'NonNullableZip obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ChargePaymentMethodDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargePaymentMethodDetails'NonNullable" (\obj -> (((((((((((((((((((((((((((((((((((((((GHC.Base.pure ChargePaymentMethodDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "affirm")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "afterpay_clearpay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "au_becs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bacs_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "blik")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "boleto")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashapp")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fpx")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "grabpay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interac_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "konbini")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "link")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "oxxo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "paynow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "paypal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "pix")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "promptpay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "revolut_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "stripe_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us_bank_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wechat_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zip"))

-- | Create a new 'ChargePaymentMethodDetails'NonNullable' with all required fields.
mkChargePaymentMethodDetails'NonNullable :: ChargePaymentMethodDetails'NonNullable
mkChargePaymentMethodDetails'NonNullable =
  ChargePaymentMethodDetails'NonNullable
    { chargePaymentMethodDetails'NonNullableAchCreditTransfer = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableAchDebit = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableAcssDebit = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableAffirm = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableAfterpayClearpay = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableAlipay = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableAuBecsDebit = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableBacsDebit = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableBancontact = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableBlik = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableBoleto = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableCard = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableCardPresent = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableCashapp = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableCustomerBalance = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableEps = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableFpx = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableGiropay = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableGrabpay = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableIdeal = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableInteracPresent = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableKlarna = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableKonbini = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableLink = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableMultibanco = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableOxxo = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableP24 = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullablePaynow = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullablePaypal = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullablePix = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullablePromptpay = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableRevolutPay = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableSepaDebit = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableSofort = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableStripeAccount = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableType = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableUsBankAccount = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableWechat = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableWechatPay = GHC.Maybe.Nothing,
      chargePaymentMethodDetails'NonNullableZip = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.charge.properties.refunds@ in the specification.
--
-- A list of refunds that have been applied to the charge.
data ChargeRefunds'NonNullable = ChargeRefunds'NonNullable
  { -- | data: Details about each object.
    chargeRefunds'NonNullableData :: ([Refund]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    chargeRefunds'NonNullableHasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeRefunds'NonNullableUrl :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ChargeRefunds'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= chargeRefunds'NonNullableData obj] : ["has_more" Data.Aeson.Types.ToJSON..= chargeRefunds'NonNullableHasMore obj] : ["url" Data.Aeson.Types.ToJSON..= chargeRefunds'NonNullableUrl obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= chargeRefunds'NonNullableData obj] : ["has_more" Data.Aeson.Types.ToJSON..= chargeRefunds'NonNullableHasMore obj] : ["url" Data.Aeson.Types.ToJSON..= chargeRefunds'NonNullableUrl obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ChargeRefunds'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeRefunds'NonNullable" (\obj -> ((GHC.Base.pure ChargeRefunds'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'ChargeRefunds'NonNullable' with all required fields.
mkChargeRefunds'NonNullable ::
  -- | 'chargeRefunds'NonNullableData'
  [Refund] ->
  -- | 'chargeRefunds'NonNullableHasMore'
  GHC.Types.Bool ->
  -- | 'chargeRefunds'NonNullableUrl'
  Data.Text.Internal.Text ->
  ChargeRefunds'NonNullable
mkChargeRefunds'NonNullable chargeRefunds'NonNullableData chargeRefunds'NonNullableHasMore chargeRefunds'NonNullableUrl =
  ChargeRefunds'NonNullable
    { chargeRefunds'NonNullableData = chargeRefunds'NonNullableData,
      chargeRefunds'NonNullableHasMore = chargeRefunds'NonNullableHasMore,
      chargeRefunds'NonNullableUrl = chargeRefunds'NonNullableUrl
    }

-- | Defines the oneOf schema located at @components.schemas.charge.properties.review.anyOf@ in the specification.
--
-- ID of the review associated with this charge if one exists.
data ChargeReview'NonNullableVariants
  = ChargeReview'NonNullableText Data.Text.Internal.Text
  | ChargeReview'NonNullableReview Review
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeReview'NonNullableVariants where
  toJSON (ChargeReview'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeReview'NonNullableReview a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeReview'NonNullableVariants where
  parseJSON val = case (ChargeReview'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeReview'NonNullableReview Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.charge.properties.shipping.anyOf@ in the specification.
--
-- Shipping information for the charge.
data ChargeShipping'NonNullable = ChargeShipping'NonNullable
  { -- | address:
    chargeShipping'NonNullableAddress :: (GHC.Maybe.Maybe Address),
    -- | carrier: The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeShipping'NonNullableCarrier :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | name: Recipient name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeShipping'NonNullableName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone: Recipient phone (including extension).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeShipping'NonNullablePhone :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | tracking_number: The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    chargeShipping'NonNullableTrackingNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ChargeShipping'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("carrier" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullableCarrier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tracking_number" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullableTrackingNumber obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("address" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullableAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("carrier" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullableCarrier obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullableName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullablePhone obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tracking_number" Data.Aeson.Types.ToJSON..=)) (chargeShipping'NonNullableTrackingNumber obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ChargeShipping'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeShipping'NonNullable" (\obj -> ((((GHC.Base.pure ChargeShipping'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tracking_number"))

-- | Create a new 'ChargeShipping'NonNullable' with all required fields.
mkChargeShipping'NonNullable :: ChargeShipping'NonNullable
mkChargeShipping'NonNullable =
  ChargeShipping'NonNullable
    { chargeShipping'NonNullableAddress = GHC.Maybe.Nothing,
      chargeShipping'NonNullableCarrier = GHC.Maybe.Nothing,
      chargeShipping'NonNullableName = GHC.Maybe.Nothing,
      chargeShipping'NonNullablePhone = GHC.Maybe.Nothing,
      chargeShipping'NonNullableTrackingNumber = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.charge.properties.source_transfer.anyOf@ in the specification.
--
-- The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https:\/\/stripe.com\/docs\/connect\/destination-charges) for details.
data ChargeSourceTransfer'NonNullableVariants
  = ChargeSourceTransfer'NonNullableText Data.Text.Internal.Text
  | ChargeSourceTransfer'NonNullableTransfer Transfer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeSourceTransfer'NonNullableVariants where
  toJSON (ChargeSourceTransfer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeSourceTransfer'NonNullableTransfer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeSourceTransfer'NonNullableVariants where
  parseJSON val = case (ChargeSourceTransfer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeSourceTransfer'NonNullableTransfer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.charge.properties.status@ in the specification.
--
-- The status of the payment is either \`succeeded\`, \`pending\`, or \`failed\`.
data ChargeStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ChargeStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ChargeStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"failed"@
    ChargeStatus'EnumFailed
  | -- | Represents the JSON value @"pending"@
    ChargeStatus'EnumPending
  | -- | Represents the JSON value @"succeeded"@
    ChargeStatus'EnumSucceeded
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeStatus' where
  toJSON (ChargeStatus'Other val) = val
  toJSON (ChargeStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ChargeStatus'EnumFailed) = "failed"
  toJSON (ChargeStatus'EnumPending) = "pending"
  toJSON (ChargeStatus'EnumSucceeded) = "succeeded"

instance Data.Aeson.Types.FromJSON.FromJSON ChargeStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "failed" -> ChargeStatus'EnumFailed
            | val GHC.Classes.== "pending" -> ChargeStatus'EnumPending
            | val GHC.Classes.== "succeeded" -> ChargeStatus'EnumSucceeded
            | GHC.Base.otherwise -> ChargeStatus'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.charge.properties.transfer.anyOf@ in the specification.
--
-- ID of the transfer to the \`destination\` account (only applicable if the charge was created using the \`destination\` parameter).
data ChargeTransfer'Variants
  = ChargeTransfer'Text Data.Text.Internal.Text
  | ChargeTransfer'Transfer Transfer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeTransfer'Variants where
  toJSON (ChargeTransfer'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeTransfer'Transfer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeTransfer'Variants where
  parseJSON val = case (ChargeTransfer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeTransfer'Transfer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.charge.properties.transfer_data.anyOf@ in the specification.
--
-- An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https:\\\/\\\/stripe.com\\\/docs\\\/connect\\\/destination-charges) for details.
data ChargeTransferData'NonNullable = ChargeTransferData'NonNullable
  { -- | amount: The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
    chargeTransferData'NonNullableAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | destination: ID of an existing, connected Stripe account to transfer funds to if \`transfer_data\` was specified in the charge request.
    chargeTransferData'NonNullableDestination :: (GHC.Maybe.Maybe ChargeTransferData'NonNullableDestination'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ChargeTransferData'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (chargeTransferData'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination" Data.Aeson.Types.ToJSON..=)) (chargeTransferData'NonNullableDestination obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (chargeTransferData'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination" Data.Aeson.Types.ToJSON..=)) (chargeTransferData'NonNullableDestination obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ChargeTransferData'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ChargeTransferData'NonNullable" (\obj -> (GHC.Base.pure ChargeTransferData'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "destination"))

-- | Create a new 'ChargeTransferData'NonNullable' with all required fields.
mkChargeTransferData'NonNullable :: ChargeTransferData'NonNullable
mkChargeTransferData'NonNullable =
  ChargeTransferData'NonNullable
    { chargeTransferData'NonNullableAmount = GHC.Maybe.Nothing,
      chargeTransferData'NonNullableDestination = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.charge.properties.transfer_data.anyOf.properties.destination.anyOf@ in the specification.
--
-- ID of an existing, connected Stripe account to transfer funds to if \`transfer_data\` was specified in the charge request.
data ChargeTransferData'NonNullableDestination'Variants
  = ChargeTransferData'NonNullableDestination'Text Data.Text.Internal.Text
  | ChargeTransferData'NonNullableDestination'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ChargeTransferData'NonNullableDestination'Variants where
  toJSON (ChargeTransferData'NonNullableDestination'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ChargeTransferData'NonNullableDestination'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ChargeTransferData'NonNullableDestination'Variants where
  parseJSON val = case (ChargeTransferData'NonNullableDestination'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ChargeTransferData'NonNullableDestination'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
