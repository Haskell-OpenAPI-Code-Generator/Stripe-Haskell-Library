{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema PaymentMethodFpx
module StripeAPI.Types.PaymentMethodFpx where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema payment_method_fpx
data PaymentMethodFpx
  = PaymentMethodFpx
      { -- | bank: The customer\'s bank, if provided. Can be one of \`affin_bank\`, \`alliance_bank\`, \`ambank\`, \`bank_islam\`, \`bank_muamalat\`, \`bank_rakyat\`, \`bsn\`, \`cimb\`, \`hong_leong_bank\`, \`hsbc\`, \`kfh\`, \`maybank2u\`, \`ocbc\`, \`public_bank\`, \`rhb\`, \`standard_chartered\`, \`uob\`, \`deutsche_bank\`, \`maybank2e\`, or \`pb_enterprise\`.
        paymentMethodFpxBank :: PaymentMethodFpxBank'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodFpx where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "bank" (paymentMethodFpxBank obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "bank" (paymentMethodFpxBank obj))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodFpx where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodFpx" (\obj -> GHC.Base.pure PaymentMethodFpx GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bank"))

-- | Defines the enum schema payment_method_fpxBank\'
--
-- The customer\'s bank, if provided. Can be one of \`affin_bank\`, \`alliance_bank\`, \`ambank\`, \`bank_islam\`, \`bank_muamalat\`, \`bank_rakyat\`, \`bsn\`, \`cimb\`, \`hong_leong_bank\`, \`hsbc\`, \`kfh\`, \`maybank2u\`, \`ocbc\`, \`public_bank\`, \`rhb\`, \`standard_chartered\`, \`uob\`, \`deutsche_bank\`, \`maybank2e\`, or \`pb_enterprise\`.
data PaymentMethodFpxBank'
  = PaymentMethodFpxBank'EnumOther Data.Aeson.Types.Internal.Value
  | PaymentMethodFpxBank'EnumTyped Data.Text.Internal.Text
  | PaymentMethodFpxBank'EnumStringAffinBank
  | PaymentMethodFpxBank'EnumStringAllianceBank
  | PaymentMethodFpxBank'EnumStringAmbank
  | PaymentMethodFpxBank'EnumStringBankIslam
  | PaymentMethodFpxBank'EnumStringBankMuamalat
  | PaymentMethodFpxBank'EnumStringBankRakyat
  | PaymentMethodFpxBank'EnumStringBsn
  | PaymentMethodFpxBank'EnumStringCimb
  | PaymentMethodFpxBank'EnumStringDeutscheBank
  | PaymentMethodFpxBank'EnumStringHongLeongBank
  | PaymentMethodFpxBank'EnumStringHsbc
  | PaymentMethodFpxBank'EnumStringKfh
  | PaymentMethodFpxBank'EnumStringMaybank2e
  | PaymentMethodFpxBank'EnumStringMaybank2u
  | PaymentMethodFpxBank'EnumStringOcbc
  | PaymentMethodFpxBank'EnumStringPbEnterprise
  | PaymentMethodFpxBank'EnumStringPublicBank
  | PaymentMethodFpxBank'EnumStringRhb
  | PaymentMethodFpxBank'EnumStringStandardChartered
  | PaymentMethodFpxBank'EnumStringUob
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodFpxBank' where
  toJSON (PaymentMethodFpxBank'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PaymentMethodFpxBank'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PaymentMethodFpxBank'EnumStringAffinBank) = "affin_bank"
  toJSON (PaymentMethodFpxBank'EnumStringAllianceBank) = "alliance_bank"
  toJSON (PaymentMethodFpxBank'EnumStringAmbank) = "ambank"
  toJSON (PaymentMethodFpxBank'EnumStringBankIslam) = "bank_islam"
  toJSON (PaymentMethodFpxBank'EnumStringBankMuamalat) = "bank_muamalat"
  toJSON (PaymentMethodFpxBank'EnumStringBankRakyat) = "bank_rakyat"
  toJSON (PaymentMethodFpxBank'EnumStringBsn) = "bsn"
  toJSON (PaymentMethodFpxBank'EnumStringCimb) = "cimb"
  toJSON (PaymentMethodFpxBank'EnumStringDeutscheBank) = "deutsche_bank"
  toJSON (PaymentMethodFpxBank'EnumStringHongLeongBank) = "hong_leong_bank"
  toJSON (PaymentMethodFpxBank'EnumStringHsbc) = "hsbc"
  toJSON (PaymentMethodFpxBank'EnumStringKfh) = "kfh"
  toJSON (PaymentMethodFpxBank'EnumStringMaybank2e) = "maybank2e"
  toJSON (PaymentMethodFpxBank'EnumStringMaybank2u) = "maybank2u"
  toJSON (PaymentMethodFpxBank'EnumStringOcbc) = "ocbc"
  toJSON (PaymentMethodFpxBank'EnumStringPbEnterprise) = "pb_enterprise"
  toJSON (PaymentMethodFpxBank'EnumStringPublicBank) = "public_bank"
  toJSON (PaymentMethodFpxBank'EnumStringRhb) = "rhb"
  toJSON (PaymentMethodFpxBank'EnumStringStandardChartered) = "standard_chartered"
  toJSON (PaymentMethodFpxBank'EnumStringUob) = "uob"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodFpxBank' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "affin_bank" -> PaymentMethodFpxBank'EnumStringAffinBank
            | val GHC.Classes.== "alliance_bank" -> PaymentMethodFpxBank'EnumStringAllianceBank
            | val GHC.Classes.== "ambank" -> PaymentMethodFpxBank'EnumStringAmbank
            | val GHC.Classes.== "bank_islam" -> PaymentMethodFpxBank'EnumStringBankIslam
            | val GHC.Classes.== "bank_muamalat" -> PaymentMethodFpxBank'EnumStringBankMuamalat
            | val GHC.Classes.== "bank_rakyat" -> PaymentMethodFpxBank'EnumStringBankRakyat
            | val GHC.Classes.== "bsn" -> PaymentMethodFpxBank'EnumStringBsn
            | val GHC.Classes.== "cimb" -> PaymentMethodFpxBank'EnumStringCimb
            | val GHC.Classes.== "deutsche_bank" -> PaymentMethodFpxBank'EnumStringDeutscheBank
            | val GHC.Classes.== "hong_leong_bank" -> PaymentMethodFpxBank'EnumStringHongLeongBank
            | val GHC.Classes.== "hsbc" -> PaymentMethodFpxBank'EnumStringHsbc
            | val GHC.Classes.== "kfh" -> PaymentMethodFpxBank'EnumStringKfh
            | val GHC.Classes.== "maybank2e" -> PaymentMethodFpxBank'EnumStringMaybank2e
            | val GHC.Classes.== "maybank2u" -> PaymentMethodFpxBank'EnumStringMaybank2u
            | val GHC.Classes.== "ocbc" -> PaymentMethodFpxBank'EnumStringOcbc
            | val GHC.Classes.== "pb_enterprise" -> PaymentMethodFpxBank'EnumStringPbEnterprise
            | val GHC.Classes.== "public_bank" -> PaymentMethodFpxBank'EnumStringPublicBank
            | val GHC.Classes.== "rhb" -> PaymentMethodFpxBank'EnumStringRhb
            | val GHC.Classes.== "standard_chartered" -> PaymentMethodFpxBank'EnumStringStandardChartered
            | val GHC.Classes.== "uob" -> PaymentMethodFpxBank'EnumStringUob
            | GHC.Base.otherwise -> PaymentMethodFpxBank'EnumOther val
      )
