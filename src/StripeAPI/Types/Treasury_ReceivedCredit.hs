{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Treasury_ReceivedCredit
module StripeAPI.Types.Treasury_ReceivedCredit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.TreasuryReceivedCreditsResourceLinkedFlows
import {-# SOURCE #-} StripeAPI.Types.TreasuryReceivedCreditsResourceReversalDetails
import {-# SOURCE #-} StripeAPI.Types.TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
import {-# SOURCE #-} StripeAPI.Types.Treasury_Transaction
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.treasury.received_credit@ in the specification.
--
-- ReceivedCredits represent funds sent to a [FinancialAccount](https:\/\/stripe.com\/docs\/api\#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
data Treasury'receivedCredit = Treasury'receivedCredit
  { -- | amount: Amount (in cents) transferred.
    treasury'receivedCreditAmount :: GHC.Types.Int,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    treasury'receivedCreditCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    treasury'receivedCreditCurrency :: Data.Text.Internal.Text,
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'receivedCreditDescription :: Data.Text.Internal.Text,
    -- | failure_code: Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.
    treasury'receivedCreditFailureCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'receivedCreditFailureCode'NonNullable)),
    -- | financial_account: The FinancialAccount that received the funds.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'receivedCreditFinancialAccount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | hosted_regulatory_receipt_url: A [hosted transaction receipt](https:\/\/stripe.com\/docs\/treasury\/moving-money\/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe\'s money transmission licenses.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'receivedCreditHostedRegulatoryReceiptUrl :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'receivedCreditId :: Data.Text.Internal.Text,
    -- | initiating_payment_method_details:
    treasury'receivedCreditInitiatingPaymentMethodDetails :: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails,
    -- | linked_flows:
    treasury'receivedCreditLinkedFlows :: TreasuryReceivedCreditsResourceLinkedFlows,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    treasury'receivedCreditLivemode :: GHC.Types.Bool,
    -- | network: The rails used to send the funds.
    treasury'receivedCreditNetwork :: Treasury'receivedCreditNetwork',
    -- | reversal_details: Details describing when a ReceivedCredit may be reversed.
    treasury'receivedCreditReversalDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'receivedCreditReversalDetails'NonNullable)),
    -- | status: Status of the ReceivedCredit. ReceivedCredits are created either \`succeeded\` (approved) or \`failed\` (declined). If a ReceivedCredit is declined, the failure reason can be found in the \`failure_code\` field.
    treasury'receivedCreditStatus :: Treasury'receivedCreditStatus',
    -- | transaction: The Transaction associated with this object.
    treasury'receivedCreditTransaction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'receivedCreditTransaction'NonNullableVariants))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'receivedCredit where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= treasury'receivedCreditAmount obj] : ["created" Data.Aeson.Types.ToJSON..= treasury'receivedCreditCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= treasury'receivedCreditCurrency obj] : ["description" Data.Aeson.Types.ToJSON..= treasury'receivedCreditDescription obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_code" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditFailureCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_account" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditFinancialAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_regulatory_receipt_url" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditHostedRegulatoryReceiptUrl obj) : ["id" Data.Aeson.Types.ToJSON..= treasury'receivedCreditId obj] : ["initiating_payment_method_details" Data.Aeson.Types.ToJSON..= treasury'receivedCreditInitiatingPaymentMethodDetails obj] : ["linked_flows" Data.Aeson.Types.ToJSON..= treasury'receivedCreditLinkedFlows obj] : ["livemode" Data.Aeson.Types.ToJSON..= treasury'receivedCreditLivemode obj] : ["network" Data.Aeson.Types.ToJSON..= treasury'receivedCreditNetwork obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reversal_details" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditReversalDetails obj) : ["status" Data.Aeson.Types.ToJSON..= treasury'receivedCreditStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditTransaction obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "treasury.received_credit"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= treasury'receivedCreditAmount obj] : ["created" Data.Aeson.Types.ToJSON..= treasury'receivedCreditCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= treasury'receivedCreditCurrency obj] : ["description" Data.Aeson.Types.ToJSON..= treasury'receivedCreditDescription obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_code" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditFailureCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_account" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditFinancialAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_regulatory_receipt_url" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditHostedRegulatoryReceiptUrl obj) : ["id" Data.Aeson.Types.ToJSON..= treasury'receivedCreditId obj] : ["initiating_payment_method_details" Data.Aeson.Types.ToJSON..= treasury'receivedCreditInitiatingPaymentMethodDetails obj] : ["linked_flows" Data.Aeson.Types.ToJSON..= treasury'receivedCreditLinkedFlows obj] : ["livemode" Data.Aeson.Types.ToJSON..= treasury'receivedCreditLivemode obj] : ["network" Data.Aeson.Types.ToJSON..= treasury'receivedCreditNetwork obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reversal_details" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditReversalDetails obj) : ["status" Data.Aeson.Types.ToJSON..= treasury'receivedCreditStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditTransaction obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "treasury.received_credit"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'receivedCredit where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Treasury'receivedCredit" (\obj -> ((((((((((((((GHC.Base.pure Treasury'receivedCredit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failure_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "financial_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "hosted_regulatory_receipt_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "initiating_payment_method_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "linked_flows")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reversal_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transaction"))

-- | Create a new 'Treasury'receivedCredit' with all required fields.
mkTreasury'receivedCredit ::
  -- | 'treasury'receivedCreditAmount'
  GHC.Types.Int ->
  -- | 'treasury'receivedCreditCreated'
  GHC.Types.Int ->
  -- | 'treasury'receivedCreditCurrency'
  Data.Text.Internal.Text ->
  -- | 'treasury'receivedCreditDescription'
  Data.Text.Internal.Text ->
  -- | 'treasury'receivedCreditId'
  Data.Text.Internal.Text ->
  -- | 'treasury'receivedCreditInitiatingPaymentMethodDetails'
  TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails ->
  -- | 'treasury'receivedCreditLinkedFlows'
  TreasuryReceivedCreditsResourceLinkedFlows ->
  -- | 'treasury'receivedCreditLivemode'
  GHC.Types.Bool ->
  -- | 'treasury'receivedCreditNetwork'
  Treasury'receivedCreditNetwork' ->
  -- | 'treasury'receivedCreditStatus'
  Treasury'receivedCreditStatus' ->
  Treasury'receivedCredit
mkTreasury'receivedCredit treasury'receivedCreditAmount treasury'receivedCreditCreated treasury'receivedCreditCurrency treasury'receivedCreditDescription treasury'receivedCreditId treasury'receivedCreditInitiatingPaymentMethodDetails treasury'receivedCreditLinkedFlows treasury'receivedCreditLivemode treasury'receivedCreditNetwork treasury'receivedCreditStatus =
  Treasury'receivedCredit
    { treasury'receivedCreditAmount = treasury'receivedCreditAmount,
      treasury'receivedCreditCreated = treasury'receivedCreditCreated,
      treasury'receivedCreditCurrency = treasury'receivedCreditCurrency,
      treasury'receivedCreditDescription = treasury'receivedCreditDescription,
      treasury'receivedCreditFailureCode = GHC.Maybe.Nothing,
      treasury'receivedCreditFinancialAccount = GHC.Maybe.Nothing,
      treasury'receivedCreditHostedRegulatoryReceiptUrl = GHC.Maybe.Nothing,
      treasury'receivedCreditId = treasury'receivedCreditId,
      treasury'receivedCreditInitiatingPaymentMethodDetails = treasury'receivedCreditInitiatingPaymentMethodDetails,
      treasury'receivedCreditLinkedFlows = treasury'receivedCreditLinkedFlows,
      treasury'receivedCreditLivemode = treasury'receivedCreditLivemode,
      treasury'receivedCreditNetwork = treasury'receivedCreditNetwork,
      treasury'receivedCreditReversalDetails = GHC.Maybe.Nothing,
      treasury'receivedCreditStatus = treasury'receivedCreditStatus,
      treasury'receivedCreditTransaction = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.treasury.received_credit.properties.failure_code@ in the specification.
--
-- Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.
data Treasury'receivedCreditFailureCode'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Treasury'receivedCreditFailureCode'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Treasury'receivedCreditFailureCode'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"account_closed"@
    Treasury'receivedCreditFailureCode'NonNullableEnumAccountClosed
  | -- | Represents the JSON value @"account_frozen"@
    Treasury'receivedCreditFailureCode'NonNullableEnumAccountFrozen
  | -- | Represents the JSON value @"other"@
    Treasury'receivedCreditFailureCode'NonNullableEnumOther
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'receivedCreditFailureCode'NonNullable where
  toJSON (Treasury'receivedCreditFailureCode'NonNullableOther val) = val
  toJSON (Treasury'receivedCreditFailureCode'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Treasury'receivedCreditFailureCode'NonNullableEnumAccountClosed) = "account_closed"
  toJSON (Treasury'receivedCreditFailureCode'NonNullableEnumAccountFrozen) = "account_frozen"
  toJSON (Treasury'receivedCreditFailureCode'NonNullableEnumOther) = "other"

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'receivedCreditFailureCode'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "account_closed" -> Treasury'receivedCreditFailureCode'NonNullableEnumAccountClosed
            | val GHC.Classes.== "account_frozen" -> Treasury'receivedCreditFailureCode'NonNullableEnumAccountFrozen
            | val GHC.Classes.== "other" -> Treasury'receivedCreditFailureCode'NonNullableEnumOther
            | GHC.Base.otherwise -> Treasury'receivedCreditFailureCode'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.treasury.received_credit.properties.network@ in the specification.
--
-- The rails used to send the funds.
data Treasury'receivedCreditNetwork'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Treasury'receivedCreditNetwork'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Treasury'receivedCreditNetwork'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"ach"@
    Treasury'receivedCreditNetwork'EnumAch
  | -- | Represents the JSON value @"card"@
    Treasury'receivedCreditNetwork'EnumCard
  | -- | Represents the JSON value @"stripe"@
    Treasury'receivedCreditNetwork'EnumStripe
  | -- | Represents the JSON value @"us_domestic_wire"@
    Treasury'receivedCreditNetwork'EnumUsDomesticWire
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'receivedCreditNetwork' where
  toJSON (Treasury'receivedCreditNetwork'Other val) = val
  toJSON (Treasury'receivedCreditNetwork'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Treasury'receivedCreditNetwork'EnumAch) = "ach"
  toJSON (Treasury'receivedCreditNetwork'EnumCard) = "card"
  toJSON (Treasury'receivedCreditNetwork'EnumStripe) = "stripe"
  toJSON (Treasury'receivedCreditNetwork'EnumUsDomesticWire) = "us_domestic_wire"

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'receivedCreditNetwork' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ach" -> Treasury'receivedCreditNetwork'EnumAch
            | val GHC.Classes.== "card" -> Treasury'receivedCreditNetwork'EnumCard
            | val GHC.Classes.== "stripe" -> Treasury'receivedCreditNetwork'EnumStripe
            | val GHC.Classes.== "us_domestic_wire" -> Treasury'receivedCreditNetwork'EnumUsDomesticWire
            | GHC.Base.otherwise -> Treasury'receivedCreditNetwork'Other val
      )

-- | Defines the object schema located at @components.schemas.treasury.received_credit.properties.reversal_details.anyOf@ in the specification.
--
-- Details describing when a ReceivedCredit may be reversed.
data Treasury'receivedCreditReversalDetails'NonNullable = Treasury'receivedCreditReversalDetails'NonNullable
  { -- | deadline: Time before which a ReceivedCredit can be reversed.
    treasury'receivedCreditReversalDetails'NonNullableDeadline :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | restricted_reason: Set if a ReceivedCredit cannot be reversed.
    treasury'receivedCreditReversalDetails'NonNullableRestrictedReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'receivedCreditReversalDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deadline" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditReversalDetails'NonNullableDeadline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("restricted_reason" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditReversalDetails'NonNullableRestrictedReason obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("deadline" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditReversalDetails'NonNullableDeadline obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("restricted_reason" Data.Aeson.Types.ToJSON..=)) (treasury'receivedCreditReversalDetails'NonNullableRestrictedReason obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'receivedCreditReversalDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Treasury'receivedCreditReversalDetails'NonNullable" (\obj -> (GHC.Base.pure Treasury'receivedCreditReversalDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "deadline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "restricted_reason"))

-- | Create a new 'Treasury'receivedCreditReversalDetails'NonNullable' with all required fields.
mkTreasury'receivedCreditReversalDetails'NonNullable :: Treasury'receivedCreditReversalDetails'NonNullable
mkTreasury'receivedCreditReversalDetails'NonNullable =
  Treasury'receivedCreditReversalDetails'NonNullable
    { treasury'receivedCreditReversalDetails'NonNullableDeadline = GHC.Maybe.Nothing,
      treasury'receivedCreditReversalDetails'NonNullableRestrictedReason = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.treasury.received_credit.properties.reversal_details.anyOf.properties.restricted_reason@ in the specification.
--
-- Set if a ReceivedCredit cannot be reversed.
data Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"already_reversed"@
    Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumAlreadyReversed
  | -- | Represents the JSON value @"deadline_passed"@
    Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumDeadlinePassed
  | -- | Represents the JSON value @"network_restricted"@
    Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumNetworkRestricted
  | -- | Represents the JSON value @"other"@
    Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumOther
  | -- | Represents the JSON value @"source_flow_restricted"@
    Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumSourceFlowRestricted
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullable where
  toJSON (Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableOther val) = val
  toJSON (Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumAlreadyReversed) = "already_reversed"
  toJSON (Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumDeadlinePassed) = "deadline_passed"
  toJSON (Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumNetworkRestricted) = "network_restricted"
  toJSON (Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumOther) = "other"
  toJSON (Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumSourceFlowRestricted) = "source_flow_restricted"

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "already_reversed" -> Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumAlreadyReversed
            | val GHC.Classes.== "deadline_passed" -> Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumDeadlinePassed
            | val GHC.Classes.== "network_restricted" -> Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumNetworkRestricted
            | val GHC.Classes.== "other" -> Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumOther
            | val GHC.Classes.== "source_flow_restricted" -> Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableEnumSourceFlowRestricted
            | GHC.Base.otherwise -> Treasury'receivedCreditReversalDetails'NonNullableRestrictedReason'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.treasury.received_credit.properties.status@ in the specification.
--
-- Status of the ReceivedCredit. ReceivedCredits are created either \`succeeded\` (approved) or \`failed\` (declined). If a ReceivedCredit is declined, the failure reason can be found in the \`failure_code\` field.
data Treasury'receivedCreditStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Treasury'receivedCreditStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Treasury'receivedCreditStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"failed"@
    Treasury'receivedCreditStatus'EnumFailed
  | -- | Represents the JSON value @"succeeded"@
    Treasury'receivedCreditStatus'EnumSucceeded
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'receivedCreditStatus' where
  toJSON (Treasury'receivedCreditStatus'Other val) = val
  toJSON (Treasury'receivedCreditStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Treasury'receivedCreditStatus'EnumFailed) = "failed"
  toJSON (Treasury'receivedCreditStatus'EnumSucceeded) = "succeeded"

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'receivedCreditStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "failed" -> Treasury'receivedCreditStatus'EnumFailed
            | val GHC.Classes.== "succeeded" -> Treasury'receivedCreditStatus'EnumSucceeded
            | GHC.Base.otherwise -> Treasury'receivedCreditStatus'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.treasury.received_credit.properties.transaction.anyOf@ in the specification.
--
-- The Transaction associated with this object.
data Treasury'receivedCreditTransaction'NonNullableVariants
  = Treasury'receivedCreditTransaction'NonNullableText Data.Text.Internal.Text
  | Treasury'receivedCreditTransaction'NonNullableTreasury'transaction Treasury'transaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'receivedCreditTransaction'NonNullableVariants where
  toJSON (Treasury'receivedCreditTransaction'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Treasury'receivedCreditTransaction'NonNullableTreasury'transaction a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'receivedCreditTransaction'NonNullableVariants where
  parseJSON val = case (Treasury'receivedCreditTransaction'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Treasury'receivedCreditTransaction'NonNullableTreasury'transaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
