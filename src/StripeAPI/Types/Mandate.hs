{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Mandate
module StripeAPI.Types.Mandate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CustomerAcceptance
import {-# SOURCE #-} StripeAPI.Types.MandatePaymentMethodDetails
import {-# SOURCE #-} StripeAPI.Types.MandateSingleUse
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema mandate
--
-- A Mandate is a record of the permission a customer has given you to debit their payment method.
data Mandate
  = Mandate
      { -- | customer_acceptance:
        mandateCustomerAcceptance :: CustomerAcceptance,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        mandateId :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        mandateLivemode :: GHC.Types.Bool,
        -- | multi_use:
        mandateMultiUse :: (GHC.Maybe.Maybe MandateMultiUse),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        mandateObject :: MandateObject',
        -- | payment_method: ID of the payment method associated with this mandate.
        mandatePaymentMethod :: MandatePaymentMethod'Variants,
        -- | payment_method_details:
        mandatePaymentMethodDetails :: MandatePaymentMethodDetails,
        -- | single_use:
        mandateSingleUse :: (GHC.Maybe.Maybe MandateSingleUse),
        -- | status: The status of the Mandate, one of \`pending\`, \`inactive\`, or \`active\`. The Mandate can be used to initiate a payment only if status=active.
        mandateStatus :: MandateStatus',
        -- | type: The type of the mandate, one of \`single_use\` or \`multi_use\`
        mandateType :: MandateType'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Mandate where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "customer_acceptance" (mandateCustomerAcceptance obj) : (Data.Aeson..=) "id" (mandateId obj) : (Data.Aeson..=) "livemode" (mandateLivemode obj) : (Data.Aeson..=) "multi_use" (mandateMultiUse obj) : (Data.Aeson..=) "object" (mandateObject obj) : (Data.Aeson..=) "payment_method" (mandatePaymentMethod obj) : (Data.Aeson..=) "payment_method_details" (mandatePaymentMethodDetails obj) : (Data.Aeson..=) "single_use" (mandateSingleUse obj) : (Data.Aeson..=) "status" (mandateStatus obj) : (Data.Aeson..=) "type" (mandateType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "customer_acceptance" (mandateCustomerAcceptance obj) GHC.Base.<> ((Data.Aeson..=) "id" (mandateId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (mandateLivemode obj) GHC.Base.<> ((Data.Aeson..=) "multi_use" (mandateMultiUse obj) GHC.Base.<> ((Data.Aeson..=) "object" (mandateObject obj) GHC.Base.<> ((Data.Aeson..=) "payment_method" (mandatePaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "payment_method_details" (mandatePaymentMethodDetails obj) GHC.Base.<> ((Data.Aeson..=) "single_use" (mandateSingleUse obj) GHC.Base.<> ((Data.Aeson..=) "status" (mandateStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (mandateType obj))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Mandate where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Mandate" (\obj -> (((((((((GHC.Base.pure Mandate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer_acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multi_use")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "single_use")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Defines the enum schema mandateObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data MandateObject'
  = MandateObject'EnumOther Data.Aeson.Types.Internal.Value
  | MandateObject'EnumTyped Data.Text.Internal.Text
  | MandateObject'EnumStringMandate
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON MandateObject' where
  toJSON (MandateObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (MandateObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (MandateObject'EnumStringMandate) = "mandate"

instance Data.Aeson.Types.FromJSON.FromJSON MandateObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "mandate" -> MandateObject'EnumStringMandate
            | GHC.Base.otherwise -> MandateObject'EnumOther val
      )

-- | Define the one-of schema mandatePayment_method\'
--
-- ID of the payment method associated with this mandate.
data MandatePaymentMethod'Variants
  = MandatePaymentMethod'PaymentMethod PaymentMethod
  | MandatePaymentMethod'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON MandatePaymentMethod'Variants where
  toJSON (MandatePaymentMethod'PaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (MandatePaymentMethod'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON MandatePaymentMethod'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ MandatePaymentMethod'PaymentMethod a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ MandatePaymentMethod'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema mandateStatus\'
--
-- The status of the Mandate, one of \`pending\`, \`inactive\`, or \`active\`. The Mandate can be used to initiate a payment only if status=active.
data MandateStatus'
  = MandateStatus'EnumOther Data.Aeson.Types.Internal.Value
  | MandateStatus'EnumTyped Data.Text.Internal.Text
  | MandateStatus'EnumStringActive
  | MandateStatus'EnumStringInactive
  | MandateStatus'EnumStringPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON MandateStatus' where
  toJSON (MandateStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (MandateStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (MandateStatus'EnumStringActive) = "active"
  toJSON (MandateStatus'EnumStringInactive) = "inactive"
  toJSON (MandateStatus'EnumStringPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON MandateStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "active" -> MandateStatus'EnumStringActive
            | val GHC.Classes.== "inactive" -> MandateStatus'EnumStringInactive
            | val GHC.Classes.== "pending" -> MandateStatus'EnumStringPending
            | GHC.Base.otherwise -> MandateStatus'EnumOther val
      )

-- | Defines the enum schema mandateType\'
--
-- The type of the mandate, one of \`single_use\` or \`multi_use\`
data MandateType'
  = MandateType'EnumOther Data.Aeson.Types.Internal.Value
  | MandateType'EnumTyped Data.Text.Internal.Text
  | MandateType'EnumStringMultiUse
  | MandateType'EnumStringSingleUse
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON MandateType' where
  toJSON (MandateType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (MandateType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (MandateType'EnumStringMultiUse) = "multi_use"
  toJSON (MandateType'EnumStringSingleUse) = "single_use"

instance Data.Aeson.Types.FromJSON.FromJSON MandateType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "multi_use" -> MandateType'EnumStringMultiUse
            | val GHC.Classes.== "single_use" -> MandateType'EnumStringSingleUse
            | GHC.Base.otherwise -> MandateType'EnumOther val
      )
