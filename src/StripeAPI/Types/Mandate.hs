{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Mandate
module StripeAPI.Types.Mandate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CustomerAcceptance
import {-# SOURCE #-} StripeAPI.Types.MandatePaymentMethodDetails
import {-# SOURCE #-} StripeAPI.Types.MandateSingleUse
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.mandate@ in the specification.
--
-- A Mandate is a record of the permission a customer has given you to debit their payment method.
data Mandate = Mandate
  { -- | customer_acceptance:
    mandateCustomerAcceptance :: CustomerAcceptance,
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    mandateId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    mandateLivemode :: GHC.Types.Bool,
    -- | multi_use:
    mandateMultiUse :: (GHC.Maybe.Maybe MandateMultiUse),
    -- | payment_method: ID of the payment method associated with this mandate.
    mandatePaymentMethod :: MandatePaymentMethod'Variants,
    -- | payment_method_details:
    mandatePaymentMethodDetails :: MandatePaymentMethodDetails,
    -- | single_use:
    mandateSingleUse :: (GHC.Maybe.Maybe MandateSingleUse),
    -- | status: The status of the mandate, which indicates whether it can be used to initiate a payment.
    mandateStatus :: MandateStatus',
    -- | type: The type of the mandate.
    mandateType :: MandateType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Mandate where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["customer_acceptance" Data.Aeson.Types.ToJSON..= mandateCustomerAcceptance obj] : ["id" Data.Aeson.Types.ToJSON..= mandateId obj] : ["livemode" Data.Aeson.Types.ToJSON..= mandateLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multi_use" Data.Aeson.Types.ToJSON..=)) (mandateMultiUse obj) : ["payment_method" Data.Aeson.Types.ToJSON..= mandatePaymentMethod obj] : ["payment_method_details" Data.Aeson.Types.ToJSON..= mandatePaymentMethodDetails obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("single_use" Data.Aeson.Types.ToJSON..=)) (mandateSingleUse obj) : ["status" Data.Aeson.Types.ToJSON..= mandateStatus obj] : ["type" Data.Aeson.Types.ToJSON..= mandateType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "mandate"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["customer_acceptance" Data.Aeson.Types.ToJSON..= mandateCustomerAcceptance obj] : ["id" Data.Aeson.Types.ToJSON..= mandateId obj] : ["livemode" Data.Aeson.Types.ToJSON..= mandateLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("multi_use" Data.Aeson.Types.ToJSON..=)) (mandateMultiUse obj) : ["payment_method" Data.Aeson.Types.ToJSON..= mandatePaymentMethod obj] : ["payment_method_details" Data.Aeson.Types.ToJSON..= mandatePaymentMethodDetails obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("single_use" Data.Aeson.Types.ToJSON..=)) (mandateSingleUse obj) : ["status" Data.Aeson.Types.ToJSON..= mandateStatus obj] : ["type" Data.Aeson.Types.ToJSON..= mandateType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "mandate"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Mandate where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Mandate" (\obj -> ((((((((GHC.Base.pure Mandate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer_acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "multi_use")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "single_use")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'Mandate' with all required fields.
mkMandate ::
  -- | 'mandateCustomerAcceptance'
  CustomerAcceptance ->
  -- | 'mandateId'
  Data.Text.Internal.Text ->
  -- | 'mandateLivemode'
  GHC.Types.Bool ->
  -- | 'mandatePaymentMethod'
  MandatePaymentMethod'Variants ->
  -- | 'mandatePaymentMethodDetails'
  MandatePaymentMethodDetails ->
  -- | 'mandateStatus'
  MandateStatus' ->
  -- | 'mandateType'
  MandateType' ->
  Mandate
mkMandate mandateCustomerAcceptance mandateId mandateLivemode mandatePaymentMethod mandatePaymentMethodDetails mandateStatus mandateType =
  Mandate
    { mandateCustomerAcceptance = mandateCustomerAcceptance,
      mandateId = mandateId,
      mandateLivemode = mandateLivemode,
      mandateMultiUse = GHC.Maybe.Nothing,
      mandatePaymentMethod = mandatePaymentMethod,
      mandatePaymentMethodDetails = mandatePaymentMethodDetails,
      mandateSingleUse = GHC.Maybe.Nothing,
      mandateStatus = mandateStatus,
      mandateType = mandateType
    }

-- | Defines the oneOf schema located at @components.schemas.mandate.properties.payment_method.anyOf@ in the specification.
--
-- ID of the payment method associated with this mandate.
data MandatePaymentMethod'Variants
  = MandatePaymentMethod'Text Data.Text.Internal.Text
  | MandatePaymentMethod'PaymentMethod PaymentMethod
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON MandatePaymentMethod'Variants where
  toJSON (MandatePaymentMethod'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (MandatePaymentMethod'PaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON MandatePaymentMethod'Variants where
  parseJSON val = case (MandatePaymentMethod'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((MandatePaymentMethod'PaymentMethod Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.mandate.properties.status@ in the specification.
--
-- The status of the mandate, which indicates whether it can be used to initiate a payment.
data MandateStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    MandateStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    MandateStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    MandateStatus'EnumActive
  | -- | Represents the JSON value @"inactive"@
    MandateStatus'EnumInactive
  | -- | Represents the JSON value @"pending"@
    MandateStatus'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON MandateStatus' where
  toJSON (MandateStatus'Other val) = val
  toJSON (MandateStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (MandateStatus'EnumActive) = "active"
  toJSON (MandateStatus'EnumInactive) = "inactive"
  toJSON (MandateStatus'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON MandateStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> MandateStatus'EnumActive
            | val GHC.Classes.== "inactive" -> MandateStatus'EnumInactive
            | val GHC.Classes.== "pending" -> MandateStatus'EnumPending
            | GHC.Base.otherwise -> MandateStatus'Other val
      )

-- | Defines the enum schema located at @components.schemas.mandate.properties.type@ in the specification.
--
-- The type of the mandate.
data MandateType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    MandateType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    MandateType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"multi_use"@
    MandateType'EnumMultiUse
  | -- | Represents the JSON value @"single_use"@
    MandateType'EnumSingleUse
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON MandateType' where
  toJSON (MandateType'Other val) = val
  toJSON (MandateType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (MandateType'EnumMultiUse) = "multi_use"
  toJSON (MandateType'EnumSingleUse) = "single_use"

instance Data.Aeson.Types.FromJSON.FromJSON MandateType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "multi_use" -> MandateType'EnumMultiUse
            | val GHC.Classes.== "single_use" -> MandateType'EnumSingleUse
            | GHC.Base.otherwise -> MandateType'Other val
      )
