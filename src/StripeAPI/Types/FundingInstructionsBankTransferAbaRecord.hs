{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema FundingInstructionsBankTransferAbaRecord
module StripeAPI.Types.FundingInstructionsBankTransferAbaRecord where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.funding_instructions_bank_transfer_aba_record@ in the specification.
--
-- ABA Records contain U.S. bank account details per the ABA format.
data FundingInstructionsBankTransferAbaRecord = FundingInstructionsBankTransferAbaRecord
  { -- | account_number: The ABA account number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferAbaRecordAccountNumber :: Data.Text.Internal.Text,
    -- | bank_name: The bank name
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferAbaRecordBankName :: Data.Text.Internal.Text,
    -- | routing_number: The ABA routing number
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    fundingInstructionsBankTransferAbaRecordRoutingNumber :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FundingInstructionsBankTransferAbaRecord where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account_number" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferAbaRecordAccountNumber obj] : ["bank_name" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferAbaRecordBankName obj] : ["routing_number" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferAbaRecordRoutingNumber obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account_number" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferAbaRecordAccountNumber obj] : ["bank_name" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferAbaRecordBankName obj] : ["routing_number" Data.Aeson.Types.ToJSON..= fundingInstructionsBankTransferAbaRecordRoutingNumber obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON FundingInstructionsBankTransferAbaRecord where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FundingInstructionsBankTransferAbaRecord" (\obj -> ((GHC.Base.pure FundingInstructionsBankTransferAbaRecord GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "routing_number"))

-- | Create a new 'FundingInstructionsBankTransferAbaRecord' with all required fields.
mkFundingInstructionsBankTransferAbaRecord ::
  -- | 'fundingInstructionsBankTransferAbaRecordAccountNumber'
  Data.Text.Internal.Text ->
  -- | 'fundingInstructionsBankTransferAbaRecordBankName'
  Data.Text.Internal.Text ->
  -- | 'fundingInstructionsBankTransferAbaRecordRoutingNumber'
  Data.Text.Internal.Text ->
  FundingInstructionsBankTransferAbaRecord
mkFundingInstructionsBankTransferAbaRecord fundingInstructionsBankTransferAbaRecordAccountNumber fundingInstructionsBankTransferAbaRecordBankName fundingInstructionsBankTransferAbaRecordRoutingNumber =
  FundingInstructionsBankTransferAbaRecord
    { fundingInstructionsBankTransferAbaRecordAccountNumber = fundingInstructionsBankTransferAbaRecordAccountNumber,
      fundingInstructionsBankTransferAbaRecordBankName = fundingInstructionsBankTransferAbaRecordBankName,
      fundingInstructionsBankTransferAbaRecordRoutingNumber = fundingInstructionsBankTransferAbaRecordRoutingNumber
    }
