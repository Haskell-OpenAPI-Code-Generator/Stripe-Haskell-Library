{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DisputePaymentMethodDetailsCard
module StripeAPI.Types.DisputePaymentMethodDetailsCard where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.dispute_payment_method_details_card@ in the specification.
data DisputePaymentMethodDetailsCard = DisputePaymentMethodDetailsCard
  { -- | brand: Card brand. Can be \`amex\`, \`diners\`, \`discover\`, \`eftpos_au\`, \`jcb\`, \`mastercard\`, \`unionpay\`, \`visa\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputePaymentMethodDetailsCardBrand :: Data.Text.Internal.Text,
    -- | network_reason_code: The card network\'s specific dispute reason code, which maps to one of Stripe\'s primary dispute categories to simplify response guidance. The [Network code map](https:\/\/stripe.com\/docs\/disputes\/categories\#network-code-map) lists all available dispute reason codes by network.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputePaymentMethodDetailsCardNetworkReasonCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputePaymentMethodDetailsCard where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["brand" Data.Aeson.Types.ToJSON..= disputePaymentMethodDetailsCardBrand obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_reason_code" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsCardNetworkReasonCode obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["brand" Data.Aeson.Types.ToJSON..= disputePaymentMethodDetailsCardBrand obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_reason_code" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsCardNetworkReasonCode obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputePaymentMethodDetailsCard where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputePaymentMethodDetailsCard" (\obj -> (GHC.Base.pure DisputePaymentMethodDetailsCard GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network_reason_code"))

-- | Create a new 'DisputePaymentMethodDetailsCard' with all required fields.
mkDisputePaymentMethodDetailsCard ::
  -- | 'disputePaymentMethodDetailsCardBrand'
  Data.Text.Internal.Text ->
  DisputePaymentMethodDetailsCard
mkDisputePaymentMethodDetailsCard disputePaymentMethodDetailsCardBrand =
  DisputePaymentMethodDetailsCard
    { disputePaymentMethodDetailsCardBrand = disputePaymentMethodDetailsCardBrand,
      disputePaymentMethodDetailsCardNetworkReasonCode = GHC.Maybe.Nothing
    }
