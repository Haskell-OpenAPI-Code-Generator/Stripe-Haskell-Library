{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema IssuingCardPin
module StripeAPI.Types.IssuingCardPin where

import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema issuing_card_pin
data IssuingCardPin
  = IssuingCardPin
      { -- | status: Wether the PIN will be accepted or not.
        issuingCardPinStatus :: IssuingCardPinStatus'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.ToJSON IssuingCardPin where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "status" (issuingCardPinStatus obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "status" (issuingCardPinStatus obj))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardPin where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardPin" (\obj -> GHC.Base.pure IssuingCardPin GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Defines the enum schema issuing_card_pinStatus\'
--
-- Wether the PIN will be accepted or not.
data IssuingCardPinStatus'
  = IssuingCardPinStatus'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingCardPinStatus'EnumTyped Data.Text.Internal.Text
  | IssuingCardPinStatus'EnumStringActive
  | IssuingCardPinStatus'EnumStringBlocked
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.ToJSON IssuingCardPinStatus' where
  toJSON (IssuingCardPinStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardPinStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardPinStatus'EnumStringActive) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active"
  toJSON (IssuingCardPinStatus'EnumStringBlocked) = Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blocked"

instance Data.Aeson.FromJSON IssuingCardPinStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "active")
          then IssuingCardPinStatus'EnumStringActive
          else
            if val GHC.Classes.== (Data.Aeson.Types.Internal.String GHC.Base.$ Data.Text.pack "blocked")
              then IssuingCardPinStatus'EnumStringBlocked
              else IssuingCardPinStatus'EnumOther val
      )
