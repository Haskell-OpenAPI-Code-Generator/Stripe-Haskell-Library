{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema BankConnectionsResourceAccountholder
module StripeAPI.Types.BankConnectionsResourceAccountholder where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.Customer
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.bank_connections_resource_accountholder@ in the specification.
data BankConnectionsResourceAccountholder = BankConnectionsResourceAccountholder
  { -- | account: The ID of the Stripe account this account belongs to. Should only be present if \`account_holder.type\` is \`account\`.
    bankConnectionsResourceAccountholderAccount :: (GHC.Maybe.Maybe BankConnectionsResourceAccountholderAccount'Variants),
    -- | customer: ID of the Stripe customer this account belongs to. Present if and only if \`account_holder.type\` is \`customer\`.
    bankConnectionsResourceAccountholderCustomer :: (GHC.Maybe.Maybe BankConnectionsResourceAccountholderCustomer'Variants),
    -- | type: Type of account holder that this account belongs to.
    bankConnectionsResourceAccountholderType :: BankConnectionsResourceAccountholderType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BankConnectionsResourceAccountholder where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (bankConnectionsResourceAccountholderAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (bankConnectionsResourceAccountholderCustomer obj) : ["type" Data.Aeson.Types.ToJSON..= bankConnectionsResourceAccountholderType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account" Data.Aeson.Types.ToJSON..=)) (bankConnectionsResourceAccountholderAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (bankConnectionsResourceAccountholderCustomer obj) : ["type" Data.Aeson.Types.ToJSON..= bankConnectionsResourceAccountholderType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BankConnectionsResourceAccountholder where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BankConnectionsResourceAccountholder" (\obj -> ((GHC.Base.pure BankConnectionsResourceAccountholder GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'BankConnectionsResourceAccountholder' with all required fields.
mkBankConnectionsResourceAccountholder ::
  -- | 'bankConnectionsResourceAccountholderType'
  BankConnectionsResourceAccountholderType' ->
  BankConnectionsResourceAccountholder
mkBankConnectionsResourceAccountholder bankConnectionsResourceAccountholderType =
  BankConnectionsResourceAccountholder
    { bankConnectionsResourceAccountholderAccount = GHC.Maybe.Nothing,
      bankConnectionsResourceAccountholderCustomer = GHC.Maybe.Nothing,
      bankConnectionsResourceAccountholderType = bankConnectionsResourceAccountholderType
    }

-- | Defines the oneOf schema located at @components.schemas.bank_connections_resource_accountholder.properties.account.anyOf@ in the specification.
--
-- The ID of the Stripe account this account belongs to. Should only be present if \`account_holder.type\` is \`account\`.
data BankConnectionsResourceAccountholderAccount'Variants
  = BankConnectionsResourceAccountholderAccount'Text Data.Text.Internal.Text
  | BankConnectionsResourceAccountholderAccount'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON BankConnectionsResourceAccountholderAccount'Variants where
  toJSON (BankConnectionsResourceAccountholderAccount'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BankConnectionsResourceAccountholderAccount'Account a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON BankConnectionsResourceAccountholderAccount'Variants where
  parseJSON val = case (BankConnectionsResourceAccountholderAccount'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BankConnectionsResourceAccountholderAccount'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.bank_connections_resource_accountholder.properties.customer.anyOf@ in the specification.
--
-- ID of the Stripe customer this account belongs to. Present if and only if \`account_holder.type\` is \`customer\`.
data BankConnectionsResourceAccountholderCustomer'Variants
  = BankConnectionsResourceAccountholderCustomer'Text Data.Text.Internal.Text
  | BankConnectionsResourceAccountholderCustomer'Customer Customer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON BankConnectionsResourceAccountholderCustomer'Variants where
  toJSON (BankConnectionsResourceAccountholderCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BankConnectionsResourceAccountholderCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON BankConnectionsResourceAccountholderCustomer'Variants where
  parseJSON val = case (BankConnectionsResourceAccountholderCustomer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BankConnectionsResourceAccountholderCustomer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.bank_connections_resource_accountholder.properties.type@ in the specification.
--
-- Type of account holder that this account belongs to.
data BankConnectionsResourceAccountholderType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    BankConnectionsResourceAccountholderType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    BankConnectionsResourceAccountholderType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"account"@
    BankConnectionsResourceAccountholderType'EnumAccount
  | -- | Represents the JSON value @"customer"@
    BankConnectionsResourceAccountholderType'EnumCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON BankConnectionsResourceAccountholderType' where
  toJSON (BankConnectionsResourceAccountholderType'Other val) = val
  toJSON (BankConnectionsResourceAccountholderType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (BankConnectionsResourceAccountholderType'EnumAccount) = "account"
  toJSON (BankConnectionsResourceAccountholderType'EnumCustomer) = "customer"

instance Data.Aeson.Types.FromJSON.FromJSON BankConnectionsResourceAccountholderType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "account" -> BankConnectionsResourceAccountholderType'EnumAccount
            | val GHC.Classes.== "customer" -> BankConnectionsResourceAccountholderType'EnumCustomer
            | GHC.Base.otherwise -> BankConnectionsResourceAccountholderType'Other val
      )
