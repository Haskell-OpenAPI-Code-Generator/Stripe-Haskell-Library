{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TaxProductResourceTaxTransactionShippingCost
module StripeAPI.Types.TaxProductResourceTaxTransactionShippingCost where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax_product_resource_tax_transaction_shipping_cost@ in the specification.
data TaxProductResourceTaxTransactionShippingCost = TaxProductResourceTaxTransactionShippingCost
  { -- | amount: The shipping amount in integer cents. If \`tax_behavior=inclusive\`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
    taxProductResourceTaxTransactionShippingCostAmount :: GHC.Types.Int,
    -- | amount_tax: The amount of tax calculated for shipping, in integer cents.
    taxProductResourceTaxTransactionShippingCostAmountTax :: GHC.Types.Int,
    -- | shipping_rate: The ID of an existing [ShippingRate](https:\/\/stripe.com\/docs\/api\/shipping_rates\/object).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    taxProductResourceTaxTransactionShippingCostShippingRate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tax_behavior: Specifies whether the \`amount\` includes taxes. If \`tax_behavior=inclusive\`, then the amount includes taxes.
    taxProductResourceTaxTransactionShippingCostTaxBehavior :: TaxProductResourceTaxTransactionShippingCostTaxBehavior',
    -- | tax_code: The [tax code](https:\/\/stripe.com\/docs\/tax\/tax-categories) ID used for shipping.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    taxProductResourceTaxTransactionShippingCostTaxCode :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxTransactionShippingCost where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= taxProductResourceTaxTransactionShippingCostAmount obj] : ["amount_tax" Data.Aeson.Types.ToJSON..= taxProductResourceTaxTransactionShippingCostAmountTax obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_rate" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxTransactionShippingCostShippingRate obj) : ["tax_behavior" Data.Aeson.Types.ToJSON..= taxProductResourceTaxTransactionShippingCostTaxBehavior obj] : ["tax_code" Data.Aeson.Types.ToJSON..= taxProductResourceTaxTransactionShippingCostTaxCode obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= taxProductResourceTaxTransactionShippingCostAmount obj] : ["amount_tax" Data.Aeson.Types.ToJSON..= taxProductResourceTaxTransactionShippingCostAmountTax obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_rate" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxTransactionShippingCostShippingRate obj) : ["tax_behavior" Data.Aeson.Types.ToJSON..= taxProductResourceTaxTransactionShippingCostTaxBehavior obj] : ["tax_code" Data.Aeson.Types.ToJSON..= taxProductResourceTaxTransactionShippingCostTaxCode obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxTransactionShippingCost where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxProductResourceTaxTransactionShippingCost" (\obj -> ((((GHC.Base.pure TaxProductResourceTaxTransactionShippingCost GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shipping_rate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_code"))

-- | Create a new 'TaxProductResourceTaxTransactionShippingCost' with all required fields.
mkTaxProductResourceTaxTransactionShippingCost ::
  -- | 'taxProductResourceTaxTransactionShippingCostAmount'
  GHC.Types.Int ->
  -- | 'taxProductResourceTaxTransactionShippingCostAmountTax'
  GHC.Types.Int ->
  -- | 'taxProductResourceTaxTransactionShippingCostTaxBehavior'
  TaxProductResourceTaxTransactionShippingCostTaxBehavior' ->
  -- | 'taxProductResourceTaxTransactionShippingCostTaxCode'
  Data.Text.Internal.Text ->
  TaxProductResourceTaxTransactionShippingCost
mkTaxProductResourceTaxTransactionShippingCost taxProductResourceTaxTransactionShippingCostAmount taxProductResourceTaxTransactionShippingCostAmountTax taxProductResourceTaxTransactionShippingCostTaxBehavior taxProductResourceTaxTransactionShippingCostTaxCode =
  TaxProductResourceTaxTransactionShippingCost
    { taxProductResourceTaxTransactionShippingCostAmount = taxProductResourceTaxTransactionShippingCostAmount,
      taxProductResourceTaxTransactionShippingCostAmountTax = taxProductResourceTaxTransactionShippingCostAmountTax,
      taxProductResourceTaxTransactionShippingCostShippingRate = GHC.Maybe.Nothing,
      taxProductResourceTaxTransactionShippingCostTaxBehavior = taxProductResourceTaxTransactionShippingCostTaxBehavior,
      taxProductResourceTaxTransactionShippingCostTaxCode = taxProductResourceTaxTransactionShippingCostTaxCode
    }

-- | Defines the enum schema located at @components.schemas.tax_product_resource_tax_transaction_shipping_cost.properties.tax_behavior@ in the specification.
--
-- Specifies whether the \`amount\` includes taxes. If \`tax_behavior=inclusive\`, then the amount includes taxes.
data TaxProductResourceTaxTransactionShippingCostTaxBehavior'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    TaxProductResourceTaxTransactionShippingCostTaxBehavior'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    TaxProductResourceTaxTransactionShippingCostTaxBehavior'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"exclusive"@
    TaxProductResourceTaxTransactionShippingCostTaxBehavior'EnumExclusive
  | -- | Represents the JSON value @"inclusive"@
    TaxProductResourceTaxTransactionShippingCostTaxBehavior'EnumInclusive
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxTransactionShippingCostTaxBehavior' where
  toJSON (TaxProductResourceTaxTransactionShippingCostTaxBehavior'Other val) = val
  toJSON (TaxProductResourceTaxTransactionShippingCostTaxBehavior'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (TaxProductResourceTaxTransactionShippingCostTaxBehavior'EnumExclusive) = "exclusive"
  toJSON (TaxProductResourceTaxTransactionShippingCostTaxBehavior'EnumInclusive) = "inclusive"

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxTransactionShippingCostTaxBehavior' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "exclusive" -> TaxProductResourceTaxTransactionShippingCostTaxBehavior'EnumExclusive
            | val GHC.Classes.== "inclusive" -> TaxProductResourceTaxTransactionShippingCostTaxBehavior'EnumInclusive
            | GHC.Base.otherwise -> TaxProductResourceTaxTransactionShippingCostTaxBehavior'Other val
      )
