{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingDisputeEvidence
module StripeAPI.Types.IssuingDisputeEvidence where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeCanceledEvidence
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeDuplicateEvidence
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeFraudulentEvidence
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeMerchandiseNotAsDescribedEvidence
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeNotReceivedEvidence
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeOtherEvidence
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeServiceNotAsDescribedEvidence
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_dispute_evidence@ in the specification.
data IssuingDisputeEvidence = IssuingDisputeEvidence
  { -- | canceled:
    issuingDisputeEvidenceCanceled :: (GHC.Maybe.Maybe IssuingDisputeCanceledEvidence),
    -- | duplicate:
    issuingDisputeEvidenceDuplicate :: (GHC.Maybe.Maybe IssuingDisputeDuplicateEvidence),
    -- | fraudulent:
    issuingDisputeEvidenceFraudulent :: (GHC.Maybe.Maybe IssuingDisputeFraudulentEvidence),
    -- | merchandise_not_as_described:
    issuingDisputeEvidenceMerchandiseNotAsDescribed :: (GHC.Maybe.Maybe IssuingDisputeMerchandiseNotAsDescribedEvidence),
    -- | not_received:
    issuingDisputeEvidenceNotReceived :: (GHC.Maybe.Maybe IssuingDisputeNotReceivedEvidence),
    -- | other:
    issuingDisputeEvidenceOther :: (GHC.Maybe.Maybe IssuingDisputeOtherEvidence),
    -- | reason: The reason for filing the dispute. Its value will match the field containing the evidence.
    issuingDisputeEvidenceReason :: IssuingDisputeEvidenceReason',
    -- | service_not_as_described:
    issuingDisputeEvidenceServiceNotAsDescribed :: (GHC.Maybe.Maybe IssuingDisputeServiceNotAsDescribedEvidence)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidence where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceCanceled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("duplicate" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceDuplicate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraudulent" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceFraudulent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("merchandise_not_as_described" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceMerchandiseNotAsDescribed obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not_received" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceNotReceived obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("other" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceOther obj) : ["reason" Data.Aeson.Types.ToJSON..= issuingDisputeEvidenceReason obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("service_not_as_described" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceServiceNotAsDescribed obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceCanceled obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("duplicate" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceDuplicate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fraudulent" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceFraudulent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("merchandise_not_as_described" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceMerchandiseNotAsDescribed obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("not_received" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceNotReceived obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("other" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceOther obj) : ["reason" Data.Aeson.Types.ToJSON..= issuingDisputeEvidenceReason obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("service_not_as_described" Data.Aeson.Types.ToJSON..=)) (issuingDisputeEvidenceServiceNotAsDescribed obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidence where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidence" (\obj -> (((((((GHC.Base.pure IssuingDisputeEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "canceled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "duplicate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fraudulent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "merchandise_not_as_described")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "not_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "other")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "service_not_as_described"))

-- | Create a new 'IssuingDisputeEvidence' with all required fields.
mkIssuingDisputeEvidence ::
  -- | 'issuingDisputeEvidenceReason'
  IssuingDisputeEvidenceReason' ->
  IssuingDisputeEvidence
mkIssuingDisputeEvidence issuingDisputeEvidenceReason =
  IssuingDisputeEvidence
    { issuingDisputeEvidenceCanceled = GHC.Maybe.Nothing,
      issuingDisputeEvidenceDuplicate = GHC.Maybe.Nothing,
      issuingDisputeEvidenceFraudulent = GHC.Maybe.Nothing,
      issuingDisputeEvidenceMerchandiseNotAsDescribed = GHC.Maybe.Nothing,
      issuingDisputeEvidenceNotReceived = GHC.Maybe.Nothing,
      issuingDisputeEvidenceOther = GHC.Maybe.Nothing,
      issuingDisputeEvidenceReason = issuingDisputeEvidenceReason,
      issuingDisputeEvidenceServiceNotAsDescribed = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing_dispute_evidence.properties.reason@ in the specification.
--
-- The reason for filing the dispute. Its value will match the field containing the evidence.
data IssuingDisputeEvidenceReason'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingDisputeEvidenceReason'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingDisputeEvidenceReason'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"canceled"@
    IssuingDisputeEvidenceReason'EnumCanceled
  | -- | Represents the JSON value @"duplicate"@
    IssuingDisputeEvidenceReason'EnumDuplicate
  | -- | Represents the JSON value @"fraudulent"@
    IssuingDisputeEvidenceReason'EnumFraudulent
  | -- | Represents the JSON value @"merchandise_not_as_described"@
    IssuingDisputeEvidenceReason'EnumMerchandiseNotAsDescribed
  | -- | Represents the JSON value @"not_received"@
    IssuingDisputeEvidenceReason'EnumNotReceived
  | -- | Represents the JSON value @"other"@
    IssuingDisputeEvidenceReason'EnumOther
  | -- | Represents the JSON value @"service_not_as_described"@
    IssuingDisputeEvidenceReason'EnumServiceNotAsDescribed
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidenceReason' where
  toJSON (IssuingDisputeEvidenceReason'Other val) = val
  toJSON (IssuingDisputeEvidenceReason'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingDisputeEvidenceReason'EnumCanceled) = "canceled"
  toJSON (IssuingDisputeEvidenceReason'EnumDuplicate) = "duplicate"
  toJSON (IssuingDisputeEvidenceReason'EnumFraudulent) = "fraudulent"
  toJSON (IssuingDisputeEvidenceReason'EnumMerchandiseNotAsDescribed) = "merchandise_not_as_described"
  toJSON (IssuingDisputeEvidenceReason'EnumNotReceived) = "not_received"
  toJSON (IssuingDisputeEvidenceReason'EnumOther) = "other"
  toJSON (IssuingDisputeEvidenceReason'EnumServiceNotAsDescribed) = "service_not_as_described"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceReason' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "canceled" -> IssuingDisputeEvidenceReason'EnumCanceled
            | val GHC.Classes.== "duplicate" -> IssuingDisputeEvidenceReason'EnumDuplicate
            | val GHC.Classes.== "fraudulent" -> IssuingDisputeEvidenceReason'EnumFraudulent
            | val GHC.Classes.== "merchandise_not_as_described" -> IssuingDisputeEvidenceReason'EnumMerchandiseNotAsDescribed
            | val GHC.Classes.== "not_received" -> IssuingDisputeEvidenceReason'EnumNotReceived
            | val GHC.Classes.== "other" -> IssuingDisputeEvidenceReason'EnumOther
            | val GHC.Classes.== "service_not_as_described" -> IssuingDisputeEvidenceReason'EnumServiceNotAsDescribed
            | GHC.Base.otherwise -> IssuingDisputeEvidenceReason'Other val
      )
