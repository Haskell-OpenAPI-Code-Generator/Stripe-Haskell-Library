{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema IssuingDisputeEvidence
module StripeAPI.Types.IssuingDisputeEvidence where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.File
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeDuplicateEvidence
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeFraudulentEvidence
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeOtherEvidence
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeProductNotReceivedEvidence
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema issuing_dispute_evidence
data IssuingDisputeEvidence
  = IssuingDisputeEvidence
      { -- | duplicate: Evidence to support a duplicate product dispute. This will only be present if your dispute\'s \`reason\` is \`duplicate\`.
        issuingDisputeEvidenceDuplicate :: (GHC.Maybe.Maybe IssuingDisputeEvidenceDuplicate'),
        -- | fraudulent: Evidence to support a fraudulent dispute. This will only be present if your dispute\'s \`reason\` is \`fraudulent\`.
        issuingDisputeEvidenceFraudulent :: (GHC.Maybe.Maybe IssuingDisputeEvidenceFraudulent'),
        -- | other: Evidence to support an uncategorized dispute. This will only be present if your dispute\'s \`reason\` is \`other\`.
        issuingDisputeEvidenceOther :: (GHC.Maybe.Maybe IssuingDisputeEvidenceOther'),
        -- | product_not_received: Evidence to support a dispute where the product wasn\'t received. This will only be present if your dispute\'s \`reason\` is \`product_not_received\`.
        issuingDisputeEvidenceProductNotReceived :: (GHC.Maybe.Maybe IssuingDisputeEvidenceProductNotReceived')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidence where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "duplicate" (issuingDisputeEvidenceDuplicate obj) : (Data.Aeson..=) "fraudulent" (issuingDisputeEvidenceFraudulent obj) : (Data.Aeson..=) "other" (issuingDisputeEvidenceOther obj) : (Data.Aeson..=) "product_not_received" (issuingDisputeEvidenceProductNotReceived obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "duplicate" (issuingDisputeEvidenceDuplicate obj) GHC.Base.<> ((Data.Aeson..=) "fraudulent" (issuingDisputeEvidenceFraudulent obj) GHC.Base.<> ((Data.Aeson..=) "other" (issuingDisputeEvidenceOther obj) GHC.Base.<> (Data.Aeson..=) "product_not_received" (issuingDisputeEvidenceProductNotReceived obj))))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidence where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidence" (\obj -> (((GHC.Base.pure IssuingDisputeEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "duplicate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fraudulent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "other")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_not_received"))

-- | Defines the data type for the schema issuing_dispute_evidenceDuplicate\'
--
-- Evidence to support a duplicate product dispute. This will only be present if your dispute\\\'s \\\`reason\\\` is \\\`duplicate\\\`.
data IssuingDisputeEvidenceDuplicate'
  = IssuingDisputeEvidenceDuplicate'
      { -- | dispute_explanation: Brief freeform text explaining why you are disputing this transaction.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingDisputeEvidenceDuplicate'DisputeExplanation :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | original_transaction: Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingDisputeEvidenceDuplicate'OriginalTransaction :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | uncategorized_file: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
        issuingDisputeEvidenceDuplicate'UncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variants)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidenceDuplicate' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceDuplicate'DisputeExplanation obj) : (Data.Aeson..=) "original_transaction" (issuingDisputeEvidenceDuplicate'OriginalTransaction obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceDuplicate'UncategorizedFile obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceDuplicate'DisputeExplanation obj) GHC.Base.<> ((Data.Aeson..=) "original_transaction" (issuingDisputeEvidenceDuplicate'OriginalTransaction obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceDuplicate'UncategorizedFile obj)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceDuplicate' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidenceDuplicate'" (\obj -> ((GHC.Base.pure IssuingDisputeEvidenceDuplicate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "original_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))

-- | Define the one-of schema issuing_dispute_evidenceDuplicate\'Uncategorized_file\'
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
data IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variants
  = IssuingDisputeEvidenceDuplicate'UncategorizedFile'File File
  | IssuingDisputeEvidenceDuplicate'UncategorizedFile'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variants where
  toJSON (IssuingDisputeEvidenceDuplicate'UncategorizedFile'File a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuingDisputeEvidenceDuplicate'UncategorizedFile'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceDuplicate'UncategorizedFile'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuingDisputeEvidenceDuplicate'UncategorizedFile'File a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuingDisputeEvidenceDuplicate'UncategorizedFile'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema issuing_dispute_evidenceFraudulent\'
--
-- Evidence to support a fraudulent dispute. This will only be present if your dispute\\\'s \\\`reason\\\` is \\\`fraudulent\\\`.
data IssuingDisputeEvidenceFraudulent'
  = IssuingDisputeEvidenceFraudulent'
      { -- | dispute_explanation: Brief freeform text explaining why you are disputing this transaction.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingDisputeEvidenceFraudulent'DisputeExplanation :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | uncategorized_file: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
        issuingDisputeEvidenceFraudulent'UncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variants)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidenceFraudulent' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceFraudulent'DisputeExplanation obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceFraudulent'UncategorizedFile obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceFraudulent'DisputeExplanation obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceFraudulent'UncategorizedFile obj))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceFraudulent' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidenceFraudulent'" (\obj -> (GHC.Base.pure IssuingDisputeEvidenceFraudulent' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))

-- | Define the one-of schema issuing_dispute_evidenceFraudulent\'Uncategorized_file\'
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
data IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variants
  = IssuingDisputeEvidenceFraudulent'UncategorizedFile'File File
  | IssuingDisputeEvidenceFraudulent'UncategorizedFile'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variants where
  toJSON (IssuingDisputeEvidenceFraudulent'UncategorizedFile'File a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuingDisputeEvidenceFraudulent'UncategorizedFile'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceFraudulent'UncategorizedFile'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuingDisputeEvidenceFraudulent'UncategorizedFile'File a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuingDisputeEvidenceFraudulent'UncategorizedFile'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema issuing_dispute_evidenceOther\'
--
-- Evidence to support an uncategorized dispute. This will only be present if your dispute\\\'s \\\`reason\\\` is \\\`other\\\`.
data IssuingDisputeEvidenceOther'
  = IssuingDisputeEvidenceOther'
      { -- | dispute_explanation: Brief freeform text explaining why you are disputing this transaction.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingDisputeEvidenceOther'DisputeExplanation :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | uncategorized_file: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
        issuingDisputeEvidenceOther'UncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeEvidenceOther'UncategorizedFile'Variants)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidenceOther' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceOther'DisputeExplanation obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceOther'UncategorizedFile obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceOther'DisputeExplanation obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceOther'UncategorizedFile obj))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceOther' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidenceOther'" (\obj -> (GHC.Base.pure IssuingDisputeEvidenceOther' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))

-- | Define the one-of schema issuing_dispute_evidenceOther\'Uncategorized_file\'
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
data IssuingDisputeEvidenceOther'UncategorizedFile'Variants
  = IssuingDisputeEvidenceOther'UncategorizedFile'File File
  | IssuingDisputeEvidenceOther'UncategorizedFile'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidenceOther'UncategorizedFile'Variants where
  toJSON (IssuingDisputeEvidenceOther'UncategorizedFile'File a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuingDisputeEvidenceOther'UncategorizedFile'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceOther'UncategorizedFile'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuingDisputeEvidenceOther'UncategorizedFile'File a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuingDisputeEvidenceOther'UncategorizedFile'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema issuing_dispute_evidenceProduct_not_received\'
--
-- Evidence to support a dispute where the product wasn\\\'t received. This will only be present if your dispute\\\'s \\\`reason\\\` is \\\`product_not_received\\\`.
data IssuingDisputeEvidenceProductNotReceived'
  = IssuingDisputeEvidenceProductNotReceived'
      { -- | dispute_explanation: Brief freeform text explaining why you are disputing this transaction.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingDisputeEvidenceProductNotReceived'DisputeExplanation :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | uncategorized_file: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
        issuingDisputeEvidenceProductNotReceived'UncategorizedFile :: (GHC.Maybe.Maybe IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variants)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidenceProductNotReceived' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceProductNotReceived'DisputeExplanation obj) : (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceProductNotReceived'UncategorizedFile obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "dispute_explanation" (issuingDisputeEvidenceProductNotReceived'DisputeExplanation obj) GHC.Base.<> (Data.Aeson..=) "uncategorized_file" (issuingDisputeEvidenceProductNotReceived'UncategorizedFile obj))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceProductNotReceived' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeEvidenceProductNotReceived'" (\obj -> (GHC.Base.pure IssuingDisputeEvidenceProductNotReceived' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute_explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncategorized_file"))

-- | Define the one-of schema issuing_dispute_evidenceProduct_not_received\'Uncategorized_file\'
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional file evidence supporting your dispute.
data IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variants
  = IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'File File
  | IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variants where
  toJSON (IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'File a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'File a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuingDisputeEvidenceProductNotReceived'UncategorizedFile'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
