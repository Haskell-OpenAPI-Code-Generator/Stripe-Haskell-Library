{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountSession
module StripeAPI.Types.AccountSession where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.ConnectEmbeddedAccountSessionCreateComponents
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account_session@ in the specification.
--
-- An AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.
--
-- We recommend that you create an AccountSession each time you need to display an embedded component
-- to your user. Do not save AccountSessions to your database as they expire relatively
-- quickly, and cannot be used more than once.
--
-- Related guide: [Connect embedded components](https:\/\/stripe.com\/docs\/connect\/get-started-connect-embedded-components)
data AccountSession = AccountSession
  { -- | account: The ID of the account the AccountSession was created for
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountSessionAccount :: Data.Text.Internal.Text,
    -- | client_secret: The client secret of this AccountSession. Used on the client to set up secure access to the given \`account\`.
    --
    -- The client secret can be used to provide access to \`account\` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.
    --
    -- Refer to our docs to [setup Connect embedded components](https:\/\/stripe.com\/docs\/connect\/get-started-connect-embedded-components) and learn about how \`client_secret\` should be handled.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountSessionClientSecret :: Data.Text.Internal.Text,
    -- | components:
    accountSessionComponents :: ConnectEmbeddedAccountSessionCreateComponents,
    -- | expires_at: The timestamp at which this AccountSession will expire.
    accountSessionExpiresAt :: GHC.Types.Int,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    accountSessionLivemode :: GHC.Types.Bool
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountSession where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= accountSessionAccount obj] : ["client_secret" Data.Aeson.Types.ToJSON..= accountSessionClientSecret obj] : ["components" Data.Aeson.Types.ToJSON..= accountSessionComponents obj] : ["expires_at" Data.Aeson.Types.ToJSON..= accountSessionExpiresAt obj] : ["livemode" Data.Aeson.Types.ToJSON..= accountSessionLivemode obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "account_session"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["account" Data.Aeson.Types.ToJSON..= accountSessionAccount obj] : ["client_secret" Data.Aeson.Types.ToJSON..= accountSessionClientSecret obj] : ["components" Data.Aeson.Types.ToJSON..= accountSessionComponents obj] : ["expires_at" Data.Aeson.Types.ToJSON..= accountSessionExpiresAt obj] : ["livemode" Data.Aeson.Types.ToJSON..= accountSessionLivemode obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "account_session"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountSession where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountSession" (\obj -> ((((GHC.Base.pure AccountSession GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "components")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode"))

-- | Create a new 'AccountSession' with all required fields.
mkAccountSession ::
  -- | 'accountSessionAccount'
  Data.Text.Internal.Text ->
  -- | 'accountSessionClientSecret'
  Data.Text.Internal.Text ->
  -- | 'accountSessionComponents'
  ConnectEmbeddedAccountSessionCreateComponents ->
  -- | 'accountSessionExpiresAt'
  GHC.Types.Int ->
  -- | 'accountSessionLivemode'
  GHC.Types.Bool ->
  AccountSession
mkAccountSession accountSessionAccount accountSessionClientSecret accountSessionComponents accountSessionExpiresAt accountSessionLivemode =
  AccountSession
    { accountSessionAccount = accountSessionAccount,
      accountSessionClientSecret = accountSessionClientSecret,
      accountSessionComponents = accountSessionComponents,
      accountSessionExpiresAt = accountSessionExpiresAt,
      accountSessionLivemode = accountSessionLivemode
    }
