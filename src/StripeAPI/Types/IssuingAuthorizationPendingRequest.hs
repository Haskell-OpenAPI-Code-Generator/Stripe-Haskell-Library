-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema IssuingAuthorizationPendingRequest
module StripeAPI.Types.IssuingAuthorizationPendingRequest where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationAmountDetails

-- | Defines the object schema located at @components.schemas.issuing_authorization_pending_request@ in the specification.
-- 
-- 
data IssuingAuthorizationPendingRequest = IssuingAuthorizationPendingRequest {
  -- | amount: The additional amount Stripe will hold if the authorization is approved, in the card\'s [currency](https:\/\/stripe.com\/docs\/api\#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https:\/\/stripe.com\/docs\/currencies\#zero-decimal).
  issuingAuthorizationPendingRequestAmount :: GHC.Types.Int
  -- | amount_details: Detailed breakdown of amount components. These amounts are denominated in \`currency\` and in the [smallest currency unit](https:\/\/stripe.com\/docs\/currencies\#zero-decimal).
  , issuingAuthorizationPendingRequestAmountDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingAuthorizationPendingRequestAmountDetails'NonNullable))
  -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
  , issuingAuthorizationPendingRequestCurrency :: Data.Text.Internal.Text
  -- | is_amount_controllable: If set \`true\`, you may provide [amount](https:\/\/stripe.com\/docs\/api\/issuing\/authorizations\/approve\#approve_issuing_authorization-amount) to control how much to hold for the authorization.
  , issuingAuthorizationPendingRequestIsAmountControllable :: GHC.Types.Bool
  -- | merchant_amount: The amount the merchant is requesting to be authorized in the \`merchant_currency\`. The amount is in the [smallest currency unit](https:\/\/stripe.com\/docs\/currencies\#zero-decimal).
  , issuingAuthorizationPendingRequestMerchantAmount :: GHC.Types.Int
  -- | merchant_currency: The local currency the merchant is requesting to authorize.
  , issuingAuthorizationPendingRequestMerchantCurrency :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationPendingRequest
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_details" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationPendingRequestAmountDetails obj) : ["currency" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestCurrency obj] : ["is_amount_controllable" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestIsAmountControllable obj] : ["merchant_amount" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestMerchantAmount obj] : ["merchant_currency" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestMerchantCurrency obj] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestAmount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_details" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationPendingRequestAmountDetails obj) : ["currency" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestCurrency obj] : ["is_amount_controllable" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestIsAmountControllable obj] : ["merchant_amount" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestMerchantAmount obj] : ["merchant_currency" Data.Aeson.Types.ToJSON..= issuingAuthorizationPendingRequestMerchantCurrency obj] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationPendingRequest
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationPendingRequest" (\obj -> (((((GHC.Base.pure IssuingAuthorizationPendingRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_amount_controllable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_currency"))
-- | Create a new 'IssuingAuthorizationPendingRequest' with all required fields.
mkIssuingAuthorizationPendingRequest :: GHC.Types.Int -- ^ 'issuingAuthorizationPendingRequestAmount'
  -> Data.Text.Internal.Text -- ^ 'issuingAuthorizationPendingRequestCurrency'
  -> GHC.Types.Bool -- ^ 'issuingAuthorizationPendingRequestIsAmountControllable'
  -> GHC.Types.Int -- ^ 'issuingAuthorizationPendingRequestMerchantAmount'
  -> Data.Text.Internal.Text -- ^ 'issuingAuthorizationPendingRequestMerchantCurrency'
  -> IssuingAuthorizationPendingRequest
mkIssuingAuthorizationPendingRequest issuingAuthorizationPendingRequestAmount issuingAuthorizationPendingRequestCurrency issuingAuthorizationPendingRequestIsAmountControllable issuingAuthorizationPendingRequestMerchantAmount issuingAuthorizationPendingRequestMerchantCurrency = IssuingAuthorizationPendingRequest{issuingAuthorizationPendingRequestAmount = issuingAuthorizationPendingRequestAmount,
                                                                                                                                                                                                                                                                                                                         issuingAuthorizationPendingRequestAmountDetails = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                         issuingAuthorizationPendingRequestCurrency = issuingAuthorizationPendingRequestCurrency,
                                                                                                                                                                                                                                                                                                                         issuingAuthorizationPendingRequestIsAmountControllable = issuingAuthorizationPendingRequestIsAmountControllable,
                                                                                                                                                                                                                                                                                                                         issuingAuthorizationPendingRequestMerchantAmount = issuingAuthorizationPendingRequestMerchantAmount,
                                                                                                                                                                                                                                                                                                                         issuingAuthorizationPendingRequestMerchantCurrency = issuingAuthorizationPendingRequestMerchantCurrency}
-- | Defines the object schema located at @components.schemas.issuing_authorization_pending_request.properties.amount_details.anyOf@ in the specification.
-- 
-- Detailed breakdown of amount components. These amounts are denominated in \\\`currency\\\` and in the [smallest currency unit](https:\\\/\\\/stripe.com\\\/docs\\\/currencies\\\#zero-decimal).
data IssuingAuthorizationPendingRequestAmountDetails'NonNullable = IssuingAuthorizationPendingRequestAmountDetails'NonNullable {
  -- | atm_fee: The fee charged by the ATM for the cash withdrawal.
  issuingAuthorizationPendingRequestAmountDetails'NonNullableAtmFee :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationPendingRequestAmountDetails'NonNullable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("atm_fee" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationPendingRequestAmountDetails'NonNullableAtmFee obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("atm_fee" Data.Aeson.Types.ToJSON..=)) (issuingAuthorizationPendingRequestAmountDetails'NonNullableAtmFee obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationPendingRequestAmountDetails'NonNullable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationPendingRequestAmountDetails'NonNullable" (\obj -> GHC.Base.pure IssuingAuthorizationPendingRequestAmountDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "atm_fee"))
-- | Create a new 'IssuingAuthorizationPendingRequestAmountDetails'NonNullable' with all required fields.
mkIssuingAuthorizationPendingRequestAmountDetails'NonNullable :: IssuingAuthorizationPendingRequestAmountDetails'NonNullable
mkIssuingAuthorizationPendingRequestAmountDetails'NonNullable = IssuingAuthorizationPendingRequestAmountDetails'NonNullable{issuingAuthorizationPendingRequestAmountDetails'NonNullableAtmFee = GHC.Maybe.Nothing}
