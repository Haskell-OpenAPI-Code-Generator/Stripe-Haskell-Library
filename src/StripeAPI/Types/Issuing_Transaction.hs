{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Issuing_Transaction
module StripeAPI.Types.Issuing_Transaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationMerchantData
import {-# SOURCE #-} StripeAPI.Types.Issuing_Authorization
import {-# SOURCE #-} StripeAPI.Types.Issuing_Card
import {-# SOURCE #-} StripeAPI.Types.Issuing_Cardholder
import {-# SOURCE #-} StripeAPI.Types.Issuing_Dispute
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema issuing.transaction
--
-- Any use of an [issued card](https:\/\/stripe.com\/docs\/issuing) that results in funds entering or leaving
-- your Stripe account, such as a completed purchase or refund, is represented by an Issuing
-- \`Transaction\` object.
--
-- Related guide: [Issued Card Transactions](https:\/\/stripe.com\/docs\/issuing\/transactions).
data Issuing'transaction
  = Issuing'transaction
      { -- | amount: The amount of this transaction in your currency. This is the amount that your balance will be updated by.
        issuing'transactionAmount :: GHC.Types.Int,
        -- | authorization: The \`Authorization\` object that led to this transaction.
        issuing'transactionAuthorization :: (GHC.Maybe.Maybe Issuing'transactionAuthorization'Variants),
        -- | balance_transaction: ID of the [balance transaction](https:\/\/stripe.com\/docs\/api\/balance_transactions) associated with this transaction.
        issuing'transactionBalanceTransaction :: (GHC.Maybe.Maybe Issuing'transactionBalanceTransaction'Variants),
        -- | card: The card used to make this transaction.
        issuing'transactionCard :: Issuing'transactionCard'Variants,
        -- | cardholder: The cardholder to whom this transaction belongs.
        issuing'transactionCardholder :: (GHC.Maybe.Maybe Issuing'transactionCardholder'Variants),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        issuing'transactionCreated :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        issuing'transactionCurrency :: Data.Text.Internal.Text,
        -- | dispute: If you\'ve disputed the transaction, the ID of the [dispute object](https:\/\/stripe.com\/docs\/api\/issuing\/disputes\/object).
        issuing'transactionDispute :: (GHC.Maybe.Maybe Issuing'transactionDispute'Variants),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuing'transactionId :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        issuing'transactionLivemode :: GHC.Types.Bool,
        -- | merchant_amount: The amount that the merchant will receive, denominated in \`merchant_currency\`. It will be different from \`amount\` if the merchant is taking payment in a different currency.
        issuing'transactionMerchantAmount :: GHC.Types.Int,
        -- | merchant_currency: The currency with which the merchant is taking payment.
        issuing'transactionMerchantCurrency :: Data.Text.Internal.Text,
        -- | merchant_data:
        issuing'transactionMerchantData :: IssuingAuthorizationMerchantData,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        issuing'transactionMetadata :: Data.Aeson.Types.Internal.Object,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        issuing'transactionObject :: Issuing'transactionObject',
        -- | type: The nature of the transaction.
        issuing'transactionType :: Issuing'transactionType'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'transaction where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (issuing'transactionAmount obj) : (Data.Aeson..=) "authorization" (issuing'transactionAuthorization obj) : (Data.Aeson..=) "balance_transaction" (issuing'transactionBalanceTransaction obj) : (Data.Aeson..=) "card" (issuing'transactionCard obj) : (Data.Aeson..=) "cardholder" (issuing'transactionCardholder obj) : (Data.Aeson..=) "created" (issuing'transactionCreated obj) : (Data.Aeson..=) "currency" (issuing'transactionCurrency obj) : (Data.Aeson..=) "dispute" (issuing'transactionDispute obj) : (Data.Aeson..=) "id" (issuing'transactionId obj) : (Data.Aeson..=) "livemode" (issuing'transactionLivemode obj) : (Data.Aeson..=) "merchant_amount" (issuing'transactionMerchantAmount obj) : (Data.Aeson..=) "merchant_currency" (issuing'transactionMerchantCurrency obj) : (Data.Aeson..=) "merchant_data" (issuing'transactionMerchantData obj) : (Data.Aeson..=) "metadata" (issuing'transactionMetadata obj) : (Data.Aeson..=) "object" (issuing'transactionObject obj) : (Data.Aeson..=) "type" (issuing'transactionType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (issuing'transactionAmount obj) GHC.Base.<> ((Data.Aeson..=) "authorization" (issuing'transactionAuthorization obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (issuing'transactionBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "card" (issuing'transactionCard obj) GHC.Base.<> ((Data.Aeson..=) "cardholder" (issuing'transactionCardholder obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuing'transactionCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (issuing'transactionCurrency obj) GHC.Base.<> ((Data.Aeson..=) "dispute" (issuing'transactionDispute obj) GHC.Base.<> ((Data.Aeson..=) "id" (issuing'transactionId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (issuing'transactionLivemode obj) GHC.Base.<> ((Data.Aeson..=) "merchant_amount" (issuing'transactionMerchantAmount obj) GHC.Base.<> ((Data.Aeson..=) "merchant_currency" (issuing'transactionMerchantCurrency obj) GHC.Base.<> ((Data.Aeson..=) "merchant_data" (issuing'transactionMerchantData obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (issuing'transactionMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuing'transactionObject obj) GHC.Base.<> (Data.Aeson..=) "type" (issuing'transactionType obj))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'transaction" (\obj -> (((((((((((((((GHC.Base.pure Issuing'transaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorization")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cardholder")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dispute")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "merchant_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Define the one-of schema issuing.transactionAuthorization\'
--
-- The \`Authorization\` object that led to this transaction.
data Issuing'transactionAuthorization'Variants
  = Issuing'transactionAuthorization'Issuing'authorization Issuing'authorization
  | Issuing'transactionAuthorization'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'transactionAuthorization'Variants where
  toJSON (Issuing'transactionAuthorization'Issuing'authorization a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'transactionAuthorization'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transactionAuthorization'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionAuthorization'Issuing'authorization a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionAuthorization'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema issuing.transactionBalance_transaction\'
--
-- ID of the [balance transaction](https:\/\/stripe.com\/docs\/api\/balance_transactions) associated with this transaction.
data Issuing'transactionBalanceTransaction'Variants
  = Issuing'transactionBalanceTransaction'BalanceTransaction BalanceTransaction
  | Issuing'transactionBalanceTransaction'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'transactionBalanceTransaction'Variants where
  toJSON (Issuing'transactionBalanceTransaction'BalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'transactionBalanceTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transactionBalanceTransaction'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionBalanceTransaction'BalanceTransaction a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionBalanceTransaction'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema issuing.transactionCard\'
--
-- The card used to make this transaction.
data Issuing'transactionCard'Variants
  = Issuing'transactionCard'Issuing'card Issuing'card
  | Issuing'transactionCard'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'transactionCard'Variants where
  toJSON (Issuing'transactionCard'Issuing'card a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'transactionCard'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transactionCard'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionCard'Issuing'card a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionCard'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema issuing.transactionCardholder\'
--
-- The cardholder to whom this transaction belongs.
data Issuing'transactionCardholder'Variants
  = Issuing'transactionCardholder'Issuing'cardholder Issuing'cardholder
  | Issuing'transactionCardholder'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'transactionCardholder'Variants where
  toJSON (Issuing'transactionCardholder'Issuing'cardholder a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'transactionCardholder'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transactionCardholder'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionCardholder'Issuing'cardholder a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionCardholder'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema issuing.transactionDispute\'
--
-- If you\'ve disputed the transaction, the ID of the [dispute object](https:\/\/stripe.com\/docs\/api\/issuing\/disputes\/object).
data Issuing'transactionDispute'Variants
  = Issuing'transactionDispute'Issuing'dispute Issuing'dispute
  | Issuing'transactionDispute'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'transactionDispute'Variants where
  toJSON (Issuing'transactionDispute'Issuing'dispute a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'transactionDispute'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transactionDispute'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionDispute'Issuing'dispute a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Issuing'transactionDispute'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema issuing.transactionObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data Issuing'transactionObject'
  = Issuing'transactionObject'EnumOther Data.Aeson.Types.Internal.Value
  | Issuing'transactionObject'EnumTyped Data.Text.Internal.Text
  | Issuing'transactionObject'EnumStringIssuing'transaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'transactionObject' where
  toJSON (Issuing'transactionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Issuing'transactionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Issuing'transactionObject'EnumStringIssuing'transaction) = "issuing.transaction"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transactionObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "issuing.transaction" -> Issuing'transactionObject'EnumStringIssuing'transaction
            | GHC.Base.otherwise -> Issuing'transactionObject'EnumOther val
      )

-- | Defines the enum schema issuing.transactionType\'
--
-- The nature of the transaction.
data Issuing'transactionType'
  = Issuing'transactionType'EnumOther Data.Aeson.Types.Internal.Value
  | Issuing'transactionType'EnumTyped Data.Text.Internal.Text
  | Issuing'transactionType'EnumStringCapture
  | Issuing'transactionType'EnumStringCashWithdrawal
  | Issuing'transactionType'EnumStringDispute
  | Issuing'transactionType'EnumStringDisputeLoss
  | Issuing'transactionType'EnumStringRefund
  | Issuing'transactionType'EnumStringRefundReversal
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'transactionType' where
  toJSON (Issuing'transactionType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Issuing'transactionType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Issuing'transactionType'EnumStringCapture) = "capture"
  toJSON (Issuing'transactionType'EnumStringCashWithdrawal) = "cash_withdrawal"
  toJSON (Issuing'transactionType'EnumStringDispute) = "dispute"
  toJSON (Issuing'transactionType'EnumStringDisputeLoss) = "dispute_loss"
  toJSON (Issuing'transactionType'EnumStringRefund) = "refund"
  toJSON (Issuing'transactionType'EnumStringRefundReversal) = "refund_reversal"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'transactionType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "capture" -> Issuing'transactionType'EnumStringCapture
            | val GHC.Classes.== "cash_withdrawal" -> Issuing'transactionType'EnumStringCashWithdrawal
            | val GHC.Classes.== "dispute" -> Issuing'transactionType'EnumStringDispute
            | val GHC.Classes.== "dispute_loss" -> Issuing'transactionType'EnumStringDisputeLoss
            | val GHC.Classes.== "refund" -> Issuing'transactionType'EnumStringRefund
            | val GHC.Classes.== "refund_reversal" -> Issuing'transactionType'EnumStringRefundReversal
            | GHC.Base.otherwise -> Issuing'transactionType'EnumOther val
      )
