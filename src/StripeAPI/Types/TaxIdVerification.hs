{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema TaxIdVerification
module StripeAPI.Types.TaxIdVerification where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema tax_id_verification
data TaxIdVerification
  = TaxIdVerification
      { -- | status: Verification status, one of \`pending\`, \`verified\`, \`unverified\`, or \`unavailable\`.
        taxIdVerificationStatus :: TaxIdVerificationStatus',
        -- | verified_address: Verified address.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxIdVerificationVerifiedAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | verified_name: Verified name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxIdVerificationVerifiedName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxIdVerification where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "status" (taxIdVerificationStatus obj) : (Data.Aeson..=) "verified_address" (taxIdVerificationVerifiedAddress obj) : (Data.Aeson..=) "verified_name" (taxIdVerificationVerifiedName obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "status" (taxIdVerificationStatus obj) GHC.Base.<> ((Data.Aeson..=) "verified_address" (taxIdVerificationVerifiedAddress obj) GHC.Base.<> (Data.Aeson..=) "verified_name" (taxIdVerificationVerifiedName obj)))

instance Data.Aeson.Types.FromJSON.FromJSON TaxIdVerification where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxIdVerification" (\obj -> ((GHC.Base.pure TaxIdVerification GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name"))

-- | Defines the enum schema tax_id_verificationStatus\'
--
-- Verification status, one of \`pending\`, \`verified\`, \`unverified\`, or \`unavailable\`.
data TaxIdVerificationStatus'
  = TaxIdVerificationStatus'EnumOther Data.Aeson.Types.Internal.Value
  | TaxIdVerificationStatus'EnumTyped Data.Text.Internal.Text
  | TaxIdVerificationStatus'EnumStringPending
  | TaxIdVerificationStatus'EnumStringUnavailable
  | TaxIdVerificationStatus'EnumStringUnverified
  | TaxIdVerificationStatus'EnumStringVerified
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxIdVerificationStatus' where
  toJSON (TaxIdVerificationStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TaxIdVerificationStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TaxIdVerificationStatus'EnumStringPending) = "pending"
  toJSON (TaxIdVerificationStatus'EnumStringUnavailable) = "unavailable"
  toJSON (TaxIdVerificationStatus'EnumStringUnverified) = "unverified"
  toJSON (TaxIdVerificationStatus'EnumStringVerified) = "verified"

instance Data.Aeson.Types.FromJSON.FromJSON TaxIdVerificationStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "pending" -> TaxIdVerificationStatus'EnumStringPending
            | val GHC.Classes.== "unavailable" -> TaxIdVerificationStatus'EnumStringUnavailable
            | val GHC.Classes.== "unverified" -> TaxIdVerificationStatus'EnumStringUnverified
            | val GHC.Classes.== "verified" -> TaxIdVerificationStatus'EnumStringVerified
            | GHC.Base.otherwise -> TaxIdVerificationStatus'EnumOther val
      )
