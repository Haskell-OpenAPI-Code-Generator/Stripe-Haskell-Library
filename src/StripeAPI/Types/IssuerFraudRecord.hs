{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema IssuerFraudRecord
module StripeAPI.Types.IssuerFraudRecord where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Charge
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema issuer_fraud_record
--
-- This resource has been renamed to [Early Fraud
-- Warning](\#early_fraud_warning_object) and will be removed in a future API
-- version.
data IssuerFraudRecord
  = IssuerFraudRecord
      { -- | actionable: An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later.
        issuerFraudRecordActionable :: GHC.Types.Bool,
        -- | charge: ID of the charge this issuer fraud record is for, optionally expanded.
        issuerFraudRecordCharge :: IssuerFraudRecordCharge'Variants,
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        issuerFraudRecordCreated :: GHC.Types.Int,
        -- | fraud_type: The type of fraud labelled by the issuer. One of \`card_never_received\`, \`fraudulent_card_application\`, \`made_with_counterfeit_card\`, \`made_with_lost_card\`, \`made_with_stolen_card\`, \`misc\`, \`unauthorized_use_of_card\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuerFraudRecordFraudType :: Data.Text.Internal.Text,
        -- | has_liability_shift: If true, the associated charge is subject to [liability shift](https:\/\/stripe.com\/docs\/sources\/three-d-secure\#disputed-payments).
        issuerFraudRecordHasLiabilityShift :: GHC.Types.Bool,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuerFraudRecordId :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        issuerFraudRecordLivemode :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        issuerFraudRecordObject :: IssuerFraudRecordObject',
        -- | post_date: The timestamp at which the card issuer posted the issuer fraud record.
        issuerFraudRecordPostDate :: GHC.Types.Int
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuerFraudRecord where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "actionable" (issuerFraudRecordActionable obj) : (Data.Aeson..=) "charge" (issuerFraudRecordCharge obj) : (Data.Aeson..=) "created" (issuerFraudRecordCreated obj) : (Data.Aeson..=) "fraud_type" (issuerFraudRecordFraudType obj) : (Data.Aeson..=) "has_liability_shift" (issuerFraudRecordHasLiabilityShift obj) : (Data.Aeson..=) "id" (issuerFraudRecordId obj) : (Data.Aeson..=) "livemode" (issuerFraudRecordLivemode obj) : (Data.Aeson..=) "object" (issuerFraudRecordObject obj) : (Data.Aeson..=) "post_date" (issuerFraudRecordPostDate obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "actionable" (issuerFraudRecordActionable obj) GHC.Base.<> ((Data.Aeson..=) "charge" (issuerFraudRecordCharge obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuerFraudRecordCreated obj) GHC.Base.<> ((Data.Aeson..=) "fraud_type" (issuerFraudRecordFraudType obj) GHC.Base.<> ((Data.Aeson..=) "has_liability_shift" (issuerFraudRecordHasLiabilityShift obj) GHC.Base.<> ((Data.Aeson..=) "id" (issuerFraudRecordId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (issuerFraudRecordLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (issuerFraudRecordObject obj) GHC.Base.<> (Data.Aeson..=) "post_date" (issuerFraudRecordPostDate obj)))))))))

instance Data.Aeson.Types.FromJSON.FromJSON IssuerFraudRecord where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuerFraudRecord" (\obj -> ((((((((GHC.Base.pure IssuerFraudRecord GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "actionable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fraud_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_liability_shift")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "post_date"))

-- | Define the one-of schema issuer_fraud_recordCharge\'
--
-- ID of the charge this issuer fraud record is for, optionally expanded.
data IssuerFraudRecordCharge'Variants
  = IssuerFraudRecordCharge'Charge Charge
  | IssuerFraudRecordCharge'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuerFraudRecordCharge'Variants where
  toJSON (IssuerFraudRecordCharge'Charge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (IssuerFraudRecordCharge'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON IssuerFraudRecordCharge'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuerFraudRecordCharge'Charge a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ IssuerFraudRecordCharge'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema issuer_fraud_recordObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data IssuerFraudRecordObject'
  = IssuerFraudRecordObject'EnumOther Data.Aeson.Types.Internal.Value
  | IssuerFraudRecordObject'EnumTyped Data.Text.Internal.Text
  | IssuerFraudRecordObject'EnumStringIssuerFraudRecord
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuerFraudRecordObject' where
  toJSON (IssuerFraudRecordObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuerFraudRecordObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuerFraudRecordObject'EnumStringIssuerFraudRecord) = "issuer_fraud_record"

instance Data.Aeson.Types.FromJSON.FromJSON IssuerFraudRecordObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "issuer_fraud_record" -> IssuerFraudRecordObject'EnumStringIssuerFraudRecord
            | GHC.Base.otherwise -> IssuerFraudRecordObject'EnumOther val
      )
