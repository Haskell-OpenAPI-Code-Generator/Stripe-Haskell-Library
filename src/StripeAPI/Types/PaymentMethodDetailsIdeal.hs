{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodDetailsIdeal
module StripeAPI.Types.PaymentMethodDetailsIdeal where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Mandate
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_details_ideal@ in the specification.
data PaymentMethodDetailsIdeal = PaymentMethodDetailsIdeal
  { -- | bank: The customer\'s bank. Can be one of \`abn_amro\`, \`asn_bank\`, \`bunq\`, \`handelsbanken\`, \`ing\`, \`knab\`, \`moneyou\`, \`rabobank\`, \`regiobank\`, \`revolut\`, \`sns_bank\`, \`triodos_bank\`, or \`van_lanschot\`.
    paymentMethodDetailsIdealBank :: (GHC.Maybe.Maybe PaymentMethodDetailsIdealBank'),
    -- | bic: The Bank Identifier Code of the customer\'s bank.
    paymentMethodDetailsIdealBic :: (GHC.Maybe.Maybe PaymentMethodDetailsIdealBic'),
    -- | generated_sepa_debit: The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    paymentMethodDetailsIdealGeneratedSepaDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsIdealGeneratedSepaDebit'Variants),
    -- | generated_sepa_debit_mandate: The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    paymentMethodDetailsIdealGeneratedSepaDebitMandate :: (GHC.Maybe.Maybe PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Variants),
    -- | iban_last4: Last four characters of the IBAN.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsIdealIbanLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | verified_name: Owner\'s verified full name. Values are verified or provided by iDEAL directly
    -- (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsIdealVerifiedName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsIdeal where
  toJSON obj = Data.Aeson.Types.Internal.object ("bank" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealBank obj : "bic" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealBic obj : "generated_sepa_debit" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealGeneratedSepaDebit obj : "generated_sepa_debit_mandate" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealGeneratedSepaDebitMandate obj : "iban_last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealIbanLast4 obj : "verified_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealVerifiedName obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bank" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealBank obj) GHC.Base.<> (("bic" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealBic obj) GHC.Base.<> (("generated_sepa_debit" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealGeneratedSepaDebit obj) GHC.Base.<> (("generated_sepa_debit_mandate" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealGeneratedSepaDebitMandate obj) GHC.Base.<> (("iban_last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealIbanLast4 obj) GHC.Base.<> ("verified_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsIdealVerifiedName obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsIdeal where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsIdeal" (\obj -> (((((GHC.Base.pure PaymentMethodDetailsIdeal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "generated_sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "generated_sepa_debit_mandate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "iban_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name"))

-- | Create a new 'PaymentMethodDetailsIdeal' with all required fields.
mkPaymentMethodDetailsIdeal :: PaymentMethodDetailsIdeal
mkPaymentMethodDetailsIdeal =
  PaymentMethodDetailsIdeal
    { paymentMethodDetailsIdealBank = GHC.Maybe.Nothing,
      paymentMethodDetailsIdealBic = GHC.Maybe.Nothing,
      paymentMethodDetailsIdealGeneratedSepaDebit = GHC.Maybe.Nothing,
      paymentMethodDetailsIdealGeneratedSepaDebitMandate = GHC.Maybe.Nothing,
      paymentMethodDetailsIdealIbanLast4 = GHC.Maybe.Nothing,
      paymentMethodDetailsIdealVerifiedName = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_method_details_ideal.properties.bank@ in the specification.
--
-- The customer\'s bank. Can be one of \`abn_amro\`, \`asn_bank\`, \`bunq\`, \`handelsbanken\`, \`ing\`, \`knab\`, \`moneyou\`, \`rabobank\`, \`regiobank\`, \`revolut\`, \`sns_bank\`, \`triodos_bank\`, or \`van_lanschot\`.
data PaymentMethodDetailsIdealBank'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodDetailsIdealBank'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodDetailsIdealBank'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"abn_amro"@
    PaymentMethodDetailsIdealBank'EnumAbnAmro
  | -- | Represents the JSON value @"asn_bank"@
    PaymentMethodDetailsIdealBank'EnumAsnBank
  | -- | Represents the JSON value @"bunq"@
    PaymentMethodDetailsIdealBank'EnumBunq
  | -- | Represents the JSON value @"handelsbanken"@
    PaymentMethodDetailsIdealBank'EnumHandelsbanken
  | -- | Represents the JSON value @"ing"@
    PaymentMethodDetailsIdealBank'EnumIng
  | -- | Represents the JSON value @"knab"@
    PaymentMethodDetailsIdealBank'EnumKnab
  | -- | Represents the JSON value @"moneyou"@
    PaymentMethodDetailsIdealBank'EnumMoneyou
  | -- | Represents the JSON value @"rabobank"@
    PaymentMethodDetailsIdealBank'EnumRabobank
  | -- | Represents the JSON value @"regiobank"@
    PaymentMethodDetailsIdealBank'EnumRegiobank
  | -- | Represents the JSON value @"revolut"@
    PaymentMethodDetailsIdealBank'EnumRevolut
  | -- | Represents the JSON value @"sns_bank"@
    PaymentMethodDetailsIdealBank'EnumSnsBank
  | -- | Represents the JSON value @"triodos_bank"@
    PaymentMethodDetailsIdealBank'EnumTriodosBank
  | -- | Represents the JSON value @"van_lanschot"@
    PaymentMethodDetailsIdealBank'EnumVanLanschot
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsIdealBank' where
  toJSON (PaymentMethodDetailsIdealBank'Other val) = val
  toJSON (PaymentMethodDetailsIdealBank'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodDetailsIdealBank'EnumAbnAmro) = "abn_amro"
  toJSON (PaymentMethodDetailsIdealBank'EnumAsnBank) = "asn_bank"
  toJSON (PaymentMethodDetailsIdealBank'EnumBunq) = "bunq"
  toJSON (PaymentMethodDetailsIdealBank'EnumHandelsbanken) = "handelsbanken"
  toJSON (PaymentMethodDetailsIdealBank'EnumIng) = "ing"
  toJSON (PaymentMethodDetailsIdealBank'EnumKnab) = "knab"
  toJSON (PaymentMethodDetailsIdealBank'EnumMoneyou) = "moneyou"
  toJSON (PaymentMethodDetailsIdealBank'EnumRabobank) = "rabobank"
  toJSON (PaymentMethodDetailsIdealBank'EnumRegiobank) = "regiobank"
  toJSON (PaymentMethodDetailsIdealBank'EnumRevolut) = "revolut"
  toJSON (PaymentMethodDetailsIdealBank'EnumSnsBank) = "sns_bank"
  toJSON (PaymentMethodDetailsIdealBank'EnumTriodosBank) = "triodos_bank"
  toJSON (PaymentMethodDetailsIdealBank'EnumVanLanschot) = "van_lanschot"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsIdealBank' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "abn_amro" -> PaymentMethodDetailsIdealBank'EnumAbnAmro
            | val GHC.Classes.== "asn_bank" -> PaymentMethodDetailsIdealBank'EnumAsnBank
            | val GHC.Classes.== "bunq" -> PaymentMethodDetailsIdealBank'EnumBunq
            | val GHC.Classes.== "handelsbanken" -> PaymentMethodDetailsIdealBank'EnumHandelsbanken
            | val GHC.Classes.== "ing" -> PaymentMethodDetailsIdealBank'EnumIng
            | val GHC.Classes.== "knab" -> PaymentMethodDetailsIdealBank'EnumKnab
            | val GHC.Classes.== "moneyou" -> PaymentMethodDetailsIdealBank'EnumMoneyou
            | val GHC.Classes.== "rabobank" -> PaymentMethodDetailsIdealBank'EnumRabobank
            | val GHC.Classes.== "regiobank" -> PaymentMethodDetailsIdealBank'EnumRegiobank
            | val GHC.Classes.== "revolut" -> PaymentMethodDetailsIdealBank'EnumRevolut
            | val GHC.Classes.== "sns_bank" -> PaymentMethodDetailsIdealBank'EnumSnsBank
            | val GHC.Classes.== "triodos_bank" -> PaymentMethodDetailsIdealBank'EnumTriodosBank
            | val GHC.Classes.== "van_lanschot" -> PaymentMethodDetailsIdealBank'EnumVanLanschot
            | GHC.Base.otherwise -> PaymentMethodDetailsIdealBank'Other val
      )

-- | Defines the enum schema located at @components.schemas.payment_method_details_ideal.properties.bic@ in the specification.
--
-- The Bank Identifier Code of the customer\'s bank.
data PaymentMethodDetailsIdealBic'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodDetailsIdealBic'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodDetailsIdealBic'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"ABNANL2A"@
    PaymentMethodDetailsIdealBic'EnumABNANL2A
  | -- | Represents the JSON value @"ASNBNL21"@
    PaymentMethodDetailsIdealBic'EnumASNBNL21
  | -- | Represents the JSON value @"BUNQNL2A"@
    PaymentMethodDetailsIdealBic'EnumBUNQNL2A
  | -- | Represents the JSON value @"FVLBNL22"@
    PaymentMethodDetailsIdealBic'EnumFVLBNL22
  | -- | Represents the JSON value @"HANDNL2A"@
    PaymentMethodDetailsIdealBic'EnumHANDNL2A
  | -- | Represents the JSON value @"INGBNL2A"@
    PaymentMethodDetailsIdealBic'EnumINGBNL2A
  | -- | Represents the JSON value @"KNABNL2H"@
    PaymentMethodDetailsIdealBic'EnumKNABNL2H
  | -- | Represents the JSON value @"MOYONL21"@
    PaymentMethodDetailsIdealBic'EnumMOYONL21
  | -- | Represents the JSON value @"RABONL2U"@
    PaymentMethodDetailsIdealBic'EnumRABONL2U
  | -- | Represents the JSON value @"RBRBNL21"@
    PaymentMethodDetailsIdealBic'EnumRBRBNL21
  | -- | Represents the JSON value @"REVOLT21"@
    PaymentMethodDetailsIdealBic'EnumREVOLT21
  | -- | Represents the JSON value @"SNSBNL2A"@
    PaymentMethodDetailsIdealBic'EnumSNSBNL2A
  | -- | Represents the JSON value @"TRIONL2U"@
    PaymentMethodDetailsIdealBic'EnumTRIONL2U
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsIdealBic' where
  toJSON (PaymentMethodDetailsIdealBic'Other val) = val
  toJSON (PaymentMethodDetailsIdealBic'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodDetailsIdealBic'EnumABNANL2A) = "ABNANL2A"
  toJSON (PaymentMethodDetailsIdealBic'EnumASNBNL21) = "ASNBNL21"
  toJSON (PaymentMethodDetailsIdealBic'EnumBUNQNL2A) = "BUNQNL2A"
  toJSON (PaymentMethodDetailsIdealBic'EnumFVLBNL22) = "FVLBNL22"
  toJSON (PaymentMethodDetailsIdealBic'EnumHANDNL2A) = "HANDNL2A"
  toJSON (PaymentMethodDetailsIdealBic'EnumINGBNL2A) = "INGBNL2A"
  toJSON (PaymentMethodDetailsIdealBic'EnumKNABNL2H) = "KNABNL2H"
  toJSON (PaymentMethodDetailsIdealBic'EnumMOYONL21) = "MOYONL21"
  toJSON (PaymentMethodDetailsIdealBic'EnumRABONL2U) = "RABONL2U"
  toJSON (PaymentMethodDetailsIdealBic'EnumRBRBNL21) = "RBRBNL21"
  toJSON (PaymentMethodDetailsIdealBic'EnumREVOLT21) = "REVOLT21"
  toJSON (PaymentMethodDetailsIdealBic'EnumSNSBNL2A) = "SNSBNL2A"
  toJSON (PaymentMethodDetailsIdealBic'EnumTRIONL2U) = "TRIONL2U"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsIdealBic' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ABNANL2A" -> PaymentMethodDetailsIdealBic'EnumABNANL2A
            | val GHC.Classes.== "ASNBNL21" -> PaymentMethodDetailsIdealBic'EnumASNBNL21
            | val GHC.Classes.== "BUNQNL2A" -> PaymentMethodDetailsIdealBic'EnumBUNQNL2A
            | val GHC.Classes.== "FVLBNL22" -> PaymentMethodDetailsIdealBic'EnumFVLBNL22
            | val GHC.Classes.== "HANDNL2A" -> PaymentMethodDetailsIdealBic'EnumHANDNL2A
            | val GHC.Classes.== "INGBNL2A" -> PaymentMethodDetailsIdealBic'EnumINGBNL2A
            | val GHC.Classes.== "KNABNL2H" -> PaymentMethodDetailsIdealBic'EnumKNABNL2H
            | val GHC.Classes.== "MOYONL21" -> PaymentMethodDetailsIdealBic'EnumMOYONL21
            | val GHC.Classes.== "RABONL2U" -> PaymentMethodDetailsIdealBic'EnumRABONL2U
            | val GHC.Classes.== "RBRBNL21" -> PaymentMethodDetailsIdealBic'EnumRBRBNL21
            | val GHC.Classes.== "REVOLT21" -> PaymentMethodDetailsIdealBic'EnumREVOLT21
            | val GHC.Classes.== "SNSBNL2A" -> PaymentMethodDetailsIdealBic'EnumSNSBNL2A
            | val GHC.Classes.== "TRIONL2U" -> PaymentMethodDetailsIdealBic'EnumTRIONL2U
            | GHC.Base.otherwise -> PaymentMethodDetailsIdealBic'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.payment_method_details_ideal.properties.generated_sepa_debit.anyOf@ in the specification.
--
-- The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
data PaymentMethodDetailsIdealGeneratedSepaDebit'Variants
  = PaymentMethodDetailsIdealGeneratedSepaDebit'Text Data.Text.Internal.Text
  | PaymentMethodDetailsIdealGeneratedSepaDebit'PaymentMethod PaymentMethod
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsIdealGeneratedSepaDebit'Variants where
  toJSON (PaymentMethodDetailsIdealGeneratedSepaDebit'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentMethodDetailsIdealGeneratedSepaDebit'PaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsIdealGeneratedSepaDebit'Variants where
  parseJSON val = case (PaymentMethodDetailsIdealGeneratedSepaDebit'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentMethodDetailsIdealGeneratedSepaDebit'PaymentMethod Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.payment_method_details_ideal.properties.generated_sepa_debit_mandate.anyOf@ in the specification.
--
-- The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
data PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Variants
  = PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Text Data.Text.Internal.Text
  | PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Mandate Mandate
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Variants where
  toJSON (PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Mandate a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Variants where
  parseJSON val = case (PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentMethodDetailsIdealGeneratedSepaDebitMandate'Mandate Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
