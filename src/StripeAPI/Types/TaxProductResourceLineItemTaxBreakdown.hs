{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TaxProductResourceLineItemTaxBreakdown
module StripeAPI.Types.TaxProductResourceLineItemTaxBreakdown where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.TaxProductResourceJurisdiction
import {-# SOURCE #-} StripeAPI.Types.TaxProductResourceLineItemTaxRateDetails
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax_product_resource_line_item_tax_breakdown@ in the specification.
data TaxProductResourceLineItemTaxBreakdown = TaxProductResourceLineItemTaxBreakdown
  { -- | amount: The amount of tax, in integer cents.
    taxProductResourceLineItemTaxBreakdownAmount :: GHC.Types.Int,
    -- | jurisdiction:
    taxProductResourceLineItemTaxBreakdownJurisdiction :: TaxProductResourceJurisdiction,
    -- | sourcing: Indicates whether the jurisdiction was determined by the origin (merchant\'s address) or destination (customer\'s address).
    taxProductResourceLineItemTaxBreakdownSourcing :: TaxProductResourceLineItemTaxBreakdownSourcing',
    -- | tax_rate_details: Details regarding the rate for this tax. This field will be \`null\` when the tax is not imposed, for example if the product is exempt from tax.
    taxProductResourceLineItemTaxBreakdownTaxRateDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable)),
    -- | taxability_reason: The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
    taxProductResourceLineItemTaxBreakdownTaxabilityReason :: TaxProductResourceLineItemTaxBreakdownTaxabilityReason',
    -- | taxable_amount: The amount on which tax is calculated, in integer cents.
    taxProductResourceLineItemTaxBreakdownTaxableAmount :: GHC.Types.Int
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceLineItemTaxBreakdown where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownAmount obj] : ["jurisdiction" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownJurisdiction obj] : ["sourcing" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownSourcing obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rate_details" Data.Aeson.Types.ToJSON..=)) (taxProductResourceLineItemTaxBreakdownTaxRateDetails obj) : ["taxability_reason" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownTaxabilityReason obj] : ["taxable_amount" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownTaxableAmount obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownAmount obj] : ["jurisdiction" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownJurisdiction obj] : ["sourcing" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownSourcing obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_rate_details" Data.Aeson.Types.ToJSON..=)) (taxProductResourceLineItemTaxBreakdownTaxRateDetails obj) : ["taxability_reason" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownTaxabilityReason obj] : ["taxable_amount" Data.Aeson.Types.ToJSON..= taxProductResourceLineItemTaxBreakdownTaxableAmount obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceLineItemTaxBreakdown where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxProductResourceLineItemTaxBreakdown" (\obj -> (((((GHC.Base.pure TaxProductResourceLineItemTaxBreakdown GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "jurisdiction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "sourcing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_rate_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "taxability_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "taxable_amount"))

-- | Create a new 'TaxProductResourceLineItemTaxBreakdown' with all required fields.
mkTaxProductResourceLineItemTaxBreakdown ::
  -- | 'taxProductResourceLineItemTaxBreakdownAmount'
  GHC.Types.Int ->
  -- | 'taxProductResourceLineItemTaxBreakdownJurisdiction'
  TaxProductResourceJurisdiction ->
  -- | 'taxProductResourceLineItemTaxBreakdownSourcing'
  TaxProductResourceLineItemTaxBreakdownSourcing' ->
  -- | 'taxProductResourceLineItemTaxBreakdownTaxabilityReason'
  TaxProductResourceLineItemTaxBreakdownTaxabilityReason' ->
  -- | 'taxProductResourceLineItemTaxBreakdownTaxableAmount'
  GHC.Types.Int ->
  TaxProductResourceLineItemTaxBreakdown
mkTaxProductResourceLineItemTaxBreakdown taxProductResourceLineItemTaxBreakdownAmount taxProductResourceLineItemTaxBreakdownJurisdiction taxProductResourceLineItemTaxBreakdownSourcing taxProductResourceLineItemTaxBreakdownTaxabilityReason taxProductResourceLineItemTaxBreakdownTaxableAmount =
  TaxProductResourceLineItemTaxBreakdown
    { taxProductResourceLineItemTaxBreakdownAmount = taxProductResourceLineItemTaxBreakdownAmount,
      taxProductResourceLineItemTaxBreakdownJurisdiction = taxProductResourceLineItemTaxBreakdownJurisdiction,
      taxProductResourceLineItemTaxBreakdownSourcing = taxProductResourceLineItemTaxBreakdownSourcing,
      taxProductResourceLineItemTaxBreakdownTaxRateDetails = GHC.Maybe.Nothing,
      taxProductResourceLineItemTaxBreakdownTaxabilityReason = taxProductResourceLineItemTaxBreakdownTaxabilityReason,
      taxProductResourceLineItemTaxBreakdownTaxableAmount = taxProductResourceLineItemTaxBreakdownTaxableAmount
    }

-- | Defines the enum schema located at @components.schemas.tax_product_resource_line_item_tax_breakdown.properties.sourcing@ in the specification.
--
-- Indicates whether the jurisdiction was determined by the origin (merchant\'s address) or destination (customer\'s address).
data TaxProductResourceLineItemTaxBreakdownSourcing'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    TaxProductResourceLineItemTaxBreakdownSourcing'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    TaxProductResourceLineItemTaxBreakdownSourcing'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"destination"@
    TaxProductResourceLineItemTaxBreakdownSourcing'EnumDestination
  | -- | Represents the JSON value @"origin"@
    TaxProductResourceLineItemTaxBreakdownSourcing'EnumOrigin
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceLineItemTaxBreakdownSourcing' where
  toJSON (TaxProductResourceLineItemTaxBreakdownSourcing'Other val) = val
  toJSON (TaxProductResourceLineItemTaxBreakdownSourcing'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (TaxProductResourceLineItemTaxBreakdownSourcing'EnumDestination) = "destination"
  toJSON (TaxProductResourceLineItemTaxBreakdownSourcing'EnumOrigin) = "origin"

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceLineItemTaxBreakdownSourcing' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "destination" -> TaxProductResourceLineItemTaxBreakdownSourcing'EnumDestination
            | val GHC.Classes.== "origin" -> TaxProductResourceLineItemTaxBreakdownSourcing'EnumOrigin
            | GHC.Base.otherwise -> TaxProductResourceLineItemTaxBreakdownSourcing'Other val
      )

-- | Defines the object schema located at @components.schemas.tax_product_resource_line_item_tax_breakdown.properties.tax_rate_details.anyOf@ in the specification.
--
-- Details regarding the rate for this tax. This field will be \\\`null\\\` when the tax is not imposed, for example if the product is exempt from tax.
data TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable = TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable
  { -- | display_name: A localized display name for tax type, intended to be human-readable. For example, \"Local Sales and Use Tax\", \"Value-added tax (VAT)\", or \"Umsatzsteuer (USt.)\".
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableDisplayName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | percentage_decimal: The tax rate percentage as a string. For example, 8.5% is represented as \"8.5\".
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullablePercentageDecimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tax_type: The tax type, such as \`vat\` or \`sales_tax\`.
    taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType :: (GHC.Maybe.Maybe TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableDisplayName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percentage_decimal" Data.Aeson.Types.ToJSON..=)) (taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullablePercentageDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_type" Data.Aeson.Types.ToJSON..=)) (taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableDisplayName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("percentage_decimal" Data.Aeson.Types.ToJSON..=)) (taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullablePercentageDecimal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_type" Data.Aeson.Types.ToJSON..=)) (taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable" (\obj -> ((GHC.Base.pure TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "percentage_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_type"))

-- | Create a new 'TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable' with all required fields.
mkTaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable :: TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable
mkTaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable =
  TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullable
    { taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableDisplayName = GHC.Maybe.Nothing,
      taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullablePercentageDecimal = GHC.Maybe.Nothing,
      taxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.tax_product_resource_line_item_tax_breakdown.properties.tax_rate_details.anyOf.properties.tax_type@ in the specification.
--
-- The tax type, such as \`vat\` or \`sales_tax\`.
data TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"amusement_tax"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumAmusementTax
  | -- | Represents the JSON value @"communications_tax"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumCommunicationsTax
  | -- | Represents the JSON value @"gst"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumGst
  | -- | Represents the JSON value @"hst"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumHst
  | -- | Represents the JSON value @"igst"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumIgst
  | -- | Represents the JSON value @"jct"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumJct
  | -- | Represents the JSON value @"lease_tax"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumLeaseTax
  | -- | Represents the JSON value @"pst"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumPst
  | -- | Represents the JSON value @"qst"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumQst
  | -- | Represents the JSON value @"rst"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumRst
  | -- | Represents the JSON value @"sales_tax"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumSalesTax
  | -- | Represents the JSON value @"vat"@
    TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumVat
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType' where
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'Other val) = val
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumAmusementTax) = "amusement_tax"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumCommunicationsTax) = "communications_tax"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumGst) = "gst"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumHst) = "hst"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumIgst) = "igst"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumJct) = "jct"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumLeaseTax) = "lease_tax"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumPst) = "pst"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumQst) = "qst"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumRst) = "rst"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumSalesTax) = "sales_tax"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumVat) = "vat"

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "amusement_tax" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumAmusementTax
            | val GHC.Classes.== "communications_tax" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumCommunicationsTax
            | val GHC.Classes.== "gst" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumGst
            | val GHC.Classes.== "hst" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumHst
            | val GHC.Classes.== "igst" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumIgst
            | val GHC.Classes.== "jct" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumJct
            | val GHC.Classes.== "lease_tax" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumLeaseTax
            | val GHC.Classes.== "pst" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumPst
            | val GHC.Classes.== "qst" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumQst
            | val GHC.Classes.== "rst" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumRst
            | val GHC.Classes.== "sales_tax" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumSalesTax
            | val GHC.Classes.== "vat" -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'EnumVat
            | GHC.Base.otherwise -> TaxProductResourceLineItemTaxBreakdownTaxRateDetails'NonNullableTaxType'Other val
      )

-- | Defines the enum schema located at @components.schemas.tax_product_resource_line_item_tax_breakdown.properties.taxability_reason@ in the specification.
--
-- The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
data TaxProductResourceLineItemTaxBreakdownTaxabilityReason'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"customer_exempt"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumCustomerExempt
  | -- | Represents the JSON value @"not_collecting"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumNotCollecting
  | -- | Represents the JSON value @"not_subject_to_tax"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumNotSubjectToTax
  | -- | Represents the JSON value @"not_supported"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumNotSupported
  | -- | Represents the JSON value @"portion_product_exempt"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumPortionProductExempt
  | -- | Represents the JSON value @"portion_reduced_rated"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumPortionReducedRated
  | -- | Represents the JSON value @"portion_standard_rated"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumPortionStandardRated
  | -- | Represents the JSON value @"product_exempt"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumProductExempt
  | -- | Represents the JSON value @"product_exempt_holiday"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumProductExemptHoliday
  | -- | Represents the JSON value @"proportionally_rated"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumProportionallyRated
  | -- | Represents the JSON value @"reduced_rated"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumReducedRated
  | -- | Represents the JSON value @"reverse_charge"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumReverseCharge
  | -- | Represents the JSON value @"standard_rated"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumStandardRated
  | -- | Represents the JSON value @"taxable_basis_reduced"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumTaxableBasisReduced
  | -- | Represents the JSON value @"zero_rated"@
    TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumZeroRated
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceLineItemTaxBreakdownTaxabilityReason' where
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'Other val) = val
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumCustomerExempt) = "customer_exempt"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumNotCollecting) = "not_collecting"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumNotSubjectToTax) = "not_subject_to_tax"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumNotSupported) = "not_supported"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumPortionProductExempt) = "portion_product_exempt"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumPortionReducedRated) = "portion_reduced_rated"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumPortionStandardRated) = "portion_standard_rated"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumProductExempt) = "product_exempt"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumProductExemptHoliday) = "product_exempt_holiday"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumProportionallyRated) = "proportionally_rated"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumReducedRated) = "reduced_rated"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumReverseCharge) = "reverse_charge"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumStandardRated) = "standard_rated"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumTaxableBasisReduced) = "taxable_basis_reduced"
  toJSON (TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumZeroRated) = "zero_rated"

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceLineItemTaxBreakdownTaxabilityReason' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "customer_exempt" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumCustomerExempt
            | val GHC.Classes.== "not_collecting" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumNotCollecting
            | val GHC.Classes.== "not_subject_to_tax" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumNotSubjectToTax
            | val GHC.Classes.== "not_supported" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumNotSupported
            | val GHC.Classes.== "portion_product_exempt" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumPortionProductExempt
            | val GHC.Classes.== "portion_reduced_rated" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumPortionReducedRated
            | val GHC.Classes.== "portion_standard_rated" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumPortionStandardRated
            | val GHC.Classes.== "product_exempt" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumProductExempt
            | val GHC.Classes.== "product_exempt_holiday" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumProductExemptHoliday
            | val GHC.Classes.== "proportionally_rated" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumProportionallyRated
            | val GHC.Classes.== "reduced_rated" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumReducedRated
            | val GHC.Classes.== "reverse_charge" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumReverseCharge
            | val GHC.Classes.== "standard_rated" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumStandardRated
            | val GHC.Classes.== "taxable_basis_reduced" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumTaxableBasisReduced
            | val GHC.Classes.== "zero_rated" -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'EnumZeroRated
            | GHC.Base.otherwise -> TaxProductResourceLineItemTaxBreakdownTaxabilityReason'Other val
      )
