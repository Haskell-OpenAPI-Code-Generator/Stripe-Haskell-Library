{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentLinksResourceCustomFields
module StripeAPI.Types.PaymentLinksResourceCustomFields where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentLinksResourceCustomFieldsDropdown
import {-# SOURCE #-} StripeAPI.Types.PaymentLinksResourceCustomFieldsLabel
import {-# SOURCE #-} StripeAPI.Types.PaymentLinksResourceCustomFieldsNumeric
import {-# SOURCE #-} StripeAPI.Types.PaymentLinksResourceCustomFieldsText
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_links_resource_custom_fields@ in the specification.
data PaymentLinksResourceCustomFields = PaymentLinksResourceCustomFields
  { -- | dropdown:
    paymentLinksResourceCustomFieldsDropdown :: (GHC.Maybe.Maybe PaymentLinksResourceCustomFieldsDropdown),
    -- | key: String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentLinksResourceCustomFieldsKey :: Data.Text.Internal.Text,
    -- | label:
    paymentLinksResourceCustomFieldsLabel :: PaymentLinksResourceCustomFieldsLabel,
    -- | numeric:
    paymentLinksResourceCustomFieldsNumeric :: (GHC.Maybe.Maybe PaymentLinksResourceCustomFieldsNumeric),
    -- | optional: Whether the customer is required to complete the field before completing the Checkout Session. Defaults to \`false\`.
    paymentLinksResourceCustomFieldsOptional :: GHC.Types.Bool,
    -- | text:
    paymentLinksResourceCustomFieldsText :: (GHC.Maybe.Maybe PaymentLinksResourceCustomFieldsText),
    -- | type: The type of the field.
    paymentLinksResourceCustomFieldsType :: PaymentLinksResourceCustomFieldsType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentLinksResourceCustomFields where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dropdown" Data.Aeson.Types.ToJSON..=)) (paymentLinksResourceCustomFieldsDropdown obj) : ["key" Data.Aeson.Types.ToJSON..= paymentLinksResourceCustomFieldsKey obj] : ["label" Data.Aeson.Types.ToJSON..= paymentLinksResourceCustomFieldsLabel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("numeric" Data.Aeson.Types.ToJSON..=)) (paymentLinksResourceCustomFieldsNumeric obj) : ["optional" Data.Aeson.Types.ToJSON..= paymentLinksResourceCustomFieldsOptional obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (paymentLinksResourceCustomFieldsText obj) : ["type" Data.Aeson.Types.ToJSON..= paymentLinksResourceCustomFieldsType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("dropdown" Data.Aeson.Types.ToJSON..=)) (paymentLinksResourceCustomFieldsDropdown obj) : ["key" Data.Aeson.Types.ToJSON..= paymentLinksResourceCustomFieldsKey obj] : ["label" Data.Aeson.Types.ToJSON..= paymentLinksResourceCustomFieldsLabel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("numeric" Data.Aeson.Types.ToJSON..=)) (paymentLinksResourceCustomFieldsNumeric obj) : ["optional" Data.Aeson.Types.ToJSON..= paymentLinksResourceCustomFieldsOptional obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("text" Data.Aeson.Types.ToJSON..=)) (paymentLinksResourceCustomFieldsText obj) : ["type" Data.Aeson.Types.ToJSON..= paymentLinksResourceCustomFieldsType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentLinksResourceCustomFields where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentLinksResourceCustomFields" (\obj -> ((((((GHC.Base.pure PaymentLinksResourceCustomFields GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "dropdown")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "label")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "numeric")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "optional")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "text")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'PaymentLinksResourceCustomFields' with all required fields.
mkPaymentLinksResourceCustomFields ::
  -- | 'paymentLinksResourceCustomFieldsKey'
  Data.Text.Internal.Text ->
  -- | 'paymentLinksResourceCustomFieldsLabel'
  PaymentLinksResourceCustomFieldsLabel ->
  -- | 'paymentLinksResourceCustomFieldsOptional'
  GHC.Types.Bool ->
  -- | 'paymentLinksResourceCustomFieldsType'
  PaymentLinksResourceCustomFieldsType' ->
  PaymentLinksResourceCustomFields
mkPaymentLinksResourceCustomFields paymentLinksResourceCustomFieldsKey paymentLinksResourceCustomFieldsLabel paymentLinksResourceCustomFieldsOptional paymentLinksResourceCustomFieldsType =
  PaymentLinksResourceCustomFields
    { paymentLinksResourceCustomFieldsDropdown = GHC.Maybe.Nothing,
      paymentLinksResourceCustomFieldsKey = paymentLinksResourceCustomFieldsKey,
      paymentLinksResourceCustomFieldsLabel = paymentLinksResourceCustomFieldsLabel,
      paymentLinksResourceCustomFieldsNumeric = GHC.Maybe.Nothing,
      paymentLinksResourceCustomFieldsOptional = paymentLinksResourceCustomFieldsOptional,
      paymentLinksResourceCustomFieldsText = GHC.Maybe.Nothing,
      paymentLinksResourceCustomFieldsType = paymentLinksResourceCustomFieldsType
    }

-- | Defines the enum schema located at @components.schemas.payment_links_resource_custom_fields.properties.type@ in the specification.
--
-- The type of the field.
data PaymentLinksResourceCustomFieldsType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentLinksResourceCustomFieldsType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentLinksResourceCustomFieldsType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"dropdown"@
    PaymentLinksResourceCustomFieldsType'EnumDropdown
  | -- | Represents the JSON value @"numeric"@
    PaymentLinksResourceCustomFieldsType'EnumNumeric
  | -- | Represents the JSON value @"text"@
    PaymentLinksResourceCustomFieldsType'EnumText
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentLinksResourceCustomFieldsType' where
  toJSON (PaymentLinksResourceCustomFieldsType'Other val) = val
  toJSON (PaymentLinksResourceCustomFieldsType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentLinksResourceCustomFieldsType'EnumDropdown) = "dropdown"
  toJSON (PaymentLinksResourceCustomFieldsType'EnumNumeric) = "numeric"
  toJSON (PaymentLinksResourceCustomFieldsType'EnumText) = "text"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentLinksResourceCustomFieldsType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "dropdown" -> PaymentLinksResourceCustomFieldsType'EnumDropdown
            | val GHC.Classes.== "numeric" -> PaymentLinksResourceCustomFieldsType'EnumNumeric
            | val GHC.Classes.== "text" -> PaymentLinksResourceCustomFieldsType'EnumText
            | GHC.Base.otherwise -> PaymentLinksResourceCustomFieldsType'Other val
      )
