{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer
module StripeAPI.Types.CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer
import {-# SOURCE #-} StripeAPI.Types.CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer
import {-# SOURCE #-} StripeAPI.Types.CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer
import {-# SOURCE #-} StripeAPI.Types.CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer@ in the specification.
data CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer = CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer
  { -- | eu_bank_transfer:
    customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferEuBankTransfer :: (GHC.Maybe.Maybe CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer),
    -- | gb_bank_transfer:
    customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferGbBankTransfer :: (GHC.Maybe.Maybe CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer),
    -- | jp_bank_transfer:
    customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferJpBankTransfer :: (GHC.Maybe.Maybe CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer),
    -- | reference: The user-supplied reference field on the bank transfer.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferReference :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | type: The funding method type used to fund the customer balance. Permitted values include: \`eu_bank_transfer\`, \`gb_bank_transfer\`, \`jp_bank_transfer\`, \`mx_bank_transfer\`, or \`us_bank_transfer\`.
    customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType :: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType',
    -- | us_bank_transfer:
    customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferUsBankTransfer :: (GHC.Maybe.Maybe CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eu_bank_transfer" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferEuBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gb_bank_transfer" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferGbBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jp_bank_transfer" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferJpBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferReference obj) : ["type" Data.Aeson.Types.ToJSON..= customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_transfer" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferUsBankTransfer obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eu_bank_transfer" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferEuBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("gb_bank_transfer" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferGbBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jp_bank_transfer" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferJpBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reference" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferReference obj) : ["type" Data.Aeson.Types.ToJSON..= customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_transfer" Data.Aeson.Types.ToJSON..=)) (customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferUsBankTransfer obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer" (\obj -> (((((GHC.Base.pure CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eu_bank_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "gb_bank_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jp_bank_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us_bank_transfer"))

-- | Create a new 'CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer' with all required fields.
mkCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer ::
  -- | 'customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'
  CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType' ->
  CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer
mkCustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType =
  CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer
    { customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferEuBankTransfer = GHC.Maybe.Nothing,
      customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferGbBankTransfer = GHC.Maybe.Nothing,
      customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferJpBankTransfer = GHC.Maybe.Nothing,
      customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferReference = GHC.Maybe.Nothing,
      customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType = customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType,
      customerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferUsBankTransfer = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer.properties.type@ in the specification.
--
-- The funding method type used to fund the customer balance. Permitted values include: \`eu_bank_transfer\`, \`gb_bank_transfer\`, \`jp_bank_transfer\`, \`mx_bank_transfer\`, or \`us_bank_transfer\`.
data CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"eu_bank_transfer"@
    CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumEuBankTransfer
  | -- | Represents the JSON value @"gb_bank_transfer"@
    CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumGbBankTransfer
  | -- | Represents the JSON value @"jp_bank_transfer"@
    CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumJpBankTransfer
  | -- | Represents the JSON value @"mx_bank_transfer"@
    CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumMxBankTransfer
  | -- | Represents the JSON value @"us_bank_transfer"@
    CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumUsBankTransfer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType' where
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'Other val) = val
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumEuBankTransfer) = "eu_bank_transfer"
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumGbBankTransfer) = "gb_bank_transfer"
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumJpBankTransfer) = "jp_bank_transfer"
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumMxBankTransfer) = "mx_bank_transfer"
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumUsBankTransfer) = "us_bank_transfer"

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "eu_bank_transfer" -> CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumEuBankTransfer
            | val GHC.Classes.== "gb_bank_transfer" -> CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumGbBankTransfer
            | val GHC.Classes.== "jp_bank_transfer" -> CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumJpBankTransfer
            | val GHC.Classes.== "mx_bank_transfer" -> CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumMxBankTransfer
            | val GHC.Classes.== "us_bank_transfer" -> CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'EnumUsBankTransfer
            | GHC.Base.otherwise -> CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferType'Other val
      )
