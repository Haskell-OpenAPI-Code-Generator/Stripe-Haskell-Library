{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodOptionsAfterpayClearpay
module StripeAPI.Types.PaymentMethodOptionsAfterpayClearpay where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_options_afterpay_clearpay@ in the specification.
data PaymentMethodOptionsAfterpayClearpay = PaymentMethodOptionsAfterpayClearpay
  { -- | reference: Order identifier shown to the merchant in Afterpayâ€™s online portal. We recommend using a value that helps you answer any questions a customer might have about
    -- the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodOptionsAfterpayClearpayReference :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodOptionsAfterpayClearpay where
  toJSON obj = Data.Aeson.Types.Internal.object ("reference" Data.Aeson.Types.ToJSON..= paymentMethodOptionsAfterpayClearpayReference obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("reference" Data.Aeson.Types.ToJSON..= paymentMethodOptionsAfterpayClearpayReference obj)

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsAfterpayClearpay where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodOptionsAfterpayClearpay" (\obj -> GHC.Base.pure PaymentMethodOptionsAfterpayClearpay GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reference"))

-- | Create a new 'PaymentMethodOptionsAfterpayClearpay' with all required fields.
mkPaymentMethodOptionsAfterpayClearpay :: PaymentMethodOptionsAfterpayClearpay
mkPaymentMethodOptionsAfterpayClearpay = PaymentMethodOptionsAfterpayClearpay {paymentMethodOptionsAfterpayClearpayReference = GHC.Maybe.Nothing}
