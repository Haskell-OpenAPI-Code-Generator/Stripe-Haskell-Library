{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema File
module StripeAPI.Types.File where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.FileLink
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema file
--
-- This is an object representing a file hosted on Stripe\'s servers. The
-- file may have been uploaded by yourself using the [create file](https:\/\/stripe.com\/docs\/api\#create_file)
-- request (for example, when uploading dispute evidence) or it may have
-- been created by Stripe (for example, the results of a [Sigma scheduled
-- query](\#scheduled_queries)).
--
-- Related guide: [File Upload Guide](https:\/\/stripe.com\/docs\/file-upload).
data File
  = File
      { -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        fileCreated :: GHC.Types.Int,
        -- | filename: A filename for the file, suitable for saving to a filesystem.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        fileFilename :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        fileId :: Data.Text.Internal.Text,
        -- | links: A list of [file links](https:\/\/stripe.com\/docs\/api\#file_links) that point at this file.
        fileLinks :: (GHC.Maybe.Maybe FileLinks'),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        fileObject :: FileObject',
        -- | purpose: The purpose of the file. Possible values are \`additional_verification\`, \`business_icon\`, \`business_logo\`, \`customer_signature\`, \`dispute_evidence\`, \`finance_report_run\`, \`identity_document\`, \`pci_document\`, \`sigma_scheduled_query\`, or \`tax_document_user_upload\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        filePurpose :: Data.Text.Internal.Text,
        -- | size: The size in bytes of the file object.
        fileSize :: GHC.Types.Int,
        -- | title: A user friendly title for the document.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        fileTitle :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | type: The type of the file returned (e.g., \`csv\`, \`pdf\`, \`jpg\`, or \`png\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        fileType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | url: The URL from which the file can be downloaded using your live secret API key.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        fileUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON File where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "created" (fileCreated obj) : (Data.Aeson..=) "filename" (fileFilename obj) : (Data.Aeson..=) "id" (fileId obj) : (Data.Aeson..=) "links" (fileLinks obj) : (Data.Aeson..=) "object" (fileObject obj) : (Data.Aeson..=) "purpose" (filePurpose obj) : (Data.Aeson..=) "size" (fileSize obj) : (Data.Aeson..=) "title" (fileTitle obj) : (Data.Aeson..=) "type" (fileType obj) : (Data.Aeson..=) "url" (fileUrl obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "created" (fileCreated obj) GHC.Base.<> ((Data.Aeson..=) "filename" (fileFilename obj) GHC.Base.<> ((Data.Aeson..=) "id" (fileId obj) GHC.Base.<> ((Data.Aeson..=) "links" (fileLinks obj) GHC.Base.<> ((Data.Aeson..=) "object" (fileObject obj) GHC.Base.<> ((Data.Aeson..=) "purpose" (filePurpose obj) GHC.Base.<> ((Data.Aeson..=) "size" (fileSize obj) GHC.Base.<> ((Data.Aeson..=) "title" (fileTitle obj) GHC.Base.<> ((Data.Aeson..=) "type" (fileType obj) GHC.Base.<> (Data.Aeson..=) "url" (fileUrl obj))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON File where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "File" (\obj -> (((((((((GHC.Base.pure File GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filename")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "links")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "purpose")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))

-- | Defines the data type for the schema fileLinks\'
--
-- A list of [file links](https:\/\/stripe.com\/docs\/api\#file_links) that point at this file.
data FileLinks'
  = FileLinks'
      { -- | data: Details about each object.
        fileLinks'Data :: ([FileLink]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        fileLinks'HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        fileLinks'Object :: FileLinks'Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        fileLinks'Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON FileLinks' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (fileLinks'Data obj) : (Data.Aeson..=) "has_more" (fileLinks'HasMore obj) : (Data.Aeson..=) "object" (fileLinks'Object obj) : (Data.Aeson..=) "url" (fileLinks'Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (fileLinks'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (fileLinks'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (fileLinks'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (fileLinks'Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON FileLinks' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "FileLinks'" (\obj -> (((GHC.Base.pure FileLinks' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema fileLinks\'Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data FileLinks'Object'
  = FileLinks'Object'EnumOther Data.Aeson.Types.Internal.Value
  | FileLinks'Object'EnumTyped Data.Text.Internal.Text
  | FileLinks'Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FileLinks'Object' where
  toJSON (FileLinks'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (FileLinks'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (FileLinks'Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON FileLinks'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> FileLinks'Object'EnumStringList
            | GHC.Base.otherwise -> FileLinks'Object'EnumOther val
      )

-- | Defines the enum schema fileObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data FileObject'
  = FileObject'EnumOther Data.Aeson.Types.Internal.Value
  | FileObject'EnumTyped Data.Text.Internal.Text
  | FileObject'EnumStringFile
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON FileObject' where
  toJSON (FileObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (FileObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (FileObject'EnumStringFile) = "file"

instance Data.Aeson.Types.FromJSON.FromJSON FileObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "file" -> FileObject'EnumStringFile
            | GHC.Base.otherwise -> FileObject'EnumOther val
      )
