-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema RadarRadarOptions
module StripeAPI.Types.RadarRadarOptions where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.radar_radar_options@ in the specification.
-- 
-- Options to configure Radar. See [Radar Session](https:\/\/stripe.com\/docs\/radar\/radar-session) for more information.
data RadarRadarOptions = RadarRadarOptions {
  -- | session: A [Radar Session](https:\/\/stripe.com\/docs\/radar\/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  radarRadarOptionsSession :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON RadarRadarOptions
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("session" Data.Aeson.Types.ToJSON..=)) (radarRadarOptionsSession obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("session" Data.Aeson.Types.ToJSON..=)) (radarRadarOptionsSession obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON RadarRadarOptions
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "RadarRadarOptions" (\obj -> GHC.Base.pure RadarRadarOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "session"))
-- | Create a new 'RadarRadarOptions' with all required fields.
mkRadarRadarOptions :: RadarRadarOptions
mkRadarRadarOptions = RadarRadarOptions{radarRadarOptionsSession = GHC.Maybe.Nothing}
