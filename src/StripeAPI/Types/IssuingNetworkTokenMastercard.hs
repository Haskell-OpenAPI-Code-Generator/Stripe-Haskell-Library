{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingNetworkTokenMastercard
module StripeAPI.Types.IssuingNetworkTokenMastercard where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_network_token_mastercard@ in the specification.
data IssuingNetworkTokenMastercard = IssuingNetworkTokenMastercard
  { -- | card_reference_id: A unique reference ID from MasterCard to represent the card account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingNetworkTokenMastercardCardReferenceId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | token_reference_id: The network-unique identifier for the token.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingNetworkTokenMastercardTokenReferenceId :: Data.Text.Internal.Text,
    -- | token_requestor_id: The ID of the entity requesting tokenization, specific to MasterCard.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingNetworkTokenMastercardTokenRequestorId :: Data.Text.Internal.Text,
    -- | token_requestor_name: The name of the entity requesting tokenization, if known. This is directly provided from MasterCard.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingNetworkTokenMastercardTokenRequestorName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingNetworkTokenMastercard where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_reference_id" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenMastercardCardReferenceId obj) : ["token_reference_id" Data.Aeson.Types.ToJSON..= issuingNetworkTokenMastercardTokenReferenceId obj] : ["token_requestor_id" Data.Aeson.Types.ToJSON..= issuingNetworkTokenMastercardTokenRequestorId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("token_requestor_name" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenMastercardTokenRequestorName obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_reference_id" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenMastercardCardReferenceId obj) : ["token_reference_id" Data.Aeson.Types.ToJSON..= issuingNetworkTokenMastercardTokenReferenceId obj] : ["token_requestor_id" Data.Aeson.Types.ToJSON..= issuingNetworkTokenMastercardTokenRequestorId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("token_requestor_name" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenMastercardTokenRequestorName obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingNetworkTokenMastercard where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingNetworkTokenMastercard" (\obj -> (((GHC.Base.pure IssuingNetworkTokenMastercard GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_reference_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token_reference_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "token_requestor_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "token_requestor_name"))

-- | Create a new 'IssuingNetworkTokenMastercard' with all required fields.
mkIssuingNetworkTokenMastercard ::
  -- | 'issuingNetworkTokenMastercardTokenReferenceId'
  Data.Text.Internal.Text ->
  -- | 'issuingNetworkTokenMastercardTokenRequestorId'
  Data.Text.Internal.Text ->
  IssuingNetworkTokenMastercard
mkIssuingNetworkTokenMastercard issuingNetworkTokenMastercardTokenReferenceId issuingNetworkTokenMastercardTokenRequestorId =
  IssuingNetworkTokenMastercard
    { issuingNetworkTokenMastercardCardReferenceId = GHC.Maybe.Nothing,
      issuingNetworkTokenMastercardTokenReferenceId = issuingNetworkTokenMastercardTokenReferenceId,
      issuingNetworkTokenMastercardTokenRequestorId = issuingNetworkTokenMastercardTokenRequestorId,
      issuingNetworkTokenMastercardTokenRequestorName = GHC.Maybe.Nothing
    }
