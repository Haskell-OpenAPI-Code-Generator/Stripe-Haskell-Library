{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Issuing_Dispute
module StripeAPI.Types.Issuing_Dispute where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingDisputeEvidence
import {-# SOURCE #-} StripeAPI.Types.Issuing_Transaction
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing.dispute@ in the specification.
--
-- As a [card issuer](https:\/\/stripe.com\/docs\/issuing), you can [dispute](https:\/\/stripe.com\/docs\/issuing\/disputes) transactions that you do not recognize, suspect to be fraudulent, or have some other issue.
--
-- Related guide: [Disputing Transactions](https:\/\/stripe.com\/docs\/issuing\/disputes)
data Issuing'dispute
  = Issuing'dispute
      { -- | amount: Disputed amount. Usually the amount of the \`disputed_transaction\`, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
        issuing'disputeAmount :: GHC.Types.Int,
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        issuing'disputeCreated :: GHC.Types.Int,
        -- | currency: The currency the \`disputed_transaction\` was made in.
        issuing'disputeCurrency :: Data.Text.Internal.Text,
        -- | disputed_transaction: The transaction being disputed.
        issuing'disputeDisputedTransaction :: Issuing'disputeDisputedTransaction'Variants,
        -- | evidence:
        issuing'disputeEvidence :: IssuingDisputeEvidence,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuing'disputeId :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        issuing'disputeLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        issuing'disputeMetadata :: Data.Aeson.Types.Internal.Object,
        -- | reason: Reason for this dispute. One of \`duplicate\`, \`product_not_received\`, \`fraudulent\`, or \`other\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuing'disputeReason :: Data.Text.Internal.Text,
        -- | status: Current status of dispute. One of \`unsubmitted\`, \`under_review\`, \`won\`, or \`lost\`.
        issuing'disputeStatus :: Issuing'disputeStatus'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'dispute where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= issuing'disputeAmount obj : "created" Data.Aeson.Types.ToJSON..= issuing'disputeCreated obj : "currency" Data.Aeson.Types.ToJSON..= issuing'disputeCurrency obj : "disputed_transaction" Data.Aeson.Types.ToJSON..= issuing'disputeDisputedTransaction obj : "evidence" Data.Aeson.Types.ToJSON..= issuing'disputeEvidence obj : "id" Data.Aeson.Types.ToJSON..= issuing'disputeId obj : "livemode" Data.Aeson.Types.ToJSON..= issuing'disputeLivemode obj : "metadata" Data.Aeson.Types.ToJSON..= issuing'disputeMetadata obj : "reason" Data.Aeson.Types.ToJSON..= issuing'disputeReason obj : "status" Data.Aeson.Types.ToJSON..= issuing'disputeStatus obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.dispute" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= issuing'disputeAmount obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= issuing'disputeCreated obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= issuing'disputeCurrency obj) GHC.Base.<> (("disputed_transaction" Data.Aeson.Types.ToJSON..= issuing'disputeDisputedTransaction obj) GHC.Base.<> (("evidence" Data.Aeson.Types.ToJSON..= issuing'disputeEvidence obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= issuing'disputeId obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= issuing'disputeLivemode obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= issuing'disputeMetadata obj) GHC.Base.<> (("reason" Data.Aeson.Types.ToJSON..= issuing'disputeReason obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= issuing'disputeStatus obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.dispute")))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'dispute where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'dispute" (\obj -> (((((((((GHC.Base.pure Issuing'dispute GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "disputed_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "evidence")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Create a new 'Issuing'dispute' with all required fields.
mkIssuing'dispute ::
  -- | 'issuing'disputeAmount'
  GHC.Types.Int ->
  -- | 'issuing'disputeCreated'
  GHC.Types.Int ->
  -- | 'issuing'disputeCurrency'
  Data.Text.Internal.Text ->
  -- | 'issuing'disputeDisputedTransaction'
  Issuing'disputeDisputedTransaction'Variants ->
  -- | 'issuing'disputeEvidence'
  IssuingDisputeEvidence ->
  -- | 'issuing'disputeId'
  Data.Text.Internal.Text ->
  -- | 'issuing'disputeLivemode'
  GHC.Types.Bool ->
  -- | 'issuing'disputeMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'issuing'disputeReason'
  Data.Text.Internal.Text ->
  -- | 'issuing'disputeStatus'
  Issuing'disputeStatus' ->
  Issuing'dispute
mkIssuing'dispute issuing'disputeAmount issuing'disputeCreated issuing'disputeCurrency issuing'disputeDisputedTransaction issuing'disputeEvidence issuing'disputeId issuing'disputeLivemode issuing'disputeMetadata issuing'disputeReason issuing'disputeStatus =
  Issuing'dispute
    { issuing'disputeAmount = issuing'disputeAmount,
      issuing'disputeCreated = issuing'disputeCreated,
      issuing'disputeCurrency = issuing'disputeCurrency,
      issuing'disputeDisputedTransaction = issuing'disputeDisputedTransaction,
      issuing'disputeEvidence = issuing'disputeEvidence,
      issuing'disputeId = issuing'disputeId,
      issuing'disputeLivemode = issuing'disputeLivemode,
      issuing'disputeMetadata = issuing'disputeMetadata,
      issuing'disputeReason = issuing'disputeReason,
      issuing'disputeStatus = issuing'disputeStatus
    }

-- | Defines the oneOf schema located at @components.schemas.issuing.dispute.properties.disputed_transaction.anyOf@ in the specification.
--
-- The transaction being disputed.
data Issuing'disputeDisputedTransaction'Variants
  = Issuing'disputeDisputedTransaction'Issuing'transaction Issuing'transaction
  | Issuing'disputeDisputedTransaction'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'disputeDisputedTransaction'Variants where
  toJSON (Issuing'disputeDisputedTransaction'Issuing'transaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'disputeDisputedTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'disputeDisputedTransaction'Variants where
  parseJSON val = case (Issuing'disputeDisputedTransaction'Issuing'transaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Issuing'disputeDisputedTransaction'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.issuing.dispute.properties.status@ in the specification.
--
-- Current status of dispute. One of \`unsubmitted\`, \`under_review\`, \`won\`, or \`lost\`.
data Issuing'disputeStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Issuing'disputeStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Issuing'disputeStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"lost"@
    Issuing'disputeStatus'EnumLost
  | -- | Represents the JSON value @"under_review"@
    Issuing'disputeStatus'EnumUnderReview
  | -- | Represents the JSON value @"unsubmitted"@
    Issuing'disputeStatus'EnumUnsubmitted
  | -- | Represents the JSON value @"won"@
    Issuing'disputeStatus'EnumWon
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'disputeStatus' where
  toJSON (Issuing'disputeStatus'Other val) = val
  toJSON (Issuing'disputeStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Issuing'disputeStatus'EnumLost) = "lost"
  toJSON (Issuing'disputeStatus'EnumUnderReview) = "under_review"
  toJSON (Issuing'disputeStatus'EnumUnsubmitted) = "unsubmitted"
  toJSON (Issuing'disputeStatus'EnumWon) = "won"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'disputeStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "lost" -> Issuing'disputeStatus'EnumLost
            | val GHC.Classes.== "under_review" -> Issuing'disputeStatus'EnumUnderReview
            | val GHC.Classes.== "unsubmitted" -> Issuing'disputeStatus'EnumUnsubmitted
            | val GHC.Classes.== "won" -> Issuing'disputeStatus'EnumWon
            | GHC.Base.otherwise -> Issuing'disputeStatus'Other val
      )
