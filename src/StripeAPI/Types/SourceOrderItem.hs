{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema SourceOrderItem
module StripeAPI.Types.SourceOrderItem where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema source_order_item
data SourceOrderItem
  = SourceOrderItem
      { -- | amount: The amount (price) for this order item.
        sourceOrderItemAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | currency: This currency of this order item. Required when \`amount\` is present.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        sourceOrderItemCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | description: Human-readable description for this order item.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        sourceOrderItemDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | quantity: The quantity of this order item. When type is \`sku\`, this is the number of instances of the SKU to be ordered.
        sourceOrderItemQuantity :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | type: The type of this order item. Must be \`sku\`, \`tax\`, or \`shipping\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        sourceOrderItemType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SourceOrderItem where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (sourceOrderItemAmount obj) : (Data.Aeson..=) "currency" (sourceOrderItemCurrency obj) : (Data.Aeson..=) "description" (sourceOrderItemDescription obj) : (Data.Aeson..=) "quantity" (sourceOrderItemQuantity obj) : (Data.Aeson..=) "type" (sourceOrderItemType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (sourceOrderItemAmount obj) GHC.Base.<> ((Data.Aeson..=) "currency" (sourceOrderItemCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (sourceOrderItemDescription obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (sourceOrderItemQuantity obj) GHC.Base.<> (Data.Aeson..=) "type" (sourceOrderItemType obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON SourceOrderItem where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceOrderItem" (\obj -> ((((GHC.Base.pure SourceOrderItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))
