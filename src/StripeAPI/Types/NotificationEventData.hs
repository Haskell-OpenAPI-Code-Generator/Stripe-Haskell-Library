{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema NotificationEventData
module StripeAPI.Types.NotificationEventData where

import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Generics
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema notification_event_data
data NotificationEventData
  = NotificationEventData
      { -- | object: Object containing the API resource relevant to the event. For example, an \`invoice.created\` event will have a full [invoice object](https:\/\/stripe.com\/docs\/api\#invoice_object) as the value of the object key.
        notificationEventDataObject :: Data.Aeson.Types.Internal.Object,
        -- | previous_attributes: Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events).
        notificationEventDataPreviousAttributes :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.ToJSON NotificationEventData where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "object" (notificationEventDataObject obj) : (Data.Aeson..=) "previous_attributes" (notificationEventDataPreviousAttributes obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "object" (notificationEventDataObject obj) GHC.Base.<> (Data.Aeson..=) "previous_attributes" (notificationEventDataPreviousAttributes obj))

instance Data.Aeson.Types.FromJSON.FromJSON NotificationEventData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "NotificationEventData" (\obj -> (GHC.Base.pure NotificationEventData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "previous_attributes"))
