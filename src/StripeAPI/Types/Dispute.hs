{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Dispute
module StripeAPI.Types.Dispute where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.Charge
import {-# SOURCE #-} StripeAPI.Types.DisputeEvidence
import {-# SOURCE #-} StripeAPI.Types.DisputeEvidenceDetails
import {-# SOURCE #-} StripeAPI.Types.PaymentIntent
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema dispute
--
-- A dispute occurs when a customer questions your charge with their card issuer.
-- When this happens, you\'re given the opportunity to respond to the dispute with
-- evidence that shows that the charge is legitimate. You can find more
-- information about the dispute process in our [Disputes and
-- Fraud](\/docs\/disputes) documentation.
--
-- Related guide: [Disputes and Fraud](https:\/\/stripe.com\/docs\/disputes).
data Dispute
  = Dispute
      { -- | amount: Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).
        disputeAmount :: GHC.Types.Int,
        -- | balance_transactions: List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
        disputeBalanceTransactions :: ([BalanceTransaction]),
        -- | charge: ID of the charge that was disputed.
        disputeCharge :: DisputeCharge'Variants,
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        disputeCreated :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        disputeCurrency :: Data.Text.Internal.Text,
        -- | evidence:
        disputeEvidence :: DisputeEvidence,
        -- | evidence_details:
        disputeEvidenceDetails :: DisputeEvidenceDetails,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        disputeId :: Data.Text.Internal.Text,
        -- | is_charge_refundable: If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.
        disputeIsChargeRefundable :: GHC.Types.Bool,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        disputeLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        disputeMetadata :: Data.Aeson.Types.Internal.Object,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        disputeObject :: DisputeObject',
        -- | payment_intent: ID of the PaymentIntent that was disputed.
        disputePaymentIntent :: (GHC.Maybe.Maybe DisputePaymentIntent'Variants),
        -- | reason: Reason given by cardholder for dispute. Possible values are \`bank_cannot_process\`, \`check_returned\`, \`credit_not_processed\`, \`customer_initiated\`, \`debit_not_authorized\`, \`duplicate\`, \`fraudulent\`, \`general\`, \`incorrect_account_details\`, \`insufficient_funds\`, \`product_not_received\`, \`product_unacceptable\`, \`subscription_canceled\`, or \`unrecognized\`. Read more about [dispute reasons](https:\/\/stripe.com\/docs\/disputes\/categories).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        disputeReason :: Data.Text.Internal.Text,
        -- | status: Current status of dispute. Possible values are \`warning_needs_response\`, \`warning_under_review\`, \`warning_closed\`, \`needs_response\`, \`under_review\`, \`charge_refunded\`, \`won\`, or \`lost\`.
        disputeStatus :: DisputeStatus'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Dispute where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (disputeAmount obj) : (Data.Aeson..=) "balance_transactions" (disputeBalanceTransactions obj) : (Data.Aeson..=) "charge" (disputeCharge obj) : (Data.Aeson..=) "created" (disputeCreated obj) : (Data.Aeson..=) "currency" (disputeCurrency obj) : (Data.Aeson..=) "evidence" (disputeEvidence obj) : (Data.Aeson..=) "evidence_details" (disputeEvidenceDetails obj) : (Data.Aeson..=) "id" (disputeId obj) : (Data.Aeson..=) "is_charge_refundable" (disputeIsChargeRefundable obj) : (Data.Aeson..=) "livemode" (disputeLivemode obj) : (Data.Aeson..=) "metadata" (disputeMetadata obj) : (Data.Aeson..=) "object" (disputeObject obj) : (Data.Aeson..=) "payment_intent" (disputePaymentIntent obj) : (Data.Aeson..=) "reason" (disputeReason obj) : (Data.Aeson..=) "status" (disputeStatus obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (disputeAmount obj) GHC.Base.<> ((Data.Aeson..=) "balance_transactions" (disputeBalanceTransactions obj) GHC.Base.<> ((Data.Aeson..=) "charge" (disputeCharge obj) GHC.Base.<> ((Data.Aeson..=) "created" (disputeCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (disputeCurrency obj) GHC.Base.<> ((Data.Aeson..=) "evidence" (disputeEvidence obj) GHC.Base.<> ((Data.Aeson..=) "evidence_details" (disputeEvidenceDetails obj) GHC.Base.<> ((Data.Aeson..=) "id" (disputeId obj) GHC.Base.<> ((Data.Aeson..=) "is_charge_refundable" (disputeIsChargeRefundable obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (disputeLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (disputeMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (disputeObject obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (disputePaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "reason" (disputeReason obj) GHC.Base.<> (Data.Aeson..=) "status" (disputeStatus obj)))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Dispute where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Dispute" (\obj -> ((((((((((((((GHC.Base.pure Dispute GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "balance_transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "evidence")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "evidence_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_charge_refundable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Define the one-of schema disputeCharge\'
--
-- ID of the charge that was disputed.
data DisputeCharge'Variants
  = DisputeCharge'Charge Charge
  | DisputeCharge'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DisputeCharge'Variants where
  toJSON (DisputeCharge'Charge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DisputeCharge'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DisputeCharge'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ DisputeCharge'Charge a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ DisputeCharge'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema disputeObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data DisputeObject'
  = DisputeObject'EnumOther Data.Aeson.Types.Internal.Value
  | DisputeObject'EnumTyped Data.Text.Internal.Text
  | DisputeObject'EnumStringDispute
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DisputeObject' where
  toJSON (DisputeObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (DisputeObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (DisputeObject'EnumStringDispute) = "dispute"

instance Data.Aeson.Types.FromJSON.FromJSON DisputeObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "dispute" -> DisputeObject'EnumStringDispute
            | GHC.Base.otherwise -> DisputeObject'EnumOther val
      )

-- | Define the one-of schema disputePayment_intent\'
--
-- ID of the PaymentIntent that was disputed.
data DisputePaymentIntent'Variants
  = DisputePaymentIntent'PaymentIntent PaymentIntent
  | DisputePaymentIntent'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DisputePaymentIntent'Variants where
  toJSON (DisputePaymentIntent'PaymentIntent a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (DisputePaymentIntent'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON DisputePaymentIntent'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ DisputePaymentIntent'PaymentIntent a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ DisputePaymentIntent'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema disputeStatus\'
--
-- Current status of dispute. Possible values are \`warning_needs_response\`, \`warning_under_review\`, \`warning_closed\`, \`needs_response\`, \`under_review\`, \`charge_refunded\`, \`won\`, or \`lost\`.
data DisputeStatus'
  = DisputeStatus'EnumOther Data.Aeson.Types.Internal.Value
  | DisputeStatus'EnumTyped Data.Text.Internal.Text
  | DisputeStatus'EnumStringChargeRefunded
  | DisputeStatus'EnumStringLost
  | DisputeStatus'EnumStringNeedsResponse
  | DisputeStatus'EnumStringUnderReview
  | DisputeStatus'EnumStringWarningClosed
  | DisputeStatus'EnumStringWarningNeedsResponse
  | DisputeStatus'EnumStringWarningUnderReview
  | DisputeStatus'EnumStringWon
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON DisputeStatus' where
  toJSON (DisputeStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (DisputeStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (DisputeStatus'EnumStringChargeRefunded) = "charge_refunded"
  toJSON (DisputeStatus'EnumStringLost) = "lost"
  toJSON (DisputeStatus'EnumStringNeedsResponse) = "needs_response"
  toJSON (DisputeStatus'EnumStringUnderReview) = "under_review"
  toJSON (DisputeStatus'EnumStringWarningClosed) = "warning_closed"
  toJSON (DisputeStatus'EnumStringWarningNeedsResponse) = "warning_needs_response"
  toJSON (DisputeStatus'EnumStringWarningUnderReview) = "warning_under_review"
  toJSON (DisputeStatus'EnumStringWon) = "won"

instance Data.Aeson.Types.FromJSON.FromJSON DisputeStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "charge_refunded" -> DisputeStatus'EnumStringChargeRefunded
            | val GHC.Classes.== "lost" -> DisputeStatus'EnumStringLost
            | val GHC.Classes.== "needs_response" -> DisputeStatus'EnumStringNeedsResponse
            | val GHC.Classes.== "under_review" -> DisputeStatus'EnumStringUnderReview
            | val GHC.Classes.== "warning_closed" -> DisputeStatus'EnumStringWarningClosed
            | val GHC.Classes.== "warning_needs_response" -> DisputeStatus'EnumStringWarningNeedsResponse
            | val GHC.Classes.== "warning_under_review" -> DisputeStatus'EnumStringWarningUnderReview
            | val GHC.Classes.== "won" -> DisputeStatus'EnumStringWon
            | GHC.Base.otherwise -> DisputeStatus'EnumOther val
      )
