{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Treasury_OutboundPayment
module StripeAPI.Types.Treasury_OutboundPayment where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.OutboundPaymentsPaymentMethodDetails
import {-# SOURCE #-} StripeAPI.Types.OutboundPaymentsPaymentMethodDetailsFinancialAccount
import {-# SOURCE #-} StripeAPI.Types.OutboundPaymentsPaymentMethodDetailsUsBankAccount
import {-# SOURCE #-} StripeAPI.Types.TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails
import {-# SOURCE #-} StripeAPI.Types.TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions
import {-# SOURCE #-} StripeAPI.Types.TreasuryOutboundPaymentsResourceReturnedStatus
import {-# SOURCE #-} StripeAPI.Types.TreasurySharedResourceBillingDetails
import {-# SOURCE #-} StripeAPI.Types.Treasury_Transaction
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.treasury.outbound_payment@ in the specification.
--
-- Use OutboundPayments to send funds to another party\'s external bank account or [FinancialAccount](https:\/\/stripe.com\/docs\/api\#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https:\/\/stripe.com\/docs\/api\#outbound_transfers).
--
-- Simulate OutboundPayment state changes with the \`\/v1\/test_helpers\/treasury\/outbound_payments\` endpoints. These methods can only be called on test mode objects.
data Treasury'outboundPayment = Treasury'outboundPayment
  { -- | amount: Amount (in cents) transferred.
    treasury'outboundPaymentAmount :: GHC.Types.Int,
    -- | cancelable: Returns \`true\` if the object can be canceled, and \`false\` otherwise.
    treasury'outboundPaymentCancelable :: GHC.Types.Bool,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    treasury'outboundPaymentCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    treasury'outboundPaymentCurrency :: Data.Text.Internal.Text,
    -- | customer: ID of the [customer](https:\/\/stripe.com\/docs\/api\/customers) to whom an OutboundPayment is sent.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'outboundPaymentCustomer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'outboundPaymentDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | destination_payment_method: The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using \`destination_payment_method_data\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'outboundPaymentDestinationPaymentMethod :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | destination_payment_method_details: Details about the PaymentMethod for an OutboundPayment.
    treasury'outboundPaymentDestinationPaymentMethodDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable)),
    -- | end_user_details: Details about the end user.
    treasury'outboundPaymentEndUserDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'outboundPaymentEndUserDetails'NonNullable)),
    -- | expected_arrival_date: The date when funds are expected to arrive in the destination account.
    treasury'outboundPaymentExpectedArrivalDate :: GHC.Types.Int,
    -- | financial_account: The FinancialAccount that funds were pulled from.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'outboundPaymentFinancialAccount :: Data.Text.Internal.Text,
    -- | hosted_regulatory_receipt_url: A [hosted transaction receipt](https:\/\/stripe.com\/docs\/treasury\/moving-money\/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe\'s money transmission licenses.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'outboundPaymentHostedRegulatoryReceiptUrl :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'outboundPaymentId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    treasury'outboundPaymentLivemode :: GHC.Types.Bool,
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    treasury'outboundPaymentMetadata :: Data.Aeson.Types.Internal.Object,
    -- | returned_details: Details about a returned OutboundPayment. Only set when the status is \`returned\`.
    treasury'outboundPaymentReturnedDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'outboundPaymentReturnedDetails'NonNullable)),
    -- | statement_descriptor: The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'outboundPaymentStatementDescriptor :: Data.Text.Internal.Text,
    -- | status: Current status of the OutboundPayment: \`processing\`, \`failed\`, \`posted\`, \`returned\`, \`canceled\`. An OutboundPayment is \`processing\` if it has been created and is pending. The status changes to \`posted\` once the OutboundPayment has been \"confirmed\" and funds have left the account, or to \`failed\` or \`canceled\`. If an OutboundPayment fails to arrive at its destination, its status will change to \`returned\`.
    treasury'outboundPaymentStatus :: Treasury'outboundPaymentStatus',
    -- | status_transitions:
    treasury'outboundPaymentStatusTransitions :: TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions,
    -- | transaction: The Transaction associated with this object.
    treasury'outboundPaymentTransaction :: Treasury'outboundPaymentTransaction'Variants
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'outboundPayment where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentAmount obj] : ["cancelable" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentCancelable obj] : ["created" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination_payment_method" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination_payment_method_details" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("end_user_details" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentEndUserDetails obj) : ["expected_arrival_date" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentExpectedArrivalDate obj] : ["financial_account" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentFinancialAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_regulatory_receipt_url" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentHostedRegulatoryReceiptUrl obj) : ["id" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentId obj] : ["livemode" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentMetadata obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("returned_details" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentReturnedDetails obj) : ["statement_descriptor" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentStatementDescriptor obj] : ["status" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentStatus obj] : ["status_transitions" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentStatusTransitions obj] : ["transaction" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentTransaction obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "treasury.outbound_payment"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentAmount obj] : ["cancelable" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentCancelable obj] : ["created" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination_payment_method" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethod obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination_payment_method_details" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("end_user_details" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentEndUserDetails obj) : ["expected_arrival_date" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentExpectedArrivalDate obj] : ["financial_account" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentFinancialAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_regulatory_receipt_url" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentHostedRegulatoryReceiptUrl obj) : ["id" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentId obj] : ["livemode" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentMetadata obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("returned_details" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentReturnedDetails obj) : ["statement_descriptor" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentStatementDescriptor obj] : ["status" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentStatus obj] : ["status_transitions" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentStatusTransitions obj] : ["transaction" Data.Aeson.Types.ToJSON..= treasury'outboundPaymentTransaction obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "treasury.outbound_payment"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'outboundPayment where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Treasury'outboundPayment" (\obj -> (((((((((((((((((((GHC.Base.pure Treasury'outboundPayment GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cancelable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "destination_payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "destination_payment_method_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "end_user_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expected_arrival_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "financial_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "hosted_regulatory_receipt_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "returned_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_transitions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transaction"))

-- | Create a new 'Treasury'outboundPayment' with all required fields.
mkTreasury'outboundPayment ::
  -- | 'treasury'outboundPaymentAmount'
  GHC.Types.Int ->
  -- | 'treasury'outboundPaymentCancelable'
  GHC.Types.Bool ->
  -- | 'treasury'outboundPaymentCreated'
  GHC.Types.Int ->
  -- | 'treasury'outboundPaymentCurrency'
  Data.Text.Internal.Text ->
  -- | 'treasury'outboundPaymentExpectedArrivalDate'
  GHC.Types.Int ->
  -- | 'treasury'outboundPaymentFinancialAccount'
  Data.Text.Internal.Text ->
  -- | 'treasury'outboundPaymentId'
  Data.Text.Internal.Text ->
  -- | 'treasury'outboundPaymentLivemode'
  GHC.Types.Bool ->
  -- | 'treasury'outboundPaymentMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'treasury'outboundPaymentStatementDescriptor'
  Data.Text.Internal.Text ->
  -- | 'treasury'outboundPaymentStatus'
  Treasury'outboundPaymentStatus' ->
  -- | 'treasury'outboundPaymentStatusTransitions'
  TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions ->
  -- | 'treasury'outboundPaymentTransaction'
  Treasury'outboundPaymentTransaction'Variants ->
  Treasury'outboundPayment
mkTreasury'outboundPayment treasury'outboundPaymentAmount treasury'outboundPaymentCancelable treasury'outboundPaymentCreated treasury'outboundPaymentCurrency treasury'outboundPaymentExpectedArrivalDate treasury'outboundPaymentFinancialAccount treasury'outboundPaymentId treasury'outboundPaymentLivemode treasury'outboundPaymentMetadata treasury'outboundPaymentStatementDescriptor treasury'outboundPaymentStatus treasury'outboundPaymentStatusTransitions treasury'outboundPaymentTransaction =
  Treasury'outboundPayment
    { treasury'outboundPaymentAmount = treasury'outboundPaymentAmount,
      treasury'outboundPaymentCancelable = treasury'outboundPaymentCancelable,
      treasury'outboundPaymentCreated = treasury'outboundPaymentCreated,
      treasury'outboundPaymentCurrency = treasury'outboundPaymentCurrency,
      treasury'outboundPaymentCustomer = GHC.Maybe.Nothing,
      treasury'outboundPaymentDescription = GHC.Maybe.Nothing,
      treasury'outboundPaymentDestinationPaymentMethod = GHC.Maybe.Nothing,
      treasury'outboundPaymentDestinationPaymentMethodDetails = GHC.Maybe.Nothing,
      treasury'outboundPaymentEndUserDetails = GHC.Maybe.Nothing,
      treasury'outboundPaymentExpectedArrivalDate = treasury'outboundPaymentExpectedArrivalDate,
      treasury'outboundPaymentFinancialAccount = treasury'outboundPaymentFinancialAccount,
      treasury'outboundPaymentHostedRegulatoryReceiptUrl = GHC.Maybe.Nothing,
      treasury'outboundPaymentId = treasury'outboundPaymentId,
      treasury'outboundPaymentLivemode = treasury'outboundPaymentLivemode,
      treasury'outboundPaymentMetadata = treasury'outboundPaymentMetadata,
      treasury'outboundPaymentReturnedDetails = GHC.Maybe.Nothing,
      treasury'outboundPaymentStatementDescriptor = treasury'outboundPaymentStatementDescriptor,
      treasury'outboundPaymentStatus = treasury'outboundPaymentStatus,
      treasury'outboundPaymentStatusTransitions = treasury'outboundPaymentStatusTransitions,
      treasury'outboundPaymentTransaction = treasury'outboundPaymentTransaction
    }

-- | Defines the object schema located at @components.schemas.treasury.outbound_payment.properties.destination_payment_method_details.anyOf@ in the specification.
--
-- Details about the PaymentMethod for an OutboundPayment.
data Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable = Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable
  { -- | billing_details:
    treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableBillingDetails :: (GHC.Maybe.Maybe TreasurySharedResourceBillingDetails),
    -- | financial_account:
    treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableFinancialAccount :: (GHC.Maybe.Maybe OutboundPaymentsPaymentMethodDetailsFinancialAccount),
    -- | type: The type of the payment method used in the OutboundPayment.
    treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType :: (GHC.Maybe.Maybe Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'),
    -- | us_bank_account:
    treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableUsBankAccount :: (GHC.Maybe.Maybe OutboundPaymentsPaymentMethodDetailsUsBankAccount)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_details" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableBillingDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_account" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableFinancialAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableUsBankAccount obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_details" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableBillingDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_account" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableFinancialAccount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableUsBankAccount obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable" (\obj -> (((GHC.Base.pure Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "billing_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "financial_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us_bank_account"))

-- | Create a new 'Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable' with all required fields.
mkTreasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable :: Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable
mkTreasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable =
  Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullable
    { treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableBillingDetails = GHC.Maybe.Nothing,
      treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableFinancialAccount = GHC.Maybe.Nothing,
      treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType = GHC.Maybe.Nothing,
      treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableUsBankAccount = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.treasury.outbound_payment.properties.destination_payment_method_details.anyOf.properties.type@ in the specification.
--
-- The type of the payment method used in the OutboundPayment.
data Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"financial_account"@
    Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'EnumFinancialAccount
  | -- | Represents the JSON value @"us_bank_account"@
    Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'EnumUsBankAccount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType' where
  toJSON (Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'Other val) = val
  toJSON (Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'EnumFinancialAccount) = "financial_account"
  toJSON (Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'EnumUsBankAccount) = "us_bank_account"

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "financial_account" -> Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'EnumFinancialAccount
            | val GHC.Classes.== "us_bank_account" -> Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'EnumUsBankAccount
            | GHC.Base.otherwise -> Treasury'outboundPaymentDestinationPaymentMethodDetails'NonNullableType'Other val
      )

-- | Defines the object schema located at @components.schemas.treasury.outbound_payment.properties.end_user_details.anyOf@ in the specification.
--
-- Details about the end user.
data Treasury'outboundPaymentEndUserDetails'NonNullable = Treasury'outboundPaymentEndUserDetails'NonNullable
  { -- | ip_address: IP address of the user initiating the OutboundPayment. Set if \`present\` is set to \`true\`. IP address collection is required for risk and compliance reasons. This will be used to help determine if the OutboundPayment is authorized or should be blocked.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    treasury'outboundPaymentEndUserDetails'NonNullableIpAddress :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | present: \`true\` if the OutboundPayment creation request is being made on behalf of an end user by a platform. Otherwise, \`false\`.
    treasury'outboundPaymentEndUserDetails'NonNullablePresent :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'outboundPaymentEndUserDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_address" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentEndUserDetails'NonNullableIpAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("present" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentEndUserDetails'NonNullablePresent obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_address" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentEndUserDetails'NonNullableIpAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("present" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentEndUserDetails'NonNullablePresent obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'outboundPaymentEndUserDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Treasury'outboundPaymentEndUserDetails'NonNullable" (\obj -> (GHC.Base.pure Treasury'outboundPaymentEndUserDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ip_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "present"))

-- | Create a new 'Treasury'outboundPaymentEndUserDetails'NonNullable' with all required fields.
mkTreasury'outboundPaymentEndUserDetails'NonNullable :: Treasury'outboundPaymentEndUserDetails'NonNullable
mkTreasury'outboundPaymentEndUserDetails'NonNullable =
  Treasury'outboundPaymentEndUserDetails'NonNullable
    { treasury'outboundPaymentEndUserDetails'NonNullableIpAddress = GHC.Maybe.Nothing,
      treasury'outboundPaymentEndUserDetails'NonNullablePresent = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.treasury.outbound_payment.properties.returned_details.anyOf@ in the specification.
--
-- Details about a returned OutboundPayment. Only set when the status is \\\`returned\\\`.
data Treasury'outboundPaymentReturnedDetails'NonNullable = Treasury'outboundPaymentReturnedDetails'NonNullable
  { -- | code: Reason for the return.
    treasury'outboundPaymentReturnedDetails'NonNullableCode :: (GHC.Maybe.Maybe Treasury'outboundPaymentReturnedDetails'NonNullableCode'),
    -- | transaction: The Transaction associated with this object.
    treasury'outboundPaymentReturnedDetails'NonNullableTransaction :: (GHC.Maybe.Maybe Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'outboundPaymentReturnedDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentReturnedDetails'NonNullableCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentReturnedDetails'NonNullableTransaction obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentReturnedDetails'NonNullableCode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction" Data.Aeson.Types.ToJSON..=)) (treasury'outboundPaymentReturnedDetails'NonNullableTransaction obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'outboundPaymentReturnedDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Treasury'outboundPaymentReturnedDetails'NonNullable" (\obj -> (GHC.Base.pure Treasury'outboundPaymentReturnedDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transaction"))

-- | Create a new 'Treasury'outboundPaymentReturnedDetails'NonNullable' with all required fields.
mkTreasury'outboundPaymentReturnedDetails'NonNullable :: Treasury'outboundPaymentReturnedDetails'NonNullable
mkTreasury'outboundPaymentReturnedDetails'NonNullable =
  Treasury'outboundPaymentReturnedDetails'NonNullable
    { treasury'outboundPaymentReturnedDetails'NonNullableCode = GHC.Maybe.Nothing,
      treasury'outboundPaymentReturnedDetails'NonNullableTransaction = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.treasury.outbound_payment.properties.returned_details.anyOf.properties.code@ in the specification.
--
-- Reason for the return.
data Treasury'outboundPaymentReturnedDetails'NonNullableCode'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"account_closed"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumAccountClosed
  | -- | Represents the JSON value @"account_frozen"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumAccountFrozen
  | -- | Represents the JSON value @"bank_account_restricted"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumBankAccountRestricted
  | -- | Represents the JSON value @"bank_ownership_changed"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumBankOwnershipChanged
  | -- | Represents the JSON value @"declined"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumDeclined
  | -- | Represents the JSON value @"incorrect_account_holder_name"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumIncorrectAccountHolderName
  | -- | Represents the JSON value @"invalid_account_number"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumInvalidAccountNumber
  | -- | Represents the JSON value @"invalid_currency"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumInvalidCurrency
  | -- | Represents the JSON value @"no_account"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumNoAccount
  | -- | Represents the JSON value @"other"@
    Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumOther
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'outboundPaymentReturnedDetails'NonNullableCode' where
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'Other val) = val
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumAccountClosed) = "account_closed"
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumAccountFrozen) = "account_frozen"
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumBankAccountRestricted) = "bank_account_restricted"
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumBankOwnershipChanged) = "bank_ownership_changed"
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumDeclined) = "declined"
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumIncorrectAccountHolderName) = "incorrect_account_holder_name"
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumInvalidAccountNumber) = "invalid_account_number"
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumInvalidCurrency) = "invalid_currency"
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumNoAccount) = "no_account"
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumOther) = "other"

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'outboundPaymentReturnedDetails'NonNullableCode' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "account_closed" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumAccountClosed
            | val GHC.Classes.== "account_frozen" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumAccountFrozen
            | val GHC.Classes.== "bank_account_restricted" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumBankAccountRestricted
            | val GHC.Classes.== "bank_ownership_changed" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumBankOwnershipChanged
            | val GHC.Classes.== "declined" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumDeclined
            | val GHC.Classes.== "incorrect_account_holder_name" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumIncorrectAccountHolderName
            | val GHC.Classes.== "invalid_account_number" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumInvalidAccountNumber
            | val GHC.Classes.== "invalid_currency" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumInvalidCurrency
            | val GHC.Classes.== "no_account" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumNoAccount
            | val GHC.Classes.== "other" -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'EnumOther
            | GHC.Base.otherwise -> Treasury'outboundPaymentReturnedDetails'NonNullableCode'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.treasury.outbound_payment.properties.returned_details.anyOf.properties.transaction.anyOf@ in the specification.
--
-- The Transaction associated with this object.
data Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Variants
  = Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Text Data.Text.Internal.Text
  | Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Treasury'transaction Treasury'transaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Variants where
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Treasury'transaction a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Variants where
  parseJSON val = case (Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Treasury'outboundPaymentReturnedDetails'NonNullableTransaction'Treasury'transaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.treasury.outbound_payment.properties.status@ in the specification.
--
-- Current status of the OutboundPayment: \`processing\`, \`failed\`, \`posted\`, \`returned\`, \`canceled\`. An OutboundPayment is \`processing\` if it has been created and is pending. The status changes to \`posted\` once the OutboundPayment has been \"confirmed\" and funds have left the account, or to \`failed\` or \`canceled\`. If an OutboundPayment fails to arrive at its destination, its status will change to \`returned\`.
data Treasury'outboundPaymentStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Treasury'outboundPaymentStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Treasury'outboundPaymentStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"canceled"@
    Treasury'outboundPaymentStatus'EnumCanceled
  | -- | Represents the JSON value @"failed"@
    Treasury'outboundPaymentStatus'EnumFailed
  | -- | Represents the JSON value @"posted"@
    Treasury'outboundPaymentStatus'EnumPosted
  | -- | Represents the JSON value @"processing"@
    Treasury'outboundPaymentStatus'EnumProcessing
  | -- | Represents the JSON value @"returned"@
    Treasury'outboundPaymentStatus'EnumReturned
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'outboundPaymentStatus' where
  toJSON (Treasury'outboundPaymentStatus'Other val) = val
  toJSON (Treasury'outboundPaymentStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Treasury'outboundPaymentStatus'EnumCanceled) = "canceled"
  toJSON (Treasury'outboundPaymentStatus'EnumFailed) = "failed"
  toJSON (Treasury'outboundPaymentStatus'EnumPosted) = "posted"
  toJSON (Treasury'outboundPaymentStatus'EnumProcessing) = "processing"
  toJSON (Treasury'outboundPaymentStatus'EnumReturned) = "returned"

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'outboundPaymentStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "canceled" -> Treasury'outboundPaymentStatus'EnumCanceled
            | val GHC.Classes.== "failed" -> Treasury'outboundPaymentStatus'EnumFailed
            | val GHC.Classes.== "posted" -> Treasury'outboundPaymentStatus'EnumPosted
            | val GHC.Classes.== "processing" -> Treasury'outboundPaymentStatus'EnumProcessing
            | val GHC.Classes.== "returned" -> Treasury'outboundPaymentStatus'EnumReturned
            | GHC.Base.otherwise -> Treasury'outboundPaymentStatus'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.treasury.outbound_payment.properties.transaction.anyOf@ in the specification.
--
-- The Transaction associated with this object.
data Treasury'outboundPaymentTransaction'Variants
  = Treasury'outboundPaymentTransaction'Text Data.Text.Internal.Text
  | Treasury'outboundPaymentTransaction'Treasury'transaction Treasury'transaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Treasury'outboundPaymentTransaction'Variants where
  toJSON (Treasury'outboundPaymentTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Treasury'outboundPaymentTransaction'Treasury'transaction a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Treasury'outboundPaymentTransaction'Variants where
  parseJSON val = case (Treasury'outboundPaymentTransaction'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Treasury'outboundPaymentTransaction'Treasury'transaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
