{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema OutboundPaymentsPaymentMethodDetailsUsBankAccount
module StripeAPI.Types.OutboundPaymentsPaymentMethodDetailsUsBankAccount where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.outbound_payments_payment_method_details_us_bank_account@ in the specification.
data OutboundPaymentsPaymentMethodDetailsUsBankAccount = OutboundPaymentsPaymentMethodDetailsUsBankAccount
  { -- | account_holder_type: Account holder type: individual or company.
    outboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullable)),
    -- | account_type: Account type: checkings or savings. Defaults to checking if omitted.
    outboundPaymentsPaymentMethodDetailsUsBankAccountAccountType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullable)),
    -- | bank_name: Name of the bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    outboundPaymentsPaymentMethodDetailsUsBankAccountBankName :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    outboundPaymentsPaymentMethodDetailsUsBankAccountFingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | last4: Last four digits of the bank account number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    outboundPaymentsPaymentMethodDetailsUsBankAccountLast4 :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | network: The US bank account network used to send funds.
    outboundPaymentsPaymentMethodDetailsUsBankAccountNetwork :: OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork',
    -- | routing_number: Routing number of the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    outboundPaymentsPaymentMethodDetailsUsBankAccountRoutingNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OutboundPaymentsPaymentMethodDetailsUsBankAccount where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountAccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountBankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountLast4 obj) : ["network" Data.Aeson.Types.ToJSON..= outboundPaymentsPaymentMethodDetailsUsBankAccountNetwork obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountRoutingNumber obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_holder_type" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("account_type" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountAccountType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_name" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountBankName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fingerprint" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountLast4 obj) : ["network" Data.Aeson.Types.ToJSON..= outboundPaymentsPaymentMethodDetailsUsBankAccountNetwork obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("routing_number" Data.Aeson.Types.ToJSON..=)) (outboundPaymentsPaymentMethodDetailsUsBankAccountRoutingNumber obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OutboundPaymentsPaymentMethodDetailsUsBankAccount where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OutboundPaymentsPaymentMethodDetailsUsBankAccount" (\obj -> ((((((GHC.Base.pure OutboundPaymentsPaymentMethodDetailsUsBankAccount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "account_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "routing_number"))

-- | Create a new 'OutboundPaymentsPaymentMethodDetailsUsBankAccount' with all required fields.
mkOutboundPaymentsPaymentMethodDetailsUsBankAccount ::
  -- | 'outboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'
  OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork' ->
  OutboundPaymentsPaymentMethodDetailsUsBankAccount
mkOutboundPaymentsPaymentMethodDetailsUsBankAccount outboundPaymentsPaymentMethodDetailsUsBankAccountNetwork =
  OutboundPaymentsPaymentMethodDetailsUsBankAccount
    { outboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType = GHC.Maybe.Nothing,
      outboundPaymentsPaymentMethodDetailsUsBankAccountAccountType = GHC.Maybe.Nothing,
      outboundPaymentsPaymentMethodDetailsUsBankAccountBankName = GHC.Maybe.Nothing,
      outboundPaymentsPaymentMethodDetailsUsBankAccountFingerprint = GHC.Maybe.Nothing,
      outboundPaymentsPaymentMethodDetailsUsBankAccountLast4 = GHC.Maybe.Nothing,
      outboundPaymentsPaymentMethodDetailsUsBankAccountNetwork = outboundPaymentsPaymentMethodDetailsUsBankAccountNetwork,
      outboundPaymentsPaymentMethodDetailsUsBankAccountRoutingNumber = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.outbound_payments_payment_method_details_us_bank_account.properties.account_holder_type@ in the specification.
--
-- Account holder type: individual or company.
data OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableEnumCompany
  | -- | Represents the JSON value @"individual"@
    OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableEnumIndividual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullable where
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableOther val) = val
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableEnumCompany) = "company"
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableEnumIndividual) = "individual"

instance Data.Aeson.Types.FromJSON.FromJSON OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "company" -> OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableEnumCompany
            | val GHC.Classes.== "individual" -> OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableEnumIndividual
            | GHC.Base.otherwise -> OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountHolderType'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.outbound_payments_payment_method_details_us_bank_account.properties.account_type@ in the specification.
--
-- Account type: checkings or savings. Defaults to checking if omitted.
data OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"checking"@
    OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableEnumChecking
  | -- | Represents the JSON value @"savings"@
    OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableEnumSavings
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullable where
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableOther val) = val
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableEnumChecking) = "checking"
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableEnumSavings) = "savings"

instance Data.Aeson.Types.FromJSON.FromJSON OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "checking" -> OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableEnumChecking
            | val GHC.Classes.== "savings" -> OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableEnumSavings
            | GHC.Base.otherwise -> OutboundPaymentsPaymentMethodDetailsUsBankAccountAccountType'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.outbound_payments_payment_method_details_us_bank_account.properties.network@ in the specification.
--
-- The US bank account network used to send funds.
data OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"ach"@
    OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'EnumAch
  | -- | Represents the JSON value @"us_domestic_wire"@
    OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'EnumUsDomesticWire
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork' where
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'Other val) = val
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'EnumAch) = "ach"
  toJSON (OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'EnumUsDomesticWire) = "us_domestic_wire"

instance Data.Aeson.Types.FromJSON.FromJSON OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ach" -> OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'EnumAch
            | val GHC.Classes.== "us_domestic_wire" -> OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'EnumUsDomesticWire
            | GHC.Base.otherwise -> OutboundPaymentsPaymentMethodDetailsUsBankAccountNetwork'Other val
      )
