{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingNetworkTokenDevice
module StripeAPI.Types.IssuingNetworkTokenDevice where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_network_token_device@ in the specification.
data IssuingNetworkTokenDevice = IssuingNetworkTokenDevice
  { -- | device_fingerprint: An obfuscated ID derived from the device ID.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingNetworkTokenDeviceDeviceFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | ip_address: The IP address of the device at provisioning time.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingNetworkTokenDeviceIpAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | location: The geographic latitude\/longitude coordinates of the device at provisioning time. The format is [+-]decimal\/[+-]decimal.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingNetworkTokenDeviceLocation :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | name: The name of the device used for tokenization.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingNetworkTokenDeviceName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | phone_number: The phone number of the device used for tokenization.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingNetworkTokenDevicePhoneNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | type: The type of device used for tokenization.
    issuingNetworkTokenDeviceType :: (GHC.Maybe.Maybe IssuingNetworkTokenDeviceType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingNetworkTokenDevice where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("device_fingerprint" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceDeviceFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_address" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceIpAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("location" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceLocation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone_number" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDevicePhoneNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("device_fingerprint" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceDeviceFingerprint obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip_address" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceIpAddress obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("location" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceLocation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("name" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceName obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("phone_number" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDevicePhoneNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenDeviceType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingNetworkTokenDevice where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingNetworkTokenDevice" (\obj -> (((((GHC.Base.pure IssuingNetworkTokenDevice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "device_fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ip_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "phone_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type"))

-- | Create a new 'IssuingNetworkTokenDevice' with all required fields.
mkIssuingNetworkTokenDevice :: IssuingNetworkTokenDevice
mkIssuingNetworkTokenDevice =
  IssuingNetworkTokenDevice
    { issuingNetworkTokenDeviceDeviceFingerprint = GHC.Maybe.Nothing,
      issuingNetworkTokenDeviceIpAddress = GHC.Maybe.Nothing,
      issuingNetworkTokenDeviceLocation = GHC.Maybe.Nothing,
      issuingNetworkTokenDeviceName = GHC.Maybe.Nothing,
      issuingNetworkTokenDevicePhoneNumber = GHC.Maybe.Nothing,
      issuingNetworkTokenDeviceType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing_network_token_device.properties.type@ in the specification.
--
-- The type of device used for tokenization.
data IssuingNetworkTokenDeviceType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingNetworkTokenDeviceType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingNetworkTokenDeviceType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"other"@
    IssuingNetworkTokenDeviceType'EnumOther
  | -- | Represents the JSON value @"phone"@
    IssuingNetworkTokenDeviceType'EnumPhone
  | -- | Represents the JSON value @"watch"@
    IssuingNetworkTokenDeviceType'EnumWatch
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingNetworkTokenDeviceType' where
  toJSON (IssuingNetworkTokenDeviceType'Other val) = val
  toJSON (IssuingNetworkTokenDeviceType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingNetworkTokenDeviceType'EnumOther) = "other"
  toJSON (IssuingNetworkTokenDeviceType'EnumPhone) = "phone"
  toJSON (IssuingNetworkTokenDeviceType'EnumWatch) = "watch"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingNetworkTokenDeviceType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "other" -> IssuingNetworkTokenDeviceType'EnumOther
            | val GHC.Classes.== "phone" -> IssuingNetworkTokenDeviceType'EnumPhone
            | val GHC.Classes.== "watch" -> IssuingNetworkTokenDeviceType'EnumWatch
            | GHC.Base.otherwise -> IssuingNetworkTokenDeviceType'Other val
      )
