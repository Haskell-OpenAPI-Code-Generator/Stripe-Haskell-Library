{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Balance
module StripeAPI.Types.Balance where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BalanceAmount
import {-# SOURCE #-} StripeAPI.Types.BalanceAmountNet
import {-# SOURCE #-} StripeAPI.Types.BalanceDetail
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.balance@ in the specification.
--
-- This is an object representing your Stripe balance. You can retrieve it to see
-- the balance currently on your Stripe account.
--
-- You can also retrieve the balance history, which contains a list of
-- [transactions](https:\/\/stripe.com\/docs\/reporting\/balance-transaction-types) that contributed to the balance
-- (charges, payouts, and so forth).
--
-- The available and pending amounts for each currency are broken down further by
-- payment source types.
--
-- Related guide: [Understanding Connect account balances](https:\/\/stripe.com\/docs\/connect\/account-balances)
data Balance = Balance
  { -- | available: Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](https:\/\/stripe.com\/docs\/api\#transfers) or [Payouts API](https:\/\/stripe.com\/docs\/api\#payouts). You can find the available balance for each currency and payment type in the \`source_types\` property.
    balanceAvailable :: ([BalanceAmount]),
    -- | connect_reserved: Funds held due to negative balances on connected Custom accounts. You can find the connect reserve balance for each currency and payment type in the \`source_types\` property.
    balanceConnectReserved :: (GHC.Maybe.Maybe ([BalanceAmount])),
    -- | instant_available: Funds that you can pay out using Instant Payouts.
    balanceInstantAvailable :: (GHC.Maybe.Maybe ([BalanceAmountNet])),
    -- | issuing:
    balanceIssuing :: (GHC.Maybe.Maybe BalanceDetail),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    balanceLivemode :: GHC.Types.Bool,
    -- | pending: Funds that aren\'t available in the balance yet. You can find the pending balance for each currency and each payment type in the \`source_types\` property.
    balancePending :: ([BalanceAmount])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Balance where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= balanceAvailable obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connect_reserved" Data.Aeson.Types.ToJSON..=)) (balanceConnectReserved obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instant_available" Data.Aeson.Types.ToJSON..=)) (balanceInstantAvailable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuing" Data.Aeson.Types.ToJSON..=)) (balanceIssuing obj) : ["livemode" Data.Aeson.Types.ToJSON..= balanceLivemode obj] : ["pending" Data.Aeson.Types.ToJSON..= balancePending obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "balance"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["available" Data.Aeson.Types.ToJSON..= balanceAvailable obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("connect_reserved" Data.Aeson.Types.ToJSON..=)) (balanceConnectReserved obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("instant_available" Data.Aeson.Types.ToJSON..=)) (balanceInstantAvailable obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("issuing" Data.Aeson.Types.ToJSON..=)) (balanceIssuing obj) : ["livemode" Data.Aeson.Types.ToJSON..= balanceLivemode obj] : ["pending" Data.Aeson.Types.ToJSON..= balancePending obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "balance"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Balance where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Balance" (\obj -> (((((GHC.Base.pure Balance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "connect_reserved")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "instant_available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "issuing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending"))

-- | Create a new 'Balance' with all required fields.
mkBalance ::
  -- | 'balanceAvailable'
  [BalanceAmount] ->
  -- | 'balanceLivemode'
  GHC.Types.Bool ->
  -- | 'balancePending'
  [BalanceAmount] ->
  Balance
mkBalance balanceAvailable balanceLivemode balancePending =
  Balance
    { balanceAvailable = balanceAvailable,
      balanceConnectReserved = GHC.Maybe.Nothing,
      balanceInstantAvailable = GHC.Maybe.Nothing,
      balanceIssuing = GHC.Maybe.Nothing,
      balanceLivemode = balanceLivemode,
      balancePending = balancePending
    }
