{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema PaymentIntentPaymentMethodOptionsCard
module StripeAPI.Types.PaymentIntentPaymentMethodOptionsCard where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardInstallmentsPlan
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCardInstallments
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema payment_intent_payment_method_options_card
data PaymentIntentPaymentMethodOptionsCard
  = PaymentIntentPaymentMethodOptionsCard
      { -- | installments: Installment details for this payment (Mexico only).
        --
        -- For more information, see the [installments integration guide](https:\/\/stripe.com\/docs\/payments\/installments).
        paymentIntentPaymentMethodOptionsCardInstallments :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardInstallments'),
        -- | request_three_d_secure: We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: \`automatic\` or \`any\`. If not provided, defaults to \`automatic\`. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
        paymentIntentPaymentMethodOptionsCardRequestThreeDSecure :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCard where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "installments" (paymentIntentPaymentMethodOptionsCardInstallments obj) : (Data.Aeson..=) "request_three_d_secure" (paymentIntentPaymentMethodOptionsCardRequestThreeDSecure obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "installments" (paymentIntentPaymentMethodOptionsCardInstallments obj) GHC.Base.<> (Data.Aeson..=) "request_three_d_secure" (paymentIntentPaymentMethodOptionsCardRequestThreeDSecure obj))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCard where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCard" (\obj -> (GHC.Base.pure PaymentIntentPaymentMethodOptionsCard GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "request_three_d_secure"))

-- | Defines the data type for the schema payment_intent_payment_method_options_cardInstallments\'
--
-- Installment details for this payment (Mexico only).
--
-- For more information, see the [installments integration guide](https:\\\/\\\/stripe.com\\\/docs\\\/payments\\\/installments).
data PaymentIntentPaymentMethodOptionsCardInstallments'
  = PaymentIntentPaymentMethodOptionsCardInstallments'
      { -- | available_plans: Installment plans that may be selected for this PaymentIntent.
        paymentIntentPaymentMethodOptionsCardInstallments'AvailablePlans :: (GHC.Maybe.Maybe ([PaymentMethodDetailsCardInstallmentsPlan])),
        -- | enabled: Whether Installments are enabled for this PaymentIntent.
        paymentIntentPaymentMethodOptionsCardInstallments'Enabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | plan: Installment plan selected for this PaymentIntent.
        paymentIntentPaymentMethodOptionsCardInstallments'Plan :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardInstallments'Plan')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCardInstallments' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "available_plans" (paymentIntentPaymentMethodOptionsCardInstallments'AvailablePlans obj) : (Data.Aeson..=) "enabled" (paymentIntentPaymentMethodOptionsCardInstallments'Enabled obj) : (Data.Aeson..=) "plan" (paymentIntentPaymentMethodOptionsCardInstallments'Plan obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "available_plans" (paymentIntentPaymentMethodOptionsCardInstallments'AvailablePlans obj) GHC.Base.<> ((Data.Aeson..=) "enabled" (paymentIntentPaymentMethodOptionsCardInstallments'Enabled obj) GHC.Base.<> (Data.Aeson..=) "plan" (paymentIntentPaymentMethodOptionsCardInstallments'Plan obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardInstallments' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCardInstallments'" (\obj -> ((GHC.Base.pure PaymentIntentPaymentMethodOptionsCardInstallments' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_plans")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan"))

-- | Defines the data type for the schema payment_intent_payment_method_options_cardInstallments\'Plan\'
--
-- Installment plan selected for this PaymentIntent.
data PaymentIntentPaymentMethodOptionsCardInstallments'Plan'
  = PaymentIntentPaymentMethodOptionsCardInstallments'Plan'
      { -- | count: For \`fixed_count\` installment plans, this is the number of installment payments your customer will make to their credit card.
        paymentIntentPaymentMethodOptionsCardInstallments'Plan'Count :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | interval: For \`fixed_count\` installment plans, this is the interval between installment payments your customer will make to their credit card.
        -- One of \`month\`.
        paymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'),
        -- | type: Type of installment plan, one of \`fixed_count\`.
        paymentIntentPaymentMethodOptionsCardInstallments'Plan'Type :: (GHC.Maybe.Maybe PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "count" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Count obj) : (Data.Aeson..=) "interval" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval obj) : (Data.Aeson..=) "type" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Type obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "count" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Count obj) GHC.Base.<> ((Data.Aeson..=) "interval" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval obj) GHC.Base.<> (Data.Aeson..=) "type" (paymentIntentPaymentMethodOptionsCardInstallments'Plan'Type obj)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentPaymentMethodOptionsCardInstallments'Plan'" (\obj -> ((GHC.Base.pure PaymentIntentPaymentMethodOptionsCardInstallments'Plan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))

-- | Defines the enum schema payment_intent_payment_method_options_cardInstallments\'Plan\'Interval\'
--
-- For \`fixed_count\` installment plans, this is the interval between installment payments your customer will make to their credit card.
-- One of \`month\`.
data PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'
  = PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumOther Data.Aeson.Types.Internal.Value
  | PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumTyped Data.Text.Internal.Text
  | PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumStringMonth
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval' where
  toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumStringMonth) = "month"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "month" -> PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumStringMonth
            | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Interval'EnumOther val
      )

-- | Defines the enum schema payment_intent_payment_method_options_cardInstallments\'Plan\'Type\'
--
-- Type of installment plan, one of \`fixed_count\`.
data PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'
  = PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumOther Data.Aeson.Types.Internal.Value
  | PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumTyped Data.Text.Internal.Text
  | PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumStringFixedCount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type' where
  toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumStringFixedCount) = "fixed_count"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "fixed_count" -> PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumStringFixedCount
            | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCardInstallments'Plan'Type'EnumOther val
      )

-- | Defines the enum schema payment_intent_payment_method_options_cardRequest_three_d_secure\'
--
-- We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: \`automatic\` or \`any\`. If not provided, defaults to \`automatic\`. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
data PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'
  = PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumOther Data.Aeson.Types.Internal.Value
  | PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumTyped Data.Text.Internal.Text
  | PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAny
  | PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAutomatic
  | PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringChallengeOnly
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure' where
  toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAny) = "any"
  toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAutomatic) = "automatic"
  toJSON (PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringChallengeOnly) = "challenge_only"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "any" -> PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAny
            | val GHC.Classes.== "automatic" -> PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringAutomatic
            | val GHC.Classes.== "challenge_only" -> PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumStringChallengeOnly
            | GHC.Base.otherwise -> PaymentIntentPaymentMethodOptionsCardRequestThreeDSecure'EnumOther val
      )
