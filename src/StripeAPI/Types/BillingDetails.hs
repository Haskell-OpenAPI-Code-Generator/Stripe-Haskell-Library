{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema BillingDetails
module StripeAPI.Types.BillingDetails where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Address
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.billing_details@ in the specification.
data BillingDetails
  = BillingDetails
      { -- | address: Billing address.
        billingDetailsAddress :: (GHC.Maybe.Maybe BillingDetailsAddress'),
        -- | email: Email address.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        billingDetailsEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | name: Full name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        billingDetailsName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | phone: Billing phone number (including extension).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        billingDetailsPhone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BillingDetails where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= billingDetailsAddress obj : "email" Data.Aeson.Types.ToJSON..= billingDetailsEmail obj : "name" Data.Aeson.Types.ToJSON..= billingDetailsName obj : "phone" Data.Aeson.Types.ToJSON..= billingDetailsPhone obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= billingDetailsAddress obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= billingDetailsEmail obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= billingDetailsName obj) GHC.Base.<> ("phone" Data.Aeson.Types.ToJSON..= billingDetailsPhone obj))))

instance Data.Aeson.Types.FromJSON.FromJSON BillingDetails where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BillingDetails" (\obj -> (((GHC.Base.pure BillingDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone"))

-- | Create a new 'BillingDetails' with all required fields.
mkBillingDetails :: BillingDetails
mkBillingDetails =
  BillingDetails
    { billingDetailsAddress = GHC.Maybe.Nothing,
      billingDetailsEmail = GHC.Maybe.Nothing,
      billingDetailsName = GHC.Maybe.Nothing,
      billingDetailsPhone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.billing_details.properties.address.anyOf@ in the specification.
--
-- Billing address.
data BillingDetailsAddress'
  = BillingDetailsAddress'
      { -- | city: City, district, suburb, town, or village.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        billingDetailsAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        billingDetailsAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line1: Address line 1 (e.g., street, PO Box, or company name).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        billingDetailsAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        billingDetailsAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | postal_code: ZIP or postal code.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        billingDetailsAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | state: State, county, province, or region.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        billingDetailsAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BillingDetailsAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= billingDetailsAddress'City obj : "country" Data.Aeson.Types.ToJSON..= billingDetailsAddress'Country obj : "line1" Data.Aeson.Types.ToJSON..= billingDetailsAddress'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= billingDetailsAddress'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= billingDetailsAddress'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= billingDetailsAddress'State obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= billingDetailsAddress'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= billingDetailsAddress'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= billingDetailsAddress'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= billingDetailsAddress'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= billingDetailsAddress'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= billingDetailsAddress'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON BillingDetailsAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BillingDetailsAddress'" (\obj -> (((((GHC.Base.pure BillingDetailsAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'BillingDetailsAddress'' with all required fields.
mkBillingDetailsAddress' :: BillingDetailsAddress'
mkBillingDetailsAddress' =
  BillingDetailsAddress'
    { billingDetailsAddress'City = GHC.Maybe.Nothing,
      billingDetailsAddress'Country = GHC.Maybe.Nothing,
      billingDetailsAddress'Line1 = GHC.Maybe.Nothing,
      billingDetailsAddress'Line2 = GHC.Maybe.Nothing,
      billingDetailsAddress'PostalCode = GHC.Maybe.Nothing,
      billingDetailsAddress'State = GHC.Maybe.Nothing
    }
