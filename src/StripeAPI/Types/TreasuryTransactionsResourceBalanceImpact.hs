{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TreasuryTransactionsResourceBalanceImpact
module StripeAPI.Types.TreasuryTransactionsResourceBalanceImpact where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.treasury_transactions_resource_balance_impact@ in the specification.
--
-- Change to a FinancialAccount\'s balance
data TreasuryTransactionsResourceBalanceImpact = TreasuryTransactionsResourceBalanceImpact
  { -- | cash: The change made to funds the user can spend right now.
    treasuryTransactionsResourceBalanceImpactCash :: GHC.Types.Int,
    -- | inbound_pending: The change made to funds that are not spendable yet, but will become available at a later time.
    treasuryTransactionsResourceBalanceImpactInboundPending :: GHC.Types.Int,
    -- | outbound_pending: The change made to funds in the account, but not spendable because they are being held for pending outbound flows.
    treasuryTransactionsResourceBalanceImpactOutboundPending :: GHC.Types.Int
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TreasuryTransactionsResourceBalanceImpact where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["cash" Data.Aeson.Types.ToJSON..= treasuryTransactionsResourceBalanceImpactCash obj] : ["inbound_pending" Data.Aeson.Types.ToJSON..= treasuryTransactionsResourceBalanceImpactInboundPending obj] : ["outbound_pending" Data.Aeson.Types.ToJSON..= treasuryTransactionsResourceBalanceImpactOutboundPending obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["cash" Data.Aeson.Types.ToJSON..= treasuryTransactionsResourceBalanceImpactCash obj] : ["inbound_pending" Data.Aeson.Types.ToJSON..= treasuryTransactionsResourceBalanceImpactInboundPending obj] : ["outbound_pending" Data.Aeson.Types.ToJSON..= treasuryTransactionsResourceBalanceImpactOutboundPending obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TreasuryTransactionsResourceBalanceImpact where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TreasuryTransactionsResourceBalanceImpact" (\obj -> ((GHC.Base.pure TreasuryTransactionsResourceBalanceImpact GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cash")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "inbound_pending")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "outbound_pending"))

-- | Create a new 'TreasuryTransactionsResourceBalanceImpact' with all required fields.
mkTreasuryTransactionsResourceBalanceImpact ::
  -- | 'treasuryTransactionsResourceBalanceImpactCash'
  GHC.Types.Int ->
  -- | 'treasuryTransactionsResourceBalanceImpactInboundPending'
  GHC.Types.Int ->
  -- | 'treasuryTransactionsResourceBalanceImpactOutboundPending'
  GHC.Types.Int ->
  TreasuryTransactionsResourceBalanceImpact
mkTreasuryTransactionsResourceBalanceImpact treasuryTransactionsResourceBalanceImpactCash treasuryTransactionsResourceBalanceImpactInboundPending treasuryTransactionsResourceBalanceImpactOutboundPending =
  TreasuryTransactionsResourceBalanceImpact
    { treasuryTransactionsResourceBalanceImpactCash = treasuryTransactionsResourceBalanceImpactCash,
      treasuryTransactionsResourceBalanceImpactInboundPending = treasuryTransactionsResourceBalanceImpactInboundPending,
      treasuryTransactionsResourceBalanceImpactOutboundPending = treasuryTransactionsResourceBalanceImpactOutboundPending
    }
