{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema CheckoutSessionDisplayItem
module StripeAPI.Types.CheckoutSessionDisplayItem where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CheckoutSessionCustomDisplayItemDescription
import {-# SOURCE #-} StripeAPI.Types.Plan
import {-# SOURCE #-} StripeAPI.Types.Sku
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.checkout_session_display_item@ in the specification.
data CheckoutSessionDisplayItem
  = CheckoutSessionDisplayItem
      { -- | amount: Amount for the display item.
        checkoutSessionDisplayItemAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        checkoutSessionDisplayItemCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | custom:
        checkoutSessionDisplayItemCustom :: (GHC.Maybe.Maybe CheckoutSessionCustomDisplayItemDescription),
        -- | plan: Plans define the base price, currency, and billing cycle for subscriptions.
        -- For example, you might have a \<currency>5\<\/currency>\/month plan
        -- that provides limited access to your products, and a
        -- \<currency>15\<\/currency>\/month plan that allows full access.
        --
        -- Related guide: [Managing Products and Plans](https:\/\/stripe.com\/docs\/billing\/subscriptions\/products-and-plans).
        checkoutSessionDisplayItemPlan :: (GHC.Maybe.Maybe Plan),
        -- | quantity: Quantity of the display item being purchased.
        checkoutSessionDisplayItemQuantity :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | sku: Stores representations of [stock keeping units](http:\/\/en.wikipedia.org\/wiki\/Stock_keeping_unit).
        -- SKUs describe specific product variations, taking into account any combination of: attributes,
        -- currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
        -- the \`size: large\`, \`color: red\` version of that shirt.
        --
        -- Can also be used to manage inventory.
        --
        -- Related guide: [Tax, Shipping, and Inventory](https:\/\/stripe.com\/docs\/orders).
        checkoutSessionDisplayItemSku :: (GHC.Maybe.Maybe Sku),
        -- | type: The type of display item. One of \`custom\`, \`plan\` or \`sku\`
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        checkoutSessionDisplayItemType :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutSessionDisplayItem where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemAmount obj : "currency" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemCurrency obj : "custom" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemCustom obj : "plan" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemPlan obj : "quantity" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemQuantity obj : "sku" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemSku obj : "type" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemType obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemAmount obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemCurrency obj) GHC.Base.<> (("custom" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemCustom obj) GHC.Base.<> (("plan" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemPlan obj) GHC.Base.<> (("quantity" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemQuantity obj) GHC.Base.<> (("sku" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemSku obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= checkoutSessionDisplayItemType obj)))))))

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutSessionDisplayItem where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CheckoutSessionDisplayItem" (\obj -> ((((((GHC.Base.pure CheckoutSessionDisplayItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sku")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type"))

-- | Create a new 'CheckoutSessionDisplayItem' with all required fields.
mkCheckoutSessionDisplayItem :: CheckoutSessionDisplayItem
mkCheckoutSessionDisplayItem =
  CheckoutSessionDisplayItem
    { checkoutSessionDisplayItemAmount = GHC.Maybe.Nothing,
      checkoutSessionDisplayItemCurrency = GHC.Maybe.Nothing,
      checkoutSessionDisplayItemCustom = GHC.Maybe.Nothing,
      checkoutSessionDisplayItemPlan = GHC.Maybe.Nothing,
      checkoutSessionDisplayItemQuantity = GHC.Maybe.Nothing,
      checkoutSessionDisplayItemSku = GHC.Maybe.Nothing,
      checkoutSessionDisplayItemType = GHC.Maybe.Nothing
    }
