{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema CustomerBalanceTransaction
module StripeAPI.Types.CustomerBalanceTransaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CreditNote
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.Invoice
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema customer_balance_transaction
--
-- Each customer has a [\`balance\`](https:\/\/stripe.com\/docs\/api\/customers\/object\#customer_object-balance) value,
-- which denotes a debit or credit that\'s automatically applied to their next invoice upon finalization.
-- You may modify the value directly by using the [update customer API](https:\/\/stripe.com\/docs\/api\/customers\/update),
-- or by creating a Customer Balance Transaction, which increments or decrements the customer\'s \`balance\` by the specified \`amount\`.
--
-- Related guide: [Customer Balance](https:\/\/stripe.com\/docs\/billing\/customer\/balance) to learn more.
data CustomerBalanceTransaction
  = CustomerBalanceTransaction
      { -- | amount: The amount of the transaction. A negative value is a credit for the customer\'s balance, and a positive value is a debit to the customer\'s \`balance\`.
        customerBalanceTransactionAmount :: GHC.Types.Int,
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        customerBalanceTransactionCreated :: GHC.Types.Int,
        -- | credit_note: The ID of the credit note (if any) related to the transaction.
        customerBalanceTransactionCreditNote :: (GHC.Maybe.Maybe CustomerBalanceTransactionCreditNote'Variants),
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        customerBalanceTransactionCurrency :: Data.Text.Internal.Text,
        -- | customer: The ID of the customer the transaction belongs to.
        customerBalanceTransactionCustomer :: CustomerBalanceTransactionCustomer'Variants,
        -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        customerBalanceTransactionDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | ending_balance: The customer\'s \`balance\` after the transaction was applied. A negative value decreases the amount due on the customer\'s next invoice. A positive value increases the amount due on the customer\'s next invoice.
        customerBalanceTransactionEndingBalance :: GHC.Types.Int,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        customerBalanceTransactionId :: Data.Text.Internal.Text,
        -- | invoice: The ID of the invoice (if any) related to the transaction.
        customerBalanceTransactionInvoice :: (GHC.Maybe.Maybe CustomerBalanceTransactionInvoice'Variants),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        customerBalanceTransactionLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        customerBalanceTransactionMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        customerBalanceTransactionObject :: CustomerBalanceTransactionObject',
        -- | type: Transaction type: \`adjustment\`, \`applied_to_invoice\`, \`credit_note\`, \`initial\`, \`invoice_too_large\`, \`invoice_too_small\`, \`unspent_receiver_credit\`, or \`unapplied_from_invoice\`. See the [Customer Balance page](https:\/\/stripe.com\/docs\/billing\/customer\/balance\#types) to learn more about transaction types.
        customerBalanceTransactionType :: CustomerBalanceTransactionType'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceTransaction where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (customerBalanceTransactionAmount obj) : (Data.Aeson..=) "created" (customerBalanceTransactionCreated obj) : (Data.Aeson..=) "credit_note" (customerBalanceTransactionCreditNote obj) : (Data.Aeson..=) "currency" (customerBalanceTransactionCurrency obj) : (Data.Aeson..=) "customer" (customerBalanceTransactionCustomer obj) : (Data.Aeson..=) "description" (customerBalanceTransactionDescription obj) : (Data.Aeson..=) "ending_balance" (customerBalanceTransactionEndingBalance obj) : (Data.Aeson..=) "id" (customerBalanceTransactionId obj) : (Data.Aeson..=) "invoice" (customerBalanceTransactionInvoice obj) : (Data.Aeson..=) "livemode" (customerBalanceTransactionLivemode obj) : (Data.Aeson..=) "metadata" (customerBalanceTransactionMetadata obj) : (Data.Aeson..=) "object" (customerBalanceTransactionObject obj) : (Data.Aeson..=) "type" (customerBalanceTransactionType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (customerBalanceTransactionAmount obj) GHC.Base.<> ((Data.Aeson..=) "created" (customerBalanceTransactionCreated obj) GHC.Base.<> ((Data.Aeson..=) "credit_note" (customerBalanceTransactionCreditNote obj) GHC.Base.<> ((Data.Aeson..=) "currency" (customerBalanceTransactionCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (customerBalanceTransactionCustomer obj) GHC.Base.<> ((Data.Aeson..=) "description" (customerBalanceTransactionDescription obj) GHC.Base.<> ((Data.Aeson..=) "ending_balance" (customerBalanceTransactionEndingBalance obj) GHC.Base.<> ((Data.Aeson..=) "id" (customerBalanceTransactionId obj) GHC.Base.<> ((Data.Aeson..=) "invoice" (customerBalanceTransactionInvoice obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (customerBalanceTransactionLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (customerBalanceTransactionMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (customerBalanceTransactionObject obj) GHC.Base.<> (Data.Aeson..=) "type" (customerBalanceTransactionType obj)))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceTransaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerBalanceTransaction" (\obj -> ((((((((((((GHC.Base.pure CustomerBalanceTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "credit_note")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "ending_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Define the one-of schema customer_balance_transactionCredit_note\'
--
-- The ID of the credit note (if any) related to the transaction.
data CustomerBalanceTransactionCreditNote'Variants
  = CustomerBalanceTransactionCreditNote'CreditNote CreditNote
  | CustomerBalanceTransactionCreditNote'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceTransactionCreditNote'Variants where
  toJSON (CustomerBalanceTransactionCreditNote'CreditNote a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CustomerBalanceTransactionCreditNote'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceTransactionCreditNote'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CustomerBalanceTransactionCreditNote'CreditNote a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CustomerBalanceTransactionCreditNote'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema customer_balance_transactionCustomer\'
--
-- The ID of the customer the transaction belongs to.
data CustomerBalanceTransactionCustomer'Variants
  = CustomerBalanceTransactionCustomer'Customer Customer
  | CustomerBalanceTransactionCustomer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceTransactionCustomer'Variants where
  toJSON (CustomerBalanceTransactionCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CustomerBalanceTransactionCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceTransactionCustomer'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CustomerBalanceTransactionCustomer'Customer a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CustomerBalanceTransactionCustomer'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema customer_balance_transactionInvoice\'
--
-- The ID of the invoice (if any) related to the transaction.
data CustomerBalanceTransactionInvoice'Variants
  = CustomerBalanceTransactionInvoice'Invoice Invoice
  | CustomerBalanceTransactionInvoice'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceTransactionInvoice'Variants where
  toJSON (CustomerBalanceTransactionInvoice'Invoice a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CustomerBalanceTransactionInvoice'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceTransactionInvoice'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CustomerBalanceTransactionInvoice'Invoice a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CustomerBalanceTransactionInvoice'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema customer_balance_transactionObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data CustomerBalanceTransactionObject'
  = CustomerBalanceTransactionObject'EnumOther Data.Aeson.Types.Internal.Value
  | CustomerBalanceTransactionObject'EnumTyped Data.Text.Internal.Text
  | CustomerBalanceTransactionObject'EnumStringCustomerBalanceTransaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceTransactionObject' where
  toJSON (CustomerBalanceTransactionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CustomerBalanceTransactionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CustomerBalanceTransactionObject'EnumStringCustomerBalanceTransaction) = "customer_balance_transaction"

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceTransactionObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "customer_balance_transaction" -> CustomerBalanceTransactionObject'EnumStringCustomerBalanceTransaction
            | GHC.Base.otherwise -> CustomerBalanceTransactionObject'EnumOther val
      )

-- | Defines the enum schema customer_balance_transactionType\'
--
-- Transaction type: \`adjustment\`, \`applied_to_invoice\`, \`credit_note\`, \`initial\`, \`invoice_too_large\`, \`invoice_too_small\`, \`unspent_receiver_credit\`, or \`unapplied_from_invoice\`. See the [Customer Balance page](https:\/\/stripe.com\/docs\/billing\/customer\/balance\#types) to learn more about transaction types.
data CustomerBalanceTransactionType'
  = CustomerBalanceTransactionType'EnumOther Data.Aeson.Types.Internal.Value
  | CustomerBalanceTransactionType'EnumTyped Data.Text.Internal.Text
  | CustomerBalanceTransactionType'EnumStringAdjustment
  | CustomerBalanceTransactionType'EnumStringAppliedToInvoice
  | CustomerBalanceTransactionType'EnumStringCreditNote
  | CustomerBalanceTransactionType'EnumStringInitial
  | CustomerBalanceTransactionType'EnumStringInvoiceTooLarge
  | CustomerBalanceTransactionType'EnumStringInvoiceTooSmall
  | CustomerBalanceTransactionType'EnumStringMigration
  | CustomerBalanceTransactionType'EnumStringUnappliedFromInvoice
  | CustomerBalanceTransactionType'EnumStringUnspentReceiverCredit
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceTransactionType' where
  toJSON (CustomerBalanceTransactionType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CustomerBalanceTransactionType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CustomerBalanceTransactionType'EnumStringAdjustment) = "adjustment"
  toJSON (CustomerBalanceTransactionType'EnumStringAppliedToInvoice) = "applied_to_invoice"
  toJSON (CustomerBalanceTransactionType'EnumStringCreditNote) = "credit_note"
  toJSON (CustomerBalanceTransactionType'EnumStringInitial) = "initial"
  toJSON (CustomerBalanceTransactionType'EnumStringInvoiceTooLarge) = "invoice_too_large"
  toJSON (CustomerBalanceTransactionType'EnumStringInvoiceTooSmall) = "invoice_too_small"
  toJSON (CustomerBalanceTransactionType'EnumStringMigration) = "migration"
  toJSON (CustomerBalanceTransactionType'EnumStringUnappliedFromInvoice) = "unapplied_from_invoice"
  toJSON (CustomerBalanceTransactionType'EnumStringUnspentReceiverCredit) = "unspent_receiver_credit"

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceTransactionType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "adjustment" -> CustomerBalanceTransactionType'EnumStringAdjustment
            | val GHC.Classes.== "applied_to_invoice" -> CustomerBalanceTransactionType'EnumStringAppliedToInvoice
            | val GHC.Classes.== "credit_note" -> CustomerBalanceTransactionType'EnumStringCreditNote
            | val GHC.Classes.== "initial" -> CustomerBalanceTransactionType'EnumStringInitial
            | val GHC.Classes.== "invoice_too_large" -> CustomerBalanceTransactionType'EnumStringInvoiceTooLarge
            | val GHC.Classes.== "invoice_too_small" -> CustomerBalanceTransactionType'EnumStringInvoiceTooSmall
            | val GHC.Classes.== "migration" -> CustomerBalanceTransactionType'EnumStringMigration
            | val GHC.Classes.== "unapplied_from_invoice" -> CustomerBalanceTransactionType'EnumStringUnappliedFromInvoice
            | val GHC.Classes.== "unspent_receiver_credit" -> CustomerBalanceTransactionType'EnumStringUnspentReceiverCredit
            | GHC.Base.otherwise -> CustomerBalanceTransactionType'EnumOther val
      )
