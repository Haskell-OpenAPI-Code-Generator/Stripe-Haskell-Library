{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Invoice
module StripeAPI.Types.Invoice where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Address
import {-# SOURCE #-} StripeAPI.Types.AlipayAccount
import {-# SOURCE #-} StripeAPI.Types.BankAccount
import {-# SOURCE #-} StripeAPI.Types.BitcoinReceiver
import {-# SOURCE #-} StripeAPI.Types.Card
import {-# SOURCE #-} StripeAPI.Types.Charge
import {-# SOURCE #-} StripeAPI.Types.Coupon
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.Discount
import {-# SOURCE #-} StripeAPI.Types.InvoiceSettingCustomField
import {-# SOURCE #-} StripeAPI.Types.InvoiceTaxAmount
import {-# SOURCE #-} StripeAPI.Types.InvoiceThresholdReason
import {-# SOURCE #-} StripeAPI.Types.InvoicesResourceInvoiceTaxId
import {-# SOURCE #-} StripeAPI.Types.InvoicesStatusTransitions
import {-# SOURCE #-} StripeAPI.Types.LineItem
import {-# SOURCE #-} StripeAPI.Types.PaymentIntent
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import {-# SOURCE #-} StripeAPI.Types.Shipping
import {-# SOURCE #-} StripeAPI.Types.Source
import {-# SOURCE #-} StripeAPI.Types.Subscription
import {-# SOURCE #-} StripeAPI.Types.TaxRate
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.invoice@ in the specification.
--
-- Invoices are statements of amounts owed by a customer, and are either
-- generated one-off, or generated periodically from a subscription.
--
-- They contain [invoice items](https:\/\/stripe.com\/docs\/api\#invoiceitems), and proration adjustments
-- that may be caused by subscription upgrades\/downgrades (if necessary).
--
-- If your invoice is configured to be billed through automatic charges,
-- Stripe automatically finalizes your invoice and attempts payment. Note
-- that finalizing the invoice,
-- [when automatic](https:\/\/stripe.com\/docs\/billing\/invoices\/workflow\/\#auto_advance), does
-- not happen immediately as the invoice is created. Stripe waits
-- until one hour after the last webhook was successfully sent (or the last
-- webhook timed out after failing). If you (and the platforms you may have
-- connected to) have no webhooks configured, Stripe waits one hour after
-- creation to finalize the invoice.
--
-- If your invoice is configured to be billed by sending an email, then based on your
-- [email settings](https:\/\/dashboard.stripe.com\/account\/billing\/automatic\'),
-- Stripe will email the invoice to your customer and await payment. These
-- emails can contain a link to a hosted page to pay the invoice.
--
-- Stripe applies any customer credit on the account before determining the
-- amount due for the invoice (i.e., the amount that will be actually
-- charged). If the amount due for the invoice is less than Stripe\'s [minimum allowed charge
-- per currency](\/docs\/currencies\#minimum-and-maximum-charge-amounts), the
-- invoice is automatically marked paid, and we add the amount due to the
-- customer\'s running account balance which is applied to the next invoice.
--
-- More details on the customer\'s account balance are
-- [here](https:\/\/stripe.com\/docs\/api\/customers\/object\#customer_object-account_balance).
--
-- Related guide: [Send Invoices to Customers](https:\/\/stripe.com\/docs\/billing\/invoices\/sending).
data Invoice
  = Invoice
      { -- | account_country: The country of the business associated with this invoice, most often the business creating the invoice.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceAccountCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | account_name: The public name of the business associated with this invoice, most often the business creating the invoice.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceAccountName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | amount_due: Final amount due at this time for this invoice. If the invoice\'s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the \`amount_due\` may be 0. If there is a positive \`starting_balance\` for the invoice (the customer owes money), the \`amount_due\` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in \`amount_due\`.
        invoiceAmountDue :: GHC.Types.Int,
        -- | amount_paid: The amount, in %s, that was paid.
        invoiceAmountPaid :: GHC.Types.Int,
        -- | amount_remaining: The amount remaining, in %s, that is due.
        invoiceAmountRemaining :: GHC.Types.Int,
        -- | application_fee_amount: The fee in %s that will be applied to the invoice and transferred to the application owner\'s Stripe account when the invoice is paid.
        invoiceApplicationFeeAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | attempt_count: Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.
        invoiceAttemptCount :: GHC.Types.Int,
        -- | attempted: Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the \`invoice.created\` webhook, for example, so you might not want to display that invoice as unpaid to your users.
        invoiceAttempted :: GHC.Types.Bool,
        -- | auto_advance: Controls whether Stripe will perform [automatic collection](https:\/\/stripe.com\/docs\/billing\/invoices\/workflow\/\#auto_advance) of the invoice. When \`false\`, the invoice\'s state will not automatically advance without an explicit action.
        invoiceAutoAdvance :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | billing_reason: Indicates the reason why the invoice was created. \`subscription_cycle\` indicates an invoice created by a subscription advancing into a new period. \`subscription_create\` indicates an invoice created due to creating a subscription. \`subscription_update\` indicates an invoice created due to updating a subscription. \`subscription\` is set for all old invoices to indicate either a change to a subscription or a period advancement. \`manual\` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The \`upcoming\` value is reserved for simulated invoices per the upcoming invoice endpoint. \`subscription_threshold\` indicates an invoice created due to a billing threshold being reached.
        invoiceBillingReason :: (GHC.Maybe.Maybe InvoiceBillingReason'),
        -- | charge: ID of the latest charge generated for this invoice, if any.
        invoiceCharge :: (GHC.Maybe.Maybe InvoiceCharge'Variants),
        -- | collection_method: Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
        invoiceCollectionMethod :: (GHC.Maybe.Maybe InvoiceCollectionMethod'),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        invoiceCreated :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        invoiceCurrency :: Data.Text.Internal.Text,
        -- | custom_fields: Custom fields displayed on the invoice.
        invoiceCustomFields :: (GHC.Maybe.Maybe ([InvoiceSettingCustomField])),
        -- | customer: The ID of the customer who will be billed.
        invoiceCustomer :: InvoiceCustomer'Variants,
        -- | customer_address: The customer\'s address. Until the invoice is finalized, this field will equal \`customer.address\`. Once the invoice is finalized, this field will no longer be updated.
        invoiceCustomerAddress :: (GHC.Maybe.Maybe InvoiceCustomerAddress'),
        -- | customer_email: The customer\'s email. Until the invoice is finalized, this field will equal \`customer.email\`. Once the invoice is finalized, this field will no longer be updated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | customer_name: The customer\'s name. Until the invoice is finalized, this field will equal \`customer.name\`. Once the invoice is finalized, this field will no longer be updated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | customer_phone: The customer\'s phone number. Until the invoice is finalized, this field will equal \`customer.phone\`. Once the invoice is finalized, this field will no longer be updated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerPhone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | customer_shipping: The customer\'s shipping information. Until the invoice is finalized, this field will equal \`customer.shipping\`. Once the invoice is finalized, this field will no longer be updated.
        invoiceCustomerShipping :: (GHC.Maybe.Maybe InvoiceCustomerShipping'),
        -- | customer_tax_exempt: The customer\'s tax exempt status. Until the invoice is finalized, this field will equal \`customer.tax_exempt\`. Once the invoice is finalized, this field will no longer be updated.
        invoiceCustomerTaxExempt :: (GHC.Maybe.Maybe InvoiceCustomerTaxExempt'),
        -- | customer_tax_ids: The customer\'s tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as \`customer.tax_ids\`. Once the invoice is finalized, this field will no longer be updated.
        invoiceCustomerTaxIds :: (GHC.Maybe.Maybe ([InvoicesResourceInvoiceTaxId])),
        -- | default_payment_method: ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription\'s default payment method, if any, or to the default payment method in the customer\'s invoice settings.
        invoiceDefaultPaymentMethod :: (GHC.Maybe.Maybe InvoiceDefaultPaymentMethod'Variants),
        -- | default_source: ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription\'s default source, if any, or to the customer\'s default source.
        invoiceDefaultSource :: (GHC.Maybe.Maybe InvoiceDefaultSource'Variants),
        -- | default_tax_rates: The tax rates applied to this invoice, if any.
        invoiceDefaultTaxRates :: (GHC.Maybe.Maybe ([TaxRate])),
        -- | description: An arbitrary string attached to the object. Often useful for displaying to users. Referenced as \'memo\' in the Dashboard.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | discount: Describes the current discount applied to this invoice, if there is one.
        invoiceDiscount :: (GHC.Maybe.Maybe InvoiceDiscount'),
        -- | due_date: The date on which payment for this invoice is due. This value will be \`null\` for invoices where \`collection_method=charge_automatically\`.
        invoiceDueDate :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | ending_balance: Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
        invoiceEndingBalance :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | footer: Footer displayed on the invoice.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceFooter :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | hosted_invoice_url: The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceHostedInvoiceUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | invoice_pdf: The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceInvoicePdf :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | lines: The individual line items that make up the invoice. \`lines\` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
        invoiceLines :: InvoiceLines',
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        invoiceLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        invoiceMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | next_payment_attempt: The time at which payment will next be attempted. This value will be \`null\` for invoices where \`collection_method=send_invoice\`.
        invoiceNextPaymentAttempt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | number: A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\'s unique invoice_prefix if it is specified.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | paid: Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\'s account balance.
        invoicePaid :: GHC.Types.Bool,
        -- | payment_intent: The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.
        invoicePaymentIntent :: (GHC.Maybe.Maybe InvoicePaymentIntent'Variants),
        -- | period_end: End of the usage period during which invoice items were added to this invoice.
        invoicePeriodEnd :: GHC.Types.Int,
        -- | period_start: Start of the usage period during which invoice items were added to this invoice.
        invoicePeriodStart :: GHC.Types.Int,
        -- | post_payment_credit_notes_amount: Total amount of all post-payment credit notes issued for this invoice.
        invoicePostPaymentCreditNotesAmount :: GHC.Types.Int,
        -- | pre_payment_credit_notes_amount: Total amount of all pre-payment credit notes issued for this invoice.
        invoicePrePaymentCreditNotesAmount :: GHC.Types.Int,
        -- | receipt_number: This is the transaction number that appears on email receipts sent for this invoice.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceReceiptNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | starting_balance: Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance.
        invoiceStartingBalance :: GHC.Types.Int,
        -- | statement_descriptor: Extra information about an invoice for the customer\'s credit card statement.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceStatementDescriptor :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | status: The status of the invoice, one of \`draft\`, \`open\`, \`paid\`, \`uncollectible\`, or \`void\`. [Learn more](https:\/\/stripe.com\/docs\/billing\/invoices\/workflow\#workflow-overview)
        invoiceStatus :: (GHC.Maybe.Maybe InvoiceStatus'),
        -- | status_transitions:
        invoiceStatusTransitions :: InvoicesStatusTransitions,
        -- | subscription: The subscription that this invoice was prepared for, if any.
        invoiceSubscription :: (GHC.Maybe.Maybe InvoiceSubscription'Variants),
        -- | subscription_proration_date: Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
        invoiceSubscriptionProrationDate :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | subtotal: Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.
        invoiceSubtotal :: GHC.Types.Int,
        -- | tax: The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.
        invoiceTax :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | tax_percent: This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription\'s \`tax_percent\` field, but can be changed before the invoice is paid. This field defaults to null.
        invoiceTaxPercent :: (GHC.Maybe.Maybe GHC.Types.Double),
        -- | threshold_reason:
        invoiceThresholdReason :: (GHC.Maybe.Maybe InvoiceThresholdReason),
        -- | total: Total after discounts and taxes.
        invoiceTotal :: GHC.Types.Int,
        -- | total_tax_amounts: The aggregate amounts calculated per tax rate for all line items.
        invoiceTotalTaxAmounts :: (GHC.Maybe.Maybe ([InvoiceTaxAmount])),
        -- | webhooks_delivered_at: The time at which webhooks for this invoice were successfully delivered (if the invoice had no webhooks to deliver, this will match \`created\`). Invoice payment is delayed until webhooks are delivered, or until all webhook delivery attempts have been exhausted.
        invoiceWebhooksDeliveredAt :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Invoice where
  toJSON obj = Data.Aeson.Types.Internal.object ("account_country" Data.Aeson.Types.ToJSON..= invoiceAccountCountry obj : "account_name" Data.Aeson.Types.ToJSON..= invoiceAccountName obj : "amount_due" Data.Aeson.Types.ToJSON..= invoiceAmountDue obj : "amount_paid" Data.Aeson.Types.ToJSON..= invoiceAmountPaid obj : "amount_remaining" Data.Aeson.Types.ToJSON..= invoiceAmountRemaining obj : "application_fee_amount" Data.Aeson.Types.ToJSON..= invoiceApplicationFeeAmount obj : "attempt_count" Data.Aeson.Types.ToJSON..= invoiceAttemptCount obj : "attempted" Data.Aeson.Types.ToJSON..= invoiceAttempted obj : "auto_advance" Data.Aeson.Types.ToJSON..= invoiceAutoAdvance obj : "billing_reason" Data.Aeson.Types.ToJSON..= invoiceBillingReason obj : "charge" Data.Aeson.Types.ToJSON..= invoiceCharge obj : "collection_method" Data.Aeson.Types.ToJSON..= invoiceCollectionMethod obj : "created" Data.Aeson.Types.ToJSON..= invoiceCreated obj : "currency" Data.Aeson.Types.ToJSON..= invoiceCurrency obj : "custom_fields" Data.Aeson.Types.ToJSON..= invoiceCustomFields obj : "customer" Data.Aeson.Types.ToJSON..= invoiceCustomer obj : "customer_address" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress obj : "customer_email" Data.Aeson.Types.ToJSON..= invoiceCustomerEmail obj : "customer_name" Data.Aeson.Types.ToJSON..= invoiceCustomerName obj : "customer_phone" Data.Aeson.Types.ToJSON..= invoiceCustomerPhone obj : "customer_shipping" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping obj : "customer_tax_exempt" Data.Aeson.Types.ToJSON..= invoiceCustomerTaxExempt obj : "customer_tax_ids" Data.Aeson.Types.ToJSON..= invoiceCustomerTaxIds obj : "default_payment_method" Data.Aeson.Types.ToJSON..= invoiceDefaultPaymentMethod obj : "default_source" Data.Aeson.Types.ToJSON..= invoiceDefaultSource obj : "default_tax_rates" Data.Aeson.Types.ToJSON..= invoiceDefaultTaxRates obj : "description" Data.Aeson.Types.ToJSON..= invoiceDescription obj : "discount" Data.Aeson.Types.ToJSON..= invoiceDiscount obj : "due_date" Data.Aeson.Types.ToJSON..= invoiceDueDate obj : "ending_balance" Data.Aeson.Types.ToJSON..= invoiceEndingBalance obj : "footer" Data.Aeson.Types.ToJSON..= invoiceFooter obj : "hosted_invoice_url" Data.Aeson.Types.ToJSON..= invoiceHostedInvoiceUrl obj : "id" Data.Aeson.Types.ToJSON..= invoiceId obj : "invoice_pdf" Data.Aeson.Types.ToJSON..= invoiceInvoicePdf obj : "lines" Data.Aeson.Types.ToJSON..= invoiceLines obj : "livemode" Data.Aeson.Types.ToJSON..= invoiceLivemode obj : "metadata" Data.Aeson.Types.ToJSON..= invoiceMetadata obj : "next_payment_attempt" Data.Aeson.Types.ToJSON..= invoiceNextPaymentAttempt obj : "number" Data.Aeson.Types.ToJSON..= invoiceNumber obj : "paid" Data.Aeson.Types.ToJSON..= invoicePaid obj : "payment_intent" Data.Aeson.Types.ToJSON..= invoicePaymentIntent obj : "period_end" Data.Aeson.Types.ToJSON..= invoicePeriodEnd obj : "period_start" Data.Aeson.Types.ToJSON..= invoicePeriodStart obj : "post_payment_credit_notes_amount" Data.Aeson.Types.ToJSON..= invoicePostPaymentCreditNotesAmount obj : "pre_payment_credit_notes_amount" Data.Aeson.Types.ToJSON..= invoicePrePaymentCreditNotesAmount obj : "receipt_number" Data.Aeson.Types.ToJSON..= invoiceReceiptNumber obj : "starting_balance" Data.Aeson.Types.ToJSON..= invoiceStartingBalance obj : "statement_descriptor" Data.Aeson.Types.ToJSON..= invoiceStatementDescriptor obj : "status" Data.Aeson.Types.ToJSON..= invoiceStatus obj : "status_transitions" Data.Aeson.Types.ToJSON..= invoiceStatusTransitions obj : "subscription" Data.Aeson.Types.ToJSON..= invoiceSubscription obj : "subscription_proration_date" Data.Aeson.Types.ToJSON..= invoiceSubscriptionProrationDate obj : "subtotal" Data.Aeson.Types.ToJSON..= invoiceSubtotal obj : "tax" Data.Aeson.Types.ToJSON..= invoiceTax obj : "tax_percent" Data.Aeson.Types.ToJSON..= invoiceTaxPercent obj : "threshold_reason" Data.Aeson.Types.ToJSON..= invoiceThresholdReason obj : "total" Data.Aeson.Types.ToJSON..= invoiceTotal obj : "total_tax_amounts" Data.Aeson.Types.ToJSON..= invoiceTotalTaxAmounts obj : "webhooks_delivered_at" Data.Aeson.Types.ToJSON..= invoiceWebhooksDeliveredAt obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "invoice" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account_country" Data.Aeson.Types.ToJSON..= invoiceAccountCountry obj) GHC.Base.<> (("account_name" Data.Aeson.Types.ToJSON..= invoiceAccountName obj) GHC.Base.<> (("amount_due" Data.Aeson.Types.ToJSON..= invoiceAmountDue obj) GHC.Base.<> (("amount_paid" Data.Aeson.Types.ToJSON..= invoiceAmountPaid obj) GHC.Base.<> (("amount_remaining" Data.Aeson.Types.ToJSON..= invoiceAmountRemaining obj) GHC.Base.<> (("application_fee_amount" Data.Aeson.Types.ToJSON..= invoiceApplicationFeeAmount obj) GHC.Base.<> (("attempt_count" Data.Aeson.Types.ToJSON..= invoiceAttemptCount obj) GHC.Base.<> (("attempted" Data.Aeson.Types.ToJSON..= invoiceAttempted obj) GHC.Base.<> (("auto_advance" Data.Aeson.Types.ToJSON..= invoiceAutoAdvance obj) GHC.Base.<> (("billing_reason" Data.Aeson.Types.ToJSON..= invoiceBillingReason obj) GHC.Base.<> (("charge" Data.Aeson.Types.ToJSON..= invoiceCharge obj) GHC.Base.<> (("collection_method" Data.Aeson.Types.ToJSON..= invoiceCollectionMethod obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= invoiceCreated obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= invoiceCurrency obj) GHC.Base.<> (("custom_fields" Data.Aeson.Types.ToJSON..= invoiceCustomFields obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= invoiceCustomer obj) GHC.Base.<> (("customer_address" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress obj) GHC.Base.<> (("customer_email" Data.Aeson.Types.ToJSON..= invoiceCustomerEmail obj) GHC.Base.<> (("customer_name" Data.Aeson.Types.ToJSON..= invoiceCustomerName obj) GHC.Base.<> (("customer_phone" Data.Aeson.Types.ToJSON..= invoiceCustomerPhone obj) GHC.Base.<> (("customer_shipping" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping obj) GHC.Base.<> (("customer_tax_exempt" Data.Aeson.Types.ToJSON..= invoiceCustomerTaxExempt obj) GHC.Base.<> (("customer_tax_ids" Data.Aeson.Types.ToJSON..= invoiceCustomerTaxIds obj) GHC.Base.<> (("default_payment_method" Data.Aeson.Types.ToJSON..= invoiceDefaultPaymentMethod obj) GHC.Base.<> (("default_source" Data.Aeson.Types.ToJSON..= invoiceDefaultSource obj) GHC.Base.<> (("default_tax_rates" Data.Aeson.Types.ToJSON..= invoiceDefaultTaxRates obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= invoiceDescription obj) GHC.Base.<> (("discount" Data.Aeson.Types.ToJSON..= invoiceDiscount obj) GHC.Base.<> (("due_date" Data.Aeson.Types.ToJSON..= invoiceDueDate obj) GHC.Base.<> (("ending_balance" Data.Aeson.Types.ToJSON..= invoiceEndingBalance obj) GHC.Base.<> (("footer" Data.Aeson.Types.ToJSON..= invoiceFooter obj) GHC.Base.<> (("hosted_invoice_url" Data.Aeson.Types.ToJSON..= invoiceHostedInvoiceUrl obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= invoiceId obj) GHC.Base.<> (("invoice_pdf" Data.Aeson.Types.ToJSON..= invoiceInvoicePdf obj) GHC.Base.<> (("lines" Data.Aeson.Types.ToJSON..= invoiceLines obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= invoiceLivemode obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= invoiceMetadata obj) GHC.Base.<> (("next_payment_attempt" Data.Aeson.Types.ToJSON..= invoiceNextPaymentAttempt obj) GHC.Base.<> (("number" Data.Aeson.Types.ToJSON..= invoiceNumber obj) GHC.Base.<> (("paid" Data.Aeson.Types.ToJSON..= invoicePaid obj) GHC.Base.<> (("payment_intent" Data.Aeson.Types.ToJSON..= invoicePaymentIntent obj) GHC.Base.<> (("period_end" Data.Aeson.Types.ToJSON..= invoicePeriodEnd obj) GHC.Base.<> (("period_start" Data.Aeson.Types.ToJSON..= invoicePeriodStart obj) GHC.Base.<> (("post_payment_credit_notes_amount" Data.Aeson.Types.ToJSON..= invoicePostPaymentCreditNotesAmount obj) GHC.Base.<> (("pre_payment_credit_notes_amount" Data.Aeson.Types.ToJSON..= invoicePrePaymentCreditNotesAmount obj) GHC.Base.<> (("receipt_number" Data.Aeson.Types.ToJSON..= invoiceReceiptNumber obj) GHC.Base.<> (("starting_balance" Data.Aeson.Types.ToJSON..= invoiceStartingBalance obj) GHC.Base.<> (("statement_descriptor" Data.Aeson.Types.ToJSON..= invoiceStatementDescriptor obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= invoiceStatus obj) GHC.Base.<> (("status_transitions" Data.Aeson.Types.ToJSON..= invoiceStatusTransitions obj) GHC.Base.<> (("subscription" Data.Aeson.Types.ToJSON..= invoiceSubscription obj) GHC.Base.<> (("subscription_proration_date" Data.Aeson.Types.ToJSON..= invoiceSubscriptionProrationDate obj) GHC.Base.<> (("subtotal" Data.Aeson.Types.ToJSON..= invoiceSubtotal obj) GHC.Base.<> (("tax" Data.Aeson.Types.ToJSON..= invoiceTax obj) GHC.Base.<> (("tax_percent" Data.Aeson.Types.ToJSON..= invoiceTaxPercent obj) GHC.Base.<> (("threshold_reason" Data.Aeson.Types.ToJSON..= invoiceThresholdReason obj) GHC.Base.<> (("total" Data.Aeson.Types.ToJSON..= invoiceTotal obj) GHC.Base.<> (("total_tax_amounts" Data.Aeson.Types.ToJSON..= invoiceTotalTaxAmounts obj) GHC.Base.<> (("webhooks_delivered_at" Data.Aeson.Types.ToJSON..= invoiceWebhooksDeliveredAt obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "invoice"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Invoice where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Invoice" (\obj -> ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure Invoice GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_paid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_remaining")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "attempt_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "attempted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "auto_advance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "custom_fields")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_tax_exempt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_tax_ids")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "discount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "due_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ending_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "footer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "hosted_invoice_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_pdf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lines")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "next_payment_attempt")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "paid")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period_start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "post_payment_credit_notes_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pre_payment_credit_notes_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "starting_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_transitions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_proration_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "threshold_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "total_tax_amounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "webhooks_delivered_at"))

-- | Create a new 'Invoice' with all required fields.
mkInvoice ::
  -- | 'invoiceAmountDue'
  GHC.Types.Int ->
  -- | 'invoiceAmountPaid'
  GHC.Types.Int ->
  -- | 'invoiceAmountRemaining'
  GHC.Types.Int ->
  -- | 'invoiceAttemptCount'
  GHC.Types.Int ->
  -- | 'invoiceAttempted'
  GHC.Types.Bool ->
  -- | 'invoiceCreated'
  GHC.Types.Int ->
  -- | 'invoiceCurrency'
  Data.Text.Internal.Text ->
  -- | 'invoiceCustomer'
  InvoiceCustomer'Variants ->
  -- | 'invoiceLines'
  InvoiceLines' ->
  -- | 'invoiceLivemode'
  GHC.Types.Bool ->
  -- | 'invoicePaid'
  GHC.Types.Bool ->
  -- | 'invoicePeriodEnd'
  GHC.Types.Int ->
  -- | 'invoicePeriodStart'
  GHC.Types.Int ->
  -- | 'invoicePostPaymentCreditNotesAmount'
  GHC.Types.Int ->
  -- | 'invoicePrePaymentCreditNotesAmount'
  GHC.Types.Int ->
  -- | 'invoiceStartingBalance'
  GHC.Types.Int ->
  -- | 'invoiceStatusTransitions'
  InvoicesStatusTransitions ->
  -- | 'invoiceSubtotal'
  GHC.Types.Int ->
  -- | 'invoiceTotal'
  GHC.Types.Int ->
  Invoice
mkInvoice invoiceAmountDue invoiceAmountPaid invoiceAmountRemaining invoiceAttemptCount invoiceAttempted invoiceCreated invoiceCurrency invoiceCustomer invoiceLines invoiceLivemode invoicePaid invoicePeriodEnd invoicePeriodStart invoicePostPaymentCreditNotesAmount invoicePrePaymentCreditNotesAmount invoiceStartingBalance invoiceStatusTransitions invoiceSubtotal invoiceTotal =
  Invoice
    { invoiceAccountCountry = GHC.Maybe.Nothing,
      invoiceAccountName = GHC.Maybe.Nothing,
      invoiceAmountDue = invoiceAmountDue,
      invoiceAmountPaid = invoiceAmountPaid,
      invoiceAmountRemaining = invoiceAmountRemaining,
      invoiceApplicationFeeAmount = GHC.Maybe.Nothing,
      invoiceAttemptCount = invoiceAttemptCount,
      invoiceAttempted = invoiceAttempted,
      invoiceAutoAdvance = GHC.Maybe.Nothing,
      invoiceBillingReason = GHC.Maybe.Nothing,
      invoiceCharge = GHC.Maybe.Nothing,
      invoiceCollectionMethod = GHC.Maybe.Nothing,
      invoiceCreated = invoiceCreated,
      invoiceCurrency = invoiceCurrency,
      invoiceCustomFields = GHC.Maybe.Nothing,
      invoiceCustomer = invoiceCustomer,
      invoiceCustomerAddress = GHC.Maybe.Nothing,
      invoiceCustomerEmail = GHC.Maybe.Nothing,
      invoiceCustomerName = GHC.Maybe.Nothing,
      invoiceCustomerPhone = GHC.Maybe.Nothing,
      invoiceCustomerShipping = GHC.Maybe.Nothing,
      invoiceCustomerTaxExempt = GHC.Maybe.Nothing,
      invoiceCustomerTaxIds = GHC.Maybe.Nothing,
      invoiceDefaultPaymentMethod = GHC.Maybe.Nothing,
      invoiceDefaultSource = GHC.Maybe.Nothing,
      invoiceDefaultTaxRates = GHC.Maybe.Nothing,
      invoiceDescription = GHC.Maybe.Nothing,
      invoiceDiscount = GHC.Maybe.Nothing,
      invoiceDueDate = GHC.Maybe.Nothing,
      invoiceEndingBalance = GHC.Maybe.Nothing,
      invoiceFooter = GHC.Maybe.Nothing,
      invoiceHostedInvoiceUrl = GHC.Maybe.Nothing,
      invoiceId = GHC.Maybe.Nothing,
      invoiceInvoicePdf = GHC.Maybe.Nothing,
      invoiceLines = invoiceLines,
      invoiceLivemode = invoiceLivemode,
      invoiceMetadata = GHC.Maybe.Nothing,
      invoiceNextPaymentAttempt = GHC.Maybe.Nothing,
      invoiceNumber = GHC.Maybe.Nothing,
      invoicePaid = invoicePaid,
      invoicePaymentIntent = GHC.Maybe.Nothing,
      invoicePeriodEnd = invoicePeriodEnd,
      invoicePeriodStart = invoicePeriodStart,
      invoicePostPaymentCreditNotesAmount = invoicePostPaymentCreditNotesAmount,
      invoicePrePaymentCreditNotesAmount = invoicePrePaymentCreditNotesAmount,
      invoiceReceiptNumber = GHC.Maybe.Nothing,
      invoiceStartingBalance = invoiceStartingBalance,
      invoiceStatementDescriptor = GHC.Maybe.Nothing,
      invoiceStatus = GHC.Maybe.Nothing,
      invoiceStatusTransitions = invoiceStatusTransitions,
      invoiceSubscription = GHC.Maybe.Nothing,
      invoiceSubscriptionProrationDate = GHC.Maybe.Nothing,
      invoiceSubtotal = invoiceSubtotal,
      invoiceTax = GHC.Maybe.Nothing,
      invoiceTaxPercent = GHC.Maybe.Nothing,
      invoiceThresholdReason = GHC.Maybe.Nothing,
      invoiceTotal = invoiceTotal,
      invoiceTotalTaxAmounts = GHC.Maybe.Nothing,
      invoiceWebhooksDeliveredAt = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.invoice.properties.billing_reason@ in the specification.
--
-- Indicates the reason why the invoice was created. \`subscription_cycle\` indicates an invoice created by a subscription advancing into a new period. \`subscription_create\` indicates an invoice created due to creating a subscription. \`subscription_update\` indicates an invoice created due to updating a subscription. \`subscription\` is set for all old invoices to indicate either a change to a subscription or a period advancement. \`manual\` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The \`upcoming\` value is reserved for simulated invoices per the upcoming invoice endpoint. \`subscription_threshold\` indicates an invoice created due to a billing threshold being reached.
data InvoiceBillingReason'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    InvoiceBillingReason'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    InvoiceBillingReason'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic_pending_invoice_item_invoice"@
    InvoiceBillingReason'EnumAutomaticPendingInvoiceItemInvoice
  | -- | Represents the JSON value @"manual"@
    InvoiceBillingReason'EnumManual
  | -- | Represents the JSON value @"subscription"@
    InvoiceBillingReason'EnumSubscription
  | -- | Represents the JSON value @"subscription_create"@
    InvoiceBillingReason'EnumSubscriptionCreate
  | -- | Represents the JSON value @"subscription_cycle"@
    InvoiceBillingReason'EnumSubscriptionCycle
  | -- | Represents the JSON value @"subscription_threshold"@
    InvoiceBillingReason'EnumSubscriptionThreshold
  | -- | Represents the JSON value @"subscription_update"@
    InvoiceBillingReason'EnumSubscriptionUpdate
  | -- | Represents the JSON value @"upcoming"@
    InvoiceBillingReason'EnumUpcoming
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceBillingReason' where
  toJSON (InvoiceBillingReason'Other val) = val
  toJSON (InvoiceBillingReason'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (InvoiceBillingReason'EnumAutomaticPendingInvoiceItemInvoice) = "automatic_pending_invoice_item_invoice"
  toJSON (InvoiceBillingReason'EnumManual) = "manual"
  toJSON (InvoiceBillingReason'EnumSubscription) = "subscription"
  toJSON (InvoiceBillingReason'EnumSubscriptionCreate) = "subscription_create"
  toJSON (InvoiceBillingReason'EnumSubscriptionCycle) = "subscription_cycle"
  toJSON (InvoiceBillingReason'EnumSubscriptionThreshold) = "subscription_threshold"
  toJSON (InvoiceBillingReason'EnumSubscriptionUpdate) = "subscription_update"
  toJSON (InvoiceBillingReason'EnumUpcoming) = "upcoming"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceBillingReason' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "automatic_pending_invoice_item_invoice" -> InvoiceBillingReason'EnumAutomaticPendingInvoiceItemInvoice
            | val GHC.Classes.== "manual" -> InvoiceBillingReason'EnumManual
            | val GHC.Classes.== "subscription" -> InvoiceBillingReason'EnumSubscription
            | val GHC.Classes.== "subscription_create" -> InvoiceBillingReason'EnumSubscriptionCreate
            | val GHC.Classes.== "subscription_cycle" -> InvoiceBillingReason'EnumSubscriptionCycle
            | val GHC.Classes.== "subscription_threshold" -> InvoiceBillingReason'EnumSubscriptionThreshold
            | val GHC.Classes.== "subscription_update" -> InvoiceBillingReason'EnumSubscriptionUpdate
            | val GHC.Classes.== "upcoming" -> InvoiceBillingReason'EnumUpcoming
            | GHC.Base.otherwise -> InvoiceBillingReason'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.invoice.properties.charge.anyOf@ in the specification.
--
-- ID of the latest charge generated for this invoice, if any.
data InvoiceCharge'Variants
  = InvoiceCharge'Charge Charge
  | InvoiceCharge'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCharge'Variants where
  toJSON (InvoiceCharge'Charge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceCharge'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCharge'Variants where
  parseJSON val = case (InvoiceCharge'Charge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceCharge'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.invoice.properties.collection_method@ in the specification.
--
-- Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
data InvoiceCollectionMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    InvoiceCollectionMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    InvoiceCollectionMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"charge_automatically"@
    InvoiceCollectionMethod'EnumChargeAutomatically
  | -- | Represents the JSON value @"send_invoice"@
    InvoiceCollectionMethod'EnumSendInvoice
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCollectionMethod' where
  toJSON (InvoiceCollectionMethod'Other val) = val
  toJSON (InvoiceCollectionMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (InvoiceCollectionMethod'EnumChargeAutomatically) = "charge_automatically"
  toJSON (InvoiceCollectionMethod'EnumSendInvoice) = "send_invoice"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCollectionMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "charge_automatically" -> InvoiceCollectionMethod'EnumChargeAutomatically
            | val GHC.Classes.== "send_invoice" -> InvoiceCollectionMethod'EnumSendInvoice
            | GHC.Base.otherwise -> InvoiceCollectionMethod'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.invoice.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer who will be billed.
data InvoiceCustomer'Variants
  = InvoiceCustomer'Customer Customer
  | InvoiceCustomer'DeletedCustomer DeletedCustomer
  | InvoiceCustomer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCustomer'Variants where
  toJSON (InvoiceCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceCustomer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCustomer'Variants where
  parseJSON val = case (InvoiceCustomer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceCustomer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceCustomer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.invoice.properties.customer_address.anyOf@ in the specification.
--
-- The customer\\\'s address. Until the invoice is finalized, this field will equal \\\`customer.address\\\`. Once the invoice is finalized, this field will no longer be updated.
data InvoiceCustomerAddress'
  = InvoiceCustomerAddress'
      { -- | city: City, district, suburb, town, or village.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line1: Address line 1 (e.g., street, PO Box, or company name).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | postal_code: ZIP or postal code.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | state: State, county, province, or region.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCustomerAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'City obj : "country" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'Country obj : "line1" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'State obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= invoiceCustomerAddress'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCustomerAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceCustomerAddress'" (\obj -> (((((GHC.Base.pure InvoiceCustomerAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'InvoiceCustomerAddress'' with all required fields.
mkInvoiceCustomerAddress' :: InvoiceCustomerAddress'
mkInvoiceCustomerAddress' =
  InvoiceCustomerAddress'
    { invoiceCustomerAddress'City = GHC.Maybe.Nothing,
      invoiceCustomerAddress'Country = GHC.Maybe.Nothing,
      invoiceCustomerAddress'Line1 = GHC.Maybe.Nothing,
      invoiceCustomerAddress'Line2 = GHC.Maybe.Nothing,
      invoiceCustomerAddress'PostalCode = GHC.Maybe.Nothing,
      invoiceCustomerAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.invoice.properties.customer_shipping.anyOf@ in the specification.
--
-- The customer\\\'s shipping information. Until the invoice is finalized, this field will equal \\\`customer.shipping\\\`. Once the invoice is finalized, this field will no longer be updated.
data InvoiceCustomerShipping'
  = InvoiceCustomerShipping'
      { -- | address:
        invoiceCustomerShipping'Address :: (GHC.Maybe.Maybe Address),
        -- | carrier: The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerShipping'Carrier :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | name: Recipient name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerShipping'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | phone: Recipient phone (including extension).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerShipping'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | tracking_number: The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceCustomerShipping'TrackingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCustomerShipping' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'Address obj : "carrier" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'Carrier obj : "name" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'Name obj : "phone" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'Phone obj : "tracking_number" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'TrackingNumber obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'Address obj) GHC.Base.<> (("carrier" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'Carrier obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'Name obj) GHC.Base.<> (("phone" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'Phone obj) GHC.Base.<> ("tracking_number" Data.Aeson.Types.ToJSON..= invoiceCustomerShipping'TrackingNumber obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCustomerShipping' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceCustomerShipping'" (\obj -> ((((GHC.Base.pure InvoiceCustomerShipping' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number"))

-- | Create a new 'InvoiceCustomerShipping'' with all required fields.
mkInvoiceCustomerShipping' :: InvoiceCustomerShipping'
mkInvoiceCustomerShipping' =
  InvoiceCustomerShipping'
    { invoiceCustomerShipping'Address = GHC.Maybe.Nothing,
      invoiceCustomerShipping'Carrier = GHC.Maybe.Nothing,
      invoiceCustomerShipping'Name = GHC.Maybe.Nothing,
      invoiceCustomerShipping'Phone = GHC.Maybe.Nothing,
      invoiceCustomerShipping'TrackingNumber = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.invoice.properties.customer_tax_exempt@ in the specification.
--
-- The customer\'s tax exempt status. Until the invoice is finalized, this field will equal \`customer.tax_exempt\`. Once the invoice is finalized, this field will no longer be updated.
data InvoiceCustomerTaxExempt'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    InvoiceCustomerTaxExempt'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    InvoiceCustomerTaxExempt'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"exempt"@
    InvoiceCustomerTaxExempt'EnumExempt
  | -- | Represents the JSON value @"none"@
    InvoiceCustomerTaxExempt'EnumNone
  | -- | Represents the JSON value @"reverse"@
    InvoiceCustomerTaxExempt'EnumReverse
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceCustomerTaxExempt' where
  toJSON (InvoiceCustomerTaxExempt'Other val) = val
  toJSON (InvoiceCustomerTaxExempt'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (InvoiceCustomerTaxExempt'EnumExempt) = "exempt"
  toJSON (InvoiceCustomerTaxExempt'EnumNone) = "none"
  toJSON (InvoiceCustomerTaxExempt'EnumReverse) = "reverse"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceCustomerTaxExempt' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "exempt" -> InvoiceCustomerTaxExempt'EnumExempt
            | val GHC.Classes.== "none" -> InvoiceCustomerTaxExempt'EnumNone
            | val GHC.Classes.== "reverse" -> InvoiceCustomerTaxExempt'EnumReverse
            | GHC.Base.otherwise -> InvoiceCustomerTaxExempt'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.invoice.properties.default_payment_method.anyOf@ in the specification.
--
-- ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription\'s default payment method, if any, or to the default payment method in the customer\'s invoice settings.
data InvoiceDefaultPaymentMethod'Variants
  = InvoiceDefaultPaymentMethod'PaymentMethod PaymentMethod
  | InvoiceDefaultPaymentMethod'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceDefaultPaymentMethod'Variants where
  toJSON (InvoiceDefaultPaymentMethod'PaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceDefaultPaymentMethod'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceDefaultPaymentMethod'Variants where
  parseJSON val = case (InvoiceDefaultPaymentMethod'PaymentMethod Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceDefaultPaymentMethod'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.invoice.properties.default_source.anyOf@ in the specification.
--
-- ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription\'s default source, if any, or to the customer\'s default source.
data InvoiceDefaultSource'Variants
  = InvoiceDefaultSource'AlipayAccount AlipayAccount
  | InvoiceDefaultSource'BankAccount BankAccount
  | InvoiceDefaultSource'BitcoinReceiver BitcoinReceiver
  | InvoiceDefaultSource'Card Card
  | InvoiceDefaultSource'Source Source
  | InvoiceDefaultSource'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceDefaultSource'Variants where
  toJSON (InvoiceDefaultSource'AlipayAccount a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceDefaultSource'BankAccount a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceDefaultSource'BitcoinReceiver a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceDefaultSource'Card a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceDefaultSource'Source a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceDefaultSource'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceDefaultSource'Variants where
  parseJSON val = case (InvoiceDefaultSource'AlipayAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceDefaultSource'BankAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceDefaultSource'BitcoinReceiver Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceDefaultSource'Card Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceDefaultSource'Source Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceDefaultSource'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.invoice.properties.discount.anyOf@ in the specification.
--
-- Describes the current discount applied to this invoice, if there is one.
data InvoiceDiscount'
  = InvoiceDiscount'
      { -- | coupon: A coupon contains information about a percent-off or amount-off discount you
        -- might want to apply to a customer. Coupons may be applied to [invoices](https:\/\/stripe.com\/docs\/api\#invoices) or
        -- [orders](https:\/\/stripe.com\/docs\/api\#create_order-coupon). Coupons do not work with conventional one-off [charges](https:\/\/stripe.com\/docs\/api\#create_charge).
        invoiceDiscount'Coupon :: (GHC.Maybe.Maybe Coupon),
        -- | customer: The ID of the customer associated with this discount.
        invoiceDiscount'Customer :: (GHC.Maybe.Maybe InvoiceDiscount'Customer'Variants),
        -- | end: If the coupon has a duration of \`repeating\`, the date that this discount will end. If the coupon has a duration of \`once\` or \`forever\`, this attribute will be null.
        invoiceDiscount'End :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | start: Date that the coupon was applied.
        invoiceDiscount'Start :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | subscription: The subscription that this coupon is applied to, if it is applied to a particular subscription.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceDiscount'Subscription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceDiscount' where
  toJSON obj = Data.Aeson.Types.Internal.object ("coupon" Data.Aeson.Types.ToJSON..= invoiceDiscount'Coupon obj : "customer" Data.Aeson.Types.ToJSON..= invoiceDiscount'Customer obj : "end" Data.Aeson.Types.ToJSON..= invoiceDiscount'End obj : "start" Data.Aeson.Types.ToJSON..= invoiceDiscount'Start obj : "subscription" Data.Aeson.Types.ToJSON..= invoiceDiscount'Subscription obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "discount" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("coupon" Data.Aeson.Types.ToJSON..= invoiceDiscount'Coupon obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= invoiceDiscount'Customer obj) GHC.Base.<> (("end" Data.Aeson.Types.ToJSON..= invoiceDiscount'End obj) GHC.Base.<> (("start" Data.Aeson.Types.ToJSON..= invoiceDiscount'Start obj) GHC.Base.<> (("subscription" Data.Aeson.Types.ToJSON..= invoiceDiscount'Subscription obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "discount"))))))

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceDiscount' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceDiscount'" (\obj -> ((((GHC.Base.pure InvoiceDiscount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription"))

-- | Create a new 'InvoiceDiscount'' with all required fields.
mkInvoiceDiscount' :: InvoiceDiscount'
mkInvoiceDiscount' =
  InvoiceDiscount'
    { invoiceDiscount'Coupon = GHC.Maybe.Nothing,
      invoiceDiscount'Customer = GHC.Maybe.Nothing,
      invoiceDiscount'End = GHC.Maybe.Nothing,
      invoiceDiscount'Start = GHC.Maybe.Nothing,
      invoiceDiscount'Subscription = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.invoice.properties.discount.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer associated with this discount.
data InvoiceDiscount'Customer'Variants
  = InvoiceDiscount'Customer'Customer Customer
  | InvoiceDiscount'Customer'DeletedCustomer DeletedCustomer
  | InvoiceDiscount'Customer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceDiscount'Customer'Variants where
  toJSON (InvoiceDiscount'Customer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceDiscount'Customer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceDiscount'Customer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceDiscount'Customer'Variants where
  parseJSON val = case (InvoiceDiscount'Customer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceDiscount'Customer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceDiscount'Customer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.invoice.properties.lines@ in the specification.
--
-- The individual line items that make up the invoice. \`lines\` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
data InvoiceLines'
  = InvoiceLines'
      { -- | data: Details about each object.
        invoiceLines'Data :: ([LineItem]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        invoiceLines'HasMore :: GHC.Types.Bool,
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceLines'Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceLines' where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= invoiceLines'Data obj : "has_more" Data.Aeson.Types.ToJSON..= invoiceLines'HasMore obj : "url" Data.Aeson.Types.ToJSON..= invoiceLines'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= invoiceLines'Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= invoiceLines'HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= invoiceLines'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceLines' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceLines'" (\obj -> ((GHC.Base.pure InvoiceLines' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'InvoiceLines'' with all required fields.
mkInvoiceLines' ::
  -- | 'invoiceLines'Data'
  [LineItem] ->
  -- | 'invoiceLines'HasMore'
  GHC.Types.Bool ->
  -- | 'invoiceLines'Url'
  Data.Text.Internal.Text ->
  InvoiceLines'
mkInvoiceLines' invoiceLines'Data invoiceLines'HasMore invoiceLines'Url =
  InvoiceLines'
    { invoiceLines'Data = invoiceLines'Data,
      invoiceLines'HasMore = invoiceLines'HasMore,
      invoiceLines'Url = invoiceLines'Url
    }

-- | Defines the oneOf schema located at @components.schemas.invoice.properties.payment_intent.anyOf@ in the specification.
--
-- The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent.
data InvoicePaymentIntent'Variants
  = InvoicePaymentIntent'PaymentIntent PaymentIntent
  | InvoicePaymentIntent'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoicePaymentIntent'Variants where
  toJSON (InvoicePaymentIntent'PaymentIntent a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoicePaymentIntent'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoicePaymentIntent'Variants where
  parseJSON val = case (InvoicePaymentIntent'PaymentIntent Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoicePaymentIntent'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.invoice.properties.status@ in the specification.
--
-- The status of the invoice, one of \`draft\`, \`open\`, \`paid\`, \`uncollectible\`, or \`void\`. [Learn more](https:\/\/stripe.com\/docs\/billing\/invoices\/workflow\#workflow-overview)
data InvoiceStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    InvoiceStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    InvoiceStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"deleted"@
    InvoiceStatus'EnumDeleted
  | -- | Represents the JSON value @"draft"@
    InvoiceStatus'EnumDraft
  | -- | Represents the JSON value @"open"@
    InvoiceStatus'EnumOpen
  | -- | Represents the JSON value @"paid"@
    InvoiceStatus'EnumPaid
  | -- | Represents the JSON value @"uncollectible"@
    InvoiceStatus'EnumUncollectible
  | -- | Represents the JSON value @"void"@
    InvoiceStatus'EnumVoid
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceStatus' where
  toJSON (InvoiceStatus'Other val) = val
  toJSON (InvoiceStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (InvoiceStatus'EnumDeleted) = "deleted"
  toJSON (InvoiceStatus'EnumDraft) = "draft"
  toJSON (InvoiceStatus'EnumOpen) = "open"
  toJSON (InvoiceStatus'EnumPaid) = "paid"
  toJSON (InvoiceStatus'EnumUncollectible) = "uncollectible"
  toJSON (InvoiceStatus'EnumVoid) = "void"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "deleted" -> InvoiceStatus'EnumDeleted
            | val GHC.Classes.== "draft" -> InvoiceStatus'EnumDraft
            | val GHC.Classes.== "open" -> InvoiceStatus'EnumOpen
            | val GHC.Classes.== "paid" -> InvoiceStatus'EnumPaid
            | val GHC.Classes.== "uncollectible" -> InvoiceStatus'EnumUncollectible
            | val GHC.Classes.== "void" -> InvoiceStatus'EnumVoid
            | GHC.Base.otherwise -> InvoiceStatus'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.invoice.properties.subscription.anyOf@ in the specification.
--
-- The subscription that this invoice was prepared for, if any.
data InvoiceSubscription'Variants
  = InvoiceSubscription'Subscription Subscription
  | InvoiceSubscription'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceSubscription'Variants where
  toJSON (InvoiceSubscription'Subscription a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceSubscription'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceSubscription'Variants where
  parseJSON val = case (InvoiceSubscription'Subscription Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((InvoiceSubscription'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
