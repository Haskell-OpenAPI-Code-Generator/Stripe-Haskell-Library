{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ClimateRemovalsOrderDeliveries
module StripeAPI.Types.ClimateRemovalsOrderDeliveries where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.ClimateRemovalsLocation
import {-# SOURCE #-} StripeAPI.Types.Climate_Supplier
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.climate_removals_order_deliveries@ in the specification.
--
-- The delivery of a specified quantity of carbon for an order.
data ClimateRemovalsOrderDeliveries = ClimateRemovalsOrderDeliveries
  { -- | delivered_at: Time at which the delivery occurred. Measured in seconds since the Unix epoch.
    climateRemovalsOrderDeliveriesDeliveredAt :: GHC.Types.Int,
    -- | location: Specific location of this delivery.
    climateRemovalsOrderDeliveriesLocation :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ClimateRemovalsOrderDeliveriesLocation'NonNullable)),
    -- | metric_tons: Quantity of carbon removal supplied by this delivery.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climateRemovalsOrderDeliveriesMetricTons :: Data.Text.Internal.Text,
    -- | registry_url: Once retired, a URL to the registry entry for the tons from this delivery.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climateRemovalsOrderDeliveriesRegistryUrl :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | supplier: A supplier of carbon removal.
    climateRemovalsOrderDeliveriesSupplier :: Climate'supplier
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ClimateRemovalsOrderDeliveries where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["delivered_at" Data.Aeson.Types.ToJSON..= climateRemovalsOrderDeliveriesDeliveredAt obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("location" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation obj) : ["metric_tons" Data.Aeson.Types.ToJSON..= climateRemovalsOrderDeliveriesMetricTons obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("registry_url" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesRegistryUrl obj) : ["supplier" Data.Aeson.Types.ToJSON..= climateRemovalsOrderDeliveriesSupplier obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["delivered_at" Data.Aeson.Types.ToJSON..= climateRemovalsOrderDeliveriesDeliveredAt obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("location" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation obj) : ["metric_tons" Data.Aeson.Types.ToJSON..= climateRemovalsOrderDeliveriesMetricTons obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("registry_url" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesRegistryUrl obj) : ["supplier" Data.Aeson.Types.ToJSON..= climateRemovalsOrderDeliveriesSupplier obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ClimateRemovalsOrderDeliveries where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ClimateRemovalsOrderDeliveries" (\obj -> ((((GHC.Base.pure ClimateRemovalsOrderDeliveries GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "delivered_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metric_tons")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "registry_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "supplier"))

-- | Create a new 'ClimateRemovalsOrderDeliveries' with all required fields.
mkClimateRemovalsOrderDeliveries ::
  -- | 'climateRemovalsOrderDeliveriesDeliveredAt'
  GHC.Types.Int ->
  -- | 'climateRemovalsOrderDeliveriesMetricTons'
  Data.Text.Internal.Text ->
  -- | 'climateRemovalsOrderDeliveriesSupplier'
  Climate'supplier ->
  ClimateRemovalsOrderDeliveries
mkClimateRemovalsOrderDeliveries climateRemovalsOrderDeliveriesDeliveredAt climateRemovalsOrderDeliveriesMetricTons climateRemovalsOrderDeliveriesSupplier =
  ClimateRemovalsOrderDeliveries
    { climateRemovalsOrderDeliveriesDeliveredAt = climateRemovalsOrderDeliveriesDeliveredAt,
      climateRemovalsOrderDeliveriesLocation = GHC.Maybe.Nothing,
      climateRemovalsOrderDeliveriesMetricTons = climateRemovalsOrderDeliveriesMetricTons,
      climateRemovalsOrderDeliveriesRegistryUrl = GHC.Maybe.Nothing,
      climateRemovalsOrderDeliveriesSupplier = climateRemovalsOrderDeliveriesSupplier
    }

-- | Defines the object schema located at @components.schemas.climate_removals_order_deliveries.properties.location.anyOf@ in the specification.
--
-- Specific location of this delivery.
data ClimateRemovalsOrderDeliveriesLocation'NonNullable = ClimateRemovalsOrderDeliveriesLocation'NonNullable
  { -- | city: The city where the supplier is located.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climateRemovalsOrderDeliveriesLocation'NonNullableCity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | country: Two-letter ISO code representing the country where the supplier is located.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climateRemovalsOrderDeliveriesLocation'NonNullableCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | latitude: The geographic latitude where the supplier is located.
    climateRemovalsOrderDeliveriesLocation'NonNullableLatitude :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Double)),
    -- | longitude: The geographic longitude where the supplier is located.
    climateRemovalsOrderDeliveriesLocation'NonNullableLongitude :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Double)),
    -- | region: The state\/county\/province\/region where the supplier is located.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climateRemovalsOrderDeliveriesLocation'NonNullableRegion :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ClimateRemovalsOrderDeliveriesLocation'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("latitude" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableLatitude obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("longitude" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableLongitude obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("region" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableRegion obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("city" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableCity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("country" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableCountry obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("latitude" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableLatitude obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("longitude" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableLongitude obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("region" Data.Aeson.Types.ToJSON..=)) (climateRemovalsOrderDeliveriesLocation'NonNullableRegion obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ClimateRemovalsOrderDeliveriesLocation'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ClimateRemovalsOrderDeliveriesLocation'NonNullable" (\obj -> ((((GHC.Base.pure ClimateRemovalsOrderDeliveriesLocation'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "region"))

-- | Create a new 'ClimateRemovalsOrderDeliveriesLocation'NonNullable' with all required fields.
mkClimateRemovalsOrderDeliveriesLocation'NonNullable :: ClimateRemovalsOrderDeliveriesLocation'NonNullable
mkClimateRemovalsOrderDeliveriesLocation'NonNullable =
  ClimateRemovalsOrderDeliveriesLocation'NonNullable
    { climateRemovalsOrderDeliveriesLocation'NonNullableCity = GHC.Maybe.Nothing,
      climateRemovalsOrderDeliveriesLocation'NonNullableCountry = GHC.Maybe.Nothing,
      climateRemovalsOrderDeliveriesLocation'NonNullableLatitude = GHC.Maybe.Nothing,
      climateRemovalsOrderDeliveriesLocation'NonNullableLongitude = GHC.Maybe.Nothing,
      climateRemovalsOrderDeliveriesLocation'NonNullableRegion = GHC.Maybe.Nothing
    }
