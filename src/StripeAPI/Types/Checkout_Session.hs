{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Checkout_Session
module StripeAPI.Types.Checkout_Session where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CheckoutSessionDisplayItem
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.PaymentIntent
import {-# SOURCE #-} StripeAPI.Types.SetupIntent
import {-# SOURCE #-} StripeAPI.Types.Subscription
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema checkout.session
--
-- A Checkout Session represents your customer\'s session as they pay for
-- one-time purchases or subscriptions through [Checkout](https:\/\/stripe.com\/docs\/payments\/checkout).
-- We recommend creating a new Session each time your customer attempts to pay.
--
-- Once payment is successful, the Checkout Session will contain a reference
-- to the [Customer](https:\/\/stripe.com\/docs\/api\/customers), and either the successful
-- [PaymentIntent](https:\/\/stripe.com\/docs\/api\/payment_intents) or an active
-- [Subscription](https:\/\/stripe.com\/docs\/api\/subscriptions).
--
-- You can create a Checkout Session on your server and pass its ID to the
-- client to begin Checkout.
--
-- Related guide: [Checkout Server Quickstart](https:\/\/stripe.com\/docs\/payments\/checkout\/api).
data Checkout'session
  = Checkout'session
      { -- | billing_address_collection: The value (\`auto\` or \`required\`) for whether Checkout collected the
        -- customer\'s billing address.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        checkout'sessionBillingAddressCollection :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | cancel_url: The URL the customer will be directed to if they decide to cancel payment and return to your website.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        checkout'sessionCancelUrl :: Data.Text.Internal.Text,
        -- | client_reference_id: A unique string to reference the Checkout Session. This can be a
        -- customer ID, a cart ID, or similar, and can be used to reconcile the
        -- session with your internal systems.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        checkout'sessionClientReferenceId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | customer: The ID of the customer for this session.
        -- For Checkout Sessions in \`payment\` or \`subscription\` mode, Checkout
        -- will create a new customer object based on information provided
        -- during the session unless an existing customer was provided when
        -- the session was created.
        checkout'sessionCustomer :: (GHC.Maybe.Maybe Checkout'sessionCustomer'Variants),
        -- | customer_email: If provided, this value will be used when the Customer object is created.
        -- If not provided, customers will be asked to enter their email address.
        -- Use this parameter to prefill customer data if you already have an email
        -- on file. To access information about the customer once a session is
        -- complete, use the \`customer\` field.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        checkout'sessionCustomerEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | display_items: The line items, plans, or SKUs purchased by the customer.
        checkout'sessionDisplayItems :: (GHC.Maybe.Maybe ([CheckoutSessionDisplayItem])),
        -- | id: Unique identifier for the object. Used to pass to \`redirectToCheckout\`
        -- in Stripe.js.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        checkout'sessionId :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        checkout'sessionLivemode :: GHC.Types.Bool,
        -- | locale: The IETF language tag of the locale Checkout is displayed in. If blank or \`auto\`, the browser\'s locale is used.
        checkout'sessionLocale :: (GHC.Maybe.Maybe Checkout'sessionLocale'),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        checkout'sessionMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | mode: The mode of the Checkout Session, one of \`payment\`, \`setup\`, or \`subscription\`.
        checkout'sessionMode :: (GHC.Maybe.Maybe Checkout'sessionMode'),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        checkout'sessionObject :: Checkout'sessionObject',
        -- | payment_intent: The ID of the PaymentIntent for Checkout Sessions in \`payment\` mode.
        checkout'sessionPaymentIntent :: (GHC.Maybe.Maybe Checkout'sessionPaymentIntent'Variants),
        -- | payment_method_types: A list of the types of payment methods (e.g. card) this Checkout
        -- Session is allowed to accept.
        checkout'sessionPaymentMethodTypes :: ([Data.Text.Internal.Text]),
        -- | setup_intent: The ID of the SetupIntent for Checkout Sessions in \`setup\` mode.
        checkout'sessionSetupIntent :: (GHC.Maybe.Maybe Checkout'sessionSetupIntent'Variants),
        -- | submit_type: Describes the type of transaction being performed by Checkout in order to customize
        -- relevant text on the page, such as the submit button. \`submit_type\` can only be
        -- specified on Checkout Sessions in \`payment\` mode, but not Checkout Sessions
        -- in \`subscription\` or \`setup\` mode.
        checkout'sessionSubmitType :: (GHC.Maybe.Maybe Checkout'sessionSubmitType'),
        -- | subscription: The ID of the subscription for Checkout Sessions in \`subscription\` mode.
        checkout'sessionSubscription :: (GHC.Maybe.Maybe Checkout'sessionSubscription'Variants),
        -- | success_url: The URL the customer will be directed to after the payment or
        -- subscription creation is successful.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        checkout'sessionSuccessUrl :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Checkout'session where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_address_collection" (checkout'sessionBillingAddressCollection obj) : (Data.Aeson..=) "cancel_url" (checkout'sessionCancelUrl obj) : (Data.Aeson..=) "client_reference_id" (checkout'sessionClientReferenceId obj) : (Data.Aeson..=) "customer" (checkout'sessionCustomer obj) : (Data.Aeson..=) "customer_email" (checkout'sessionCustomerEmail obj) : (Data.Aeson..=) "display_items" (checkout'sessionDisplayItems obj) : (Data.Aeson..=) "id" (checkout'sessionId obj) : (Data.Aeson..=) "livemode" (checkout'sessionLivemode obj) : (Data.Aeson..=) "locale" (checkout'sessionLocale obj) : (Data.Aeson..=) "metadata" (checkout'sessionMetadata obj) : (Data.Aeson..=) "mode" (checkout'sessionMode obj) : (Data.Aeson..=) "object" (checkout'sessionObject obj) : (Data.Aeson..=) "payment_intent" (checkout'sessionPaymentIntent obj) : (Data.Aeson..=) "payment_method_types" (checkout'sessionPaymentMethodTypes obj) : (Data.Aeson..=) "setup_intent" (checkout'sessionSetupIntent obj) : (Data.Aeson..=) "submit_type" (checkout'sessionSubmitType obj) : (Data.Aeson..=) "subscription" (checkout'sessionSubscription obj) : (Data.Aeson..=) "success_url" (checkout'sessionSuccessUrl obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_address_collection" (checkout'sessionBillingAddressCollection obj) GHC.Base.<> ((Data.Aeson..=) "cancel_url" (checkout'sessionCancelUrl obj) GHC.Base.<> ((Data.Aeson..=) "client_reference_id" (checkout'sessionClientReferenceId obj) GHC.Base.<> ((Data.Aeson..=) "customer" (checkout'sessionCustomer obj) GHC.Base.<> ((Data.Aeson..=) "customer_email" (checkout'sessionCustomerEmail obj) GHC.Base.<> ((Data.Aeson..=) "display_items" (checkout'sessionDisplayItems obj) GHC.Base.<> ((Data.Aeson..=) "id" (checkout'sessionId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (checkout'sessionLivemode obj) GHC.Base.<> ((Data.Aeson..=) "locale" (checkout'sessionLocale obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (checkout'sessionMetadata obj) GHC.Base.<> ((Data.Aeson..=) "mode" (checkout'sessionMode obj) GHC.Base.<> ((Data.Aeson..=) "object" (checkout'sessionObject obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (checkout'sessionPaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "payment_method_types" (checkout'sessionPaymentMethodTypes obj) GHC.Base.<> ((Data.Aeson..=) "setup_intent" (checkout'sessionSetupIntent obj) GHC.Base.<> ((Data.Aeson..=) "submit_type" (checkout'sessionSubmitType obj) GHC.Base.<> ((Data.Aeson..=) "subscription" (checkout'sessionSubscription obj) GHC.Base.<> (Data.Aeson..=) "success_url" (checkout'sessionSuccessUrl obj))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Checkout'session where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Checkout'session" (\obj -> (((((((((((((((((GHC.Base.pure Checkout'session GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_address_collection")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cancel_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_reference_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "display_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "locale")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_method_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "submit_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "success_url"))

-- | Define the one-of schema checkout.sessionCustomer\'
--
-- The ID of the customer for this session.
-- For Checkout Sessions in \`payment\` or \`subscription\` mode, Checkout
-- will create a new customer object based on information provided
-- during the session unless an existing customer was provided when
-- the session was created.
data Checkout'sessionCustomer'Variants
  = Checkout'sessionCustomer'Customer Customer
  | Checkout'sessionCustomer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Checkout'sessionCustomer'Variants where
  toJSON (Checkout'sessionCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Checkout'sessionCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Checkout'sessionCustomer'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Checkout'sessionCustomer'Customer a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Checkout'sessionCustomer'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema checkout.sessionLocale\'
--
-- The IETF language tag of the locale Checkout is displayed in. If blank or \`auto\`, the browser\'s locale is used.
data Checkout'sessionLocale'
  = Checkout'sessionLocale'EnumOther Data.Aeson.Types.Internal.Value
  | Checkout'sessionLocale'EnumTyped Data.Text.Internal.Text
  | Checkout'sessionLocale'EnumStringAuto
  | Checkout'sessionLocale'EnumStringDa
  | Checkout'sessionLocale'EnumStringDe
  | Checkout'sessionLocale'EnumStringEn
  | Checkout'sessionLocale'EnumStringEs
  | Checkout'sessionLocale'EnumStringFi
  | Checkout'sessionLocale'EnumStringFr
  | Checkout'sessionLocale'EnumStringIt
  | Checkout'sessionLocale'EnumStringJa
  | Checkout'sessionLocale'EnumStringMs
  | Checkout'sessionLocale'EnumStringNb
  | Checkout'sessionLocale'EnumStringNl
  | Checkout'sessionLocale'EnumStringPl
  | Checkout'sessionLocale'EnumStringPt
  | Checkout'sessionLocale'EnumStringSv
  | Checkout'sessionLocale'EnumStringZh
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Checkout'sessionLocale' where
  toJSON (Checkout'sessionLocale'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Checkout'sessionLocale'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Checkout'sessionLocale'EnumStringAuto) = "auto"
  toJSON (Checkout'sessionLocale'EnumStringDa) = "da"
  toJSON (Checkout'sessionLocale'EnumStringDe) = "de"
  toJSON (Checkout'sessionLocale'EnumStringEn) = "en"
  toJSON (Checkout'sessionLocale'EnumStringEs) = "es"
  toJSON (Checkout'sessionLocale'EnumStringFi) = "fi"
  toJSON (Checkout'sessionLocale'EnumStringFr) = "fr"
  toJSON (Checkout'sessionLocale'EnumStringIt) = "it"
  toJSON (Checkout'sessionLocale'EnumStringJa) = "ja"
  toJSON (Checkout'sessionLocale'EnumStringMs) = "ms"
  toJSON (Checkout'sessionLocale'EnumStringNb) = "nb"
  toJSON (Checkout'sessionLocale'EnumStringNl) = "nl"
  toJSON (Checkout'sessionLocale'EnumStringPl) = "pl"
  toJSON (Checkout'sessionLocale'EnumStringPt) = "pt"
  toJSON (Checkout'sessionLocale'EnumStringSv) = "sv"
  toJSON (Checkout'sessionLocale'EnumStringZh) = "zh"

instance Data.Aeson.Types.FromJSON.FromJSON Checkout'sessionLocale' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "auto" -> Checkout'sessionLocale'EnumStringAuto
            | val GHC.Classes.== "da" -> Checkout'sessionLocale'EnumStringDa
            | val GHC.Classes.== "de" -> Checkout'sessionLocale'EnumStringDe
            | val GHC.Classes.== "en" -> Checkout'sessionLocale'EnumStringEn
            | val GHC.Classes.== "es" -> Checkout'sessionLocale'EnumStringEs
            | val GHC.Classes.== "fi" -> Checkout'sessionLocale'EnumStringFi
            | val GHC.Classes.== "fr" -> Checkout'sessionLocale'EnumStringFr
            | val GHC.Classes.== "it" -> Checkout'sessionLocale'EnumStringIt
            | val GHC.Classes.== "ja" -> Checkout'sessionLocale'EnumStringJa
            | val GHC.Classes.== "ms" -> Checkout'sessionLocale'EnumStringMs
            | val GHC.Classes.== "nb" -> Checkout'sessionLocale'EnumStringNb
            | val GHC.Classes.== "nl" -> Checkout'sessionLocale'EnumStringNl
            | val GHC.Classes.== "pl" -> Checkout'sessionLocale'EnumStringPl
            | val GHC.Classes.== "pt" -> Checkout'sessionLocale'EnumStringPt
            | val GHC.Classes.== "sv" -> Checkout'sessionLocale'EnumStringSv
            | val GHC.Classes.== "zh" -> Checkout'sessionLocale'EnumStringZh
            | GHC.Base.otherwise -> Checkout'sessionLocale'EnumOther val
      )

-- | Defines the enum schema checkout.sessionMode\'
--
-- The mode of the Checkout Session, one of \`payment\`, \`setup\`, or \`subscription\`.
data Checkout'sessionMode'
  = Checkout'sessionMode'EnumOther Data.Aeson.Types.Internal.Value
  | Checkout'sessionMode'EnumTyped Data.Text.Internal.Text
  | Checkout'sessionMode'EnumStringPayment
  | Checkout'sessionMode'EnumStringSetup
  | Checkout'sessionMode'EnumStringSubscription
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Checkout'sessionMode' where
  toJSON (Checkout'sessionMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Checkout'sessionMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Checkout'sessionMode'EnumStringPayment) = "payment"
  toJSON (Checkout'sessionMode'EnumStringSetup) = "setup"
  toJSON (Checkout'sessionMode'EnumStringSubscription) = "subscription"

instance Data.Aeson.Types.FromJSON.FromJSON Checkout'sessionMode' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "payment" -> Checkout'sessionMode'EnumStringPayment
            | val GHC.Classes.== "setup" -> Checkout'sessionMode'EnumStringSetup
            | val GHC.Classes.== "subscription" -> Checkout'sessionMode'EnumStringSubscription
            | GHC.Base.otherwise -> Checkout'sessionMode'EnumOther val
      )

-- | Defines the enum schema checkout.sessionObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data Checkout'sessionObject'
  = Checkout'sessionObject'EnumOther Data.Aeson.Types.Internal.Value
  | Checkout'sessionObject'EnumTyped Data.Text.Internal.Text
  | Checkout'sessionObject'EnumStringCheckout'session
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Checkout'sessionObject' where
  toJSON (Checkout'sessionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Checkout'sessionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Checkout'sessionObject'EnumStringCheckout'session) = "checkout.session"

instance Data.Aeson.Types.FromJSON.FromJSON Checkout'sessionObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "checkout.session" -> Checkout'sessionObject'EnumStringCheckout'session
            | GHC.Base.otherwise -> Checkout'sessionObject'EnumOther val
      )

-- | Define the one-of schema checkout.sessionPayment_intent\'
--
-- The ID of the PaymentIntent for Checkout Sessions in \`payment\` mode.
data Checkout'sessionPaymentIntent'Variants
  = Checkout'sessionPaymentIntent'PaymentIntent PaymentIntent
  | Checkout'sessionPaymentIntent'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Checkout'sessionPaymentIntent'Variants where
  toJSON (Checkout'sessionPaymentIntent'PaymentIntent a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Checkout'sessionPaymentIntent'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Checkout'sessionPaymentIntent'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Checkout'sessionPaymentIntent'PaymentIntent a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Checkout'sessionPaymentIntent'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema checkout.sessionSetup_intent\'
--
-- The ID of the SetupIntent for Checkout Sessions in \`setup\` mode.
data Checkout'sessionSetupIntent'Variants
  = Checkout'sessionSetupIntent'SetupIntent SetupIntent
  | Checkout'sessionSetupIntent'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Checkout'sessionSetupIntent'Variants where
  toJSON (Checkout'sessionSetupIntent'SetupIntent a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Checkout'sessionSetupIntent'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Checkout'sessionSetupIntent'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Checkout'sessionSetupIntent'SetupIntent a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Checkout'sessionSetupIntent'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema checkout.sessionSubmit_type\'
--
-- Describes the type of transaction being performed by Checkout in order to customize
-- relevant text on the page, such as the submit button. \`submit_type\` can only be
-- specified on Checkout Sessions in \`payment\` mode, but not Checkout Sessions
-- in \`subscription\` or \`setup\` mode.
data Checkout'sessionSubmitType'
  = Checkout'sessionSubmitType'EnumOther Data.Aeson.Types.Internal.Value
  | Checkout'sessionSubmitType'EnumTyped Data.Text.Internal.Text
  | Checkout'sessionSubmitType'EnumStringAuto
  | Checkout'sessionSubmitType'EnumStringBook
  | Checkout'sessionSubmitType'EnumStringDonate
  | Checkout'sessionSubmitType'EnumStringPay
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Checkout'sessionSubmitType' where
  toJSON (Checkout'sessionSubmitType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Checkout'sessionSubmitType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (Checkout'sessionSubmitType'EnumStringAuto) = "auto"
  toJSON (Checkout'sessionSubmitType'EnumStringBook) = "book"
  toJSON (Checkout'sessionSubmitType'EnumStringDonate) = "donate"
  toJSON (Checkout'sessionSubmitType'EnumStringPay) = "pay"

instance Data.Aeson.Types.FromJSON.FromJSON Checkout'sessionSubmitType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "auto" -> Checkout'sessionSubmitType'EnumStringAuto
            | val GHC.Classes.== "book" -> Checkout'sessionSubmitType'EnumStringBook
            | val GHC.Classes.== "donate" -> Checkout'sessionSubmitType'EnumStringDonate
            | val GHC.Classes.== "pay" -> Checkout'sessionSubmitType'EnumStringPay
            | GHC.Base.otherwise -> Checkout'sessionSubmitType'EnumOther val
      )

-- | Define the one-of schema checkout.sessionSubscription\'
--
-- The ID of the subscription for Checkout Sessions in \`subscription\` mode.
data Checkout'sessionSubscription'Variants
  = Checkout'sessionSubscription'Subscription Subscription
  | Checkout'sessionSubscription'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Checkout'sessionSubscription'Variants where
  toJSON (Checkout'sessionSubscription'Subscription a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Checkout'sessionSubscription'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Checkout'sessionSubscription'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Checkout'sessionSubscription'Subscription a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ Checkout'sessionSubscription'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
