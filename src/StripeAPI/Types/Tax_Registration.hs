{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Tax_Registration
module StripeAPI.Types.Tax_Registration where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.TaxProductRegistrationsResourceCountryOptions
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax.registration@ in the specification.
--
-- A Tax \`Registration\` lets us know that your business is registered to collect tax on payments within a region, enabling you to [automatically collect tax](https:\/\/stripe.com\/docs\/tax).
--
-- Stripe doesn\'t register on your behalf with the relevant authorities when you create a Tax \`Registration\` object. For more information on how to register to collect tax, see [our guide](https:\/\/stripe.com\/docs\/tax\/registering).
--
-- Related guide: [Using the Registrations API](https:\/\/stripe.com\/docs\/tax\/registrations-api)
data Tax'registration = Tax'registration
  { -- | active_from: Time at which the registration becomes active. Measured in seconds since the Unix epoch.
    tax'registrationActiveFrom :: GHC.Types.Int,
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'registrationCountry :: Data.Text.Internal.Text,
    -- | country_options:
    tax'registrationCountryOptions :: TaxProductRegistrationsResourceCountryOptions,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    tax'registrationCreated :: GHC.Types.Int,
    -- | expires_at: If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. Measured in seconds since the Unix epoch.
    tax'registrationExpiresAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'registrationId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    tax'registrationLivemode :: GHC.Types.Bool,
    -- | status: The status of the registration. This field is present for convenience and can be deduced from \`active_from\` and \`expires_at\`.
    tax'registrationStatus :: Tax'registrationStatus'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Tax'registration where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= tax'registrationActiveFrom obj] : ["country" Data.Aeson.Types.ToJSON..= tax'registrationCountry obj] : ["country_options" Data.Aeson.Types.ToJSON..= tax'registrationCountryOptions obj] : ["created" Data.Aeson.Types.ToJSON..= tax'registrationCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (tax'registrationExpiresAt obj) : ["id" Data.Aeson.Types.ToJSON..= tax'registrationId obj] : ["livemode" Data.Aeson.Types.ToJSON..= tax'registrationLivemode obj] : ["status" Data.Aeson.Types.ToJSON..= tax'registrationStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax.registration"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["active_from" Data.Aeson.Types.ToJSON..= tax'registrationActiveFrom obj] : ["country" Data.Aeson.Types.ToJSON..= tax'registrationCountry obj] : ["country_options" Data.Aeson.Types.ToJSON..= tax'registrationCountryOptions obj] : ["created" Data.Aeson.Types.ToJSON..= tax'registrationCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (tax'registrationExpiresAt obj) : ["id" Data.Aeson.Types.ToJSON..= tax'registrationId obj] : ["livemode" Data.Aeson.Types.ToJSON..= tax'registrationLivemode obj] : ["status" Data.Aeson.Types.ToJSON..= tax'registrationStatus obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax.registration"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Tax'registration where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Tax'registration" (\obj -> (((((((GHC.Base.pure Tax'registration GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active_from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status"))

-- | Create a new 'Tax'registration' with all required fields.
mkTax'registration ::
  -- | 'tax'registrationActiveFrom'
  GHC.Types.Int ->
  -- | 'tax'registrationCountry'
  Data.Text.Internal.Text ->
  -- | 'tax'registrationCountryOptions'
  TaxProductRegistrationsResourceCountryOptions ->
  -- | 'tax'registrationCreated'
  GHC.Types.Int ->
  -- | 'tax'registrationId'
  Data.Text.Internal.Text ->
  -- | 'tax'registrationLivemode'
  GHC.Types.Bool ->
  -- | 'tax'registrationStatus'
  Tax'registrationStatus' ->
  Tax'registration
mkTax'registration tax'registrationActiveFrom tax'registrationCountry tax'registrationCountryOptions tax'registrationCreated tax'registrationId tax'registrationLivemode tax'registrationStatus =
  Tax'registration
    { tax'registrationActiveFrom = tax'registrationActiveFrom,
      tax'registrationCountry = tax'registrationCountry,
      tax'registrationCountryOptions = tax'registrationCountryOptions,
      tax'registrationCreated = tax'registrationCreated,
      tax'registrationExpiresAt = GHC.Maybe.Nothing,
      tax'registrationId = tax'registrationId,
      tax'registrationLivemode = tax'registrationLivemode,
      tax'registrationStatus = tax'registrationStatus
    }

-- | Defines the enum schema located at @components.schemas.tax.registration.properties.status@ in the specification.
--
-- The status of the registration. This field is present for convenience and can be deduced from \`active_from\` and \`expires_at\`.
data Tax'registrationStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Tax'registrationStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Tax'registrationStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    Tax'registrationStatus'EnumActive
  | -- | Represents the JSON value @"expired"@
    Tax'registrationStatus'EnumExpired
  | -- | Represents the JSON value @"scheduled"@
    Tax'registrationStatus'EnumScheduled
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Tax'registrationStatus' where
  toJSON (Tax'registrationStatus'Other val) = val
  toJSON (Tax'registrationStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Tax'registrationStatus'EnumActive) = "active"
  toJSON (Tax'registrationStatus'EnumExpired) = "expired"
  toJSON (Tax'registrationStatus'EnumScheduled) = "scheduled"

instance Data.Aeson.Types.FromJSON.FromJSON Tax'registrationStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> Tax'registrationStatus'EnumActive
            | val GHC.Classes.== "expired" -> Tax'registrationStatus'EnumExpired
            | val GHC.Classes.== "scheduled" -> Tax'registrationStatus'EnumScheduled
            | GHC.Base.otherwise -> Tax'registrationStatus'Other val
      )
