{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountBacsDebitPaymentsSettings
module StripeAPI.Types.AccountBacsDebitPaymentsSettings where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account_bacs_debit_payments_settings@ in the specification.
data AccountBacsDebitPaymentsSettings = AccountBacsDebitPaymentsSettings
  { -- | display_name: The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountBacsDebitPaymentsSettingsDisplayName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountBacsDebitPaymentsSettings where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (accountBacsDebitPaymentsSettingsDisplayName obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_name" Data.Aeson.Types.ToJSON..=)) (accountBacsDebitPaymentsSettingsDisplayName obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountBacsDebitPaymentsSettings where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBacsDebitPaymentsSettings" (\obj -> GHC.Base.pure AccountBacsDebitPaymentsSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "display_name"))

-- | Create a new 'AccountBacsDebitPaymentsSettings' with all required fields.
mkAccountBacsDebitPaymentsSettings :: AccountBacsDebitPaymentsSettings
mkAccountBacsDebitPaymentsSettings = AccountBacsDebitPaymentsSettings {accountBacsDebitPaymentsSettingsDisplayName = GHC.Maybe.Nothing}
