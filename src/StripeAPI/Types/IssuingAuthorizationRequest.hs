{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema IssuingAuthorizationRequest
module StripeAPI.Types.IssuingAuthorizationRequest where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingAuthorizationViolatedAuthControl
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema issuing_authorization_request
data IssuingAuthorizationRequest
  = IssuingAuthorizationRequest
      { -- | approved: Whether this request was approved.
        issuingAuthorizationRequestApproved :: GHC.Types.Bool,
        -- | authorized_amount: The amount that was authorized at the time of this request
        issuingAuthorizationRequestAuthorizedAmount :: GHC.Types.Int,
        -- | authorized_currency: The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingAuthorizationRequestAuthorizedCurrency :: Data.Text.Internal.Text,
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        issuingAuthorizationRequestCreated :: GHC.Types.Int,
        -- | held_amount: The amount Stripe held from your account to fund the authorization, if the request was approved
        issuingAuthorizationRequestHeldAmount :: GHC.Types.Int,
        -- | held_currency: The currency of the [held amount](https:\/\/stripe.com\/docs\/api\#issuing_authorization_object-held_amount)
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingAuthorizationRequestHeldCurrency :: Data.Text.Internal.Text,
        -- | reason: The reason for the approval or decline.
        issuingAuthorizationRequestReason :: IssuingAuthorizationRequestReason',
        -- | violated_authorization_controls: When an authorization is declined due to \`authorization_controls\`, this array contains details about the authorization controls that were violated. Otherwise, it is empty.
        issuingAuthorizationRequestViolatedAuthorizationControls :: ([IssuingAuthorizationViolatedAuthControl])
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationRequest where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "approved" (issuingAuthorizationRequestApproved obj) : (Data.Aeson..=) "authorized_amount" (issuingAuthorizationRequestAuthorizedAmount obj) : (Data.Aeson..=) "authorized_currency" (issuingAuthorizationRequestAuthorizedCurrency obj) : (Data.Aeson..=) "created" (issuingAuthorizationRequestCreated obj) : (Data.Aeson..=) "held_amount" (issuingAuthorizationRequestHeldAmount obj) : (Data.Aeson..=) "held_currency" (issuingAuthorizationRequestHeldCurrency obj) : (Data.Aeson..=) "reason" (issuingAuthorizationRequestReason obj) : (Data.Aeson..=) "violated_authorization_controls" (issuingAuthorizationRequestViolatedAuthorizationControls obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "approved" (issuingAuthorizationRequestApproved obj) GHC.Base.<> ((Data.Aeson..=) "authorized_amount" (issuingAuthorizationRequestAuthorizedAmount obj) GHC.Base.<> ((Data.Aeson..=) "authorized_currency" (issuingAuthorizationRequestAuthorizedCurrency obj) GHC.Base.<> ((Data.Aeson..=) "created" (issuingAuthorizationRequestCreated obj) GHC.Base.<> ((Data.Aeson..=) "held_amount" (issuingAuthorizationRequestHeldAmount obj) GHC.Base.<> ((Data.Aeson..=) "held_currency" (issuingAuthorizationRequestHeldCurrency obj) GHC.Base.<> ((Data.Aeson..=) "reason" (issuingAuthorizationRequestReason obj) GHC.Base.<> (Data.Aeson..=) "violated_authorization_controls" (issuingAuthorizationRequestViolatedAuthorizationControls obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationRequest where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationRequest" (\obj -> (((((((GHC.Base.pure IssuingAuthorizationRequest GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "approved")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorized_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authorized_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "held_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "held_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "violated_authorization_controls"))

-- | Defines the enum schema issuing_authorization_requestReason\'
--
-- The reason for the approval or decline.
data IssuingAuthorizationRequestReason'
  = IssuingAuthorizationRequestReason'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingAuthorizationRequestReason'EnumTyped Data.Text.Internal.Text
  | IssuingAuthorizationRequestReason'EnumStringAccountComplianceDisabled
  | IssuingAuthorizationRequestReason'EnumStringAccountInactive
  | IssuingAuthorizationRequestReason'EnumStringAuthenticationFailed
  | IssuingAuthorizationRequestReason'EnumStringAuthorizationControls
  | IssuingAuthorizationRequestReason'EnumStringCardActive
  | IssuingAuthorizationRequestReason'EnumStringCardInactive
  | IssuingAuthorizationRequestReason'EnumStringCardholderInactive
  | IssuingAuthorizationRequestReason'EnumStringCardholderVerificationRequired
  | IssuingAuthorizationRequestReason'EnumStringInsufficientFunds
  | IssuingAuthorizationRequestReason'EnumStringNotAllowed
  | IssuingAuthorizationRequestReason'EnumStringSuspectedFraud
  | IssuingAuthorizationRequestReason'EnumStringWebhookApproved
  | IssuingAuthorizationRequestReason'EnumStringWebhookDeclined
  | IssuingAuthorizationRequestReason'EnumStringWebhookTimeout
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationRequestReason' where
  toJSON (IssuingAuthorizationRequestReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationRequestReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationRequestReason'EnumStringAccountComplianceDisabled) = "account_compliance_disabled"
  toJSON (IssuingAuthorizationRequestReason'EnumStringAccountInactive) = "account_inactive"
  toJSON (IssuingAuthorizationRequestReason'EnumStringAuthenticationFailed) = "authentication_failed"
  toJSON (IssuingAuthorizationRequestReason'EnumStringAuthorizationControls) = "authorization_controls"
  toJSON (IssuingAuthorizationRequestReason'EnumStringCardActive) = "card_active"
  toJSON (IssuingAuthorizationRequestReason'EnumStringCardInactive) = "card_inactive"
  toJSON (IssuingAuthorizationRequestReason'EnumStringCardholderInactive) = "cardholder_inactive"
  toJSON (IssuingAuthorizationRequestReason'EnumStringCardholderVerificationRequired) = "cardholder_verification_required"
  toJSON (IssuingAuthorizationRequestReason'EnumStringInsufficientFunds) = "insufficient_funds"
  toJSON (IssuingAuthorizationRequestReason'EnumStringNotAllowed) = "not_allowed"
  toJSON (IssuingAuthorizationRequestReason'EnumStringSuspectedFraud) = "suspected_fraud"
  toJSON (IssuingAuthorizationRequestReason'EnumStringWebhookApproved) = "webhook_approved"
  toJSON (IssuingAuthorizationRequestReason'EnumStringWebhookDeclined) = "webhook_declined"
  toJSON (IssuingAuthorizationRequestReason'EnumStringWebhookTimeout) = "webhook_timeout"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationRequestReason' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "account_compliance_disabled" -> IssuingAuthorizationRequestReason'EnumStringAccountComplianceDisabled
            | val GHC.Classes.== "account_inactive" -> IssuingAuthorizationRequestReason'EnumStringAccountInactive
            | val GHC.Classes.== "authentication_failed" -> IssuingAuthorizationRequestReason'EnumStringAuthenticationFailed
            | val GHC.Classes.== "authorization_controls" -> IssuingAuthorizationRequestReason'EnumStringAuthorizationControls
            | val GHC.Classes.== "card_active" -> IssuingAuthorizationRequestReason'EnumStringCardActive
            | val GHC.Classes.== "card_inactive" -> IssuingAuthorizationRequestReason'EnumStringCardInactive
            | val GHC.Classes.== "cardholder_inactive" -> IssuingAuthorizationRequestReason'EnumStringCardholderInactive
            | val GHC.Classes.== "cardholder_verification_required" -> IssuingAuthorizationRequestReason'EnumStringCardholderVerificationRequired
            | val GHC.Classes.== "insufficient_funds" -> IssuingAuthorizationRequestReason'EnumStringInsufficientFunds
            | val GHC.Classes.== "not_allowed" -> IssuingAuthorizationRequestReason'EnumStringNotAllowed
            | val GHC.Classes.== "suspected_fraud" -> IssuingAuthorizationRequestReason'EnumStringSuspectedFraud
            | val GHC.Classes.== "webhook_approved" -> IssuingAuthorizationRequestReason'EnumStringWebhookApproved
            | val GHC.Classes.== "webhook_declined" -> IssuingAuthorizationRequestReason'EnumStringWebhookDeclined
            | val GHC.Classes.== "webhook_timeout" -> IssuingAuthorizationRequestReason'EnumStringWebhookTimeout
            | GHC.Base.otherwise -> IssuingAuthorizationRequestReason'EnumOther val
      )
