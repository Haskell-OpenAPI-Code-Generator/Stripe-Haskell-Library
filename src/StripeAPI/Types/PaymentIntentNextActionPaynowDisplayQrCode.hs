{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentIntentNextActionPaynowDisplayQrCode
module StripeAPI.Types.PaymentIntentNextActionPaynowDisplayQrCode where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_intent_next_action_paynow_display_qr_code@ in the specification.
data PaymentIntentNextActionPaynowDisplayQrCode = PaymentIntentNextActionPaynowDisplayQrCode
  { -- | data: The raw data string used to generate QR code, it should be used together with QR code library.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentNextActionPaynowDisplayQrCodeData :: Data.Text.Internal.Text,
    -- | image_url_png: The image_url_png string used to render QR code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentNextActionPaynowDisplayQrCodeImageUrlPng :: Data.Text.Internal.Text,
    -- | image_url_svg: The image_url_svg string used to render QR code
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentNextActionPaynowDisplayQrCodeImageUrlSvg :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentNextActionPaynowDisplayQrCode where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= paymentIntentNextActionPaynowDisplayQrCodeData obj] : ["image_url_png" Data.Aeson.Types.ToJSON..= paymentIntentNextActionPaynowDisplayQrCodeImageUrlPng obj] : ["image_url_svg" Data.Aeson.Types.ToJSON..= paymentIntentNextActionPaynowDisplayQrCodeImageUrlSvg obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= paymentIntentNextActionPaynowDisplayQrCodeData obj] : ["image_url_png" Data.Aeson.Types.ToJSON..= paymentIntentNextActionPaynowDisplayQrCodeImageUrlPng obj] : ["image_url_svg" Data.Aeson.Types.ToJSON..= paymentIntentNextActionPaynowDisplayQrCodeImageUrlSvg obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentNextActionPaynowDisplayQrCode where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentNextActionPaynowDisplayQrCode" (\obj -> ((GHC.Base.pure PaymentIntentNextActionPaynowDisplayQrCode GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "image_url_png")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "image_url_svg"))

-- | Create a new 'PaymentIntentNextActionPaynowDisplayQrCode' with all required fields.
mkPaymentIntentNextActionPaynowDisplayQrCode ::
  -- | 'paymentIntentNextActionPaynowDisplayQrCodeData'
  Data.Text.Internal.Text ->
  -- | 'paymentIntentNextActionPaynowDisplayQrCodeImageUrlPng'
  Data.Text.Internal.Text ->
  -- | 'paymentIntentNextActionPaynowDisplayQrCodeImageUrlSvg'
  Data.Text.Internal.Text ->
  PaymentIntentNextActionPaynowDisplayQrCode
mkPaymentIntentNextActionPaynowDisplayQrCode paymentIntentNextActionPaynowDisplayQrCodeData paymentIntentNextActionPaynowDisplayQrCodeImageUrlPng paymentIntentNextActionPaynowDisplayQrCodeImageUrlSvg =
  PaymentIntentNextActionPaynowDisplayQrCode
    { paymentIntentNextActionPaynowDisplayQrCodeData = paymentIntentNextActionPaynowDisplayQrCodeData,
      paymentIntentNextActionPaynowDisplayQrCodeImageUrlPng = paymentIntentNextActionPaynowDisplayQrCodeImageUrlPng,
      paymentIntentNextActionPaynowDisplayQrCodeImageUrlSvg = paymentIntentNextActionPaynowDisplayQrCodeImageUrlSvg
    }
