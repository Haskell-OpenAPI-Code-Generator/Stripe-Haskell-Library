{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Issuing_Token
module StripeAPI.Types.Issuing_Token where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingNetworkTokenNetworkData
import {-# SOURCE #-} StripeAPI.Types.Issuing_Card
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing.token@ in the specification.
--
-- An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https:\/\/stripe.com\/docs\/issuing), you can [view and manage these tokens](https:\/\/stripe.com\/docs\/issuing\/controls\/token-management) through Stripe.
data Issuing'token = Issuing'token
  { -- | card: Card associated with this token.
    issuing'tokenCard :: Issuing'tokenCard'Variants,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    issuing'tokenCreated :: GHC.Types.Int,
    -- | device_fingerprint: The hashed ID derived from the device ID from the card network associated with the token
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'tokenDeviceFingerprint :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'tokenId :: Data.Text.Internal.Text,
    -- | last4: The last four digits of the token.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuing'tokenLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    issuing'tokenLivemode :: GHC.Types.Bool,
    -- | network: The token service provider \/ card network associated with the token.
    issuing'tokenNetwork :: Issuing'tokenNetwork',
    -- | network_data:
    issuing'tokenNetworkData :: (GHC.Maybe.Maybe IssuingNetworkTokenNetworkData),
    -- | network_updated_at: Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.
    issuing'tokenNetworkUpdatedAt :: GHC.Types.Int,
    -- | status: The usage state of the token.
    issuing'tokenStatus :: Issuing'tokenStatus',
    -- | wallet_provider: The digital wallet for this token, if one was used.
    issuing'tokenWalletProvider :: (GHC.Maybe.Maybe Issuing'tokenWalletProvider')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'token where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["card" Data.Aeson.Types.ToJSON..= issuing'tokenCard obj] : ["created" Data.Aeson.Types.ToJSON..= issuing'tokenCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("device_fingerprint" Data.Aeson.Types.ToJSON..=)) (issuing'tokenDeviceFingerprint obj) : ["id" Data.Aeson.Types.ToJSON..= issuing'tokenId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (issuing'tokenLast4 obj) : ["livemode" Data.Aeson.Types.ToJSON..= issuing'tokenLivemode obj] : ["network" Data.Aeson.Types.ToJSON..= issuing'tokenNetwork obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_data" Data.Aeson.Types.ToJSON..=)) (issuing'tokenNetworkData obj) : ["network_updated_at" Data.Aeson.Types.ToJSON..= issuing'tokenNetworkUpdatedAt obj] : ["status" Data.Aeson.Types.ToJSON..= issuing'tokenStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_provider" Data.Aeson.Types.ToJSON..=)) (issuing'tokenWalletProvider obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.token"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["card" Data.Aeson.Types.ToJSON..= issuing'tokenCard obj] : ["created" Data.Aeson.Types.ToJSON..= issuing'tokenCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("device_fingerprint" Data.Aeson.Types.ToJSON..=)) (issuing'tokenDeviceFingerprint obj) : ["id" Data.Aeson.Types.ToJSON..= issuing'tokenId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("last4" Data.Aeson.Types.ToJSON..=)) (issuing'tokenLast4 obj) : ["livemode" Data.Aeson.Types.ToJSON..= issuing'tokenLivemode obj] : ["network" Data.Aeson.Types.ToJSON..= issuing'tokenNetwork obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_data" Data.Aeson.Types.ToJSON..=)) (issuing'tokenNetworkData obj) : ["network_updated_at" Data.Aeson.Types.ToJSON..= issuing'tokenNetworkUpdatedAt obj] : ["status" Data.Aeson.Types.ToJSON..= issuing'tokenStatus obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_provider" Data.Aeson.Types.ToJSON..=)) (issuing'tokenWalletProvider obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.token"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'token where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'token" (\obj -> ((((((((((GHC.Base.pure Issuing'token GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "device_fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "network_updated_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_provider"))

-- | Create a new 'Issuing'token' with all required fields.
mkIssuing'token ::
  -- | 'issuing'tokenCard'
  Issuing'tokenCard'Variants ->
  -- | 'issuing'tokenCreated'
  GHC.Types.Int ->
  -- | 'issuing'tokenId'
  Data.Text.Internal.Text ->
  -- | 'issuing'tokenLivemode'
  GHC.Types.Bool ->
  -- | 'issuing'tokenNetwork'
  Issuing'tokenNetwork' ->
  -- | 'issuing'tokenNetworkUpdatedAt'
  GHC.Types.Int ->
  -- | 'issuing'tokenStatus'
  Issuing'tokenStatus' ->
  Issuing'token
mkIssuing'token issuing'tokenCard issuing'tokenCreated issuing'tokenId issuing'tokenLivemode issuing'tokenNetwork issuing'tokenNetworkUpdatedAt issuing'tokenStatus =
  Issuing'token
    { issuing'tokenCard = issuing'tokenCard,
      issuing'tokenCreated = issuing'tokenCreated,
      issuing'tokenDeviceFingerprint = GHC.Maybe.Nothing,
      issuing'tokenId = issuing'tokenId,
      issuing'tokenLast4 = GHC.Maybe.Nothing,
      issuing'tokenLivemode = issuing'tokenLivemode,
      issuing'tokenNetwork = issuing'tokenNetwork,
      issuing'tokenNetworkData = GHC.Maybe.Nothing,
      issuing'tokenNetworkUpdatedAt = issuing'tokenNetworkUpdatedAt,
      issuing'tokenStatus = issuing'tokenStatus,
      issuing'tokenWalletProvider = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.issuing.token.properties.card.anyOf@ in the specification.
--
-- Card associated with this token.
data Issuing'tokenCard'Variants
  = Issuing'tokenCard'Text Data.Text.Internal.Text
  | Issuing'tokenCard'Issuing'card Issuing'card
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'tokenCard'Variants where
  toJSON (Issuing'tokenCard'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (Issuing'tokenCard'Issuing'card a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'tokenCard'Variants where
  parseJSON val = case (Issuing'tokenCard'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Issuing'tokenCard'Issuing'card Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.issuing.token.properties.network@ in the specification.
--
-- The token service provider \/ card network associated with the token.
data Issuing'tokenNetwork'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Issuing'tokenNetwork'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Issuing'tokenNetwork'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"mastercard"@
    Issuing'tokenNetwork'EnumMastercard
  | -- | Represents the JSON value @"visa"@
    Issuing'tokenNetwork'EnumVisa
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'tokenNetwork' where
  toJSON (Issuing'tokenNetwork'Other val) = val
  toJSON (Issuing'tokenNetwork'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Issuing'tokenNetwork'EnumMastercard) = "mastercard"
  toJSON (Issuing'tokenNetwork'EnumVisa) = "visa"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'tokenNetwork' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "mastercard" -> Issuing'tokenNetwork'EnumMastercard
            | val GHC.Classes.== "visa" -> Issuing'tokenNetwork'EnumVisa
            | GHC.Base.otherwise -> Issuing'tokenNetwork'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing.token.properties.status@ in the specification.
--
-- The usage state of the token.
data Issuing'tokenStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Issuing'tokenStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Issuing'tokenStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    Issuing'tokenStatus'EnumActive
  | -- | Represents the JSON value @"deleted"@
    Issuing'tokenStatus'EnumDeleted
  | -- | Represents the JSON value @"requested"@
    Issuing'tokenStatus'EnumRequested
  | -- | Represents the JSON value @"suspended"@
    Issuing'tokenStatus'EnumSuspended
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'tokenStatus' where
  toJSON (Issuing'tokenStatus'Other val) = val
  toJSON (Issuing'tokenStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Issuing'tokenStatus'EnumActive) = "active"
  toJSON (Issuing'tokenStatus'EnumDeleted) = "deleted"
  toJSON (Issuing'tokenStatus'EnumRequested) = "requested"
  toJSON (Issuing'tokenStatus'EnumSuspended) = "suspended"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'tokenStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> Issuing'tokenStatus'EnumActive
            | val GHC.Classes.== "deleted" -> Issuing'tokenStatus'EnumDeleted
            | val GHC.Classes.== "requested" -> Issuing'tokenStatus'EnumRequested
            | val GHC.Classes.== "suspended" -> Issuing'tokenStatus'EnumSuspended
            | GHC.Base.otherwise -> Issuing'tokenStatus'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing.token.properties.wallet_provider@ in the specification.
--
-- The digital wallet for this token, if one was used.
data Issuing'tokenWalletProvider'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Issuing'tokenWalletProvider'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Issuing'tokenWalletProvider'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"apple_pay"@
    Issuing'tokenWalletProvider'EnumApplePay
  | -- | Represents the JSON value @"google_pay"@
    Issuing'tokenWalletProvider'EnumGooglePay
  | -- | Represents the JSON value @"samsung_pay"@
    Issuing'tokenWalletProvider'EnumSamsungPay
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'tokenWalletProvider' where
  toJSON (Issuing'tokenWalletProvider'Other val) = val
  toJSON (Issuing'tokenWalletProvider'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Issuing'tokenWalletProvider'EnumApplePay) = "apple_pay"
  toJSON (Issuing'tokenWalletProvider'EnumGooglePay) = "google_pay"
  toJSON (Issuing'tokenWalletProvider'EnumSamsungPay) = "samsung_pay"

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'tokenWalletProvider' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "apple_pay" -> Issuing'tokenWalletProvider'EnumApplePay
            | val GHC.Classes.== "google_pay" -> Issuing'tokenWalletProvider'EnumGooglePay
            | val GHC.Classes.== "samsung_pay" -> Issuing'tokenWalletProvider'EnumSamsungPay
            | GHC.Base.otherwise -> Issuing'tokenWalletProvider'Other val
      )
