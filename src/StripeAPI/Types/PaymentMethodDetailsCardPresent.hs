{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema PaymentMethodDetailsCardPresent
module StripeAPI.Types.PaymentMethodDetailsCardPresent where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDetailsCardPresentReceipt
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_details_card_present@ in the specification.
data PaymentMethodDetailsCardPresent
  = PaymentMethodDetailsCardPresent
      { -- | brand: Card brand. Can be \`amex\`, \`diners\`, \`discover\`, \`jcb\`, \`mastercard\`, \`unionpay\`, \`visa\`, or \`unknown\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentBrand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\'ve collected.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | emv_auth_data: Authorization response cryptogram.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentEmvAuthData :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | exp_month: Two-digit number representing the card\'s expiration month.
        paymentMethodDetailsCardPresentExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | exp_year: Four-digit number representing the card\'s expiration year.
        paymentMethodDetailsCardPresentExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | fingerprint: Uniquely identifies this particular card number. You can use this attribute to check whether two customers who\'ve signed up with you are using the same card number, for example.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentFunding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | generated_card: ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentGeneratedCard :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | last4: The last four digits of the card.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | network: Identifies which network this charge was processed on. Can be \`amex\`, \`diners\`, \`discover\`, \`interac\`, \`jcb\`, \`mastercard\`, \`unionpay\`, \`visa\`, or \`unknown\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentNetwork :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | read_method: How were card details read in this transaction. Can be contact_emv, contactless_emv, magnetic_stripe_fallback, magnetic_stripe_track2, or contactless_magstripe_mode
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentReadMethod :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | receipt: A collection of fields required to be displayed on receipts. Only required for EMV transactions.
        paymentMethodDetailsCardPresentReceipt :: (GHC.Maybe.Maybe PaymentMethodDetailsCardPresentReceipt')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresent where
  toJSON obj = Data.Aeson.Types.Internal.object ("brand" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentBrand obj : "country" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentCountry obj : "emv_auth_data" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentEmvAuthData obj : "exp_month" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentExpYear obj : "fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentFingerprint obj : "funding" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentFunding obj : "generated_card" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentGeneratedCard obj : "last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentLast4 obj : "network" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentNetwork obj : "read_method" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReadMethod obj : "receipt" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("brand" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentBrand obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentCountry obj) GHC.Base.<> (("emv_auth_data" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentEmvAuthData obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentExpYear obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentFingerprint obj) GHC.Base.<> (("funding" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentFunding obj) GHC.Base.<> (("generated_card" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentGeneratedCard obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentLast4 obj) GHC.Base.<> (("network" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentNetwork obj) GHC.Base.<> (("read_method" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReadMethod obj) GHC.Base.<> ("receipt" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt obj))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresent where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardPresent" (\obj -> (((((((((((GHC.Base.pure PaymentMethodDetailsCardPresent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "emv_auth_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "generated_card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "read_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receipt"))

-- | Create a new 'PaymentMethodDetailsCardPresent' with all required fields.
mkPaymentMethodDetailsCardPresent :: PaymentMethodDetailsCardPresent
mkPaymentMethodDetailsCardPresent =
  PaymentMethodDetailsCardPresent
    { paymentMethodDetailsCardPresentBrand = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentCountry = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentEmvAuthData = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentExpMonth = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentExpYear = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentFingerprint = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentFunding = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentGeneratedCard = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentLast4 = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentNetwork = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReadMethod = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_method_details_card_present.properties.receipt.anyOf@ in the specification.
--
-- A collection of fields required to be displayed on receipts. Only required for EMV transactions.
data PaymentMethodDetailsCardPresentReceipt'
  = PaymentMethodDetailsCardPresentReceipt'
      { -- | application_cryptogram: EMV tag 9F26, cryptogram generated by the integrated circuit chip.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentReceipt'ApplicationCryptogram :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | application_preferred_name: Mnenomic of the Application Identifier.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentReceipt'ApplicationPreferredName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | authorization_code: Identifier for this transaction.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentReceipt'AuthorizationCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | authorization_response_code: EMV tag 8A. A code returned by the card issuer.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentReceipt'AuthorizationResponseCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | cardholder_verification_method: How the cardholder verified ownership of the card.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentReceipt'CardholderVerificationMethod :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | dedicated_file_name: EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentReceipt'DedicatedFileName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | terminal_verification_results: The outcome of a series of EMV functions performed by the card reader.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentReceipt'TerminalVerificationResults :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | transaction_status_information: An indication of various EMV functions performed during the transaction.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodDetailsCardPresentReceipt'TransactionStatusInformation :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsCardPresentReceipt' where
  toJSON obj = Data.Aeson.Types.Internal.object ("application_cryptogram" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'ApplicationCryptogram obj : "application_preferred_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'ApplicationPreferredName obj : "authorization_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'AuthorizationCode obj : "authorization_response_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'AuthorizationResponseCode obj : "cardholder_verification_method" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'CardholderVerificationMethod obj : "dedicated_file_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'DedicatedFileName obj : "terminal_verification_results" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'TerminalVerificationResults obj : "transaction_status_information" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'TransactionStatusInformation obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("application_cryptogram" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'ApplicationCryptogram obj) GHC.Base.<> (("application_preferred_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'ApplicationPreferredName obj) GHC.Base.<> (("authorization_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'AuthorizationCode obj) GHC.Base.<> (("authorization_response_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'AuthorizationResponseCode obj) GHC.Base.<> (("cardholder_verification_method" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'CardholderVerificationMethod obj) GHC.Base.<> (("dedicated_file_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'DedicatedFileName obj) GHC.Base.<> (("terminal_verification_results" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'TerminalVerificationResults obj) GHC.Base.<> ("transaction_status_information" Data.Aeson.Types.ToJSON..= paymentMethodDetailsCardPresentReceipt'TransactionStatusInformation obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsCardPresentReceipt' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsCardPresentReceipt'" (\obj -> (((((((GHC.Base.pure PaymentMethodDetailsCardPresentReceipt' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_cryptogram")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_preferred_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorization_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "authorization_response_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cardholder_verification_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dedicated_file_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "terminal_verification_results")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transaction_status_information"))

-- | Create a new 'PaymentMethodDetailsCardPresentReceipt'' with all required fields.
mkPaymentMethodDetailsCardPresentReceipt' :: PaymentMethodDetailsCardPresentReceipt'
mkPaymentMethodDetailsCardPresentReceipt' =
  PaymentMethodDetailsCardPresentReceipt'
    { paymentMethodDetailsCardPresentReceipt'ApplicationCryptogram = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'ApplicationPreferredName = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'AuthorizationCode = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'AuthorizationResponseCode = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'CardholderVerificationMethod = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'DedicatedFileName = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'TerminalVerificationResults = GHC.Maybe.Nothing,
      paymentMethodDetailsCardPresentReceipt'TransactionStatusInformation = GHC.Maybe.Nothing
    }
