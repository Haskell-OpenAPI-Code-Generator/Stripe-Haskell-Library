{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Climate_Supplier
module StripeAPI.Types.Climate_Supplier where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.ClimateRemovalsLocation
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.climate.supplier@ in the specification.
--
-- A supplier of carbon removal.
data Climate'supplier = Climate'supplier
  { -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climate'supplierId :: Data.Text.Internal.Text,
    -- | info_url: Link to a webpage to learn more about the supplier.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climate'supplierInfoUrl :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    climate'supplierLivemode :: GHC.Types.Bool,
    -- | locations: The locations in which this supplier operates.
    climate'supplierLocations :: ([ClimateRemovalsLocation]),
    -- | name: Name of this carbon removal supplier.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    climate'supplierName :: Data.Text.Internal.Text,
    -- | removal_pathway: The scientific pathway used for carbon removal.
    climate'supplierRemovalPathway :: Climate'supplierRemovalPathway'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Climate'supplier where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= climate'supplierId obj] : ["info_url" Data.Aeson.Types.ToJSON..= climate'supplierInfoUrl obj] : ["livemode" Data.Aeson.Types.ToJSON..= climate'supplierLivemode obj] : ["locations" Data.Aeson.Types.ToJSON..= climate'supplierLocations obj] : ["name" Data.Aeson.Types.ToJSON..= climate'supplierName obj] : ["removal_pathway" Data.Aeson.Types.ToJSON..= climate'supplierRemovalPathway obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "climate.supplier"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["id" Data.Aeson.Types.ToJSON..= climate'supplierId obj] : ["info_url" Data.Aeson.Types.ToJSON..= climate'supplierInfoUrl obj] : ["livemode" Data.Aeson.Types.ToJSON..= climate'supplierLivemode obj] : ["locations" Data.Aeson.Types.ToJSON..= climate'supplierLocations obj] : ["name" Data.Aeson.Types.ToJSON..= climate'supplierName obj] : ["removal_pathway" Data.Aeson.Types.ToJSON..= climate'supplierRemovalPathway obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "climate.supplier"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Climate'supplier where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Climate'supplier" (\obj -> (((((GHC.Base.pure Climate'supplier GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "info_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "locations")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "removal_pathway"))

-- | Create a new 'Climate'supplier' with all required fields.
mkClimate'supplier ::
  -- | 'climate'supplierId'
  Data.Text.Internal.Text ->
  -- | 'climate'supplierInfoUrl'
  Data.Text.Internal.Text ->
  -- | 'climate'supplierLivemode'
  GHC.Types.Bool ->
  -- | 'climate'supplierLocations'
  [ClimateRemovalsLocation] ->
  -- | 'climate'supplierName'
  Data.Text.Internal.Text ->
  -- | 'climate'supplierRemovalPathway'
  Climate'supplierRemovalPathway' ->
  Climate'supplier
mkClimate'supplier climate'supplierId climate'supplierInfoUrl climate'supplierLivemode climate'supplierLocations climate'supplierName climate'supplierRemovalPathway =
  Climate'supplier
    { climate'supplierId = climate'supplierId,
      climate'supplierInfoUrl = climate'supplierInfoUrl,
      climate'supplierLivemode = climate'supplierLivemode,
      climate'supplierLocations = climate'supplierLocations,
      climate'supplierName = climate'supplierName,
      climate'supplierRemovalPathway = climate'supplierRemovalPathway
    }

-- | Defines the enum schema located at @components.schemas.climate.supplier.properties.removal_pathway@ in the specification.
--
-- The scientific pathway used for carbon removal.
data Climate'supplierRemovalPathway'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Climate'supplierRemovalPathway'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Climate'supplierRemovalPathway'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"biomass_carbon_removal_and_storage"@
    Climate'supplierRemovalPathway'EnumBiomassCarbonRemovalAndStorage
  | -- | Represents the JSON value @"direct_air_capture"@
    Climate'supplierRemovalPathway'EnumDirectAirCapture
  | -- | Represents the JSON value @"enhanced_weathering"@
    Climate'supplierRemovalPathway'EnumEnhancedWeathering
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Climate'supplierRemovalPathway' where
  toJSON (Climate'supplierRemovalPathway'Other val) = val
  toJSON (Climate'supplierRemovalPathway'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Climate'supplierRemovalPathway'EnumBiomassCarbonRemovalAndStorage) = "biomass_carbon_removal_and_storage"
  toJSON (Climate'supplierRemovalPathway'EnumDirectAirCapture) = "direct_air_capture"
  toJSON (Climate'supplierRemovalPathway'EnumEnhancedWeathering) = "enhanced_weathering"

instance Data.Aeson.Types.FromJSON.FromJSON Climate'supplierRemovalPathway' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "biomass_carbon_removal_and_storage" -> Climate'supplierRemovalPathway'EnumBiomassCarbonRemovalAndStorage
            | val GHC.Classes.== "direct_air_capture" -> Climate'supplierRemovalPathway'EnumDirectAirCapture
            | val GHC.Classes.== "enhanced_weathering" -> Climate'supplierRemovalPathway'EnumEnhancedWeathering
            | GHC.Base.otherwise -> Climate'supplierRemovalPathway'Other val
      )
