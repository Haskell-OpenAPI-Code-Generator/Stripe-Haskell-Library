{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Item
module StripeAPI.Types.Item where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CustomUnitAmount
import {-# SOURCE #-} StripeAPI.Types.DeletedProduct
import {-# SOURCE #-} StripeAPI.Types.LineItemsDiscountAmount
import {-# SOURCE #-} StripeAPI.Types.LineItemsTaxAmount
import {-# SOURCE #-} StripeAPI.Types.Price
import {-# SOURCE #-} StripeAPI.Types.PriceTier
import {-# SOURCE #-} StripeAPI.Types.Product
import {-# SOURCE #-} StripeAPI.Types.Recurring
import {-# SOURCE #-} StripeAPI.Types.TransformQuantity
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.item@ in the specification.
--
-- A line item.
data Item = Item
  { -- | amount_discount: Total discount amount applied. If no discounts were applied, defaults to 0.
    itemAmountDiscount :: GHC.Types.Int,
    -- | amount_subtotal: Total before any discounts or taxes are applied.
    itemAmountSubtotal :: GHC.Types.Int,
    -- | amount_tax: Total tax amount applied. If no tax was applied, defaults to 0.
    itemAmountTax :: GHC.Types.Int,
    -- | amount_total: Total after discounts and taxes.
    itemAmountTotal :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    itemCurrency :: Data.Text.Internal.Text,
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    itemDescription :: Data.Text.Internal.Text,
    -- | discounts: The discounts applied to the line item.
    itemDiscounts :: (GHC.Maybe.Maybe ([LineItemsDiscountAmount])),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    itemId :: Data.Text.Internal.Text,
    -- | price: The price used to generate the line item.
    itemPrice :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ItemPrice'NonNullable)),
    -- | quantity: The quantity of products being purchased.
    itemQuantity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | taxes: The taxes applied to the line item.
    itemTaxes :: (GHC.Maybe.Maybe ([LineItemsTaxAmount]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Item where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount_discount" Data.Aeson.Types.ToJSON..= itemAmountDiscount obj] : ["amount_subtotal" Data.Aeson.Types.ToJSON..= itemAmountSubtotal obj] : ["amount_tax" Data.Aeson.Types.ToJSON..= itemAmountTax obj] : ["amount_total" Data.Aeson.Types.ToJSON..= itemAmountTotal obj] : ["currency" Data.Aeson.Types.ToJSON..= itemCurrency obj] : ["description" Data.Aeson.Types.ToJSON..= itemDescription obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounts" Data.Aeson.Types.ToJSON..=)) (itemDiscounts obj) : ["id" Data.Aeson.Types.ToJSON..= itemId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (itemPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (itemQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("taxes" Data.Aeson.Types.ToJSON..=)) (itemTaxes obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "item"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount_discount" Data.Aeson.Types.ToJSON..= itemAmountDiscount obj] : ["amount_subtotal" Data.Aeson.Types.ToJSON..= itemAmountSubtotal obj] : ["amount_tax" Data.Aeson.Types.ToJSON..= itemAmountTax obj] : ["amount_total" Data.Aeson.Types.ToJSON..= itemAmountTotal obj] : ["currency" Data.Aeson.Types.ToJSON..= itemCurrency obj] : ["description" Data.Aeson.Types.ToJSON..= itemDescription obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("discounts" Data.Aeson.Types.ToJSON..=)) (itemDiscounts obj) : ["id" Data.Aeson.Types.ToJSON..= itemId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("price" Data.Aeson.Types.ToJSON..=)) (itemPrice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (itemQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("taxes" Data.Aeson.Types.ToJSON..=)) (itemTaxes obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "item"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Item where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Item" (\obj -> ((((((((((GHC.Base.pure Item GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_discount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "discounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "price")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "taxes"))

-- | Create a new 'Item' with all required fields.
mkItem ::
  -- | 'itemAmountDiscount'
  GHC.Types.Int ->
  -- | 'itemAmountSubtotal'
  GHC.Types.Int ->
  -- | 'itemAmountTax'
  GHC.Types.Int ->
  -- | 'itemAmountTotal'
  GHC.Types.Int ->
  -- | 'itemCurrency'
  Data.Text.Internal.Text ->
  -- | 'itemDescription'
  Data.Text.Internal.Text ->
  -- | 'itemId'
  Data.Text.Internal.Text ->
  Item
mkItem itemAmountDiscount itemAmountSubtotal itemAmountTax itemAmountTotal itemCurrency itemDescription itemId =
  Item
    { itemAmountDiscount = itemAmountDiscount,
      itemAmountSubtotal = itemAmountSubtotal,
      itemAmountTax = itemAmountTax,
      itemAmountTotal = itemAmountTotal,
      itemCurrency = itemCurrency,
      itemDescription = itemDescription,
      itemDiscounts = GHC.Maybe.Nothing,
      itemId = itemId,
      itemPrice = GHC.Maybe.Nothing,
      itemQuantity = GHC.Maybe.Nothing,
      itemTaxes = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.item.properties.price.anyOf@ in the specification.
--
-- The price used to generate the line item.
data ItemPrice'NonNullable = ItemPrice'NonNullable
  { -- | active: Whether the price can be used for new purchases.
    itemPrice'NonNullableActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | billing_scheme: Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`unit_amount\` or \`unit_amount_decimal\`) will be charged per unit in \`quantity\` (for prices with \`usage_type=licensed\`), or per unit of total usage (for prices with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
    itemPrice'NonNullableBillingScheme :: (GHC.Maybe.Maybe ItemPrice'NonNullableBillingScheme'),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    itemPrice'NonNullableCreated :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    itemPrice'NonNullableCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | currency_options: Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html) and a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    itemPrice'NonNullableCurrencyOptions :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | custom_unit_amount: When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
    itemPrice'NonNullableCustomUnitAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ItemPrice'NonNullableCustomUnitAmount'NonNullable)),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    itemPrice'NonNullableId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    itemPrice'NonNullableLivemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | lookup_key: A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    itemPrice'NonNullableLookupKey :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    itemPrice'NonNullableMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
    -- | nickname: A brief description of the price, hidden from customers.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    itemPrice'NonNullableNickname :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | object: String representing the object\'s type. Objects of the same type share the same value.
    itemPrice'NonNullableObject :: (GHC.Maybe.Maybe ItemPrice'NonNullableObject'),
    -- | product: The ID of the product this price is associated with.
    itemPrice'NonNullableProduct :: (GHC.Maybe.Maybe ItemPrice'NonNullableProduct'Variants),
    -- | recurring: The recurring components of a price such as \`interval\` and \`usage_type\`.
    itemPrice'NonNullableRecurring :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ItemPrice'NonNullableRecurring'NonNullable)),
    -- | tax_behavior: Only required if a [default tax behavior](https:\/\/stripe.com\/docs\/tax\/products-prices-tax-categories-tax-behavior\#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of \`inclusive\`, \`exclusive\`, or \`unspecified\`. Once specified as either \`inclusive\` or \`exclusive\`, it cannot be changed.
    itemPrice'NonNullableTaxBehavior :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ItemPrice'NonNullableTaxBehavior'NonNullable)),
    -- | tiers: Each element represents a pricing tier. This parameter requires \`billing_scheme\` to be set to \`tiered\`. See also the documentation for \`billing_scheme\`.
    itemPrice'NonNullableTiers :: (GHC.Maybe.Maybe ([PriceTier])),
    -- | tiers_mode: Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
    itemPrice'NonNullableTiersMode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ItemPrice'NonNullableTiersMode'NonNullable)),
    -- | transform_quantity: Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \`tiers\`.
    itemPrice'NonNullableTransformQuantity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ItemPrice'NonNullableTransformQuantity'NonNullable)),
    -- | type: One of \`one_time\` or \`recurring\` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
    itemPrice'NonNullableType :: (GHC.Maybe.Maybe ItemPrice'NonNullableType'),
    -- | unit_amount: The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if \`billing_scheme=per_unit\`.
    itemPrice'NonNullableUnitAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | unit_amount_decimal: The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if \`billing_scheme=per_unit\`.
    itemPrice'NonNullableUnitAmountDecimal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("active" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_scheme" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableBillingScheme obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency_options" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCurrencyOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_unit_amount" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCustomUnitAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableLivemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lookup_key" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableLookupKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nickname" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableNickname obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableProduct obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recurring" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers_mode" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTiersMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transform_quantity" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTransformQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableUnitAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableUnitAmountDecimal obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("active" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableActive obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_scheme" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableBillingScheme obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("created" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCreated obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency_options" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCurrencyOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("custom_unit_amount" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCustomUnitAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("id" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("livemode" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableLivemode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("lookup_key" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableLookupKey obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableMetadata obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("nickname" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableNickname obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("object" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableObject obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("product" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableProduct obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("recurring" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTiers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tiers_mode" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTiersMode obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transform_quantity" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTransformQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableUnitAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_amount_decimal" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableUnitAmountDecimal obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ItemPrice'NonNullable" (\obj -> ((((((((((((((((((((GHC.Base.pure ItemPrice'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "billing_scheme")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "custom_unit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "lookup_key")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "recurring")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tiers_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transform_quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit_amount_decimal"))

-- | Create a new 'ItemPrice'NonNullable' with all required fields.
mkItemPrice'NonNullable :: ItemPrice'NonNullable
mkItemPrice'NonNullable =
  ItemPrice'NonNullable
    { itemPrice'NonNullableActive = GHC.Maybe.Nothing,
      itemPrice'NonNullableBillingScheme = GHC.Maybe.Nothing,
      itemPrice'NonNullableCreated = GHC.Maybe.Nothing,
      itemPrice'NonNullableCurrency = GHC.Maybe.Nothing,
      itemPrice'NonNullableCurrencyOptions = GHC.Maybe.Nothing,
      itemPrice'NonNullableCustomUnitAmount = GHC.Maybe.Nothing,
      itemPrice'NonNullableId = GHC.Maybe.Nothing,
      itemPrice'NonNullableLivemode = GHC.Maybe.Nothing,
      itemPrice'NonNullableLookupKey = GHC.Maybe.Nothing,
      itemPrice'NonNullableMetadata = GHC.Maybe.Nothing,
      itemPrice'NonNullableNickname = GHC.Maybe.Nothing,
      itemPrice'NonNullableObject = GHC.Maybe.Nothing,
      itemPrice'NonNullableProduct = GHC.Maybe.Nothing,
      itemPrice'NonNullableRecurring = GHC.Maybe.Nothing,
      itemPrice'NonNullableTaxBehavior = GHC.Maybe.Nothing,
      itemPrice'NonNullableTiers = GHC.Maybe.Nothing,
      itemPrice'NonNullableTiersMode = GHC.Maybe.Nothing,
      itemPrice'NonNullableTransformQuantity = GHC.Maybe.Nothing,
      itemPrice'NonNullableType = GHC.Maybe.Nothing,
      itemPrice'NonNullableUnitAmount = GHC.Maybe.Nothing,
      itemPrice'NonNullableUnitAmountDecimal = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.item.properties.price.anyOf.properties.billing_scheme@ in the specification.
--
-- Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`unit_amount\` or \`unit_amount_decimal\`) will be charged per unit in \`quantity\` (for prices with \`usage_type=licensed\`), or per unit of total usage (for prices with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
data ItemPrice'NonNullableBillingScheme'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ItemPrice'NonNullableBillingScheme'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ItemPrice'NonNullableBillingScheme'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"per_unit"@
    ItemPrice'NonNullableBillingScheme'EnumPerUnit
  | -- | Represents the JSON value @"tiered"@
    ItemPrice'NonNullableBillingScheme'EnumTiered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableBillingScheme' where
  toJSON (ItemPrice'NonNullableBillingScheme'Other val) = val
  toJSON (ItemPrice'NonNullableBillingScheme'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ItemPrice'NonNullableBillingScheme'EnumPerUnit) = "per_unit"
  toJSON (ItemPrice'NonNullableBillingScheme'EnumTiered) = "tiered"

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableBillingScheme' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "per_unit" -> ItemPrice'NonNullableBillingScheme'EnumPerUnit
            | val GHC.Classes.== "tiered" -> ItemPrice'NonNullableBillingScheme'EnumTiered
            | GHC.Base.otherwise -> ItemPrice'NonNullableBillingScheme'Other val
      )

-- | Defines the object schema located at @components.schemas.item.properties.price.anyOf.properties.custom_unit_amount.anyOf@ in the specification.
--
-- When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
data ItemPrice'NonNullableCustomUnitAmount'NonNullable = ItemPrice'NonNullableCustomUnitAmount'NonNullable
  { -- | maximum: The maximum unit amount the customer can specify for this item.
    itemPrice'NonNullableCustomUnitAmount'NonNullableMaximum :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | minimum: The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
    itemPrice'NonNullableCustomUnitAmount'NonNullableMinimum :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | preset: The starting unit amount which can be updated by the customer.
    itemPrice'NonNullableCustomUnitAmount'NonNullablePreset :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableCustomUnitAmount'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCustomUnitAmount'NonNullableMaximum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("minimum" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCustomUnitAmount'NonNullableMinimum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preset" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCustomUnitAmount'NonNullablePreset obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("maximum" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCustomUnitAmount'NonNullableMaximum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("minimum" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCustomUnitAmount'NonNullableMinimum obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preset" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableCustomUnitAmount'NonNullablePreset obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableCustomUnitAmount'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ItemPrice'NonNullableCustomUnitAmount'NonNullable" (\obj -> ((GHC.Base.pure ItemPrice'NonNullableCustomUnitAmount'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "maximum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "minimum")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preset"))

-- | Create a new 'ItemPrice'NonNullableCustomUnitAmount'NonNullable' with all required fields.
mkItemPrice'NonNullableCustomUnitAmount'NonNullable :: ItemPrice'NonNullableCustomUnitAmount'NonNullable
mkItemPrice'NonNullableCustomUnitAmount'NonNullable =
  ItemPrice'NonNullableCustomUnitAmount'NonNullable
    { itemPrice'NonNullableCustomUnitAmount'NonNullableMaximum = GHC.Maybe.Nothing,
      itemPrice'NonNullableCustomUnitAmount'NonNullableMinimum = GHC.Maybe.Nothing,
      itemPrice'NonNullableCustomUnitAmount'NonNullablePreset = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.item.properties.price.anyOf.properties.object@ in the specification.
--
-- String representing the object\'s type. Objects of the same type share the same value.
data ItemPrice'NonNullableObject'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ItemPrice'NonNullableObject'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ItemPrice'NonNullableObject'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"price"@
    ItemPrice'NonNullableObject'EnumPrice
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableObject' where
  toJSON (ItemPrice'NonNullableObject'Other val) = val
  toJSON (ItemPrice'NonNullableObject'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ItemPrice'NonNullableObject'EnumPrice) = "price"

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableObject' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "price" -> ItemPrice'NonNullableObject'EnumPrice
            | GHC.Base.otherwise -> ItemPrice'NonNullableObject'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.item.properties.price.anyOf.properties.product.anyOf@ in the specification.
--
-- The ID of the product this price is associated with.
data ItemPrice'NonNullableProduct'Variants
  = ItemPrice'NonNullableProduct'Text Data.Text.Internal.Text
  | ItemPrice'NonNullableProduct'Product Product
  | ItemPrice'NonNullableProduct'DeletedProduct DeletedProduct
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableProduct'Variants where
  toJSON (ItemPrice'NonNullableProduct'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ItemPrice'NonNullableProduct'Product a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ItemPrice'NonNullableProduct'DeletedProduct a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableProduct'Variants where
  parseJSON val = case (ItemPrice'NonNullableProduct'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ItemPrice'NonNullableProduct'Product Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((ItemPrice'NonNullableProduct'DeletedProduct Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.item.properties.price.anyOf.properties.recurring.anyOf@ in the specification.
--
-- The recurring components of a price such as \\\`interval\\\` and \\\`usage_type\\\`.
data ItemPrice'NonNullableRecurring'NonNullable = ItemPrice'NonNullableRecurring'NonNullable
  { -- | aggregate_usage: Specifies a usage aggregation strategy for prices of \`usage_type=metered\`. Defaults to \`sum\`.
    itemPrice'NonNullableRecurring'NonNullableAggregateUsage :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullable)),
    -- | interval: The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
    itemPrice'NonNullableRecurring'NonNullableInterval :: (GHC.Maybe.Maybe ItemPrice'NonNullableRecurring'NonNullableInterval'),
    -- | interval_count: The number of intervals (specified in the \`interval\` attribute) between subscription billings. For example, \`interval=month\` and \`interval_count=3\` bills every 3 months.
    itemPrice'NonNullableRecurring'NonNullableIntervalCount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | usage_type: Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
    itemPrice'NonNullableRecurring'NonNullableUsageType :: (GHC.Maybe.Maybe ItemPrice'NonNullableRecurring'NonNullableUsageType')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableRecurring'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("aggregate_usage" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring'NonNullableAggregateUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring'NonNullableIntervalCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_type" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring'NonNullableUsageType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("aggregate_usage" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring'NonNullableAggregateUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring'NonNullableInterval obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("interval_count" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring'NonNullableIntervalCount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("usage_type" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableRecurring'NonNullableUsageType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableRecurring'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ItemPrice'NonNullableRecurring'NonNullable" (\obj -> (((GHC.Base.pure ItemPrice'NonNullableRecurring'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "aggregate_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "usage_type"))

-- | Create a new 'ItemPrice'NonNullableRecurring'NonNullable' with all required fields.
mkItemPrice'NonNullableRecurring'NonNullable :: ItemPrice'NonNullableRecurring'NonNullable
mkItemPrice'NonNullableRecurring'NonNullable =
  ItemPrice'NonNullableRecurring'NonNullable
    { itemPrice'NonNullableRecurring'NonNullableAggregateUsage = GHC.Maybe.Nothing,
      itemPrice'NonNullableRecurring'NonNullableInterval = GHC.Maybe.Nothing,
      itemPrice'NonNullableRecurring'NonNullableIntervalCount = GHC.Maybe.Nothing,
      itemPrice'NonNullableRecurring'NonNullableUsageType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.item.properties.price.anyOf.properties.recurring.anyOf.properties.aggregate_usage@ in the specification.
--
-- Specifies a usage aggregation strategy for prices of \`usage_type=metered\`. Defaults to \`sum\`.
data ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"last_during_period"@
    ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumLastDuringPeriod
  | -- | Represents the JSON value @"last_ever"@
    ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumLastEver
  | -- | Represents the JSON value @"max"@
    ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumMax
  | -- | Represents the JSON value @"sum"@
    ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumSum
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullable where
  toJSON (ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableOther val) = val
  toJSON (ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumLastDuringPeriod) = "last_during_period"
  toJSON (ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumLastEver) = "last_ever"
  toJSON (ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumMax) = "max"
  toJSON (ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumSum) = "sum"

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "last_during_period" -> ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumLastDuringPeriod
            | val GHC.Classes.== "last_ever" -> ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumLastEver
            | val GHC.Classes.== "max" -> ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumMax
            | val GHC.Classes.== "sum" -> ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableEnumSum
            | GHC.Base.otherwise -> ItemPrice'NonNullableRecurring'NonNullableAggregateUsage'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.item.properties.price.anyOf.properties.recurring.anyOf.properties.interval@ in the specification.
--
-- The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
data ItemPrice'NonNullableRecurring'NonNullableInterval'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ItemPrice'NonNullableRecurring'NonNullableInterval'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ItemPrice'NonNullableRecurring'NonNullableInterval'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"day"@
    ItemPrice'NonNullableRecurring'NonNullableInterval'EnumDay
  | -- | Represents the JSON value @"month"@
    ItemPrice'NonNullableRecurring'NonNullableInterval'EnumMonth
  | -- | Represents the JSON value @"week"@
    ItemPrice'NonNullableRecurring'NonNullableInterval'EnumWeek
  | -- | Represents the JSON value @"year"@
    ItemPrice'NonNullableRecurring'NonNullableInterval'EnumYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableRecurring'NonNullableInterval' where
  toJSON (ItemPrice'NonNullableRecurring'NonNullableInterval'Other val) = val
  toJSON (ItemPrice'NonNullableRecurring'NonNullableInterval'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ItemPrice'NonNullableRecurring'NonNullableInterval'EnumDay) = "day"
  toJSON (ItemPrice'NonNullableRecurring'NonNullableInterval'EnumMonth) = "month"
  toJSON (ItemPrice'NonNullableRecurring'NonNullableInterval'EnumWeek) = "week"
  toJSON (ItemPrice'NonNullableRecurring'NonNullableInterval'EnumYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableRecurring'NonNullableInterval' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "day" -> ItemPrice'NonNullableRecurring'NonNullableInterval'EnumDay
            | val GHC.Classes.== "month" -> ItemPrice'NonNullableRecurring'NonNullableInterval'EnumMonth
            | val GHC.Classes.== "week" -> ItemPrice'NonNullableRecurring'NonNullableInterval'EnumWeek
            | val GHC.Classes.== "year" -> ItemPrice'NonNullableRecurring'NonNullableInterval'EnumYear
            | GHC.Base.otherwise -> ItemPrice'NonNullableRecurring'NonNullableInterval'Other val
      )

-- | Defines the enum schema located at @components.schemas.item.properties.price.anyOf.properties.recurring.anyOf.properties.usage_type@ in the specification.
--
-- Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
data ItemPrice'NonNullableRecurring'NonNullableUsageType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ItemPrice'NonNullableRecurring'NonNullableUsageType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ItemPrice'NonNullableRecurring'NonNullableUsageType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"licensed"@
    ItemPrice'NonNullableRecurring'NonNullableUsageType'EnumLicensed
  | -- | Represents the JSON value @"metered"@
    ItemPrice'NonNullableRecurring'NonNullableUsageType'EnumMetered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableRecurring'NonNullableUsageType' where
  toJSON (ItemPrice'NonNullableRecurring'NonNullableUsageType'Other val) = val
  toJSON (ItemPrice'NonNullableRecurring'NonNullableUsageType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ItemPrice'NonNullableRecurring'NonNullableUsageType'EnumLicensed) = "licensed"
  toJSON (ItemPrice'NonNullableRecurring'NonNullableUsageType'EnumMetered) = "metered"

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableRecurring'NonNullableUsageType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "licensed" -> ItemPrice'NonNullableRecurring'NonNullableUsageType'EnumLicensed
            | val GHC.Classes.== "metered" -> ItemPrice'NonNullableRecurring'NonNullableUsageType'EnumMetered
            | GHC.Base.otherwise -> ItemPrice'NonNullableRecurring'NonNullableUsageType'Other val
      )

-- | Defines the enum schema located at @components.schemas.item.properties.price.anyOf.properties.tax_behavior@ in the specification.
--
-- Only required if a [default tax behavior](https:\/\/stripe.com\/docs\/tax\/products-prices-tax-categories-tax-behavior\#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of \`inclusive\`, \`exclusive\`, or \`unspecified\`. Once specified as either \`inclusive\` or \`exclusive\`, it cannot be changed.
data ItemPrice'NonNullableTaxBehavior'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ItemPrice'NonNullableTaxBehavior'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ItemPrice'NonNullableTaxBehavior'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"exclusive"@
    ItemPrice'NonNullableTaxBehavior'NonNullableEnumExclusive
  | -- | Represents the JSON value @"inclusive"@
    ItemPrice'NonNullableTaxBehavior'NonNullableEnumInclusive
  | -- | Represents the JSON value @"unspecified"@
    ItemPrice'NonNullableTaxBehavior'NonNullableEnumUnspecified
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableTaxBehavior'NonNullable where
  toJSON (ItemPrice'NonNullableTaxBehavior'NonNullableOther val) = val
  toJSON (ItemPrice'NonNullableTaxBehavior'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ItemPrice'NonNullableTaxBehavior'NonNullableEnumExclusive) = "exclusive"
  toJSON (ItemPrice'NonNullableTaxBehavior'NonNullableEnumInclusive) = "inclusive"
  toJSON (ItemPrice'NonNullableTaxBehavior'NonNullableEnumUnspecified) = "unspecified"

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableTaxBehavior'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "exclusive" -> ItemPrice'NonNullableTaxBehavior'NonNullableEnumExclusive
            | val GHC.Classes.== "inclusive" -> ItemPrice'NonNullableTaxBehavior'NonNullableEnumInclusive
            | val GHC.Classes.== "unspecified" -> ItemPrice'NonNullableTaxBehavior'NonNullableEnumUnspecified
            | GHC.Base.otherwise -> ItemPrice'NonNullableTaxBehavior'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.item.properties.price.anyOf.properties.tiers_mode@ in the specification.
--
-- Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
data ItemPrice'NonNullableTiersMode'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ItemPrice'NonNullableTiersMode'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ItemPrice'NonNullableTiersMode'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"graduated"@
    ItemPrice'NonNullableTiersMode'NonNullableEnumGraduated
  | -- | Represents the JSON value @"volume"@
    ItemPrice'NonNullableTiersMode'NonNullableEnumVolume
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableTiersMode'NonNullable where
  toJSON (ItemPrice'NonNullableTiersMode'NonNullableOther val) = val
  toJSON (ItemPrice'NonNullableTiersMode'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ItemPrice'NonNullableTiersMode'NonNullableEnumGraduated) = "graduated"
  toJSON (ItemPrice'NonNullableTiersMode'NonNullableEnumVolume) = "volume"

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableTiersMode'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "graduated" -> ItemPrice'NonNullableTiersMode'NonNullableEnumGraduated
            | val GHC.Classes.== "volume" -> ItemPrice'NonNullableTiersMode'NonNullableEnumVolume
            | GHC.Base.otherwise -> ItemPrice'NonNullableTiersMode'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.item.properties.price.anyOf.properties.transform_quantity.anyOf@ in the specification.
--
-- Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \\\`tiers\\\`.
data ItemPrice'NonNullableTransformQuantity'NonNullable = ItemPrice'NonNullableTransformQuantity'NonNullable
  { -- | divide_by: Divide usage by this number.
    itemPrice'NonNullableTransformQuantity'NonNullableDivideBy :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | round: After division, either round the result \`up\` or \`down\`.
    itemPrice'NonNullableTransformQuantity'NonNullableRound :: (GHC.Maybe.Maybe ItemPrice'NonNullableTransformQuantity'NonNullableRound')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableTransformQuantity'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("divide_by" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTransformQuantity'NonNullableDivideBy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("round" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTransformQuantity'NonNullableRound obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("divide_by" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTransformQuantity'NonNullableDivideBy obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("round" Data.Aeson.Types.ToJSON..=)) (itemPrice'NonNullableTransformQuantity'NonNullableRound obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableTransformQuantity'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ItemPrice'NonNullableTransformQuantity'NonNullable" (\obj -> (GHC.Base.pure ItemPrice'NonNullableTransformQuantity'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "divide_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "round"))

-- | Create a new 'ItemPrice'NonNullableTransformQuantity'NonNullable' with all required fields.
mkItemPrice'NonNullableTransformQuantity'NonNullable :: ItemPrice'NonNullableTransformQuantity'NonNullable
mkItemPrice'NonNullableTransformQuantity'NonNullable =
  ItemPrice'NonNullableTransformQuantity'NonNullable
    { itemPrice'NonNullableTransformQuantity'NonNullableDivideBy = GHC.Maybe.Nothing,
      itemPrice'NonNullableTransformQuantity'NonNullableRound = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.item.properties.price.anyOf.properties.transform_quantity.anyOf.properties.round@ in the specification.
--
-- After division, either round the result \`up\` or \`down\`.
data ItemPrice'NonNullableTransformQuantity'NonNullableRound'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ItemPrice'NonNullableTransformQuantity'NonNullableRound'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ItemPrice'NonNullableTransformQuantity'NonNullableRound'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"down"@
    ItemPrice'NonNullableTransformQuantity'NonNullableRound'EnumDown
  | -- | Represents the JSON value @"up"@
    ItemPrice'NonNullableTransformQuantity'NonNullableRound'EnumUp
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableTransformQuantity'NonNullableRound' where
  toJSON (ItemPrice'NonNullableTransformQuantity'NonNullableRound'Other val) = val
  toJSON (ItemPrice'NonNullableTransformQuantity'NonNullableRound'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ItemPrice'NonNullableTransformQuantity'NonNullableRound'EnumDown) = "down"
  toJSON (ItemPrice'NonNullableTransformQuantity'NonNullableRound'EnumUp) = "up"

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableTransformQuantity'NonNullableRound' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "down" -> ItemPrice'NonNullableTransformQuantity'NonNullableRound'EnumDown
            | val GHC.Classes.== "up" -> ItemPrice'NonNullableTransformQuantity'NonNullableRound'EnumUp
            | GHC.Base.otherwise -> ItemPrice'NonNullableTransformQuantity'NonNullableRound'Other val
      )

-- | Defines the enum schema located at @components.schemas.item.properties.price.anyOf.properties.type@ in the specification.
--
-- One of \`one_time\` or \`recurring\` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
data ItemPrice'NonNullableType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ItemPrice'NonNullableType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ItemPrice'NonNullableType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"one_time"@
    ItemPrice'NonNullableType'EnumOneTime
  | -- | Represents the JSON value @"recurring"@
    ItemPrice'NonNullableType'EnumRecurring
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ItemPrice'NonNullableType' where
  toJSON (ItemPrice'NonNullableType'Other val) = val
  toJSON (ItemPrice'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ItemPrice'NonNullableType'EnumOneTime) = "one_time"
  toJSON (ItemPrice'NonNullableType'EnumRecurring) = "recurring"

instance Data.Aeson.Types.FromJSON.FromJSON ItemPrice'NonNullableType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "one_time" -> ItemPrice'NonNullableType'EnumOneTime
            | val GHC.Classes.== "recurring" -> ItemPrice'NonNullableType'EnumRecurring
            | GHC.Base.otherwise -> ItemPrice'NonNullableType'Other val
      )
