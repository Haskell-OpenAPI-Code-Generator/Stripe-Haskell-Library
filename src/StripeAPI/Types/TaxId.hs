{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema TaxId
module StripeAPI.Types.TaxId where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.TaxIdVerification
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema tax_id
--
-- You can add one or multiple tax IDs to a [customer](https:\/\/stripe.com\/docs\/api\/customers).
-- A customer\'s tax IDs are displayed on invoices and credit notes issued for the customer.
--
-- Related guide: [Customer Tax Identification Numbers](https:\/\/stripe.com\/docs\/billing\/taxes\/tax-ids).
data TaxId
  = TaxId
      { -- | country: Two-letter ISO code representing the country of the tax ID.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxIdCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        taxIdCreated :: GHC.Types.Int,
        -- | customer: ID of the customer.
        taxIdCustomer :: TaxIdCustomer'Variants,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxIdId :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        taxIdLivemode :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        taxIdObject :: TaxIdObject',
        -- | type: Type of the tax ID, one of \`au_abn\`, \`ca_bn\`, \`ca_qst\`, \`ch_vat\`, \`es_cif\`, \`eu_vat\`, \`hk_br\`, \`in_gst\`, \`jp_cn\`, \`kr_brn\`, \`li_uid\`, \`mx_rfc\`, \`my_itn\`, \`my_sst\`, \`no_vat\`, \`nz_gst\`, \`ru_inn\`, \`sg_uen\`, \`th_vat\`, \`tw_vat\`, \`us_ein\`, or \`za_vat\`. Note that some legacy tax IDs have type \`unknown\`
        taxIdType :: TaxIdType',
        -- | value: Value of the tax ID.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxIdValue :: Data.Text.Internal.Text,
        -- | verification:
        taxIdVerification :: TaxIdVerification
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxId where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "country" (taxIdCountry obj) : (Data.Aeson..=) "created" (taxIdCreated obj) : (Data.Aeson..=) "customer" (taxIdCustomer obj) : (Data.Aeson..=) "id" (taxIdId obj) : (Data.Aeson..=) "livemode" (taxIdLivemode obj) : (Data.Aeson..=) "object" (taxIdObject obj) : (Data.Aeson..=) "type" (taxIdType obj) : (Data.Aeson..=) "value" (taxIdValue obj) : (Data.Aeson..=) "verification" (taxIdVerification obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "country" (taxIdCountry obj) GHC.Base.<> ((Data.Aeson..=) "created" (taxIdCreated obj) GHC.Base.<> ((Data.Aeson..=) "customer" (taxIdCustomer obj) GHC.Base.<> ((Data.Aeson..=) "id" (taxIdId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (taxIdLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (taxIdObject obj) GHC.Base.<> ((Data.Aeson..=) "type" (taxIdType obj) GHC.Base.<> ((Data.Aeson..=) "value" (taxIdValue obj) GHC.Base.<> (Data.Aeson..=) "verification" (taxIdVerification obj)))))))))

instance Data.Aeson.Types.FromJSON.FromJSON TaxId where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxId" (\obj -> ((((((((GHC.Base.pure TaxId GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "value")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "verification"))

-- | Define the one-of schema tax_idCustomer\'
--
-- ID of the customer.
data TaxIdCustomer'Variants
  = TaxIdCustomer'Customer Customer
  | TaxIdCustomer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxIdCustomer'Variants where
  toJSON (TaxIdCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TaxIdCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TaxIdCustomer'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TaxIdCustomer'Customer a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TaxIdCustomer'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema tax_idObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data TaxIdObject'
  = TaxIdObject'EnumOther Data.Aeson.Types.Internal.Value
  | TaxIdObject'EnumTyped Data.Text.Internal.Text
  | TaxIdObject'EnumStringTaxId
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxIdObject' where
  toJSON (TaxIdObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TaxIdObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TaxIdObject'EnumStringTaxId) = "tax_id"

instance Data.Aeson.Types.FromJSON.FromJSON TaxIdObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "tax_id" -> TaxIdObject'EnumStringTaxId
            | GHC.Base.otherwise -> TaxIdObject'EnumOther val
      )

-- | Defines the enum schema tax_idType\'
--
-- Type of the tax ID, one of \`au_abn\`, \`ca_bn\`, \`ca_qst\`, \`ch_vat\`, \`es_cif\`, \`eu_vat\`, \`hk_br\`, \`in_gst\`, \`jp_cn\`, \`kr_brn\`, \`li_uid\`, \`mx_rfc\`, \`my_itn\`, \`my_sst\`, \`no_vat\`, \`nz_gst\`, \`ru_inn\`, \`sg_uen\`, \`th_vat\`, \`tw_vat\`, \`us_ein\`, or \`za_vat\`. Note that some legacy tax IDs have type \`unknown\`
data TaxIdType'
  = TaxIdType'EnumOther Data.Aeson.Types.Internal.Value
  | TaxIdType'EnumTyped Data.Text.Internal.Text
  | TaxIdType'EnumStringAuAbn
  | TaxIdType'EnumStringCaBn
  | TaxIdType'EnumStringCaQst
  | TaxIdType'EnumStringChVat
  | TaxIdType'EnumStringEsCif
  | TaxIdType'EnumStringEuVat
  | TaxIdType'EnumStringHkBr
  | TaxIdType'EnumStringInGst
  | TaxIdType'EnumStringJpCn
  | TaxIdType'EnumStringKrBrn
  | TaxIdType'EnumStringLiUid
  | TaxIdType'EnumStringMxRfc
  | TaxIdType'EnumStringMyItn
  | TaxIdType'EnumStringMySst
  | TaxIdType'EnumStringNoVat
  | TaxIdType'EnumStringNzGst
  | TaxIdType'EnumStringRuInn
  | TaxIdType'EnumStringSgUen
  | TaxIdType'EnumStringThVat
  | TaxIdType'EnumStringTwVat
  | TaxIdType'EnumStringUnknown
  | TaxIdType'EnumStringUsEin
  | TaxIdType'EnumStringZaVat
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxIdType' where
  toJSON (TaxIdType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TaxIdType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TaxIdType'EnumStringAuAbn) = "au_abn"
  toJSON (TaxIdType'EnumStringCaBn) = "ca_bn"
  toJSON (TaxIdType'EnumStringCaQst) = "ca_qst"
  toJSON (TaxIdType'EnumStringChVat) = "ch_vat"
  toJSON (TaxIdType'EnumStringEsCif) = "es_cif"
  toJSON (TaxIdType'EnumStringEuVat) = "eu_vat"
  toJSON (TaxIdType'EnumStringHkBr) = "hk_br"
  toJSON (TaxIdType'EnumStringInGst) = "in_gst"
  toJSON (TaxIdType'EnumStringJpCn) = "jp_cn"
  toJSON (TaxIdType'EnumStringKrBrn) = "kr_brn"
  toJSON (TaxIdType'EnumStringLiUid) = "li_uid"
  toJSON (TaxIdType'EnumStringMxRfc) = "mx_rfc"
  toJSON (TaxIdType'EnumStringMyItn) = "my_itn"
  toJSON (TaxIdType'EnumStringMySst) = "my_sst"
  toJSON (TaxIdType'EnumStringNoVat) = "no_vat"
  toJSON (TaxIdType'EnumStringNzGst) = "nz_gst"
  toJSON (TaxIdType'EnumStringRuInn) = "ru_inn"
  toJSON (TaxIdType'EnumStringSgUen) = "sg_uen"
  toJSON (TaxIdType'EnumStringThVat) = "th_vat"
  toJSON (TaxIdType'EnumStringTwVat) = "tw_vat"
  toJSON (TaxIdType'EnumStringUnknown) = "unknown"
  toJSON (TaxIdType'EnumStringUsEin) = "us_ein"
  toJSON (TaxIdType'EnumStringZaVat) = "za_vat"

instance Data.Aeson.Types.FromJSON.FromJSON TaxIdType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "au_abn" -> TaxIdType'EnumStringAuAbn
            | val GHC.Classes.== "ca_bn" -> TaxIdType'EnumStringCaBn
            | val GHC.Classes.== "ca_qst" -> TaxIdType'EnumStringCaQst
            | val GHC.Classes.== "ch_vat" -> TaxIdType'EnumStringChVat
            | val GHC.Classes.== "es_cif" -> TaxIdType'EnumStringEsCif
            | val GHC.Classes.== "eu_vat" -> TaxIdType'EnumStringEuVat
            | val GHC.Classes.== "hk_br" -> TaxIdType'EnumStringHkBr
            | val GHC.Classes.== "in_gst" -> TaxIdType'EnumStringInGst
            | val GHC.Classes.== "jp_cn" -> TaxIdType'EnumStringJpCn
            | val GHC.Classes.== "kr_brn" -> TaxIdType'EnumStringKrBrn
            | val GHC.Classes.== "li_uid" -> TaxIdType'EnumStringLiUid
            | val GHC.Classes.== "mx_rfc" -> TaxIdType'EnumStringMxRfc
            | val GHC.Classes.== "my_itn" -> TaxIdType'EnumStringMyItn
            | val GHC.Classes.== "my_sst" -> TaxIdType'EnumStringMySst
            | val GHC.Classes.== "no_vat" -> TaxIdType'EnumStringNoVat
            | val GHC.Classes.== "nz_gst" -> TaxIdType'EnumStringNzGst
            | val GHC.Classes.== "ru_inn" -> TaxIdType'EnumStringRuInn
            | val GHC.Classes.== "sg_uen" -> TaxIdType'EnumStringSgUen
            | val GHC.Classes.== "th_vat" -> TaxIdType'EnumStringThVat
            | val GHC.Classes.== "tw_vat" -> TaxIdType'EnumStringTwVat
            | val GHC.Classes.== "unknown" -> TaxIdType'EnumStringUnknown
            | val GHC.Classes.== "us_ein" -> TaxIdType'EnumStringUsEin
            | val GHC.Classes.== "za_vat" -> TaxIdType'EnumStringZaVat
            | GHC.Base.otherwise -> TaxIdType'EnumOther val
      )
