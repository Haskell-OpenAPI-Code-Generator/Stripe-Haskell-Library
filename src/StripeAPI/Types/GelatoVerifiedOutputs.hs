{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GelatoVerifiedOutputs
module StripeAPI.Types.GelatoVerifiedOutputs where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Address
import {-# SOURCE #-} StripeAPI.Types.GelatoDataVerifiedOutputsDate
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.gelato_verified_outputs@ in the specification.
data GelatoVerifiedOutputs = GelatoVerifiedOutputs
  { -- | address: The user\'s verified address.
    gelatoVerifiedOutputsAddress :: (GHC.Maybe.Maybe GelatoVerifiedOutputsAddress'),
    -- | dob: The user’s verified date of birth.
    gelatoVerifiedOutputsDob :: (GHC.Maybe.Maybe GelatoVerifiedOutputsDob'),
    -- | first_name: The user\'s verified first name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    gelatoVerifiedOutputsFirstName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | id_number: The user\'s verified id number.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    gelatoVerifiedOutputsIdNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | id_number_type: The user\'s verified id number type.
    gelatoVerifiedOutputsIdNumberType :: (GHC.Maybe.Maybe GelatoVerifiedOutputsIdNumberType'),
    -- | last_name: The user\'s verified last name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    gelatoVerifiedOutputsLastName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GelatoVerifiedOutputs where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress obj : "dob" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsDob obj : "first_name" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsFirstName obj : "id_number" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsIdNumber obj : "id_number_type" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsIdNumberType obj : "last_name" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsLastName obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress obj) GHC.Base.<> (("dob" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsDob obj) GHC.Base.<> (("first_name" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsFirstName obj) GHC.Base.<> (("id_number" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsIdNumber obj) GHC.Base.<> (("id_number_type" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsIdNumberType obj) GHC.Base.<> ("last_name" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsLastName obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON GelatoVerifiedOutputs where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GelatoVerifiedOutputs" (\obj -> (((((GHC.Base.pure GelatoVerifiedOutputs GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dob")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "first_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id_number_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last_name"))

-- | Create a new 'GelatoVerifiedOutputs' with all required fields.
mkGelatoVerifiedOutputs :: GelatoVerifiedOutputs
mkGelatoVerifiedOutputs =
  GelatoVerifiedOutputs
    { gelatoVerifiedOutputsAddress = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsDob = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsFirstName = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsIdNumber = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsIdNumberType = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsLastName = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.gelato_verified_outputs.properties.address.anyOf@ in the specification.
--
-- The user\\\'s verified address.
data GelatoVerifiedOutputsAddress' = GelatoVerifiedOutputsAddress'
  { -- | city: City, district, suburb, town, or village.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    gelatoVerifiedOutputsAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    gelatoVerifiedOutputsAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line1: Address line 1 (e.g., street, PO Box, or company name).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    gelatoVerifiedOutputsAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    gelatoVerifiedOutputsAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | postal_code: ZIP or postal code.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    gelatoVerifiedOutputsAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | state: State, county, province, or region.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    gelatoVerifiedOutputsAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GelatoVerifiedOutputsAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'City obj : "country" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'Country obj : "line1" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'State obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsAddress'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON GelatoVerifiedOutputsAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GelatoVerifiedOutputsAddress'" (\obj -> (((((GHC.Base.pure GelatoVerifiedOutputsAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'GelatoVerifiedOutputsAddress'' with all required fields.
mkGelatoVerifiedOutputsAddress' :: GelatoVerifiedOutputsAddress'
mkGelatoVerifiedOutputsAddress' =
  GelatoVerifiedOutputsAddress'
    { gelatoVerifiedOutputsAddress'City = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsAddress'Country = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsAddress'Line1 = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsAddress'Line2 = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsAddress'PostalCode = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.gelato_verified_outputs.properties.dob.anyOf@ in the specification.
--
-- The user’s verified date of birth.
data GelatoVerifiedOutputsDob' = GelatoVerifiedOutputsDob'
  { -- | day: Numerical day between 1 and 31.
    gelatoVerifiedOutputsDob'Day :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | month: Numerical month between 1 and 12.
    gelatoVerifiedOutputsDob'Month :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | year: The four-digit year.
    gelatoVerifiedOutputsDob'Year :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GelatoVerifiedOutputsDob' where
  toJSON obj = Data.Aeson.Types.Internal.object ("day" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsDob'Day obj : "month" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsDob'Month obj : "year" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsDob'Year obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("day" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsDob'Day obj) GHC.Base.<> (("month" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsDob'Month obj) GHC.Base.<> ("year" Data.Aeson.Types.ToJSON..= gelatoVerifiedOutputsDob'Year obj)))

instance Data.Aeson.Types.FromJSON.FromJSON GelatoVerifiedOutputsDob' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GelatoVerifiedOutputsDob'" (\obj -> ((GHC.Base.pure GelatoVerifiedOutputsDob' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "day")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "year"))

-- | Create a new 'GelatoVerifiedOutputsDob'' with all required fields.
mkGelatoVerifiedOutputsDob' :: GelatoVerifiedOutputsDob'
mkGelatoVerifiedOutputsDob' =
  GelatoVerifiedOutputsDob'
    { gelatoVerifiedOutputsDob'Day = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsDob'Month = GHC.Maybe.Nothing,
      gelatoVerifiedOutputsDob'Year = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.gelato_verified_outputs.properties.id_number_type@ in the specification.
--
-- The user\'s verified id number type.
data GelatoVerifiedOutputsIdNumberType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GelatoVerifiedOutputsIdNumberType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GelatoVerifiedOutputsIdNumberType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"br_cpf"@
    GelatoVerifiedOutputsIdNumberType'EnumBrCpf
  | -- | Represents the JSON value @"sg_nric"@
    GelatoVerifiedOutputsIdNumberType'EnumSgNric
  | -- | Represents the JSON value @"us_ssn"@
    GelatoVerifiedOutputsIdNumberType'EnumUsSsn
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GelatoVerifiedOutputsIdNumberType' where
  toJSON (GelatoVerifiedOutputsIdNumberType'Other val) = val
  toJSON (GelatoVerifiedOutputsIdNumberType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GelatoVerifiedOutputsIdNumberType'EnumBrCpf) = "br_cpf"
  toJSON (GelatoVerifiedOutputsIdNumberType'EnumSgNric) = "sg_nric"
  toJSON (GelatoVerifiedOutputsIdNumberType'EnumUsSsn) = "us_ssn"

instance Data.Aeson.Types.FromJSON.FromJSON GelatoVerifiedOutputsIdNumberType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "br_cpf" -> GelatoVerifiedOutputsIdNumberType'EnumBrCpf
            | val GHC.Classes.== "sg_nric" -> GelatoVerifiedOutputsIdNumberType'EnumSgNric
            | val GHC.Classes.== "us_ssn" -> GelatoVerifiedOutputsIdNumberType'EnumUsSsn
            | GHC.Base.otherwise -> GelatoVerifiedOutputsIdNumberType'Other val
      )
