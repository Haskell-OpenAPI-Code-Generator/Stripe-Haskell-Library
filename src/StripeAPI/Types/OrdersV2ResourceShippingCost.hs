{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema OrdersV2ResourceShippingCost
module StripeAPI.Types.OrdersV2ResourceShippingCost where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.LineItemsTaxAmount
import {-# SOURCE #-} StripeAPI.Types.ShippingRate
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.orders_v2_resource_shipping_cost@ in the specification.
data OrdersV2ResourceShippingCost = OrdersV2ResourceShippingCost
  { -- | amount_subtotal: Total shipping cost before any discounts or taxes are applied.
    ordersV2ResourceShippingCostAmountSubtotal :: GHC.Types.Int,
    -- | amount_tax: Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
    ordersV2ResourceShippingCostAmountTax :: GHC.Types.Int,
    -- | amount_total: Total shipping cost after discounts and taxes are applied.
    ordersV2ResourceShippingCostAmountTotal :: GHC.Types.Int,
    -- | shipping_rate: The ID of the ShippingRate for this order.
    ordersV2ResourceShippingCostShippingRate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable OrdersV2ResourceShippingCostShippingRate'NonNullableVariants)),
    -- | taxes: The taxes applied to the shipping rate.
    ordersV2ResourceShippingCostTaxes :: (GHC.Maybe.Maybe ([LineItemsTaxAmount]))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OrdersV2ResourceShippingCost where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount_subtotal" Data.Aeson.Types.ToJSON..= ordersV2ResourceShippingCostAmountSubtotal obj] : ["amount_tax" Data.Aeson.Types.ToJSON..= ordersV2ResourceShippingCostAmountTax obj] : ["amount_total" Data.Aeson.Types.ToJSON..= ordersV2ResourceShippingCostAmountTotal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_rate" Data.Aeson.Types.ToJSON..=)) (ordersV2ResourceShippingCostShippingRate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("taxes" Data.Aeson.Types.ToJSON..=)) (ordersV2ResourceShippingCostTaxes obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount_subtotal" Data.Aeson.Types.ToJSON..= ordersV2ResourceShippingCostAmountSubtotal obj] : ["amount_tax" Data.Aeson.Types.ToJSON..= ordersV2ResourceShippingCostAmountTax obj] : ["amount_total" Data.Aeson.Types.ToJSON..= ordersV2ResourceShippingCostAmountTotal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_rate" Data.Aeson.Types.ToJSON..=)) (ordersV2ResourceShippingCostShippingRate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("taxes" Data.Aeson.Types.ToJSON..=)) (ordersV2ResourceShippingCostTaxes obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON OrdersV2ResourceShippingCost where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OrdersV2ResourceShippingCost" (\obj -> ((((GHC.Base.pure OrdersV2ResourceShippingCost GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shipping_rate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "taxes"))

-- | Create a new 'OrdersV2ResourceShippingCost' with all required fields.
mkOrdersV2ResourceShippingCost ::
  -- | 'ordersV2ResourceShippingCostAmountSubtotal'
  GHC.Types.Int ->
  -- | 'ordersV2ResourceShippingCostAmountTax'
  GHC.Types.Int ->
  -- | 'ordersV2ResourceShippingCostAmountTotal'
  GHC.Types.Int ->
  OrdersV2ResourceShippingCost
mkOrdersV2ResourceShippingCost ordersV2ResourceShippingCostAmountSubtotal ordersV2ResourceShippingCostAmountTax ordersV2ResourceShippingCostAmountTotal =
  OrdersV2ResourceShippingCost
    { ordersV2ResourceShippingCostAmountSubtotal = ordersV2ResourceShippingCostAmountSubtotal,
      ordersV2ResourceShippingCostAmountTax = ordersV2ResourceShippingCostAmountTax,
      ordersV2ResourceShippingCostAmountTotal = ordersV2ResourceShippingCostAmountTotal,
      ordersV2ResourceShippingCostShippingRate = GHC.Maybe.Nothing,
      ordersV2ResourceShippingCostTaxes = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.orders_v2_resource_shipping_cost.properties.shipping_rate.anyOf@ in the specification.
--
-- The ID of the ShippingRate for this order.
data OrdersV2ResourceShippingCostShippingRate'NonNullableVariants
  = OrdersV2ResourceShippingCostShippingRate'NonNullableText Data.Text.Internal.Text
  | OrdersV2ResourceShippingCostShippingRate'NonNullableShippingRate ShippingRate
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON OrdersV2ResourceShippingCostShippingRate'NonNullableVariants where
  toJSON (OrdersV2ResourceShippingCostShippingRate'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (OrdersV2ResourceShippingCostShippingRate'NonNullableShippingRate a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON OrdersV2ResourceShippingCostShippingRate'NonNullableVariants where
  parseJSON val = case (OrdersV2ResourceShippingCostShippingRate'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((OrdersV2ResourceShippingCostShippingRate'NonNullableShippingRate Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
