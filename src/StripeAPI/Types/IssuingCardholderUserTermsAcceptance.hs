{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingCardholderUserTermsAcceptance
module StripeAPI.Types.IssuingCardholderUserTermsAcceptance where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_cardholder_user_terms_acceptance@ in the specification.
data IssuingCardholderUserTermsAcceptance = IssuingCardholderUserTermsAcceptance
  { -- | date: The Unix timestamp marking when the cardholder accepted the Authorized User Terms. Required for Celtic Spend Card users.
    issuingCardholderUserTermsAcceptanceDate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | ip: The IP address from which the cardholder accepted the Authorized User Terms. Required for Celtic Spend Card users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardholderUserTermsAcceptanceIp :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | user_agent: The user agent of the browser from which the cardholder accepted the Authorized User Terms.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardholderUserTermsAcceptanceUserAgent :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardholderUserTermsAcceptance where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("date" Data.Aeson.Types.ToJSON..=)) (issuingCardholderUserTermsAcceptanceDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip" Data.Aeson.Types.ToJSON..=)) (issuingCardholderUserTermsAcceptanceIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_agent" Data.Aeson.Types.ToJSON..=)) (issuingCardholderUserTermsAcceptanceUserAgent obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("date" Data.Aeson.Types.ToJSON..=)) (issuingCardholderUserTermsAcceptanceDate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ip" Data.Aeson.Types.ToJSON..=)) (issuingCardholderUserTermsAcceptanceIp obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("user_agent" Data.Aeson.Types.ToJSON..=)) (issuingCardholderUserTermsAcceptanceUserAgent obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderUserTermsAcceptance where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderUserTermsAcceptance" (\obj -> ((GHC.Base.pure IssuingCardholderUserTermsAcceptance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "user_agent"))

-- | Create a new 'IssuingCardholderUserTermsAcceptance' with all required fields.
mkIssuingCardholderUserTermsAcceptance :: IssuingCardholderUserTermsAcceptance
mkIssuingCardholderUserTermsAcceptance =
  IssuingCardholderUserTermsAcceptance
    { issuingCardholderUserTermsAcceptanceDate = GHC.Maybe.Nothing,
      issuingCardholderUserTermsAcceptanceIp = GHC.Maybe.Nothing,
      issuingCardholderUserTermsAcceptanceUserAgent = GHC.Maybe.Nothing
    }
