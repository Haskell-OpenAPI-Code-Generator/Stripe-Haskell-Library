{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CheckoutCardPaymentMethodOptions
module StripeAPI.Types.CheckoutCardPaymentMethodOptions where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CheckoutCardInstallmentsOptions
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.checkout_card_payment_method_options@ in the specification.
data CheckoutCardPaymentMethodOptions = CheckoutCardPaymentMethodOptions
  { -- | installments:
    checkoutCardPaymentMethodOptionsInstallments :: (GHC.Maybe.Maybe CheckoutCardInstallmentsOptions),
    -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
    --
    -- Providing this parameter will [attach the payment method](https:\/\/stripe.com\/docs\/payments\/save-during-payment) to the PaymentIntent\'s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https:\/\/stripe.com\/docs\/api\/payment_methods\/attach) to a Customer after the transaction completes.
    --
    -- When processing card payments, Stripe also uses \`setup_future_usage\` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https:\/\/stripe.com\/docs\/strong-customer-authentication).
    checkoutCardPaymentMethodOptionsSetupFutureUsage :: (GHC.Maybe.Maybe CheckoutCardPaymentMethodOptionsSetupFutureUsage'),
    -- | statement_descriptor_suffix_kana: Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKana :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | statement_descriptor_suffix_kanji: Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKanji :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutCardPaymentMethodOptions where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsInstallments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kana" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kanji" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKanji obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("installments" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsInstallments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsSetupFutureUsage obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kana" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKana obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("statement_descriptor_suffix_kanji" Data.Aeson.Types.ToJSON..=)) (checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKanji obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutCardPaymentMethodOptions where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CheckoutCardPaymentMethodOptions" (\obj -> (((GHC.Base.pure CheckoutCardPaymentMethodOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "installments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix_kana")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "statement_descriptor_suffix_kanji"))

-- | Create a new 'CheckoutCardPaymentMethodOptions' with all required fields.
mkCheckoutCardPaymentMethodOptions :: CheckoutCardPaymentMethodOptions
mkCheckoutCardPaymentMethodOptions =
  CheckoutCardPaymentMethodOptions
    { checkoutCardPaymentMethodOptionsInstallments = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsSetupFutureUsage = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKana = GHC.Maybe.Nothing,
      checkoutCardPaymentMethodOptionsStatementDescriptorSuffixKanji = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.checkout_card_payment_method_options.properties.setup_future_usage@ in the specification.
--
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
--
-- Providing this parameter will [attach the payment method](https:\/\/stripe.com\/docs\/payments\/save-during-payment) to the PaymentIntent\'s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https:\/\/stripe.com\/docs\/api\/payment_methods\/attach) to a Customer after the transaction completes.
--
-- When processing card payments, Stripe also uses \`setup_future_usage\` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https:\/\/stripe.com\/docs\/strong-customer-authentication).
data CheckoutCardPaymentMethodOptionsSetupFutureUsage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"none"@
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumNone
  | -- | Represents the JSON value @"off_session"@
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOffSession
  | -- | Represents the JSON value @"on_session"@
    CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOnSession
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CheckoutCardPaymentMethodOptionsSetupFutureUsage' where
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'Other val) = val
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumNone) = "none"
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOffSession) = "off_session"
  toJSON (CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOnSession) = "on_session"

instance Data.Aeson.Types.FromJSON.FromJSON CheckoutCardPaymentMethodOptionsSetupFutureUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "none" -> CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumNone
            | val GHC.Classes.== "off_session" -> CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOffSession
            | val GHC.Classes.== "on_session" -> CheckoutCardPaymentMethodOptionsSetupFutureUsage'EnumOnSession
            | GHC.Base.otherwise -> CheckoutCardPaymentMethodOptionsSetupFutureUsage'Other val
      )
