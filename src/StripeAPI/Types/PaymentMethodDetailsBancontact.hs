{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodDetailsBancontact
module StripeAPI.Types.PaymentMethodDetailsBancontact where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Mandate
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_details_bancontact@ in the specification.
data PaymentMethodDetailsBancontact = PaymentMethodDetailsBancontact
  { -- | bank_code: Bank code of bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsBancontactBankCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | bank_name: Name of the bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsBancontactBankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | bic: Bank Identifier Code of the bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsBancontactBic :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | generated_sepa_debit: The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    paymentMethodDetailsBancontactGeneratedSepaDebit :: (GHC.Maybe.Maybe PaymentMethodDetailsBancontactGeneratedSepaDebit'Variants),
    -- | generated_sepa_debit_mandate: The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
    paymentMethodDetailsBancontactGeneratedSepaDebitMandate :: (GHC.Maybe.Maybe PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Variants),
    -- | iban_last4: Last four characters of the IBAN.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsBancontactIbanLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | preferred_language: Preferred language of the Bancontact authorization page that the customer is redirected to.
    -- Can be one of \`en\`, \`de\`, \`fr\`, or \`nl\`
    paymentMethodDetailsBancontactPreferredLanguage :: (GHC.Maybe.Maybe PaymentMethodDetailsBancontactPreferredLanguage'),
    -- | verified_name: Owner\'s verified full name. Values are verified or provided by Bancontact directly
    -- (if supported) at the time of authorization or settlement. They cannot be set or mutated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsBancontactVerifiedName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsBancontact where
  toJSON obj = Data.Aeson.Types.Internal.object ("bank_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactBankCode obj : "bank_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactBankName obj : "bic" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactBic obj : "generated_sepa_debit" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactGeneratedSepaDebit obj : "generated_sepa_debit_mandate" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactGeneratedSepaDebitMandate obj : "iban_last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactIbanLast4 obj : "preferred_language" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactPreferredLanguage obj : "verified_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactVerifiedName obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bank_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactBankCode obj) GHC.Base.<> (("bank_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactBankName obj) GHC.Base.<> (("bic" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactBic obj) GHC.Base.<> (("generated_sepa_debit" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactGeneratedSepaDebit obj) GHC.Base.<> (("generated_sepa_debit_mandate" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactGeneratedSepaDebitMandate obj) GHC.Base.<> (("iban_last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactIbanLast4 obj) GHC.Base.<> (("preferred_language" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactPreferredLanguage obj) GHC.Base.<> ("verified_name" Data.Aeson.Types.ToJSON..= paymentMethodDetailsBancontactVerifiedName obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsBancontact where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsBancontact" (\obj -> (((((((GHC.Base.pure PaymentMethodDetailsBancontact GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bic")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "generated_sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "generated_sepa_debit_mandate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "iban_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "preferred_language")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name"))

-- | Create a new 'PaymentMethodDetailsBancontact' with all required fields.
mkPaymentMethodDetailsBancontact :: PaymentMethodDetailsBancontact
mkPaymentMethodDetailsBancontact =
  PaymentMethodDetailsBancontact
    { paymentMethodDetailsBancontactBankCode = GHC.Maybe.Nothing,
      paymentMethodDetailsBancontactBankName = GHC.Maybe.Nothing,
      paymentMethodDetailsBancontactBic = GHC.Maybe.Nothing,
      paymentMethodDetailsBancontactGeneratedSepaDebit = GHC.Maybe.Nothing,
      paymentMethodDetailsBancontactGeneratedSepaDebitMandate = GHC.Maybe.Nothing,
      paymentMethodDetailsBancontactIbanLast4 = GHC.Maybe.Nothing,
      paymentMethodDetailsBancontactPreferredLanguage = GHC.Maybe.Nothing,
      paymentMethodDetailsBancontactVerifiedName = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.payment_method_details_bancontact.properties.generated_sepa_debit.anyOf@ in the specification.
--
-- The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
data PaymentMethodDetailsBancontactGeneratedSepaDebit'Variants
  = PaymentMethodDetailsBancontactGeneratedSepaDebit'Text Data.Text.Internal.Text
  | PaymentMethodDetailsBancontactGeneratedSepaDebit'PaymentMethod PaymentMethod
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsBancontactGeneratedSepaDebit'Variants where
  toJSON (PaymentMethodDetailsBancontactGeneratedSepaDebit'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentMethodDetailsBancontactGeneratedSepaDebit'PaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsBancontactGeneratedSepaDebit'Variants where
  parseJSON val = case (PaymentMethodDetailsBancontactGeneratedSepaDebit'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentMethodDetailsBancontactGeneratedSepaDebit'PaymentMethod Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.payment_method_details_bancontact.properties.generated_sepa_debit_mandate.anyOf@ in the specification.
--
-- The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
data PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Variants
  = PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Text Data.Text.Internal.Text
  | PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Mandate Mandate
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Variants where
  toJSON (PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Mandate a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Variants where
  parseJSON val = case (PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentMethodDetailsBancontactGeneratedSepaDebitMandate'Mandate Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.payment_method_details_bancontact.properties.preferred_language@ in the specification.
--
-- Preferred language of the Bancontact authorization page that the customer is redirected to.
-- Can be one of \`en\`, \`de\`, \`fr\`, or \`nl\`
data PaymentMethodDetailsBancontactPreferredLanguage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentMethodDetailsBancontactPreferredLanguage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentMethodDetailsBancontactPreferredLanguage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"de"@
    PaymentMethodDetailsBancontactPreferredLanguage'EnumDe
  | -- | Represents the JSON value @"en"@
    PaymentMethodDetailsBancontactPreferredLanguage'EnumEn
  | -- | Represents the JSON value @"fr"@
    PaymentMethodDetailsBancontactPreferredLanguage'EnumFr
  | -- | Represents the JSON value @"nl"@
    PaymentMethodDetailsBancontactPreferredLanguage'EnumNl
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsBancontactPreferredLanguage' where
  toJSON (PaymentMethodDetailsBancontactPreferredLanguage'Other val) = val
  toJSON (PaymentMethodDetailsBancontactPreferredLanguage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentMethodDetailsBancontactPreferredLanguage'EnumDe) = "de"
  toJSON (PaymentMethodDetailsBancontactPreferredLanguage'EnumEn) = "en"
  toJSON (PaymentMethodDetailsBancontactPreferredLanguage'EnumFr) = "fr"
  toJSON (PaymentMethodDetailsBancontactPreferredLanguage'EnumNl) = "nl"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsBancontactPreferredLanguage' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "de" -> PaymentMethodDetailsBancontactPreferredLanguage'EnumDe
            | val GHC.Classes.== "en" -> PaymentMethodDetailsBancontactPreferredLanguage'EnumEn
            | val GHC.Classes.== "fr" -> PaymentMethodDetailsBancontactPreferredLanguage'EnumFr
            | val GHC.Classes.== "nl" -> PaymentMethodDetailsBancontactPreferredLanguage'EnumNl
            | GHC.Base.otherwise -> PaymentMethodDetailsBancontactPreferredLanguage'Other val
      )
