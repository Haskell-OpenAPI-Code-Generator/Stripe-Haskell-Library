{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema OrderReturn
module StripeAPI.Types.OrderReturn where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Order
import {-# SOURCE #-} StripeAPI.Types.OrderItem
import {-# SOURCE #-} StripeAPI.Types.Refund
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.order_return@ in the specification.
--
-- A return represents the full or partial return of a number of [order items](https:\/\/stripe.com\/docs\/api\#order_items).
-- Returns always belong to an order, and may optionally contain a refund.
--
-- Related guide: [Handling Returns](https:\/\/stripe.com\/docs\/orders\/guide\#handling-returns).
data OrderReturn = OrderReturn
  { -- | amount: A positive integer in the smallest currency unit (that is, 100 cents for \$1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item.
    orderReturnAmount :: GHC.Types.Int,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    orderReturnCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    orderReturnCurrency :: Data.Text.Internal.Text,
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    orderReturnId :: Data.Text.Internal.Text,
    -- | items: The items included in this order return.
    orderReturnItems :: ([OrderItem]),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    orderReturnLivemode :: GHC.Types.Bool,
    -- | order: The order that this return includes items from.
    orderReturnOrder :: (GHC.Maybe.Maybe OrderReturnOrder'Variants),
    -- | refund: The ID of the refund issued for this return.
    orderReturnRefund :: (GHC.Maybe.Maybe OrderReturnRefund'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON OrderReturn where
  toJSON obj = Data.Aeson.Types.Internal.object ("amount" Data.Aeson.Types.ToJSON..= orderReturnAmount obj : "created" Data.Aeson.Types.ToJSON..= orderReturnCreated obj : "currency" Data.Aeson.Types.ToJSON..= orderReturnCurrency obj : "id" Data.Aeson.Types.ToJSON..= orderReturnId obj : "items" Data.Aeson.Types.ToJSON..= orderReturnItems obj : "livemode" Data.Aeson.Types.ToJSON..= orderReturnLivemode obj : "order" Data.Aeson.Types.ToJSON..= orderReturnOrder obj : "refund" Data.Aeson.Types.ToJSON..= orderReturnRefund obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "order_return" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("amount" Data.Aeson.Types.ToJSON..= orderReturnAmount obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= orderReturnCreated obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= orderReturnCurrency obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= orderReturnId obj) GHC.Base.<> (("items" Data.Aeson.Types.ToJSON..= orderReturnItems obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= orderReturnLivemode obj) GHC.Base.<> (("order" Data.Aeson.Types.ToJSON..= orderReturnOrder obj) GHC.Base.<> (("refund" Data.Aeson.Types.ToJSON..= orderReturnRefund obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "order_return")))))))))

instance Data.Aeson.Types.FromJSON.FromJSON OrderReturn where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "OrderReturn" (\obj -> (((((((GHC.Base.pure OrderReturn GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund"))

-- | Create a new 'OrderReturn' with all required fields.
mkOrderReturn ::
  -- | 'orderReturnAmount'
  GHC.Types.Int ->
  -- | 'orderReturnCreated'
  GHC.Types.Int ->
  -- | 'orderReturnCurrency'
  Data.Text.Internal.Text ->
  -- | 'orderReturnId'
  Data.Text.Internal.Text ->
  -- | 'orderReturnItems'
  [OrderItem] ->
  -- | 'orderReturnLivemode'
  GHC.Types.Bool ->
  OrderReturn
mkOrderReturn orderReturnAmount orderReturnCreated orderReturnCurrency orderReturnId orderReturnItems orderReturnLivemode =
  OrderReturn
    { orderReturnAmount = orderReturnAmount,
      orderReturnCreated = orderReturnCreated,
      orderReturnCurrency = orderReturnCurrency,
      orderReturnId = orderReturnId,
      orderReturnItems = orderReturnItems,
      orderReturnLivemode = orderReturnLivemode,
      orderReturnOrder = GHC.Maybe.Nothing,
      orderReturnRefund = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.order_return.properties.order.anyOf@ in the specification.
--
-- The order that this return includes items from.
data OrderReturnOrder'Variants
  = OrderReturnOrder'Text Data.Text.Internal.Text
  | OrderReturnOrder'Order Order
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON OrderReturnOrder'Variants where
  toJSON (OrderReturnOrder'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (OrderReturnOrder'Order a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON OrderReturnOrder'Variants where
  parseJSON val = case (OrderReturnOrder'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((OrderReturnOrder'Order Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.order_return.properties.refund.anyOf@ in the specification.
--
-- The ID of the refund issued for this return.
data OrderReturnRefund'Variants
  = OrderReturnRefund'Text Data.Text.Internal.Text
  | OrderReturnRefund'Refund Refund
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON OrderReturnRefund'Variants where
  toJSON (OrderReturnRefund'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (OrderReturnRefund'Refund a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON OrderReturnRefund'Variants where
  parseJSON val = case (OrderReturnRefund'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((OrderReturnRefund'Refund Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
