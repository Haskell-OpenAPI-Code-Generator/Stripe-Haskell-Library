{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema RefundNextAction
module StripeAPI.Types.RefundNextAction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.EmailSent
import {-# SOURCE #-} StripeAPI.Types.RefundNextActionDisplayDetails
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.refund_next_action@ in the specification.
data RefundNextAction = RefundNextAction
  { -- | display_details: Contains the refund details.
    refundNextActionDisplayDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable RefundNextActionDisplayDetails'NonNullable)),
    -- | type: Type of the next action to perform.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    refundNextActionType :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON RefundNextAction where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_details" Data.Aeson.Types.ToJSON..=)) (refundNextActionDisplayDetails obj) : ["type" Data.Aeson.Types.ToJSON..= refundNextActionType obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("display_details" Data.Aeson.Types.ToJSON..=)) (refundNextActionDisplayDetails obj) : ["type" Data.Aeson.Types.ToJSON..= refundNextActionType obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON RefundNextAction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "RefundNextAction" (\obj -> (GHC.Base.pure RefundNextAction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "display_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'RefundNextAction' with all required fields.
mkRefundNextAction ::
  -- | 'refundNextActionType'
  Data.Text.Internal.Text ->
  RefundNextAction
mkRefundNextAction refundNextActionType =
  RefundNextAction
    { refundNextActionDisplayDetails = GHC.Maybe.Nothing,
      refundNextActionType = refundNextActionType
    }

-- | Defines the object schema located at @components.schemas.refund_next_action.properties.display_details.anyOf@ in the specification.
--
-- Contains the refund details.
data RefundNextActionDisplayDetails'NonNullable = RefundNextActionDisplayDetails'NonNullable
  { -- | email_sent:
    refundNextActionDisplayDetails'NonNullableEmailSent :: (GHC.Maybe.Maybe EmailSent),
    -- | expires_at: The expiry timestamp.
    refundNextActionDisplayDetails'NonNullableExpiresAt :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON RefundNextActionDisplayDetails'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email_sent" Data.Aeson.Types.ToJSON..=)) (refundNextActionDisplayDetails'NonNullableEmailSent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (refundNextActionDisplayDetails'NonNullableExpiresAt obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("email_sent" Data.Aeson.Types.ToJSON..=)) (refundNextActionDisplayDetails'NonNullableEmailSent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("expires_at" Data.Aeson.Types.ToJSON..=)) (refundNextActionDisplayDetails'NonNullableExpiresAt obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON RefundNextActionDisplayDetails'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "RefundNextActionDisplayDetails'NonNullable" (\obj -> (GHC.Base.pure RefundNextActionDisplayDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "email_sent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "expires_at"))

-- | Create a new 'RefundNextActionDisplayDetails'NonNullable' with all required fields.
mkRefundNextActionDisplayDetails'NonNullable :: RefundNextActionDisplayDetails'NonNullable
mkRefundNextActionDisplayDetails'NonNullable =
  RefundNextActionDisplayDetails'NonNullable
    { refundNextActionDisplayDetails'NonNullableEmailSent = GHC.Maybe.Nothing,
      refundNextActionDisplayDetails'NonNullableExpiresAt = GHC.Maybe.Nothing
    }
