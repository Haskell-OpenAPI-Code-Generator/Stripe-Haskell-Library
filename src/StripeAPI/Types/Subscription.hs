{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Subscription
module StripeAPI.Types.Subscription where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.AlipayAccount
import {-# SOURCE #-} StripeAPI.Types.BankAccount
import {-# SOURCE #-} StripeAPI.Types.BitcoinReceiver
import {-# SOURCE #-} StripeAPI.Types.Card
import {-# SOURCE #-} StripeAPI.Types.Coupon
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.DeletedProduct
import {-# SOURCE #-} StripeAPI.Types.Discount
import {-# SOURCE #-} StripeAPI.Types.Invoice
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import {-# SOURCE #-} StripeAPI.Types.Plan
import {-# SOURCE #-} StripeAPI.Types.PlanTier
import {-# SOURCE #-} StripeAPI.Types.Product
import {-# SOURCE #-} StripeAPI.Types.SetupIntent
import {-# SOURCE #-} StripeAPI.Types.Source
import {-# SOURCE #-} StripeAPI.Types.SubscriptionBillingThresholds
import {-# SOURCE #-} StripeAPI.Types.SubscriptionItem
import {-# SOURCE #-} StripeAPI.Types.SubscriptionPendingInvoiceItemInterval
import {-# SOURCE #-} StripeAPI.Types.SubscriptionSchedule
import {-# SOURCE #-} StripeAPI.Types.SubscriptionsResourcePendingUpdate
import {-# SOURCE #-} StripeAPI.Types.TaxRate
import {-# SOURCE #-} StripeAPI.Types.TransformUsage
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema subscription
--
-- Subscriptions allow you to charge a customer on a recurring basis.
--
-- Related guide: [Creating Subscriptions](https:\/\/stripe.com\/docs\/billing\/subscriptions\/creating).
data Subscription
  = Subscription
      { -- | application_fee_percent: A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner\'s Stripe account.
        subscriptionApplicationFeePercent :: (GHC.Maybe.Maybe GHC.Types.Double),
        -- | billing_cycle_anchor: Determines the date of the first full invoice, and, for plans with \`month\` or \`year\` intervals, the day of the month for subsequent invoices.
        subscriptionBillingCycleAnchor :: GHC.Types.Int,
        -- | billing_thresholds: Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
        subscriptionBillingThresholds :: (GHC.Maybe.Maybe SubscriptionBillingThresholds'),
        -- | cancel_at: A date in the future at which the subscription will automatically get canceled
        subscriptionCancelAt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | cancel_at_period_end: If the subscription has been canceled with the \`at_period_end\` flag set to \`true\`, \`cancel_at_period_end\` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.
        subscriptionCancelAtPeriodEnd :: GHC.Types.Bool,
        -- | canceled_at: If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with \`cancel_at_period_end\`, \`canceled_at\` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
        subscriptionCanceledAt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | collection_method: Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
        subscriptionCollectionMethod :: (GHC.Maybe.Maybe SubscriptionCollectionMethod'),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        subscriptionCreated :: GHC.Types.Int,
        -- | current_period_end: End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
        subscriptionCurrentPeriodEnd :: GHC.Types.Int,
        -- | current_period_start: Start of the current period that the subscription has been invoiced for.
        subscriptionCurrentPeriodStart :: GHC.Types.Int,
        -- | customer: ID of the customer who owns the subscription.
        subscriptionCustomer :: SubscriptionCustomer'Variants,
        -- | days_until_due: Number of days a customer has to pay invoices generated by this subscription. This value will be \`null\` for subscriptions where \`collection_method=charge_automatically\`.
        subscriptionDaysUntilDue :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | default_payment_method: ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer\'s invoice settings.
        subscriptionDefaultPaymentMethod :: (GHC.Maybe.Maybe SubscriptionDefaultPaymentMethod'Variants),
        -- | default_source: ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer\'s default source.
        subscriptionDefaultSource :: (GHC.Maybe.Maybe SubscriptionDefaultSource'Variants),
        -- | default_tax_rates: The tax rates that will apply to any subscription item that does not have \`tax_rates\` set. Invoices created will have their \`default_tax_rates\` populated from the subscription.
        subscriptionDefaultTaxRates :: (GHC.Maybe.Maybe ([TaxRate])),
        -- | discount: Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
        subscriptionDiscount :: (GHC.Maybe.Maybe SubscriptionDiscount'),
        -- | ended_at: If the subscription has ended, the date the subscription ended.
        subscriptionEndedAt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        subscriptionId :: Data.Text.Internal.Text,
        -- | items: List of subscription items, each with an attached plan.
        subscriptionItems :: SubscriptionItems',
        -- | latest_invoice: The most recent invoice this subscription has generated.
        subscriptionLatestInvoice :: (GHC.Maybe.Maybe SubscriptionLatestInvoice'Variants),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        subscriptionLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        subscriptionMetadata :: Data.Aeson.Types.Internal.Object,
        -- | next_pending_invoice_item_invoice: Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at \`pending_invoice_item_interval\`.
        subscriptionNextPendingInvoiceItemInvoice :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        subscriptionObject :: SubscriptionObject',
        -- | pending_invoice_item_interval: Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https:\/\/stripe.com\/docs\/api\#create_invoice) for the given subscription at the specified interval.
        subscriptionPendingInvoiceItemInterval :: (GHC.Maybe.Maybe SubscriptionPendingInvoiceItemInterval'),
        -- | pending_setup_intent: You can use this [SetupIntent](https:\/\/stripe.com\/docs\/api\/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription\'s payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https:\/\/stripe.com\/docs\/billing\/migration\/strong-customer-authentication\#scenario-2).
        subscriptionPendingSetupIntent :: (GHC.Maybe.Maybe SubscriptionPendingSetupIntent'Variants),
        -- | pending_update: If specified, [pending updates](https:\/\/stripe.com\/docs\/billing\/subscriptions\/pending-updates) that will be applied to the subscription once the \`latest_invoice\` has been paid.
        subscriptionPendingUpdate :: (GHC.Maybe.Maybe SubscriptionPendingUpdate'),
        -- | plan: Hash describing the plan the customer is subscribed to. Only set if the subscription contains a single plan.
        subscriptionPlan :: (GHC.Maybe.Maybe SubscriptionPlan'),
        -- | quantity: The quantity of the plan to which the customer is subscribed. For example, if your plan is \$10\/user\/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged \$50 (5 x \$10) monthly. Only set if the subscription contains a single plan.
        subscriptionQuantity :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | schedule: The schedule attached to the subscription
        subscriptionSchedule :: (GHC.Maybe.Maybe SubscriptionSchedule'Variants),
        -- | start_date: Date when the subscription was first created. The date might differ from the \`created\` date due to backdating.
        subscriptionStartDate :: GHC.Types.Int,
        -- | status: Possible values are \`incomplete\`, \`incomplete_expired\`, \`trialing\`, \`active\`, \`past_due\`, \`canceled\`, or \`unpaid\`.
        --
        -- For \`collection_method=charge_automatically\` a subscription moves into \`incomplete\` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an \`active\` state. If the first invoice is not paid within 23 hours, the subscription transitions to \`incomplete_expired\`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
        --
        -- A subscription that is currently in a trial period is \`trialing\` and moves to \`active\` when the trial period is over.
        --
        -- If subscription \`collection_method=charge_automatically\` it becomes \`past_due\` when payment to renew it fails and \`canceled\` or \`unpaid\` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
        --
        -- If subscription \`collection_method=send_invoice\` it becomes \`past_due\` when its invoice is not paid by the due date, and \`canceled\` or \`unpaid\` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of \`unpaid\`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
        subscriptionStatus :: SubscriptionStatus',
        -- | tax_percent: If provided, each invoice created by this subscription will apply the tax rate, increasing the amount billed to the customer.
        subscriptionTaxPercent :: (GHC.Maybe.Maybe GHC.Types.Double),
        -- | trial_end: If the subscription has a trial, the end of that trial.
        subscriptionTrialEnd :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | trial_start: If the subscription has a trial, the beginning of that trial.
        subscriptionTrialStart :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Subscription where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "application_fee_percent" (subscriptionApplicationFeePercent obj) : (Data.Aeson..=) "billing_cycle_anchor" (subscriptionBillingCycleAnchor obj) : (Data.Aeson..=) "billing_thresholds" (subscriptionBillingThresholds obj) : (Data.Aeson..=) "cancel_at" (subscriptionCancelAt obj) : (Data.Aeson..=) "cancel_at_period_end" (subscriptionCancelAtPeriodEnd obj) : (Data.Aeson..=) "canceled_at" (subscriptionCanceledAt obj) : (Data.Aeson..=) "collection_method" (subscriptionCollectionMethod obj) : (Data.Aeson..=) "created" (subscriptionCreated obj) : (Data.Aeson..=) "current_period_end" (subscriptionCurrentPeriodEnd obj) : (Data.Aeson..=) "current_period_start" (subscriptionCurrentPeriodStart obj) : (Data.Aeson..=) "customer" (subscriptionCustomer obj) : (Data.Aeson..=) "days_until_due" (subscriptionDaysUntilDue obj) : (Data.Aeson..=) "default_payment_method" (subscriptionDefaultPaymentMethod obj) : (Data.Aeson..=) "default_source" (subscriptionDefaultSource obj) : (Data.Aeson..=) "default_tax_rates" (subscriptionDefaultTaxRates obj) : (Data.Aeson..=) "discount" (subscriptionDiscount obj) : (Data.Aeson..=) "ended_at" (subscriptionEndedAt obj) : (Data.Aeson..=) "id" (subscriptionId obj) : (Data.Aeson..=) "items" (subscriptionItems obj) : (Data.Aeson..=) "latest_invoice" (subscriptionLatestInvoice obj) : (Data.Aeson..=) "livemode" (subscriptionLivemode obj) : (Data.Aeson..=) "metadata" (subscriptionMetadata obj) : (Data.Aeson..=) "next_pending_invoice_item_invoice" (subscriptionNextPendingInvoiceItemInvoice obj) : (Data.Aeson..=) "object" (subscriptionObject obj) : (Data.Aeson..=) "pending_invoice_item_interval" (subscriptionPendingInvoiceItemInterval obj) : (Data.Aeson..=) "pending_setup_intent" (subscriptionPendingSetupIntent obj) : (Data.Aeson..=) "pending_update" (subscriptionPendingUpdate obj) : (Data.Aeson..=) "plan" (subscriptionPlan obj) : (Data.Aeson..=) "quantity" (subscriptionQuantity obj) : (Data.Aeson..=) "schedule" (subscriptionSchedule obj) : (Data.Aeson..=) "start_date" (subscriptionStartDate obj) : (Data.Aeson..=) "status" (subscriptionStatus obj) : (Data.Aeson..=) "tax_percent" (subscriptionTaxPercent obj) : (Data.Aeson..=) "trial_end" (subscriptionTrialEnd obj) : (Data.Aeson..=) "trial_start" (subscriptionTrialStart obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "application_fee_percent" (subscriptionApplicationFeePercent obj) GHC.Base.<> ((Data.Aeson..=) "billing_cycle_anchor" (subscriptionBillingCycleAnchor obj) GHC.Base.<> ((Data.Aeson..=) "billing_thresholds" (subscriptionBillingThresholds obj) GHC.Base.<> ((Data.Aeson..=) "cancel_at" (subscriptionCancelAt obj) GHC.Base.<> ((Data.Aeson..=) "cancel_at_period_end" (subscriptionCancelAtPeriodEnd obj) GHC.Base.<> ((Data.Aeson..=) "canceled_at" (subscriptionCanceledAt obj) GHC.Base.<> ((Data.Aeson..=) "collection_method" (subscriptionCollectionMethod obj) GHC.Base.<> ((Data.Aeson..=) "created" (subscriptionCreated obj) GHC.Base.<> ((Data.Aeson..=) "current_period_end" (subscriptionCurrentPeriodEnd obj) GHC.Base.<> ((Data.Aeson..=) "current_period_start" (subscriptionCurrentPeriodStart obj) GHC.Base.<> ((Data.Aeson..=) "customer" (subscriptionCustomer obj) GHC.Base.<> ((Data.Aeson..=) "days_until_due" (subscriptionDaysUntilDue obj) GHC.Base.<> ((Data.Aeson..=) "default_payment_method" (subscriptionDefaultPaymentMethod obj) GHC.Base.<> ((Data.Aeson..=) "default_source" (subscriptionDefaultSource obj) GHC.Base.<> ((Data.Aeson..=) "default_tax_rates" (subscriptionDefaultTaxRates obj) GHC.Base.<> ((Data.Aeson..=) "discount" (subscriptionDiscount obj) GHC.Base.<> ((Data.Aeson..=) "ended_at" (subscriptionEndedAt obj) GHC.Base.<> ((Data.Aeson..=) "id" (subscriptionId obj) GHC.Base.<> ((Data.Aeson..=) "items" (subscriptionItems obj) GHC.Base.<> ((Data.Aeson..=) "latest_invoice" (subscriptionLatestInvoice obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (subscriptionLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (subscriptionMetadata obj) GHC.Base.<> ((Data.Aeson..=) "next_pending_invoice_item_invoice" (subscriptionNextPendingInvoiceItemInvoice obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionObject obj) GHC.Base.<> ((Data.Aeson..=) "pending_invoice_item_interval" (subscriptionPendingInvoiceItemInterval obj) GHC.Base.<> ((Data.Aeson..=) "pending_setup_intent" (subscriptionPendingSetupIntent obj) GHC.Base.<> ((Data.Aeson..=) "pending_update" (subscriptionPendingUpdate obj) GHC.Base.<> ((Data.Aeson..=) "plan" (subscriptionPlan obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (subscriptionQuantity obj) GHC.Base.<> ((Data.Aeson..=) "schedule" (subscriptionSchedule obj) GHC.Base.<> ((Data.Aeson..=) "start_date" (subscriptionStartDate obj) GHC.Base.<> ((Data.Aeson..=) "status" (subscriptionStatus obj) GHC.Base.<> ((Data.Aeson..=) "tax_percent" (subscriptionTaxPercent obj) GHC.Base.<> ((Data.Aeson..=) "trial_end" (subscriptionTrialEnd obj) GHC.Base.<> (Data.Aeson..=) "trial_start" (subscriptionTrialStart obj)))))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Subscription where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Subscription" (\obj -> ((((((((((((((((((((((((((((((((((GHC.Base.pure Subscription GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "application_fee_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "billing_cycle_anchor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_thresholds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cancel_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cancel_at_period_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "canceled_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "current_period_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "current_period_start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "days_until_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "discount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ended_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "latest_invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "next_pending_invoice_item_invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pending_invoice_item_interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pending_setup_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "pending_update")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "schedule")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "start_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_start"))

-- | Defines the data type for the schema subscriptionBilling_thresholds\'
--
-- Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
data SubscriptionBillingThresholds'
  = SubscriptionBillingThresholds'
      { -- | amount_gte: Monetary threshold that triggers the subscription to create an invoice
        subscriptionBillingThresholds'AmountGte :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | reset_billing_cycle_anchor: Indicates if the \`billing_cycle_anchor\` should be reset when a threshold is reached. If true, \`billing_cycle_anchor\` will be updated to the date\/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be \`true\` if the subscription contains items with plans that have \`aggregate_usage=last_ever\`.
        subscriptionBillingThresholds'ResetBillingCycleAnchor :: (GHC.Maybe.Maybe GHC.Types.Bool)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionBillingThresholds' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount_gte" (subscriptionBillingThresholds'AmountGte obj) : (Data.Aeson..=) "reset_billing_cycle_anchor" (subscriptionBillingThresholds'ResetBillingCycleAnchor obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount_gte" (subscriptionBillingThresholds'AmountGte obj) GHC.Base.<> (Data.Aeson..=) "reset_billing_cycle_anchor" (subscriptionBillingThresholds'ResetBillingCycleAnchor obj))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionBillingThresholds' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionBillingThresholds'" (\obj -> (GHC.Base.pure SubscriptionBillingThresholds' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_gte")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reset_billing_cycle_anchor"))

-- | Defines the enum schema subscriptionCollection_method\'
--
-- Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
data SubscriptionCollectionMethod'
  = SubscriptionCollectionMethod'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionCollectionMethod'EnumTyped Data.Text.Internal.Text
  | SubscriptionCollectionMethod'EnumStringChargeAutomatically
  | SubscriptionCollectionMethod'EnumStringSendInvoice
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionCollectionMethod' where
  toJSON (SubscriptionCollectionMethod'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionCollectionMethod'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionCollectionMethod'EnumStringChargeAutomatically) = "charge_automatically"
  toJSON (SubscriptionCollectionMethod'EnumStringSendInvoice) = "send_invoice"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionCollectionMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "charge_automatically" -> SubscriptionCollectionMethod'EnumStringChargeAutomatically
            | val GHC.Classes.== "send_invoice" -> SubscriptionCollectionMethod'EnumStringSendInvoice
            | GHC.Base.otherwise -> SubscriptionCollectionMethod'EnumOther val
      )

-- | Define the one-of schema subscriptionCustomer\'
--
-- ID of the customer who owns the subscription.
data SubscriptionCustomer'Variants
  = SubscriptionCustomer'Customer Customer
  | SubscriptionCustomer'DeletedCustomer DeletedCustomer
  | SubscriptionCustomer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionCustomer'Variants where
  toJSON (SubscriptionCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionCustomer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionCustomer'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionCustomer'Customer a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionCustomer'DeletedCustomer a
      Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
        Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionCustomer'Text a
        Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema subscriptionDefault_payment_method\'
--
-- ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer\'s invoice settings.
data SubscriptionDefaultPaymentMethod'Variants
  = SubscriptionDefaultPaymentMethod'PaymentMethod PaymentMethod
  | SubscriptionDefaultPaymentMethod'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionDefaultPaymentMethod'Variants where
  toJSON (SubscriptionDefaultPaymentMethod'PaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionDefaultPaymentMethod'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionDefaultPaymentMethod'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDefaultPaymentMethod'PaymentMethod a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDefaultPaymentMethod'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema subscriptionDefault_source\'
--
-- ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer\'s default source.
data SubscriptionDefaultSource'Variants
  = SubscriptionDefaultSource'AlipayAccount AlipayAccount
  | SubscriptionDefaultSource'BankAccount BankAccount
  | SubscriptionDefaultSource'BitcoinReceiver BitcoinReceiver
  | SubscriptionDefaultSource'Card Card
  | SubscriptionDefaultSource'Source Source
  | SubscriptionDefaultSource'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionDefaultSource'Variants where
  toJSON (SubscriptionDefaultSource'AlipayAccount a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionDefaultSource'BankAccount a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionDefaultSource'BitcoinReceiver a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionDefaultSource'Card a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionDefaultSource'Source a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionDefaultSource'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionDefaultSource'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDefaultSource'AlipayAccount a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDefaultSource'BankAccount a
      Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
        Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDefaultSource'BitcoinReceiver a
        Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
          Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDefaultSource'Card a
          Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
            Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDefaultSource'Source a
            Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDefaultSource'Text a
              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema subscriptionDiscount\'
--
-- Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis.
data SubscriptionDiscount'
  = SubscriptionDiscount'
      { -- | coupon: A coupon contains information about a percent-off or amount-off discount you
        -- might want to apply to a customer. Coupons may be applied to [invoices](https:\/\/stripe.com\/docs\/api\#invoices) or
        -- [orders](https:\/\/stripe.com\/docs\/api\#create_order-coupon). Coupons do not work with conventional one-off [charges](https:\/\/stripe.com\/docs\/api\#create_charge).
        subscriptionDiscount'Coupon :: (GHC.Maybe.Maybe Coupon),
        -- | customer: The ID of the customer associated with this discount.
        subscriptionDiscount'Customer :: (GHC.Maybe.Maybe SubscriptionDiscount'Customer'Variants),
        -- | end: If the coupon has a duration of \`repeating\`, the date that this discount will end. If the coupon has a duration of \`once\` or \`forever\`, this attribute will be null.
        subscriptionDiscount'End :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        subscriptionDiscount'Object :: (GHC.Maybe.Maybe SubscriptionDiscount'Object'),
        -- | start: Date that the coupon was applied.
        subscriptionDiscount'Start :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | subscription: The subscription that this coupon is applied to, if it is applied to a particular subscription.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        subscriptionDiscount'Subscription :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionDiscount' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "coupon" (subscriptionDiscount'Coupon obj) : (Data.Aeson..=) "customer" (subscriptionDiscount'Customer obj) : (Data.Aeson..=) "end" (subscriptionDiscount'End obj) : (Data.Aeson..=) "object" (subscriptionDiscount'Object obj) : (Data.Aeson..=) "start" (subscriptionDiscount'Start obj) : (Data.Aeson..=) "subscription" (subscriptionDiscount'Subscription obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "coupon" (subscriptionDiscount'Coupon obj) GHC.Base.<> ((Data.Aeson..=) "customer" (subscriptionDiscount'Customer obj) GHC.Base.<> ((Data.Aeson..=) "end" (subscriptionDiscount'End obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionDiscount'Object obj) GHC.Base.<> ((Data.Aeson..=) "start" (subscriptionDiscount'Start obj) GHC.Base.<> (Data.Aeson..=) "subscription" (subscriptionDiscount'Subscription obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionDiscount' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionDiscount'" (\obj -> (((((GHC.Base.pure SubscriptionDiscount' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "coupon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription"))

-- | Define the one-of schema subscriptionDiscount\'Customer\'
--
-- The ID of the customer associated with this discount.
data SubscriptionDiscount'Customer'Variants
  = SubscriptionDiscount'Customer'Customer Customer
  | SubscriptionDiscount'Customer'DeletedCustomer DeletedCustomer
  | SubscriptionDiscount'Customer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionDiscount'Customer'Variants where
  toJSON (SubscriptionDiscount'Customer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionDiscount'Customer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionDiscount'Customer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionDiscount'Customer'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDiscount'Customer'Customer a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDiscount'Customer'DeletedCustomer a
      Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
        Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionDiscount'Customer'Text a
        Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema subscriptionDiscount\'Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data SubscriptionDiscount'Object'
  = SubscriptionDiscount'Object'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionDiscount'Object'EnumTyped Data.Text.Internal.Text
  | SubscriptionDiscount'Object'EnumStringDiscount
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionDiscount'Object' where
  toJSON (SubscriptionDiscount'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionDiscount'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionDiscount'Object'EnumStringDiscount) = "discount"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionDiscount'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "discount" -> SubscriptionDiscount'Object'EnumStringDiscount
            | GHC.Base.otherwise -> SubscriptionDiscount'Object'EnumOther val
      )

-- | Defines the data type for the schema subscriptionItems\'
--
-- List of subscription items, each with an attached plan.
data SubscriptionItems'
  = SubscriptionItems'
      { -- | data: Details about each object.
        subscriptionItems'Data :: ([SubscriptionItem]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        subscriptionItems'HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        subscriptionItems'Object :: SubscriptionItems'Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        subscriptionItems'Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionItems' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (subscriptionItems'Data obj) : (Data.Aeson..=) "has_more" (subscriptionItems'HasMore obj) : (Data.Aeson..=) "object" (subscriptionItems'Object obj) : (Data.Aeson..=) "url" (subscriptionItems'Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (subscriptionItems'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (subscriptionItems'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionItems'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (subscriptionItems'Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionItems' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionItems'" (\obj -> (((GHC.Base.pure SubscriptionItems' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema subscriptionItems\'Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data SubscriptionItems'Object'
  = SubscriptionItems'Object'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionItems'Object'EnumTyped Data.Text.Internal.Text
  | SubscriptionItems'Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionItems'Object' where
  toJSON (SubscriptionItems'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionItems'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionItems'Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionItems'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> SubscriptionItems'Object'EnumStringList
            | GHC.Base.otherwise -> SubscriptionItems'Object'EnumOther val
      )

-- | Define the one-of schema subscriptionLatest_invoice\'
--
-- The most recent invoice this subscription has generated.
data SubscriptionLatestInvoice'Variants
  = SubscriptionLatestInvoice'Invoice Invoice
  | SubscriptionLatestInvoice'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionLatestInvoice'Variants where
  toJSON (SubscriptionLatestInvoice'Invoice a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionLatestInvoice'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionLatestInvoice'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionLatestInvoice'Invoice a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionLatestInvoice'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema subscriptionObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data SubscriptionObject'
  = SubscriptionObject'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionObject'EnumTyped Data.Text.Internal.Text
  | SubscriptionObject'EnumStringSubscription
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionObject' where
  toJSON (SubscriptionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionObject'EnumStringSubscription) = "subscription"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "subscription" -> SubscriptionObject'EnumStringSubscription
            | GHC.Base.otherwise -> SubscriptionObject'EnumOther val
      )

-- | Defines the data type for the schema subscriptionPending_invoice_item_interval\'
--
-- Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https:\\\/\\\/stripe.com\\\/docs\\\/api\\\#create_invoice) for the given subscription at the specified interval.
data SubscriptionPendingInvoiceItemInterval'
  = SubscriptionPendingInvoiceItemInterval'
      { -- | interval: Specifies invoicing frequency. Either \`day\`, \`week\`, \`month\` or \`year\`.
        subscriptionPendingInvoiceItemInterval'Interval :: (GHC.Maybe.Maybe SubscriptionPendingInvoiceItemInterval'Interval'),
        -- | interval_count: The number of intervals between invoices. For example, \`interval=month\` and \`interval_count=3\` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
        subscriptionPendingInvoiceItemInterval'IntervalCount :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPendingInvoiceItemInterval' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "interval" (subscriptionPendingInvoiceItemInterval'Interval obj) : (Data.Aeson..=) "interval_count" (subscriptionPendingInvoiceItemInterval'IntervalCount obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "interval" (subscriptionPendingInvoiceItemInterval'Interval obj) GHC.Base.<> (Data.Aeson..=) "interval_count" (subscriptionPendingInvoiceItemInterval'IntervalCount obj))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPendingInvoiceItemInterval' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPendingInvoiceItemInterval'" (\obj -> (GHC.Base.pure SubscriptionPendingInvoiceItemInterval' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_count"))

-- | Defines the enum schema subscriptionPending_invoice_item_interval\'Interval\'
--
-- Specifies invoicing frequency. Either \`day\`, \`week\`, \`month\` or \`year\`.
data SubscriptionPendingInvoiceItemInterval'Interval'
  = SubscriptionPendingInvoiceItemInterval'Interval'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionPendingInvoiceItemInterval'Interval'EnumTyped Data.Text.Internal.Text
  | SubscriptionPendingInvoiceItemInterval'Interval'EnumStringDay
  | SubscriptionPendingInvoiceItemInterval'Interval'EnumStringMonth
  | SubscriptionPendingInvoiceItemInterval'Interval'EnumStringWeek
  | SubscriptionPendingInvoiceItemInterval'Interval'EnumStringYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPendingInvoiceItemInterval'Interval' where
  toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumStringDay) = "day"
  toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumStringMonth) = "month"
  toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumStringWeek) = "week"
  toJSON (SubscriptionPendingInvoiceItemInterval'Interval'EnumStringYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPendingInvoiceItemInterval'Interval' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "day" -> SubscriptionPendingInvoiceItemInterval'Interval'EnumStringDay
            | val GHC.Classes.== "month" -> SubscriptionPendingInvoiceItemInterval'Interval'EnumStringMonth
            | val GHC.Classes.== "week" -> SubscriptionPendingInvoiceItemInterval'Interval'EnumStringWeek
            | val GHC.Classes.== "year" -> SubscriptionPendingInvoiceItemInterval'Interval'EnumStringYear
            | GHC.Base.otherwise -> SubscriptionPendingInvoiceItemInterval'Interval'EnumOther val
      )

-- | Define the one-of schema subscriptionPending_setup_intent\'
--
-- You can use this [SetupIntent](https:\/\/stripe.com\/docs\/api\/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription\'s payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https:\/\/stripe.com\/docs\/billing\/migration\/strong-customer-authentication\#scenario-2).
data SubscriptionPendingSetupIntent'Variants
  = SubscriptionPendingSetupIntent'SetupIntent SetupIntent
  | SubscriptionPendingSetupIntent'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPendingSetupIntent'Variants where
  toJSON (SubscriptionPendingSetupIntent'SetupIntent a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionPendingSetupIntent'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPendingSetupIntent'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionPendingSetupIntent'SetupIntent a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionPendingSetupIntent'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema subscriptionPending_update\'
--
-- If specified, [pending updates](https:\\\/\\\/stripe.com\\\/docs\\\/billing\\\/subscriptions\\\/pending-updates) that will be applied to the subscription once the \\\`latest_invoice\\\` has been paid.
data SubscriptionPendingUpdate'
  = SubscriptionPendingUpdate'
      { -- | billing_cycle_anchor: If the update is applied, determines the date of the first full invoice, and, for plans with \`month\` or \`year\` intervals, the day of the month for subsequent invoices.
        subscriptionPendingUpdate'BillingCycleAnchor :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | expires_at: The point after which the changes reflected by this update will be discarded and no longer applied.
        subscriptionPendingUpdate'ExpiresAt :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | subscription_items: List of subscription items, each with an attached plan, that will be set if the update is applied.
        subscriptionPendingUpdate'SubscriptionItems :: (GHC.Maybe.Maybe ([SubscriptionItem])),
        -- | trial_end: Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
        subscriptionPendingUpdate'TrialEnd :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | trial_from_plan: Indicates if a plan\'s \`trial_period_days\` should be applied to the subscription. Setting \`trial_end\` per subscription is preferred, and this defaults to \`false\`. Setting this flag to \`true\` together with \`trial_end\` is not allowed.
        subscriptionPendingUpdate'TrialFromPlan :: (GHC.Maybe.Maybe GHC.Types.Bool)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPendingUpdate' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_cycle_anchor" (subscriptionPendingUpdate'BillingCycleAnchor obj) : (Data.Aeson..=) "expires_at" (subscriptionPendingUpdate'ExpiresAt obj) : (Data.Aeson..=) "subscription_items" (subscriptionPendingUpdate'SubscriptionItems obj) : (Data.Aeson..=) "trial_end" (subscriptionPendingUpdate'TrialEnd obj) : (Data.Aeson..=) "trial_from_plan" (subscriptionPendingUpdate'TrialFromPlan obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_cycle_anchor" (subscriptionPendingUpdate'BillingCycleAnchor obj) GHC.Base.<> ((Data.Aeson..=) "expires_at" (subscriptionPendingUpdate'ExpiresAt obj) GHC.Base.<> ((Data.Aeson..=) "subscription_items" (subscriptionPendingUpdate'SubscriptionItems obj) GHC.Base.<> ((Data.Aeson..=) "trial_end" (subscriptionPendingUpdate'TrialEnd obj) GHC.Base.<> (Data.Aeson..=) "trial_from_plan" (subscriptionPendingUpdate'TrialFromPlan obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPendingUpdate' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPendingUpdate'" (\obj -> ((((GHC.Base.pure SubscriptionPendingUpdate' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_cycle_anchor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_from_plan"))

-- | Defines the data type for the schema subscriptionPlan\'
--
-- Hash describing the plan the customer is subscribed to. Only set if the subscription contains a single plan.
data SubscriptionPlan'
  = SubscriptionPlan'
      { -- | active: Whether the plan is currently available for new subscriptions.
        subscriptionPlan'Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | aggregate_usage: Specifies a usage aggregation strategy for plans of \`usage_type=metered\`. Allowed values are \`sum\` for summing up all usage during a period, \`last_during_period\` for using the last usage record reported within a period, \`last_ever\` for using the last usage record ever (across period bounds) or \`max\` which uses the usage record with the maximum reported usage during a period. Defaults to \`sum\`.
        subscriptionPlan'AggregateUsage :: (GHC.Maybe.Maybe SubscriptionPlan'AggregateUsage'),
        -- | amount: The amount in %s to be charged on the interval specified.
        subscriptionPlan'Amount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | amount_decimal: Same as \`amount\`, but contains a decimal value with at most 12 decimal places.
        subscriptionPlan'AmountDecimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | billing_scheme: Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`amount\`) will be charged per unit in \`quantity\` (for plans with \`usage_type=licensed\`), or per unit of total usage (for plans with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
        subscriptionPlan'BillingScheme :: (GHC.Maybe.Maybe SubscriptionPlan'BillingScheme'),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        subscriptionPlan'Created :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        subscriptionPlan'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        subscriptionPlan'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | interval: The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
        subscriptionPlan'Interval :: (GHC.Maybe.Maybe SubscriptionPlan'Interval'),
        -- | interval_count: The number of intervals (specified in the \`interval\` attribute) between subscription billings. For example, \`interval=month\` and \`interval_count=3\` bills every 3 months.
        subscriptionPlan'IntervalCount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        subscriptionPlan'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        subscriptionPlan'Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | nickname: A brief description of the plan, hidden from customers.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        subscriptionPlan'Nickname :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        subscriptionPlan'Object :: (GHC.Maybe.Maybe SubscriptionPlan'Object'),
        -- | product: The product whose pricing this plan determines.
        subscriptionPlan'Product :: (GHC.Maybe.Maybe SubscriptionPlan'Product'Variants),
        -- | tiers: Each element represents a pricing tier. This parameter requires \`billing_scheme\` to be set to \`tiered\`. See also the documentation for \`billing_scheme\`.
        subscriptionPlan'Tiers :: (GHC.Maybe.Maybe ([PlanTier])),
        -- | tiers_mode: Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
        subscriptionPlan'TiersMode :: (GHC.Maybe.Maybe SubscriptionPlan'TiersMode'),
        -- | transform_usage: Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \`tiers\`.
        subscriptionPlan'TransformUsage :: (GHC.Maybe.Maybe SubscriptionPlan'TransformUsage'),
        -- | trial_period_days: Default number of trial days when subscribing a customer to this plan using [\`trial_from_plan=true\`](https:\/\/stripe.com\/docs\/api\#create_subscription-trial_from_plan).
        subscriptionPlan'TrialPeriodDays :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | usage_type: Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
        subscriptionPlan'UsageType :: (GHC.Maybe.Maybe SubscriptionPlan'UsageType')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (subscriptionPlan'Active obj) : (Data.Aeson..=) "aggregate_usage" (subscriptionPlan'AggregateUsage obj) : (Data.Aeson..=) "amount" (subscriptionPlan'Amount obj) : (Data.Aeson..=) "amount_decimal" (subscriptionPlan'AmountDecimal obj) : (Data.Aeson..=) "billing_scheme" (subscriptionPlan'BillingScheme obj) : (Data.Aeson..=) "created" (subscriptionPlan'Created obj) : (Data.Aeson..=) "currency" (subscriptionPlan'Currency obj) : (Data.Aeson..=) "id" (subscriptionPlan'Id obj) : (Data.Aeson..=) "interval" (subscriptionPlan'Interval obj) : (Data.Aeson..=) "interval_count" (subscriptionPlan'IntervalCount obj) : (Data.Aeson..=) "livemode" (subscriptionPlan'Livemode obj) : (Data.Aeson..=) "metadata" (subscriptionPlan'Metadata obj) : (Data.Aeson..=) "nickname" (subscriptionPlan'Nickname obj) : (Data.Aeson..=) "object" (subscriptionPlan'Object obj) : (Data.Aeson..=) "product" (subscriptionPlan'Product obj) : (Data.Aeson..=) "tiers" (subscriptionPlan'Tiers obj) : (Data.Aeson..=) "tiers_mode" (subscriptionPlan'TiersMode obj) : (Data.Aeson..=) "transform_usage" (subscriptionPlan'TransformUsage obj) : (Data.Aeson..=) "trial_period_days" (subscriptionPlan'TrialPeriodDays obj) : (Data.Aeson..=) "usage_type" (subscriptionPlan'UsageType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (subscriptionPlan'Active obj) GHC.Base.<> ((Data.Aeson..=) "aggregate_usage" (subscriptionPlan'AggregateUsage obj) GHC.Base.<> ((Data.Aeson..=) "amount" (subscriptionPlan'Amount obj) GHC.Base.<> ((Data.Aeson..=) "amount_decimal" (subscriptionPlan'AmountDecimal obj) GHC.Base.<> ((Data.Aeson..=) "billing_scheme" (subscriptionPlan'BillingScheme obj) GHC.Base.<> ((Data.Aeson..=) "created" (subscriptionPlan'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (subscriptionPlan'Currency obj) GHC.Base.<> ((Data.Aeson..=) "id" (subscriptionPlan'Id obj) GHC.Base.<> ((Data.Aeson..=) "interval" (subscriptionPlan'Interval obj) GHC.Base.<> ((Data.Aeson..=) "interval_count" (subscriptionPlan'IntervalCount obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (subscriptionPlan'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (subscriptionPlan'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "nickname" (subscriptionPlan'Nickname obj) GHC.Base.<> ((Data.Aeson..=) "object" (subscriptionPlan'Object obj) GHC.Base.<> ((Data.Aeson..=) "product" (subscriptionPlan'Product obj) GHC.Base.<> ((Data.Aeson..=) "tiers" (subscriptionPlan'Tiers obj) GHC.Base.<> ((Data.Aeson..=) "tiers_mode" (subscriptionPlan'TiersMode obj) GHC.Base.<> ((Data.Aeson..=) "transform_usage" (subscriptionPlan'TransformUsage obj) GHC.Base.<> ((Data.Aeson..=) "trial_period_days" (subscriptionPlan'TrialPeriodDays obj) GHC.Base.<> (Data.Aeson..=) "usage_type" (subscriptionPlan'UsageType obj))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPlan'" (\obj -> (((((((((((((((((((GHC.Base.pure SubscriptionPlan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "aggregate_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_scheme")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transform_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_period_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_type"))

-- | Defines the enum schema subscriptionPlan\'Aggregate_usage\'
--
-- Specifies a usage aggregation strategy for plans of \`usage_type=metered\`. Allowed values are \`sum\` for summing up all usage during a period, \`last_during_period\` for using the last usage record reported within a period, \`last_ever\` for using the last usage record ever (across period bounds) or \`max\` which uses the usage record with the maximum reported usage during a period. Defaults to \`sum\`.
data SubscriptionPlan'AggregateUsage'
  = SubscriptionPlan'AggregateUsage'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionPlan'AggregateUsage'EnumTyped Data.Text.Internal.Text
  | SubscriptionPlan'AggregateUsage'EnumStringLastDuringPeriod
  | SubscriptionPlan'AggregateUsage'EnumStringLastEver
  | SubscriptionPlan'AggregateUsage'EnumStringMax
  | SubscriptionPlan'AggregateUsage'EnumStringSum
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan'AggregateUsage' where
  toJSON (SubscriptionPlan'AggregateUsage'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'AggregateUsage'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'AggregateUsage'EnumStringLastDuringPeriod) = "last_during_period"
  toJSON (SubscriptionPlan'AggregateUsage'EnumStringLastEver) = "last_ever"
  toJSON (SubscriptionPlan'AggregateUsage'EnumStringMax) = "max"
  toJSON (SubscriptionPlan'AggregateUsage'EnumStringSum) = "sum"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'AggregateUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "last_during_period" -> SubscriptionPlan'AggregateUsage'EnumStringLastDuringPeriod
            | val GHC.Classes.== "last_ever" -> SubscriptionPlan'AggregateUsage'EnumStringLastEver
            | val GHC.Classes.== "max" -> SubscriptionPlan'AggregateUsage'EnumStringMax
            | val GHC.Classes.== "sum" -> SubscriptionPlan'AggregateUsage'EnumStringSum
            | GHC.Base.otherwise -> SubscriptionPlan'AggregateUsage'EnumOther val
      )

-- | Defines the enum schema subscriptionPlan\'Billing_scheme\'
--
-- Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`amount\`) will be charged per unit in \`quantity\` (for plans with \`usage_type=licensed\`), or per unit of total usage (for plans with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
data SubscriptionPlan'BillingScheme'
  = SubscriptionPlan'BillingScheme'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionPlan'BillingScheme'EnumTyped Data.Text.Internal.Text
  | SubscriptionPlan'BillingScheme'EnumStringPerUnit
  | SubscriptionPlan'BillingScheme'EnumStringTiered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan'BillingScheme' where
  toJSON (SubscriptionPlan'BillingScheme'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'BillingScheme'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'BillingScheme'EnumStringPerUnit) = "per_unit"
  toJSON (SubscriptionPlan'BillingScheme'EnumStringTiered) = "tiered"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'BillingScheme' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "per_unit" -> SubscriptionPlan'BillingScheme'EnumStringPerUnit
            | val GHC.Classes.== "tiered" -> SubscriptionPlan'BillingScheme'EnumStringTiered
            | GHC.Base.otherwise -> SubscriptionPlan'BillingScheme'EnumOther val
      )

-- | Defines the enum schema subscriptionPlan\'Interval\'
--
-- The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
data SubscriptionPlan'Interval'
  = SubscriptionPlan'Interval'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionPlan'Interval'EnumTyped Data.Text.Internal.Text
  | SubscriptionPlan'Interval'EnumStringDay
  | SubscriptionPlan'Interval'EnumStringMonth
  | SubscriptionPlan'Interval'EnumStringWeek
  | SubscriptionPlan'Interval'EnumStringYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan'Interval' where
  toJSON (SubscriptionPlan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'Interval'EnumStringDay) = "day"
  toJSON (SubscriptionPlan'Interval'EnumStringMonth) = "month"
  toJSON (SubscriptionPlan'Interval'EnumStringWeek) = "week"
  toJSON (SubscriptionPlan'Interval'EnumStringYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'Interval' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "day" -> SubscriptionPlan'Interval'EnumStringDay
            | val GHC.Classes.== "month" -> SubscriptionPlan'Interval'EnumStringMonth
            | val GHC.Classes.== "week" -> SubscriptionPlan'Interval'EnumStringWeek
            | val GHC.Classes.== "year" -> SubscriptionPlan'Interval'EnumStringYear
            | GHC.Base.otherwise -> SubscriptionPlan'Interval'EnumOther val
      )

-- | Defines the enum schema subscriptionPlan\'Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data SubscriptionPlan'Object'
  = SubscriptionPlan'Object'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionPlan'Object'EnumTyped Data.Text.Internal.Text
  | SubscriptionPlan'Object'EnumStringPlan
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan'Object' where
  toJSON (SubscriptionPlan'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'Object'EnumStringPlan) = "plan"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "plan" -> SubscriptionPlan'Object'EnumStringPlan
            | GHC.Base.otherwise -> SubscriptionPlan'Object'EnumOther val
      )

-- | Define the one-of schema subscriptionPlan\'Product\'
--
-- The product whose pricing this plan determines.
data SubscriptionPlan'Product'Variants
  = SubscriptionPlan'Product'DeletedProduct DeletedProduct
  | SubscriptionPlan'Product'Product Product
  | SubscriptionPlan'Product'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan'Product'Variants where
  toJSON (SubscriptionPlan'Product'DeletedProduct a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionPlan'Product'Product a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionPlan'Product'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'Product'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionPlan'Product'DeletedProduct a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionPlan'Product'Product a
      Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
        Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionPlan'Product'Text a
        Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema subscriptionPlan\'Tiers_mode\'
--
-- Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
data SubscriptionPlan'TiersMode'
  = SubscriptionPlan'TiersMode'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionPlan'TiersMode'EnumTyped Data.Text.Internal.Text
  | SubscriptionPlan'TiersMode'EnumStringGraduated
  | SubscriptionPlan'TiersMode'EnumStringVolume
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan'TiersMode' where
  toJSON (SubscriptionPlan'TiersMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'TiersMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'TiersMode'EnumStringGraduated) = "graduated"
  toJSON (SubscriptionPlan'TiersMode'EnumStringVolume) = "volume"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'TiersMode' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "graduated" -> SubscriptionPlan'TiersMode'EnumStringGraduated
            | val GHC.Classes.== "volume" -> SubscriptionPlan'TiersMode'EnumStringVolume
            | GHC.Base.otherwise -> SubscriptionPlan'TiersMode'EnumOther val
      )

-- | Defines the data type for the schema subscriptionPlan\'Transform_usage\'
--
-- Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \\\`tiers\\\`.
data SubscriptionPlan'TransformUsage'
  = SubscriptionPlan'TransformUsage'
      { -- | divide_by: Divide usage by this number.
        subscriptionPlan'TransformUsage'DivideBy :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | round: After division, either round the result \`up\` or \`down\`.
        subscriptionPlan'TransformUsage'Round :: (GHC.Maybe.Maybe SubscriptionPlan'TransformUsage'Round')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan'TransformUsage' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "divide_by" (subscriptionPlan'TransformUsage'DivideBy obj) : (Data.Aeson..=) "round" (subscriptionPlan'TransformUsage'Round obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "divide_by" (subscriptionPlan'TransformUsage'DivideBy obj) GHC.Base.<> (Data.Aeson..=) "round" (subscriptionPlan'TransformUsage'Round obj))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'TransformUsage' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionPlan'TransformUsage'" (\obj -> (GHC.Base.pure SubscriptionPlan'TransformUsage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "divide_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "round"))

-- | Defines the enum schema subscriptionPlan\'Transform_usage\'Round\'
--
-- After division, either round the result \`up\` or \`down\`.
data SubscriptionPlan'TransformUsage'Round'
  = SubscriptionPlan'TransformUsage'Round'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionPlan'TransformUsage'Round'EnumTyped Data.Text.Internal.Text
  | SubscriptionPlan'TransformUsage'Round'EnumStringDown
  | SubscriptionPlan'TransformUsage'Round'EnumStringUp
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan'TransformUsage'Round' where
  toJSON (SubscriptionPlan'TransformUsage'Round'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'TransformUsage'Round'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'TransformUsage'Round'EnumStringDown) = "down"
  toJSON (SubscriptionPlan'TransformUsage'Round'EnumStringUp) = "up"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'TransformUsage'Round' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "down" -> SubscriptionPlan'TransformUsage'Round'EnumStringDown
            | val GHC.Classes.== "up" -> SubscriptionPlan'TransformUsage'Round'EnumStringUp
            | GHC.Base.otherwise -> SubscriptionPlan'TransformUsage'Round'EnumOther val
      )

-- | Defines the enum schema subscriptionPlan\'Usage_type\'
--
-- Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
data SubscriptionPlan'UsageType'
  = SubscriptionPlan'UsageType'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionPlan'UsageType'EnumTyped Data.Text.Internal.Text
  | SubscriptionPlan'UsageType'EnumStringLicensed
  | SubscriptionPlan'UsageType'EnumStringMetered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionPlan'UsageType' where
  toJSON (SubscriptionPlan'UsageType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'UsageType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionPlan'UsageType'EnumStringLicensed) = "licensed"
  toJSON (SubscriptionPlan'UsageType'EnumStringMetered) = "metered"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionPlan'UsageType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "licensed" -> SubscriptionPlan'UsageType'EnumStringLicensed
            | val GHC.Classes.== "metered" -> SubscriptionPlan'UsageType'EnumStringMetered
            | GHC.Base.otherwise -> SubscriptionPlan'UsageType'EnumOther val
      )

-- | Define the one-of schema subscriptionSchedule\'
--
-- The schedule attached to the subscription
data SubscriptionSchedule'Variants
  = SubscriptionSchedule'SubscriptionSchedule SubscriptionSchedule
  | SubscriptionSchedule'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionSchedule'Variants where
  toJSON (SubscriptionSchedule'SubscriptionSchedule a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SubscriptionSchedule'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionSchedule'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionSchedule'SubscriptionSchedule a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ SubscriptionSchedule'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema subscriptionStatus\'
--
-- Possible values are \`incomplete\`, \`incomplete_expired\`, \`trialing\`, \`active\`, \`past_due\`, \`canceled\`, or \`unpaid\`.
--
-- For \`collection_method=charge_automatically\` a subscription moves into \`incomplete\` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an \`active\` state. If the first invoice is not paid within 23 hours, the subscription transitions to \`incomplete_expired\`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
--
-- A subscription that is currently in a trial period is \`trialing\` and moves to \`active\` when the trial period is over.
--
-- If subscription \`collection_method=charge_automatically\` it becomes \`past_due\` when payment to renew it fails and \`canceled\` or \`unpaid\` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
--
-- If subscription \`collection_method=send_invoice\` it becomes \`past_due\` when its invoice is not paid by the due date, and \`canceled\` or \`unpaid\` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of \`unpaid\`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
data SubscriptionStatus'
  = SubscriptionStatus'EnumOther Data.Aeson.Types.Internal.Value
  | SubscriptionStatus'EnumTyped Data.Text.Internal.Text
  | SubscriptionStatus'EnumStringActive
  | SubscriptionStatus'EnumStringCanceled
  | SubscriptionStatus'EnumStringIncomplete
  | SubscriptionStatus'EnumStringIncompleteExpired
  | SubscriptionStatus'EnumStringPastDue
  | SubscriptionStatus'EnumStringTrialing
  | SubscriptionStatus'EnumStringUnpaid
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionStatus' where
  toJSON (SubscriptionStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SubscriptionStatus'EnumStringActive) = "active"
  toJSON (SubscriptionStatus'EnumStringCanceled) = "canceled"
  toJSON (SubscriptionStatus'EnumStringIncomplete) = "incomplete"
  toJSON (SubscriptionStatus'EnumStringIncompleteExpired) = "incomplete_expired"
  toJSON (SubscriptionStatus'EnumStringPastDue) = "past_due"
  toJSON (SubscriptionStatus'EnumStringTrialing) = "trialing"
  toJSON (SubscriptionStatus'EnumStringUnpaid) = "unpaid"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "active" -> SubscriptionStatus'EnumStringActive
            | val GHC.Classes.== "canceled" -> SubscriptionStatus'EnumStringCanceled
            | val GHC.Classes.== "incomplete" -> SubscriptionStatus'EnumStringIncomplete
            | val GHC.Classes.== "incomplete_expired" -> SubscriptionStatus'EnumStringIncompleteExpired
            | val GHC.Classes.== "past_due" -> SubscriptionStatus'EnumStringPastDue
            | val GHC.Classes.== "trialing" -> SubscriptionStatus'EnumStringTrialing
            | val GHC.Classes.== "unpaid" -> SubscriptionStatus'EnumStringUnpaid
            | GHC.Base.otherwise -> SubscriptionStatus'EnumOther val
      )
