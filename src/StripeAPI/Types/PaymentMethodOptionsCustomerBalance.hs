-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema PaymentMethodOptionsCustomerBalance
module StripeAPI.Types.PaymentMethodOptionsCustomerBalance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodOptionsCustomerBalanceBankTransfer

-- | Defines the object schema located at @components.schemas.payment_method_options_customer_balance@ in the specification.
-- 
-- 
data PaymentMethodOptionsCustomerBalance = PaymentMethodOptionsCustomerBalance {
  -- | bank_transfer: 
  paymentMethodOptionsCustomerBalanceBankTransfer :: (GHC.Maybe.Maybe PaymentMethodOptionsCustomerBalanceBankTransfer)
  -- | funding_type: The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: \`bank_transfer\`.
  , paymentMethodOptionsCustomerBalanceFundingType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable PaymentMethodOptionsCustomerBalanceFundingType'NonNullable))
  -- | setup_future_usage: Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
  -- 
  -- Providing this parameter will [attach the payment method](https:\/\/stripe.com\/docs\/payments\/save-during-payment) to the PaymentIntent\'s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https:\/\/stripe.com\/docs\/api\/payment_methods\/attach) to a Customer after the transaction completes.
  -- 
  -- When processing card payments, Stripe also uses \`setup_future_usage\` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https:\/\/stripe.com\/docs\/strong-customer-authentication).
  , paymentMethodOptionsCustomerBalanceSetupFutureUsage :: (GHC.Maybe.Maybe PaymentMethodOptionsCustomerBalanceSetupFutureUsage')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodOptionsCustomerBalance
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsCustomerBalanceBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding_type" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsCustomerBalanceFundingType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsCustomerBalanceSetupFutureUsage obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsCustomerBalanceBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding_type" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsCustomerBalanceFundingType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("setup_future_usage" Data.Aeson.Types.ToJSON..=)) (paymentMethodOptionsCustomerBalanceSetupFutureUsage obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsCustomerBalance
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodOptionsCustomerBalance" (\obj -> ((GHC.Base.pure PaymentMethodOptionsCustomerBalance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "setup_future_usage"))
-- | Create a new 'PaymentMethodOptionsCustomerBalance' with all required fields.
mkPaymentMethodOptionsCustomerBalance :: PaymentMethodOptionsCustomerBalance
mkPaymentMethodOptionsCustomerBalance = PaymentMethodOptionsCustomerBalance{paymentMethodOptionsCustomerBalanceBankTransfer = GHC.Maybe.Nothing,
                                                                            paymentMethodOptionsCustomerBalanceFundingType = GHC.Maybe.Nothing,
                                                                            paymentMethodOptionsCustomerBalanceSetupFutureUsage = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.payment_method_options_customer_balance.properties.funding_type@ in the specification.
-- 
-- The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: \`bank_transfer\`.
data PaymentMethodOptionsCustomerBalanceFundingType'NonNullable =
   PaymentMethodOptionsCustomerBalanceFundingType'NonNullableOther Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PaymentMethodOptionsCustomerBalanceFundingType'NonNullableTyped Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PaymentMethodOptionsCustomerBalanceFundingType'NonNullableEnumBankTransfer -- ^ Represents the JSON value @"bank_transfer"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodOptionsCustomerBalanceFundingType'NonNullable
    where toJSON (PaymentMethodOptionsCustomerBalanceFundingType'NonNullableOther val) = val
          toJSON (PaymentMethodOptionsCustomerBalanceFundingType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PaymentMethodOptionsCustomerBalanceFundingType'NonNullableEnumBankTransfer) = "bank_transfer"
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsCustomerBalanceFundingType'NonNullable
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "bank_transfer" -> PaymentMethodOptionsCustomerBalanceFundingType'NonNullableEnumBankTransfer
                                            | GHC.Base.otherwise -> PaymentMethodOptionsCustomerBalanceFundingType'NonNullableOther val)
-- | Defines the enum schema located at @components.schemas.payment_method_options_customer_balance.properties.setup_future_usage@ in the specification.
-- 
-- Indicates that you intend to make future payments with this PaymentIntent\'s payment method.
-- 
-- Providing this parameter will [attach the payment method](https:\/\/stripe.com\/docs\/payments\/save-during-payment) to the PaymentIntent\'s Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https:\/\/stripe.com\/docs\/api\/payment_methods\/attach) to a Customer after the transaction completes.
-- 
-- When processing card payments, Stripe also uses \`setup_future_usage\` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https:\/\/stripe.com\/docs\/strong-customer-authentication).
data PaymentMethodOptionsCustomerBalanceSetupFutureUsage' =
   PaymentMethodOptionsCustomerBalanceSetupFutureUsage'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | PaymentMethodOptionsCustomerBalanceSetupFutureUsage'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | PaymentMethodOptionsCustomerBalanceSetupFutureUsage'EnumNone -- ^ Represents the JSON value @"none"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodOptionsCustomerBalanceSetupFutureUsage'
    where toJSON (PaymentMethodOptionsCustomerBalanceSetupFutureUsage'Other val) = val
          toJSON (PaymentMethodOptionsCustomerBalanceSetupFutureUsage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (PaymentMethodOptionsCustomerBalanceSetupFutureUsage'EnumNone) = "none"
instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodOptionsCustomerBalanceSetupFutureUsage'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "none" -> PaymentMethodOptionsCustomerBalanceSetupFutureUsage'EnumNone
                                            | GHC.Base.otherwise -> PaymentMethodOptionsCustomerBalanceSetupFutureUsage'Other val)
