{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SubscriptionsResourcePaymentMethodOptions
module StripeAPI.Types.SubscriptionsResourcePaymentMethodOptions where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.InvoiceMandateOptionsCard
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsAcssDebit
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsAcssDebitMandateOptions
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsBancontact
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsCustomerBalance
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsCustomerBalanceBankTransfer
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsUsBankAccount
import {-# SOURCE #-} StripeAPI.Types.InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions
import {-# SOURCE #-} StripeAPI.Types.SubscriptionPaymentMethodOptionsCard
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_method_options@ in the specification.
data SubscriptionsResourcePaymentMethodOptions = SubscriptionsResourcePaymentMethodOptions
  { -- | acss_debit: This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
    subscriptionsResourcePaymentMethodOptionsAcssDebit :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable)),
    -- | bancontact: This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
    subscriptionsResourcePaymentMethodOptionsBancontact :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable)),
    -- | card: This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
    subscriptionsResourcePaymentMethodOptionsCard :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SubscriptionsResourcePaymentMethodOptionsCard'NonNullable)),
    -- | customer_balance: This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription.
    subscriptionsResourcePaymentMethodOptionsCustomerBalance :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable)),
    -- | konbini: This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription.
    subscriptionsResourcePaymentMethodOptionsKonbini :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | us_bank_account: This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription.
    subscriptionsResourcePaymentMethodOptionsUsBankAccount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptions where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsBancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_balance" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCustomerBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsKonbini obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsUsBankAccount obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsAcssDebit obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsBancontact obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCard obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer_balance" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCustomerBalance obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsKonbini obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsUsBankAccount obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptions where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentMethodOptions" (\obj -> (((((GHC.Base.pure SubscriptionsResourcePaymentMethodOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acss_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer_balance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "konbini")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us_bank_account"))

-- | Create a new 'SubscriptionsResourcePaymentMethodOptions' with all required fields.
mkSubscriptionsResourcePaymentMethodOptions :: SubscriptionsResourcePaymentMethodOptions
mkSubscriptionsResourcePaymentMethodOptions =
  SubscriptionsResourcePaymentMethodOptions
    { subscriptionsResourcePaymentMethodOptionsAcssDebit = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsBancontact = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsCard = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsCustomerBalance = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsKonbini = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsUsBankAccount = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.acss_debit.anyOf@ in the specification.
--
-- This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
data SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable = SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable
  { -- | mandate_options:
    subscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableMandateOptions :: (GHC.Maybe.Maybe InvoicePaymentMethodOptionsAcssDebitMandateOptions),
    -- | verification_method: Bank account verification method.
    subscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableMandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableMandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable" (\obj -> (GHC.Base.pure SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable' with all required fields.
mkSubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable :: SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable
mkSubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable =
  SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullable
    { subscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableMandateOptions = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.acss_debit.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod' where
  toJSON (SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'Other val) = val
  toJSON (SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'EnumAutomatic) = "automatic"
  toJSON (SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'EnumInstant) = "instant"
  toJSON (SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "automatic" -> SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'EnumAutomatic
            | val GHC.Classes.== "instant" -> SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'EnumInstant
            | val GHC.Classes.== "microdeposits" -> SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'EnumMicrodeposits
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentMethodOptionsAcssDebit'NonNullableVerificationMethod'Other val
      )

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.bancontact.anyOf@ in the specification.
--
-- This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
data SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable = SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable
  { -- | preferred_language: Preferred language of the Bancontact authorization page that the customer is redirected to.
    subscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("preferred_language" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable" (\obj -> GHC.Base.pure SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "preferred_language"))

-- | Create a new 'SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable' with all required fields.
mkSubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable :: SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable
mkSubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable = SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullable {subscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage = GHC.Maybe.Nothing}

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.bancontact.anyOf.properties.preferred_language@ in the specification.
--
-- Preferred language of the Bancontact authorization page that the customer is redirected to.
data SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"de"@
    SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumDe
  | -- | Represents the JSON value @"en"@
    SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumEn
  | -- | Represents the JSON value @"fr"@
    SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumFr
  | -- | Represents the JSON value @"nl"@
    SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumNl
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage' where
  toJSON (SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'Other val) = val
  toJSON (SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumDe) = "de"
  toJSON (SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumEn) = "en"
  toJSON (SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumFr) = "fr"
  toJSON (SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumNl) = "nl"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "de" -> SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumDe
            | val GHC.Classes.== "en" -> SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumEn
            | val GHC.Classes.== "fr" -> SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumFr
            | val GHC.Classes.== "nl" -> SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'EnumNl
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentMethodOptionsBancontact'NonNullablePreferredLanguage'Other val
      )

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.card.anyOf@ in the specification.
--
-- This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
data SubscriptionsResourcePaymentMethodOptionsCard'NonNullable = SubscriptionsResourcePaymentMethodOptionsCard'NonNullable
  { -- | mandate_options:
    subscriptionsResourcePaymentMethodOptionsCard'NonNullableMandateOptions :: (GHC.Maybe.Maybe InvoiceMandateOptionsCard),
    -- | network: Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time.
    subscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullable)),
    -- | request_three_d_secure: We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
    subscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsCard'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCard'NonNullableMandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_three_d_secure" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mandate_options" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCard'NonNullableMandateOptions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("request_three_d_secure" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsCard'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentMethodOptionsCard'NonNullable" (\obj -> ((GHC.Base.pure SubscriptionsResourcePaymentMethodOptionsCard'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mandate_options")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "request_three_d_secure"))

-- | Create a new 'SubscriptionsResourcePaymentMethodOptionsCard'NonNullable' with all required fields.
mkSubscriptionsResourcePaymentMethodOptionsCard'NonNullable :: SubscriptionsResourcePaymentMethodOptionsCard'NonNullable
mkSubscriptionsResourcePaymentMethodOptionsCard'NonNullable =
  SubscriptionsResourcePaymentMethodOptionsCard'NonNullable
    { subscriptionsResourcePaymentMethodOptionsCard'NonNullableMandateOptions = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.card.anyOf.properties.network@ in the specification.
--
-- Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time.
data SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"amex"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumAmex
  | -- | Represents the JSON value @"cartes_bancaires"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumCartesBancaires
  | -- | Represents the JSON value @"diners"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumDiners
  | -- | Represents the JSON value @"discover"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumDiscover
  | -- | Represents the JSON value @"eftpos_au"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumEftposAu
  | -- | Represents the JSON value @"interac"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumInterac
  | -- | Represents the JSON value @"jcb"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumJcb
  | -- | Represents the JSON value @"mastercard"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumMastercard
  | -- | Represents the JSON value @"unionpay"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumUnionpay
  | -- | Represents the JSON value @"unknown"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumUnknown
  | -- | Represents the JSON value @"visa"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumVisa
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullable where
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableOther val) = val
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumAmex) = "amex"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumCartesBancaires) = "cartes_bancaires"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumDiners) = "diners"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumDiscover) = "discover"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumEftposAu) = "eftpos_au"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumInterac) = "interac"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumJcb) = "jcb"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumMastercard) = "mastercard"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumUnionpay) = "unionpay"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumUnknown) = "unknown"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumVisa) = "visa"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "amex" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumAmex
            | val GHC.Classes.== "cartes_bancaires" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumCartesBancaires
            | val GHC.Classes.== "diners" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumDiners
            | val GHC.Classes.== "discover" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumDiscover
            | val GHC.Classes.== "eftpos_au" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumEftposAu
            | val GHC.Classes.== "interac" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumInterac
            | val GHC.Classes.== "jcb" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumJcb
            | val GHC.Classes.== "mastercard" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumMastercard
            | val GHC.Classes.== "unionpay" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumUnionpay
            | val GHC.Classes.== "unknown" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumUnknown
            | val GHC.Classes.== "visa" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableEnumVisa
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableNetwork'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.card.anyOf.properties.request_three_d_secure@ in the specification.
--
-- We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https:\/\/stripe.com\/docs\/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https:\/\/stripe.com\/docs\/payments\/3d-secure\#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
data SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"any"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableEnumAny
  | -- | Represents the JSON value @"automatic"@
    SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableEnumAutomatic
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullable where
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableOther val) = val
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableEnumAny) = "any"
  toJSON (SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableEnumAutomatic) = "automatic"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "any" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableEnumAny
            | val GHC.Classes.== "automatic" -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableEnumAutomatic
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentMethodOptionsCard'NonNullableRequestThreeDSecure'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.customer_balance.anyOf@ in the specification.
--
-- This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription.
data SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable = SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable
  { -- | bank_transfer:
    subscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableBankTransfer :: (GHC.Maybe.Maybe InvoicePaymentMethodOptionsCustomerBalanceBankTransfer),
    -- | funding_type: The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: \`bank_transfer\`.
    subscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding_type" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableBankTransfer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("funding_type" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable" (\obj -> (GHC.Base.pure SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "funding_type"))

-- | Create a new 'SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable' with all required fields.
mkSubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable :: SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable
mkSubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable =
  SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullable
    { subscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableBankTransfer = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.customer_balance.anyOf.properties.funding_type@ in the specification.
--
-- The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: \`bank_transfer\`.
data SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"bank_transfer"@
    SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullableEnumBankTransfer
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullable where
  toJSON (SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullableOther val) = val
  toJSON (SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullableEnumBankTransfer) = "bank_transfer"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "bank_transfer" -> SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullableEnumBankTransfer
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentMethodOptionsCustomerBalance'NonNullableFundingType'NonNullableOther val
      )

-- | Defines the object schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.us_bank_account.anyOf@ in the specification.
--
-- This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription.
data SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable = SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable
  { -- | financial_connections:
    subscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableFinancialConnections :: (GHC.Maybe.Maybe InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions),
    -- | verification_method: Bank account verification method.
    subscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod :: (GHC.Maybe.Maybe SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_connections" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableFinancialConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("financial_connections" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableFinancialConnections obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("verification_method" Data.Aeson.Types.ToJSON..=)) (subscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable" (\obj -> (GHC.Base.pure SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "financial_connections")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "verification_method"))

-- | Create a new 'SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable' with all required fields.
mkSubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable :: SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable
mkSubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable =
  SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullable
    { subscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableFinancialConnections = GHC.Maybe.Nothing,
      subscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.subscriptions_resource_payment_method_options.properties.us_bank_account.anyOf.properties.verification_method@ in the specification.
--
-- Bank account verification method.
data SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"automatic"@
    SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'EnumAutomatic
  | -- | Represents the JSON value @"instant"@
    SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'EnumInstant
  | -- | Represents the JSON value @"microdeposits"@
    SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'EnumMicrodeposits
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod' where
  toJSON (SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'Other val) = val
  toJSON (SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'EnumAutomatic) = "automatic"
  toJSON (SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'EnumInstant) = "instant"
  toJSON (SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'EnumMicrodeposits) = "microdeposits"

instance Data.Aeson.Types.FromJSON.FromJSON SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "automatic" -> SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'EnumAutomatic
            | val GHC.Classes.== "instant" -> SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'EnumInstant
            | val GHC.Classes.== "microdeposits" -> SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'EnumMicrodeposits
            | GHC.Base.otherwise -> SubscriptionsResourcePaymentMethodOptionsUsBankAccount'NonNullableVerificationMethod'Other val
      )
