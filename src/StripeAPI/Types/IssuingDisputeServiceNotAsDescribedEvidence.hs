-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema IssuingDisputeServiceNotAsDescribedEvidence
module StripeAPI.Types.IssuingDisputeServiceNotAsDescribedEvidence where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.File

-- | Defines the object schema located at @components.schemas.issuing_dispute_service_not_as_described_evidence@ in the specification.
-- 
-- 
data IssuingDisputeServiceNotAsDescribedEvidence = IssuingDisputeServiceNotAsDescribedEvidence {
  -- | additional_documentation: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional documentation supporting the dispute.
  issuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableVariants))
  -- | canceled_at: Date when order was canceled.
  , issuingDisputeServiceNotAsDescribedEvidenceCanceledAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  -- | cancellation_reason: Reason for canceling the order.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , issuingDisputeServiceNotAsDescribedEvidenceCancellationReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | explanation: Explanation of why the cardholder is disputing this transaction.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , issuingDisputeServiceNotAsDescribedEvidenceExplanation :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | received_at: Date when the product was received.
  , issuingDisputeServiceNotAsDescribedEvidenceReceivedAt :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeServiceNotAsDescribedEvidence
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("additional_documentation" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceCanceledAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancellation_reason" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceCancellationReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("explanation" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceExplanation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("received_at" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceReceivedAt obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("additional_documentation" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("canceled_at" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceCanceledAt obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cancellation_reason" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceCancellationReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("explanation" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceExplanation obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("received_at" Data.Aeson.Types.ToJSON..=)) (issuingDisputeServiceNotAsDescribedEvidenceReceivedAt obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeServiceNotAsDescribedEvidence
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingDisputeServiceNotAsDescribedEvidence" (\obj -> ((((GHC.Base.pure IssuingDisputeServiceNotAsDescribedEvidence GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "additional_documentation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "canceled_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cancellation_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "explanation")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "received_at"))
-- | Create a new 'IssuingDisputeServiceNotAsDescribedEvidence' with all required fields.
mkIssuingDisputeServiceNotAsDescribedEvidence :: IssuingDisputeServiceNotAsDescribedEvidence
mkIssuingDisputeServiceNotAsDescribedEvidence = IssuingDisputeServiceNotAsDescribedEvidence{issuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation = GHC.Maybe.Nothing,
                                                                                            issuingDisputeServiceNotAsDescribedEvidenceCanceledAt = GHC.Maybe.Nothing,
                                                                                            issuingDisputeServiceNotAsDescribedEvidenceCancellationReason = GHC.Maybe.Nothing,
                                                                                            issuingDisputeServiceNotAsDescribedEvidenceExplanation = GHC.Maybe.Nothing,
                                                                                            issuingDisputeServiceNotAsDescribedEvidenceReceivedAt = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.issuing_dispute_service_not_as_described_evidence.properties.additional_documentation.anyOf@ in the specification.
-- 
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) Additional documentation supporting the dispute.
data IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableVariants =
   IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableText Data.Text.Internal.Text
  | IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableFile File
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableVariants
    where toJSON (IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableFile a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableVariants
    where parseJSON val = case (IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((IssuingDisputeServiceNotAsDescribedEvidenceAdditionalDocumentation'NonNullableFile Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
