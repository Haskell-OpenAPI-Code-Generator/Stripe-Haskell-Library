{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema ThreeDSecureDetails
module StripeAPI.Types.ThreeDSecureDetails where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.three_d_secure_details@ in the specification.
data ThreeDSecureDetails = ThreeDSecureDetails
  { -- | authentication_flow: For authenticated transactions: how the customer was authenticated by
    -- the issuing bank.
    threeDSecureDetailsAuthenticationFlow :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ThreeDSecureDetailsAuthenticationFlow'NonNullable)),
    -- | electronic_commerce_indicator: The Electronic Commerce Indicator (ECI). A protocol-level field
    -- indicating what degree of authentication was performed.
    threeDSecureDetailsElectronicCommerceIndicator :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ThreeDSecureDetailsElectronicCommerceIndicator'NonNullable)),
    -- | result: Indicates the outcome of 3D Secure authentication.
    threeDSecureDetailsResult :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ThreeDSecureDetailsResult'NonNullable)),
    -- | result_reason: Additional information about why 3D Secure succeeded or failed based
    -- on the \`result\`.
    threeDSecureDetailsResultReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ThreeDSecureDetailsResultReason'NonNullable)),
    -- | transaction_id: The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
    -- (dsTransId) for this payment.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    threeDSecureDetailsTransactionId :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | version: The version of 3D Secure that was used.
    threeDSecureDetailsVersion :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ThreeDSecureDetailsVersion'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ThreeDSecureDetails where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("electronic_commerce_indicator" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsElectronicCommerceIndicator obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("result" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsResult obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("result_reason" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsResultReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_id" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsTransactionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("version" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsVersion obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("authentication_flow" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsAuthenticationFlow obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("electronic_commerce_indicator" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsElectronicCommerceIndicator obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("result" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsResult obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("result_reason" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsResultReason obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction_id" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsTransactionId obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("version" Data.Aeson.Types.ToJSON..=)) (threeDSecureDetailsVersion obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON ThreeDSecureDetails where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ThreeDSecureDetails" (\obj -> (((((GHC.Base.pure ThreeDSecureDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "authentication_flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "electronic_commerce_indicator")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "result")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "result_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transaction_id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "version"))

-- | Create a new 'ThreeDSecureDetails' with all required fields.
mkThreeDSecureDetails :: ThreeDSecureDetails
mkThreeDSecureDetails =
  ThreeDSecureDetails
    { threeDSecureDetailsAuthenticationFlow = GHC.Maybe.Nothing,
      threeDSecureDetailsElectronicCommerceIndicator = GHC.Maybe.Nothing,
      threeDSecureDetailsResult = GHC.Maybe.Nothing,
      threeDSecureDetailsResultReason = GHC.Maybe.Nothing,
      threeDSecureDetailsTransactionId = GHC.Maybe.Nothing,
      threeDSecureDetailsVersion = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.three_d_secure_details.properties.authentication_flow@ in the specification.
--
-- For authenticated transactions: how the customer was authenticated by
-- the issuing bank.
data ThreeDSecureDetailsAuthenticationFlow'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ThreeDSecureDetailsAuthenticationFlow'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ThreeDSecureDetailsAuthenticationFlow'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"challenge"@
    ThreeDSecureDetailsAuthenticationFlow'NonNullableEnumChallenge
  | -- | Represents the JSON value @"frictionless"@
    ThreeDSecureDetailsAuthenticationFlow'NonNullableEnumFrictionless
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ThreeDSecureDetailsAuthenticationFlow'NonNullable where
  toJSON (ThreeDSecureDetailsAuthenticationFlow'NonNullableOther val) = val
  toJSON (ThreeDSecureDetailsAuthenticationFlow'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ThreeDSecureDetailsAuthenticationFlow'NonNullableEnumChallenge) = "challenge"
  toJSON (ThreeDSecureDetailsAuthenticationFlow'NonNullableEnumFrictionless) = "frictionless"

instance Data.Aeson.Types.FromJSON.FromJSON ThreeDSecureDetailsAuthenticationFlow'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "challenge" -> ThreeDSecureDetailsAuthenticationFlow'NonNullableEnumChallenge
            | val GHC.Classes.== "frictionless" -> ThreeDSecureDetailsAuthenticationFlow'NonNullableEnumFrictionless
            | GHC.Base.otherwise -> ThreeDSecureDetailsAuthenticationFlow'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.three_d_secure_details.properties.electronic_commerce_indicator@ in the specification.
--
-- The Electronic Commerce Indicator (ECI). A protocol-level field
-- indicating what degree of authentication was performed.
data ThreeDSecureDetailsElectronicCommerceIndicator'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"01"@
    ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum01
  | -- | Represents the JSON value @"02"@
    ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum02
  | -- | Represents the JSON value @"05"@
    ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum05
  | -- | Represents the JSON value @"06"@
    ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum06
  | -- | Represents the JSON value @"07"@
    ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum07
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ThreeDSecureDetailsElectronicCommerceIndicator'NonNullable where
  toJSON (ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableOther val) = val
  toJSON (ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum01) = "01"
  toJSON (ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum02) = "02"
  toJSON (ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum05) = "05"
  toJSON (ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum06) = "06"
  toJSON (ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum07) = "07"

instance Data.Aeson.Types.FromJSON.FromJSON ThreeDSecureDetailsElectronicCommerceIndicator'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "01" -> ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum01
            | val GHC.Classes.== "02" -> ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum02
            | val GHC.Classes.== "05" -> ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum05
            | val GHC.Classes.== "06" -> ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum06
            | val GHC.Classes.== "07" -> ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableEnum07
            | GHC.Base.otherwise -> ThreeDSecureDetailsElectronicCommerceIndicator'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.three_d_secure_details.properties.result@ in the specification.
--
-- Indicates the outcome of 3D Secure authentication.
data ThreeDSecureDetailsResult'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ThreeDSecureDetailsResult'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ThreeDSecureDetailsResult'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"attempt_acknowledged"@
    ThreeDSecureDetailsResult'NonNullableEnumAttemptAcknowledged
  | -- | Represents the JSON value @"authenticated"@
    ThreeDSecureDetailsResult'NonNullableEnumAuthenticated
  | -- | Represents the JSON value @"exempted"@
    ThreeDSecureDetailsResult'NonNullableEnumExempted
  | -- | Represents the JSON value @"failed"@
    ThreeDSecureDetailsResult'NonNullableEnumFailed
  | -- | Represents the JSON value @"not_supported"@
    ThreeDSecureDetailsResult'NonNullableEnumNotSupported
  | -- | Represents the JSON value @"processing_error"@
    ThreeDSecureDetailsResult'NonNullableEnumProcessingError
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ThreeDSecureDetailsResult'NonNullable where
  toJSON (ThreeDSecureDetailsResult'NonNullableOther val) = val
  toJSON (ThreeDSecureDetailsResult'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ThreeDSecureDetailsResult'NonNullableEnumAttemptAcknowledged) = "attempt_acknowledged"
  toJSON (ThreeDSecureDetailsResult'NonNullableEnumAuthenticated) = "authenticated"
  toJSON (ThreeDSecureDetailsResult'NonNullableEnumExempted) = "exempted"
  toJSON (ThreeDSecureDetailsResult'NonNullableEnumFailed) = "failed"
  toJSON (ThreeDSecureDetailsResult'NonNullableEnumNotSupported) = "not_supported"
  toJSON (ThreeDSecureDetailsResult'NonNullableEnumProcessingError) = "processing_error"

instance Data.Aeson.Types.FromJSON.FromJSON ThreeDSecureDetailsResult'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "attempt_acknowledged" -> ThreeDSecureDetailsResult'NonNullableEnumAttemptAcknowledged
            | val GHC.Classes.== "authenticated" -> ThreeDSecureDetailsResult'NonNullableEnumAuthenticated
            | val GHC.Classes.== "exempted" -> ThreeDSecureDetailsResult'NonNullableEnumExempted
            | val GHC.Classes.== "failed" -> ThreeDSecureDetailsResult'NonNullableEnumFailed
            | val GHC.Classes.== "not_supported" -> ThreeDSecureDetailsResult'NonNullableEnumNotSupported
            | val GHC.Classes.== "processing_error" -> ThreeDSecureDetailsResult'NonNullableEnumProcessingError
            | GHC.Base.otherwise -> ThreeDSecureDetailsResult'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.three_d_secure_details.properties.result_reason@ in the specification.
--
-- Additional information about why 3D Secure succeeded or failed based
-- on the \`result\`.
data ThreeDSecureDetailsResultReason'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ThreeDSecureDetailsResultReason'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ThreeDSecureDetailsResultReason'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"abandoned"@
    ThreeDSecureDetailsResultReason'NonNullableEnumAbandoned
  | -- | Represents the JSON value @"bypassed"@
    ThreeDSecureDetailsResultReason'NonNullableEnumBypassed
  | -- | Represents the JSON value @"canceled"@
    ThreeDSecureDetailsResultReason'NonNullableEnumCanceled
  | -- | Represents the JSON value @"card_not_enrolled"@
    ThreeDSecureDetailsResultReason'NonNullableEnumCardNotEnrolled
  | -- | Represents the JSON value @"network_not_supported"@
    ThreeDSecureDetailsResultReason'NonNullableEnumNetworkNotSupported
  | -- | Represents the JSON value @"protocol_error"@
    ThreeDSecureDetailsResultReason'NonNullableEnumProtocolError
  | -- | Represents the JSON value @"rejected"@
    ThreeDSecureDetailsResultReason'NonNullableEnumRejected
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ThreeDSecureDetailsResultReason'NonNullable where
  toJSON (ThreeDSecureDetailsResultReason'NonNullableOther val) = val
  toJSON (ThreeDSecureDetailsResultReason'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ThreeDSecureDetailsResultReason'NonNullableEnumAbandoned) = "abandoned"
  toJSON (ThreeDSecureDetailsResultReason'NonNullableEnumBypassed) = "bypassed"
  toJSON (ThreeDSecureDetailsResultReason'NonNullableEnumCanceled) = "canceled"
  toJSON (ThreeDSecureDetailsResultReason'NonNullableEnumCardNotEnrolled) = "card_not_enrolled"
  toJSON (ThreeDSecureDetailsResultReason'NonNullableEnumNetworkNotSupported) = "network_not_supported"
  toJSON (ThreeDSecureDetailsResultReason'NonNullableEnumProtocolError) = "protocol_error"
  toJSON (ThreeDSecureDetailsResultReason'NonNullableEnumRejected) = "rejected"

instance Data.Aeson.Types.FromJSON.FromJSON ThreeDSecureDetailsResultReason'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "abandoned" -> ThreeDSecureDetailsResultReason'NonNullableEnumAbandoned
            | val GHC.Classes.== "bypassed" -> ThreeDSecureDetailsResultReason'NonNullableEnumBypassed
            | val GHC.Classes.== "canceled" -> ThreeDSecureDetailsResultReason'NonNullableEnumCanceled
            | val GHC.Classes.== "card_not_enrolled" -> ThreeDSecureDetailsResultReason'NonNullableEnumCardNotEnrolled
            | val GHC.Classes.== "network_not_supported" -> ThreeDSecureDetailsResultReason'NonNullableEnumNetworkNotSupported
            | val GHC.Classes.== "protocol_error" -> ThreeDSecureDetailsResultReason'NonNullableEnumProtocolError
            | val GHC.Classes.== "rejected" -> ThreeDSecureDetailsResultReason'NonNullableEnumRejected
            | GHC.Base.otherwise -> ThreeDSecureDetailsResultReason'NonNullableOther val
      )

-- | Defines the enum schema located at @components.schemas.three_d_secure_details.properties.version@ in the specification.
--
-- The version of 3D Secure that was used.
data ThreeDSecureDetailsVersion'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    ThreeDSecureDetailsVersion'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    ThreeDSecureDetailsVersion'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"1.0.2"@
    ThreeDSecureDetailsVersion'NonNullableEnum1'0'2
  | -- | Represents the JSON value @"2.1.0"@
    ThreeDSecureDetailsVersion'NonNullableEnum2'1'0
  | -- | Represents the JSON value @"2.2.0"@
    ThreeDSecureDetailsVersion'NonNullableEnum2'2'0
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ThreeDSecureDetailsVersion'NonNullable where
  toJSON (ThreeDSecureDetailsVersion'NonNullableOther val) = val
  toJSON (ThreeDSecureDetailsVersion'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (ThreeDSecureDetailsVersion'NonNullableEnum1'0'2) = "1.0.2"
  toJSON (ThreeDSecureDetailsVersion'NonNullableEnum2'1'0) = "2.1.0"
  toJSON (ThreeDSecureDetailsVersion'NonNullableEnum2'2'0) = "2.2.0"

instance Data.Aeson.Types.FromJSON.FromJSON ThreeDSecureDetailsVersion'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "1.0.2" -> ThreeDSecureDetailsVersion'NonNullableEnum1'0'2
            | val GHC.Classes.== "2.1.0" -> ThreeDSecureDetailsVersion'NonNullableEnum2'1'0
            | val GHC.Classes.== "2.2.0" -> ThreeDSecureDetailsVersion'NonNullableEnum2'2'0
            | GHC.Base.otherwise -> ThreeDSecureDetailsVersion'NonNullableOther val
      )
