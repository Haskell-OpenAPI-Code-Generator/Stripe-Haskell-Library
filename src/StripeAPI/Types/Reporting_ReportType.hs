{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Reporting_ReportType
module StripeAPI.Types.Reporting_ReportType where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.reporting.report_type@ in the specification.
--
-- The Report Type resource corresponds to a particular type of report, such as
-- the \"Activity summary\" or \"Itemized payouts\" reports. These objects are
-- identified by an ID belonging to a set of enumerated values. See
-- [API Access to Reports documentation](https:\/\/stripe.com\/docs\/reporting\/statements\/api)
-- for those Report Type IDs, along with required and optional parameters.
--
-- Note that certain report types can only be run based on your live-mode data (not test-mode
-- data), and will error when queried without a [live-mode API key](https:\/\/stripe.com\/docs\/keys\#test-live-modes).
data Reporting'reportType = Reporting'reportType
  { -- | data_available_end: Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
    reporting'reportTypeDataAvailableEnd :: GHC.Types.Int,
    -- | data_available_start: Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
    reporting'reportTypeDataAvailableStart :: GHC.Types.Int,
    -- | default_columns: List of column names that are included by default when this Report Type gets run. (If the Report Type doesn\'t support the \`columns\` parameter, this will be null.)
    reporting'reportTypeDefaultColumns :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([Data.Text.Internal.Text]))),
    -- | id: The [ID of the Report Type](https:\/\/stripe.com\/docs\/reporting\/statements\/api\#available-report-types), such as \`balance.summary.1\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    reporting'reportTypeId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    reporting'reportTypeLivemode :: GHC.Types.Bool,
    -- | name: Human-readable name of the Report Type
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    reporting'reportTypeName :: Data.Text.Internal.Text,
    -- | updated: When this Report Type was latest updated. Measured in seconds since the Unix epoch.
    reporting'reportTypeUpdated :: GHC.Types.Int,
    -- | version: Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
    reporting'reportTypeVersion :: GHC.Types.Int
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Reporting'reportType where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data_available_end" Data.Aeson.Types.ToJSON..= reporting'reportTypeDataAvailableEnd obj] : ["data_available_start" Data.Aeson.Types.ToJSON..= reporting'reportTypeDataAvailableStart obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_columns" Data.Aeson.Types.ToJSON..=)) (reporting'reportTypeDefaultColumns obj) : ["id" Data.Aeson.Types.ToJSON..= reporting'reportTypeId obj] : ["livemode" Data.Aeson.Types.ToJSON..= reporting'reportTypeLivemode obj] : ["name" Data.Aeson.Types.ToJSON..= reporting'reportTypeName obj] : ["updated" Data.Aeson.Types.ToJSON..= reporting'reportTypeUpdated obj] : ["version" Data.Aeson.Types.ToJSON..= reporting'reportTypeVersion obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reporting.report_type"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data_available_end" Data.Aeson.Types.ToJSON..= reporting'reportTypeDataAvailableEnd obj] : ["data_available_start" Data.Aeson.Types.ToJSON..= reporting'reportTypeDataAvailableStart obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_columns" Data.Aeson.Types.ToJSON..=)) (reporting'reportTypeDefaultColumns obj) : ["id" Data.Aeson.Types.ToJSON..= reporting'reportTypeId obj] : ["livemode" Data.Aeson.Types.ToJSON..= reporting'reportTypeLivemode obj] : ["name" Data.Aeson.Types.ToJSON..= reporting'reportTypeName obj] : ["updated" Data.Aeson.Types.ToJSON..= reporting'reportTypeUpdated obj] : ["version" Data.Aeson.Types.ToJSON..= reporting'reportTypeVersion obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reporting.report_type"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Reporting'reportType where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Reporting'reportType" (\obj -> (((((((GHC.Base.pure Reporting'reportType GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data_available_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data_available_start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_columns")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "updated")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "version"))

-- | Create a new 'Reporting'reportType' with all required fields.
mkReporting'reportType ::
  -- | 'reporting'reportTypeDataAvailableEnd'
  GHC.Types.Int ->
  -- | 'reporting'reportTypeDataAvailableStart'
  GHC.Types.Int ->
  -- | 'reporting'reportTypeId'
  Data.Text.Internal.Text ->
  -- | 'reporting'reportTypeLivemode'
  GHC.Types.Bool ->
  -- | 'reporting'reportTypeName'
  Data.Text.Internal.Text ->
  -- | 'reporting'reportTypeUpdated'
  GHC.Types.Int ->
  -- | 'reporting'reportTypeVersion'
  GHC.Types.Int ->
  Reporting'reportType
mkReporting'reportType reporting'reportTypeDataAvailableEnd reporting'reportTypeDataAvailableStart reporting'reportTypeId reporting'reportTypeLivemode reporting'reportTypeName reporting'reportTypeUpdated reporting'reportTypeVersion =
  Reporting'reportType
    { reporting'reportTypeDataAvailableEnd = reporting'reportTypeDataAvailableEnd,
      reporting'reportTypeDataAvailableStart = reporting'reportTypeDataAvailableStart,
      reporting'reportTypeDefaultColumns = GHC.Maybe.Nothing,
      reporting'reportTypeId = reporting'reportTypeId,
      reporting'reportTypeLivemode = reporting'reportTypeLivemode,
      reporting'reportTypeName = reporting'reportTypeName,
      reporting'reportTypeUpdated = reporting'reportTypeUpdated,
      reporting'reportTypeVersion = reporting'reportTypeVersion
    }
