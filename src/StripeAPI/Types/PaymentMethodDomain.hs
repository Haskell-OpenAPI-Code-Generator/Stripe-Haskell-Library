{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodDomain
module StripeAPI.Types.PaymentMethodDomain where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentMethodDomainResourcePaymentMethodStatus
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_domain@ in the specification.
--
-- A payment method domain represents a web domain that you have registered with Stripe.
-- Stripe Elements use registered payment method domains to control where certain payment methods are shown.
--
-- Related guides: [Payment method domains](https:\/\/stripe.com\/docs\/payments\/payment-methods\/pmd-registration).
data PaymentMethodDomain = PaymentMethodDomain
  { -- | apple_pay: Indicates the status of a specific payment method on a payment method domain.
    paymentMethodDomainApplePay :: PaymentMethodDomainResourcePaymentMethodStatus,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    paymentMethodDomainCreated :: GHC.Types.Int,
    -- | domain_name: The domain name that this payment method domain object represents.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDomainDomainName :: Data.Text.Internal.Text,
    -- | enabled: Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
    paymentMethodDomainEnabled :: GHC.Types.Bool,
    -- | google_pay: Indicates the status of a specific payment method on a payment method domain.
    paymentMethodDomainGooglePay :: PaymentMethodDomainResourcePaymentMethodStatus,
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDomainId :: Data.Text.Internal.Text,
    -- | link: Indicates the status of a specific payment method on a payment method domain.
    paymentMethodDomainLink :: PaymentMethodDomainResourcePaymentMethodStatus,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    paymentMethodDomainLivemode :: GHC.Types.Bool,
    -- | paypal: Indicates the status of a specific payment method on a payment method domain.
    paymentMethodDomainPaypal :: PaymentMethodDomainResourcePaymentMethodStatus
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDomain where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["apple_pay" Data.Aeson.Types.ToJSON..= paymentMethodDomainApplePay obj] : ["created" Data.Aeson.Types.ToJSON..= paymentMethodDomainCreated obj] : ["domain_name" Data.Aeson.Types.ToJSON..= paymentMethodDomainDomainName obj] : ["enabled" Data.Aeson.Types.ToJSON..= paymentMethodDomainEnabled obj] : ["google_pay" Data.Aeson.Types.ToJSON..= paymentMethodDomainGooglePay obj] : ["id" Data.Aeson.Types.ToJSON..= paymentMethodDomainId obj] : ["link" Data.Aeson.Types.ToJSON..= paymentMethodDomainLink obj] : ["livemode" Data.Aeson.Types.ToJSON..= paymentMethodDomainLivemode obj] : ["paypal" Data.Aeson.Types.ToJSON..= paymentMethodDomainPaypal obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "payment_method_domain"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["apple_pay" Data.Aeson.Types.ToJSON..= paymentMethodDomainApplePay obj] : ["created" Data.Aeson.Types.ToJSON..= paymentMethodDomainCreated obj] : ["domain_name" Data.Aeson.Types.ToJSON..= paymentMethodDomainDomainName obj] : ["enabled" Data.Aeson.Types.ToJSON..= paymentMethodDomainEnabled obj] : ["google_pay" Data.Aeson.Types.ToJSON..= paymentMethodDomainGooglePay obj] : ["id" Data.Aeson.Types.ToJSON..= paymentMethodDomainId obj] : ["link" Data.Aeson.Types.ToJSON..= paymentMethodDomainLink obj] : ["livemode" Data.Aeson.Types.ToJSON..= paymentMethodDomainLivemode obj] : ["paypal" Data.Aeson.Types.ToJSON..= paymentMethodDomainPaypal obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "payment_method_domain"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDomain where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDomain" (\obj -> ((((((((GHC.Base.pure PaymentMethodDomain GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "apple_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "domain_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "google_pay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "link")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "paypal"))

-- | Create a new 'PaymentMethodDomain' with all required fields.
mkPaymentMethodDomain ::
  -- | 'paymentMethodDomainApplePay'
  PaymentMethodDomainResourcePaymentMethodStatus ->
  -- | 'paymentMethodDomainCreated'
  GHC.Types.Int ->
  -- | 'paymentMethodDomainDomainName'
  Data.Text.Internal.Text ->
  -- | 'paymentMethodDomainEnabled'
  GHC.Types.Bool ->
  -- | 'paymentMethodDomainGooglePay'
  PaymentMethodDomainResourcePaymentMethodStatus ->
  -- | 'paymentMethodDomainId'
  Data.Text.Internal.Text ->
  -- | 'paymentMethodDomainLink'
  PaymentMethodDomainResourcePaymentMethodStatus ->
  -- | 'paymentMethodDomainLivemode'
  GHC.Types.Bool ->
  -- | 'paymentMethodDomainPaypal'
  PaymentMethodDomainResourcePaymentMethodStatus ->
  PaymentMethodDomain
mkPaymentMethodDomain paymentMethodDomainApplePay paymentMethodDomainCreated paymentMethodDomainDomainName paymentMethodDomainEnabled paymentMethodDomainGooglePay paymentMethodDomainId paymentMethodDomainLink paymentMethodDomainLivemode paymentMethodDomainPaypal =
  PaymentMethodDomain
    { paymentMethodDomainApplePay = paymentMethodDomainApplePay,
      paymentMethodDomainCreated = paymentMethodDomainCreated,
      paymentMethodDomainDomainName = paymentMethodDomainDomainName,
      paymentMethodDomainEnabled = paymentMethodDomainEnabled,
      paymentMethodDomainGooglePay = paymentMethodDomainGooglePay,
      paymentMethodDomainId = paymentMethodDomainId,
      paymentMethodDomainLink = paymentMethodDomainLink,
      paymentMethodDomainLivemode = paymentMethodDomainLivemode,
      paymentMethodDomainPaypal = paymentMethodDomainPaypal
    }
