{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema AccountCapabilities
module StripeAPI.Types.AccountCapabilities where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account_capabilities@ in the specification.
data AccountCapabilities
  = AccountCapabilities
      { -- | card_issuing: The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
        accountCapabilitiesCardIssuing :: (GHC.Maybe.Maybe AccountCapabilitiesCardIssuing'),
        -- | card_payments: The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
        accountCapabilitiesCardPayments :: (GHC.Maybe.Maybe AccountCapabilitiesCardPayments'),
        -- | legacy_payments: The status of the legacy payments capability of the account.
        accountCapabilitiesLegacyPayments :: (GHC.Maybe.Maybe AccountCapabilitiesLegacyPayments'),
        -- | transfers: The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
        accountCapabilitiesTransfers :: (GHC.Maybe.Maybe AccountCapabilitiesTransfers')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilities where
  toJSON obj = Data.Aeson.Types.Internal.object ("card_issuing" Data.Aeson.Types.ToJSON..= accountCapabilitiesCardIssuing obj : "card_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesCardPayments obj : "legacy_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesLegacyPayments obj : "transfers" Data.Aeson.Types.ToJSON..= accountCapabilitiesTransfers obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("card_issuing" Data.Aeson.Types.ToJSON..= accountCapabilitiesCardIssuing obj) GHC.Base.<> (("card_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesCardPayments obj) GHC.Base.<> (("legacy_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesLegacyPayments obj) GHC.Base.<> ("transfers" Data.Aeson.Types.ToJSON..= accountCapabilitiesTransfers obj))))

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilities where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountCapabilities" (\obj -> (((GHC.Base.pure AccountCapabilities GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_issuing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "legacy_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfers"))

-- | Create a new 'AccountCapabilities' with all required fields.
mkAccountCapabilities :: AccountCapabilities
mkAccountCapabilities =
  AccountCapabilities
    { accountCapabilitiesCardIssuing = GHC.Maybe.Nothing,
      accountCapabilitiesCardPayments = GHC.Maybe.Nothing,
      accountCapabilitiesLegacyPayments = GHC.Maybe.Nothing,
      accountCapabilitiesTransfers = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.card_issuing@ in the specification.
--
-- The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
data AccountCapabilitiesCardIssuing'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesCardIssuing'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesCardIssuing'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesCardIssuing'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesCardIssuing'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesCardIssuing'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesCardIssuing' where
  toJSON (AccountCapabilitiesCardIssuing'Other val) = val
  toJSON (AccountCapabilitiesCardIssuing'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesCardIssuing'EnumActive) = "active"
  toJSON (AccountCapabilitiesCardIssuing'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesCardIssuing'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesCardIssuing' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "active" -> AccountCapabilitiesCardIssuing'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesCardIssuing'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesCardIssuing'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesCardIssuing'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.card_payments@ in the specification.
--
-- The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
data AccountCapabilitiesCardPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesCardPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesCardPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesCardPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesCardPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesCardPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesCardPayments' where
  toJSON (AccountCapabilitiesCardPayments'Other val) = val
  toJSON (AccountCapabilitiesCardPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesCardPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesCardPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesCardPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesCardPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "active" -> AccountCapabilitiesCardPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesCardPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesCardPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesCardPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.legacy_payments@ in the specification.
--
-- The status of the legacy payments capability of the account.
data AccountCapabilitiesLegacyPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesLegacyPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesLegacyPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesLegacyPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesLegacyPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesLegacyPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesLegacyPayments' where
  toJSON (AccountCapabilitiesLegacyPayments'Other val) = val
  toJSON (AccountCapabilitiesLegacyPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesLegacyPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesLegacyPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesLegacyPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesLegacyPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "active" -> AccountCapabilitiesLegacyPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesLegacyPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesLegacyPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesLegacyPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.transfers@ in the specification.
--
-- The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
data AccountCapabilitiesTransfers'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesTransfers'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesTransfers'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesTransfers'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesTransfers'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesTransfers'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesTransfers' where
  toJSON (AccountCapabilitiesTransfers'Other val) = val
  toJSON (AccountCapabilitiesTransfers'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesTransfers'EnumActive) = "active"
  toJSON (AccountCapabilitiesTransfers'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesTransfers'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesTransfers' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "active" -> AccountCapabilitiesTransfers'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesTransfers'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesTransfers'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesTransfers'Other val
      )
