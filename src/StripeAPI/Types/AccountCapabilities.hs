{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountCapabilities
module StripeAPI.Types.AccountCapabilities where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account_capabilities@ in the specification.
data AccountCapabilities = AccountCapabilities
  { -- | acss_debit_payments: The status of the ACSS Direct Debits payments capability of the account, or whether the account can directly process ACSS Direct Debits charges.
    accountCapabilitiesAcssDebitPayments :: (GHC.Maybe.Maybe AccountCapabilitiesAcssDebitPayments'),
    -- | afterpay_clearpay_payments: The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
    accountCapabilitiesAfterpayClearpayPayments :: (GHC.Maybe.Maybe AccountCapabilitiesAfterpayClearpayPayments'),
    -- | au_becs_debit_payments: The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
    accountCapabilitiesAuBecsDebitPayments :: (GHC.Maybe.Maybe AccountCapabilitiesAuBecsDebitPayments'),
    -- | bacs_debit_payments: The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
    accountCapabilitiesBacsDebitPayments :: (GHC.Maybe.Maybe AccountCapabilitiesBacsDebitPayments'),
    -- | bancontact_payments: The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
    accountCapabilitiesBancontactPayments :: (GHC.Maybe.Maybe AccountCapabilitiesBancontactPayments'),
    -- | card_issuing: The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
    accountCapabilitiesCardIssuing :: (GHC.Maybe.Maybe AccountCapabilitiesCardIssuing'),
    -- | card_payments: The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
    accountCapabilitiesCardPayments :: (GHC.Maybe.Maybe AccountCapabilitiesCardPayments'),
    -- | cartes_bancaires_payments: The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
    accountCapabilitiesCartesBancairesPayments :: (GHC.Maybe.Maybe AccountCapabilitiesCartesBancairesPayments'),
    -- | eps_payments: The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
    accountCapabilitiesEpsPayments :: (GHC.Maybe.Maybe AccountCapabilitiesEpsPayments'),
    -- | fpx_payments: The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
    accountCapabilitiesFpxPayments :: (GHC.Maybe.Maybe AccountCapabilitiesFpxPayments'),
    -- | giropay_payments: The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
    accountCapabilitiesGiropayPayments :: (GHC.Maybe.Maybe AccountCapabilitiesGiropayPayments'),
    -- | grabpay_payments: The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
    accountCapabilitiesGrabpayPayments :: (GHC.Maybe.Maybe AccountCapabilitiesGrabpayPayments'),
    -- | ideal_payments: The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
    accountCapabilitiesIdealPayments :: (GHC.Maybe.Maybe AccountCapabilitiesIdealPayments'),
    -- | jcb_payments: The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
    accountCapabilitiesJcbPayments :: (GHC.Maybe.Maybe AccountCapabilitiesJcbPayments'),
    -- | legacy_payments: The status of the legacy payments capability of the account.
    accountCapabilitiesLegacyPayments :: (GHC.Maybe.Maybe AccountCapabilitiesLegacyPayments'),
    -- | oxxo_payments: The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
    accountCapabilitiesOxxoPayments :: (GHC.Maybe.Maybe AccountCapabilitiesOxxoPayments'),
    -- | p24_payments: The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
    accountCapabilitiesP24Payments :: (GHC.Maybe.Maybe AccountCapabilitiesP24Payments'),
    -- | sepa_debit_payments: The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
    accountCapabilitiesSepaDebitPayments :: (GHC.Maybe.Maybe AccountCapabilitiesSepaDebitPayments'),
    -- | sofort_payments: The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
    accountCapabilitiesSofortPayments :: (GHC.Maybe.Maybe AccountCapabilitiesSofortPayments'),
    -- | tax_reporting_us_1099_k: The status of the tax reporting 1099-K (US) capability of the account.
    accountCapabilitiesTaxReportingUs_1099K :: (GHC.Maybe.Maybe AccountCapabilitiesTaxReportingUs_1099K'),
    -- | tax_reporting_us_1099_misc: The status of the tax reporting 1099-MISC (US) capability of the account.
    accountCapabilitiesTaxReportingUs_1099Misc :: (GHC.Maybe.Maybe AccountCapabilitiesTaxReportingUs_1099Misc'),
    -- | transfers: The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
    accountCapabilitiesTransfers :: (GHC.Maybe.Maybe AccountCapabilitiesTransfers')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilities where
  toJSON obj = Data.Aeson.Types.Internal.object ("acss_debit_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesAcssDebitPayments obj : "afterpay_clearpay_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesAfterpayClearpayPayments obj : "au_becs_debit_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesAuBecsDebitPayments obj : "bacs_debit_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesBacsDebitPayments obj : "bancontact_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesBancontactPayments obj : "card_issuing" Data.Aeson.Types.ToJSON..= accountCapabilitiesCardIssuing obj : "card_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesCardPayments obj : "cartes_bancaires_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesCartesBancairesPayments obj : "eps_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesEpsPayments obj : "fpx_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesFpxPayments obj : "giropay_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesGiropayPayments obj : "grabpay_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesGrabpayPayments obj : "ideal_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesIdealPayments obj : "jcb_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesJcbPayments obj : "legacy_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesLegacyPayments obj : "oxxo_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesOxxoPayments obj : "p24_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesP24Payments obj : "sepa_debit_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesSepaDebitPayments obj : "sofort_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesSofortPayments obj : "tax_reporting_us_1099_k" Data.Aeson.Types.ToJSON..= accountCapabilitiesTaxReportingUs_1099K obj : "tax_reporting_us_1099_misc" Data.Aeson.Types.ToJSON..= accountCapabilitiesTaxReportingUs_1099Misc obj : "transfers" Data.Aeson.Types.ToJSON..= accountCapabilitiesTransfers obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("acss_debit_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesAcssDebitPayments obj) GHC.Base.<> (("afterpay_clearpay_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesAfterpayClearpayPayments obj) GHC.Base.<> (("au_becs_debit_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesAuBecsDebitPayments obj) GHC.Base.<> (("bacs_debit_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesBacsDebitPayments obj) GHC.Base.<> (("bancontact_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesBancontactPayments obj) GHC.Base.<> (("card_issuing" Data.Aeson.Types.ToJSON..= accountCapabilitiesCardIssuing obj) GHC.Base.<> (("card_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesCardPayments obj) GHC.Base.<> (("cartes_bancaires_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesCartesBancairesPayments obj) GHC.Base.<> (("eps_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesEpsPayments obj) GHC.Base.<> (("fpx_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesFpxPayments obj) GHC.Base.<> (("giropay_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesGiropayPayments obj) GHC.Base.<> (("grabpay_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesGrabpayPayments obj) GHC.Base.<> (("ideal_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesIdealPayments obj) GHC.Base.<> (("jcb_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesJcbPayments obj) GHC.Base.<> (("legacy_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesLegacyPayments obj) GHC.Base.<> (("oxxo_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesOxxoPayments obj) GHC.Base.<> (("p24_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesP24Payments obj) GHC.Base.<> (("sepa_debit_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesSepaDebitPayments obj) GHC.Base.<> (("sofort_payments" Data.Aeson.Types.ToJSON..= accountCapabilitiesSofortPayments obj) GHC.Base.<> (("tax_reporting_us_1099_k" Data.Aeson.Types.ToJSON..= accountCapabilitiesTaxReportingUs_1099K obj) GHC.Base.<> (("tax_reporting_us_1099_misc" Data.Aeson.Types.ToJSON..= accountCapabilitiesTaxReportingUs_1099Misc obj) GHC.Base.<> ("transfers" Data.Aeson.Types.ToJSON..= accountCapabilitiesTransfers obj))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilities where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountCapabilities" (\obj -> (((((((((((((((((((((GHC.Base.pure AccountCapabilities GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "acss_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "afterpay_clearpay_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "au_becs_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bacs_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_issuing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cartes_bancaires_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fpx_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "grabpay_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "jcb_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "legacy_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "oxxo_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_reporting_us_1099_k")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_reporting_us_1099_misc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transfers"))

-- | Create a new 'AccountCapabilities' with all required fields.
mkAccountCapabilities :: AccountCapabilities
mkAccountCapabilities =
  AccountCapabilities
    { accountCapabilitiesAcssDebitPayments = GHC.Maybe.Nothing,
      accountCapabilitiesAfterpayClearpayPayments = GHC.Maybe.Nothing,
      accountCapabilitiesAuBecsDebitPayments = GHC.Maybe.Nothing,
      accountCapabilitiesBacsDebitPayments = GHC.Maybe.Nothing,
      accountCapabilitiesBancontactPayments = GHC.Maybe.Nothing,
      accountCapabilitiesCardIssuing = GHC.Maybe.Nothing,
      accountCapabilitiesCardPayments = GHC.Maybe.Nothing,
      accountCapabilitiesCartesBancairesPayments = GHC.Maybe.Nothing,
      accountCapabilitiesEpsPayments = GHC.Maybe.Nothing,
      accountCapabilitiesFpxPayments = GHC.Maybe.Nothing,
      accountCapabilitiesGiropayPayments = GHC.Maybe.Nothing,
      accountCapabilitiesGrabpayPayments = GHC.Maybe.Nothing,
      accountCapabilitiesIdealPayments = GHC.Maybe.Nothing,
      accountCapabilitiesJcbPayments = GHC.Maybe.Nothing,
      accountCapabilitiesLegacyPayments = GHC.Maybe.Nothing,
      accountCapabilitiesOxxoPayments = GHC.Maybe.Nothing,
      accountCapabilitiesP24Payments = GHC.Maybe.Nothing,
      accountCapabilitiesSepaDebitPayments = GHC.Maybe.Nothing,
      accountCapabilitiesSofortPayments = GHC.Maybe.Nothing,
      accountCapabilitiesTaxReportingUs_1099K = GHC.Maybe.Nothing,
      accountCapabilitiesTaxReportingUs_1099Misc = GHC.Maybe.Nothing,
      accountCapabilitiesTransfers = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.acss_debit_payments@ in the specification.
--
-- The status of the ACSS Direct Debits payments capability of the account, or whether the account can directly process ACSS Direct Debits charges.
data AccountCapabilitiesAcssDebitPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesAcssDebitPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesAcssDebitPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesAcssDebitPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesAcssDebitPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesAcssDebitPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesAcssDebitPayments' where
  toJSON (AccountCapabilitiesAcssDebitPayments'Other val) = val
  toJSON (AccountCapabilitiesAcssDebitPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesAcssDebitPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesAcssDebitPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesAcssDebitPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesAcssDebitPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesAcssDebitPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesAcssDebitPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesAcssDebitPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesAcssDebitPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.afterpay_clearpay_payments@ in the specification.
--
-- The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
data AccountCapabilitiesAfterpayClearpayPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesAfterpayClearpayPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesAfterpayClearpayPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesAfterpayClearpayPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesAfterpayClearpayPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesAfterpayClearpayPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesAfterpayClearpayPayments' where
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'Other val) = val
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesAfterpayClearpayPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesAfterpayClearpayPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesAfterpayClearpayPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesAfterpayClearpayPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesAfterpayClearpayPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.au_becs_debit_payments@ in the specification.
--
-- The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
data AccountCapabilitiesAuBecsDebitPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesAuBecsDebitPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesAuBecsDebitPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesAuBecsDebitPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesAuBecsDebitPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesAuBecsDebitPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesAuBecsDebitPayments' where
  toJSON (AccountCapabilitiesAuBecsDebitPayments'Other val) = val
  toJSON (AccountCapabilitiesAuBecsDebitPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesAuBecsDebitPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesAuBecsDebitPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesAuBecsDebitPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesAuBecsDebitPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesAuBecsDebitPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesAuBecsDebitPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesAuBecsDebitPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesAuBecsDebitPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.bacs_debit_payments@ in the specification.
--
-- The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
data AccountCapabilitiesBacsDebitPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesBacsDebitPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesBacsDebitPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesBacsDebitPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesBacsDebitPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesBacsDebitPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesBacsDebitPayments' where
  toJSON (AccountCapabilitiesBacsDebitPayments'Other val) = val
  toJSON (AccountCapabilitiesBacsDebitPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesBacsDebitPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesBacsDebitPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesBacsDebitPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesBacsDebitPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesBacsDebitPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesBacsDebitPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesBacsDebitPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesBacsDebitPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.bancontact_payments@ in the specification.
--
-- The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
data AccountCapabilitiesBancontactPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesBancontactPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesBancontactPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesBancontactPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesBancontactPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesBancontactPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesBancontactPayments' where
  toJSON (AccountCapabilitiesBancontactPayments'Other val) = val
  toJSON (AccountCapabilitiesBancontactPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesBancontactPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesBancontactPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesBancontactPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesBancontactPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesBancontactPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesBancontactPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesBancontactPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesBancontactPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.card_issuing@ in the specification.
--
-- The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
data AccountCapabilitiesCardIssuing'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesCardIssuing'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesCardIssuing'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesCardIssuing'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesCardIssuing'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesCardIssuing'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesCardIssuing' where
  toJSON (AccountCapabilitiesCardIssuing'Other val) = val
  toJSON (AccountCapabilitiesCardIssuing'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesCardIssuing'EnumActive) = "active"
  toJSON (AccountCapabilitiesCardIssuing'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesCardIssuing'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesCardIssuing' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesCardIssuing'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesCardIssuing'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesCardIssuing'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesCardIssuing'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.card_payments@ in the specification.
--
-- The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
data AccountCapabilitiesCardPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesCardPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesCardPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesCardPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesCardPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesCardPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesCardPayments' where
  toJSON (AccountCapabilitiesCardPayments'Other val) = val
  toJSON (AccountCapabilitiesCardPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesCardPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesCardPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesCardPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesCardPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesCardPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesCardPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesCardPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesCardPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.cartes_bancaires_payments@ in the specification.
--
-- The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
data AccountCapabilitiesCartesBancairesPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesCartesBancairesPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesCartesBancairesPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesCartesBancairesPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesCartesBancairesPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesCartesBancairesPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesCartesBancairesPayments' where
  toJSON (AccountCapabilitiesCartesBancairesPayments'Other val) = val
  toJSON (AccountCapabilitiesCartesBancairesPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesCartesBancairesPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesCartesBancairesPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesCartesBancairesPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesCartesBancairesPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesCartesBancairesPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesCartesBancairesPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesCartesBancairesPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesCartesBancairesPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.eps_payments@ in the specification.
--
-- The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
data AccountCapabilitiesEpsPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesEpsPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesEpsPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesEpsPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesEpsPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesEpsPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesEpsPayments' where
  toJSON (AccountCapabilitiesEpsPayments'Other val) = val
  toJSON (AccountCapabilitiesEpsPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesEpsPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesEpsPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesEpsPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesEpsPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesEpsPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesEpsPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesEpsPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesEpsPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.fpx_payments@ in the specification.
--
-- The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
data AccountCapabilitiesFpxPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesFpxPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesFpxPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesFpxPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesFpxPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesFpxPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesFpxPayments' where
  toJSON (AccountCapabilitiesFpxPayments'Other val) = val
  toJSON (AccountCapabilitiesFpxPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesFpxPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesFpxPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesFpxPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesFpxPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesFpxPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesFpxPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesFpxPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesFpxPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.giropay_payments@ in the specification.
--
-- The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
data AccountCapabilitiesGiropayPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesGiropayPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesGiropayPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesGiropayPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesGiropayPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesGiropayPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesGiropayPayments' where
  toJSON (AccountCapabilitiesGiropayPayments'Other val) = val
  toJSON (AccountCapabilitiesGiropayPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesGiropayPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesGiropayPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesGiropayPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesGiropayPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesGiropayPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesGiropayPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesGiropayPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesGiropayPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.grabpay_payments@ in the specification.
--
-- The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
data AccountCapabilitiesGrabpayPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesGrabpayPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesGrabpayPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesGrabpayPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesGrabpayPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesGrabpayPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesGrabpayPayments' where
  toJSON (AccountCapabilitiesGrabpayPayments'Other val) = val
  toJSON (AccountCapabilitiesGrabpayPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesGrabpayPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesGrabpayPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesGrabpayPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesGrabpayPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesGrabpayPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesGrabpayPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesGrabpayPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesGrabpayPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.ideal_payments@ in the specification.
--
-- The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
data AccountCapabilitiesIdealPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesIdealPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesIdealPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesIdealPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesIdealPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesIdealPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesIdealPayments' where
  toJSON (AccountCapabilitiesIdealPayments'Other val) = val
  toJSON (AccountCapabilitiesIdealPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesIdealPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesIdealPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesIdealPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesIdealPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesIdealPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesIdealPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesIdealPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesIdealPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.jcb_payments@ in the specification.
--
-- The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
data AccountCapabilitiesJcbPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesJcbPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesJcbPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesJcbPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesJcbPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesJcbPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesJcbPayments' where
  toJSON (AccountCapabilitiesJcbPayments'Other val) = val
  toJSON (AccountCapabilitiesJcbPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesJcbPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesJcbPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesJcbPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesJcbPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesJcbPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesJcbPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesJcbPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesJcbPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.legacy_payments@ in the specification.
--
-- The status of the legacy payments capability of the account.
data AccountCapabilitiesLegacyPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesLegacyPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesLegacyPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesLegacyPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesLegacyPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesLegacyPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesLegacyPayments' where
  toJSON (AccountCapabilitiesLegacyPayments'Other val) = val
  toJSON (AccountCapabilitiesLegacyPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesLegacyPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesLegacyPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesLegacyPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesLegacyPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesLegacyPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesLegacyPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesLegacyPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesLegacyPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.oxxo_payments@ in the specification.
--
-- The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
data AccountCapabilitiesOxxoPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesOxxoPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesOxxoPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesOxxoPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesOxxoPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesOxxoPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesOxxoPayments' where
  toJSON (AccountCapabilitiesOxxoPayments'Other val) = val
  toJSON (AccountCapabilitiesOxxoPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesOxxoPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesOxxoPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesOxxoPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesOxxoPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesOxxoPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesOxxoPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesOxxoPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesOxxoPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.p24_payments@ in the specification.
--
-- The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
data AccountCapabilitiesP24Payments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesP24Payments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesP24Payments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesP24Payments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesP24Payments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesP24Payments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesP24Payments' where
  toJSON (AccountCapabilitiesP24Payments'Other val) = val
  toJSON (AccountCapabilitiesP24Payments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesP24Payments'EnumActive) = "active"
  toJSON (AccountCapabilitiesP24Payments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesP24Payments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesP24Payments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesP24Payments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesP24Payments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesP24Payments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesP24Payments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.sepa_debit_payments@ in the specification.
--
-- The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
data AccountCapabilitiesSepaDebitPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesSepaDebitPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesSepaDebitPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesSepaDebitPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesSepaDebitPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesSepaDebitPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesSepaDebitPayments' where
  toJSON (AccountCapabilitiesSepaDebitPayments'Other val) = val
  toJSON (AccountCapabilitiesSepaDebitPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesSepaDebitPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesSepaDebitPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesSepaDebitPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesSepaDebitPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesSepaDebitPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesSepaDebitPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesSepaDebitPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesSepaDebitPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.sofort_payments@ in the specification.
--
-- The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
data AccountCapabilitiesSofortPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesSofortPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesSofortPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesSofortPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesSofortPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesSofortPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesSofortPayments' where
  toJSON (AccountCapabilitiesSofortPayments'Other val) = val
  toJSON (AccountCapabilitiesSofortPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesSofortPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesSofortPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesSofortPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesSofortPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesSofortPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesSofortPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesSofortPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesSofortPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.tax_reporting_us_1099_k@ in the specification.
--
-- The status of the tax reporting 1099-K (US) capability of the account.
data AccountCapabilitiesTaxReportingUs_1099K'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesTaxReportingUs_1099K'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesTaxReportingUs_1099K'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesTaxReportingUs_1099K'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesTaxReportingUs_1099K'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesTaxReportingUs_1099K'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesTaxReportingUs_1099K' where
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'Other val) = val
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'EnumActive) = "active"
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesTaxReportingUs_1099K' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesTaxReportingUs_1099K'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesTaxReportingUs_1099K'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesTaxReportingUs_1099K'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesTaxReportingUs_1099K'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.tax_reporting_us_1099_misc@ in the specification.
--
-- The status of the tax reporting 1099-MISC (US) capability of the account.
data AccountCapabilitiesTaxReportingUs_1099Misc'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesTaxReportingUs_1099Misc'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesTaxReportingUs_1099Misc'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesTaxReportingUs_1099Misc'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesTaxReportingUs_1099Misc'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesTaxReportingUs_1099Misc'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesTaxReportingUs_1099Misc' where
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'Other val) = val
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'EnumActive) = "active"
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesTaxReportingUs_1099Misc' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesTaxReportingUs_1099Misc'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesTaxReportingUs_1099Misc'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesTaxReportingUs_1099Misc'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesTaxReportingUs_1099Misc'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.transfers@ in the specification.
--
-- The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
data AccountCapabilitiesTransfers'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesTransfers'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesTransfers'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesTransfers'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesTransfers'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesTransfers'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesTransfers' where
  toJSON (AccountCapabilitiesTransfers'Other val) = val
  toJSON (AccountCapabilitiesTransfers'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesTransfers'EnumActive) = "active"
  toJSON (AccountCapabilitiesTransfers'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesTransfers'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesTransfers' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesTransfers'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesTransfers'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesTransfers'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesTransfers'Other val
      )
