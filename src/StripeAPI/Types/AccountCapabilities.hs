{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountCapabilities
module StripeAPI.Types.AccountCapabilities where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account_capabilities@ in the specification.
data AccountCapabilities = AccountCapabilities
  { -- | acss_debit_payments: The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
    accountCapabilitiesAcssDebitPayments :: (GHC.Maybe.Maybe AccountCapabilitiesAcssDebitPayments'),
    -- | affirm_payments: The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
    accountCapabilitiesAffirmPayments :: (GHC.Maybe.Maybe AccountCapabilitiesAffirmPayments'),
    -- | afterpay_clearpay_payments: The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
    accountCapabilitiesAfterpayClearpayPayments :: (GHC.Maybe.Maybe AccountCapabilitiesAfterpayClearpayPayments'),
    -- | au_becs_debit_payments: The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
    accountCapabilitiesAuBecsDebitPayments :: (GHC.Maybe.Maybe AccountCapabilitiesAuBecsDebitPayments'),
    -- | bacs_debit_payments: The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
    accountCapabilitiesBacsDebitPayments :: (GHC.Maybe.Maybe AccountCapabilitiesBacsDebitPayments'),
    -- | bancontact_payments: The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
    accountCapabilitiesBancontactPayments :: (GHC.Maybe.Maybe AccountCapabilitiesBancontactPayments'),
    -- | bank_transfer_payments: The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
    accountCapabilitiesBankTransferPayments :: (GHC.Maybe.Maybe AccountCapabilitiesBankTransferPayments'),
    -- | blik_payments: The status of the blik payments capability of the account, or whether the account can directly process blik charges.
    accountCapabilitiesBlikPayments :: (GHC.Maybe.Maybe AccountCapabilitiesBlikPayments'),
    -- | boleto_payments: The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
    accountCapabilitiesBoletoPayments :: (GHC.Maybe.Maybe AccountCapabilitiesBoletoPayments'),
    -- | card_issuing: The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
    accountCapabilitiesCardIssuing :: (GHC.Maybe.Maybe AccountCapabilitiesCardIssuing'),
    -- | card_payments: The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
    accountCapabilitiesCardPayments :: (GHC.Maybe.Maybe AccountCapabilitiesCardPayments'),
    -- | cartes_bancaires_payments: The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
    accountCapabilitiesCartesBancairesPayments :: (GHC.Maybe.Maybe AccountCapabilitiesCartesBancairesPayments'),
    -- | cashapp_payments: The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.
    accountCapabilitiesCashappPayments :: (GHC.Maybe.Maybe AccountCapabilitiesCashappPayments'),
    -- | eps_payments: The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
    accountCapabilitiesEpsPayments :: (GHC.Maybe.Maybe AccountCapabilitiesEpsPayments'),
    -- | fpx_payments: The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
    accountCapabilitiesFpxPayments :: (GHC.Maybe.Maybe AccountCapabilitiesFpxPayments'),
    -- | giropay_payments: The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
    accountCapabilitiesGiropayPayments :: (GHC.Maybe.Maybe AccountCapabilitiesGiropayPayments'),
    -- | grabpay_payments: The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
    accountCapabilitiesGrabpayPayments :: (GHC.Maybe.Maybe AccountCapabilitiesGrabpayPayments'),
    -- | ideal_payments: The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
    accountCapabilitiesIdealPayments :: (GHC.Maybe.Maybe AccountCapabilitiesIdealPayments'),
    -- | india_international_payments: The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.
    accountCapabilitiesIndiaInternationalPayments :: (GHC.Maybe.Maybe AccountCapabilitiesIndiaInternationalPayments'),
    -- | jcb_payments: The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
    accountCapabilitiesJcbPayments :: (GHC.Maybe.Maybe AccountCapabilitiesJcbPayments'),
    -- | klarna_payments: The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
    accountCapabilitiesKlarnaPayments :: (GHC.Maybe.Maybe AccountCapabilitiesKlarnaPayments'),
    -- | konbini_payments: The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
    accountCapabilitiesKonbiniPayments :: (GHC.Maybe.Maybe AccountCapabilitiesKonbiniPayments'),
    -- | legacy_payments: The status of the legacy payments capability of the account.
    accountCapabilitiesLegacyPayments :: (GHC.Maybe.Maybe AccountCapabilitiesLegacyPayments'),
    -- | link_payments: The status of the link_payments capability of the account, or whether the account can directly process Link charges.
    accountCapabilitiesLinkPayments :: (GHC.Maybe.Maybe AccountCapabilitiesLinkPayments'),
    -- | oxxo_payments: The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
    accountCapabilitiesOxxoPayments :: (GHC.Maybe.Maybe AccountCapabilitiesOxxoPayments'),
    -- | p24_payments: The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
    accountCapabilitiesP24Payments :: (GHC.Maybe.Maybe AccountCapabilitiesP24Payments'),
    -- | paynow_payments: The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
    accountCapabilitiesPaynowPayments :: (GHC.Maybe.Maybe AccountCapabilitiesPaynowPayments'),
    -- | promptpay_payments: The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
    accountCapabilitiesPromptpayPayments :: (GHC.Maybe.Maybe AccountCapabilitiesPromptpayPayments'),
    -- | revolut_pay_payments: The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments.
    accountCapabilitiesRevolutPayPayments :: (GHC.Maybe.Maybe AccountCapabilitiesRevolutPayPayments'),
    -- | sepa_debit_payments: The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
    accountCapabilitiesSepaDebitPayments :: (GHC.Maybe.Maybe AccountCapabilitiesSepaDebitPayments'),
    -- | sofort_payments: The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
    accountCapabilitiesSofortPayments :: (GHC.Maybe.Maybe AccountCapabilitiesSofortPayments'),
    -- | tax_reporting_us_1099_k: The status of the tax reporting 1099-K (US) capability of the account.
    accountCapabilitiesTaxReportingUs_1099K :: (GHC.Maybe.Maybe AccountCapabilitiesTaxReportingUs_1099K'),
    -- | tax_reporting_us_1099_misc: The status of the tax reporting 1099-MISC (US) capability of the account.
    accountCapabilitiesTaxReportingUs_1099Misc :: (GHC.Maybe.Maybe AccountCapabilitiesTaxReportingUs_1099Misc'),
    -- | transfers: The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
    accountCapabilitiesTransfers :: (GHC.Maybe.Maybe AccountCapabilitiesTransfers'),
    -- | treasury: The status of the banking capability, or whether the account can have bank accounts.
    accountCapabilitiesTreasury :: (GHC.Maybe.Maybe AccountCapabilitiesTreasury'),
    -- | us_bank_account_ach_payments: The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
    accountCapabilitiesUsBankAccountAchPayments :: (GHC.Maybe.Maybe AccountCapabilitiesUsBankAccountAchPayments'),
    -- | zip_payments: The status of the Zip capability of the account, or whether the account can directly process Zip charges.
    accountCapabilitiesZipPayments :: (GHC.Maybe.Maybe AccountCapabilitiesZipPayments')
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilities where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesAcssDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("affirm_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesAffirmPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("afterpay_clearpay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesAfterpayClearpayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesAuBecsDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBacsDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBancontactPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBankTransferPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("blik_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBlikPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBoletoPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_issuing" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesCardIssuing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesCardPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cartes_bancaires_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesCartesBancairesPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesCashappPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesEpsPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fpx_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesFpxPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesGiropayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("grabpay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesGrabpayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesIdealPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("india_international_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesIndiaInternationalPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jcb_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesJcbPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesKlarnaPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesKonbiniPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("legacy_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesLegacyPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesLinkPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesOxxoPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesP24Payments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesPaynowPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesPromptpayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revolut_pay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesRevolutPayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesSepaDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesSofortPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_reporting_us_1099_k" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesTaxReportingUs_1099K obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_reporting_us_1099_misc" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesTaxReportingUs_1099Misc obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfers" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesTransfers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("treasury" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesTreasury obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account_ach_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesUsBankAccountAchPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zip_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesZipPayments obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("acss_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesAcssDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("affirm_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesAffirmPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("afterpay_clearpay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesAfterpayClearpayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("au_becs_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesAuBecsDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bacs_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBacsDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bancontact_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBancontactPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("bank_transfer_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBankTransferPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("blik_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBlikPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("boleto_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesBoletoPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_issuing" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesCardIssuing obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesCardPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cartes_bancaires_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesCartesBancairesPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("cashapp_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesCashappPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("eps_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesEpsPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("fpx_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesFpxPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("giropay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesGiropayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("grabpay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesGrabpayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("ideal_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesIdealPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("india_international_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesIndiaInternationalPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("jcb_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesJcbPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("klarna_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesKlarnaPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("konbini_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesKonbiniPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("legacy_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesLegacyPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("link_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesLinkPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("oxxo_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesOxxoPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("p24_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesP24Payments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("paynow_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesPaynowPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("promptpay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesPromptpayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("revolut_pay_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesRevolutPayPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sepa_debit_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesSepaDebitPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("sofort_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesSofortPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_reporting_us_1099_k" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesTaxReportingUs_1099K obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_reporting_us_1099_misc" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesTaxReportingUs_1099Misc obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfers" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesTransfers obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("treasury" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesTreasury obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account_ach_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesUsBankAccountAchPayments obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("zip_payments" Data.Aeson.Types.ToJSON..=)) (accountCapabilitiesZipPayments obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilities where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountCapabilities" (\obj -> ((((((((((((((((((((((((((((((((((((GHC.Base.pure AccountCapabilities GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "acss_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "affirm_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "afterpay_clearpay_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "au_becs_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bacs_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bancontact_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "bank_transfer_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "blik_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "boleto_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_issuing")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cartes_bancaires_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "cashapp_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "eps_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "fpx_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "giropay_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "grabpay_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "ideal_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "india_international_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "jcb_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "klarna_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "konbini_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "legacy_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "link_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "oxxo_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "p24_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "paynow_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "promptpay_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "revolut_pay_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sepa_debit_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "sofort_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_reporting_us_1099_k")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_reporting_us_1099_misc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "treasury")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us_bank_account_ach_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "zip_payments"))

-- | Create a new 'AccountCapabilities' with all required fields.
mkAccountCapabilities :: AccountCapabilities
mkAccountCapabilities =
  AccountCapabilities
    { accountCapabilitiesAcssDebitPayments = GHC.Maybe.Nothing,
      accountCapabilitiesAffirmPayments = GHC.Maybe.Nothing,
      accountCapabilitiesAfterpayClearpayPayments = GHC.Maybe.Nothing,
      accountCapabilitiesAuBecsDebitPayments = GHC.Maybe.Nothing,
      accountCapabilitiesBacsDebitPayments = GHC.Maybe.Nothing,
      accountCapabilitiesBancontactPayments = GHC.Maybe.Nothing,
      accountCapabilitiesBankTransferPayments = GHC.Maybe.Nothing,
      accountCapabilitiesBlikPayments = GHC.Maybe.Nothing,
      accountCapabilitiesBoletoPayments = GHC.Maybe.Nothing,
      accountCapabilitiesCardIssuing = GHC.Maybe.Nothing,
      accountCapabilitiesCardPayments = GHC.Maybe.Nothing,
      accountCapabilitiesCartesBancairesPayments = GHC.Maybe.Nothing,
      accountCapabilitiesCashappPayments = GHC.Maybe.Nothing,
      accountCapabilitiesEpsPayments = GHC.Maybe.Nothing,
      accountCapabilitiesFpxPayments = GHC.Maybe.Nothing,
      accountCapabilitiesGiropayPayments = GHC.Maybe.Nothing,
      accountCapabilitiesGrabpayPayments = GHC.Maybe.Nothing,
      accountCapabilitiesIdealPayments = GHC.Maybe.Nothing,
      accountCapabilitiesIndiaInternationalPayments = GHC.Maybe.Nothing,
      accountCapabilitiesJcbPayments = GHC.Maybe.Nothing,
      accountCapabilitiesKlarnaPayments = GHC.Maybe.Nothing,
      accountCapabilitiesKonbiniPayments = GHC.Maybe.Nothing,
      accountCapabilitiesLegacyPayments = GHC.Maybe.Nothing,
      accountCapabilitiesLinkPayments = GHC.Maybe.Nothing,
      accountCapabilitiesOxxoPayments = GHC.Maybe.Nothing,
      accountCapabilitiesP24Payments = GHC.Maybe.Nothing,
      accountCapabilitiesPaynowPayments = GHC.Maybe.Nothing,
      accountCapabilitiesPromptpayPayments = GHC.Maybe.Nothing,
      accountCapabilitiesRevolutPayPayments = GHC.Maybe.Nothing,
      accountCapabilitiesSepaDebitPayments = GHC.Maybe.Nothing,
      accountCapabilitiesSofortPayments = GHC.Maybe.Nothing,
      accountCapabilitiesTaxReportingUs_1099K = GHC.Maybe.Nothing,
      accountCapabilitiesTaxReportingUs_1099Misc = GHC.Maybe.Nothing,
      accountCapabilitiesTransfers = GHC.Maybe.Nothing,
      accountCapabilitiesTreasury = GHC.Maybe.Nothing,
      accountCapabilitiesUsBankAccountAchPayments = GHC.Maybe.Nothing,
      accountCapabilitiesZipPayments = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.acss_debit_payments@ in the specification.
--
-- The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
data AccountCapabilitiesAcssDebitPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesAcssDebitPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesAcssDebitPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesAcssDebitPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesAcssDebitPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesAcssDebitPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesAcssDebitPayments' where
  toJSON (AccountCapabilitiesAcssDebitPayments'Other val) = val
  toJSON (AccountCapabilitiesAcssDebitPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesAcssDebitPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesAcssDebitPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesAcssDebitPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesAcssDebitPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesAcssDebitPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesAcssDebitPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesAcssDebitPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesAcssDebitPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.affirm_payments@ in the specification.
--
-- The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
data AccountCapabilitiesAffirmPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesAffirmPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesAffirmPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesAffirmPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesAffirmPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesAffirmPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesAffirmPayments' where
  toJSON (AccountCapabilitiesAffirmPayments'Other val) = val
  toJSON (AccountCapabilitiesAffirmPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesAffirmPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesAffirmPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesAffirmPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesAffirmPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesAffirmPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesAffirmPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesAffirmPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesAffirmPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.afterpay_clearpay_payments@ in the specification.
--
-- The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
data AccountCapabilitiesAfterpayClearpayPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesAfterpayClearpayPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesAfterpayClearpayPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesAfterpayClearpayPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesAfterpayClearpayPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesAfterpayClearpayPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesAfterpayClearpayPayments' where
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'Other val) = val
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesAfterpayClearpayPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesAfterpayClearpayPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesAfterpayClearpayPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesAfterpayClearpayPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesAfterpayClearpayPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesAfterpayClearpayPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.au_becs_debit_payments@ in the specification.
--
-- The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
data AccountCapabilitiesAuBecsDebitPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesAuBecsDebitPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesAuBecsDebitPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesAuBecsDebitPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesAuBecsDebitPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesAuBecsDebitPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesAuBecsDebitPayments' where
  toJSON (AccountCapabilitiesAuBecsDebitPayments'Other val) = val
  toJSON (AccountCapabilitiesAuBecsDebitPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesAuBecsDebitPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesAuBecsDebitPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesAuBecsDebitPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesAuBecsDebitPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesAuBecsDebitPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesAuBecsDebitPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesAuBecsDebitPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesAuBecsDebitPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.bacs_debit_payments@ in the specification.
--
-- The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
data AccountCapabilitiesBacsDebitPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesBacsDebitPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesBacsDebitPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesBacsDebitPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesBacsDebitPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesBacsDebitPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesBacsDebitPayments' where
  toJSON (AccountCapabilitiesBacsDebitPayments'Other val) = val
  toJSON (AccountCapabilitiesBacsDebitPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesBacsDebitPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesBacsDebitPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesBacsDebitPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesBacsDebitPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesBacsDebitPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesBacsDebitPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesBacsDebitPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesBacsDebitPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.bancontact_payments@ in the specification.
--
-- The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
data AccountCapabilitiesBancontactPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesBancontactPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesBancontactPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesBancontactPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesBancontactPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesBancontactPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesBancontactPayments' where
  toJSON (AccountCapabilitiesBancontactPayments'Other val) = val
  toJSON (AccountCapabilitiesBancontactPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesBancontactPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesBancontactPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesBancontactPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesBancontactPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesBancontactPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesBancontactPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesBancontactPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesBancontactPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.bank_transfer_payments@ in the specification.
--
-- The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
data AccountCapabilitiesBankTransferPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesBankTransferPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesBankTransferPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesBankTransferPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesBankTransferPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesBankTransferPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesBankTransferPayments' where
  toJSON (AccountCapabilitiesBankTransferPayments'Other val) = val
  toJSON (AccountCapabilitiesBankTransferPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesBankTransferPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesBankTransferPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesBankTransferPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesBankTransferPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesBankTransferPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesBankTransferPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesBankTransferPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesBankTransferPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.blik_payments@ in the specification.
--
-- The status of the blik payments capability of the account, or whether the account can directly process blik charges.
data AccountCapabilitiesBlikPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesBlikPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesBlikPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesBlikPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesBlikPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesBlikPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesBlikPayments' where
  toJSON (AccountCapabilitiesBlikPayments'Other val) = val
  toJSON (AccountCapabilitiesBlikPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesBlikPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesBlikPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesBlikPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesBlikPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesBlikPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesBlikPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesBlikPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesBlikPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.boleto_payments@ in the specification.
--
-- The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
data AccountCapabilitiesBoletoPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesBoletoPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesBoletoPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesBoletoPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesBoletoPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesBoletoPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesBoletoPayments' where
  toJSON (AccountCapabilitiesBoletoPayments'Other val) = val
  toJSON (AccountCapabilitiesBoletoPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesBoletoPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesBoletoPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesBoletoPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesBoletoPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesBoletoPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesBoletoPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesBoletoPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesBoletoPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.card_issuing@ in the specification.
--
-- The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
data AccountCapabilitiesCardIssuing'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesCardIssuing'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesCardIssuing'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesCardIssuing'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesCardIssuing'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesCardIssuing'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesCardIssuing' where
  toJSON (AccountCapabilitiesCardIssuing'Other val) = val
  toJSON (AccountCapabilitiesCardIssuing'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesCardIssuing'EnumActive) = "active"
  toJSON (AccountCapabilitiesCardIssuing'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesCardIssuing'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesCardIssuing' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesCardIssuing'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesCardIssuing'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesCardIssuing'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesCardIssuing'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.card_payments@ in the specification.
--
-- The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
data AccountCapabilitiesCardPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesCardPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesCardPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesCardPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesCardPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesCardPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesCardPayments' where
  toJSON (AccountCapabilitiesCardPayments'Other val) = val
  toJSON (AccountCapabilitiesCardPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesCardPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesCardPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesCardPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesCardPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesCardPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesCardPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesCardPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesCardPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.cartes_bancaires_payments@ in the specification.
--
-- The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
data AccountCapabilitiesCartesBancairesPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesCartesBancairesPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesCartesBancairesPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesCartesBancairesPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesCartesBancairesPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesCartesBancairesPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesCartesBancairesPayments' where
  toJSON (AccountCapabilitiesCartesBancairesPayments'Other val) = val
  toJSON (AccountCapabilitiesCartesBancairesPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesCartesBancairesPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesCartesBancairesPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesCartesBancairesPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesCartesBancairesPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesCartesBancairesPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesCartesBancairesPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesCartesBancairesPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesCartesBancairesPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.cashapp_payments@ in the specification.
--
-- The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.
data AccountCapabilitiesCashappPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesCashappPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesCashappPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesCashappPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesCashappPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesCashappPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesCashappPayments' where
  toJSON (AccountCapabilitiesCashappPayments'Other val) = val
  toJSON (AccountCapabilitiesCashappPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesCashappPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesCashappPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesCashappPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesCashappPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesCashappPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesCashappPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesCashappPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesCashappPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.eps_payments@ in the specification.
--
-- The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
data AccountCapabilitiesEpsPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesEpsPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesEpsPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesEpsPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesEpsPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesEpsPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesEpsPayments' where
  toJSON (AccountCapabilitiesEpsPayments'Other val) = val
  toJSON (AccountCapabilitiesEpsPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesEpsPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesEpsPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesEpsPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesEpsPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesEpsPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesEpsPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesEpsPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesEpsPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.fpx_payments@ in the specification.
--
-- The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
data AccountCapabilitiesFpxPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesFpxPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesFpxPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesFpxPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesFpxPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesFpxPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesFpxPayments' where
  toJSON (AccountCapabilitiesFpxPayments'Other val) = val
  toJSON (AccountCapabilitiesFpxPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesFpxPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesFpxPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesFpxPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesFpxPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesFpxPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesFpxPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesFpxPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesFpxPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.giropay_payments@ in the specification.
--
-- The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
data AccountCapabilitiesGiropayPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesGiropayPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesGiropayPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesGiropayPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesGiropayPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesGiropayPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesGiropayPayments' where
  toJSON (AccountCapabilitiesGiropayPayments'Other val) = val
  toJSON (AccountCapabilitiesGiropayPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesGiropayPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesGiropayPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesGiropayPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesGiropayPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesGiropayPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesGiropayPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesGiropayPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesGiropayPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.grabpay_payments@ in the specification.
--
-- The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
data AccountCapabilitiesGrabpayPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesGrabpayPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesGrabpayPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesGrabpayPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesGrabpayPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesGrabpayPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesGrabpayPayments' where
  toJSON (AccountCapabilitiesGrabpayPayments'Other val) = val
  toJSON (AccountCapabilitiesGrabpayPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesGrabpayPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesGrabpayPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesGrabpayPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesGrabpayPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesGrabpayPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesGrabpayPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesGrabpayPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesGrabpayPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.ideal_payments@ in the specification.
--
-- The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
data AccountCapabilitiesIdealPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesIdealPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesIdealPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesIdealPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesIdealPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesIdealPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesIdealPayments' where
  toJSON (AccountCapabilitiesIdealPayments'Other val) = val
  toJSON (AccountCapabilitiesIdealPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesIdealPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesIdealPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesIdealPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesIdealPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesIdealPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesIdealPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesIdealPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesIdealPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.india_international_payments@ in the specification.
--
-- The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.
data AccountCapabilitiesIndiaInternationalPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesIndiaInternationalPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesIndiaInternationalPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesIndiaInternationalPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesIndiaInternationalPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesIndiaInternationalPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesIndiaInternationalPayments' where
  toJSON (AccountCapabilitiesIndiaInternationalPayments'Other val) = val
  toJSON (AccountCapabilitiesIndiaInternationalPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesIndiaInternationalPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesIndiaInternationalPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesIndiaInternationalPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesIndiaInternationalPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesIndiaInternationalPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesIndiaInternationalPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesIndiaInternationalPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesIndiaInternationalPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.jcb_payments@ in the specification.
--
-- The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
data AccountCapabilitiesJcbPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesJcbPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesJcbPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesJcbPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesJcbPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesJcbPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesJcbPayments' where
  toJSON (AccountCapabilitiesJcbPayments'Other val) = val
  toJSON (AccountCapabilitiesJcbPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesJcbPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesJcbPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesJcbPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesJcbPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesJcbPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesJcbPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesJcbPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesJcbPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.klarna_payments@ in the specification.
--
-- The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
data AccountCapabilitiesKlarnaPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesKlarnaPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesKlarnaPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesKlarnaPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesKlarnaPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesKlarnaPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesKlarnaPayments' where
  toJSON (AccountCapabilitiesKlarnaPayments'Other val) = val
  toJSON (AccountCapabilitiesKlarnaPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesKlarnaPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesKlarnaPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesKlarnaPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesKlarnaPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesKlarnaPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesKlarnaPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesKlarnaPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesKlarnaPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.konbini_payments@ in the specification.
--
-- The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
data AccountCapabilitiesKonbiniPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesKonbiniPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesKonbiniPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesKonbiniPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesKonbiniPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesKonbiniPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesKonbiniPayments' where
  toJSON (AccountCapabilitiesKonbiniPayments'Other val) = val
  toJSON (AccountCapabilitiesKonbiniPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesKonbiniPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesKonbiniPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesKonbiniPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesKonbiniPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesKonbiniPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesKonbiniPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesKonbiniPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesKonbiniPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.legacy_payments@ in the specification.
--
-- The status of the legacy payments capability of the account.
data AccountCapabilitiesLegacyPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesLegacyPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesLegacyPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesLegacyPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesLegacyPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesLegacyPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesLegacyPayments' where
  toJSON (AccountCapabilitiesLegacyPayments'Other val) = val
  toJSON (AccountCapabilitiesLegacyPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesLegacyPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesLegacyPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesLegacyPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesLegacyPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesLegacyPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesLegacyPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesLegacyPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesLegacyPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.link_payments@ in the specification.
--
-- The status of the link_payments capability of the account, or whether the account can directly process Link charges.
data AccountCapabilitiesLinkPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesLinkPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesLinkPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesLinkPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesLinkPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesLinkPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesLinkPayments' where
  toJSON (AccountCapabilitiesLinkPayments'Other val) = val
  toJSON (AccountCapabilitiesLinkPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesLinkPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesLinkPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesLinkPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesLinkPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesLinkPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesLinkPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesLinkPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesLinkPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.oxxo_payments@ in the specification.
--
-- The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
data AccountCapabilitiesOxxoPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesOxxoPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesOxxoPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesOxxoPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesOxxoPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesOxxoPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesOxxoPayments' where
  toJSON (AccountCapabilitiesOxxoPayments'Other val) = val
  toJSON (AccountCapabilitiesOxxoPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesOxxoPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesOxxoPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesOxxoPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesOxxoPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesOxxoPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesOxxoPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesOxxoPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesOxxoPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.p24_payments@ in the specification.
--
-- The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
data AccountCapabilitiesP24Payments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesP24Payments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesP24Payments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesP24Payments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesP24Payments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesP24Payments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesP24Payments' where
  toJSON (AccountCapabilitiesP24Payments'Other val) = val
  toJSON (AccountCapabilitiesP24Payments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesP24Payments'EnumActive) = "active"
  toJSON (AccountCapabilitiesP24Payments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesP24Payments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesP24Payments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesP24Payments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesP24Payments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesP24Payments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesP24Payments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.paynow_payments@ in the specification.
--
-- The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
data AccountCapabilitiesPaynowPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesPaynowPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesPaynowPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesPaynowPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesPaynowPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesPaynowPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesPaynowPayments' where
  toJSON (AccountCapabilitiesPaynowPayments'Other val) = val
  toJSON (AccountCapabilitiesPaynowPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesPaynowPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesPaynowPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesPaynowPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesPaynowPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesPaynowPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesPaynowPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesPaynowPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesPaynowPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.promptpay_payments@ in the specification.
--
-- The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
data AccountCapabilitiesPromptpayPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesPromptpayPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesPromptpayPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesPromptpayPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesPromptpayPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesPromptpayPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesPromptpayPayments' where
  toJSON (AccountCapabilitiesPromptpayPayments'Other val) = val
  toJSON (AccountCapabilitiesPromptpayPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesPromptpayPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesPromptpayPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesPromptpayPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesPromptpayPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesPromptpayPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesPromptpayPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesPromptpayPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesPromptpayPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.revolut_pay_payments@ in the specification.
--
-- The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments.
data AccountCapabilitiesRevolutPayPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesRevolutPayPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesRevolutPayPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesRevolutPayPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesRevolutPayPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesRevolutPayPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesRevolutPayPayments' where
  toJSON (AccountCapabilitiesRevolutPayPayments'Other val) = val
  toJSON (AccountCapabilitiesRevolutPayPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesRevolutPayPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesRevolutPayPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesRevolutPayPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesRevolutPayPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesRevolutPayPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesRevolutPayPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesRevolutPayPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesRevolutPayPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.sepa_debit_payments@ in the specification.
--
-- The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
data AccountCapabilitiesSepaDebitPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesSepaDebitPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesSepaDebitPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesSepaDebitPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesSepaDebitPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesSepaDebitPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesSepaDebitPayments' where
  toJSON (AccountCapabilitiesSepaDebitPayments'Other val) = val
  toJSON (AccountCapabilitiesSepaDebitPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesSepaDebitPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesSepaDebitPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesSepaDebitPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesSepaDebitPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesSepaDebitPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesSepaDebitPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesSepaDebitPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesSepaDebitPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.sofort_payments@ in the specification.
--
-- The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
data AccountCapabilitiesSofortPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesSofortPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesSofortPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesSofortPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesSofortPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesSofortPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesSofortPayments' where
  toJSON (AccountCapabilitiesSofortPayments'Other val) = val
  toJSON (AccountCapabilitiesSofortPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesSofortPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesSofortPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesSofortPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesSofortPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesSofortPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesSofortPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesSofortPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesSofortPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.tax_reporting_us_1099_k@ in the specification.
--
-- The status of the tax reporting 1099-K (US) capability of the account.
data AccountCapabilitiesTaxReportingUs_1099K'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesTaxReportingUs_1099K'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesTaxReportingUs_1099K'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesTaxReportingUs_1099K'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesTaxReportingUs_1099K'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesTaxReportingUs_1099K'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesTaxReportingUs_1099K' where
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'Other val) = val
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'EnumActive) = "active"
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesTaxReportingUs_1099K'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesTaxReportingUs_1099K' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesTaxReportingUs_1099K'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesTaxReportingUs_1099K'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesTaxReportingUs_1099K'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesTaxReportingUs_1099K'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.tax_reporting_us_1099_misc@ in the specification.
--
-- The status of the tax reporting 1099-MISC (US) capability of the account.
data AccountCapabilitiesTaxReportingUs_1099Misc'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesTaxReportingUs_1099Misc'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesTaxReportingUs_1099Misc'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesTaxReportingUs_1099Misc'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesTaxReportingUs_1099Misc'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesTaxReportingUs_1099Misc'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesTaxReportingUs_1099Misc' where
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'Other val) = val
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'EnumActive) = "active"
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesTaxReportingUs_1099Misc'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesTaxReportingUs_1099Misc' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesTaxReportingUs_1099Misc'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesTaxReportingUs_1099Misc'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesTaxReportingUs_1099Misc'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesTaxReportingUs_1099Misc'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.transfers@ in the specification.
--
-- The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
data AccountCapabilitiesTransfers'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesTransfers'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesTransfers'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesTransfers'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesTransfers'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesTransfers'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesTransfers' where
  toJSON (AccountCapabilitiesTransfers'Other val) = val
  toJSON (AccountCapabilitiesTransfers'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesTransfers'EnumActive) = "active"
  toJSON (AccountCapabilitiesTransfers'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesTransfers'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesTransfers' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesTransfers'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesTransfers'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesTransfers'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesTransfers'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.treasury@ in the specification.
--
-- The status of the banking capability, or whether the account can have bank accounts.
data AccountCapabilitiesTreasury'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesTreasury'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesTreasury'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesTreasury'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesTreasury'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesTreasury'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesTreasury' where
  toJSON (AccountCapabilitiesTreasury'Other val) = val
  toJSON (AccountCapabilitiesTreasury'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesTreasury'EnumActive) = "active"
  toJSON (AccountCapabilitiesTreasury'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesTreasury'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesTreasury' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesTreasury'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesTreasury'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesTreasury'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesTreasury'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.us_bank_account_ach_payments@ in the specification.
--
-- The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
data AccountCapabilitiesUsBankAccountAchPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesUsBankAccountAchPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesUsBankAccountAchPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesUsBankAccountAchPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesUsBankAccountAchPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesUsBankAccountAchPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesUsBankAccountAchPayments' where
  toJSON (AccountCapabilitiesUsBankAccountAchPayments'Other val) = val
  toJSON (AccountCapabilitiesUsBankAccountAchPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesUsBankAccountAchPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesUsBankAccountAchPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesUsBankAccountAchPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesUsBankAccountAchPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesUsBankAccountAchPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesUsBankAccountAchPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesUsBankAccountAchPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesUsBankAccountAchPayments'Other val
      )

-- | Defines the enum schema located at @components.schemas.account_capabilities.properties.zip_payments@ in the specification.
--
-- The status of the Zip capability of the account, or whether the account can directly process Zip charges.
data AccountCapabilitiesZipPayments'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    AccountCapabilitiesZipPayments'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    AccountCapabilitiesZipPayments'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"active"@
    AccountCapabilitiesZipPayments'EnumActive
  | -- | Represents the JSON value @"inactive"@
    AccountCapabilitiesZipPayments'EnumInactive
  | -- | Represents the JSON value @"pending"@
    AccountCapabilitiesZipPayments'EnumPending
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilitiesZipPayments' where
  toJSON (AccountCapabilitiesZipPayments'Other val) = val
  toJSON (AccountCapabilitiesZipPayments'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (AccountCapabilitiesZipPayments'EnumActive) = "active"
  toJSON (AccountCapabilitiesZipPayments'EnumInactive) = "inactive"
  toJSON (AccountCapabilitiesZipPayments'EnumPending) = "pending"

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilitiesZipPayments' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "active" -> AccountCapabilitiesZipPayments'EnumActive
            | val GHC.Classes.== "inactive" -> AccountCapabilitiesZipPayments'EnumInactive
            | val GHC.Classes.== "pending" -> AccountCapabilitiesZipPayments'EnumPending
            | GHC.Base.otherwise -> AccountCapabilitiesZipPayments'Other val
      )
