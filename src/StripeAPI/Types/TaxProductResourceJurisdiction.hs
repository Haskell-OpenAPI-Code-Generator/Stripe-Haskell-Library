{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TaxProductResourceJurisdiction
module StripeAPI.Types.TaxProductResourceJurisdiction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax_product_resource_jurisdiction@ in the specification.
data TaxProductResourceJurisdiction = TaxProductResourceJurisdiction
  { -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    taxProductResourceJurisdictionCountry :: Data.Text.Internal.Text,
    -- | display_name: A human-readable name for the jurisdiction imposing the tax.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    taxProductResourceJurisdictionDisplayName :: Data.Text.Internal.Text,
    -- | level: Indicates the level of the jurisdiction imposing the tax.
    taxProductResourceJurisdictionLevel :: TaxProductResourceJurisdictionLevel',
    -- | state: [ISO 3166-2 subdivision code](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-2:US), without country prefix. For example, \"NY\" for New York, United States.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    taxProductResourceJurisdictionState :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceJurisdiction where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["country" Data.Aeson.Types.ToJSON..= taxProductResourceJurisdictionCountry obj] : ["display_name" Data.Aeson.Types.ToJSON..= taxProductResourceJurisdictionDisplayName obj] : ["level" Data.Aeson.Types.ToJSON..= taxProductResourceJurisdictionLevel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (taxProductResourceJurisdictionState obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["country" Data.Aeson.Types.ToJSON..= taxProductResourceJurisdictionCountry obj] : ["display_name" Data.Aeson.Types.ToJSON..= taxProductResourceJurisdictionDisplayName obj] : ["level" Data.Aeson.Types.ToJSON..= taxProductResourceJurisdictionLevel obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("state" Data.Aeson.Types.ToJSON..=)) (taxProductResourceJurisdictionState obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceJurisdiction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxProductResourceJurisdiction" (\obj -> (((GHC.Base.pure TaxProductResourceJurisdiction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "level")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "state"))

-- | Create a new 'TaxProductResourceJurisdiction' with all required fields.
mkTaxProductResourceJurisdiction ::
  -- | 'taxProductResourceJurisdictionCountry'
  Data.Text.Internal.Text ->
  -- | 'taxProductResourceJurisdictionDisplayName'
  Data.Text.Internal.Text ->
  -- | 'taxProductResourceJurisdictionLevel'
  TaxProductResourceJurisdictionLevel' ->
  TaxProductResourceJurisdiction
mkTaxProductResourceJurisdiction taxProductResourceJurisdictionCountry taxProductResourceJurisdictionDisplayName taxProductResourceJurisdictionLevel =
  TaxProductResourceJurisdiction
    { taxProductResourceJurisdictionCountry = taxProductResourceJurisdictionCountry,
      taxProductResourceJurisdictionDisplayName = taxProductResourceJurisdictionDisplayName,
      taxProductResourceJurisdictionLevel = taxProductResourceJurisdictionLevel,
      taxProductResourceJurisdictionState = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.tax_product_resource_jurisdiction.properties.level@ in the specification.
--
-- Indicates the level of the jurisdiction imposing the tax.
data TaxProductResourceJurisdictionLevel'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    TaxProductResourceJurisdictionLevel'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    TaxProductResourceJurisdictionLevel'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"city"@
    TaxProductResourceJurisdictionLevel'EnumCity
  | -- | Represents the JSON value @"country"@
    TaxProductResourceJurisdictionLevel'EnumCountry
  | -- | Represents the JSON value @"county"@
    TaxProductResourceJurisdictionLevel'EnumCounty
  | -- | Represents the JSON value @"district"@
    TaxProductResourceJurisdictionLevel'EnumDistrict
  | -- | Represents the JSON value @"state"@
    TaxProductResourceJurisdictionLevel'EnumState
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceJurisdictionLevel' where
  toJSON (TaxProductResourceJurisdictionLevel'Other val) = val
  toJSON (TaxProductResourceJurisdictionLevel'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (TaxProductResourceJurisdictionLevel'EnumCity) = "city"
  toJSON (TaxProductResourceJurisdictionLevel'EnumCountry) = "country"
  toJSON (TaxProductResourceJurisdictionLevel'EnumCounty) = "county"
  toJSON (TaxProductResourceJurisdictionLevel'EnumDistrict) = "district"
  toJSON (TaxProductResourceJurisdictionLevel'EnumState) = "state"

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceJurisdictionLevel' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "city" -> TaxProductResourceJurisdictionLevel'EnumCity
            | val GHC.Classes.== "country" -> TaxProductResourceJurisdictionLevel'EnumCountry
            | val GHC.Classes.== "county" -> TaxProductResourceJurisdictionLevel'EnumCounty
            | val GHC.Classes.== "district" -> TaxProductResourceJurisdictionLevel'EnumDistrict
            | val GHC.Classes.== "state" -> TaxProductResourceJurisdictionLevel'EnumState
            | GHC.Base.otherwise -> TaxProductResourceJurisdictionLevel'Other val
      )
