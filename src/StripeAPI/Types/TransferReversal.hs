{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema TransferReversal
module StripeAPI.Types.TransferReversal where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.BalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.Refund
import {-# SOURCE #-} StripeAPI.Types.Transfer
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema transfer_reversal
--
-- [Stripe Connect](https:\/\/stripe.com\/docs\/connect) platforms can reverse transfers made to a
-- connected account, either entirely or partially, and can also specify whether
-- to refund any related application fees. Transfer reversals add to the
-- platform\'s balance and subtract from the destination account\'s balance.
--
-- Reversing a transfer that was made for a [destination
-- charge](\/docs\/connect\/destination-charges) is allowed only up to the amount of
-- the charge. It is possible to reverse a
-- [transfer_group](https:\/\/stripe.com\/docs\/connect\/charges-transfers\#transfer-options)
-- transfer only if the destination account has enough balance to cover the
-- reversal.
--
-- Related guide: [Reversing Transfers](https:\/\/stripe.com\/docs\/connect\/charges-transfers\#reversing-transfers).
data TransferReversal
  = TransferReversal
      { -- | amount: Amount, in %s.
        transferReversalAmount :: GHC.Types.Int,
        -- | balance_transaction: Balance transaction that describes the impact on your account balance.
        transferReversalBalanceTransaction :: (GHC.Maybe.Maybe TransferReversalBalanceTransaction'Variants),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        transferReversalCreated :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        transferReversalCurrency :: Data.Text.Internal.Text,
        -- | destination_payment_refund: Linked payment refund for the transfer reversal.
        transferReversalDestinationPaymentRefund :: (GHC.Maybe.Maybe TransferReversalDestinationPaymentRefund'Variants),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        transferReversalId :: Data.Text.Internal.Text,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        transferReversalMetadata :: Data.Aeson.Types.Internal.Object,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        transferReversalObject :: TransferReversalObject',
        -- | source_refund: ID of the refund responsible for the transfer reversal.
        transferReversalSourceRefund :: (GHC.Maybe.Maybe TransferReversalSourceRefund'Variants),
        -- | transfer: ID of the transfer that was reversed.
        transferReversalTransfer :: TransferReversalTransfer'Variants
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TransferReversal where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (transferReversalAmount obj) : (Data.Aeson..=) "balance_transaction" (transferReversalBalanceTransaction obj) : (Data.Aeson..=) "created" (transferReversalCreated obj) : (Data.Aeson..=) "currency" (transferReversalCurrency obj) : (Data.Aeson..=) "destination_payment_refund" (transferReversalDestinationPaymentRefund obj) : (Data.Aeson..=) "id" (transferReversalId obj) : (Data.Aeson..=) "metadata" (transferReversalMetadata obj) : (Data.Aeson..=) "object" (transferReversalObject obj) : (Data.Aeson..=) "source_refund" (transferReversalSourceRefund obj) : (Data.Aeson..=) "transfer" (transferReversalTransfer obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (transferReversalAmount obj) GHC.Base.<> ((Data.Aeson..=) "balance_transaction" (transferReversalBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "created" (transferReversalCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (transferReversalCurrency obj) GHC.Base.<> ((Data.Aeson..=) "destination_payment_refund" (transferReversalDestinationPaymentRefund obj) GHC.Base.<> ((Data.Aeson..=) "id" (transferReversalId obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (transferReversalMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (transferReversalObject obj) GHC.Base.<> ((Data.Aeson..=) "source_refund" (transferReversalSourceRefund obj) GHC.Base.<> (Data.Aeson..=) "transfer" (transferReversalTransfer obj))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON TransferReversal where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TransferReversal" (\obj -> (((((((((GHC.Base.pure TransferReversal GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "destination_payment_refund")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_refund")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "transfer"))

-- | Define the one-of schema transfer_reversalBalance_transaction\'
--
-- Balance transaction that describes the impact on your account balance.
data TransferReversalBalanceTransaction'Variants
  = TransferReversalBalanceTransaction'BalanceTransaction BalanceTransaction
  | TransferReversalBalanceTransaction'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferReversalBalanceTransaction'Variants where
  toJSON (TransferReversalBalanceTransaction'BalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TransferReversalBalanceTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TransferReversalBalanceTransaction'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferReversalBalanceTransaction'BalanceTransaction a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferReversalBalanceTransaction'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema transfer_reversalDestination_payment_refund\'
--
-- Linked payment refund for the transfer reversal.
data TransferReversalDestinationPaymentRefund'Variants
  = TransferReversalDestinationPaymentRefund'Refund Refund
  | TransferReversalDestinationPaymentRefund'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferReversalDestinationPaymentRefund'Variants where
  toJSON (TransferReversalDestinationPaymentRefund'Refund a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TransferReversalDestinationPaymentRefund'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TransferReversalDestinationPaymentRefund'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferReversalDestinationPaymentRefund'Refund a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferReversalDestinationPaymentRefund'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema transfer_reversalObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data TransferReversalObject'
  = TransferReversalObject'EnumOther Data.Aeson.Types.Internal.Value
  | TransferReversalObject'EnumTyped Data.Text.Internal.Text
  | TransferReversalObject'EnumStringTransferReversal
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferReversalObject' where
  toJSON (TransferReversalObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TransferReversalObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (TransferReversalObject'EnumStringTransferReversal) = "transfer_reversal"

instance Data.Aeson.Types.FromJSON.FromJSON TransferReversalObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "transfer_reversal" -> TransferReversalObject'EnumStringTransferReversal
            | GHC.Base.otherwise -> TransferReversalObject'EnumOther val
      )

-- | Define the one-of schema transfer_reversalSource_refund\'
--
-- ID of the refund responsible for the transfer reversal.
data TransferReversalSourceRefund'Variants
  = TransferReversalSourceRefund'Refund Refund
  | TransferReversalSourceRefund'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferReversalSourceRefund'Variants where
  toJSON (TransferReversalSourceRefund'Refund a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TransferReversalSourceRefund'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TransferReversalSourceRefund'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferReversalSourceRefund'Refund a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferReversalSourceRefund'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema transfer_reversalTransfer\'
--
-- ID of the transfer that was reversed.
data TransferReversalTransfer'Variants
  = TransferReversalTransfer'Transfer Transfer
  | TransferReversalTransfer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TransferReversalTransfer'Variants where
  toJSON (TransferReversalTransfer'Transfer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (TransferReversalTransfer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON TransferReversalTransfer'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferReversalTransfer'Transfer a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ TransferReversalTransfer'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
