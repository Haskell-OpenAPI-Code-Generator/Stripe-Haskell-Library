{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema LineItem
module StripeAPI.Types.LineItem where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.DeletedProduct
import {-# SOURCE #-} StripeAPI.Types.InvoiceLineItemPeriod
import {-# SOURCE #-} StripeAPI.Types.InvoiceTaxAmount
import {-# SOURCE #-} StripeAPI.Types.Plan
import {-# SOURCE #-} StripeAPI.Types.PlanTier
import {-# SOURCE #-} StripeAPI.Types.Product
import {-# SOURCE #-} StripeAPI.Types.TaxRate
import {-# SOURCE #-} StripeAPI.Types.TransformUsage
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema line_item
data LineItem
  = LineItem
      { -- | amount: The amount, in %s.
        lineItemAmount :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        lineItemCurrency :: Data.Text.Internal.Text,
        -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        lineItemDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | discountable: If true, discounts will apply to this line item. Always false for prorations.
        lineItemDiscountable :: GHC.Types.Bool,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        lineItemId :: Data.Text.Internal.Text,
        -- | invoice_item: The ID of the [invoice item](https:\/\/stripe.com\/docs\/api\/invoiceitems) associated with this line item if any.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        lineItemInvoiceItem :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        lineItemLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with \`type=subscription\` this will reflect the metadata of the subscription that caused the line item to be created.
        lineItemMetadata :: Data.Aeson.Types.Internal.Object,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        lineItemObject :: LineItemObject',
        -- | period:
        lineItemPeriod :: InvoiceLineItemPeriod,
        -- | plan: The plan of the subscription, if the line item is a subscription or a proration.
        lineItemPlan :: (GHC.Maybe.Maybe LineItemPlan'),
        -- | proration: Whether this is a proration.
        lineItemProration :: GHC.Types.Bool,
        -- | quantity: The quantity of the subscription, if the line item is a subscription or a proration.
        lineItemQuantity :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | subscription: The subscription that the invoice item pertains to, if any.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        lineItemSubscription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | subscription_item: The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        lineItemSubscriptionItem :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | tax_amounts: The amount of tax calculated per tax rate for this line item
        lineItemTaxAmounts :: (GHC.Maybe.Maybe ([InvoiceTaxAmount])),
        -- | tax_rates: The tax rates which apply to the line item.
        lineItemTaxRates :: (GHC.Maybe.Maybe ([TaxRate])),
        -- | type: A string identifying the type of the source of this line item, either an \`invoiceitem\` or a \`subscription\`.
        lineItemType :: LineItemType'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON LineItem where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (lineItemAmount obj) : (Data.Aeson..=) "currency" (lineItemCurrency obj) : (Data.Aeson..=) "description" (lineItemDescription obj) : (Data.Aeson..=) "discountable" (lineItemDiscountable obj) : (Data.Aeson..=) "id" (lineItemId obj) : (Data.Aeson..=) "invoice_item" (lineItemInvoiceItem obj) : (Data.Aeson..=) "livemode" (lineItemLivemode obj) : (Data.Aeson..=) "metadata" (lineItemMetadata obj) : (Data.Aeson..=) "object" (lineItemObject obj) : (Data.Aeson..=) "period" (lineItemPeriod obj) : (Data.Aeson..=) "plan" (lineItemPlan obj) : (Data.Aeson..=) "proration" (lineItemProration obj) : (Data.Aeson..=) "quantity" (lineItemQuantity obj) : (Data.Aeson..=) "subscription" (lineItemSubscription obj) : (Data.Aeson..=) "subscription_item" (lineItemSubscriptionItem obj) : (Data.Aeson..=) "tax_amounts" (lineItemTaxAmounts obj) : (Data.Aeson..=) "tax_rates" (lineItemTaxRates obj) : (Data.Aeson..=) "type" (lineItemType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (lineItemAmount obj) GHC.Base.<> ((Data.Aeson..=) "currency" (lineItemCurrency obj) GHC.Base.<> ((Data.Aeson..=) "description" (lineItemDescription obj) GHC.Base.<> ((Data.Aeson..=) "discountable" (lineItemDiscountable obj) GHC.Base.<> ((Data.Aeson..=) "id" (lineItemId obj) GHC.Base.<> ((Data.Aeson..=) "invoice_item" (lineItemInvoiceItem obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (lineItemLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (lineItemMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (lineItemObject obj) GHC.Base.<> ((Data.Aeson..=) "period" (lineItemPeriod obj) GHC.Base.<> ((Data.Aeson..=) "plan" (lineItemPlan obj) GHC.Base.<> ((Data.Aeson..=) "proration" (lineItemProration obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (lineItemQuantity obj) GHC.Base.<> ((Data.Aeson..=) "subscription" (lineItemSubscription obj) GHC.Base.<> ((Data.Aeson..=) "subscription_item" (lineItemSubscriptionItem obj) GHC.Base.<> ((Data.Aeson..=) "tax_amounts" (lineItemTaxAmounts obj) GHC.Base.<> ((Data.Aeson..=) "tax_rates" (lineItemTaxRates obj) GHC.Base.<> (Data.Aeson..=) "type" (lineItemType obj))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON LineItem where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "LineItem" (\obj -> (((((((((((((((((GHC.Base.pure LineItem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discountable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice_item")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_item")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_amounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Defines the enum schema line_itemObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data LineItemObject'
  = LineItemObject'EnumOther Data.Aeson.Types.Internal.Value
  | LineItemObject'EnumTyped Data.Text.Internal.Text
  | LineItemObject'EnumStringLineItem
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemObject' where
  toJSON (LineItemObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemObject'EnumStringLineItem) = "line_item"

instance Data.Aeson.Types.FromJSON.FromJSON LineItemObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "line_item" -> LineItemObject'EnumStringLineItem
            | GHC.Base.otherwise -> LineItemObject'EnumOther val
      )

-- | Defines the data type for the schema line_itemPlan\'
--
-- The plan of the subscription, if the line item is a subscription or a proration.
data LineItemPlan'
  = LineItemPlan'
      { -- | active: Whether the plan is currently available for new subscriptions.
        lineItemPlan'Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | aggregate_usage: Specifies a usage aggregation strategy for plans of \`usage_type=metered\`. Allowed values are \`sum\` for summing up all usage during a period, \`last_during_period\` for using the last usage record reported within a period, \`last_ever\` for using the last usage record ever (across period bounds) or \`max\` which uses the usage record with the maximum reported usage during a period. Defaults to \`sum\`.
        lineItemPlan'AggregateUsage :: (GHC.Maybe.Maybe LineItemPlan'AggregateUsage'),
        -- | amount: The amount in %s to be charged on the interval specified.
        lineItemPlan'Amount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | amount_decimal: Same as \`amount\`, but contains a decimal value with at most 12 decimal places.
        lineItemPlan'AmountDecimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | billing_scheme: Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`amount\`) will be charged per unit in \`quantity\` (for plans with \`usage_type=licensed\`), or per unit of total usage (for plans with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
        lineItemPlan'BillingScheme :: (GHC.Maybe.Maybe LineItemPlan'BillingScheme'),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        lineItemPlan'Created :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        lineItemPlan'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        lineItemPlan'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | interval: The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
        lineItemPlan'Interval :: (GHC.Maybe.Maybe LineItemPlan'Interval'),
        -- | interval_count: The number of intervals (specified in the \`interval\` attribute) between subscription billings. For example, \`interval=month\` and \`interval_count=3\` bills every 3 months.
        lineItemPlan'IntervalCount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        lineItemPlan'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        lineItemPlan'Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | nickname: A brief description of the plan, hidden from customers.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        lineItemPlan'Nickname :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        lineItemPlan'Object :: (GHC.Maybe.Maybe LineItemPlan'Object'),
        -- | product: The product whose pricing this plan determines.
        lineItemPlan'Product :: (GHC.Maybe.Maybe LineItemPlan'Product'Variants),
        -- | tiers: Each element represents a pricing tier. This parameter requires \`billing_scheme\` to be set to \`tiered\`. See also the documentation for \`billing_scheme\`.
        lineItemPlan'Tiers :: (GHC.Maybe.Maybe ([PlanTier])),
        -- | tiers_mode: Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
        lineItemPlan'TiersMode :: (GHC.Maybe.Maybe LineItemPlan'TiersMode'),
        -- | transform_usage: Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \`tiers\`.
        lineItemPlan'TransformUsage :: (GHC.Maybe.Maybe LineItemPlan'TransformUsage'),
        -- | trial_period_days: Default number of trial days when subscribing a customer to this plan using [\`trial_from_plan=true\`](https:\/\/stripe.com\/docs\/api\#create_subscription-trial_from_plan).
        lineItemPlan'TrialPeriodDays :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | usage_type: Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
        lineItemPlan'UsageType :: (GHC.Maybe.Maybe LineItemPlan'UsageType')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (lineItemPlan'Active obj) : (Data.Aeson..=) "aggregate_usage" (lineItemPlan'AggregateUsage obj) : (Data.Aeson..=) "amount" (lineItemPlan'Amount obj) : (Data.Aeson..=) "amount_decimal" (lineItemPlan'AmountDecimal obj) : (Data.Aeson..=) "billing_scheme" (lineItemPlan'BillingScheme obj) : (Data.Aeson..=) "created" (lineItemPlan'Created obj) : (Data.Aeson..=) "currency" (lineItemPlan'Currency obj) : (Data.Aeson..=) "id" (lineItemPlan'Id obj) : (Data.Aeson..=) "interval" (lineItemPlan'Interval obj) : (Data.Aeson..=) "interval_count" (lineItemPlan'IntervalCount obj) : (Data.Aeson..=) "livemode" (lineItemPlan'Livemode obj) : (Data.Aeson..=) "metadata" (lineItemPlan'Metadata obj) : (Data.Aeson..=) "nickname" (lineItemPlan'Nickname obj) : (Data.Aeson..=) "object" (lineItemPlan'Object obj) : (Data.Aeson..=) "product" (lineItemPlan'Product obj) : (Data.Aeson..=) "tiers" (lineItemPlan'Tiers obj) : (Data.Aeson..=) "tiers_mode" (lineItemPlan'TiersMode obj) : (Data.Aeson..=) "transform_usage" (lineItemPlan'TransformUsage obj) : (Data.Aeson..=) "trial_period_days" (lineItemPlan'TrialPeriodDays obj) : (Data.Aeson..=) "usage_type" (lineItemPlan'UsageType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (lineItemPlan'Active obj) GHC.Base.<> ((Data.Aeson..=) "aggregate_usage" (lineItemPlan'AggregateUsage obj) GHC.Base.<> ((Data.Aeson..=) "amount" (lineItemPlan'Amount obj) GHC.Base.<> ((Data.Aeson..=) "amount_decimal" (lineItemPlan'AmountDecimal obj) GHC.Base.<> ((Data.Aeson..=) "billing_scheme" (lineItemPlan'BillingScheme obj) GHC.Base.<> ((Data.Aeson..=) "created" (lineItemPlan'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (lineItemPlan'Currency obj) GHC.Base.<> ((Data.Aeson..=) "id" (lineItemPlan'Id obj) GHC.Base.<> ((Data.Aeson..=) "interval" (lineItemPlan'Interval obj) GHC.Base.<> ((Data.Aeson..=) "interval_count" (lineItemPlan'IntervalCount obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (lineItemPlan'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (lineItemPlan'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "nickname" (lineItemPlan'Nickname obj) GHC.Base.<> ((Data.Aeson..=) "object" (lineItemPlan'Object obj) GHC.Base.<> ((Data.Aeson..=) "product" (lineItemPlan'Product obj) GHC.Base.<> ((Data.Aeson..=) "tiers" (lineItemPlan'Tiers obj) GHC.Base.<> ((Data.Aeson..=) "tiers_mode" (lineItemPlan'TiersMode obj) GHC.Base.<> ((Data.Aeson..=) "transform_usage" (lineItemPlan'TransformUsage obj) GHC.Base.<> ((Data.Aeson..=) "trial_period_days" (lineItemPlan'TrialPeriodDays obj) GHC.Base.<> (Data.Aeson..=) "usage_type" (lineItemPlan'UsageType obj))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "LineItemPlan'" (\obj -> (((((((((((((((((((GHC.Base.pure LineItemPlan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "aggregate_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_scheme")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transform_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_period_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_type"))

-- | Defines the enum schema line_itemPlan\'Aggregate_usage\'
--
-- Specifies a usage aggregation strategy for plans of \`usage_type=metered\`. Allowed values are \`sum\` for summing up all usage during a period, \`last_during_period\` for using the last usage record reported within a period, \`last_ever\` for using the last usage record ever (across period bounds) or \`max\` which uses the usage record with the maximum reported usage during a period. Defaults to \`sum\`.
data LineItemPlan'AggregateUsage'
  = LineItemPlan'AggregateUsage'EnumOther Data.Aeson.Types.Internal.Value
  | LineItemPlan'AggregateUsage'EnumTyped Data.Text.Internal.Text
  | LineItemPlan'AggregateUsage'EnumStringLastDuringPeriod
  | LineItemPlan'AggregateUsage'EnumStringLastEver
  | LineItemPlan'AggregateUsage'EnumStringMax
  | LineItemPlan'AggregateUsage'EnumStringSum
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan'AggregateUsage' where
  toJSON (LineItemPlan'AggregateUsage'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'AggregateUsage'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'AggregateUsage'EnumStringLastDuringPeriod) = "last_during_period"
  toJSON (LineItemPlan'AggregateUsage'EnumStringLastEver) = "last_ever"
  toJSON (LineItemPlan'AggregateUsage'EnumStringMax) = "max"
  toJSON (LineItemPlan'AggregateUsage'EnumStringSum) = "sum"

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'AggregateUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "last_during_period" -> LineItemPlan'AggregateUsage'EnumStringLastDuringPeriod
            | val GHC.Classes.== "last_ever" -> LineItemPlan'AggregateUsage'EnumStringLastEver
            | val GHC.Classes.== "max" -> LineItemPlan'AggregateUsage'EnumStringMax
            | val GHC.Classes.== "sum" -> LineItemPlan'AggregateUsage'EnumStringSum
            | GHC.Base.otherwise -> LineItemPlan'AggregateUsage'EnumOther val
      )

-- | Defines the enum schema line_itemPlan\'Billing_scheme\'
--
-- Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`amount\`) will be charged per unit in \`quantity\` (for plans with \`usage_type=licensed\`), or per unit of total usage (for plans with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
data LineItemPlan'BillingScheme'
  = LineItemPlan'BillingScheme'EnumOther Data.Aeson.Types.Internal.Value
  | LineItemPlan'BillingScheme'EnumTyped Data.Text.Internal.Text
  | LineItemPlan'BillingScheme'EnumStringPerUnit
  | LineItemPlan'BillingScheme'EnumStringTiered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan'BillingScheme' where
  toJSON (LineItemPlan'BillingScheme'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'BillingScheme'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'BillingScheme'EnumStringPerUnit) = "per_unit"
  toJSON (LineItemPlan'BillingScheme'EnumStringTiered) = "tiered"

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'BillingScheme' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "per_unit" -> LineItemPlan'BillingScheme'EnumStringPerUnit
            | val GHC.Classes.== "tiered" -> LineItemPlan'BillingScheme'EnumStringTiered
            | GHC.Base.otherwise -> LineItemPlan'BillingScheme'EnumOther val
      )

-- | Defines the enum schema line_itemPlan\'Interval\'
--
-- The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
data LineItemPlan'Interval'
  = LineItemPlan'Interval'EnumOther Data.Aeson.Types.Internal.Value
  | LineItemPlan'Interval'EnumTyped Data.Text.Internal.Text
  | LineItemPlan'Interval'EnumStringDay
  | LineItemPlan'Interval'EnumStringMonth
  | LineItemPlan'Interval'EnumStringWeek
  | LineItemPlan'Interval'EnumStringYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan'Interval' where
  toJSON (LineItemPlan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'Interval'EnumStringDay) = "day"
  toJSON (LineItemPlan'Interval'EnumStringMonth) = "month"
  toJSON (LineItemPlan'Interval'EnumStringWeek) = "week"
  toJSON (LineItemPlan'Interval'EnumStringYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'Interval' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "day" -> LineItemPlan'Interval'EnumStringDay
            | val GHC.Classes.== "month" -> LineItemPlan'Interval'EnumStringMonth
            | val GHC.Classes.== "week" -> LineItemPlan'Interval'EnumStringWeek
            | val GHC.Classes.== "year" -> LineItemPlan'Interval'EnumStringYear
            | GHC.Base.otherwise -> LineItemPlan'Interval'EnumOther val
      )

-- | Defines the enum schema line_itemPlan\'Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data LineItemPlan'Object'
  = LineItemPlan'Object'EnumOther Data.Aeson.Types.Internal.Value
  | LineItemPlan'Object'EnumTyped Data.Text.Internal.Text
  | LineItemPlan'Object'EnumStringPlan
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan'Object' where
  toJSON (LineItemPlan'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'Object'EnumStringPlan) = "plan"

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "plan" -> LineItemPlan'Object'EnumStringPlan
            | GHC.Base.otherwise -> LineItemPlan'Object'EnumOther val
      )

-- | Define the one-of schema line_itemPlan\'Product\'
--
-- The product whose pricing this plan determines.
data LineItemPlan'Product'Variants
  = LineItemPlan'Product'DeletedProduct DeletedProduct
  | LineItemPlan'Product'Product Product
  | LineItemPlan'Product'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan'Product'Variants where
  toJSON (LineItemPlan'Product'DeletedProduct a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (LineItemPlan'Product'Product a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (LineItemPlan'Product'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'Product'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ LineItemPlan'Product'DeletedProduct a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ LineItemPlan'Product'Product a
      Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
        Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ LineItemPlan'Product'Text a
        Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema line_itemPlan\'Tiers_mode\'
--
-- Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
data LineItemPlan'TiersMode'
  = LineItemPlan'TiersMode'EnumOther Data.Aeson.Types.Internal.Value
  | LineItemPlan'TiersMode'EnumTyped Data.Text.Internal.Text
  | LineItemPlan'TiersMode'EnumStringGraduated
  | LineItemPlan'TiersMode'EnumStringVolume
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan'TiersMode' where
  toJSON (LineItemPlan'TiersMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'TiersMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'TiersMode'EnumStringGraduated) = "graduated"
  toJSON (LineItemPlan'TiersMode'EnumStringVolume) = "volume"

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'TiersMode' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "graduated" -> LineItemPlan'TiersMode'EnumStringGraduated
            | val GHC.Classes.== "volume" -> LineItemPlan'TiersMode'EnumStringVolume
            | GHC.Base.otherwise -> LineItemPlan'TiersMode'EnumOther val
      )

-- | Defines the data type for the schema line_itemPlan\'Transform_usage\'
--
-- Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \\\`tiers\\\`.
data LineItemPlan'TransformUsage'
  = LineItemPlan'TransformUsage'
      { -- | divide_by: Divide usage by this number.
        lineItemPlan'TransformUsage'DivideBy :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | round: After division, either round the result \`up\` or \`down\`.
        lineItemPlan'TransformUsage'Round :: (GHC.Maybe.Maybe LineItemPlan'TransformUsage'Round')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan'TransformUsage' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "divide_by" (lineItemPlan'TransformUsage'DivideBy obj) : (Data.Aeson..=) "round" (lineItemPlan'TransformUsage'Round obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "divide_by" (lineItemPlan'TransformUsage'DivideBy obj) GHC.Base.<> (Data.Aeson..=) "round" (lineItemPlan'TransformUsage'Round obj))

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'TransformUsage' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "LineItemPlan'TransformUsage'" (\obj -> (GHC.Base.pure LineItemPlan'TransformUsage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "divide_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "round"))

-- | Defines the enum schema line_itemPlan\'Transform_usage\'Round\'
--
-- After division, either round the result \`up\` or \`down\`.
data LineItemPlan'TransformUsage'Round'
  = LineItemPlan'TransformUsage'Round'EnumOther Data.Aeson.Types.Internal.Value
  | LineItemPlan'TransformUsage'Round'EnumTyped Data.Text.Internal.Text
  | LineItemPlan'TransformUsage'Round'EnumStringDown
  | LineItemPlan'TransformUsage'Round'EnumStringUp
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan'TransformUsage'Round' where
  toJSON (LineItemPlan'TransformUsage'Round'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'TransformUsage'Round'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'TransformUsage'Round'EnumStringDown) = "down"
  toJSON (LineItemPlan'TransformUsage'Round'EnumStringUp) = "up"

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'TransformUsage'Round' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "down" -> LineItemPlan'TransformUsage'Round'EnumStringDown
            | val GHC.Classes.== "up" -> LineItemPlan'TransformUsage'Round'EnumStringUp
            | GHC.Base.otherwise -> LineItemPlan'TransformUsage'Round'EnumOther val
      )

-- | Defines the enum schema line_itemPlan\'Usage_type\'
--
-- Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
data LineItemPlan'UsageType'
  = LineItemPlan'UsageType'EnumOther Data.Aeson.Types.Internal.Value
  | LineItemPlan'UsageType'EnumTyped Data.Text.Internal.Text
  | LineItemPlan'UsageType'EnumStringLicensed
  | LineItemPlan'UsageType'EnumStringMetered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemPlan'UsageType' where
  toJSON (LineItemPlan'UsageType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'UsageType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemPlan'UsageType'EnumStringLicensed) = "licensed"
  toJSON (LineItemPlan'UsageType'EnumStringMetered) = "metered"

instance Data.Aeson.Types.FromJSON.FromJSON LineItemPlan'UsageType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "licensed" -> LineItemPlan'UsageType'EnumStringLicensed
            | val GHC.Classes.== "metered" -> LineItemPlan'UsageType'EnumStringMetered
            | GHC.Base.otherwise -> LineItemPlan'UsageType'EnumOther val
      )

-- | Defines the enum schema line_itemType\'
--
-- A string identifying the type of the source of this line item, either an \`invoiceitem\` or a \`subscription\`.
data LineItemType'
  = LineItemType'EnumOther Data.Aeson.Types.Internal.Value
  | LineItemType'EnumTyped Data.Text.Internal.Text
  | LineItemType'EnumStringInvoiceitem
  | LineItemType'EnumStringSubscription
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON LineItemType' where
  toJSON (LineItemType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (LineItemType'EnumStringInvoiceitem) = "invoiceitem"
  toJSON (LineItemType'EnumStringSubscription) = "subscription"

instance Data.Aeson.Types.FromJSON.FromJSON LineItemType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "invoiceitem" -> LineItemType'EnumStringInvoiceitem
            | val GHC.Classes.== "subscription" -> LineItemType'EnumStringSubscription
            | GHC.Base.otherwise -> LineItemType'EnumOther val
      )
