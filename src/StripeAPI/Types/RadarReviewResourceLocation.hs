{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema RadarReviewResourceLocation
module StripeAPI.Types.RadarReviewResourceLocation where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.radar_review_resource_location@ in the specification.
data RadarReviewResourceLocation = RadarReviewResourceLocation
  { -- | city: The city where the payment originated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    radarReviewResourceLocationCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter ISO code representing the country where the payment originated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    radarReviewResourceLocationCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | latitude: The geographic latitude where the payment originated.
    radarReviewResourceLocationLatitude :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | longitude: The geographic longitude where the payment originated.
    radarReviewResourceLocationLongitude :: (GHC.Maybe.Maybe GHC.Types.Double),
    -- | region: The state\/county\/province\/region where the payment originated.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    radarReviewResourceLocationRegion :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON RadarReviewResourceLocation where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationCity obj : "country" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationCountry obj : "latitude" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationLatitude obj : "longitude" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationLongitude obj : "region" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationRegion obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationCity obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationCountry obj) GHC.Base.<> (("latitude" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationLatitude obj) GHC.Base.<> (("longitude" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationLongitude obj) GHC.Base.<> ("region" Data.Aeson.Types.ToJSON..= radarReviewResourceLocationRegion obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON RadarReviewResourceLocation where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "RadarReviewResourceLocation" (\obj -> ((((GHC.Base.pure RadarReviewResourceLocation GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region"))

-- | Create a new 'RadarReviewResourceLocation' with all required fields.
mkRadarReviewResourceLocation :: RadarReviewResourceLocation
mkRadarReviewResourceLocation =
  RadarReviewResourceLocation
    { radarReviewResourceLocationCity = GHC.Maybe.Nothing,
      radarReviewResourceLocationCountry = GHC.Maybe.Nothing,
      radarReviewResourceLocationLatitude = GHC.Maybe.Nothing,
      radarReviewResourceLocationLongitude = GHC.Maybe.Nothing,
      radarReviewResourceLocationRegion = GHC.Maybe.Nothing
    }
