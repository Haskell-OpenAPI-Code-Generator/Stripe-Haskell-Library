{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction
module StripeAPI.Types.CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentIntent
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction@ in the specification.
data CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction = CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction
  { -- | payment_intent: The [Payment Intent](https:\/\/stripe.com\/docs\/api\/payment_intents\/object) that funds were unapplied from.
    customerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent :: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'Variants
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["payment_intent" Data.Aeson.Types.ToJSON..= customerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["payment_intent" Data.Aeson.Types.ToJSON..= customerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction" (\obj -> GHC.Base.pure CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "payment_intent"))

-- | Create a new 'CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction' with all required fields.
mkCustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction ::
  -- | 'customerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'
  CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'Variants ->
  CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction
mkCustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction customerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent = CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction {customerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent = customerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent}

-- | Defines the oneOf schema located at @components.schemas.customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction.properties.payment_intent.anyOf@ in the specification.
--
-- The [Payment Intent](https:\/\/stripe.com\/docs\/api\/payment_intents\/object) that funds were unapplied from.
data CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'Variants
  = CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'Text Data.Text.Internal.Text
  | CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'PaymentIntent PaymentIntent
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'Variants where
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'PaymentIntent a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'Variants where
  parseJSON val = case (CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransactionPaymentIntent'PaymentIntent Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
