{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Issuing_CardDetails
module StripeAPI.Types.Issuing_CardDetails where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Issuing_Card
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing.card_details@ in the specification.
data Issuing'cardDetails
  = Issuing'cardDetails
      { -- | card: You can [create physical or virtual cards](https:\/\/stripe.com\/docs\/issuing\/cards) that are issued to cardholders.
        issuing'cardDetailsCard :: Issuing'card,
        -- | cvc: The CVC number for the card.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuing'cardDetailsCvc :: Data.Text.Internal.Text,
        -- | exp_month: The expiration month of the card.
        issuing'cardDetailsExpMonth :: GHC.Types.Int,
        -- | exp_year: The expiration year of the card.
        issuing'cardDetailsExpYear :: GHC.Types.Int,
        -- | number: The card number.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuing'cardDetailsNumber :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Issuing'cardDetails where
  toJSON obj = Data.Aeson.Types.Internal.object ("card" Data.Aeson.Types.ToJSON..= issuing'cardDetailsCard obj : "cvc" Data.Aeson.Types.ToJSON..= issuing'cardDetailsCvc obj : "exp_month" Data.Aeson.Types.ToJSON..= issuing'cardDetailsExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= issuing'cardDetailsExpYear obj : "number" Data.Aeson.Types.ToJSON..= issuing'cardDetailsNumber obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.card_details" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("card" Data.Aeson.Types.ToJSON..= issuing'cardDetailsCard obj) GHC.Base.<> (("cvc" Data.Aeson.Types.ToJSON..= issuing'cardDetailsCvc obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= issuing'cardDetailsExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= issuing'cardDetailsExpYear obj) GHC.Base.<> (("number" Data.Aeson.Types.ToJSON..= issuing'cardDetailsNumber obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "issuing.card_details"))))))

instance Data.Aeson.Types.FromJSON.FromJSON Issuing'cardDetails where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Issuing'cardDetails" (\obj -> ((((GHC.Base.pure Issuing'cardDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cvc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "number"))

-- | Create a new 'Issuing'cardDetails' with all required fields.
mkIssuing'cardDetails ::
  -- | 'issuing'cardDetailsCard'
  Issuing'card ->
  -- | 'issuing'cardDetailsCvc'
  Data.Text.Internal.Text ->
  -- | 'issuing'cardDetailsExpMonth'
  GHC.Types.Int ->
  -- | 'issuing'cardDetailsExpYear'
  GHC.Types.Int ->
  -- | 'issuing'cardDetailsNumber'
  Data.Text.Internal.Text ->
  Issuing'cardDetails
mkIssuing'cardDetails issuing'cardDetailsCard issuing'cardDetailsCvc issuing'cardDetailsExpMonth issuing'cardDetailsExpYear issuing'cardDetailsNumber =
  Issuing'cardDetails
    { issuing'cardDetailsCard = issuing'cardDetailsCard,
      issuing'cardDetailsCvc = issuing'cardDetailsCvc,
      issuing'cardDetailsExpMonth = issuing'cardDetailsExpMonth,
      issuing'cardDetailsExpYear = issuing'cardDetailsExpYear,
      issuing'cardDetailsNumber = issuing'cardDetailsNumber
    }
