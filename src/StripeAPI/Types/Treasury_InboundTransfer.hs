-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Treasury_InboundTransfer
module StripeAPI.Types.Treasury_InboundTransfer where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.InboundTransfers
import {-# SOURCE #-} StripeAPI.Types.InboundTransfersPaymentMethodDetailsUsBankAccount
import {-# SOURCE #-} StripeAPI.Types.TreasuryInboundTransfersResourceFailureDetails
import {-# SOURCE #-} StripeAPI.Types.TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows
import {-# SOURCE #-} StripeAPI.Types.TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions
import {-# SOURCE #-} StripeAPI.Types.TreasurySharedResourceBillingDetails
import {-# SOURCE #-} StripeAPI.Types.Treasury_Transaction

-- | Defines the object schema located at @components.schemas.treasury.inbound_transfer@ in the specification.
-- 
-- Use [InboundTransfers](https:\/\/stripe.com\/docs\/treasury\/moving-money\/financial-accounts\/into\/inbound-transfers) to add funds to your [FinancialAccount](https:\/\/stripe.com\/docs\/api\#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
data Treasury'inboundTransfer = Treasury'inboundTransfer {
  -- | amount: Amount (in cents) transferred.
  treasury'inboundTransferAmount :: GHC.Types.Int
  -- | cancelable: Returns \`true\` if the InboundTransfer is able to be canceled.
  , treasury'inboundTransferCancelable :: GHC.Types.Bool
  -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
  , treasury'inboundTransferCreated :: GHC.Types.Int
  -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
  , treasury'inboundTransferCurrency :: Data.Text.Internal.Text
  -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , treasury'inboundTransferDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | failure_details: Details about this InboundTransfer\'s failure. Only set when status is \`failed\`.
  , treasury'inboundTransferFailureDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'inboundTransferFailureDetails'NonNullable))
  -- | financial_account: The FinancialAccount that received the funds.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , treasury'inboundTransferFinancialAccount :: Data.Text.Internal.Text
  -- | hosted_regulatory_receipt_url: A [hosted transaction receipt](https:\/\/stripe.com\/docs\/treasury\/moving-money\/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe\'s money transmission licenses.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , treasury'inboundTransferHostedRegulatoryReceiptUrl :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , treasury'inboundTransferId :: Data.Text.Internal.Text
  -- | linked_flows: 
  , treasury'inboundTransferLinkedFlows :: TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , treasury'inboundTransferLivemode :: GHC.Types.Bool
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  , treasury'inboundTransferMetadata :: Data.Aeson.Types.Internal.Object
  -- | origin_payment_method: The origin payment method to be debited for an InboundTransfer.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , treasury'inboundTransferOriginPaymentMethod :: Data.Text.Internal.Text
  -- | origin_payment_method_details: Details about the PaymentMethod for an InboundTransfer.
  , treasury'inboundTransferOriginPaymentMethodDetails :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable))
  -- | returned: Returns \`true\` if the funds for an InboundTransfer were returned after the InboundTransfer went to the \`succeeded\` state.
  , treasury'inboundTransferReturned :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Bool))
  -- | statement_descriptor: Statement descriptor shown when funds are debited from the source. Not all payment networks support \`statement_descriptor\`.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , treasury'inboundTransferStatementDescriptor :: Data.Text.Internal.Text
  -- | status: Status of the InboundTransfer: \`processing\`, \`succeeded\`, \`failed\`, and \`canceled\`. An InboundTransfer is \`processing\` if it is created and pending. The status changes to \`succeeded\` once the funds have been \"confirmed\" and a \`transaction\` is created and posted. The status changes to \`failed\` if the transfer fails.
  , treasury'inboundTransferStatus :: Treasury'inboundTransferStatus'
  -- | status_transitions: 
  , treasury'inboundTransferStatusTransitions :: TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions
  -- | transaction: The Transaction associated with this object.
  , treasury'inboundTransferTransaction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Treasury'inboundTransferTransaction'NonNullableVariants))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Treasury'inboundTransfer
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= treasury'inboundTransferAmount obj] : ["cancelable" Data.Aeson.Types.ToJSON..= treasury'inboundTransferCancelable obj] : ["created" Data.Aeson.Types.ToJSON..= treasury'inboundTransferCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= treasury'inboundTransferCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_details" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferFailureDetails obj) : ["financial_account" Data.Aeson.Types.ToJSON..= treasury'inboundTransferFinancialAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_regulatory_receipt_url" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferHostedRegulatoryReceiptUrl obj) : ["id" Data.Aeson.Types.ToJSON..= treasury'inboundTransferId obj] : ["linked_flows" Data.Aeson.Types.ToJSON..= treasury'inboundTransferLinkedFlows obj] : ["livemode" Data.Aeson.Types.ToJSON..= treasury'inboundTransferLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= treasury'inboundTransferMetadata obj] : ["origin_payment_method" Data.Aeson.Types.ToJSON..= treasury'inboundTransferOriginPaymentMethod obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("origin_payment_method_details" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferOriginPaymentMethodDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("returned" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferReturned obj) : ["statement_descriptor" Data.Aeson.Types.ToJSON..= treasury'inboundTransferStatementDescriptor obj] : ["status" Data.Aeson.Types.ToJSON..= treasury'inboundTransferStatus obj] : ["status_transitions" Data.Aeson.Types.ToJSON..= treasury'inboundTransferStatusTransitions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferTransaction obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "treasury.inbound_transfer"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= treasury'inboundTransferAmount obj] : ["cancelable" Data.Aeson.Types.ToJSON..= treasury'inboundTransferCancelable obj] : ["created" Data.Aeson.Types.ToJSON..= treasury'inboundTransferCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= treasury'inboundTransferCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("failure_details" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferFailureDetails obj) : ["financial_account" Data.Aeson.Types.ToJSON..= treasury'inboundTransferFinancialAccount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("hosted_regulatory_receipt_url" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferHostedRegulatoryReceiptUrl obj) : ["id" Data.Aeson.Types.ToJSON..= treasury'inboundTransferId obj] : ["linked_flows" Data.Aeson.Types.ToJSON..= treasury'inboundTransferLinkedFlows obj] : ["livemode" Data.Aeson.Types.ToJSON..= treasury'inboundTransferLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= treasury'inboundTransferMetadata obj] : ["origin_payment_method" Data.Aeson.Types.ToJSON..= treasury'inboundTransferOriginPaymentMethod obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("origin_payment_method_details" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferOriginPaymentMethodDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("returned" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferReturned obj) : ["statement_descriptor" Data.Aeson.Types.ToJSON..= treasury'inboundTransferStatementDescriptor obj] : ["status" Data.Aeson.Types.ToJSON..= treasury'inboundTransferStatus obj] : ["status_transitions" Data.Aeson.Types.ToJSON..= treasury'inboundTransferStatusTransitions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transaction" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferTransaction obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "treasury.inbound_transfer"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Treasury'inboundTransfer
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Treasury'inboundTransfer" (\obj -> ((((((((((((((((((GHC.Base.pure Treasury'inboundTransfer GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cancelable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "failure_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "financial_account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "hosted_regulatory_receipt_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "linked_flows")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "origin_payment_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "origin_payment_method_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "returned")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_transitions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transaction"))
-- | Create a new 'Treasury'inboundTransfer' with all required fields.
mkTreasury'inboundTransfer :: GHC.Types.Int -- ^ 'treasury'inboundTransferAmount'
  -> GHC.Types.Bool -- ^ 'treasury'inboundTransferCancelable'
  -> GHC.Types.Int -- ^ 'treasury'inboundTransferCreated'
  -> Data.Text.Internal.Text -- ^ 'treasury'inboundTransferCurrency'
  -> Data.Text.Internal.Text -- ^ 'treasury'inboundTransferFinancialAccount'
  -> Data.Text.Internal.Text -- ^ 'treasury'inboundTransferId'
  -> TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows -- ^ 'treasury'inboundTransferLinkedFlows'
  -> GHC.Types.Bool -- ^ 'treasury'inboundTransferLivemode'
  -> Data.Aeson.Types.Internal.Object -- ^ 'treasury'inboundTransferMetadata'
  -> Data.Text.Internal.Text -- ^ 'treasury'inboundTransferOriginPaymentMethod'
  -> Data.Text.Internal.Text -- ^ 'treasury'inboundTransferStatementDescriptor'
  -> Treasury'inboundTransferStatus' -- ^ 'treasury'inboundTransferStatus'
  -> TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions -- ^ 'treasury'inboundTransferStatusTransitions'
  -> Treasury'inboundTransfer
mkTreasury'inboundTransfer treasury'inboundTransferAmount treasury'inboundTransferCancelable treasury'inboundTransferCreated treasury'inboundTransferCurrency treasury'inboundTransferFinancialAccount treasury'inboundTransferId treasury'inboundTransferLinkedFlows treasury'inboundTransferLivemode treasury'inboundTransferMetadata treasury'inboundTransferOriginPaymentMethod treasury'inboundTransferStatementDescriptor treasury'inboundTransferStatus treasury'inboundTransferStatusTransitions = Treasury'inboundTransfer{treasury'inboundTransferAmount = treasury'inboundTransferAmount,
treasury'inboundTransferCancelable = treasury'inboundTransferCancelable,
treasury'inboundTransferCreated = treasury'inboundTransferCreated,
treasury'inboundTransferCurrency = treasury'inboundTransferCurrency,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    treasury'inboundTransferDescription = GHC.Maybe.Nothing,
treasury'inboundTransferFailureDetails = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    treasury'inboundTransferFinancialAccount = treasury'inboundTransferFinancialAccount,
treasury'inboundTransferHostedRegulatoryReceiptUrl = GHC.Maybe.Nothing,
treasury'inboundTransferId = treasury'inboundTransferId,
treasury'inboundTransferLinkedFlows = treasury'inboundTransferLinkedFlows,
treasury'inboundTransferLivemode = treasury'inboundTransferLivemode,
treasury'inboundTransferMetadata = treasury'inboundTransferMetadata,
treasury'inboundTransferOriginPaymentMethod = treasury'inboundTransferOriginPaymentMethod,
treasury'inboundTransferOriginPaymentMethodDetails = GHC.Maybe.Nothing,
treasury'inboundTransferReturned = GHC.Maybe.Nothing,
treasury'inboundTransferStatementDescriptor = treasury'inboundTransferStatementDescriptor,
treasury'inboundTransferStatus = treasury'inboundTransferStatus,
treasury'inboundTransferStatusTransitions = treasury'inboundTransferStatusTransitions,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    treasury'inboundTransferTransaction = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.treasury.inbound_transfer.properties.failure_details.anyOf@ in the specification.
-- 
-- Details about this InboundTransfer\\\'s failure. Only set when status is \\\`failed\\\`.
data Treasury'inboundTransferFailureDetails'NonNullable = Treasury'inboundTransferFailureDetails'NonNullable {
  -- | code: Reason for the failure.
  treasury'inboundTransferFailureDetails'NonNullableCode :: (GHC.Maybe.Maybe Treasury'inboundTransferFailureDetails'NonNullableCode')
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Treasury'inboundTransferFailureDetails'NonNullable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferFailureDetails'NonNullableCode obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("code" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferFailureDetails'NonNullableCode obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Treasury'inboundTransferFailureDetails'NonNullable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Treasury'inboundTransferFailureDetails'NonNullable" (\obj -> GHC.Base.pure Treasury'inboundTransferFailureDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "code"))
-- | Create a new 'Treasury'inboundTransferFailureDetails'NonNullable' with all required fields.
mkTreasury'inboundTransferFailureDetails'NonNullable :: Treasury'inboundTransferFailureDetails'NonNullable
mkTreasury'inboundTransferFailureDetails'NonNullable = Treasury'inboundTransferFailureDetails'NonNullable{treasury'inboundTransferFailureDetails'NonNullableCode = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.treasury.inbound_transfer.properties.failure_details.anyOf.properties.code@ in the specification.
-- 
-- Reason for the failure.
data Treasury'inboundTransferFailureDetails'NonNullableCode' =
   Treasury'inboundTransferFailureDetails'NonNullableCode'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Treasury'inboundTransferFailureDetails'NonNullableCode'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumAccountClosed -- ^ Represents the JSON value @"account_closed"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumAccountFrozen -- ^ Represents the JSON value @"account_frozen"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumBankAccountRestricted -- ^ Represents the JSON value @"bank_account_restricted"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumBankOwnershipChanged -- ^ Represents the JSON value @"bank_ownership_changed"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumDebitNotAuthorized -- ^ Represents the JSON value @"debit_not_authorized"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumIncorrectAccountHolderAddress -- ^ Represents the JSON value @"incorrect_account_holder_address"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumIncorrectAccountHolderName -- ^ Represents the JSON value @"incorrect_account_holder_name"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumIncorrectAccountHolderTaxId -- ^ Represents the JSON value @"incorrect_account_holder_tax_id"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumInsufficientFunds -- ^ Represents the JSON value @"insufficient_funds"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumInvalidAccountNumber -- ^ Represents the JSON value @"invalid_account_number"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumInvalidCurrency -- ^ Represents the JSON value @"invalid_currency"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumNoAccount -- ^ Represents the JSON value @"no_account"@
  | Treasury'inboundTransferFailureDetails'NonNullableCode'EnumOther -- ^ Represents the JSON value @"other"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Treasury'inboundTransferFailureDetails'NonNullableCode'
    where toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'Other val) = val
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumAccountClosed) = "account_closed"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumAccountFrozen) = "account_frozen"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumBankAccountRestricted) = "bank_account_restricted"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumBankOwnershipChanged) = "bank_ownership_changed"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumDebitNotAuthorized) = "debit_not_authorized"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumIncorrectAccountHolderAddress) = "incorrect_account_holder_address"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumIncorrectAccountHolderName) = "incorrect_account_holder_name"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumIncorrectAccountHolderTaxId) = "incorrect_account_holder_tax_id"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumInsufficientFunds) = "insufficient_funds"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumInvalidAccountNumber) = "invalid_account_number"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumInvalidCurrency) = "invalid_currency"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumNoAccount) = "no_account"
          toJSON (Treasury'inboundTransferFailureDetails'NonNullableCode'EnumOther) = "other"
instance Data.Aeson.Types.FromJSON.FromJSON Treasury'inboundTransferFailureDetails'NonNullableCode'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "account_closed" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumAccountClosed
                                            | val GHC.Classes.== "account_frozen" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumAccountFrozen
                                            | val GHC.Classes.== "bank_account_restricted" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumBankAccountRestricted
                                            | val GHC.Classes.== "bank_ownership_changed" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumBankOwnershipChanged
                                            | val GHC.Classes.== "debit_not_authorized" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumDebitNotAuthorized
                                            | val GHC.Classes.== "incorrect_account_holder_address" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumIncorrectAccountHolderAddress
                                            | val GHC.Classes.== "incorrect_account_holder_name" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumIncorrectAccountHolderName
                                            | val GHC.Classes.== "incorrect_account_holder_tax_id" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumIncorrectAccountHolderTaxId
                                            | val GHC.Classes.== "insufficient_funds" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumInsufficientFunds
                                            | val GHC.Classes.== "invalid_account_number" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumInvalidAccountNumber
                                            | val GHC.Classes.== "invalid_currency" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumInvalidCurrency
                                            | val GHC.Classes.== "no_account" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumNoAccount
                                            | val GHC.Classes.== "other" -> Treasury'inboundTransferFailureDetails'NonNullableCode'EnumOther
                                            | GHC.Base.otherwise -> Treasury'inboundTransferFailureDetails'NonNullableCode'Other val)
-- | Defines the object schema located at @components.schemas.treasury.inbound_transfer.properties.origin_payment_method_details.anyOf@ in the specification.
-- 
-- Details about the PaymentMethod for an InboundTransfer.
data Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable = Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable {
  -- | billing_details: 
  treasury'inboundTransferOriginPaymentMethodDetails'NonNullableBillingDetails :: (GHC.Maybe.Maybe TreasurySharedResourceBillingDetails)
  -- | type: The type of the payment method used in the InboundTransfer.
  , treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType :: (GHC.Maybe.Maybe Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType')
  -- | us_bank_account: 
  , treasury'inboundTransferOriginPaymentMethodDetails'NonNullableUsBankAccount :: (GHC.Maybe.Maybe InboundTransfersPaymentMethodDetailsUsBankAccount)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_details" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferOriginPaymentMethodDetails'NonNullableBillingDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferOriginPaymentMethodDetails'NonNullableUsBankAccount obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("billing_details" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferOriginPaymentMethodDetails'NonNullableBillingDetails obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("type" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("us_bank_account" Data.Aeson.Types.ToJSON..=)) (treasury'inboundTransferOriginPaymentMethodDetails'NonNullableUsBankAccount obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable" (\obj -> ((GHC.Base.pure Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "billing_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "us_bank_account"))
-- | Create a new 'Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable' with all required fields.
mkTreasury'inboundTransferOriginPaymentMethodDetails'NonNullable :: Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable
mkTreasury'inboundTransferOriginPaymentMethodDetails'NonNullable = Treasury'inboundTransferOriginPaymentMethodDetails'NonNullable{treasury'inboundTransferOriginPaymentMethodDetails'NonNullableBillingDetails = GHC.Maybe.Nothing,
                                                                                                                                  treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType = GHC.Maybe.Nothing,
                                                                                                                                  treasury'inboundTransferOriginPaymentMethodDetails'NonNullableUsBankAccount = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.treasury.inbound_transfer.properties.origin_payment_method_details.anyOf.properties.type@ in the specification.
-- 
-- The type of the payment method used in the InboundTransfer.
data Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType' =
   Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'EnumUsBankAccount -- ^ Represents the JSON value @"us_bank_account"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'
    where toJSON (Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'Other val) = val
          toJSON (Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'EnumUsBankAccount) = "us_bank_account"
instance Data.Aeson.Types.FromJSON.FromJSON Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "us_bank_account" -> Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'EnumUsBankAccount
                                            | GHC.Base.otherwise -> Treasury'inboundTransferOriginPaymentMethodDetails'NonNullableType'Other val)
-- | Defines the enum schema located at @components.schemas.treasury.inbound_transfer.properties.status@ in the specification.
-- 
-- Status of the InboundTransfer: \`processing\`, \`succeeded\`, \`failed\`, and \`canceled\`. An InboundTransfer is \`processing\` if it is created and pending. The status changes to \`succeeded\` once the funds have been \"confirmed\" and a \`transaction\` is created and posted. The status changes to \`failed\` if the transfer fails.
data Treasury'inboundTransferStatus' =
   Treasury'inboundTransferStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Treasury'inboundTransferStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Treasury'inboundTransferStatus'EnumCanceled -- ^ Represents the JSON value @"canceled"@
  | Treasury'inboundTransferStatus'EnumFailed -- ^ Represents the JSON value @"failed"@
  | Treasury'inboundTransferStatus'EnumProcessing -- ^ Represents the JSON value @"processing"@
  | Treasury'inboundTransferStatus'EnumSucceeded -- ^ Represents the JSON value @"succeeded"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Treasury'inboundTransferStatus'
    where toJSON (Treasury'inboundTransferStatus'Other val) = val
          toJSON (Treasury'inboundTransferStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Treasury'inboundTransferStatus'EnumCanceled) = "canceled"
          toJSON (Treasury'inboundTransferStatus'EnumFailed) = "failed"
          toJSON (Treasury'inboundTransferStatus'EnumProcessing) = "processing"
          toJSON (Treasury'inboundTransferStatus'EnumSucceeded) = "succeeded"
instance Data.Aeson.Types.FromJSON.FromJSON Treasury'inboundTransferStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "canceled" -> Treasury'inboundTransferStatus'EnumCanceled
                                            | val GHC.Classes.== "failed" -> Treasury'inboundTransferStatus'EnumFailed
                                            | val GHC.Classes.== "processing" -> Treasury'inboundTransferStatus'EnumProcessing
                                            | val GHC.Classes.== "succeeded" -> Treasury'inboundTransferStatus'EnumSucceeded
                                            | GHC.Base.otherwise -> Treasury'inboundTransferStatus'Other val)
-- | Defines the oneOf schema located at @components.schemas.treasury.inbound_transfer.properties.transaction.anyOf@ in the specification.
-- 
-- The Transaction associated with this object.
data Treasury'inboundTransferTransaction'NonNullableVariants =
   Treasury'inboundTransferTransaction'NonNullableText Data.Text.Internal.Text
  | Treasury'inboundTransferTransaction'NonNullableTreasury'transaction Treasury'transaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Treasury'inboundTransferTransaction'NonNullableVariants
    where toJSON (Treasury'inboundTransferTransaction'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (Treasury'inboundTransferTransaction'NonNullableTreasury'transaction a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON Treasury'inboundTransferTransaction'NonNullableVariants
    where parseJSON val = case (Treasury'inboundTransferTransaction'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((Treasury'inboundTransferTransaction'NonNullableTreasury'transaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
