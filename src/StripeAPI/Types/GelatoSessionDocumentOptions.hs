{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema GelatoSessionDocumentOptions
module StripeAPI.Types.GelatoSessionDocumentOptions where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.gelato_session_document_options@ in the specification.
data GelatoSessionDocumentOptions = GelatoSessionDocumentOptions
  { -- | allowed_types: Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
    gelatoSessionDocumentOptionsAllowedTypes :: (GHC.Maybe.Maybe ([GelatoSessionDocumentOptionsAllowedTypes'])),
    -- | require_id_number: Collect an ID number and perform an [ID number check](https:\/\/stripe.com\/docs\/identity\/verification-checks?type=id-number) with the document’s extracted name and date of birth.
    gelatoSessionDocumentOptionsRequireIdNumber :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_live_capture: Disable image uploads, identity document images have to be captured using the device’s camera.
    gelatoSessionDocumentOptionsRequireLiveCapture :: (GHC.Maybe.Maybe GHC.Types.Bool),
    -- | require_matching_selfie: Capture a face image and perform a [selfie check](https:\/\/stripe.com\/docs\/identity\/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https:\/\/stripe.com\/docs\/identity\/selfie).
    gelatoSessionDocumentOptionsRequireMatchingSelfie :: (GHC.Maybe.Maybe GHC.Types.Bool)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON GelatoSessionDocumentOptions where
  toJSON obj = Data.Aeson.Types.Internal.object ("allowed_types" Data.Aeson.Types.ToJSON..= gelatoSessionDocumentOptionsAllowedTypes obj : "require_id_number" Data.Aeson.Types.ToJSON..= gelatoSessionDocumentOptionsRequireIdNumber obj : "require_live_capture" Data.Aeson.Types.ToJSON..= gelatoSessionDocumentOptionsRequireLiveCapture obj : "require_matching_selfie" Data.Aeson.Types.ToJSON..= gelatoSessionDocumentOptionsRequireMatchingSelfie obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("allowed_types" Data.Aeson.Types.ToJSON..= gelatoSessionDocumentOptionsAllowedTypes obj) GHC.Base.<> (("require_id_number" Data.Aeson.Types.ToJSON..= gelatoSessionDocumentOptionsRequireIdNumber obj) GHC.Base.<> (("require_live_capture" Data.Aeson.Types.ToJSON..= gelatoSessionDocumentOptionsRequireLiveCapture obj) GHC.Base.<> ("require_matching_selfie" Data.Aeson.Types.ToJSON..= gelatoSessionDocumentOptionsRequireMatchingSelfie obj))))

instance Data.Aeson.Types.FromJSON.FromJSON GelatoSessionDocumentOptions where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "GelatoSessionDocumentOptions" (\obj -> (((GHC.Base.pure GelatoSessionDocumentOptions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "allowed_types")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "require_id_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "require_live_capture")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "require_matching_selfie"))

-- | Create a new 'GelatoSessionDocumentOptions' with all required fields.
mkGelatoSessionDocumentOptions :: GelatoSessionDocumentOptions
mkGelatoSessionDocumentOptions =
  GelatoSessionDocumentOptions
    { gelatoSessionDocumentOptionsAllowedTypes = GHC.Maybe.Nothing,
      gelatoSessionDocumentOptionsRequireIdNumber = GHC.Maybe.Nothing,
      gelatoSessionDocumentOptionsRequireLiveCapture = GHC.Maybe.Nothing,
      gelatoSessionDocumentOptionsRequireMatchingSelfie = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.gelato_session_document_options.properties.allowed_types.items@ in the specification.
data GelatoSessionDocumentOptionsAllowedTypes'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    GelatoSessionDocumentOptionsAllowedTypes'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    GelatoSessionDocumentOptionsAllowedTypes'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"driving_license"@
    GelatoSessionDocumentOptionsAllowedTypes'EnumDrivingLicense
  | -- | Represents the JSON value @"id_card"@
    GelatoSessionDocumentOptionsAllowedTypes'EnumIdCard
  | -- | Represents the JSON value @"passport"@
    GelatoSessionDocumentOptionsAllowedTypes'EnumPassport
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON GelatoSessionDocumentOptionsAllowedTypes' where
  toJSON (GelatoSessionDocumentOptionsAllowedTypes'Other val) = val
  toJSON (GelatoSessionDocumentOptionsAllowedTypes'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (GelatoSessionDocumentOptionsAllowedTypes'EnumDrivingLicense) = "driving_license"
  toJSON (GelatoSessionDocumentOptionsAllowedTypes'EnumIdCard) = "id_card"
  toJSON (GelatoSessionDocumentOptionsAllowedTypes'EnumPassport) = "passport"

instance Data.Aeson.Types.FromJSON.FromJSON GelatoSessionDocumentOptionsAllowedTypes' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "driving_license" -> GelatoSessionDocumentOptionsAllowedTypes'EnumDrivingLicense
            | val GHC.Classes.== "id_card" -> GelatoSessionDocumentOptionsAllowedTypes'EnumIdCard
            | val GHC.Classes.== "passport" -> GelatoSessionDocumentOptionsAllowedTypes'EnumPassport
            | GHC.Base.otherwise -> GelatoSessionDocumentOptionsAllowedTypes'Other val
      )
