{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema AccountCapabilityFutureRequirements
module StripeAPI.Types.AccountCapabilityFutureRequirements where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.AccountRequirementsAlternative
import {-# SOURCE #-} StripeAPI.Types.AccountRequirementsError
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account_capability_future_requirements@ in the specification.
data AccountCapabilityFutureRequirements = AccountCapabilityFutureRequirements
  { -- | alternatives: Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
    accountCapabilityFutureRequirementsAlternatives :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable ([AccountRequirementsAlternative]))),
    -- | current_deadline: Date on which \`future_requirements\` merges with the main \`requirements\` hash and \`future_requirements\` becomes empty. After the transition, \`currently_due\` requirements may immediately become \`past_due\`, but the account may also be given a grace period depending on the capability\'s enablement state prior to transitioning.
    accountCapabilityFutureRequirementsCurrentDeadline :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | currently_due: Fields that need to be collected to keep the capability enabled. If not collected by \`future_requirements[current_deadline]\`, these fields will transition to the main \`requirements\` hash.
    accountCapabilityFutureRequirementsCurrentlyDue :: ([Data.Text.Internal.Text]),
    -- | disabled_reason: This is typed as a string for consistency with \`requirements.disabled_reason\`, but it safe to assume \`future_requirements.disabled_reason\` is empty because fields in \`future_requirements\` will never disable the account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    accountCapabilityFutureRequirementsDisabledReason :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | errors: Fields that are \`currently_due\` and need to be collected again because validation or verification failed.
    accountCapabilityFutureRequirementsErrors :: ([AccountRequirementsError]),
    -- | eventually_due: Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in \`currently_due\` as well.
    accountCapabilityFutureRequirementsEventuallyDue :: ([Data.Text.Internal.Text]),
    -- | past_due: Fields that weren\'t collected by \`requirements.current_deadline\`. These fields need to be collected to enable the capability on the account. New fields will never appear here; \`future_requirements.past_due\` will always be a subset of \`requirements.past_due\`.
    accountCapabilityFutureRequirementsPastDue :: ([Data.Text.Internal.Text]),
    -- | pending_verification: Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to \`eventually_due\` or \`currently_due\`.
    accountCapabilityFutureRequirementsPendingVerification :: ([Data.Text.Internal.Text])
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountCapabilityFutureRequirements where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alternatives" Data.Aeson.Types.ToJSON..=)) (accountCapabilityFutureRequirementsAlternatives obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_deadline" Data.Aeson.Types.ToJSON..=)) (accountCapabilityFutureRequirementsCurrentDeadline obj) : ["currently_due" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsCurrentlyDue obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("disabled_reason" Data.Aeson.Types.ToJSON..=)) (accountCapabilityFutureRequirementsDisabledReason obj) : ["errors" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsErrors obj] : ["eventually_due" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsEventuallyDue obj] : ["past_due" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsPastDue obj] : ["pending_verification" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsPendingVerification obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("alternatives" Data.Aeson.Types.ToJSON..=)) (accountCapabilityFutureRequirementsAlternatives obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("current_deadline" Data.Aeson.Types.ToJSON..=)) (accountCapabilityFutureRequirementsCurrentDeadline obj) : ["currently_due" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsCurrentlyDue obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("disabled_reason" Data.Aeson.Types.ToJSON..=)) (accountCapabilityFutureRequirementsDisabledReason obj) : ["errors" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsErrors obj] : ["eventually_due" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsEventuallyDue obj] : ["past_due" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsPastDue obj] : ["pending_verification" Data.Aeson.Types.ToJSON..= accountCapabilityFutureRequirementsPendingVerification obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountCapabilityFutureRequirements where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountCapabilityFutureRequirements" (\obj -> (((((((GHC.Base.pure AccountCapabilityFutureRequirements GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "alternatives")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "current_deadline")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currently_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "disabled_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "errors")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "eventually_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "past_due")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pending_verification"))

-- | Create a new 'AccountCapabilityFutureRequirements' with all required fields.
mkAccountCapabilityFutureRequirements ::
  -- | 'accountCapabilityFutureRequirementsCurrentlyDue'
  [Data.Text.Internal.Text] ->
  -- | 'accountCapabilityFutureRequirementsErrors'
  [AccountRequirementsError] ->
  -- | 'accountCapabilityFutureRequirementsEventuallyDue'
  [Data.Text.Internal.Text] ->
  -- | 'accountCapabilityFutureRequirementsPastDue'
  [Data.Text.Internal.Text] ->
  -- | 'accountCapabilityFutureRequirementsPendingVerification'
  [Data.Text.Internal.Text] ->
  AccountCapabilityFutureRequirements
mkAccountCapabilityFutureRequirements accountCapabilityFutureRequirementsCurrentlyDue accountCapabilityFutureRequirementsErrors accountCapabilityFutureRequirementsEventuallyDue accountCapabilityFutureRequirementsPastDue accountCapabilityFutureRequirementsPendingVerification =
  AccountCapabilityFutureRequirements
    { accountCapabilityFutureRequirementsAlternatives = GHC.Maybe.Nothing,
      accountCapabilityFutureRequirementsCurrentDeadline = GHC.Maybe.Nothing,
      accountCapabilityFutureRequirementsCurrentlyDue = accountCapabilityFutureRequirementsCurrentlyDue,
      accountCapabilityFutureRequirementsDisabledReason = GHC.Maybe.Nothing,
      accountCapabilityFutureRequirementsErrors = accountCapabilityFutureRequirementsErrors,
      accountCapabilityFutureRequirementsEventuallyDue = accountCapabilityFutureRequirementsEventuallyDue,
      accountCapabilityFutureRequirementsPastDue = accountCapabilityFutureRequirementsPastDue,
      accountCapabilityFutureRequirementsPendingVerification = accountCapabilityFutureRequirementsPendingVerification
    }
