{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema QuotesResourceFromQuote
module StripeAPI.Types.QuotesResourceFromQuote where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Quote
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.quotes_resource_from_quote@ in the specification.
data QuotesResourceFromQuote = QuotesResourceFromQuote
  { -- | is_revision: Whether this quote is a revision of a different quote.
    quotesResourceFromQuoteIsRevision :: GHC.Types.Bool,
    -- | quote: The quote that was cloned.
    quotesResourceFromQuoteQuote :: QuotesResourceFromQuoteQuote'Variants
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON QuotesResourceFromQuote where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["is_revision" Data.Aeson.Types.ToJSON..= quotesResourceFromQuoteIsRevision obj] : ["quote" Data.Aeson.Types.ToJSON..= quotesResourceFromQuoteQuote obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["is_revision" Data.Aeson.Types.ToJSON..= quotesResourceFromQuoteIsRevision obj] : ["quote" Data.Aeson.Types.ToJSON..= quotesResourceFromQuoteQuote obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON QuotesResourceFromQuote where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "QuotesResourceFromQuote" (\obj -> (GHC.Base.pure QuotesResourceFromQuote GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "is_revision")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quote"))

-- | Create a new 'QuotesResourceFromQuote' with all required fields.
mkQuotesResourceFromQuote ::
  -- | 'quotesResourceFromQuoteIsRevision'
  GHC.Types.Bool ->
  -- | 'quotesResourceFromQuoteQuote'
  QuotesResourceFromQuoteQuote'Variants ->
  QuotesResourceFromQuote
mkQuotesResourceFromQuote quotesResourceFromQuoteIsRevision quotesResourceFromQuoteQuote =
  QuotesResourceFromQuote
    { quotesResourceFromQuoteIsRevision = quotesResourceFromQuoteIsRevision,
      quotesResourceFromQuoteQuote = quotesResourceFromQuoteQuote
    }

-- | Defines the oneOf schema located at @components.schemas.quotes_resource_from_quote.properties.quote.anyOf@ in the specification.
--
-- The quote that was cloned.
data QuotesResourceFromQuoteQuote'Variants
  = QuotesResourceFromQuoteQuote'Text Data.Text.Internal.Text
  | QuotesResourceFromQuoteQuote'Quote Quote
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON QuotesResourceFromQuoteQuote'Variants where
  toJSON (QuotesResourceFromQuoteQuote'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (QuotesResourceFromQuoteQuote'Quote a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON QuotesResourceFromQuoteQuote'Variants where
  parseJSON val = case (QuotesResourceFromQuoteQuote'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuotesResourceFromQuoteQuote'Quote Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
