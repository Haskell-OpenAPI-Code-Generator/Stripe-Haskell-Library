{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema CreditNote
module StripeAPI.Types.CreditNote where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CreditNoteLineItem
import {-# SOURCE #-} StripeAPI.Types.CreditNoteTaxAmount
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.CustomerBalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.Invoice
import {-# SOURCE #-} StripeAPI.Types.Refund
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema credit_note
--
-- Issue a credit note to adjust an invoice\'s amount after the invoice is finalized.
--
-- Related guide: [Credit Notes](https:\/\/stripe.com\/docs\/billing\/invoices\/credit-notes).
data CreditNote
  = CreditNote
      { -- | amount: The integer amount in **%s** representing the total amount of the credit note, including tax.
        creditNoteAmount :: GHC.Types.Int,
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        creditNoteCreated :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        creditNoteCurrency :: Data.Text.Internal.Text,
        -- | customer: ID of the customer.
        creditNoteCustomer :: CreditNoteCustomer'Variants,
        -- | customer_balance_transaction: Customer balance transaction related to this credit note.
        creditNoteCustomerBalanceTransaction :: (GHC.Maybe.Maybe CreditNoteCustomerBalanceTransaction'Variants),
        -- | discount_amount: The integer amount in **%s** representing the amount of the discount that was credited.
        creditNoteDiscountAmount :: GHC.Types.Int,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        creditNoteId :: Data.Text.Internal.Text,
        -- | invoice: ID of the invoice.
        creditNoteInvoice :: CreditNoteInvoice'Variants,
        -- | lines: Line items that make up the credit note
        creditNoteLines :: CreditNoteLines',
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        creditNoteLivemode :: GHC.Types.Bool,
        -- | memo: Customer-facing text that appears on the credit note PDF.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        creditNoteMemo :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        creditNoteMetadata :: Data.Aeson.Types.Internal.Object,
        -- | number: A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        creditNoteNumber :: Data.Text.Internal.Text,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        creditNoteObject :: CreditNoteObject',
        -- | out_of_band_amount: Amount that was credited outside of Stripe.
        creditNoteOutOfBandAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | pdf: The link to download the PDF of the credit note.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        creditNotePdf :: Data.Text.Internal.Text,
        -- | reason: Reason for issuing this credit note, one of \`duplicate\`, \`fraudulent\`, \`order_change\`, or \`product_unsatisfactory\`
        creditNoteReason :: (GHC.Maybe.Maybe CreditNoteReason'),
        -- | refund: Refund related to this credit note.
        creditNoteRefund :: (GHC.Maybe.Maybe CreditNoteRefund'Variants),
        -- | status: Status of this credit note, one of \`issued\` or \`void\`. Learn more about [voiding credit notes](https:\/\/stripe.com\/docs\/billing\/invoices\/credit-notes\#voiding).
        creditNoteStatus :: CreditNoteStatus',
        -- | subtotal: The integer amount in **%s** representing the amount of the credit note, excluding tax and discount.
        creditNoteSubtotal :: GHC.Types.Int,
        -- | tax_amounts: The aggregate amounts calculated per tax rate for all line items.
        creditNoteTaxAmounts :: ([CreditNoteTaxAmount]),
        -- | total: The integer amount in **%s** representing the total amount of the credit note, including tax and discount.
        creditNoteTotal :: GHC.Types.Int,
        -- | type: Type of this credit note, one of \`pre_payment\` or \`post_payment\`. A \`pre_payment\` credit note means it was issued when the invoice was open. A \`post_payment\` credit note means it was issued when the invoice was paid.
        creditNoteType :: CreditNoteType',
        -- | voided_at: The time that the credit note was voided.
        creditNoteVoidedAt :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CreditNote where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (creditNoteAmount obj) : (Data.Aeson..=) "created" (creditNoteCreated obj) : (Data.Aeson..=) "currency" (creditNoteCurrency obj) : (Data.Aeson..=) "customer" (creditNoteCustomer obj) : (Data.Aeson..=) "customer_balance_transaction" (creditNoteCustomerBalanceTransaction obj) : (Data.Aeson..=) "discount_amount" (creditNoteDiscountAmount obj) : (Data.Aeson..=) "id" (creditNoteId obj) : (Data.Aeson..=) "invoice" (creditNoteInvoice obj) : (Data.Aeson..=) "lines" (creditNoteLines obj) : (Data.Aeson..=) "livemode" (creditNoteLivemode obj) : (Data.Aeson..=) "memo" (creditNoteMemo obj) : (Data.Aeson..=) "metadata" (creditNoteMetadata obj) : (Data.Aeson..=) "number" (creditNoteNumber obj) : (Data.Aeson..=) "object" (creditNoteObject obj) : (Data.Aeson..=) "out_of_band_amount" (creditNoteOutOfBandAmount obj) : (Data.Aeson..=) "pdf" (creditNotePdf obj) : (Data.Aeson..=) "reason" (creditNoteReason obj) : (Data.Aeson..=) "refund" (creditNoteRefund obj) : (Data.Aeson..=) "status" (creditNoteStatus obj) : (Data.Aeson..=) "subtotal" (creditNoteSubtotal obj) : (Data.Aeson..=) "tax_amounts" (creditNoteTaxAmounts obj) : (Data.Aeson..=) "total" (creditNoteTotal obj) : (Data.Aeson..=) "type" (creditNoteType obj) : (Data.Aeson..=) "voided_at" (creditNoteVoidedAt obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (creditNoteAmount obj) GHC.Base.<> ((Data.Aeson..=) "created" (creditNoteCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (creditNoteCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (creditNoteCustomer obj) GHC.Base.<> ((Data.Aeson..=) "customer_balance_transaction" (creditNoteCustomerBalanceTransaction obj) GHC.Base.<> ((Data.Aeson..=) "discount_amount" (creditNoteDiscountAmount obj) GHC.Base.<> ((Data.Aeson..=) "id" (creditNoteId obj) GHC.Base.<> ((Data.Aeson..=) "invoice" (creditNoteInvoice obj) GHC.Base.<> ((Data.Aeson..=) "lines" (creditNoteLines obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (creditNoteLivemode obj) GHC.Base.<> ((Data.Aeson..=) "memo" (creditNoteMemo obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (creditNoteMetadata obj) GHC.Base.<> ((Data.Aeson..=) "number" (creditNoteNumber obj) GHC.Base.<> ((Data.Aeson..=) "object" (creditNoteObject obj) GHC.Base.<> ((Data.Aeson..=) "out_of_band_amount" (creditNoteOutOfBandAmount obj) GHC.Base.<> ((Data.Aeson..=) "pdf" (creditNotePdf obj) GHC.Base.<> ((Data.Aeson..=) "reason" (creditNoteReason obj) GHC.Base.<> ((Data.Aeson..=) "refund" (creditNoteRefund obj) GHC.Base.<> ((Data.Aeson..=) "status" (creditNoteStatus obj) GHC.Base.<> ((Data.Aeson..=) "subtotal" (creditNoteSubtotal obj) GHC.Base.<> ((Data.Aeson..=) "tax_amounts" (creditNoteTaxAmounts obj) GHC.Base.<> ((Data.Aeson..=) "total" (creditNoteTotal obj) GHC.Base.<> ((Data.Aeson..=) "type" (creditNoteType obj) GHC.Base.<> (Data.Aeson..=) "voided_at" (creditNoteVoidedAt obj))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON CreditNote where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CreditNote" (\obj -> (((((((((((((((((((((((GHC.Base.pure CreditNote GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer_balance_transaction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discount_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "lines")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "memo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "out_of_band_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "pdf")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_amounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "voided_at"))

-- | Define the one-of schema credit_noteCustomer\'
--
-- ID of the customer.
data CreditNoteCustomer'Variants
  = CreditNoteCustomer'Customer Customer
  | CreditNoteCustomer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteCustomer'Variants where
  toJSON (CreditNoteCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CreditNoteCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteCustomer'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CreditNoteCustomer'Customer a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CreditNoteCustomer'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema credit_noteCustomer_balance_transaction\'
--
-- Customer balance transaction related to this credit note.
data CreditNoteCustomerBalanceTransaction'Variants
  = CreditNoteCustomerBalanceTransaction'CustomerBalanceTransaction CustomerBalanceTransaction
  | CreditNoteCustomerBalanceTransaction'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteCustomerBalanceTransaction'Variants where
  toJSON (CreditNoteCustomerBalanceTransaction'CustomerBalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CreditNoteCustomerBalanceTransaction'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteCustomerBalanceTransaction'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CreditNoteCustomerBalanceTransaction'CustomerBalanceTransaction a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CreditNoteCustomerBalanceTransaction'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema credit_noteInvoice\'
--
-- ID of the invoice.
data CreditNoteInvoice'Variants
  = CreditNoteInvoice'Invoice Invoice
  | CreditNoteInvoice'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteInvoice'Variants where
  toJSON (CreditNoteInvoice'Invoice a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CreditNoteInvoice'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteInvoice'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CreditNoteInvoice'Invoice a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CreditNoteInvoice'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema credit_noteLines\'
--
-- Line items that make up the credit note
data CreditNoteLines'
  = CreditNoteLines'
      { -- | data: Details about each object.
        creditNoteLines'Data :: ([CreditNoteLineItem]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        creditNoteLines'HasMore :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
        creditNoteLines'Object :: CreditNoteLines'Object',
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        creditNoteLines'Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteLines' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "data" (creditNoteLines'Data obj) : (Data.Aeson..=) "has_more" (creditNoteLines'HasMore obj) : (Data.Aeson..=) "object" (creditNoteLines'Object obj) : (Data.Aeson..=) "url" (creditNoteLines'Url obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "data" (creditNoteLines'Data obj) GHC.Base.<> ((Data.Aeson..=) "has_more" (creditNoteLines'HasMore obj) GHC.Base.<> ((Data.Aeson..=) "object" (creditNoteLines'Object obj) GHC.Base.<> (Data.Aeson..=) "url" (creditNoteLines'Url obj))))

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteLines' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CreditNoteLines'" (\obj -> (((GHC.Base.pure CreditNoteLines' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Defines the enum schema credit_noteLines\'Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value. Always has the value \`list\`.
data CreditNoteLines'Object'
  = CreditNoteLines'Object'EnumOther Data.Aeson.Types.Internal.Value
  | CreditNoteLines'Object'EnumTyped Data.Text.Internal.Text
  | CreditNoteLines'Object'EnumStringList
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteLines'Object' where
  toJSON (CreditNoteLines'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteLines'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteLines'Object'EnumStringList) = "list"

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteLines'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "list" -> CreditNoteLines'Object'EnumStringList
            | GHC.Base.otherwise -> CreditNoteLines'Object'EnumOther val
      )

-- | Defines the enum schema credit_noteObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data CreditNoteObject'
  = CreditNoteObject'EnumOther Data.Aeson.Types.Internal.Value
  | CreditNoteObject'EnumTyped Data.Text.Internal.Text
  | CreditNoteObject'EnumStringCreditNote
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteObject' where
  toJSON (CreditNoteObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteObject'EnumStringCreditNote) = "credit_note"

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "credit_note" -> CreditNoteObject'EnumStringCreditNote
            | GHC.Base.otherwise -> CreditNoteObject'EnumOther val
      )

-- | Defines the enum schema credit_noteReason\'
--
-- Reason for issuing this credit note, one of \`duplicate\`, \`fraudulent\`, \`order_change\`, or \`product_unsatisfactory\`
data CreditNoteReason'
  = CreditNoteReason'EnumOther Data.Aeson.Types.Internal.Value
  | CreditNoteReason'EnumTyped Data.Text.Internal.Text
  | CreditNoteReason'EnumStringDuplicate
  | CreditNoteReason'EnumStringFraudulent
  | CreditNoteReason'EnumStringOrderChange
  | CreditNoteReason'EnumStringProductUnsatisfactory
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteReason' where
  toJSON (CreditNoteReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteReason'EnumStringDuplicate) = "duplicate"
  toJSON (CreditNoteReason'EnumStringFraudulent) = "fraudulent"
  toJSON (CreditNoteReason'EnumStringOrderChange) = "order_change"
  toJSON (CreditNoteReason'EnumStringProductUnsatisfactory) = "product_unsatisfactory"

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteReason' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "duplicate" -> CreditNoteReason'EnumStringDuplicate
            | val GHC.Classes.== "fraudulent" -> CreditNoteReason'EnumStringFraudulent
            | val GHC.Classes.== "order_change" -> CreditNoteReason'EnumStringOrderChange
            | val GHC.Classes.== "product_unsatisfactory" -> CreditNoteReason'EnumStringProductUnsatisfactory
            | GHC.Base.otherwise -> CreditNoteReason'EnumOther val
      )

-- | Define the one-of schema credit_noteRefund\'
--
-- Refund related to this credit note.
data CreditNoteRefund'Variants
  = CreditNoteRefund'Refund Refund
  | CreditNoteRefund'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteRefund'Variants where
  toJSON (CreditNoteRefund'Refund a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CreditNoteRefund'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteRefund'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CreditNoteRefund'Refund a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ CreditNoteRefund'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema credit_noteStatus\'
--
-- Status of this credit note, one of \`issued\` or \`void\`. Learn more about [voiding credit notes](https:\/\/stripe.com\/docs\/billing\/invoices\/credit-notes\#voiding).
data CreditNoteStatus'
  = CreditNoteStatus'EnumOther Data.Aeson.Types.Internal.Value
  | CreditNoteStatus'EnumTyped Data.Text.Internal.Text
  | CreditNoteStatus'EnumStringIssued
  | CreditNoteStatus'EnumStringVoid
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteStatus' where
  toJSON (CreditNoteStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteStatus'EnumStringIssued) = "issued"
  toJSON (CreditNoteStatus'EnumStringVoid) = "void"

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "issued" -> CreditNoteStatus'EnumStringIssued
            | val GHC.Classes.== "void" -> CreditNoteStatus'EnumStringVoid
            | GHC.Base.otherwise -> CreditNoteStatus'EnumOther val
      )

-- | Defines the enum schema credit_noteType\'
--
-- Type of this credit note, one of \`pre_payment\` or \`post_payment\`. A \`pre_payment\` credit note means it was issued when the invoice was open. A \`post_payment\` credit note means it was issued when the invoice was paid.
data CreditNoteType'
  = CreditNoteType'EnumOther Data.Aeson.Types.Internal.Value
  | CreditNoteType'EnumTyped Data.Text.Internal.Text
  | CreditNoteType'EnumStringPostPayment
  | CreditNoteType'EnumStringPrePayment
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CreditNoteType' where
  toJSON (CreditNoteType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (CreditNoteType'EnumStringPostPayment) = "post_payment"
  toJSON (CreditNoteType'EnumStringPrePayment) = "pre_payment"

instance Data.Aeson.Types.FromJSON.FromJSON CreditNoteType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "post_payment" -> CreditNoteType'EnumStringPostPayment
            | val GHC.Classes.== "pre_payment" -> CreditNoteType'EnumStringPrePayment
            | GHC.Base.otherwise -> CreditNoteType'EnumOther val
      )
