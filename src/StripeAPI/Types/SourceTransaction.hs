{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema SourceTransaction
module StripeAPI.Types.SourceTransaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionAchCreditTransferData
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionChfCreditTransferData
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionGbpCreditTransferData
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionPaperCheckData
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionSepaCreditTransferData
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema source_transaction
--
-- Some payment methods have no required amount that a customer must send.
-- Customers can be instructed to send any amount, and it can be made up of
-- multiple transactions. As such, sources can have multiple associated
-- transactions.
data SourceTransaction
  = SourceTransaction
      { -- | ach_credit_transfer:
        sourceTransactionAchCreditTransfer :: (GHC.Maybe.Maybe SourceTransactionAchCreditTransferData),
        -- | amount: A positive integer in the smallest currency unit (that is, 100 cents for \$1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
        sourceTransactionAmount :: GHC.Types.Int,
        -- | chf_credit_transfer:
        sourceTransactionChfCreditTransfer :: (GHC.Maybe.Maybe SourceTransactionChfCreditTransferData),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        sourceTransactionCreated :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        sourceTransactionCurrency :: Data.Text.Internal.Text,
        -- | gbp_credit_transfer:
        sourceTransactionGbpCreditTransfer :: (GHC.Maybe.Maybe SourceTransactionGbpCreditTransferData),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        sourceTransactionId :: Data.Text.Internal.Text,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        sourceTransactionLivemode :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        sourceTransactionObject :: SourceTransactionObject',
        -- | paper_check:
        sourceTransactionPaperCheck :: (GHC.Maybe.Maybe SourceTransactionPaperCheckData),
        -- | sepa_credit_transfer:
        sourceTransactionSepaCreditTransfer :: (GHC.Maybe.Maybe SourceTransactionSepaCreditTransferData),
        -- | source: The ID of the source this transaction is attached to.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        sourceTransactionSource :: Data.Text.Internal.Text,
        -- | status: The status of the transaction, one of \`succeeded\`, \`pending\`, or \`failed\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        sourceTransactionStatus :: Data.Text.Internal.Text,
        -- | type: The type of source this transaction is attached to.
        sourceTransactionType :: SourceTransactionType'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SourceTransaction where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "ach_credit_transfer" (sourceTransactionAchCreditTransfer obj) : (Data.Aeson..=) "amount" (sourceTransactionAmount obj) : (Data.Aeson..=) "chf_credit_transfer" (sourceTransactionChfCreditTransfer obj) : (Data.Aeson..=) "created" (sourceTransactionCreated obj) : (Data.Aeson..=) "currency" (sourceTransactionCurrency obj) : (Data.Aeson..=) "gbp_credit_transfer" (sourceTransactionGbpCreditTransfer obj) : (Data.Aeson..=) "id" (sourceTransactionId obj) : (Data.Aeson..=) "livemode" (sourceTransactionLivemode obj) : (Data.Aeson..=) "object" (sourceTransactionObject obj) : (Data.Aeson..=) "paper_check" (sourceTransactionPaperCheck obj) : (Data.Aeson..=) "sepa_credit_transfer" (sourceTransactionSepaCreditTransfer obj) : (Data.Aeson..=) "source" (sourceTransactionSource obj) : (Data.Aeson..=) "status" (sourceTransactionStatus obj) : (Data.Aeson..=) "type" (sourceTransactionType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "ach_credit_transfer" (sourceTransactionAchCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "amount" (sourceTransactionAmount obj) GHC.Base.<> ((Data.Aeson..=) "chf_credit_transfer" (sourceTransactionChfCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "created" (sourceTransactionCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (sourceTransactionCurrency obj) GHC.Base.<> ((Data.Aeson..=) "gbp_credit_transfer" (sourceTransactionGbpCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "id" (sourceTransactionId obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (sourceTransactionLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (sourceTransactionObject obj) GHC.Base.<> ((Data.Aeson..=) "paper_check" (sourceTransactionPaperCheck obj) GHC.Base.<> ((Data.Aeson..=) "sepa_credit_transfer" (sourceTransactionSepaCreditTransfer obj) GHC.Base.<> ((Data.Aeson..=) "source" (sourceTransactionSource obj) GHC.Base.<> ((Data.Aeson..=) "status" (sourceTransactionStatus obj) GHC.Base.<> (Data.Aeson..=) "type" (sourceTransactionType obj))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON SourceTransaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceTransaction" (\obj -> (((((((((((((GHC.Base.pure SourceTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "chf_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gbp_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "paper_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Defines the enum schema source_transactionObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data SourceTransactionObject'
  = SourceTransactionObject'EnumOther Data.Aeson.Types.Internal.Value
  | SourceTransactionObject'EnumTyped Data.Text.Internal.Text
  | SourceTransactionObject'EnumStringSourceTransaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SourceTransactionObject' where
  toJSON (SourceTransactionObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SourceTransactionObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SourceTransactionObject'EnumStringSourceTransaction) = "source_transaction"

instance Data.Aeson.Types.FromJSON.FromJSON SourceTransactionObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "source_transaction" -> SourceTransactionObject'EnumStringSourceTransaction
            | GHC.Base.otherwise -> SourceTransactionObject'EnumOther val
      )

-- | Defines the enum schema source_transactionType\'
--
-- The type of source this transaction is attached to.
data SourceTransactionType'
  = SourceTransactionType'EnumOther Data.Aeson.Types.Internal.Value
  | SourceTransactionType'EnumTyped Data.Text.Internal.Text
  | SourceTransactionType'EnumStringAchCreditTransfer
  | SourceTransactionType'EnumStringAchDebit
  | SourceTransactionType'EnumStringAlipay
  | SourceTransactionType'EnumStringBancontact
  | SourceTransactionType'EnumStringCard
  | SourceTransactionType'EnumStringCardPresent
  | SourceTransactionType'EnumStringEps
  | SourceTransactionType'EnumStringGiropay
  | SourceTransactionType'EnumStringIdeal
  | SourceTransactionType'EnumStringKlarna
  | SourceTransactionType'EnumStringMultibanco
  | SourceTransactionType'EnumStringP24
  | SourceTransactionType'EnumStringSepaDebit
  | SourceTransactionType'EnumStringSofort
  | SourceTransactionType'EnumStringThreeDSecure
  | SourceTransactionType'EnumStringWechat
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SourceTransactionType' where
  toJSON (SourceTransactionType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SourceTransactionType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (SourceTransactionType'EnumStringAchCreditTransfer) = "ach_credit_transfer"
  toJSON (SourceTransactionType'EnumStringAchDebit) = "ach_debit"
  toJSON (SourceTransactionType'EnumStringAlipay) = "alipay"
  toJSON (SourceTransactionType'EnumStringBancontact) = "bancontact"
  toJSON (SourceTransactionType'EnumStringCard) = "card"
  toJSON (SourceTransactionType'EnumStringCardPresent) = "card_present"
  toJSON (SourceTransactionType'EnumStringEps) = "eps"
  toJSON (SourceTransactionType'EnumStringGiropay) = "giropay"
  toJSON (SourceTransactionType'EnumStringIdeal) = "ideal"
  toJSON (SourceTransactionType'EnumStringKlarna) = "klarna"
  toJSON (SourceTransactionType'EnumStringMultibanco) = "multibanco"
  toJSON (SourceTransactionType'EnumStringP24) = "p24"
  toJSON (SourceTransactionType'EnumStringSepaDebit) = "sepa_debit"
  toJSON (SourceTransactionType'EnumStringSofort) = "sofort"
  toJSON (SourceTransactionType'EnumStringThreeDSecure) = "three_d_secure"
  toJSON (SourceTransactionType'EnumStringWechat) = "wechat"

instance Data.Aeson.Types.FromJSON.FromJSON SourceTransactionType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "ach_credit_transfer" -> SourceTransactionType'EnumStringAchCreditTransfer
            | val GHC.Classes.== "ach_debit" -> SourceTransactionType'EnumStringAchDebit
            | val GHC.Classes.== "alipay" -> SourceTransactionType'EnumStringAlipay
            | val GHC.Classes.== "bancontact" -> SourceTransactionType'EnumStringBancontact
            | val GHC.Classes.== "card" -> SourceTransactionType'EnumStringCard
            | val GHC.Classes.== "card_present" -> SourceTransactionType'EnumStringCardPresent
            | val GHC.Classes.== "eps" -> SourceTransactionType'EnumStringEps
            | val GHC.Classes.== "giropay" -> SourceTransactionType'EnumStringGiropay
            | val GHC.Classes.== "ideal" -> SourceTransactionType'EnumStringIdeal
            | val GHC.Classes.== "klarna" -> SourceTransactionType'EnumStringKlarna
            | val GHC.Classes.== "multibanco" -> SourceTransactionType'EnumStringMultibanco
            | val GHC.Classes.== "p24" -> SourceTransactionType'EnumStringP24
            | val GHC.Classes.== "sepa_debit" -> SourceTransactionType'EnumStringSepaDebit
            | val GHC.Classes.== "sofort" -> SourceTransactionType'EnumStringSofort
            | val GHC.Classes.== "three_d_secure" -> SourceTransactionType'EnumStringThreeDSecure
            | val GHC.Classes.== "wechat" -> SourceTransactionType'EnumStringWechat
            | GHC.Base.otherwise -> SourceTransactionType'EnumOther val
      )
