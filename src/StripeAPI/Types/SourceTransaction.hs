{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SourceTransaction
module StripeAPI.Types.SourceTransaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionAchCreditTransferData
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionChfCreditTransferData
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionGbpCreditTransferData
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionPaperCheckData
import {-# SOURCE #-} StripeAPI.Types.SourceTransactionSepaCreditTransferData
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.source_transaction@ in the specification.
--
-- Some payment methods have no required amount that a customer must send.
-- Customers can be instructed to send any amount, and it can be made up of
-- multiple transactions. As such, sources can have multiple associated
-- transactions.
data SourceTransaction = SourceTransaction
  { -- | ach_credit_transfer:
    sourceTransactionAchCreditTransfer :: (GHC.Maybe.Maybe SourceTransactionAchCreditTransferData),
    -- | amount: A positive integer in the smallest currency unit (that is, 100 cents for \$1.00, or 1 for Â¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
    sourceTransactionAmount :: GHC.Types.Int,
    -- | chf_credit_transfer:
    sourceTransactionChfCreditTransfer :: (GHC.Maybe.Maybe SourceTransactionChfCreditTransferData),
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    sourceTransactionCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    sourceTransactionCurrency :: Data.Text.Internal.Text,
    -- | gbp_credit_transfer:
    sourceTransactionGbpCreditTransfer :: (GHC.Maybe.Maybe SourceTransactionGbpCreditTransferData),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    sourceTransactionId :: Data.Text.Internal.Text,
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    sourceTransactionLivemode :: GHC.Types.Bool,
    -- | paper_check:
    sourceTransactionPaperCheck :: (GHC.Maybe.Maybe SourceTransactionPaperCheckData),
    -- | sepa_credit_transfer:
    sourceTransactionSepaCreditTransfer :: (GHC.Maybe.Maybe SourceTransactionSepaCreditTransferData),
    -- | source: The ID of the source this transaction is attached to.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    sourceTransactionSource :: Data.Text.Internal.Text,
    -- | status: The status of the transaction, one of \`succeeded\`, \`pending\`, or \`failed\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    sourceTransactionStatus :: Data.Text.Internal.Text,
    -- | type: The type of source this transaction is attached to.
    sourceTransactionType :: SourceTransactionType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SourceTransaction where
  toJSON obj = Data.Aeson.Types.Internal.object ("ach_credit_transfer" Data.Aeson.Types.ToJSON..= sourceTransactionAchCreditTransfer obj : "amount" Data.Aeson.Types.ToJSON..= sourceTransactionAmount obj : "chf_credit_transfer" Data.Aeson.Types.ToJSON..= sourceTransactionChfCreditTransfer obj : "created" Data.Aeson.Types.ToJSON..= sourceTransactionCreated obj : "currency" Data.Aeson.Types.ToJSON..= sourceTransactionCurrency obj : "gbp_credit_transfer" Data.Aeson.Types.ToJSON..= sourceTransactionGbpCreditTransfer obj : "id" Data.Aeson.Types.ToJSON..= sourceTransactionId obj : "livemode" Data.Aeson.Types.ToJSON..= sourceTransactionLivemode obj : "paper_check" Data.Aeson.Types.ToJSON..= sourceTransactionPaperCheck obj : "sepa_credit_transfer" Data.Aeson.Types.ToJSON..= sourceTransactionSepaCreditTransfer obj : "source" Data.Aeson.Types.ToJSON..= sourceTransactionSource obj : "status" Data.Aeson.Types.ToJSON..= sourceTransactionStatus obj : "type" Data.Aeson.Types.ToJSON..= sourceTransactionType obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "source_transaction" : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("ach_credit_transfer" Data.Aeson.Types.ToJSON..= sourceTransactionAchCreditTransfer obj) GHC.Base.<> (("amount" Data.Aeson.Types.ToJSON..= sourceTransactionAmount obj) GHC.Base.<> (("chf_credit_transfer" Data.Aeson.Types.ToJSON..= sourceTransactionChfCreditTransfer obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= sourceTransactionCreated obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= sourceTransactionCurrency obj) GHC.Base.<> (("gbp_credit_transfer" Data.Aeson.Types.ToJSON..= sourceTransactionGbpCreditTransfer obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= sourceTransactionId obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= sourceTransactionLivemode obj) GHC.Base.<> (("paper_check" Data.Aeson.Types.ToJSON..= sourceTransactionPaperCheck obj) GHC.Base.<> (("sepa_credit_transfer" Data.Aeson.Types.ToJSON..= sourceTransactionSepaCreditTransfer obj) GHC.Base.<> (("source" Data.Aeson.Types.ToJSON..= sourceTransactionSource obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= sourceTransactionStatus obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= sourceTransactionType obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "source_transaction"))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON SourceTransaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SourceTransaction" (\obj -> ((((((((((((GHC.Base.pure SourceTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "chf_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "gbp_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "paper_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'SourceTransaction' with all required fields.
mkSourceTransaction ::
  -- | 'sourceTransactionAmount'
  GHC.Types.Int ->
  -- | 'sourceTransactionCreated'
  GHC.Types.Int ->
  -- | 'sourceTransactionCurrency'
  Data.Text.Internal.Text ->
  -- | 'sourceTransactionId'
  Data.Text.Internal.Text ->
  -- | 'sourceTransactionLivemode'
  GHC.Types.Bool ->
  -- | 'sourceTransactionSource'
  Data.Text.Internal.Text ->
  -- | 'sourceTransactionStatus'
  Data.Text.Internal.Text ->
  -- | 'sourceTransactionType'
  SourceTransactionType' ->
  SourceTransaction
mkSourceTransaction sourceTransactionAmount sourceTransactionCreated sourceTransactionCurrency sourceTransactionId sourceTransactionLivemode sourceTransactionSource sourceTransactionStatus sourceTransactionType =
  SourceTransaction
    { sourceTransactionAchCreditTransfer = GHC.Maybe.Nothing,
      sourceTransactionAmount = sourceTransactionAmount,
      sourceTransactionChfCreditTransfer = GHC.Maybe.Nothing,
      sourceTransactionCreated = sourceTransactionCreated,
      sourceTransactionCurrency = sourceTransactionCurrency,
      sourceTransactionGbpCreditTransfer = GHC.Maybe.Nothing,
      sourceTransactionId = sourceTransactionId,
      sourceTransactionLivemode = sourceTransactionLivemode,
      sourceTransactionPaperCheck = GHC.Maybe.Nothing,
      sourceTransactionSepaCreditTransfer = GHC.Maybe.Nothing,
      sourceTransactionSource = sourceTransactionSource,
      sourceTransactionStatus = sourceTransactionStatus,
      sourceTransactionType = sourceTransactionType
    }

-- | Defines the enum schema located at @components.schemas.source_transaction.properties.type@ in the specification.
--
-- The type of source this transaction is attached to.
data SourceTransactionType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    SourceTransactionType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    SourceTransactionType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"ach_credit_transfer"@
    SourceTransactionType'EnumAchCreditTransfer
  | -- | Represents the JSON value @"ach_debit"@
    SourceTransactionType'EnumAchDebit
  | -- | Represents the JSON value @"alipay"@
    SourceTransactionType'EnumAlipay
  | -- | Represents the JSON value @"bancontact"@
    SourceTransactionType'EnumBancontact
  | -- | Represents the JSON value @"card"@
    SourceTransactionType'EnumCard
  | -- | Represents the JSON value @"card_present"@
    SourceTransactionType'EnumCardPresent
  | -- | Represents the JSON value @"eps"@
    SourceTransactionType'EnumEps
  | -- | Represents the JSON value @"giropay"@
    SourceTransactionType'EnumGiropay
  | -- | Represents the JSON value @"ideal"@
    SourceTransactionType'EnumIdeal
  | -- | Represents the JSON value @"klarna"@
    SourceTransactionType'EnumKlarna
  | -- | Represents the JSON value @"multibanco"@
    SourceTransactionType'EnumMultibanco
  | -- | Represents the JSON value @"p24"@
    SourceTransactionType'EnumP24
  | -- | Represents the JSON value @"sepa_debit"@
    SourceTransactionType'EnumSepaDebit
  | -- | Represents the JSON value @"sofort"@
    SourceTransactionType'EnumSofort
  | -- | Represents the JSON value @"three_d_secure"@
    SourceTransactionType'EnumThreeDSecure
  | -- | Represents the JSON value @"wechat"@
    SourceTransactionType'EnumWechat
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SourceTransactionType' where
  toJSON (SourceTransactionType'Other val) = val
  toJSON (SourceTransactionType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (SourceTransactionType'EnumAchCreditTransfer) = "ach_credit_transfer"
  toJSON (SourceTransactionType'EnumAchDebit) = "ach_debit"
  toJSON (SourceTransactionType'EnumAlipay) = "alipay"
  toJSON (SourceTransactionType'EnumBancontact) = "bancontact"
  toJSON (SourceTransactionType'EnumCard) = "card"
  toJSON (SourceTransactionType'EnumCardPresent) = "card_present"
  toJSON (SourceTransactionType'EnumEps) = "eps"
  toJSON (SourceTransactionType'EnumGiropay) = "giropay"
  toJSON (SourceTransactionType'EnumIdeal) = "ideal"
  toJSON (SourceTransactionType'EnumKlarna) = "klarna"
  toJSON (SourceTransactionType'EnumMultibanco) = "multibanco"
  toJSON (SourceTransactionType'EnumP24) = "p24"
  toJSON (SourceTransactionType'EnumSepaDebit) = "sepa_debit"
  toJSON (SourceTransactionType'EnumSofort) = "sofort"
  toJSON (SourceTransactionType'EnumThreeDSecure) = "three_d_secure"
  toJSON (SourceTransactionType'EnumWechat) = "wechat"

instance Data.Aeson.Types.FromJSON.FromJSON SourceTransactionType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "ach_credit_transfer" -> SourceTransactionType'EnumAchCreditTransfer
            | val GHC.Classes.== "ach_debit" -> SourceTransactionType'EnumAchDebit
            | val GHC.Classes.== "alipay" -> SourceTransactionType'EnumAlipay
            | val GHC.Classes.== "bancontact" -> SourceTransactionType'EnumBancontact
            | val GHC.Classes.== "card" -> SourceTransactionType'EnumCard
            | val GHC.Classes.== "card_present" -> SourceTransactionType'EnumCardPresent
            | val GHC.Classes.== "eps" -> SourceTransactionType'EnumEps
            | val GHC.Classes.== "giropay" -> SourceTransactionType'EnumGiropay
            | val GHC.Classes.== "ideal" -> SourceTransactionType'EnumIdeal
            | val GHC.Classes.== "klarna" -> SourceTransactionType'EnumKlarna
            | val GHC.Classes.== "multibanco" -> SourceTransactionType'EnumMultibanco
            | val GHC.Classes.== "p24" -> SourceTransactionType'EnumP24
            | val GHC.Classes.== "sepa_debit" -> SourceTransactionType'EnumSepaDebit
            | val GHC.Classes.== "sofort" -> SourceTransactionType'EnumSofort
            | val GHC.Classes.== "three_d_secure" -> SourceTransactionType'EnumThreeDSecure
            | val GHC.Classes.== "wechat" -> SourceTransactionType'EnumWechat
            | GHC.Base.otherwise -> SourceTransactionType'Other val
      )
