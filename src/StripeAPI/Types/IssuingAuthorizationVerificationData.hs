{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema IssuingAuthorizationVerificationData
module StripeAPI.Types.IssuingAuthorizationVerificationData where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema issuing_authorization_verification_data
data IssuingAuthorizationVerificationData
  = IssuingAuthorizationVerificationData
      { -- | address_line1_check: Whether the cardholder provided an address first line and if it matched the cardholder’s \`billing.address.line1\`.
        issuingAuthorizationVerificationDataAddressLine1Check :: IssuingAuthorizationVerificationDataAddressLine1Check',
        -- | address_zip_check: Whether the cardholder provided a zip (or postal code) and if it matched the cardholder’s \`billing.address.postal_code\`.
        issuingAuthorizationVerificationDataAddressZipCheck :: IssuingAuthorizationVerificationDataAddressZipCheck',
        -- | authentication: Whether 3DS authentication was performed.
        issuingAuthorizationVerificationDataAuthentication :: IssuingAuthorizationVerificationDataAuthentication',
        -- | cvc_check: Whether the cardholder provided a CVC and if it matched Stripe’s record.
        issuingAuthorizationVerificationDataCvcCheck :: IssuingAuthorizationVerificationDataCvcCheck'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationData where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address_line1_check" (issuingAuthorizationVerificationDataAddressLine1Check obj) : (Data.Aeson..=) "address_zip_check" (issuingAuthorizationVerificationDataAddressZipCheck obj) : (Data.Aeson..=) "authentication" (issuingAuthorizationVerificationDataAuthentication obj) : (Data.Aeson..=) "cvc_check" (issuingAuthorizationVerificationDataCvcCheck obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address_line1_check" (issuingAuthorizationVerificationDataAddressLine1Check obj) GHC.Base.<> ((Data.Aeson..=) "address_zip_check" (issuingAuthorizationVerificationDataAddressZipCheck obj) GHC.Base.<> ((Data.Aeson..=) "authentication" (issuingAuthorizationVerificationDataAuthentication obj) GHC.Base.<> (Data.Aeson..=) "cvc_check" (issuingAuthorizationVerificationDataCvcCheck obj))))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationVerificationData" (\obj -> (((GHC.Base.pure IssuingAuthorizationVerificationData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authentication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cvc_check"))

-- | Defines the enum schema issuing_authorization_verification_dataAddress_line1_check\'
--
-- Whether the cardholder provided an address first line and if it matched the cardholder’s \`billing.address.line1\`.
data IssuingAuthorizationVerificationDataAddressLine1Check'
  = IssuingAuthorizationVerificationDataAddressLine1Check'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingAuthorizationVerificationDataAddressLine1Check'EnumTyped Data.Text.Internal.Text
  | IssuingAuthorizationVerificationDataAddressLine1Check'EnumStringMatch
  | IssuingAuthorizationVerificationDataAddressLine1Check'EnumStringMismatch
  | IssuingAuthorizationVerificationDataAddressLine1Check'EnumStringNotProvided
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationDataAddressLine1Check' where
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'EnumStringMatch) = "match"
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'EnumStringMismatch) = "mismatch"
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'EnumStringNotProvided) = "not_provided"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationDataAddressLine1Check' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "match" -> IssuingAuthorizationVerificationDataAddressLine1Check'EnumStringMatch
            | val GHC.Classes.== "mismatch" -> IssuingAuthorizationVerificationDataAddressLine1Check'EnumStringMismatch
            | val GHC.Classes.== "not_provided" -> IssuingAuthorizationVerificationDataAddressLine1Check'EnumStringNotProvided
            | GHC.Base.otherwise -> IssuingAuthorizationVerificationDataAddressLine1Check'EnumOther val
      )

-- | Defines the enum schema issuing_authorization_verification_dataAddress_zip_check\'
--
-- Whether the cardholder provided a zip (or postal code) and if it matched the cardholder’s \`billing.address.postal_code\`.
data IssuingAuthorizationVerificationDataAddressZipCheck'
  = IssuingAuthorizationVerificationDataAddressZipCheck'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingAuthorizationVerificationDataAddressZipCheck'EnumTyped Data.Text.Internal.Text
  | IssuingAuthorizationVerificationDataAddressZipCheck'EnumStringMatch
  | IssuingAuthorizationVerificationDataAddressZipCheck'EnumStringMismatch
  | IssuingAuthorizationVerificationDataAddressZipCheck'EnumStringNotProvided
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationDataAddressZipCheck' where
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'EnumStringMatch) = "match"
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'EnumStringMismatch) = "mismatch"
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'EnumStringNotProvided) = "not_provided"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationDataAddressZipCheck' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "match" -> IssuingAuthorizationVerificationDataAddressZipCheck'EnumStringMatch
            | val GHC.Classes.== "mismatch" -> IssuingAuthorizationVerificationDataAddressZipCheck'EnumStringMismatch
            | val GHC.Classes.== "not_provided" -> IssuingAuthorizationVerificationDataAddressZipCheck'EnumStringNotProvided
            | GHC.Base.otherwise -> IssuingAuthorizationVerificationDataAddressZipCheck'EnumOther val
      )

-- | Defines the enum schema issuing_authorization_verification_dataAuthentication\'
--
-- Whether 3DS authentication was performed.
data IssuingAuthorizationVerificationDataAuthentication'
  = IssuingAuthorizationVerificationDataAuthentication'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingAuthorizationVerificationDataAuthentication'EnumTyped Data.Text.Internal.Text
  | IssuingAuthorizationVerificationDataAuthentication'EnumStringFailure
  | IssuingAuthorizationVerificationDataAuthentication'EnumStringNone
  | IssuingAuthorizationVerificationDataAuthentication'EnumStringSuccess
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationDataAuthentication' where
  toJSON (IssuingAuthorizationVerificationDataAuthentication'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationVerificationDataAuthentication'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationVerificationDataAuthentication'EnumStringFailure) = "failure"
  toJSON (IssuingAuthorizationVerificationDataAuthentication'EnumStringNone) = "none"
  toJSON (IssuingAuthorizationVerificationDataAuthentication'EnumStringSuccess) = "success"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationDataAuthentication' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "failure" -> IssuingAuthorizationVerificationDataAuthentication'EnumStringFailure
            | val GHC.Classes.== "none" -> IssuingAuthorizationVerificationDataAuthentication'EnumStringNone
            | val GHC.Classes.== "success" -> IssuingAuthorizationVerificationDataAuthentication'EnumStringSuccess
            | GHC.Base.otherwise -> IssuingAuthorizationVerificationDataAuthentication'EnumOther val
      )

-- | Defines the enum schema issuing_authorization_verification_dataCvc_check\'
--
-- Whether the cardholder provided a CVC and if it matched Stripe’s record.
data IssuingAuthorizationVerificationDataCvcCheck'
  = IssuingAuthorizationVerificationDataCvcCheck'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingAuthorizationVerificationDataCvcCheck'EnumTyped Data.Text.Internal.Text
  | IssuingAuthorizationVerificationDataCvcCheck'EnumStringMatch
  | IssuingAuthorizationVerificationDataCvcCheck'EnumStringMismatch
  | IssuingAuthorizationVerificationDataCvcCheck'EnumStringNotProvided
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationDataCvcCheck' where
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'EnumStringMatch) = "match"
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'EnumStringMismatch) = "mismatch"
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'EnumStringNotProvided) = "not_provided"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationDataCvcCheck' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "match" -> IssuingAuthorizationVerificationDataCvcCheck'EnumStringMatch
            | val GHC.Classes.== "mismatch" -> IssuingAuthorizationVerificationDataCvcCheck'EnumStringMismatch
            | val GHC.Classes.== "not_provided" -> IssuingAuthorizationVerificationDataCvcCheck'EnumStringNotProvided
            | GHC.Base.otherwise -> IssuingAuthorizationVerificationDataCvcCheck'EnumOther val
      )
