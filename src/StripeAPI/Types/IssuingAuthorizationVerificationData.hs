{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema IssuingAuthorizationVerificationData
module StripeAPI.Types.IssuingAuthorizationVerificationData where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_authorization_verification_data@ in the specification.
data IssuingAuthorizationVerificationData
  = IssuingAuthorizationVerificationData
      { -- | address_line1_check: Whether the cardholder provided an address first line and if it matched the cardholder’s \`billing.address.line1\`.
        issuingAuthorizationVerificationDataAddressLine1Check :: IssuingAuthorizationVerificationDataAddressLine1Check',
        -- | address_zip_check: Whether the cardholder provided a zip (or postal code) and if it matched the cardholder’s \`billing.address.postal_code\`.
        issuingAuthorizationVerificationDataAddressZipCheck :: IssuingAuthorizationVerificationDataAddressZipCheck',
        -- | authentication: Whether 3DS authentication was performed.
        issuingAuthorizationVerificationDataAuthentication :: IssuingAuthorizationVerificationDataAuthentication',
        -- | cvc_check: Whether the cardholder provided a CVC and if it matched Stripe’s record.
        issuingAuthorizationVerificationDataCvcCheck :: IssuingAuthorizationVerificationDataCvcCheck'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationData where
  toJSON obj = Data.Aeson.Types.Internal.object ("address_line1_check" Data.Aeson.Types.ToJSON..= issuingAuthorizationVerificationDataAddressLine1Check obj : "address_zip_check" Data.Aeson.Types.ToJSON..= issuingAuthorizationVerificationDataAddressZipCheck obj : "authentication" Data.Aeson.Types.ToJSON..= issuingAuthorizationVerificationDataAuthentication obj : "cvc_check" Data.Aeson.Types.ToJSON..= issuingAuthorizationVerificationDataCvcCheck obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address_line1_check" Data.Aeson.Types.ToJSON..= issuingAuthorizationVerificationDataAddressLine1Check obj) GHC.Base.<> (("address_zip_check" Data.Aeson.Types.ToJSON..= issuingAuthorizationVerificationDataAddressZipCheck obj) GHC.Base.<> (("authentication" Data.Aeson.Types.ToJSON..= issuingAuthorizationVerificationDataAuthentication obj) GHC.Base.<> ("cvc_check" Data.Aeson.Types.ToJSON..= issuingAuthorizationVerificationDataCvcCheck obj))))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingAuthorizationVerificationData" (\obj -> (((GHC.Base.pure IssuingAuthorizationVerificationData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "authentication")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "cvc_check"))

-- | Create a new 'IssuingAuthorizationVerificationData' with all required fields.
mkIssuingAuthorizationVerificationData ::
  -- | 'issuingAuthorizationVerificationDataAddressLine1Check'
  IssuingAuthorizationVerificationDataAddressLine1Check' ->
  -- | 'issuingAuthorizationVerificationDataAddressZipCheck'
  IssuingAuthorizationVerificationDataAddressZipCheck' ->
  -- | 'issuingAuthorizationVerificationDataAuthentication'
  IssuingAuthorizationVerificationDataAuthentication' ->
  -- | 'issuingAuthorizationVerificationDataCvcCheck'
  IssuingAuthorizationVerificationDataCvcCheck' ->
  IssuingAuthorizationVerificationData
mkIssuingAuthorizationVerificationData issuingAuthorizationVerificationDataAddressLine1Check issuingAuthorizationVerificationDataAddressZipCheck issuingAuthorizationVerificationDataAuthentication issuingAuthorizationVerificationDataCvcCheck =
  IssuingAuthorizationVerificationData
    { issuingAuthorizationVerificationDataAddressLine1Check = issuingAuthorizationVerificationDataAddressLine1Check,
      issuingAuthorizationVerificationDataAddressZipCheck = issuingAuthorizationVerificationDataAddressZipCheck,
      issuingAuthorizationVerificationDataAuthentication = issuingAuthorizationVerificationDataAuthentication,
      issuingAuthorizationVerificationDataCvcCheck = issuingAuthorizationVerificationDataCvcCheck
    }

-- | Defines the enum schema located at @components.schemas.issuing_authorization_verification_data.properties.address_line1_check@ in the specification.
--
-- Whether the cardholder provided an address first line and if it matched the cardholder’s \`billing.address.line1\`.
data IssuingAuthorizationVerificationDataAddressLine1Check'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationVerificationDataAddressLine1Check'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationVerificationDataAddressLine1Check'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"match"@
    IssuingAuthorizationVerificationDataAddressLine1Check'EnumMatch
  | -- | Represents the JSON value @"mismatch"@
    IssuingAuthorizationVerificationDataAddressLine1Check'EnumMismatch
  | -- | Represents the JSON value @"not_provided"@
    IssuingAuthorizationVerificationDataAddressLine1Check'EnumNotProvided
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationDataAddressLine1Check' where
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'Other val) = val
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'EnumMatch) = "match"
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'EnumMismatch) = "mismatch"
  toJSON (IssuingAuthorizationVerificationDataAddressLine1Check'EnumNotProvided) = "not_provided"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationDataAddressLine1Check' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "match" -> IssuingAuthorizationVerificationDataAddressLine1Check'EnumMatch
            | val GHC.Classes.== "mismatch" -> IssuingAuthorizationVerificationDataAddressLine1Check'EnumMismatch
            | val GHC.Classes.== "not_provided" -> IssuingAuthorizationVerificationDataAddressLine1Check'EnumNotProvided
            | GHC.Base.otherwise -> IssuingAuthorizationVerificationDataAddressLine1Check'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing_authorization_verification_data.properties.address_zip_check@ in the specification.
--
-- Whether the cardholder provided a zip (or postal code) and if it matched the cardholder’s \`billing.address.postal_code\`.
data IssuingAuthorizationVerificationDataAddressZipCheck'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationVerificationDataAddressZipCheck'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationVerificationDataAddressZipCheck'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"match"@
    IssuingAuthorizationVerificationDataAddressZipCheck'EnumMatch
  | -- | Represents the JSON value @"mismatch"@
    IssuingAuthorizationVerificationDataAddressZipCheck'EnumMismatch
  | -- | Represents the JSON value @"not_provided"@
    IssuingAuthorizationVerificationDataAddressZipCheck'EnumNotProvided
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationDataAddressZipCheck' where
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'Other val) = val
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'EnumMatch) = "match"
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'EnumMismatch) = "mismatch"
  toJSON (IssuingAuthorizationVerificationDataAddressZipCheck'EnumNotProvided) = "not_provided"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationDataAddressZipCheck' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "match" -> IssuingAuthorizationVerificationDataAddressZipCheck'EnumMatch
            | val GHC.Classes.== "mismatch" -> IssuingAuthorizationVerificationDataAddressZipCheck'EnumMismatch
            | val GHC.Classes.== "not_provided" -> IssuingAuthorizationVerificationDataAddressZipCheck'EnumNotProvided
            | GHC.Base.otherwise -> IssuingAuthorizationVerificationDataAddressZipCheck'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing_authorization_verification_data.properties.authentication@ in the specification.
--
-- Whether 3DS authentication was performed.
data IssuingAuthorizationVerificationDataAuthentication'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationVerificationDataAuthentication'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationVerificationDataAuthentication'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"failure"@
    IssuingAuthorizationVerificationDataAuthentication'EnumFailure
  | -- | Represents the JSON value @"none"@
    IssuingAuthorizationVerificationDataAuthentication'EnumNone
  | -- | Represents the JSON value @"success"@
    IssuingAuthorizationVerificationDataAuthentication'EnumSuccess
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationDataAuthentication' where
  toJSON (IssuingAuthorizationVerificationDataAuthentication'Other val) = val
  toJSON (IssuingAuthorizationVerificationDataAuthentication'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationVerificationDataAuthentication'EnumFailure) = "failure"
  toJSON (IssuingAuthorizationVerificationDataAuthentication'EnumNone) = "none"
  toJSON (IssuingAuthorizationVerificationDataAuthentication'EnumSuccess) = "success"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationDataAuthentication' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "failure" -> IssuingAuthorizationVerificationDataAuthentication'EnumFailure
            | val GHC.Classes.== "none" -> IssuingAuthorizationVerificationDataAuthentication'EnumNone
            | val GHC.Classes.== "success" -> IssuingAuthorizationVerificationDataAuthentication'EnumSuccess
            | GHC.Base.otherwise -> IssuingAuthorizationVerificationDataAuthentication'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing_authorization_verification_data.properties.cvc_check@ in the specification.
--
-- Whether the cardholder provided a CVC and if it matched Stripe’s record.
data IssuingAuthorizationVerificationDataCvcCheck'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingAuthorizationVerificationDataCvcCheck'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingAuthorizationVerificationDataCvcCheck'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"match"@
    IssuingAuthorizationVerificationDataCvcCheck'EnumMatch
  | -- | Represents the JSON value @"mismatch"@
    IssuingAuthorizationVerificationDataCvcCheck'EnumMismatch
  | -- | Represents the JSON value @"not_provided"@
    IssuingAuthorizationVerificationDataCvcCheck'EnumNotProvided
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingAuthorizationVerificationDataCvcCheck' where
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'Other val) = val
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'EnumMatch) = "match"
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'EnumMismatch) = "mismatch"
  toJSON (IssuingAuthorizationVerificationDataCvcCheck'EnumNotProvided) = "not_provided"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingAuthorizationVerificationDataCvcCheck' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "match" -> IssuingAuthorizationVerificationDataCvcCheck'EnumMatch
            | val GHC.Classes.== "mismatch" -> IssuingAuthorizationVerificationDataCvcCheck'EnumMismatch
            | val GHC.Classes.== "not_provided" -> IssuingAuthorizationVerificationDataCvcCheck'EnumNotProvided
            | GHC.Base.otherwise -> IssuingAuthorizationVerificationDataCvcCheck'Other val
      )
