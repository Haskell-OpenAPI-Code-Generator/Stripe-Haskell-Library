{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema AccountBrandingSettings
module StripeAPI.Types.AccountBrandingSettings where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.File
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.account_branding_settings@ in the specification.
data AccountBrandingSettings
  = AccountBrandingSettings
      { -- | icon: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
        accountBrandingSettingsIcon :: (GHC.Maybe.Maybe AccountBrandingSettingsIcon'Variants),
        -- | logo: (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account\'s name next to it if provided. Must be at least 128px x 128px.
        accountBrandingSettingsLogo :: (GHC.Maybe.Maybe AccountBrandingSettingsLogo'Variants),
        -- | primary_color: A CSS hex color value representing the primary branding color for this account
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        accountBrandingSettingsPrimaryColor :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON AccountBrandingSettings where
  toJSON obj = Data.Aeson.Types.Internal.object ("icon" Data.Aeson.Types.ToJSON..= accountBrandingSettingsIcon obj : "logo" Data.Aeson.Types.ToJSON..= accountBrandingSettingsLogo obj : "primary_color" Data.Aeson.Types.ToJSON..= accountBrandingSettingsPrimaryColor obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("icon" Data.Aeson.Types.ToJSON..= accountBrandingSettingsIcon obj) GHC.Base.<> (("logo" Data.Aeson.Types.ToJSON..= accountBrandingSettingsLogo obj) GHC.Base.<> ("primary_color" Data.Aeson.Types.ToJSON..= accountBrandingSettingsPrimaryColor obj)))

instance Data.Aeson.Types.FromJSON.FromJSON AccountBrandingSettings where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "AccountBrandingSettings" (\obj -> ((GHC.Base.pure AccountBrandingSettings GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "icon")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "logo")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "primary_color"))

-- | Create a new 'AccountBrandingSettings' with all required fields.
mkAccountBrandingSettings :: AccountBrandingSettings
mkAccountBrandingSettings =
  AccountBrandingSettings
    { accountBrandingSettingsIcon = GHC.Maybe.Nothing,
      accountBrandingSettingsLogo = GHC.Maybe.Nothing,
      accountBrandingSettingsPrimaryColor = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.account_branding_settings.properties.icon.anyOf@ in the specification.
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
data AccountBrandingSettingsIcon'Variants
  = AccountBrandingSettingsIcon'File File
  | AccountBrandingSettingsIcon'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountBrandingSettingsIcon'Variants where
  toJSON (AccountBrandingSettingsIcon'File a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (AccountBrandingSettingsIcon'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON AccountBrandingSettingsIcon'Variants where
  parseJSON val = case (AccountBrandingSettingsIcon'File Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((AccountBrandingSettingsIcon'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.account_branding_settings.properties.logo.anyOf@ in the specification.
--
-- (ID of a [file upload](https:\/\/stripe.com\/docs\/guides\/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account\'s name next to it if provided. Must be at least 128px x 128px.
data AccountBrandingSettingsLogo'Variants
  = AccountBrandingSettingsLogo'File File
  | AccountBrandingSettingsLogo'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON AccountBrandingSettingsLogo'Variants where
  toJSON (AccountBrandingSettingsLogo'File a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (AccountBrandingSettingsLogo'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON AccountBrandingSettingsLogo'Variants where
  parseJSON val = case (AccountBrandingSettingsLogo'File Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((AccountBrandingSettingsLogo'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
