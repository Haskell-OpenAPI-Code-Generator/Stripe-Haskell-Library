{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema DisputePaymentMethodDetails
module StripeAPI.Types.DisputePaymentMethodDetails where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.DisputePaymentMethodDetailsCard
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.dispute_payment_method_details@ in the specification.
data DisputePaymentMethodDetails = DisputePaymentMethodDetails
  { -- | card: Card specific dispute details.
    disputePaymentMethodDetailsCard :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable DisputePaymentMethodDetailsCard'NonNullable))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputePaymentMethodDetails where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsCard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "card"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("card" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsCard obj) : ["type" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "card"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputePaymentMethodDetails where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputePaymentMethodDetails" (\obj -> GHC.Base.pure DisputePaymentMethodDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "card"))

-- | Create a new 'DisputePaymentMethodDetails' with all required fields.
mkDisputePaymentMethodDetails :: DisputePaymentMethodDetails
mkDisputePaymentMethodDetails = DisputePaymentMethodDetails {disputePaymentMethodDetailsCard = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.dispute_payment_method_details.properties.card.anyOf@ in the specification.
--
-- Card specific dispute details.
data DisputePaymentMethodDetailsCard'NonNullable = DisputePaymentMethodDetailsCard'NonNullable
  { -- | brand: Card brand. Can be \`amex\`, \`diners\`, \`discover\`, \`eftpos_au\`, \`jcb\`, \`mastercard\`, \`unionpay\`, \`visa\`, or \`unknown\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputePaymentMethodDetailsCard'NonNullableBrand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | network_reason_code: The card network\'s specific dispute reason code, which maps to one of Stripe\'s primary dispute categories to simplify response guidance. The [Network code map](https:\/\/stripe.com\/docs\/disputes\/categories\#network-code-map) lists all available dispute reason codes by network.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    disputePaymentMethodDetailsCard'NonNullableNetworkReasonCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON DisputePaymentMethodDetailsCard'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsCard'NonNullableBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_reason_code" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsCard'NonNullableNetworkReasonCode obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("brand" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsCard'NonNullableBrand obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("network_reason_code" Data.Aeson.Types.ToJSON..=)) (disputePaymentMethodDetailsCard'NonNullableNetworkReasonCode obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON DisputePaymentMethodDetailsCard'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "DisputePaymentMethodDetailsCard'NonNullable" (\obj -> (GHC.Base.pure DisputePaymentMethodDetailsCard'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "network_reason_code"))

-- | Create a new 'DisputePaymentMethodDetailsCard'NonNullable' with all required fields.
mkDisputePaymentMethodDetailsCard'NonNullable :: DisputePaymentMethodDetailsCard'NonNullable
mkDisputePaymentMethodDetailsCard'NonNullable =
  DisputePaymentMethodDetailsCard'NonNullable
    { disputePaymentMethodDetailsCard'NonNullableBrand = GHC.Maybe.Nothing,
      disputePaymentMethodDetailsCard'NonNullableNetworkReasonCode = GHC.Maybe.Nothing
    }
