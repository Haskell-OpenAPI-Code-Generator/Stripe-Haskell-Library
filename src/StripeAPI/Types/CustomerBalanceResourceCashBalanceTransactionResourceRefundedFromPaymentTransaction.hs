{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction
module StripeAPI.Types.CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Refund
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction@ in the specification.
data CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction = CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction
  { -- | refund: The [Refund](https:\/\/stripe.com\/docs\/api\/refunds\/object) that moved these funds into the customer\'s cash balance.
    customerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund :: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Variants
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["refund" Data.Aeson.Types.ToJSON..= customerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["refund" Data.Aeson.Types.ToJSON..= customerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction" (\obj -> GHC.Base.pure CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "refund"))

-- | Create a new 'CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction' with all required fields.
mkCustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction ::
  -- | 'customerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'
  CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Variants ->
  CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction
mkCustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction customerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund = CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction {customerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund = customerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund}

-- | Defines the oneOf schema located at @components.schemas.customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction.properties.refund.anyOf@ in the specification.
--
-- The [Refund](https:\/\/stripe.com\/docs\/api\/refunds\/object) that moved these funds into the customer\'s cash balance.
data CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Variants
  = CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Text Data.Text.Internal.Text
  | CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Refund Refund
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Variants where
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Refund a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Variants where
  parseJSON val = case (CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransactionRefund'Refund Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
