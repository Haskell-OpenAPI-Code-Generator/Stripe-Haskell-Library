{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentLinksResourceCompletedSessions
module StripeAPI.Types.PaymentLinksResourceCompletedSessions where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_links_resource_completed_sessions@ in the specification.
data PaymentLinksResourceCompletedSessions = PaymentLinksResourceCompletedSessions
  { -- | count: The current number of checkout sessions that have been completed on the payment link which count towards the \`completed_sessions\` restriction to be met.
    paymentLinksResourceCompletedSessionsCount :: GHC.Types.Int,
    -- | limit: The maximum number of checkout sessions that can be completed for the \`completed_sessions\` restriction to be met.
    paymentLinksResourceCompletedSessionsLimit :: GHC.Types.Int
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentLinksResourceCompletedSessions where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["count" Data.Aeson.Types.ToJSON..= paymentLinksResourceCompletedSessionsCount obj] : ["limit" Data.Aeson.Types.ToJSON..= paymentLinksResourceCompletedSessionsLimit obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["count" Data.Aeson.Types.ToJSON..= paymentLinksResourceCompletedSessionsCount obj] : ["limit" Data.Aeson.Types.ToJSON..= paymentLinksResourceCompletedSessionsLimit obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentLinksResourceCompletedSessions where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentLinksResourceCompletedSessions" (\obj -> (GHC.Base.pure PaymentLinksResourceCompletedSessions GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "limit"))

-- | Create a new 'PaymentLinksResourceCompletedSessions' with all required fields.
mkPaymentLinksResourceCompletedSessions ::
  -- | 'paymentLinksResourceCompletedSessionsCount'
  GHC.Types.Int ->
  -- | 'paymentLinksResourceCompletedSessionsLimit'
  GHC.Types.Int ->
  PaymentLinksResourceCompletedSessions
mkPaymentLinksResourceCompletedSessions paymentLinksResourceCompletedSessionsCount paymentLinksResourceCompletedSessionsLimit =
  PaymentLinksResourceCompletedSessions
    { paymentLinksResourceCompletedSessionsCount = paymentLinksResourceCompletedSessionsCount,
      paymentLinksResourceCompletedSessionsLimit = paymentLinksResourceCompletedSessionsLimit
    }
