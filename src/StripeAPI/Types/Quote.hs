-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Quote
module StripeAPI.Types.Quote where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.Application
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedApplication
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.DeletedInvoice
import {-# SOURCE #-} StripeAPI.Types.Discount
import {-# SOURCE #-} StripeAPI.Types.Invoice
import {-# SOURCE #-} StripeAPI.Types.InvoiceSettingQuoteSetting
import {-# SOURCE #-} StripeAPI.Types.Item
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceAutomaticTax
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceComputed
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceFromQuote
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceStatusTransitions
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceSubscriptionData
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceTotalDetails
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceTransferData
import {-# SOURCE #-} StripeAPI.Types.Subscription
import {-# SOURCE #-} StripeAPI.Types.SubscriptionSchedule
import {-# SOURCE #-} StripeAPI.Types.TaxRate
import {-# SOURCE #-} StripeAPI.Types.TestHelpers_TestClock

-- | Defines the object schema located at @components.schemas.quote@ in the specification.
-- 
-- A Quote is a way to model prices that you\'d like to provide to a customer.
-- Once accepted, it will automatically create an invoice, subscription or subscription schedule.
data Quote = Quote {
  -- | amount_subtotal: Total before any discounts or taxes are applied.
  quoteAmountSubtotal :: GHC.Types.Int
  -- | amount_total: Total after discounts and taxes are applied.
  , quoteAmountTotal :: GHC.Types.Int
  -- | application: ID of the Connect Application that created the quote.
  , quoteApplication :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteApplication'NonNullableVariants))
  -- | application_fee_amount: The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner\'s Stripe account. Only applicable if there are no line items with recurring prices on the quote.
  , quoteApplicationFeeAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  -- | application_fee_percent: A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner\'s Stripe account. Only applicable if there are line items with recurring prices on the quote.
  , quoteApplicationFeePercent :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Double))
  -- | automatic_tax: 
  , quoteAutomaticTax :: QuotesResourceAutomaticTax
  -- | collection_method: Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to \`charge_automatically\`.
  , quoteCollectionMethod :: QuoteCollectionMethod'
  -- | computed: 
  , quoteComputed :: QuotesResourceComputed
  -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
  , quoteCreated :: GHC.Types.Int
  -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , quoteCurrency :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | customer: The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
  , quoteCustomer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteCustomer'NonNullableVariants))
  -- | default_tax_rates: The tax rates applied to this quote.
  , quoteDefaultTaxRates :: (GHC.Maybe.Maybe ([QuoteDefaultTaxRates'Variants]))
  -- | description: A description that will be displayed on the quote PDF.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , quoteDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | discounts: The discounts applied to this quote.
  , quoteDiscounts :: ([QuoteDiscounts'Variants])
  -- | expires_at: The date on which the quote will be canceled if in \`open\` or \`draft\` status. Measured in seconds since the Unix epoch.
  , quoteExpiresAt :: GHC.Types.Int
  -- | footer: A footer that will be displayed on the quote PDF.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , quoteFooter :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | from_quote: Details of the quote that was cloned. See the [cloning documentation](https:\/\/stripe.com\/docs\/quotes\/clone) for more details.
  , quoteFromQuote :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteFromQuote'NonNullable))
  -- | header: A header that will be displayed on the quote PDF.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , quoteHeader :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , quoteId :: Data.Text.Internal.Text
  -- | invoice: The invoice that was created from this quote.
  , quoteInvoice :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteInvoice'NonNullableVariants))
  -- | invoice_settings: All invoices will be billed using the specified settings.
  , quoteInvoiceSettings :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteInvoiceSettings'NonNullable))
  -- | line_items: A list of items the customer is being quoted for.
  , quoteLineItems :: (GHC.Maybe.Maybe QuoteLineItems')
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , quoteLivemode :: GHC.Types.Bool
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  , quoteMetadata :: Data.Aeson.Types.Internal.Object
  -- | number: A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https:\/\/stripe.com\/docs\/quotes\/overview\#finalize).
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , quoteNumber :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  -- | on_behalf_of: The account on behalf of which to charge. See the [Connect documentation](https:\/\/support.stripe.com\/questions\/sending-invoices-on-behalf-of-connected-accounts) for details.
  , quoteOnBehalfOf :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteOnBehalfOf'NonNullableVariants))
  -- | status: The status of the quote.
  , quoteStatus :: QuoteStatus'
  -- | status_transitions: 
  , quoteStatusTransitions :: QuotesResourceStatusTransitions
  -- | subscription: The subscription that was created or updated from this quote.
  , quoteSubscription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteSubscription'NonNullableVariants))
  -- | subscription_data: 
  , quoteSubscriptionData :: QuotesResourceSubscriptionData
  -- | subscription_schedule: The subscription schedule that was created or updated from this quote.
  , quoteSubscriptionSchedule :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteSubscriptionSchedule'NonNullableVariants))
  -- | test_clock: ID of the test clock this quote belongs to.
  , quoteTestClock :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteTestClock'NonNullableVariants))
  -- | total_details: 
  , quoteTotalDetails :: QuotesResourceTotalDetails
  -- | transfer_data: The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
  , quoteTransferData :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable QuoteTransferData'NonNullable))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Quote
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount_subtotal" Data.Aeson.Types.ToJSON..= quoteAmountSubtotal obj] : ["amount_total" Data.Aeson.Types.ToJSON..= quoteAmountTotal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (quoteApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (quoteApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_percent" Data.Aeson.Types.ToJSON..=)) (quoteApplicationFeePercent obj) : ["automatic_tax" Data.Aeson.Types.ToJSON..= quoteAutomaticTax obj] : ["collection_method" Data.Aeson.Types.ToJSON..= quoteCollectionMethod obj] : ["computed" Data.Aeson.Types.ToJSON..= quoteComputed obj] : ["created" Data.Aeson.Types.ToJSON..= quoteCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (quoteCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (quoteCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_tax_rates" Data.Aeson.Types.ToJSON..=)) (quoteDefaultTaxRates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (quoteDescription obj) : ["discounts" Data.Aeson.Types.ToJSON..= quoteDiscounts obj] : ["expires_at" Data.Aeson.Types.ToJSON..= quoteExpiresAt obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer" Data.Aeson.Types.ToJSON..=)) (quoteFooter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from_quote" Data.Aeson.Types.ToJSON..=)) (quoteFromQuote obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header" Data.Aeson.Types.ToJSON..=)) (quoteHeader obj) : ["id" Data.Aeson.Types.ToJSON..= quoteId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice" Data.Aeson.Types.ToJSON..=)) (quoteInvoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_settings" Data.Aeson.Types.ToJSON..=)) (quoteInvoiceSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (quoteLineItems obj) : ["livemode" Data.Aeson.Types.ToJSON..= quoteLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= quoteMetadata obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("number" Data.Aeson.Types.ToJSON..=)) (quoteNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (quoteOnBehalfOf obj) : ["status" Data.Aeson.Types.ToJSON..= quoteStatus obj] : ["status_transitions" Data.Aeson.Types.ToJSON..= quoteStatusTransitions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription" Data.Aeson.Types.ToJSON..=)) (quoteSubscription obj) : ["subscription_data" Data.Aeson.Types.ToJSON..= quoteSubscriptionData obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_schedule" Data.Aeson.Types.ToJSON..=)) (quoteSubscriptionSchedule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("test_clock" Data.Aeson.Types.ToJSON..=)) (quoteTestClock obj) : ["total_details" Data.Aeson.Types.ToJSON..= quoteTotalDetails obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (quoteTransferData obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "quote"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount_subtotal" Data.Aeson.Types.ToJSON..= quoteAmountSubtotal obj] : ["amount_total" Data.Aeson.Types.ToJSON..= quoteAmountTotal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application" Data.Aeson.Types.ToJSON..=)) (quoteApplication obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_amount" Data.Aeson.Types.ToJSON..=)) (quoteApplicationFeeAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("application_fee_percent" Data.Aeson.Types.ToJSON..=)) (quoteApplicationFeePercent obj) : ["automatic_tax" Data.Aeson.Types.ToJSON..= quoteAutomaticTax obj] : ["collection_method" Data.Aeson.Types.ToJSON..= quoteCollectionMethod obj] : ["computed" Data.Aeson.Types.ToJSON..= quoteComputed obj] : ["created" Data.Aeson.Types.ToJSON..= quoteCreated obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("currency" Data.Aeson.Types.ToJSON..=)) (quoteCurrency obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (quoteCustomer obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("default_tax_rates" Data.Aeson.Types.ToJSON..=)) (quoteDefaultTaxRates obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (quoteDescription obj) : ["discounts" Data.Aeson.Types.ToJSON..= quoteDiscounts obj] : ["expires_at" Data.Aeson.Types.ToJSON..= quoteExpiresAt obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("footer" Data.Aeson.Types.ToJSON..=)) (quoteFooter obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("from_quote" Data.Aeson.Types.ToJSON..=)) (quoteFromQuote obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("header" Data.Aeson.Types.ToJSON..=)) (quoteHeader obj) : ["id" Data.Aeson.Types.ToJSON..= quoteId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice" Data.Aeson.Types.ToJSON..=)) (quoteInvoice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("invoice_settings" Data.Aeson.Types.ToJSON..=)) (quoteInvoiceSettings obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (quoteLineItems obj) : ["livemode" Data.Aeson.Types.ToJSON..= quoteLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= quoteMetadata obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("number" Data.Aeson.Types.ToJSON..=)) (quoteNumber obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("on_behalf_of" Data.Aeson.Types.ToJSON..=)) (quoteOnBehalfOf obj) : ["status" Data.Aeson.Types.ToJSON..= quoteStatus obj] : ["status_transitions" Data.Aeson.Types.ToJSON..= quoteStatusTransitions obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription" Data.Aeson.Types.ToJSON..=)) (quoteSubscription obj) : ["subscription_data" Data.Aeson.Types.ToJSON..= quoteSubscriptionData obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("subscription_schedule" Data.Aeson.Types.ToJSON..=)) (quoteSubscriptionSchedule obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("test_clock" Data.Aeson.Types.ToJSON..=)) (quoteTestClock obj) : ["total_details" Data.Aeson.Types.ToJSON..= quoteTotalDetails obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("transfer_data" Data.Aeson.Types.ToJSON..=)) (quoteTransferData obj) : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "quote"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Quote
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Quote" (\obj -> (((((((((((((((((((((((((((((((((GHC.Base.pure Quote GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_fee_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "application_fee_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "automatic_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "collection_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "computed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "default_tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "expires_at")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "footer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "from_quote")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "header")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "invoice_settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "on_behalf_of")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status_transitions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "subscription_data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "subscription_schedule")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "test_clock")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "transfer_data"))
-- | Create a new 'Quote' with all required fields.
mkQuote :: GHC.Types.Int -- ^ 'quoteAmountSubtotal'
  -> GHC.Types.Int -- ^ 'quoteAmountTotal'
  -> QuotesResourceAutomaticTax -- ^ 'quoteAutomaticTax'
  -> QuoteCollectionMethod' -- ^ 'quoteCollectionMethod'
  -> QuotesResourceComputed -- ^ 'quoteComputed'
  -> GHC.Types.Int -- ^ 'quoteCreated'
  -> [QuoteDiscounts'Variants] -- ^ 'quoteDiscounts'
  -> GHC.Types.Int -- ^ 'quoteExpiresAt'
  -> Data.Text.Internal.Text -- ^ 'quoteId'
  -> GHC.Types.Bool -- ^ 'quoteLivemode'
  -> Data.Aeson.Types.Internal.Object -- ^ 'quoteMetadata'
  -> QuoteStatus' -- ^ 'quoteStatus'
  -> QuotesResourceStatusTransitions -- ^ 'quoteStatusTransitions'
  -> QuotesResourceSubscriptionData -- ^ 'quoteSubscriptionData'
  -> QuotesResourceTotalDetails -- ^ 'quoteTotalDetails'
  -> Quote
mkQuote quoteAmountSubtotal quoteAmountTotal quoteAutomaticTax quoteCollectionMethod quoteComputed quoteCreated quoteDiscounts quoteExpiresAt quoteId quoteLivemode quoteMetadata quoteStatus quoteStatusTransitions quoteSubscriptionData quoteTotalDetails = Quote{quoteAmountSubtotal = quoteAmountSubtotal,
                                                                                                                                                                                                                                                                     quoteAmountTotal = quoteAmountTotal,
                                                                                                                                                                                                                                                                     quoteApplication = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteApplicationFeeAmount = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteApplicationFeePercent = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteAutomaticTax = quoteAutomaticTax,
                                                                                                                                                                                                                                                                     quoteCollectionMethod = quoteCollectionMethod,
                                                                                                                                                                                                                                                                     quoteComputed = quoteComputed,
                                                                                                                                                                                                                                                                     quoteCreated = quoteCreated,
                                                                                                                                                                                                                                                                     quoteCurrency = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteCustomer = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteDefaultTaxRates = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteDescription = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteDiscounts = quoteDiscounts,
                                                                                                                                                                                                                                                                     quoteExpiresAt = quoteExpiresAt,
                                                                                                                                                                                                                                                                     quoteFooter = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteFromQuote = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteHeader = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteId = quoteId,
                                                                                                                                                                                                                                                                     quoteInvoice = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteInvoiceSettings = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteLineItems = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteLivemode = quoteLivemode,
                                                                                                                                                                                                                                                                     quoteMetadata = quoteMetadata,
                                                                                                                                                                                                                                                                     quoteNumber = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteOnBehalfOf = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteStatus = quoteStatus,
                                                                                                                                                                                                                                                                     quoteStatusTransitions = quoteStatusTransitions,
                                                                                                                                                                                                                                                                     quoteSubscription = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteSubscriptionData = quoteSubscriptionData,
                                                                                                                                                                                                                                                                     quoteSubscriptionSchedule = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteTestClock = GHC.Maybe.Nothing,
                                                                                                                                                                                                                                                                     quoteTotalDetails = quoteTotalDetails,
                                                                                                                                                                                                                                                                     quoteTransferData = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.quote.properties.application.anyOf@ in the specification.
-- 
-- ID of the Connect Application that created the quote.
data QuoteApplication'NonNullableVariants =
   QuoteApplication'NonNullableText Data.Text.Internal.Text
  | QuoteApplication'NonNullableApplication Application
  | QuoteApplication'NonNullableDeletedApplication DeletedApplication
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteApplication'NonNullableVariants
    where toJSON (QuoteApplication'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteApplication'NonNullableApplication a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteApplication'NonNullableDeletedApplication a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteApplication'NonNullableVariants
    where parseJSON val = case (QuoteApplication'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteApplication'NonNullableApplication Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteApplication'NonNullableDeletedApplication Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema located at @components.schemas.quote.properties.collection_method@ in the specification.
-- 
-- Either \`charge_automatically\`, or \`send_invoice\`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to \`charge_automatically\`.
data QuoteCollectionMethod' =
   QuoteCollectionMethod'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | QuoteCollectionMethod'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | QuoteCollectionMethod'EnumChargeAutomatically -- ^ Represents the JSON value @"charge_automatically"@
  | QuoteCollectionMethod'EnumSendInvoice -- ^ Represents the JSON value @"send_invoice"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteCollectionMethod'
    where toJSON (QuoteCollectionMethod'Other val) = val
          toJSON (QuoteCollectionMethod'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (QuoteCollectionMethod'EnumChargeAutomatically) = "charge_automatically"
          toJSON (QuoteCollectionMethod'EnumSendInvoice) = "send_invoice"
instance Data.Aeson.Types.FromJSON.FromJSON QuoteCollectionMethod'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "charge_automatically" -> QuoteCollectionMethod'EnumChargeAutomatically
                                            | val GHC.Classes.== "send_invoice" -> QuoteCollectionMethod'EnumSendInvoice
                                            | GHC.Base.otherwise -> QuoteCollectionMethod'Other val)
-- | Defines the oneOf schema located at @components.schemas.quote.properties.customer.anyOf@ in the specification.
-- 
-- The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
data QuoteCustomer'NonNullableVariants =
   QuoteCustomer'NonNullableText Data.Text.Internal.Text
  | QuoteCustomer'NonNullableCustomer Customer
  | QuoteCustomer'NonNullableDeletedCustomer DeletedCustomer
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteCustomer'NonNullableVariants
    where toJSON (QuoteCustomer'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteCustomer'NonNullableCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteCustomer'NonNullableDeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteCustomer'NonNullableVariants
    where parseJSON val = case (QuoteCustomer'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteCustomer'NonNullableCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteCustomer'NonNullableDeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @components.schemas.quote.properties.default_tax_rates.items.anyOf@ in the specification.
-- 
-- 
data QuoteDefaultTaxRates'Variants =
   QuoteDefaultTaxRates'Text Data.Text.Internal.Text
  | QuoteDefaultTaxRates'TaxRate TaxRate
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteDefaultTaxRates'Variants
    where toJSON (QuoteDefaultTaxRates'Text a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteDefaultTaxRates'TaxRate a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteDefaultTaxRates'Variants
    where parseJSON val = case (QuoteDefaultTaxRates'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteDefaultTaxRates'TaxRate Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @components.schemas.quote.properties.discounts.items.anyOf@ in the specification.
-- 
-- 
data QuoteDiscounts'Variants =
   QuoteDiscounts'Text Data.Text.Internal.Text
  | QuoteDiscounts'Discount Discount
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteDiscounts'Variants
    where toJSON (QuoteDiscounts'Text a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteDiscounts'Discount a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteDiscounts'Variants
    where parseJSON val = case (QuoteDiscounts'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteDiscounts'Discount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @components.schemas.quote.properties.from_quote.anyOf@ in the specification.
-- 
-- Details of the quote that was cloned. See the [cloning documentation](https:\\\/\\\/stripe.com\\\/docs\\\/quotes\\\/clone) for more details.
data QuoteFromQuote'NonNullable = QuoteFromQuote'NonNullable {
  -- | is_revision: Whether this quote is a revision of a different quote.
  quoteFromQuote'NonNullableIsRevision :: (GHC.Maybe.Maybe GHC.Types.Bool)
  -- | quote: The quote that was cloned.
  , quoteFromQuote'NonNullableQuote :: (GHC.Maybe.Maybe QuoteFromQuote'NonNullableQuote'Variants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteFromQuote'NonNullable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_revision" Data.Aeson.Types.ToJSON..=)) (quoteFromQuote'NonNullableIsRevision obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quote" Data.Aeson.Types.ToJSON..=)) (quoteFromQuote'NonNullableQuote obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("is_revision" Data.Aeson.Types.ToJSON..=)) (quoteFromQuote'NonNullableIsRevision obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quote" Data.Aeson.Types.ToJSON..=)) (quoteFromQuote'NonNullableQuote obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON QuoteFromQuote'NonNullable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "QuoteFromQuote'NonNullable" (\obj -> (GHC.Base.pure QuoteFromQuote'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "is_revision")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "quote"))
-- | Create a new 'QuoteFromQuote'NonNullable' with all required fields.
mkQuoteFromQuote'NonNullable :: QuoteFromQuote'NonNullable
mkQuoteFromQuote'NonNullable = QuoteFromQuote'NonNullable{quoteFromQuote'NonNullableIsRevision = GHC.Maybe.Nothing,
                                                          quoteFromQuote'NonNullableQuote = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.quote.properties.from_quote.anyOf.properties.quote.anyOf@ in the specification.
-- 
-- The quote that was cloned.
data QuoteFromQuote'NonNullableQuote'Variants =
   QuoteFromQuote'NonNullableQuote'Text Data.Text.Internal.Text
  | QuoteFromQuote'NonNullableQuote'Quote Quote
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteFromQuote'NonNullableQuote'Variants
    where toJSON (QuoteFromQuote'NonNullableQuote'Text a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteFromQuote'NonNullableQuote'Quote a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteFromQuote'NonNullableQuote'Variants
    where parseJSON val = case (QuoteFromQuote'NonNullableQuote'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteFromQuote'NonNullableQuote'Quote Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @components.schemas.quote.properties.invoice.anyOf@ in the specification.
-- 
-- The invoice that was created from this quote.
data QuoteInvoice'NonNullableVariants =
   QuoteInvoice'NonNullableText Data.Text.Internal.Text
  | QuoteInvoice'NonNullableInvoice Invoice
  | QuoteInvoice'NonNullableDeletedInvoice DeletedInvoice
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteInvoice'NonNullableVariants
    where toJSON (QuoteInvoice'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteInvoice'NonNullableInvoice a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteInvoice'NonNullableDeletedInvoice a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteInvoice'NonNullableVariants
    where parseJSON val = case (QuoteInvoice'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteInvoice'NonNullableInvoice Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteInvoice'NonNullableDeletedInvoice Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @components.schemas.quote.properties.invoice_settings.anyOf@ in the specification.
-- 
-- All invoices will be billed using the specified settings.
data QuoteInvoiceSettings'NonNullable = QuoteInvoiceSettings'NonNullable {
  -- | days_until_due: Number of days within which a customer must pay invoices generated by this quote. This value will be \`null\` for quotes where \`collection_method=charge_automatically\`.
  quoteInvoiceSettings'NonNullableDaysUntilDue :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteInvoiceSettings'NonNullable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("days_until_due" Data.Aeson.Types.ToJSON..=)) (quoteInvoiceSettings'NonNullableDaysUntilDue obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("days_until_due" Data.Aeson.Types.ToJSON..=)) (quoteInvoiceSettings'NonNullableDaysUntilDue obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON QuoteInvoiceSettings'NonNullable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "QuoteInvoiceSettings'NonNullable" (\obj -> GHC.Base.pure QuoteInvoiceSettings'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "days_until_due"))
-- | Create a new 'QuoteInvoiceSettings'NonNullable' with all required fields.
mkQuoteInvoiceSettings'NonNullable :: QuoteInvoiceSettings'NonNullable
mkQuoteInvoiceSettings'NonNullable = QuoteInvoiceSettings'NonNullable{quoteInvoiceSettings'NonNullableDaysUntilDue = GHC.Maybe.Nothing}
-- | Defines the object schema located at @components.schemas.quote.properties.line_items@ in the specification.
-- 
-- A list of items the customer is being quoted for.
data QuoteLineItems' = QuoteLineItems' {
  -- | data: Details about each object.
  quoteLineItems'Data :: ([Item])
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , quoteLineItems'HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , quoteLineItems'Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteLineItems'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= quoteLineItems'Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= quoteLineItems'HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= quoteLineItems'Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= quoteLineItems'Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= quoteLineItems'HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= quoteLineItems'Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON QuoteLineItems'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "QuoteLineItems'" (\obj -> ((GHC.Base.pure QuoteLineItems' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
-- | Create a new 'QuoteLineItems'' with all required fields.
mkQuoteLineItems' :: [Item] -- ^ 'quoteLineItems'Data'
  -> GHC.Types.Bool -- ^ 'quoteLineItems'HasMore'
  -> Data.Text.Internal.Text -- ^ 'quoteLineItems'Url'
  -> QuoteLineItems'
mkQuoteLineItems' quoteLineItems'Data quoteLineItems'HasMore quoteLineItems'Url = QuoteLineItems'{quoteLineItems'Data = quoteLineItems'Data,
                                                                                                  quoteLineItems'HasMore = quoteLineItems'HasMore,
                                                                                                  quoteLineItems'Url = quoteLineItems'Url}
-- | Defines the oneOf schema located at @components.schemas.quote.properties.on_behalf_of.anyOf@ in the specification.
-- 
-- The account on behalf of which to charge. See the [Connect documentation](https:\/\/support.stripe.com\/questions\/sending-invoices-on-behalf-of-connected-accounts) for details.
data QuoteOnBehalfOf'NonNullableVariants =
   QuoteOnBehalfOf'NonNullableText Data.Text.Internal.Text
  | QuoteOnBehalfOf'NonNullableAccount Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteOnBehalfOf'NonNullableVariants
    where toJSON (QuoteOnBehalfOf'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteOnBehalfOf'NonNullableAccount a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteOnBehalfOf'NonNullableVariants
    where parseJSON val = case (QuoteOnBehalfOf'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteOnBehalfOf'NonNullableAccount Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the enum schema located at @components.schemas.quote.properties.status@ in the specification.
-- 
-- The status of the quote.
data QuoteStatus' =
   QuoteStatus'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | QuoteStatus'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | QuoteStatus'EnumAccepted -- ^ Represents the JSON value @"accepted"@
  | QuoteStatus'EnumCanceled -- ^ Represents the JSON value @"canceled"@
  | QuoteStatus'EnumDraft -- ^ Represents the JSON value @"draft"@
  | QuoteStatus'EnumOpen -- ^ Represents the JSON value @"open"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteStatus'
    where toJSON (QuoteStatus'Other val) = val
          toJSON (QuoteStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (QuoteStatus'EnumAccepted) = "accepted"
          toJSON (QuoteStatus'EnumCanceled) = "canceled"
          toJSON (QuoteStatus'EnumDraft) = "draft"
          toJSON (QuoteStatus'EnumOpen) = "open"
instance Data.Aeson.Types.FromJSON.FromJSON QuoteStatus'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "accepted" -> QuoteStatus'EnumAccepted
                                            | val GHC.Classes.== "canceled" -> QuoteStatus'EnumCanceled
                                            | val GHC.Classes.== "draft" -> QuoteStatus'EnumDraft
                                            | val GHC.Classes.== "open" -> QuoteStatus'EnumOpen
                                            | GHC.Base.otherwise -> QuoteStatus'Other val)
-- | Defines the oneOf schema located at @components.schemas.quote.properties.subscription.anyOf@ in the specification.
-- 
-- The subscription that was created or updated from this quote.
data QuoteSubscription'NonNullableVariants =
   QuoteSubscription'NonNullableText Data.Text.Internal.Text
  | QuoteSubscription'NonNullableSubscription Subscription
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteSubscription'NonNullableVariants
    where toJSON (QuoteSubscription'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteSubscription'NonNullableSubscription a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteSubscription'NonNullableVariants
    where parseJSON val = case (QuoteSubscription'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteSubscription'NonNullableSubscription Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @components.schemas.quote.properties.subscription_schedule.anyOf@ in the specification.
-- 
-- The subscription schedule that was created or updated from this quote.
data QuoteSubscriptionSchedule'NonNullableVariants =
   QuoteSubscriptionSchedule'NonNullableText Data.Text.Internal.Text
  | QuoteSubscriptionSchedule'NonNullableSubscriptionSchedule SubscriptionSchedule
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteSubscriptionSchedule'NonNullableVariants
    where toJSON (QuoteSubscriptionSchedule'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteSubscriptionSchedule'NonNullableSubscriptionSchedule a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteSubscriptionSchedule'NonNullableVariants
    where parseJSON val = case (QuoteSubscriptionSchedule'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteSubscriptionSchedule'NonNullableSubscriptionSchedule Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the oneOf schema located at @components.schemas.quote.properties.test_clock.anyOf@ in the specification.
-- 
-- ID of the test clock this quote belongs to.
data QuoteTestClock'NonNullableVariants =
   QuoteTestClock'NonNullableText Data.Text.Internal.Text
  | QuoteTestClock'NonNullableTestHelpers'testClock TestHelpers'testClock
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteTestClock'NonNullableVariants
    where toJSON (QuoteTestClock'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteTestClock'NonNullableTestHelpers'testClock a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteTestClock'NonNullableVariants
    where parseJSON val = case (QuoteTestClock'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteTestClock'NonNullableTestHelpers'testClock Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
-- | Defines the object schema located at @components.schemas.quote.properties.transfer_data.anyOf@ in the specification.
-- 
-- The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
data QuoteTransferData'NonNullable = QuoteTransferData'NonNullable {
  -- | amount: The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
  quoteTransferData'NonNullableAmount :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  -- | amount_percent: A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
  , quoteTransferData'NonNullableAmountPercent :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Double))
  -- | destination: The account where funds from the payment will be transferred to upon payment success.
  , quoteTransferData'NonNullableDestination :: (GHC.Maybe.Maybe QuoteTransferData'NonNullableDestination'Variants)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteTransferData'NonNullable
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (quoteTransferData'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_percent" Data.Aeson.Types.ToJSON..=)) (quoteTransferData'NonNullableAmountPercent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination" Data.Aeson.Types.ToJSON..=)) (quoteTransferData'NonNullableDestination obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (quoteTransferData'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_percent" Data.Aeson.Types.ToJSON..=)) (quoteTransferData'NonNullableAmountPercent obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("destination" Data.Aeson.Types.ToJSON..=)) (quoteTransferData'NonNullableDestination obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON QuoteTransferData'NonNullable
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "QuoteTransferData'NonNullable" (\obj -> ((GHC.Base.pure QuoteTransferData'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_percent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "destination"))
-- | Create a new 'QuoteTransferData'NonNullable' with all required fields.
mkQuoteTransferData'NonNullable :: QuoteTransferData'NonNullable
mkQuoteTransferData'NonNullable = QuoteTransferData'NonNullable{quoteTransferData'NonNullableAmount = GHC.Maybe.Nothing,
                                                                quoteTransferData'NonNullableAmountPercent = GHC.Maybe.Nothing,
                                                                quoteTransferData'NonNullableDestination = GHC.Maybe.Nothing}
-- | Defines the oneOf schema located at @components.schemas.quote.properties.transfer_data.anyOf.properties.destination.anyOf@ in the specification.
-- 
-- The account where funds from the payment will be transferred to upon payment success.
data QuoteTransferData'NonNullableDestination'Variants =
   QuoteTransferData'NonNullableDestination'Text Data.Text.Internal.Text
  | QuoteTransferData'NonNullableDestination'Account Account
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON QuoteTransferData'NonNullableDestination'Variants
    where toJSON (QuoteTransferData'NonNullableDestination'Text a) = Data.Aeson.Types.ToJSON.toJSON a
          toJSON (QuoteTransferData'NonNullableDestination'Account a) = Data.Aeson.Types.ToJSON.toJSON a
instance Data.Aeson.Types.FromJSON.FromJSON QuoteTransferData'NonNullableDestination'Variants
    where parseJSON val = case (QuoteTransferData'NonNullableDestination'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((QuoteTransferData'NonNullableDestination'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
                              Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
                              Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
