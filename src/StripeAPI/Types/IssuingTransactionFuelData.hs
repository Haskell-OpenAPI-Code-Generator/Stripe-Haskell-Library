{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingTransactionFuelData
module StripeAPI.Types.IssuingTransactionFuelData where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_transaction_fuel_data@ in the specification.
data IssuingTransactionFuelData = IssuingTransactionFuelData
  { -- | type: The type of fuel that was purchased. One of \`diesel\`, \`unleaded_plus\`, \`unleaded_regular\`, \`unleaded_super\`, or \`other\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingTransactionFuelDataType :: Data.Text.Internal.Text,
    -- | unit: The units for \`volume_decimal\`. One of \`us_gallon\` or \`liter\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingTransactionFuelDataUnit :: Data.Text.Internal.Text,
    -- | unit_cost_decimal: The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
    issuingTransactionFuelDataUnitCostDecimal :: Data.Text.Internal.Text,
    -- | volume_decimal: The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
    issuingTransactionFuelDataVolumeDecimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingTransactionFuelData where
  toJSON obj = Data.Aeson.Types.Internal.object ("type" Data.Aeson.Types.ToJSON..= issuingTransactionFuelDataType obj : "unit" Data.Aeson.Types.ToJSON..= issuingTransactionFuelDataUnit obj : "unit_cost_decimal" Data.Aeson.Types.ToJSON..= issuingTransactionFuelDataUnitCostDecimal obj : "volume_decimal" Data.Aeson.Types.ToJSON..= issuingTransactionFuelDataVolumeDecimal obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("type" Data.Aeson.Types.ToJSON..= issuingTransactionFuelDataType obj) GHC.Base.<> (("unit" Data.Aeson.Types.ToJSON..= issuingTransactionFuelDataUnit obj) GHC.Base.<> (("unit_cost_decimal" Data.Aeson.Types.ToJSON..= issuingTransactionFuelDataUnitCostDecimal obj) GHC.Base.<> ("volume_decimal" Data.Aeson.Types.ToJSON..= issuingTransactionFuelDataVolumeDecimal obj))))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingTransactionFuelData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingTransactionFuelData" (\obj -> (((GHC.Base.pure IssuingTransactionFuelData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "unit_cost_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "volume_decimal"))

-- | Create a new 'IssuingTransactionFuelData' with all required fields.
mkIssuingTransactionFuelData ::
  -- | 'issuingTransactionFuelDataType'
  Data.Text.Internal.Text ->
  -- | 'issuingTransactionFuelDataUnit'
  Data.Text.Internal.Text ->
  -- | 'issuingTransactionFuelDataUnitCostDecimal'
  Data.Text.Internal.Text ->
  IssuingTransactionFuelData
mkIssuingTransactionFuelData issuingTransactionFuelDataType issuingTransactionFuelDataUnit issuingTransactionFuelDataUnitCostDecimal =
  IssuingTransactionFuelData
    { issuingTransactionFuelDataType = issuingTransactionFuelDataType,
      issuingTransactionFuelDataUnit = issuingTransactionFuelDataUnit,
      issuingTransactionFuelDataUnitCostDecimal = issuingTransactionFuelDataUnitCostDecimal,
      issuingTransactionFuelDataVolumeDecimal = GHC.Maybe.Nothing
    }
