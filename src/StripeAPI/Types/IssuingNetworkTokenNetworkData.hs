{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingNetworkTokenNetworkData
module StripeAPI.Types.IssuingNetworkTokenNetworkData where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.IssuingNetworkTokenDevice
import {-# SOURCE #-} StripeAPI.Types.IssuingNetworkTokenMastercard
import {-# SOURCE #-} StripeAPI.Types.IssuingNetworkTokenVisa
import {-# SOURCE #-} StripeAPI.Types.IssuingNetworkTokenWalletProvider
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_network_token_network_data@ in the specification.
data IssuingNetworkTokenNetworkData = IssuingNetworkTokenNetworkData
  { -- | device:
    issuingNetworkTokenNetworkDataDevice :: (GHC.Maybe.Maybe IssuingNetworkTokenDevice),
    -- | mastercard:
    issuingNetworkTokenNetworkDataMastercard :: (GHC.Maybe.Maybe IssuingNetworkTokenMastercard),
    -- | type: The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network.
    issuingNetworkTokenNetworkDataType :: IssuingNetworkTokenNetworkDataType',
    -- | visa:
    issuingNetworkTokenNetworkDataVisa :: (GHC.Maybe.Maybe IssuingNetworkTokenVisa),
    -- | wallet_provider:
    issuingNetworkTokenNetworkDataWalletProvider :: (GHC.Maybe.Maybe IssuingNetworkTokenWalletProvider)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingNetworkTokenNetworkData where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("device" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenNetworkDataDevice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mastercard" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenNetworkDataMastercard obj) : ["type" Data.Aeson.Types.ToJSON..= issuingNetworkTokenNetworkDataType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("visa" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenNetworkDataVisa obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_provider" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenNetworkDataWalletProvider obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("device" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenNetworkDataDevice obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("mastercard" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenNetworkDataMastercard obj) : ["type" Data.Aeson.Types.ToJSON..= issuingNetworkTokenNetworkDataType obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("visa" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenNetworkDataVisa obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("wallet_provider" Data.Aeson.Types.ToJSON..=)) (issuingNetworkTokenNetworkDataWalletProvider obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingNetworkTokenNetworkData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingNetworkTokenNetworkData" (\obj -> ((((GHC.Base.pure IssuingNetworkTokenNetworkData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "device")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "mastercard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "visa")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "wallet_provider"))

-- | Create a new 'IssuingNetworkTokenNetworkData' with all required fields.
mkIssuingNetworkTokenNetworkData ::
  -- | 'issuingNetworkTokenNetworkDataType'
  IssuingNetworkTokenNetworkDataType' ->
  IssuingNetworkTokenNetworkData
mkIssuingNetworkTokenNetworkData issuingNetworkTokenNetworkDataType =
  IssuingNetworkTokenNetworkData
    { issuingNetworkTokenNetworkDataDevice = GHC.Maybe.Nothing,
      issuingNetworkTokenNetworkDataMastercard = GHC.Maybe.Nothing,
      issuingNetworkTokenNetworkDataType = issuingNetworkTokenNetworkDataType,
      issuingNetworkTokenNetworkDataVisa = GHC.Maybe.Nothing,
      issuingNetworkTokenNetworkDataWalletProvider = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.issuing_network_token_network_data.properties.type@ in the specification.
--
-- The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network.
data IssuingNetworkTokenNetworkDataType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingNetworkTokenNetworkDataType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingNetworkTokenNetworkDataType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"mastercard"@
    IssuingNetworkTokenNetworkDataType'EnumMastercard
  | -- | Represents the JSON value @"visa"@
    IssuingNetworkTokenNetworkDataType'EnumVisa
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingNetworkTokenNetworkDataType' where
  toJSON (IssuingNetworkTokenNetworkDataType'Other val) = val
  toJSON (IssuingNetworkTokenNetworkDataType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingNetworkTokenNetworkDataType'EnumMastercard) = "mastercard"
  toJSON (IssuingNetworkTokenNetworkDataType'EnumVisa) = "visa"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingNetworkTokenNetworkDataType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "mastercard" -> IssuingNetworkTokenNetworkDataType'EnumMastercard
            | val GHC.Classes.== "visa" -> IssuingNetworkTokenNetworkDataType'EnumVisa
            | GHC.Base.otherwise -> IssuingNetworkTokenNetworkDataType'Other val
      )
