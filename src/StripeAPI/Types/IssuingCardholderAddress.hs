{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema IssuingCardholderAddress
module StripeAPI.Types.IssuingCardholderAddress where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Address
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema issuing_cardholder_address
data IssuingCardholderAddress
  = IssuingCardholderAddress
      { -- | address:
        issuingCardholderAddressAddress :: Address,
        -- | name: The cardholderâ€™s billing name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingCardholderAddressName :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardholderAddress where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (issuingCardholderAddressAddress obj) : (Data.Aeson..=) "name" (issuingCardholderAddressName obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (issuingCardholderAddressAddress obj) GHC.Base.<> (Data.Aeson..=) "name" (issuingCardholderAddressName obj))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardholderAddress where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardholderAddress" (\obj -> (GHC.Base.pure IssuingCardholderAddress GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name"))
