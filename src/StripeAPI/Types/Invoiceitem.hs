{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Invoiceitem
module StripeAPI.Types.Invoiceitem where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.DeletedProduct
import {-# SOURCE #-} StripeAPI.Types.Invoice
import {-# SOURCE #-} StripeAPI.Types.InvoiceLineItemPeriod
import {-# SOURCE #-} StripeAPI.Types.Plan
import {-# SOURCE #-} StripeAPI.Types.PlanTier
import {-# SOURCE #-} StripeAPI.Types.Product
import {-# SOURCE #-} StripeAPI.Types.Subscription
import {-# SOURCE #-} StripeAPI.Types.TaxRate
import {-# SOURCE #-} StripeAPI.Types.TransformUsage
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema invoiceitem
--
-- Sometimes you want to add a charge or credit to a customer, but actually
-- charge or credit the customer\'s card only at the end of a regular billing
-- cycle. This is useful for combining several charges (to minimize
-- per-transaction fees), or for having Stripe tabulate your usage-based billing
-- totals.
--
-- Related guide: [Subscription Invoices](https:\/\/stripe.com\/docs\/billing\/invoices\/subscription\#adding-upcoming-invoice-items).
data Invoiceitem
  = Invoiceitem
      { -- | amount: Amount (in the \`currency\` specified) of the invoice item. This should always be equal to \`unit_amount * quantity\`.
        invoiceitemAmount :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        invoiceitemCurrency :: Data.Text.Internal.Text,
        -- | customer: The ID of the customer who will be billed when this invoice item is billed.
        invoiceitemCustomer :: InvoiceitemCustomer'Variants,
        -- | date: Time at which the object was created. Measured in seconds since the Unix epoch.
        invoiceitemDate :: GHC.Types.Int,
        -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceitemDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | discountable: If true, discounts will apply to this invoice item. Always false for prorations.
        invoiceitemDiscountable :: GHC.Types.Bool,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceitemId :: Data.Text.Internal.Text,
        -- | invoice: The ID of the invoice this invoice item belongs to.
        invoiceitemInvoice :: (GHC.Maybe.Maybe InvoiceitemInvoice'Variants),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        invoiceitemLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        invoiceitemMetadata :: Data.Aeson.Types.Internal.Object,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        invoiceitemObject :: InvoiceitemObject',
        -- | period:
        invoiceitemPeriod :: InvoiceLineItemPeriod,
        -- | plan: If the invoice item is a proration, the plan of the subscription that the proration was computed for.
        invoiceitemPlan :: (GHC.Maybe.Maybe InvoiceitemPlan'),
        -- | proration: Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
        invoiceitemProration :: GHC.Types.Bool,
        -- | quantity: Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
        invoiceitemQuantity :: GHC.Types.Int,
        -- | subscription: The subscription that this invoice item has been created for, if any.
        invoiceitemSubscription :: (GHC.Maybe.Maybe InvoiceitemSubscription'Variants),
        -- | subscription_item: The subscription item that this invoice item has been created for, if any.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceitemSubscriptionItem :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | tax_rates: The tax rates which apply to the invoice item. When set, the \`default_tax_rates\` on the invoice do not apply to this invoice item.
        invoiceitemTaxRates :: (GHC.Maybe.Maybe ([TaxRate])),
        -- | unit_amount: Unit Amount (in the \`currency\` specified) of the invoice item.
        invoiceitemUnitAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | unit_amount_decimal: Same as \`unit_amount\`, but contains a decimal value with at most 12 decimal places.
        invoiceitemUnitAmountDecimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Invoiceitem where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "amount" (invoiceitemAmount obj) : (Data.Aeson..=) "currency" (invoiceitemCurrency obj) : (Data.Aeson..=) "customer" (invoiceitemCustomer obj) : (Data.Aeson..=) "date" (invoiceitemDate obj) : (Data.Aeson..=) "description" (invoiceitemDescription obj) : (Data.Aeson..=) "discountable" (invoiceitemDiscountable obj) : (Data.Aeson..=) "id" (invoiceitemId obj) : (Data.Aeson..=) "invoice" (invoiceitemInvoice obj) : (Data.Aeson..=) "livemode" (invoiceitemLivemode obj) : (Data.Aeson..=) "metadata" (invoiceitemMetadata obj) : (Data.Aeson..=) "object" (invoiceitemObject obj) : (Data.Aeson..=) "period" (invoiceitemPeriod obj) : (Data.Aeson..=) "plan" (invoiceitemPlan obj) : (Data.Aeson..=) "proration" (invoiceitemProration obj) : (Data.Aeson..=) "quantity" (invoiceitemQuantity obj) : (Data.Aeson..=) "subscription" (invoiceitemSubscription obj) : (Data.Aeson..=) "subscription_item" (invoiceitemSubscriptionItem obj) : (Data.Aeson..=) "tax_rates" (invoiceitemTaxRates obj) : (Data.Aeson..=) "unit_amount" (invoiceitemUnitAmount obj) : (Data.Aeson..=) "unit_amount_decimal" (invoiceitemUnitAmountDecimal obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "amount" (invoiceitemAmount obj) GHC.Base.<> ((Data.Aeson..=) "currency" (invoiceitemCurrency obj) GHC.Base.<> ((Data.Aeson..=) "customer" (invoiceitemCustomer obj) GHC.Base.<> ((Data.Aeson..=) "date" (invoiceitemDate obj) GHC.Base.<> ((Data.Aeson..=) "description" (invoiceitemDescription obj) GHC.Base.<> ((Data.Aeson..=) "discountable" (invoiceitemDiscountable obj) GHC.Base.<> ((Data.Aeson..=) "id" (invoiceitemId obj) GHC.Base.<> ((Data.Aeson..=) "invoice" (invoiceitemInvoice obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (invoiceitemLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (invoiceitemMetadata obj) GHC.Base.<> ((Data.Aeson..=) "object" (invoiceitemObject obj) GHC.Base.<> ((Data.Aeson..=) "period" (invoiceitemPeriod obj) GHC.Base.<> ((Data.Aeson..=) "plan" (invoiceitemPlan obj) GHC.Base.<> ((Data.Aeson..=) "proration" (invoiceitemProration obj) GHC.Base.<> ((Data.Aeson..=) "quantity" (invoiceitemQuantity obj) GHC.Base.<> ((Data.Aeson..=) "subscription" (invoiceitemSubscription obj) GHC.Base.<> ((Data.Aeson..=) "subscription_item" (invoiceitemSubscriptionItem obj) GHC.Base.<> ((Data.Aeson..=) "tax_rates" (invoiceitemTaxRates obj) GHC.Base.<> ((Data.Aeson..=) "unit_amount" (invoiceitemUnitAmount obj) GHC.Base.<> (Data.Aeson..=) "unit_amount_decimal" (invoiceitemUnitAmountDecimal obj))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Invoiceitem where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Invoiceitem" (\obj -> (((((((((((((((((((GHC.Base.pure Invoiceitem GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "discountable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "invoice")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "plan")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "proration")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "subscription_item")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tax_rates")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "unit_amount_decimal"))

-- | Define the one-of schema invoiceitemCustomer\'
--
-- The ID of the customer who will be billed when this invoice item is billed.
data InvoiceitemCustomer'Variants
  = InvoiceitemCustomer'Customer Customer
  | InvoiceitemCustomer'DeletedCustomer DeletedCustomer
  | InvoiceitemCustomer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemCustomer'Variants where
  toJSON (InvoiceitemCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceitemCustomer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceitemCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemCustomer'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemCustomer'Customer a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemCustomer'DeletedCustomer a
      Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
        Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemCustomer'Text a
        Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Define the one-of schema invoiceitemInvoice\'
--
-- The ID of the invoice this invoice item belongs to.
data InvoiceitemInvoice'Variants
  = InvoiceitemInvoice'Invoice Invoice
  | InvoiceitemInvoice'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemInvoice'Variants where
  toJSON (InvoiceitemInvoice'Invoice a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceitemInvoice'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemInvoice'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemInvoice'Invoice a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemInvoice'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema invoiceitemObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data InvoiceitemObject'
  = InvoiceitemObject'EnumOther Data.Aeson.Types.Internal.Value
  | InvoiceitemObject'EnumTyped Data.Text.Internal.Text
  | InvoiceitemObject'EnumStringInvoiceitem
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemObject' where
  toJSON (InvoiceitemObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemObject'EnumStringInvoiceitem) = "invoiceitem"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "invoiceitem" -> InvoiceitemObject'EnumStringInvoiceitem
            | GHC.Base.otherwise -> InvoiceitemObject'EnumOther val
      )

-- | Defines the data type for the schema invoiceitemPlan\'
--
-- If the invoice item is a proration, the plan of the subscription that the proration was computed for.
data InvoiceitemPlan'
  = InvoiceitemPlan'
      { -- | active: Whether the plan is currently available for new subscriptions.
        invoiceitemPlan'Active :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | aggregate_usage: Specifies a usage aggregation strategy for plans of \`usage_type=metered\`. Allowed values are \`sum\` for summing up all usage during a period, \`last_during_period\` for using the last usage record reported within a period, \`last_ever\` for using the last usage record ever (across period bounds) or \`max\` which uses the usage record with the maximum reported usage during a period. Defaults to \`sum\`.
        invoiceitemPlan'AggregateUsage :: (GHC.Maybe.Maybe InvoiceitemPlan'AggregateUsage'),
        -- | amount: The amount in %s to be charged on the interval specified.
        invoiceitemPlan'Amount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | amount_decimal: Same as \`amount\`, but contains a decimal value with at most 12 decimal places.
        invoiceitemPlan'AmountDecimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | billing_scheme: Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`amount\`) will be charged per unit in \`quantity\` (for plans with \`usage_type=licensed\`), or per unit of total usage (for plans with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
        invoiceitemPlan'BillingScheme :: (GHC.Maybe.Maybe InvoiceitemPlan'BillingScheme'),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        invoiceitemPlan'Created :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        invoiceitemPlan'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceitemPlan'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | interval: The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
        invoiceitemPlan'Interval :: (GHC.Maybe.Maybe InvoiceitemPlan'Interval'),
        -- | interval_count: The number of intervals (specified in the \`interval\` attribute) between subscription billings. For example, \`interval=month\` and \`interval_count=3\` bills every 3 months.
        invoiceitemPlan'IntervalCount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        invoiceitemPlan'Livemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        invoiceitemPlan'Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | nickname: A brief description of the plan, hidden from customers.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        invoiceitemPlan'Nickname :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        invoiceitemPlan'Object :: (GHC.Maybe.Maybe InvoiceitemPlan'Object'),
        -- | product: The product whose pricing this plan determines.
        invoiceitemPlan'Product :: (GHC.Maybe.Maybe InvoiceitemPlan'Product'Variants),
        -- | tiers: Each element represents a pricing tier. This parameter requires \`billing_scheme\` to be set to \`tiered\`. See also the documentation for \`billing_scheme\`.
        invoiceitemPlan'Tiers :: (GHC.Maybe.Maybe ([PlanTier])),
        -- | tiers_mode: Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
        invoiceitemPlan'TiersMode :: (GHC.Maybe.Maybe InvoiceitemPlan'TiersMode'),
        -- | transform_usage: Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \`tiers\`.
        invoiceitemPlan'TransformUsage :: (GHC.Maybe.Maybe InvoiceitemPlan'TransformUsage'),
        -- | trial_period_days: Default number of trial days when subscribing a customer to this plan using [\`trial_from_plan=true\`](https:\/\/stripe.com\/docs\/api\#create_subscription-trial_from_plan).
        invoiceitemPlan'TrialPeriodDays :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | usage_type: Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
        invoiceitemPlan'UsageType :: (GHC.Maybe.Maybe InvoiceitemPlan'UsageType')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (invoiceitemPlan'Active obj) : (Data.Aeson..=) "aggregate_usage" (invoiceitemPlan'AggregateUsage obj) : (Data.Aeson..=) "amount" (invoiceitemPlan'Amount obj) : (Data.Aeson..=) "amount_decimal" (invoiceitemPlan'AmountDecimal obj) : (Data.Aeson..=) "billing_scheme" (invoiceitemPlan'BillingScheme obj) : (Data.Aeson..=) "created" (invoiceitemPlan'Created obj) : (Data.Aeson..=) "currency" (invoiceitemPlan'Currency obj) : (Data.Aeson..=) "id" (invoiceitemPlan'Id obj) : (Data.Aeson..=) "interval" (invoiceitemPlan'Interval obj) : (Data.Aeson..=) "interval_count" (invoiceitemPlan'IntervalCount obj) : (Data.Aeson..=) "livemode" (invoiceitemPlan'Livemode obj) : (Data.Aeson..=) "metadata" (invoiceitemPlan'Metadata obj) : (Data.Aeson..=) "nickname" (invoiceitemPlan'Nickname obj) : (Data.Aeson..=) "object" (invoiceitemPlan'Object obj) : (Data.Aeson..=) "product" (invoiceitemPlan'Product obj) : (Data.Aeson..=) "tiers" (invoiceitemPlan'Tiers obj) : (Data.Aeson..=) "tiers_mode" (invoiceitemPlan'TiersMode obj) : (Data.Aeson..=) "transform_usage" (invoiceitemPlan'TransformUsage obj) : (Data.Aeson..=) "trial_period_days" (invoiceitemPlan'TrialPeriodDays obj) : (Data.Aeson..=) "usage_type" (invoiceitemPlan'UsageType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (invoiceitemPlan'Active obj) GHC.Base.<> ((Data.Aeson..=) "aggregate_usage" (invoiceitemPlan'AggregateUsage obj) GHC.Base.<> ((Data.Aeson..=) "amount" (invoiceitemPlan'Amount obj) GHC.Base.<> ((Data.Aeson..=) "amount_decimal" (invoiceitemPlan'AmountDecimal obj) GHC.Base.<> ((Data.Aeson..=) "billing_scheme" (invoiceitemPlan'BillingScheme obj) GHC.Base.<> ((Data.Aeson..=) "created" (invoiceitemPlan'Created obj) GHC.Base.<> ((Data.Aeson..=) "currency" (invoiceitemPlan'Currency obj) GHC.Base.<> ((Data.Aeson..=) "id" (invoiceitemPlan'Id obj) GHC.Base.<> ((Data.Aeson..=) "interval" (invoiceitemPlan'Interval obj) GHC.Base.<> ((Data.Aeson..=) "interval_count" (invoiceitemPlan'IntervalCount obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (invoiceitemPlan'Livemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (invoiceitemPlan'Metadata obj) GHC.Base.<> ((Data.Aeson..=) "nickname" (invoiceitemPlan'Nickname obj) GHC.Base.<> ((Data.Aeson..=) "object" (invoiceitemPlan'Object obj) GHC.Base.<> ((Data.Aeson..=) "product" (invoiceitemPlan'Product obj) GHC.Base.<> ((Data.Aeson..=) "tiers" (invoiceitemPlan'Tiers obj) GHC.Base.<> ((Data.Aeson..=) "tiers_mode" (invoiceitemPlan'TiersMode obj) GHC.Base.<> ((Data.Aeson..=) "transform_usage" (invoiceitemPlan'TransformUsage obj) GHC.Base.<> ((Data.Aeson..=) "trial_period_days" (invoiceitemPlan'TrialPeriodDays obj) GHC.Base.<> (Data.Aeson..=) "usage_type" (invoiceitemPlan'UsageType obj))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceitemPlan'" (\obj -> (((((((((((((((((((GHC.Base.pure InvoiceitemPlan' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "aggregate_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_scheme")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transform_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_period_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage_type"))

-- | Defines the enum schema invoiceitemPlan\'Aggregate_usage\'
--
-- Specifies a usage aggregation strategy for plans of \`usage_type=metered\`. Allowed values are \`sum\` for summing up all usage during a period, \`last_during_period\` for using the last usage record reported within a period, \`last_ever\` for using the last usage record ever (across period bounds) or \`max\` which uses the usage record with the maximum reported usage during a period. Defaults to \`sum\`.
data InvoiceitemPlan'AggregateUsage'
  = InvoiceitemPlan'AggregateUsage'EnumOther Data.Aeson.Types.Internal.Value
  | InvoiceitemPlan'AggregateUsage'EnumTyped Data.Text.Internal.Text
  | InvoiceitemPlan'AggregateUsage'EnumStringLastDuringPeriod
  | InvoiceitemPlan'AggregateUsage'EnumStringLastEver
  | InvoiceitemPlan'AggregateUsage'EnumStringMax
  | InvoiceitemPlan'AggregateUsage'EnumStringSum
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan'AggregateUsage' where
  toJSON (InvoiceitemPlan'AggregateUsage'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'AggregateUsage'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'AggregateUsage'EnumStringLastDuringPeriod) = "last_during_period"
  toJSON (InvoiceitemPlan'AggregateUsage'EnumStringLastEver) = "last_ever"
  toJSON (InvoiceitemPlan'AggregateUsage'EnumStringMax) = "max"
  toJSON (InvoiceitemPlan'AggregateUsage'EnumStringSum) = "sum"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'AggregateUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "last_during_period" -> InvoiceitemPlan'AggregateUsage'EnumStringLastDuringPeriod
            | val GHC.Classes.== "last_ever" -> InvoiceitemPlan'AggregateUsage'EnumStringLastEver
            | val GHC.Classes.== "max" -> InvoiceitemPlan'AggregateUsage'EnumStringMax
            | val GHC.Classes.== "sum" -> InvoiceitemPlan'AggregateUsage'EnumStringSum
            | GHC.Base.otherwise -> InvoiceitemPlan'AggregateUsage'EnumOther val
      )

-- | Defines the enum schema invoiceitemPlan\'Billing_scheme\'
--
-- Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`amount\`) will be charged per unit in \`quantity\` (for plans with \`usage_type=licensed\`), or per unit of total usage (for plans with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
data InvoiceitemPlan'BillingScheme'
  = InvoiceitemPlan'BillingScheme'EnumOther Data.Aeson.Types.Internal.Value
  | InvoiceitemPlan'BillingScheme'EnumTyped Data.Text.Internal.Text
  | InvoiceitemPlan'BillingScheme'EnumStringPerUnit
  | InvoiceitemPlan'BillingScheme'EnumStringTiered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan'BillingScheme' where
  toJSON (InvoiceitemPlan'BillingScheme'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'BillingScheme'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'BillingScheme'EnumStringPerUnit) = "per_unit"
  toJSON (InvoiceitemPlan'BillingScheme'EnumStringTiered) = "tiered"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'BillingScheme' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "per_unit" -> InvoiceitemPlan'BillingScheme'EnumStringPerUnit
            | val GHC.Classes.== "tiered" -> InvoiceitemPlan'BillingScheme'EnumStringTiered
            | GHC.Base.otherwise -> InvoiceitemPlan'BillingScheme'EnumOther val
      )

-- | Defines the enum schema invoiceitemPlan\'Interval\'
--
-- The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
data InvoiceitemPlan'Interval'
  = InvoiceitemPlan'Interval'EnumOther Data.Aeson.Types.Internal.Value
  | InvoiceitemPlan'Interval'EnumTyped Data.Text.Internal.Text
  | InvoiceitemPlan'Interval'EnumStringDay
  | InvoiceitemPlan'Interval'EnumStringMonth
  | InvoiceitemPlan'Interval'EnumStringWeek
  | InvoiceitemPlan'Interval'EnumStringYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan'Interval' where
  toJSON (InvoiceitemPlan'Interval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'Interval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'Interval'EnumStringDay) = "day"
  toJSON (InvoiceitemPlan'Interval'EnumStringMonth) = "month"
  toJSON (InvoiceitemPlan'Interval'EnumStringWeek) = "week"
  toJSON (InvoiceitemPlan'Interval'EnumStringYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'Interval' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "day" -> InvoiceitemPlan'Interval'EnumStringDay
            | val GHC.Classes.== "month" -> InvoiceitemPlan'Interval'EnumStringMonth
            | val GHC.Classes.== "week" -> InvoiceitemPlan'Interval'EnumStringWeek
            | val GHC.Classes.== "year" -> InvoiceitemPlan'Interval'EnumStringYear
            | GHC.Base.otherwise -> InvoiceitemPlan'Interval'EnumOther val
      )

-- | Defines the enum schema invoiceitemPlan\'Object\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data InvoiceitemPlan'Object'
  = InvoiceitemPlan'Object'EnumOther Data.Aeson.Types.Internal.Value
  | InvoiceitemPlan'Object'EnumTyped Data.Text.Internal.Text
  | InvoiceitemPlan'Object'EnumStringPlan
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan'Object' where
  toJSON (InvoiceitemPlan'Object'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'Object'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'Object'EnumStringPlan) = "plan"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'Object' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "plan" -> InvoiceitemPlan'Object'EnumStringPlan
            | GHC.Base.otherwise -> InvoiceitemPlan'Object'EnumOther val
      )

-- | Define the one-of schema invoiceitemPlan\'Product\'
--
-- The product whose pricing this plan determines.
data InvoiceitemPlan'Product'Variants
  = InvoiceitemPlan'Product'DeletedProduct DeletedProduct
  | InvoiceitemPlan'Product'Product Product
  | InvoiceitemPlan'Product'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan'Product'Variants where
  toJSON (InvoiceitemPlan'Product'DeletedProduct a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceitemPlan'Product'Product a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceitemPlan'Product'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'Product'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemPlan'Product'DeletedProduct a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemPlan'Product'Product a
      Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
        Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemPlan'Product'Text a
        Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema invoiceitemPlan\'Tiers_mode\'
--
-- Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
data InvoiceitemPlan'TiersMode'
  = InvoiceitemPlan'TiersMode'EnumOther Data.Aeson.Types.Internal.Value
  | InvoiceitemPlan'TiersMode'EnumTyped Data.Text.Internal.Text
  | InvoiceitemPlan'TiersMode'EnumStringGraduated
  | InvoiceitemPlan'TiersMode'EnumStringVolume
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan'TiersMode' where
  toJSON (InvoiceitemPlan'TiersMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'TiersMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'TiersMode'EnumStringGraduated) = "graduated"
  toJSON (InvoiceitemPlan'TiersMode'EnumStringVolume) = "volume"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'TiersMode' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "graduated" -> InvoiceitemPlan'TiersMode'EnumStringGraduated
            | val GHC.Classes.== "volume" -> InvoiceitemPlan'TiersMode'EnumStringVolume
            | GHC.Base.otherwise -> InvoiceitemPlan'TiersMode'EnumOther val
      )

-- | Defines the data type for the schema invoiceitemPlan\'Transform_usage\'
--
-- Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \\\`tiers\\\`.
data InvoiceitemPlan'TransformUsage'
  = InvoiceitemPlan'TransformUsage'
      { -- | divide_by: Divide usage by this number.
        invoiceitemPlan'TransformUsage'DivideBy :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | round: After division, either round the result \`up\` or \`down\`.
        invoiceitemPlan'TransformUsage'Round :: (GHC.Maybe.Maybe InvoiceitemPlan'TransformUsage'Round')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan'TransformUsage' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "divide_by" (invoiceitemPlan'TransformUsage'DivideBy obj) : (Data.Aeson..=) "round" (invoiceitemPlan'TransformUsage'Round obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "divide_by" (invoiceitemPlan'TransformUsage'DivideBy obj) GHC.Base.<> (Data.Aeson..=) "round" (invoiceitemPlan'TransformUsage'Round obj))

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'TransformUsage' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "InvoiceitemPlan'TransformUsage'" (\obj -> (GHC.Base.pure InvoiceitemPlan'TransformUsage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "divide_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "round"))

-- | Defines the enum schema invoiceitemPlan\'Transform_usage\'Round\'
--
-- After division, either round the result \`up\` or \`down\`.
data InvoiceitemPlan'TransformUsage'Round'
  = InvoiceitemPlan'TransformUsage'Round'EnumOther Data.Aeson.Types.Internal.Value
  | InvoiceitemPlan'TransformUsage'Round'EnumTyped Data.Text.Internal.Text
  | InvoiceitemPlan'TransformUsage'Round'EnumStringDown
  | InvoiceitemPlan'TransformUsage'Round'EnumStringUp
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan'TransformUsage'Round' where
  toJSON (InvoiceitemPlan'TransformUsage'Round'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'TransformUsage'Round'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'TransformUsage'Round'EnumStringDown) = "down"
  toJSON (InvoiceitemPlan'TransformUsage'Round'EnumStringUp) = "up"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'TransformUsage'Round' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "down" -> InvoiceitemPlan'TransformUsage'Round'EnumStringDown
            | val GHC.Classes.== "up" -> InvoiceitemPlan'TransformUsage'Round'EnumStringUp
            | GHC.Base.otherwise -> InvoiceitemPlan'TransformUsage'Round'EnumOther val
      )

-- | Defines the enum schema invoiceitemPlan\'Usage_type\'
--
-- Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
data InvoiceitemPlan'UsageType'
  = InvoiceitemPlan'UsageType'EnumOther Data.Aeson.Types.Internal.Value
  | InvoiceitemPlan'UsageType'EnumTyped Data.Text.Internal.Text
  | InvoiceitemPlan'UsageType'EnumStringLicensed
  | InvoiceitemPlan'UsageType'EnumStringMetered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemPlan'UsageType' where
  toJSON (InvoiceitemPlan'UsageType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'UsageType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (InvoiceitemPlan'UsageType'EnumStringLicensed) = "licensed"
  toJSON (InvoiceitemPlan'UsageType'EnumStringMetered) = "metered"

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemPlan'UsageType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "licensed" -> InvoiceitemPlan'UsageType'EnumStringLicensed
            | val GHC.Classes.== "metered" -> InvoiceitemPlan'UsageType'EnumStringMetered
            | GHC.Base.otherwise -> InvoiceitemPlan'UsageType'EnumOther val
      )

-- | Define the one-of schema invoiceitemSubscription\'
--
-- The subscription that this invoice item has been created for, if any.
data InvoiceitemSubscription'Variants
  = InvoiceitemSubscription'Subscription Subscription
  | InvoiceitemSubscription'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON InvoiceitemSubscription'Variants where
  toJSON (InvoiceitemSubscription'Subscription a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (InvoiceitemSubscription'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON InvoiceitemSubscription'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemSubscription'Subscription a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ InvoiceitemSubscription'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
