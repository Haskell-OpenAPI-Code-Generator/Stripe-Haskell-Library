{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodDetailsSepaDebit
module StripeAPI.Types.PaymentMethodDetailsSepaDebit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_details_sepa_debit@ in the specification.
data PaymentMethodDetailsSepaDebit = PaymentMethodDetailsSepaDebit
  { -- | bank_code: Bank code of bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsSepaDebitBankCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branch_code: Branch code of bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsSepaDebitBranchCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter ISO code representing the country the bank account is located in.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsSepaDebitCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsSepaDebitFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | last4: Last four characters of the IBAN.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsSepaDebitLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | mandate: ID of the mandate used to make this payment.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodDetailsSepaDebitMandate :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodDetailsSepaDebit where
  toJSON obj = Data.Aeson.Types.Internal.object ("bank_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitBankCode obj : "branch_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitBranchCode obj : "country" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitCountry obj : "fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitFingerprint obj : "last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitLast4 obj : "mandate" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitMandate obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bank_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitBankCode obj) GHC.Base.<> (("branch_code" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitBranchCode obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitCountry obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitFingerprint obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitLast4 obj) GHC.Base.<> ("mandate" Data.Aeson.Types.ToJSON..= paymentMethodDetailsSepaDebitMandate obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodDetailsSepaDebit where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodDetailsSepaDebit" (\obj -> (((((GHC.Base.pure PaymentMethodDetailsSepaDebit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "branch_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mandate"))

-- | Create a new 'PaymentMethodDetailsSepaDebit' with all required fields.
mkPaymentMethodDetailsSepaDebit :: PaymentMethodDetailsSepaDebit
mkPaymentMethodDetailsSepaDebit =
  PaymentMethodDetailsSepaDebit
    { paymentMethodDetailsSepaDebitBankCode = GHC.Maybe.Nothing,
      paymentMethodDetailsSepaDebitBranchCode = GHC.Maybe.Nothing,
      paymentMethodDetailsSepaDebitCountry = GHC.Maybe.Nothing,
      paymentMethodDetailsSepaDebitFingerprint = GHC.Maybe.Nothing,
      paymentMethodDetailsSepaDebitLast4 = GHC.Maybe.Nothing,
      paymentMethodDetailsSepaDebitMandate = GHC.Maybe.Nothing
    }
