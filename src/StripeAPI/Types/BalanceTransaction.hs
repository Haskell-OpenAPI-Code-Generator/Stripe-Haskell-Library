{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema BalanceTransaction
module StripeAPI.Types.BalanceTransaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.ApplicationFee
import {-# SOURCE #-} StripeAPI.Types.Charge
import {-# SOURCE #-} StripeAPI.Types.ConnectCollectionTransfer
import {-# SOURCE #-} StripeAPI.Types.CustomerCashBalanceTransaction
import {-# SOURCE #-} StripeAPI.Types.Dispute
import {-# SOURCE #-} StripeAPI.Types.Fee
import {-# SOURCE #-} StripeAPI.Types.FeeRefund
import {-# SOURCE #-} StripeAPI.Types.Issuing_Authorization
import {-# SOURCE #-} StripeAPI.Types.Issuing_Dispute
import {-# SOURCE #-} StripeAPI.Types.Issuing_Transaction
import {-# SOURCE #-} StripeAPI.Types.Payout
import {-# SOURCE #-} StripeAPI.Types.PlatformTaxFee
import {-# SOURCE #-} StripeAPI.Types.Refund
import {-# SOURCE #-} StripeAPI.Types.ReserveTransaction
import {-# SOURCE #-} StripeAPI.Types.TaxDeductedAtSource
import {-# SOURCE #-} StripeAPI.Types.Topup
import {-# SOURCE #-} StripeAPI.Types.Transfer
import {-# SOURCE #-} StripeAPI.Types.TransferReversal
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.balance_transaction@ in the specification.
--
-- Balance transactions represent funds moving through your Stripe account.
-- Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.
--
-- Related guide: [Balance transaction types](https:\/\/stripe.com\/docs\/reports\/balance-transaction-types)
data BalanceTransaction = BalanceTransaction
  { -- | amount: Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party.
    balanceTransactionAmount :: GHC.Types.Int,
    -- | available_on: The date that the transaction\'s net funds become available in the Stripe balance.
    balanceTransactionAvailableOn :: GHC.Types.Int,
    -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    balanceTransactionCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    balanceTransactionCurrency :: Data.Text.Internal.Text,
    -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    balanceTransactionDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | exchange_rate: If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the \`amount\` in currency A, multipled by the \`exchange_rate\`, equals the \`amount\` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent\'s \`amount\` is \`1000\` and \`currency\` is \`eur\`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction\'s \`amount\` is \`1234\`, its \`currency\` is \`usd\`, and the \`exchange_rate\` is \`1.234\`.
    balanceTransactionExchangeRate :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Double)),
    -- | fee: Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed.
    balanceTransactionFee :: GHC.Types.Int,
    -- | fee_details: Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction.
    balanceTransactionFeeDetails :: ([Fee]),
    -- | id: Unique identifier for the object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    balanceTransactionId :: Data.Text.Internal.Text,
    -- | net: Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by \`amount\` - \`fee\`
    balanceTransactionNet :: GHC.Types.Int,
    -- | reporting_category: Learn more about how [reporting categories](https:\/\/stripe.com\/docs\/reports\/reporting-categories) can help you understand balance transactions from an accounting perspective.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    balanceTransactionReportingCategory :: Data.Text.Internal.Text,
    -- | source: This transaction relates to the Stripe object.
    balanceTransactionSource :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable BalanceTransactionSource'NonNullableVariants)),
    -- | status: The transaction\'s net funds status in the Stripe balance, which are either \`available\` or \`pending\`.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    balanceTransactionStatus :: Data.Text.Internal.Text,
    -- | type: Transaction type: \`adjustment\`, \`advance\`, \`advance_funding\`, \`anticipation_repayment\`, \`application_fee\`, \`application_fee_refund\`, \`charge\`, \`climate_order_purchase\`, \`climate_order_refund\`, \`connect_collection_transfer\`, \`contribution\`, \`issuing_authorization_hold\`, \`issuing_authorization_release\`, \`issuing_dispute\`, \`issuing_transaction\`, \`obligation_inbound\`, \`obligation_outbound\`, \`obligation_reversal_inbound\`, \`obligation_reversal_outbound\`, \`obligation_payout\`, \`obligation_payout_failure\`, \`payment\`, \`payment_failure_refund\`, \`payment_network_reserve_hold\`, \`payment_network_reserve_release\`, \`payment_refund\`, \`payment_reversal\`, \`payment_unreconciled\`, \`payout\`, \`payout_cancel\`, \`payout_failure\`, \`refund\`, \`refund_failure\`, \`reserve_transaction\`, \`reserved_funds\`, \`stripe_fee\`, \`stripe_fx_fee\`, \`tax_fee\`, \`topup\`, \`topup_reversal\`, \`transfer\`, \`transfer_cancel\`, \`transfer_failure\`, or \`transfer_refund\`. Learn more about [balance transaction types and what they represent](https:\/\/stripe.com\/docs\/reports\/balance-transaction-types). To classify transactions for accounting purposes, consider \`reporting_category\` instead.
    balanceTransactionType :: BalanceTransactionType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON BalanceTransaction where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= balanceTransactionAmount obj] : ["available_on" Data.Aeson.Types.ToJSON..= balanceTransactionAvailableOn obj] : ["created" Data.Aeson.Types.ToJSON..= balanceTransactionCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= balanceTransactionCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (balanceTransactionDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange_rate" Data.Aeson.Types.ToJSON..=)) (balanceTransactionExchangeRate obj) : ["fee" Data.Aeson.Types.ToJSON..= balanceTransactionFee obj] : ["fee_details" Data.Aeson.Types.ToJSON..= balanceTransactionFeeDetails obj] : ["id" Data.Aeson.Types.ToJSON..= balanceTransactionId obj] : ["net" Data.Aeson.Types.ToJSON..= balanceTransactionNet obj] : ["reporting_category" Data.Aeson.Types.ToJSON..= balanceTransactionReportingCategory obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source" Data.Aeson.Types.ToJSON..=)) (balanceTransactionSource obj) : ["status" Data.Aeson.Types.ToJSON..= balanceTransactionStatus obj] : ["type" Data.Aeson.Types.ToJSON..= balanceTransactionType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "balance_transaction"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount" Data.Aeson.Types.ToJSON..= balanceTransactionAmount obj] : ["available_on" Data.Aeson.Types.ToJSON..= balanceTransactionAvailableOn obj] : ["created" Data.Aeson.Types.ToJSON..= balanceTransactionCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= balanceTransactionCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (balanceTransactionDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("exchange_rate" Data.Aeson.Types.ToJSON..=)) (balanceTransactionExchangeRate obj) : ["fee" Data.Aeson.Types.ToJSON..= balanceTransactionFee obj] : ["fee_details" Data.Aeson.Types.ToJSON..= balanceTransactionFeeDetails obj] : ["id" Data.Aeson.Types.ToJSON..= balanceTransactionId obj] : ["net" Data.Aeson.Types.ToJSON..= balanceTransactionNet obj] : ["reporting_category" Data.Aeson.Types.ToJSON..= balanceTransactionReportingCategory obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("source" Data.Aeson.Types.ToJSON..=)) (balanceTransactionSource obj) : ["status" Data.Aeson.Types.ToJSON..= balanceTransactionStatus obj] : ["type" Data.Aeson.Types.ToJSON..= balanceTransactionType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "balance_transaction"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON BalanceTransaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "BalanceTransaction" (\obj -> (((((((((((((GHC.Base.pure BalanceTransaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "available_on")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "exchange_rate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "fee_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "net")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reporting_category")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "source")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'BalanceTransaction' with all required fields.
mkBalanceTransaction ::
  -- | 'balanceTransactionAmount'
  GHC.Types.Int ->
  -- | 'balanceTransactionAvailableOn'
  GHC.Types.Int ->
  -- | 'balanceTransactionCreated'
  GHC.Types.Int ->
  -- | 'balanceTransactionCurrency'
  Data.Text.Internal.Text ->
  -- | 'balanceTransactionFee'
  GHC.Types.Int ->
  -- | 'balanceTransactionFeeDetails'
  [Fee] ->
  -- | 'balanceTransactionId'
  Data.Text.Internal.Text ->
  -- | 'balanceTransactionNet'
  GHC.Types.Int ->
  -- | 'balanceTransactionReportingCategory'
  Data.Text.Internal.Text ->
  -- | 'balanceTransactionStatus'
  Data.Text.Internal.Text ->
  -- | 'balanceTransactionType'
  BalanceTransactionType' ->
  BalanceTransaction
mkBalanceTransaction balanceTransactionAmount balanceTransactionAvailableOn balanceTransactionCreated balanceTransactionCurrency balanceTransactionFee balanceTransactionFeeDetails balanceTransactionId balanceTransactionNet balanceTransactionReportingCategory balanceTransactionStatus balanceTransactionType =
  BalanceTransaction
    { balanceTransactionAmount = balanceTransactionAmount,
      balanceTransactionAvailableOn = balanceTransactionAvailableOn,
      balanceTransactionCreated = balanceTransactionCreated,
      balanceTransactionCurrency = balanceTransactionCurrency,
      balanceTransactionDescription = GHC.Maybe.Nothing,
      balanceTransactionExchangeRate = GHC.Maybe.Nothing,
      balanceTransactionFee = balanceTransactionFee,
      balanceTransactionFeeDetails = balanceTransactionFeeDetails,
      balanceTransactionId = balanceTransactionId,
      balanceTransactionNet = balanceTransactionNet,
      balanceTransactionReportingCategory = balanceTransactionReportingCategory,
      balanceTransactionSource = GHC.Maybe.Nothing,
      balanceTransactionStatus = balanceTransactionStatus,
      balanceTransactionType = balanceTransactionType
    }

-- | Defines the oneOf schema located at @components.schemas.balance_transaction.properties.source.anyOf@ in the specification.
--
-- This transaction relates to the Stripe object.
data BalanceTransactionSource'NonNullableVariants
  = BalanceTransactionSource'NonNullableText Data.Text.Internal.Text
  | BalanceTransactionSource'NonNullableApplicationFee ApplicationFee
  | BalanceTransactionSource'NonNullableCharge Charge
  | BalanceTransactionSource'NonNullableConnectCollectionTransfer ConnectCollectionTransfer
  | BalanceTransactionSource'NonNullableCustomerCashBalanceTransaction CustomerCashBalanceTransaction
  | BalanceTransactionSource'NonNullableDispute Dispute
  | BalanceTransactionSource'NonNullableFeeRefund FeeRefund
  | BalanceTransactionSource'NonNullableIssuing'authorization Issuing'authorization
  | BalanceTransactionSource'NonNullableIssuing'dispute Issuing'dispute
  | BalanceTransactionSource'NonNullableIssuing'transaction Issuing'transaction
  | BalanceTransactionSource'NonNullablePayout Payout
  | BalanceTransactionSource'NonNullablePlatformTaxFee PlatformTaxFee
  | BalanceTransactionSource'NonNullableRefund Refund
  | BalanceTransactionSource'NonNullableReserveTransaction ReserveTransaction
  | BalanceTransactionSource'NonNullableTaxDeductedAtSource TaxDeductedAtSource
  | BalanceTransactionSource'NonNullableTopup Topup
  | BalanceTransactionSource'NonNullableTransfer Transfer
  | BalanceTransactionSource'NonNullableTransferReversal TransferReversal
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON BalanceTransactionSource'NonNullableVariants where
  toJSON (BalanceTransactionSource'NonNullableText a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableApplicationFee a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableCharge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableConnectCollectionTransfer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableCustomerCashBalanceTransaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableDispute a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableFeeRefund a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableIssuing'authorization a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableIssuing'dispute a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableIssuing'transaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullablePayout a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullablePlatformTaxFee a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableRefund a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableReserveTransaction a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableTaxDeductedAtSource a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableTopup a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableTransfer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (BalanceTransactionSource'NonNullableTransferReversal a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON BalanceTransactionSource'NonNullableVariants where
  parseJSON val = case (BalanceTransactionSource'NonNullableText Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableApplicationFee Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableCharge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableConnectCollectionTransfer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableCustomerCashBalanceTransaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableDispute Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableFeeRefund Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableIssuing'authorization Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableIssuing'dispute Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableIssuing'transaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullablePayout Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullablePlatformTaxFee Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableRefund Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableReserveTransaction Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableTaxDeductedAtSource Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableTopup Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableTransfer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((BalanceTransactionSource'NonNullableTransferReversal Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched"))))))))))))))))) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.balance_transaction.properties.type@ in the specification.
--
-- Transaction type: \`adjustment\`, \`advance\`, \`advance_funding\`, \`anticipation_repayment\`, \`application_fee\`, \`application_fee_refund\`, \`charge\`, \`climate_order_purchase\`, \`climate_order_refund\`, \`connect_collection_transfer\`, \`contribution\`, \`issuing_authorization_hold\`, \`issuing_authorization_release\`, \`issuing_dispute\`, \`issuing_transaction\`, \`obligation_inbound\`, \`obligation_outbound\`, \`obligation_reversal_inbound\`, \`obligation_reversal_outbound\`, \`obligation_payout\`, \`obligation_payout_failure\`, \`payment\`, \`payment_failure_refund\`, \`payment_network_reserve_hold\`, \`payment_network_reserve_release\`, \`payment_refund\`, \`payment_reversal\`, \`payment_unreconciled\`, \`payout\`, \`payout_cancel\`, \`payout_failure\`, \`refund\`, \`refund_failure\`, \`reserve_transaction\`, \`reserved_funds\`, \`stripe_fee\`, \`stripe_fx_fee\`, \`tax_fee\`, \`topup\`, \`topup_reversal\`, \`transfer\`, \`transfer_cancel\`, \`transfer_failure\`, or \`transfer_refund\`. Learn more about [balance transaction types and what they represent](https:\/\/stripe.com\/docs\/reports\/balance-transaction-types). To classify transactions for accounting purposes, consider \`reporting_category\` instead.
data BalanceTransactionType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    BalanceTransactionType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    BalanceTransactionType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"adjustment"@
    BalanceTransactionType'EnumAdjustment
  | -- | Represents the JSON value @"advance"@
    BalanceTransactionType'EnumAdvance
  | -- | Represents the JSON value @"advance_funding"@
    BalanceTransactionType'EnumAdvanceFunding
  | -- | Represents the JSON value @"anticipation_repayment"@
    BalanceTransactionType'EnumAnticipationRepayment
  | -- | Represents the JSON value @"application_fee"@
    BalanceTransactionType'EnumApplicationFee
  | -- | Represents the JSON value @"application_fee_refund"@
    BalanceTransactionType'EnumApplicationFeeRefund
  | -- | Represents the JSON value @"charge"@
    BalanceTransactionType'EnumCharge
  | -- | Represents the JSON value @"climate_order_purchase"@
    BalanceTransactionType'EnumClimateOrderPurchase
  | -- | Represents the JSON value @"climate_order_refund"@
    BalanceTransactionType'EnumClimateOrderRefund
  | -- | Represents the JSON value @"connect_collection_transfer"@
    BalanceTransactionType'EnumConnectCollectionTransfer
  | -- | Represents the JSON value @"contribution"@
    BalanceTransactionType'EnumContribution
  | -- | Represents the JSON value @"issuing_authorization_hold"@
    BalanceTransactionType'EnumIssuingAuthorizationHold
  | -- | Represents the JSON value @"issuing_authorization_release"@
    BalanceTransactionType'EnumIssuingAuthorizationRelease
  | -- | Represents the JSON value @"issuing_dispute"@
    BalanceTransactionType'EnumIssuingDispute
  | -- | Represents the JSON value @"issuing_transaction"@
    BalanceTransactionType'EnumIssuingTransaction
  | -- | Represents the JSON value @"obligation_inbound"@
    BalanceTransactionType'EnumObligationInbound
  | -- | Represents the JSON value @"obligation_outbound"@
    BalanceTransactionType'EnumObligationOutbound
  | -- | Represents the JSON value @"obligation_payout"@
    BalanceTransactionType'EnumObligationPayout
  | -- | Represents the JSON value @"obligation_payout_failure"@
    BalanceTransactionType'EnumObligationPayoutFailure
  | -- | Represents the JSON value @"obligation_reversal_inbound"@
    BalanceTransactionType'EnumObligationReversalInbound
  | -- | Represents the JSON value @"obligation_reversal_outbound"@
    BalanceTransactionType'EnumObligationReversalOutbound
  | -- | Represents the JSON value @"payment"@
    BalanceTransactionType'EnumPayment
  | -- | Represents the JSON value @"payment_failure_refund"@
    BalanceTransactionType'EnumPaymentFailureRefund
  | -- | Represents the JSON value @"payment_network_reserve_hold"@
    BalanceTransactionType'EnumPaymentNetworkReserveHold
  | -- | Represents the JSON value @"payment_network_reserve_release"@
    BalanceTransactionType'EnumPaymentNetworkReserveRelease
  | -- | Represents the JSON value @"payment_refund"@
    BalanceTransactionType'EnumPaymentRefund
  | -- | Represents the JSON value @"payment_reversal"@
    BalanceTransactionType'EnumPaymentReversal
  | -- | Represents the JSON value @"payment_unreconciled"@
    BalanceTransactionType'EnumPaymentUnreconciled
  | -- | Represents the JSON value @"payout"@
    BalanceTransactionType'EnumPayout
  | -- | Represents the JSON value @"payout_cancel"@
    BalanceTransactionType'EnumPayoutCancel
  | -- | Represents the JSON value @"payout_failure"@
    BalanceTransactionType'EnumPayoutFailure
  | -- | Represents the JSON value @"refund"@
    BalanceTransactionType'EnumRefund
  | -- | Represents the JSON value @"refund_failure"@
    BalanceTransactionType'EnumRefundFailure
  | -- | Represents the JSON value @"reserve_transaction"@
    BalanceTransactionType'EnumReserveTransaction
  | -- | Represents the JSON value @"reserved_funds"@
    BalanceTransactionType'EnumReservedFunds
  | -- | Represents the JSON value @"stripe_fee"@
    BalanceTransactionType'EnumStripeFee
  | -- | Represents the JSON value @"stripe_fx_fee"@
    BalanceTransactionType'EnumStripeFxFee
  | -- | Represents the JSON value @"tax_fee"@
    BalanceTransactionType'EnumTaxFee
  | -- | Represents the JSON value @"topup"@
    BalanceTransactionType'EnumTopup
  | -- | Represents the JSON value @"topup_reversal"@
    BalanceTransactionType'EnumTopupReversal
  | -- | Represents the JSON value @"transfer"@
    BalanceTransactionType'EnumTransfer
  | -- | Represents the JSON value @"transfer_cancel"@
    BalanceTransactionType'EnumTransferCancel
  | -- | Represents the JSON value @"transfer_failure"@
    BalanceTransactionType'EnumTransferFailure
  | -- | Represents the JSON value @"transfer_refund"@
    BalanceTransactionType'EnumTransferRefund
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON BalanceTransactionType' where
  toJSON (BalanceTransactionType'Other val) = val
  toJSON (BalanceTransactionType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (BalanceTransactionType'EnumAdjustment) = "adjustment"
  toJSON (BalanceTransactionType'EnumAdvance) = "advance"
  toJSON (BalanceTransactionType'EnumAdvanceFunding) = "advance_funding"
  toJSON (BalanceTransactionType'EnumAnticipationRepayment) = "anticipation_repayment"
  toJSON (BalanceTransactionType'EnumApplicationFee) = "application_fee"
  toJSON (BalanceTransactionType'EnumApplicationFeeRefund) = "application_fee_refund"
  toJSON (BalanceTransactionType'EnumCharge) = "charge"
  toJSON (BalanceTransactionType'EnumClimateOrderPurchase) = "climate_order_purchase"
  toJSON (BalanceTransactionType'EnumClimateOrderRefund) = "climate_order_refund"
  toJSON (BalanceTransactionType'EnumConnectCollectionTransfer) = "connect_collection_transfer"
  toJSON (BalanceTransactionType'EnumContribution) = "contribution"
  toJSON (BalanceTransactionType'EnumIssuingAuthorizationHold) = "issuing_authorization_hold"
  toJSON (BalanceTransactionType'EnumIssuingAuthorizationRelease) = "issuing_authorization_release"
  toJSON (BalanceTransactionType'EnumIssuingDispute) = "issuing_dispute"
  toJSON (BalanceTransactionType'EnumIssuingTransaction) = "issuing_transaction"
  toJSON (BalanceTransactionType'EnumObligationInbound) = "obligation_inbound"
  toJSON (BalanceTransactionType'EnumObligationOutbound) = "obligation_outbound"
  toJSON (BalanceTransactionType'EnumObligationPayout) = "obligation_payout"
  toJSON (BalanceTransactionType'EnumObligationPayoutFailure) = "obligation_payout_failure"
  toJSON (BalanceTransactionType'EnumObligationReversalInbound) = "obligation_reversal_inbound"
  toJSON (BalanceTransactionType'EnumObligationReversalOutbound) = "obligation_reversal_outbound"
  toJSON (BalanceTransactionType'EnumPayment) = "payment"
  toJSON (BalanceTransactionType'EnumPaymentFailureRefund) = "payment_failure_refund"
  toJSON (BalanceTransactionType'EnumPaymentNetworkReserveHold) = "payment_network_reserve_hold"
  toJSON (BalanceTransactionType'EnumPaymentNetworkReserveRelease) = "payment_network_reserve_release"
  toJSON (BalanceTransactionType'EnumPaymentRefund) = "payment_refund"
  toJSON (BalanceTransactionType'EnumPaymentReversal) = "payment_reversal"
  toJSON (BalanceTransactionType'EnumPaymentUnreconciled) = "payment_unreconciled"
  toJSON (BalanceTransactionType'EnumPayout) = "payout"
  toJSON (BalanceTransactionType'EnumPayoutCancel) = "payout_cancel"
  toJSON (BalanceTransactionType'EnumPayoutFailure) = "payout_failure"
  toJSON (BalanceTransactionType'EnumRefund) = "refund"
  toJSON (BalanceTransactionType'EnumRefundFailure) = "refund_failure"
  toJSON (BalanceTransactionType'EnumReserveTransaction) = "reserve_transaction"
  toJSON (BalanceTransactionType'EnumReservedFunds) = "reserved_funds"
  toJSON (BalanceTransactionType'EnumStripeFee) = "stripe_fee"
  toJSON (BalanceTransactionType'EnumStripeFxFee) = "stripe_fx_fee"
  toJSON (BalanceTransactionType'EnumTaxFee) = "tax_fee"
  toJSON (BalanceTransactionType'EnumTopup) = "topup"
  toJSON (BalanceTransactionType'EnumTopupReversal) = "topup_reversal"
  toJSON (BalanceTransactionType'EnumTransfer) = "transfer"
  toJSON (BalanceTransactionType'EnumTransferCancel) = "transfer_cancel"
  toJSON (BalanceTransactionType'EnumTransferFailure) = "transfer_failure"
  toJSON (BalanceTransactionType'EnumTransferRefund) = "transfer_refund"

instance Data.Aeson.Types.FromJSON.FromJSON BalanceTransactionType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "adjustment" -> BalanceTransactionType'EnumAdjustment
            | val GHC.Classes.== "advance" -> BalanceTransactionType'EnumAdvance
            | val GHC.Classes.== "advance_funding" -> BalanceTransactionType'EnumAdvanceFunding
            | val GHC.Classes.== "anticipation_repayment" -> BalanceTransactionType'EnumAnticipationRepayment
            | val GHC.Classes.== "application_fee" -> BalanceTransactionType'EnumApplicationFee
            | val GHC.Classes.== "application_fee_refund" -> BalanceTransactionType'EnumApplicationFeeRefund
            | val GHC.Classes.== "charge" -> BalanceTransactionType'EnumCharge
            | val GHC.Classes.== "climate_order_purchase" -> BalanceTransactionType'EnumClimateOrderPurchase
            | val GHC.Classes.== "climate_order_refund" -> BalanceTransactionType'EnumClimateOrderRefund
            | val GHC.Classes.== "connect_collection_transfer" -> BalanceTransactionType'EnumConnectCollectionTransfer
            | val GHC.Classes.== "contribution" -> BalanceTransactionType'EnumContribution
            | val GHC.Classes.== "issuing_authorization_hold" -> BalanceTransactionType'EnumIssuingAuthorizationHold
            | val GHC.Classes.== "issuing_authorization_release" -> BalanceTransactionType'EnumIssuingAuthorizationRelease
            | val GHC.Classes.== "issuing_dispute" -> BalanceTransactionType'EnumIssuingDispute
            | val GHC.Classes.== "issuing_transaction" -> BalanceTransactionType'EnumIssuingTransaction
            | val GHC.Classes.== "obligation_inbound" -> BalanceTransactionType'EnumObligationInbound
            | val GHC.Classes.== "obligation_outbound" -> BalanceTransactionType'EnumObligationOutbound
            | val GHC.Classes.== "obligation_payout" -> BalanceTransactionType'EnumObligationPayout
            | val GHC.Classes.== "obligation_payout_failure" -> BalanceTransactionType'EnumObligationPayoutFailure
            | val GHC.Classes.== "obligation_reversal_inbound" -> BalanceTransactionType'EnumObligationReversalInbound
            | val GHC.Classes.== "obligation_reversal_outbound" -> BalanceTransactionType'EnumObligationReversalOutbound
            | val GHC.Classes.== "payment" -> BalanceTransactionType'EnumPayment
            | val GHC.Classes.== "payment_failure_refund" -> BalanceTransactionType'EnumPaymentFailureRefund
            | val GHC.Classes.== "payment_network_reserve_hold" -> BalanceTransactionType'EnumPaymentNetworkReserveHold
            | val GHC.Classes.== "payment_network_reserve_release" -> BalanceTransactionType'EnumPaymentNetworkReserveRelease
            | val GHC.Classes.== "payment_refund" -> BalanceTransactionType'EnumPaymentRefund
            | val GHC.Classes.== "payment_reversal" -> BalanceTransactionType'EnumPaymentReversal
            | val GHC.Classes.== "payment_unreconciled" -> BalanceTransactionType'EnumPaymentUnreconciled
            | val GHC.Classes.== "payout" -> BalanceTransactionType'EnumPayout
            | val GHC.Classes.== "payout_cancel" -> BalanceTransactionType'EnumPayoutCancel
            | val GHC.Classes.== "payout_failure" -> BalanceTransactionType'EnumPayoutFailure
            | val GHC.Classes.== "refund" -> BalanceTransactionType'EnumRefund
            | val GHC.Classes.== "refund_failure" -> BalanceTransactionType'EnumRefundFailure
            | val GHC.Classes.== "reserve_transaction" -> BalanceTransactionType'EnumReserveTransaction
            | val GHC.Classes.== "reserved_funds" -> BalanceTransactionType'EnumReservedFunds
            | val GHC.Classes.== "stripe_fee" -> BalanceTransactionType'EnumStripeFee
            | val GHC.Classes.== "stripe_fx_fee" -> BalanceTransactionType'EnumStripeFxFee
            | val GHC.Classes.== "tax_fee" -> BalanceTransactionType'EnumTaxFee
            | val GHC.Classes.== "topup" -> BalanceTransactionType'EnumTopup
            | val GHC.Classes.== "topup_reversal" -> BalanceTransactionType'EnumTopupReversal
            | val GHC.Classes.== "transfer" -> BalanceTransactionType'EnumTransfer
            | val GHC.Classes.== "transfer_cancel" -> BalanceTransactionType'EnumTransferCancel
            | val GHC.Classes.== "transfer_failure" -> BalanceTransactionType'EnumTransferFailure
            | val GHC.Classes.== "transfer_refund" -> BalanceTransactionType'EnumTransferRefund
            | GHC.Base.otherwise -> BalanceTransactionType'Other val
      )
