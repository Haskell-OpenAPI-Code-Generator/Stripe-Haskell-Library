-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema Radar_ValueList
module StripeAPI.Types.Radar_ValueList where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Radar_ValueListItem

-- | Defines the object schema located at @components.schemas.radar.value_list@ in the specification.
-- 
-- Value lists allow you to group values together which can then be referenced in rules.
-- 
-- Related guide: [Default Stripe Lists](https:\/\/stripe.com\/docs\/radar\/lists\#managing-list-items).
data Radar'valueList = Radar'valueList {
  -- | alias: The name of the value list for use in rules.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  radar'valueListAlias :: Data.Text.Internal.Text
  -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
  , radar'valueListCreated :: GHC.Types.Int
  -- | created_by: The name or email address of the user who created this value list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , radar'valueListCreatedBy :: Data.Text.Internal.Text
  -- | id: Unique identifier for the object.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , radar'valueListId :: Data.Text.Internal.Text
  -- | item_type: The type of items in the value list. One of \`card_fingerprint\`, \`card_bin\`, \`email\`, \`ip_address\`, \`country\`, \`string\`, \`case_sensitive_string\`, or \`customer_id\`.
  , radar'valueListItemType :: Radar'valueListItemType'
  -- | list_items: List of items contained within this value list.
  , radar'valueListListItems :: Radar'valueListListItems'
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , radar'valueListLivemode :: GHC.Types.Bool
  -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
  , radar'valueListMetadata :: Data.Aeson.Types.Internal.Object
  -- | name: The name of the value list.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , radar'valueListName :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Radar'valueList
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["alias" Data.Aeson.Types.ToJSON..= radar'valueListAlias obj] : ["created" Data.Aeson.Types.ToJSON..= radar'valueListCreated obj] : ["created_by" Data.Aeson.Types.ToJSON..= radar'valueListCreatedBy obj] : ["id" Data.Aeson.Types.ToJSON..= radar'valueListId obj] : ["item_type" Data.Aeson.Types.ToJSON..= radar'valueListItemType obj] : ["list_items" Data.Aeson.Types.ToJSON..= radar'valueListListItems obj] : ["livemode" Data.Aeson.Types.ToJSON..= radar'valueListLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= radar'valueListMetadata obj] : ["name" Data.Aeson.Types.ToJSON..= radar'valueListName obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "radar.value_list"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["alias" Data.Aeson.Types.ToJSON..= radar'valueListAlias obj] : ["created" Data.Aeson.Types.ToJSON..= radar'valueListCreated obj] : ["created_by" Data.Aeson.Types.ToJSON..= radar'valueListCreatedBy obj] : ["id" Data.Aeson.Types.ToJSON..= radar'valueListId obj] : ["item_type" Data.Aeson.Types.ToJSON..= radar'valueListItemType obj] : ["list_items" Data.Aeson.Types.ToJSON..= radar'valueListListItems obj] : ["livemode" Data.Aeson.Types.ToJSON..= radar'valueListLivemode obj] : ["metadata" Data.Aeson.Types.ToJSON..= radar'valueListMetadata obj] : ["name" Data.Aeson.Types.ToJSON..= radar'valueListName obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "radar.value_list"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Radar'valueList
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Radar'valueList" (\obj -> ((((((((GHC.Base.pure Radar'valueList GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "alias")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "item_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "list_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name"))
-- | Create a new 'Radar'valueList' with all required fields.
mkRadar'valueList :: Data.Text.Internal.Text -- ^ 'radar'valueListAlias'
  -> GHC.Types.Int -- ^ 'radar'valueListCreated'
  -> Data.Text.Internal.Text -- ^ 'radar'valueListCreatedBy'
  -> Data.Text.Internal.Text -- ^ 'radar'valueListId'
  -> Radar'valueListItemType' -- ^ 'radar'valueListItemType'
  -> Radar'valueListListItems' -- ^ 'radar'valueListListItems'
  -> GHC.Types.Bool -- ^ 'radar'valueListLivemode'
  -> Data.Aeson.Types.Internal.Object -- ^ 'radar'valueListMetadata'
  -> Data.Text.Internal.Text -- ^ 'radar'valueListName'
  -> Radar'valueList
mkRadar'valueList radar'valueListAlias radar'valueListCreated radar'valueListCreatedBy radar'valueListId radar'valueListItemType radar'valueListListItems radar'valueListLivemode radar'valueListMetadata radar'valueListName = Radar'valueList{radar'valueListAlias = radar'valueListAlias,
                                                                                                                                                                                                                                                radar'valueListCreated = radar'valueListCreated,
                                                                                                                                                                                                                                                radar'valueListCreatedBy = radar'valueListCreatedBy,
                                                                                                                                                                                                                                                radar'valueListId = radar'valueListId,
                                                                                                                                                                                                                                                radar'valueListItemType = radar'valueListItemType,
                                                                                                                                                                                                                                                radar'valueListListItems = radar'valueListListItems,
                                                                                                                                                                                                                                                radar'valueListLivemode = radar'valueListLivemode,
                                                                                                                                                                                                                                                radar'valueListMetadata = radar'valueListMetadata,
                                                                                                                                                                                                                                                radar'valueListName = radar'valueListName}
-- | Defines the enum schema located at @components.schemas.radar.value_list.properties.item_type@ in the specification.
-- 
-- The type of items in the value list. One of \`card_fingerprint\`, \`card_bin\`, \`email\`, \`ip_address\`, \`country\`, \`string\`, \`case_sensitive_string\`, or \`customer_id\`.
data Radar'valueListItemType' =
   Radar'valueListItemType'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | Radar'valueListItemType'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | Radar'valueListItemType'EnumCardBin -- ^ Represents the JSON value @"card_bin"@
  | Radar'valueListItemType'EnumCardFingerprint -- ^ Represents the JSON value @"card_fingerprint"@
  | Radar'valueListItemType'EnumCaseSensitiveString -- ^ Represents the JSON value @"case_sensitive_string"@
  | Radar'valueListItemType'EnumCountry -- ^ Represents the JSON value @"country"@
  | Radar'valueListItemType'EnumCustomerId -- ^ Represents the JSON value @"customer_id"@
  | Radar'valueListItemType'EnumEmail -- ^ Represents the JSON value @"email"@
  | Radar'valueListItemType'EnumIpAddress -- ^ Represents the JSON value @"ip_address"@
  | Radar'valueListItemType'EnumString -- ^ Represents the JSON value @"string"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Radar'valueListItemType'
    where toJSON (Radar'valueListItemType'Other val) = val
          toJSON (Radar'valueListItemType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (Radar'valueListItemType'EnumCardBin) = "card_bin"
          toJSON (Radar'valueListItemType'EnumCardFingerprint) = "card_fingerprint"
          toJSON (Radar'valueListItemType'EnumCaseSensitiveString) = "case_sensitive_string"
          toJSON (Radar'valueListItemType'EnumCountry) = "country"
          toJSON (Radar'valueListItemType'EnumCustomerId) = "customer_id"
          toJSON (Radar'valueListItemType'EnumEmail) = "email"
          toJSON (Radar'valueListItemType'EnumIpAddress) = "ip_address"
          toJSON (Radar'valueListItemType'EnumString) = "string"
instance Data.Aeson.Types.FromJSON.FromJSON Radar'valueListItemType'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "card_bin" -> Radar'valueListItemType'EnumCardBin
                                            | val GHC.Classes.== "card_fingerprint" -> Radar'valueListItemType'EnumCardFingerprint
                                            | val GHC.Classes.== "case_sensitive_string" -> Radar'valueListItemType'EnumCaseSensitiveString
                                            | val GHC.Classes.== "country" -> Radar'valueListItemType'EnumCountry
                                            | val GHC.Classes.== "customer_id" -> Radar'valueListItemType'EnumCustomerId
                                            | val GHC.Classes.== "email" -> Radar'valueListItemType'EnumEmail
                                            | val GHC.Classes.== "ip_address" -> Radar'valueListItemType'EnumIpAddress
                                            | val GHC.Classes.== "string" -> Radar'valueListItemType'EnumString
                                            | GHC.Base.otherwise -> Radar'valueListItemType'Other val)
-- | Defines the object schema located at @components.schemas.radar.value_list.properties.list_items@ in the specification.
-- 
-- List of items contained within this value list.
data Radar'valueListListItems' = Radar'valueListListItems' {
  -- | data: Details about each object.
  radar'valueListListItems'Data :: ([Radar'valueListItem])
  -- | has_more: True if this list has another page of items after this one that can be fetched.
  , radar'valueListListItems'HasMore :: GHC.Types.Bool
  -- | url: The URL where this list can be accessed.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , radar'valueListListItems'Url :: Data.Text.Internal.Text
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON Radar'valueListListItems'
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= radar'valueListListItems'Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= radar'valueListListItems'HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= radar'valueListListItems'Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= radar'valueListListItems'Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= radar'valueListListItems'HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= radar'valueListListItems'Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON Radar'valueListListItems'
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "Radar'valueListListItems'" (\obj -> ((GHC.Base.pure Radar'valueListListItems' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))
-- | Create a new 'Radar'valueListListItems'' with all required fields.
mkRadar'valueListListItems' :: [Radar'valueListItem] -- ^ 'radar'valueListListItems'Data'
  -> GHC.Types.Bool -- ^ 'radar'valueListListItems'HasMore'
  -> Data.Text.Internal.Text -- ^ 'radar'valueListListItems'Url'
  -> Radar'valueListListItems'
mkRadar'valueListListItems' radar'valueListListItems'Data radar'valueListListItems'HasMore radar'valueListListItems'Url = Radar'valueListListItems'{radar'valueListListItems'Data = radar'valueListListItems'Data,
                                                                                                                                                    radar'valueListListItems'HasMore = radar'valueListListItems'HasMore,
                                                                                                                                                    radar'valueListListItems'Url = radar'valueListListItems'Url}
