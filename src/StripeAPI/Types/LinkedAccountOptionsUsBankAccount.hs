-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema LinkedAccountOptionsUsBankAccount
module StripeAPI.Types.LinkedAccountOptionsUsBankAccount where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias

-- | Defines the object schema located at @components.schemas.linked_account_options_us_bank_account@ in the specification.
-- 
-- 
data LinkedAccountOptionsUsBankAccount = LinkedAccountOptionsUsBankAccount {
  -- | permissions: The list of permissions to request. The \`payment_method\` permission must be included.
  linkedAccountOptionsUsBankAccountPermissions :: (GHC.Maybe.Maybe ([LinkedAccountOptionsUsBankAccountPermissions']))
  -- | return_url: For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , linkedAccountOptionsUsBankAccountReturnUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinkedAccountOptionsUsBankAccount
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (linkedAccountOptionsUsBankAccountPermissions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("return_url" Data.Aeson.Types.ToJSON..=)) (linkedAccountOptionsUsBankAccountReturnUrl obj) : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("permissions" Data.Aeson.Types.ToJSON..=)) (linkedAccountOptionsUsBankAccountPermissions obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("return_url" Data.Aeson.Types.ToJSON..=)) (linkedAccountOptionsUsBankAccountReturnUrl obj) : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON LinkedAccountOptionsUsBankAccount
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "LinkedAccountOptionsUsBankAccount" (\obj -> (GHC.Base.pure LinkedAccountOptionsUsBankAccount GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "permissions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "return_url"))
-- | Create a new 'LinkedAccountOptionsUsBankAccount' with all required fields.
mkLinkedAccountOptionsUsBankAccount :: LinkedAccountOptionsUsBankAccount
mkLinkedAccountOptionsUsBankAccount = LinkedAccountOptionsUsBankAccount{linkedAccountOptionsUsBankAccountPermissions = GHC.Maybe.Nothing,
                                                                        linkedAccountOptionsUsBankAccountReturnUrl = GHC.Maybe.Nothing}
-- | Defines the enum schema located at @components.schemas.linked_account_options_us_bank_account.properties.permissions.items@ in the specification.
-- 
-- 
data LinkedAccountOptionsUsBankAccountPermissions' =
   LinkedAccountOptionsUsBankAccountPermissions'Other Data.Aeson.Types.Internal.Value -- ^ This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
  | LinkedAccountOptionsUsBankAccountPermissions'Typed Data.Text.Internal.Text -- ^ This constructor can be used to send values to the server which are not present in the specification yet.
  | LinkedAccountOptionsUsBankAccountPermissions'EnumBalances -- ^ Represents the JSON value @"balances"@
  | LinkedAccountOptionsUsBankAccountPermissions'EnumOwnership -- ^ Represents the JSON value @"ownership"@
  | LinkedAccountOptionsUsBankAccountPermissions'EnumPaymentMethod -- ^ Represents the JSON value @"payment_method"@
  | LinkedAccountOptionsUsBankAccountPermissions'EnumTransactions -- ^ Represents the JSON value @"transactions"@
  deriving (GHC.Show.Show, GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON LinkedAccountOptionsUsBankAccountPermissions'
    where toJSON (LinkedAccountOptionsUsBankAccountPermissions'Other val) = val
          toJSON (LinkedAccountOptionsUsBankAccountPermissions'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
          toJSON (LinkedAccountOptionsUsBankAccountPermissions'EnumBalances) = "balances"
          toJSON (LinkedAccountOptionsUsBankAccountPermissions'EnumOwnership) = "ownership"
          toJSON (LinkedAccountOptionsUsBankAccountPermissions'EnumPaymentMethod) = "payment_method"
          toJSON (LinkedAccountOptionsUsBankAccountPermissions'EnumTransactions) = "transactions"
instance Data.Aeson.Types.FromJSON.FromJSON LinkedAccountOptionsUsBankAccountPermissions'
    where parseJSON val = GHC.Base.pure (if | val GHC.Classes.== "balances" -> LinkedAccountOptionsUsBankAccountPermissions'EnumBalances
                                            | val GHC.Classes.== "ownership" -> LinkedAccountOptionsUsBankAccountPermissions'EnumOwnership
                                            | val GHC.Classes.== "payment_method" -> LinkedAccountOptionsUsBankAccountPermissions'EnumPaymentMethod
                                            | val GHC.Classes.== "transactions" -> LinkedAccountOptionsUsBankAccountPermissions'EnumTransactions
                                            | GHC.Base.otherwise -> LinkedAccountOptionsUsBankAccountPermissions'Other val)
