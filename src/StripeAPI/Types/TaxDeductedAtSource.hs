{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema TaxDeductedAtSource
module StripeAPI.Types.TaxDeductedAtSource where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax_deducted_at_source@ in the specification.
data TaxDeductedAtSource
  = TaxDeductedAtSource
      { -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxDeductedAtSourceId :: Data.Text.Internal.Text,
        -- | period_end: The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
        taxDeductedAtSourcePeriodEnd :: GHC.Types.Int,
        -- | period_start: The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
        taxDeductedAtSourcePeriodStart :: GHC.Types.Int,
        -- | tax_deduction_account_number: The TAN that was supplied to Stripe when TDS was assessed
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxDeductedAtSourceTaxDeductionAccountNumber :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxDeductedAtSource where
  toJSON obj = Data.Aeson.Types.Internal.object ("id" Data.Aeson.Types.ToJSON..= taxDeductedAtSourceId obj : "period_end" Data.Aeson.Types.ToJSON..= taxDeductedAtSourcePeriodEnd obj : "period_start" Data.Aeson.Types.ToJSON..= taxDeductedAtSourcePeriodStart obj : "tax_deduction_account_number" Data.Aeson.Types.ToJSON..= taxDeductedAtSourceTaxDeductionAccountNumber obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax_deducted_at_source" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("id" Data.Aeson.Types.ToJSON..= taxDeductedAtSourceId obj) GHC.Base.<> (("period_end" Data.Aeson.Types.ToJSON..= taxDeductedAtSourcePeriodEnd obj) GHC.Base.<> (("period_start" Data.Aeson.Types.ToJSON..= taxDeductedAtSourcePeriodStart obj) GHC.Base.<> (("tax_deduction_account_number" Data.Aeson.Types.ToJSON..= taxDeductedAtSourceTaxDeductionAccountNumber obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax_deducted_at_source")))))

instance Data.Aeson.Types.FromJSON.FromJSON TaxDeductedAtSource where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxDeductedAtSource" (\obj -> (((GHC.Base.pure TaxDeductedAtSource GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period_end")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "period_start")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_deduction_account_number"))

-- | Create a new 'TaxDeductedAtSource' with all required fields.
mkTaxDeductedAtSource ::
  -- | 'taxDeductedAtSourceId'
  Data.Text.Internal.Text ->
  -- | 'taxDeductedAtSourcePeriodEnd'
  GHC.Types.Int ->
  -- | 'taxDeductedAtSourcePeriodStart'
  GHC.Types.Int ->
  -- | 'taxDeductedAtSourceTaxDeductionAccountNumber'
  Data.Text.Internal.Text ->
  TaxDeductedAtSource
mkTaxDeductedAtSource taxDeductedAtSourceId taxDeductedAtSourcePeriodEnd taxDeductedAtSourcePeriodStart taxDeductedAtSourceTaxDeductionAccountNumber =
  TaxDeductedAtSource
    { taxDeductedAtSourceId = taxDeductedAtSourceId,
      taxDeductedAtSourcePeriodEnd = taxDeductedAtSourcePeriodEnd,
      taxDeductedAtSourcePeriodStart = taxDeductedAtSourcePeriodStart,
      taxDeductedAtSourceTaxDeductionAccountNumber = taxDeductedAtSourceTaxDeductionAccountNumber
    }
