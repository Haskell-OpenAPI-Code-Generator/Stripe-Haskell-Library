{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema PaymentSource
module StripeAPI.Types.PaymentSource where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Account
import {-# SOURCE #-} StripeAPI.Types.AccountBrandingSettings
import {-# SOURCE #-} StripeAPI.Types.AccountBusinessProfile
import {-# SOURCE #-} StripeAPI.Types.AccountCapabilities
import {-# SOURCE #-} StripeAPI.Types.AccountCardPaymentsSettings
import {-# SOURCE #-} StripeAPI.Types.AccountDashboardSettings
import {-# SOURCE #-} StripeAPI.Types.AccountPaymentsSettings
import {-# SOURCE #-} StripeAPI.Types.AccountPayoutSettings
import {-# SOURCE #-} StripeAPI.Types.AccountRequirements
import {-# SOURCE #-} StripeAPI.Types.AccountSettings
import {-# SOURCE #-} StripeAPI.Types.AccountTosAcceptance
import {-# SOURCE #-} StripeAPI.Types.Address
import {-# SOURCE #-} StripeAPI.Types.AlipayAccount
import {-# SOURCE #-} StripeAPI.Types.BankAccount
import {-# SOURCE #-} StripeAPI.Types.BitcoinReceiver
import {-# SOURCE #-} StripeAPI.Types.BitcoinTransaction
import {-# SOURCE #-} StripeAPI.Types.Card
import {-# SOURCE #-} StripeAPI.Types.Customer
import {-# SOURCE #-} StripeAPI.Types.DeletedCustomer
import {-# SOURCE #-} StripeAPI.Types.LegalEntityCompany
import {-# SOURCE #-} StripeAPI.Types.Person
import {-# SOURCE #-} StripeAPI.Types.Recipient
import {-# SOURCE #-} StripeAPI.Types.Source
import {-# SOURCE #-} StripeAPI.Types.SourceCodeVerificationFlow
import {-# SOURCE #-} StripeAPI.Types.SourceOrder
import {-# SOURCE #-} StripeAPI.Types.SourceOwner
import {-# SOURCE #-} StripeAPI.Types.SourceReceiverFlow
import {-# SOURCE #-} StripeAPI.Types.SourceRedirectFlow
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAchCreditTransfer
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAchDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeAlipay
import {-# SOURCE #-} StripeAPI.Types.SourceTypeBancontact
import {-# SOURCE #-} StripeAPI.Types.SourceTypeCard
import {-# SOURCE #-} StripeAPI.Types.SourceTypeCardPresent
import {-# SOURCE #-} StripeAPI.Types.SourceTypeEps
import {-# SOURCE #-} StripeAPI.Types.SourceTypeGiropay
import {-# SOURCE #-} StripeAPI.Types.SourceTypeIdeal
import {-# SOURCE #-} StripeAPI.Types.SourceTypeKlarna
import {-# SOURCE #-} StripeAPI.Types.SourceTypeMultibanco
import {-# SOURCE #-} StripeAPI.Types.SourceTypeP24
import {-# SOURCE #-} StripeAPI.Types.SourceTypeSepaDebit
import {-# SOURCE #-} StripeAPI.Types.SourceTypeSofort
import {-# SOURCE #-} StripeAPI.Types.SourceTypeThreeDSecure
import {-# SOURCE #-} StripeAPI.Types.SourceTypeWechat
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_source.anyOf@ in the specification.
data PaymentSource
  = PaymentSource
      { -- | account: The ID of the account that the bank account is associated with.
        paymentSourceAccount :: (GHC.Maybe.Maybe PaymentSourceAccount'Variants),
        -- | account_holder_name: The name of the person or business that owns the bank account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAccountHolderType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | ach_credit_transfer
        paymentSourceAchCreditTransfer :: (GHC.Maybe.Maybe SourceTypeAchCreditTransfer),
        -- | ach_debit
        paymentSourceAchDebit :: (GHC.Maybe.Maybe SourceTypeAchDebit),
        -- | active: True when this bitcoin receiver has received a non-zero amount of bitcoin.
        paymentSourceActive :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | address_city: City\/District\/Suburb\/Town\/Village.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_country: Billing address country, if provided when creating card.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAddressLine1Check :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_state: State\/County\/Province\/Region.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_zip: ZIP or postal code.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceAddressZipCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | alipay
        paymentSourceAlipay :: (GHC.Maybe.Maybe SourceTypeAlipay),
        -- | amount: The amount of \`currency\` that you are collecting as payment.
        paymentSourceAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | amount_received: The amount of \`currency\` to which \`bitcoin_amount_received\` has been converted.
        paymentSourceAmountReceived :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | available_payout_methods: A set of available payout methods for this card. Will be either \`[\"standard\"]\` or \`[\"standard\", \"instant\"]\`. Only values from this set should be passed as the \`method\` when creating a transfer.
        paymentSourceAvailablePayoutMethods :: (GHC.Maybe.Maybe ([PaymentSourceAvailablePayoutMethods'])),
        -- | bancontact
        paymentSourceBancontact :: (GHC.Maybe.Maybe SourceTypeBancontact),
        -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | bitcoin_amount: The amount of bitcoin that the customer should send to fill the receiver. The \`bitcoin_amount\` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin.
        paymentSourceBitcoinAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | bitcoin_amount_received: The amount of bitcoin that has been sent by the customer to this receiver.
        paymentSourceBitcoinAmountReceived :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | bitcoin_uri: This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBitcoinUri :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBrand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | business_profile: Business information about the account.
        paymentSourceBusinessProfile :: (GHC.Maybe.Maybe PaymentSourceBusinessProfile'),
        -- | business_type: The business type.
        paymentSourceBusinessType :: (GHC.Maybe.Maybe PaymentSourceBusinessType'),
        -- | capabilities:
        paymentSourceCapabilities :: (GHC.Maybe.Maybe AccountCapabilities),
        -- | card
        paymentSourceCard :: (GHC.Maybe.Maybe SourceTypeCard),
        -- | card_present
        paymentSourceCardPresent :: (GHC.Maybe.Maybe SourceTypeCardPresent),
        -- | charges_enabled: Whether the account can create live charges.
        paymentSourceChargesEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | client_secret: The client secret of the source. Used for client-side retrieval using a publishable key.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceClientSecret :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | code_verification:
        paymentSourceCodeVerification :: (GHC.Maybe.Maybe SourceCodeVerificationFlow),
        -- | company:
        paymentSourceCompany :: (GHC.Maybe.Maybe LegalEntityCompany),
        -- | country: The account\'s country.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        paymentSourceCreated :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
        paymentSourceCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | customer: The ID of the customer associated with this Alipay Account.
        paymentSourceCustomer :: (GHC.Maybe.Maybe PaymentSourceCustomer'Variants),
        -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceCvcCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | default_currency: Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account\'s country](https:\/\/stripe.com\/docs\/payouts).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceDefaultCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | default_for_currency: Whether this bank account is the default external account for its currency.
        paymentSourceDefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | description: An arbitrary string attached to the object. Often useful for displaying to users.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | details_submitted: Whether account details have been submitted. Standard accounts cannot receive payouts before this is true.
        paymentSourceDetailsSubmitted :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceDynamicLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | email: The primary user\'s email address.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | eps
        paymentSourceEps :: (GHC.Maybe.Maybe SourceTypeEps),
        -- | exp_month: Two-digit number representing the card\'s expiration month.
        paymentSourceExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | exp_year: Four-digit number representing the card\'s expiration year.
        paymentSourceExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | external_accounts: External accounts (bank accounts and debit cards) currently attached to this account
        paymentSourceExternalAccounts :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'),
        -- | filled: This flag is initially false and updates to true when the customer sends the \`bitcoin_amount\` to this receiver.
        paymentSourceFilled :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | fingerprint: Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | flow: The authentication \`flow\` of the source. \`flow\` is one of \`redirect\`, \`receiver\`, \`code_verification\`, \`none\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceFlow :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceFunding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | giropay
        paymentSourceGiropay :: (GHC.Maybe.Maybe SourceTypeGiropay),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceId :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | ideal
        paymentSourceIdeal :: (GHC.Maybe.Maybe SourceTypeIdeal),
        -- | inbound_address: A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceInboundAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | individual: This is an object representing a person associated with a Stripe account.
        --
        -- Related guide: [Handling Identity Verification with the API](https:\/\/stripe.com\/docs\/connect\/identity-verification-api\#person-information).
        paymentSourceIndividual :: (GHC.Maybe.Maybe Person),
        -- | klarna
        paymentSourceKlarna :: (GHC.Maybe.Maybe SourceTypeKlarna),
        -- | last4: The last four digits of the bank account number.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        paymentSourceLivemode :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        paymentSourceMetadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | multibanco
        paymentSourceMultibanco :: (GHC.Maybe.Maybe SourceTypeMultibanco),
        -- | name: Cardholder name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | owner: Information about the owner of the payment instrument that may be used or required by particular source types.
        paymentSourceOwner :: (GHC.Maybe.Maybe PaymentSourceOwner'),
        -- | p24
        paymentSourceP24 :: (GHC.Maybe.Maybe SourceTypeP24),
        -- | payment: The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourcePayment :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | payment_amount: If the Alipay account object is not reusable, the exact amount that you can create a charge for.
        paymentSourcePaymentAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | payment_currency: If the Alipay account object is not reusable, the exact currency that you can create a charge for.
        paymentSourcePaymentCurrency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | payouts_enabled: Whether Stripe can send payouts to this account.
        paymentSourcePayoutsEnabled :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | receiver:
        paymentSourceReceiver :: (GHC.Maybe.Maybe SourceReceiverFlow),
        -- | recipient: The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
        paymentSourceRecipient :: (GHC.Maybe.Maybe PaymentSourceRecipient'Variants),
        -- | redirect:
        paymentSourceRedirect :: (GHC.Maybe.Maybe SourceRedirectFlow),
        -- | refund_address: The refund address of this bitcoin receiver.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceRefundAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | requirements:
        paymentSourceRequirements :: (GHC.Maybe.Maybe AccountRequirements),
        -- | reusable: True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment.
        paymentSourceReusable :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | routing_number: The routing transit number for the bank account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceRoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | sepa_debit
        paymentSourceSepaDebit :: (GHC.Maybe.Maybe SourceTypeSepaDebit),
        -- | settings: Options for customizing how the account functions within Stripe.
        paymentSourceSettings :: (GHC.Maybe.Maybe PaymentSourceSettings'),
        -- | sofort
        paymentSourceSofort :: (GHC.Maybe.Maybe SourceTypeSofort),
        -- | source_order:
        paymentSourceSourceOrder :: (GHC.Maybe.Maybe SourceOrder),
        -- | statement_descriptor: Extra information about a source. This will appear on your customer\'s statement every time you charge the source.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceStatementDescriptor :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a transfer sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send transfers until the bank details are updated.
        --
        -- For external accounts, possible values are \`new\` and \`errored\`. Validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply. If a transfer fails, the status is set to \`errored\` and transfers are stopped until account details are updated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceStatus :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | three_d_secure
        paymentSourceThreeDSecure :: (GHC.Maybe.Maybe SourceTypeThreeDSecure),
        -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`amex_express_checkout\`, \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceTokenizationMethod :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | tos_acceptance:
        paymentSourceTosAcceptance :: (GHC.Maybe.Maybe AccountTosAcceptance),
        -- | transactions: A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
        paymentSourceTransactions :: (GHC.Maybe.Maybe PaymentSourceTransactions'),
        -- | type: The Stripe account type. Can be \`standard\`, \`express\`, or \`custom\`.
        paymentSourceType :: (GHC.Maybe.Maybe PaymentSourceType'),
        -- | uncaptured_funds: This receiver contains uncaptured funds that can be used for a payment or refunded.
        paymentSourceUncapturedFunds :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | usage: Either \`reusable\` or \`single_use\`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceUsage :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | used: Whether this Alipay account object has ever been used for a payment.
        paymentSourceUsed :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | used_for_payment: Indicate if this source is used for payment.
        paymentSourceUsedForPayment :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | username: The username for the Alipay account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceUsername :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | wechat
        paymentSourceWechat :: (GHC.Maybe.Maybe SourceTypeWechat)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSource where
  toJSON obj = Data.Aeson.Types.Internal.object ("account" Data.Aeson.Types.ToJSON..= paymentSourceAccount obj : "account_holder_name" Data.Aeson.Types.ToJSON..= paymentSourceAccountHolderName obj : "account_holder_type" Data.Aeson.Types.ToJSON..= paymentSourceAccountHolderType obj : "ach_credit_transfer" Data.Aeson.Types.ToJSON..= paymentSourceAchCreditTransfer obj : "ach_debit" Data.Aeson.Types.ToJSON..= paymentSourceAchDebit obj : "active" Data.Aeson.Types.ToJSON..= paymentSourceActive obj : "address_city" Data.Aeson.Types.ToJSON..= paymentSourceAddressCity obj : "address_country" Data.Aeson.Types.ToJSON..= paymentSourceAddressCountry obj : "address_line1" Data.Aeson.Types.ToJSON..= paymentSourceAddressLine1 obj : "address_line1_check" Data.Aeson.Types.ToJSON..= paymentSourceAddressLine1Check obj : "address_line2" Data.Aeson.Types.ToJSON..= paymentSourceAddressLine2 obj : "address_state" Data.Aeson.Types.ToJSON..= paymentSourceAddressState obj : "address_zip" Data.Aeson.Types.ToJSON..= paymentSourceAddressZip obj : "address_zip_check" Data.Aeson.Types.ToJSON..= paymentSourceAddressZipCheck obj : "alipay" Data.Aeson.Types.ToJSON..= paymentSourceAlipay obj : "amount" Data.Aeson.Types.ToJSON..= paymentSourceAmount obj : "amount_received" Data.Aeson.Types.ToJSON..= paymentSourceAmountReceived obj : "available_payout_methods" Data.Aeson.Types.ToJSON..= paymentSourceAvailablePayoutMethods obj : "bancontact" Data.Aeson.Types.ToJSON..= paymentSourceBancontact obj : "bank_name" Data.Aeson.Types.ToJSON..= paymentSourceBankName obj : "bitcoin_amount" Data.Aeson.Types.ToJSON..= paymentSourceBitcoinAmount obj : "bitcoin_amount_received" Data.Aeson.Types.ToJSON..= paymentSourceBitcoinAmountReceived obj : "bitcoin_uri" Data.Aeson.Types.ToJSON..= paymentSourceBitcoinUri obj : "brand" Data.Aeson.Types.ToJSON..= paymentSourceBrand obj : "business_profile" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile obj : "business_type" Data.Aeson.Types.ToJSON..= paymentSourceBusinessType obj : "capabilities" Data.Aeson.Types.ToJSON..= paymentSourceCapabilities obj : "card" Data.Aeson.Types.ToJSON..= paymentSourceCard obj : "card_present" Data.Aeson.Types.ToJSON..= paymentSourceCardPresent obj : "charges_enabled" Data.Aeson.Types.ToJSON..= paymentSourceChargesEnabled obj : "client_secret" Data.Aeson.Types.ToJSON..= paymentSourceClientSecret obj : "code_verification" Data.Aeson.Types.ToJSON..= paymentSourceCodeVerification obj : "company" Data.Aeson.Types.ToJSON..= paymentSourceCompany obj : "country" Data.Aeson.Types.ToJSON..= paymentSourceCountry obj : "created" Data.Aeson.Types.ToJSON..= paymentSourceCreated obj : "currency" Data.Aeson.Types.ToJSON..= paymentSourceCurrency obj : "customer" Data.Aeson.Types.ToJSON..= paymentSourceCustomer obj : "cvc_check" Data.Aeson.Types.ToJSON..= paymentSourceCvcCheck obj : "default_currency" Data.Aeson.Types.ToJSON..= paymentSourceDefaultCurrency obj : "default_for_currency" Data.Aeson.Types.ToJSON..= paymentSourceDefaultForCurrency obj : "description" Data.Aeson.Types.ToJSON..= paymentSourceDescription obj : "details_submitted" Data.Aeson.Types.ToJSON..= paymentSourceDetailsSubmitted obj : "dynamic_last4" Data.Aeson.Types.ToJSON..= paymentSourceDynamicLast4 obj : "email" Data.Aeson.Types.ToJSON..= paymentSourceEmail obj : "eps" Data.Aeson.Types.ToJSON..= paymentSourceEps obj : "exp_month" Data.Aeson.Types.ToJSON..= paymentSourceExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= paymentSourceExpYear obj : "external_accounts" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts obj : "filled" Data.Aeson.Types.ToJSON..= paymentSourceFilled obj : "fingerprint" Data.Aeson.Types.ToJSON..= paymentSourceFingerprint obj : "flow" Data.Aeson.Types.ToJSON..= paymentSourceFlow obj : "funding" Data.Aeson.Types.ToJSON..= paymentSourceFunding obj : "giropay" Data.Aeson.Types.ToJSON..= paymentSourceGiropay obj : "id" Data.Aeson.Types.ToJSON..= paymentSourceId obj : "ideal" Data.Aeson.Types.ToJSON..= paymentSourceIdeal obj : "inbound_address" Data.Aeson.Types.ToJSON..= paymentSourceInboundAddress obj : "individual" Data.Aeson.Types.ToJSON..= paymentSourceIndividual obj : "klarna" Data.Aeson.Types.ToJSON..= paymentSourceKlarna obj : "last4" Data.Aeson.Types.ToJSON..= paymentSourceLast4 obj : "livemode" Data.Aeson.Types.ToJSON..= paymentSourceLivemode obj : "metadata" Data.Aeson.Types.ToJSON..= paymentSourceMetadata obj : "multibanco" Data.Aeson.Types.ToJSON..= paymentSourceMultibanco obj : "name" Data.Aeson.Types.ToJSON..= paymentSourceName obj : "owner" Data.Aeson.Types.ToJSON..= paymentSourceOwner obj : "p24" Data.Aeson.Types.ToJSON..= paymentSourceP24 obj : "payment" Data.Aeson.Types.ToJSON..= paymentSourcePayment obj : "payment_amount" Data.Aeson.Types.ToJSON..= paymentSourcePaymentAmount obj : "payment_currency" Data.Aeson.Types.ToJSON..= paymentSourcePaymentCurrency obj : "payouts_enabled" Data.Aeson.Types.ToJSON..= paymentSourcePayoutsEnabled obj : "receiver" Data.Aeson.Types.ToJSON..= paymentSourceReceiver obj : "recipient" Data.Aeson.Types.ToJSON..= paymentSourceRecipient obj : "redirect" Data.Aeson.Types.ToJSON..= paymentSourceRedirect obj : "refund_address" Data.Aeson.Types.ToJSON..= paymentSourceRefundAddress obj : "requirements" Data.Aeson.Types.ToJSON..= paymentSourceRequirements obj : "reusable" Data.Aeson.Types.ToJSON..= paymentSourceReusable obj : "routing_number" Data.Aeson.Types.ToJSON..= paymentSourceRoutingNumber obj : "sepa_debit" Data.Aeson.Types.ToJSON..= paymentSourceSepaDebit obj : "settings" Data.Aeson.Types.ToJSON..= paymentSourceSettings obj : "sofort" Data.Aeson.Types.ToJSON..= paymentSourceSofort obj : "source_order" Data.Aeson.Types.ToJSON..= paymentSourceSourceOrder obj : "statement_descriptor" Data.Aeson.Types.ToJSON..= paymentSourceStatementDescriptor obj : "status" Data.Aeson.Types.ToJSON..= paymentSourceStatus obj : "three_d_secure" Data.Aeson.Types.ToJSON..= paymentSourceThreeDSecure obj : "tokenization_method" Data.Aeson.Types.ToJSON..= paymentSourceTokenizationMethod obj : "tos_acceptance" Data.Aeson.Types.ToJSON..= paymentSourceTosAcceptance obj : "transactions" Data.Aeson.Types.ToJSON..= paymentSourceTransactions obj : "type" Data.Aeson.Types.ToJSON..= paymentSourceType obj : "uncaptured_funds" Data.Aeson.Types.ToJSON..= paymentSourceUncapturedFunds obj : "usage" Data.Aeson.Types.ToJSON..= paymentSourceUsage obj : "used" Data.Aeson.Types.ToJSON..= paymentSourceUsed obj : "used_for_payment" Data.Aeson.Types.ToJSON..= paymentSourceUsedForPayment obj : "username" Data.Aeson.Types.ToJSON..= paymentSourceUsername obj : "wechat" Data.Aeson.Types.ToJSON..= paymentSourceWechat obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "account" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account" Data.Aeson.Types.ToJSON..= paymentSourceAccount obj) GHC.Base.<> (("account_holder_name" Data.Aeson.Types.ToJSON..= paymentSourceAccountHolderName obj) GHC.Base.<> (("account_holder_type" Data.Aeson.Types.ToJSON..= paymentSourceAccountHolderType obj) GHC.Base.<> (("ach_credit_transfer" Data.Aeson.Types.ToJSON..= paymentSourceAchCreditTransfer obj) GHC.Base.<> (("ach_debit" Data.Aeson.Types.ToJSON..= paymentSourceAchDebit obj) GHC.Base.<> (("active" Data.Aeson.Types.ToJSON..= paymentSourceActive obj) GHC.Base.<> (("address_city" Data.Aeson.Types.ToJSON..= paymentSourceAddressCity obj) GHC.Base.<> (("address_country" Data.Aeson.Types.ToJSON..= paymentSourceAddressCountry obj) GHC.Base.<> (("address_line1" Data.Aeson.Types.ToJSON..= paymentSourceAddressLine1 obj) GHC.Base.<> (("address_line1_check" Data.Aeson.Types.ToJSON..= paymentSourceAddressLine1Check obj) GHC.Base.<> (("address_line2" Data.Aeson.Types.ToJSON..= paymentSourceAddressLine2 obj) GHC.Base.<> (("address_state" Data.Aeson.Types.ToJSON..= paymentSourceAddressState obj) GHC.Base.<> (("address_zip" Data.Aeson.Types.ToJSON..= paymentSourceAddressZip obj) GHC.Base.<> (("address_zip_check" Data.Aeson.Types.ToJSON..= paymentSourceAddressZipCheck obj) GHC.Base.<> (("alipay" Data.Aeson.Types.ToJSON..= paymentSourceAlipay obj) GHC.Base.<> (("amount" Data.Aeson.Types.ToJSON..= paymentSourceAmount obj) GHC.Base.<> (("amount_received" Data.Aeson.Types.ToJSON..= paymentSourceAmountReceived obj) GHC.Base.<> (("available_payout_methods" Data.Aeson.Types.ToJSON..= paymentSourceAvailablePayoutMethods obj) GHC.Base.<> (("bancontact" Data.Aeson.Types.ToJSON..= paymentSourceBancontact obj) GHC.Base.<> (("bank_name" Data.Aeson.Types.ToJSON..= paymentSourceBankName obj) GHC.Base.<> (("bitcoin_amount" Data.Aeson.Types.ToJSON..= paymentSourceBitcoinAmount obj) GHC.Base.<> (("bitcoin_amount_received" Data.Aeson.Types.ToJSON..= paymentSourceBitcoinAmountReceived obj) GHC.Base.<> (("bitcoin_uri" Data.Aeson.Types.ToJSON..= paymentSourceBitcoinUri obj) GHC.Base.<> (("brand" Data.Aeson.Types.ToJSON..= paymentSourceBrand obj) GHC.Base.<> (("business_profile" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile obj) GHC.Base.<> (("business_type" Data.Aeson.Types.ToJSON..= paymentSourceBusinessType obj) GHC.Base.<> (("capabilities" Data.Aeson.Types.ToJSON..= paymentSourceCapabilities obj) GHC.Base.<> (("card" Data.Aeson.Types.ToJSON..= paymentSourceCard obj) GHC.Base.<> (("card_present" Data.Aeson.Types.ToJSON..= paymentSourceCardPresent obj) GHC.Base.<> (("charges_enabled" Data.Aeson.Types.ToJSON..= paymentSourceChargesEnabled obj) GHC.Base.<> (("client_secret" Data.Aeson.Types.ToJSON..= paymentSourceClientSecret obj) GHC.Base.<> (("code_verification" Data.Aeson.Types.ToJSON..= paymentSourceCodeVerification obj) GHC.Base.<> (("company" Data.Aeson.Types.ToJSON..= paymentSourceCompany obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= paymentSourceCountry obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= paymentSourceCreated obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= paymentSourceCurrency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= paymentSourceCustomer obj) GHC.Base.<> (("cvc_check" Data.Aeson.Types.ToJSON..= paymentSourceCvcCheck obj) GHC.Base.<> (("default_currency" Data.Aeson.Types.ToJSON..= paymentSourceDefaultCurrency obj) GHC.Base.<> (("default_for_currency" Data.Aeson.Types.ToJSON..= paymentSourceDefaultForCurrency obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= paymentSourceDescription obj) GHC.Base.<> (("details_submitted" Data.Aeson.Types.ToJSON..= paymentSourceDetailsSubmitted obj) GHC.Base.<> (("dynamic_last4" Data.Aeson.Types.ToJSON..= paymentSourceDynamicLast4 obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= paymentSourceEmail obj) GHC.Base.<> (("eps" Data.Aeson.Types.ToJSON..= paymentSourceEps obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= paymentSourceExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= paymentSourceExpYear obj) GHC.Base.<> (("external_accounts" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts obj) GHC.Base.<> (("filled" Data.Aeson.Types.ToJSON..= paymentSourceFilled obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= paymentSourceFingerprint obj) GHC.Base.<> (("flow" Data.Aeson.Types.ToJSON..= paymentSourceFlow obj) GHC.Base.<> (("funding" Data.Aeson.Types.ToJSON..= paymentSourceFunding obj) GHC.Base.<> (("giropay" Data.Aeson.Types.ToJSON..= paymentSourceGiropay obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= paymentSourceId obj) GHC.Base.<> (("ideal" Data.Aeson.Types.ToJSON..= paymentSourceIdeal obj) GHC.Base.<> (("inbound_address" Data.Aeson.Types.ToJSON..= paymentSourceInboundAddress obj) GHC.Base.<> (("individual" Data.Aeson.Types.ToJSON..= paymentSourceIndividual obj) GHC.Base.<> (("klarna" Data.Aeson.Types.ToJSON..= paymentSourceKlarna obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= paymentSourceLast4 obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= paymentSourceLivemode obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= paymentSourceMetadata obj) GHC.Base.<> (("multibanco" Data.Aeson.Types.ToJSON..= paymentSourceMultibanco obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= paymentSourceName obj) GHC.Base.<> (("owner" Data.Aeson.Types.ToJSON..= paymentSourceOwner obj) GHC.Base.<> (("p24" Data.Aeson.Types.ToJSON..= paymentSourceP24 obj) GHC.Base.<> (("payment" Data.Aeson.Types.ToJSON..= paymentSourcePayment obj) GHC.Base.<> (("payment_amount" Data.Aeson.Types.ToJSON..= paymentSourcePaymentAmount obj) GHC.Base.<> (("payment_currency" Data.Aeson.Types.ToJSON..= paymentSourcePaymentCurrency obj) GHC.Base.<> (("payouts_enabled" Data.Aeson.Types.ToJSON..= paymentSourcePayoutsEnabled obj) GHC.Base.<> (("receiver" Data.Aeson.Types.ToJSON..= paymentSourceReceiver obj) GHC.Base.<> (("recipient" Data.Aeson.Types.ToJSON..= paymentSourceRecipient obj) GHC.Base.<> (("redirect" Data.Aeson.Types.ToJSON..= paymentSourceRedirect obj) GHC.Base.<> (("refund_address" Data.Aeson.Types.ToJSON..= paymentSourceRefundAddress obj) GHC.Base.<> (("requirements" Data.Aeson.Types.ToJSON..= paymentSourceRequirements obj) GHC.Base.<> (("reusable" Data.Aeson.Types.ToJSON..= paymentSourceReusable obj) GHC.Base.<> (("routing_number" Data.Aeson.Types.ToJSON..= paymentSourceRoutingNumber obj) GHC.Base.<> (("sepa_debit" Data.Aeson.Types.ToJSON..= paymentSourceSepaDebit obj) GHC.Base.<> (("settings" Data.Aeson.Types.ToJSON..= paymentSourceSettings obj) GHC.Base.<> (("sofort" Data.Aeson.Types.ToJSON..= paymentSourceSofort obj) GHC.Base.<> (("source_order" Data.Aeson.Types.ToJSON..= paymentSourceSourceOrder obj) GHC.Base.<> (("statement_descriptor" Data.Aeson.Types.ToJSON..= paymentSourceStatementDescriptor obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= paymentSourceStatus obj) GHC.Base.<> (("three_d_secure" Data.Aeson.Types.ToJSON..= paymentSourceThreeDSecure obj) GHC.Base.<> (("tokenization_method" Data.Aeson.Types.ToJSON..= paymentSourceTokenizationMethod obj) GHC.Base.<> (("tos_acceptance" Data.Aeson.Types.ToJSON..= paymentSourceTosAcceptance obj) GHC.Base.<> (("transactions" Data.Aeson.Types.ToJSON..= paymentSourceTransactions obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= paymentSourceType obj) GHC.Base.<> (("uncaptured_funds" Data.Aeson.Types.ToJSON..= paymentSourceUncapturedFunds obj) GHC.Base.<> (("usage" Data.Aeson.Types.ToJSON..= paymentSourceUsage obj) GHC.Base.<> (("used" Data.Aeson.Types.ToJSON..= paymentSourceUsed obj) GHC.Base.<> (("used_for_payment" Data.Aeson.Types.ToJSON..= paymentSourceUsedForPayment obj) GHC.Base.<> (("username" Data.Aeson.Types.ToJSON..= paymentSourceUsername obj) GHC.Base.<> (("wechat" Data.Aeson.Types.ToJSON..= paymentSourceWechat obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "account"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSource where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSource" (\obj -> ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((GHC.Base.pure PaymentSource GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_credit_transfer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ach_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "alipay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bancontact")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_amount_received")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bitcoin_uri")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_profile")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "business_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "capabilities")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_present")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charges_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "client_secret")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "code_verification")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "company")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "details_submitted")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eps")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "external_accounts")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "flow")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "giropay")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ideal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "inbound_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "individual")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "klarna")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "multibanco")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "owner")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "p24")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts_enabled")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "receiver")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "redirect")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "refund_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "requirements")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "reusable")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sepa_debit")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "settings")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "sofort")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "source_order")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "statement_descriptor")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "three_d_secure")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tos_acceptance")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transactions")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "uncaptured_funds")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "used_for_payment")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "username")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "wechat"))

-- | Create a new 'PaymentSource' with all required fields.
mkPaymentSource :: PaymentSource
mkPaymentSource =
  PaymentSource
    { paymentSourceAccount = GHC.Maybe.Nothing,
      paymentSourceAccountHolderName = GHC.Maybe.Nothing,
      paymentSourceAccountHolderType = GHC.Maybe.Nothing,
      paymentSourceAchCreditTransfer = GHC.Maybe.Nothing,
      paymentSourceAchDebit = GHC.Maybe.Nothing,
      paymentSourceActive = GHC.Maybe.Nothing,
      paymentSourceAddressCity = GHC.Maybe.Nothing,
      paymentSourceAddressCountry = GHC.Maybe.Nothing,
      paymentSourceAddressLine1 = GHC.Maybe.Nothing,
      paymentSourceAddressLine1Check = GHC.Maybe.Nothing,
      paymentSourceAddressLine2 = GHC.Maybe.Nothing,
      paymentSourceAddressState = GHC.Maybe.Nothing,
      paymentSourceAddressZip = GHC.Maybe.Nothing,
      paymentSourceAddressZipCheck = GHC.Maybe.Nothing,
      paymentSourceAlipay = GHC.Maybe.Nothing,
      paymentSourceAmount = GHC.Maybe.Nothing,
      paymentSourceAmountReceived = GHC.Maybe.Nothing,
      paymentSourceAvailablePayoutMethods = GHC.Maybe.Nothing,
      paymentSourceBancontact = GHC.Maybe.Nothing,
      paymentSourceBankName = GHC.Maybe.Nothing,
      paymentSourceBitcoinAmount = GHC.Maybe.Nothing,
      paymentSourceBitcoinAmountReceived = GHC.Maybe.Nothing,
      paymentSourceBitcoinUri = GHC.Maybe.Nothing,
      paymentSourceBrand = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile = GHC.Maybe.Nothing,
      paymentSourceBusinessType = GHC.Maybe.Nothing,
      paymentSourceCapabilities = GHC.Maybe.Nothing,
      paymentSourceCard = GHC.Maybe.Nothing,
      paymentSourceCardPresent = GHC.Maybe.Nothing,
      paymentSourceChargesEnabled = GHC.Maybe.Nothing,
      paymentSourceClientSecret = GHC.Maybe.Nothing,
      paymentSourceCodeVerification = GHC.Maybe.Nothing,
      paymentSourceCompany = GHC.Maybe.Nothing,
      paymentSourceCountry = GHC.Maybe.Nothing,
      paymentSourceCreated = GHC.Maybe.Nothing,
      paymentSourceCurrency = GHC.Maybe.Nothing,
      paymentSourceCustomer = GHC.Maybe.Nothing,
      paymentSourceCvcCheck = GHC.Maybe.Nothing,
      paymentSourceDefaultCurrency = GHC.Maybe.Nothing,
      paymentSourceDefaultForCurrency = GHC.Maybe.Nothing,
      paymentSourceDescription = GHC.Maybe.Nothing,
      paymentSourceDetailsSubmitted = GHC.Maybe.Nothing,
      paymentSourceDynamicLast4 = GHC.Maybe.Nothing,
      paymentSourceEmail = GHC.Maybe.Nothing,
      paymentSourceEps = GHC.Maybe.Nothing,
      paymentSourceExpMonth = GHC.Maybe.Nothing,
      paymentSourceExpYear = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts = GHC.Maybe.Nothing,
      paymentSourceFilled = GHC.Maybe.Nothing,
      paymentSourceFingerprint = GHC.Maybe.Nothing,
      paymentSourceFlow = GHC.Maybe.Nothing,
      paymentSourceFunding = GHC.Maybe.Nothing,
      paymentSourceGiropay = GHC.Maybe.Nothing,
      paymentSourceId = GHC.Maybe.Nothing,
      paymentSourceIdeal = GHC.Maybe.Nothing,
      paymentSourceInboundAddress = GHC.Maybe.Nothing,
      paymentSourceIndividual = GHC.Maybe.Nothing,
      paymentSourceKlarna = GHC.Maybe.Nothing,
      paymentSourceLast4 = GHC.Maybe.Nothing,
      paymentSourceLivemode = GHC.Maybe.Nothing,
      paymentSourceMetadata = GHC.Maybe.Nothing,
      paymentSourceMultibanco = GHC.Maybe.Nothing,
      paymentSourceName = GHC.Maybe.Nothing,
      paymentSourceOwner = GHC.Maybe.Nothing,
      paymentSourceP24 = GHC.Maybe.Nothing,
      paymentSourcePayment = GHC.Maybe.Nothing,
      paymentSourcePaymentAmount = GHC.Maybe.Nothing,
      paymentSourcePaymentCurrency = GHC.Maybe.Nothing,
      paymentSourcePayoutsEnabled = GHC.Maybe.Nothing,
      paymentSourceReceiver = GHC.Maybe.Nothing,
      paymentSourceRecipient = GHC.Maybe.Nothing,
      paymentSourceRedirect = GHC.Maybe.Nothing,
      paymentSourceRefundAddress = GHC.Maybe.Nothing,
      paymentSourceRequirements = GHC.Maybe.Nothing,
      paymentSourceReusable = GHC.Maybe.Nothing,
      paymentSourceRoutingNumber = GHC.Maybe.Nothing,
      paymentSourceSepaDebit = GHC.Maybe.Nothing,
      paymentSourceSettings = GHC.Maybe.Nothing,
      paymentSourceSofort = GHC.Maybe.Nothing,
      paymentSourceSourceOrder = GHC.Maybe.Nothing,
      paymentSourceStatementDescriptor = GHC.Maybe.Nothing,
      paymentSourceStatus = GHC.Maybe.Nothing,
      paymentSourceThreeDSecure = GHC.Maybe.Nothing,
      paymentSourceTokenizationMethod = GHC.Maybe.Nothing,
      paymentSourceTosAcceptance = GHC.Maybe.Nothing,
      paymentSourceTransactions = GHC.Maybe.Nothing,
      paymentSourceType = GHC.Maybe.Nothing,
      paymentSourceUncapturedFunds = GHC.Maybe.Nothing,
      paymentSourceUsage = GHC.Maybe.Nothing,
      paymentSourceUsed = GHC.Maybe.Nothing,
      paymentSourceUsedForPayment = GHC.Maybe.Nothing,
      paymentSourceUsername = GHC.Maybe.Nothing,
      paymentSourceWechat = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.payment_source.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data PaymentSourceAccount'Variants
  = PaymentSourceAccount'Account Account
  | PaymentSourceAccount'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceAccount'Variants where
  toJSON (PaymentSourceAccount'Account a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentSourceAccount'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceAccount'Variants where
  parseJSON val = case (PaymentSourceAccount'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentSourceAccount'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.payment_source.anyOf.properties.available_payout_methods.items@ in the specification.
data PaymentSourceAvailablePayoutMethods'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentSourceAvailablePayoutMethods'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentSourceAvailablePayoutMethods'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    PaymentSourceAvailablePayoutMethods'EnumInstant
  | -- | Represents the JSON value @"standard"@
    PaymentSourceAvailablePayoutMethods'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceAvailablePayoutMethods' where
  toJSON (PaymentSourceAvailablePayoutMethods'Other val) = val
  toJSON (PaymentSourceAvailablePayoutMethods'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentSourceAvailablePayoutMethods'EnumInstant) = "instant"
  toJSON (PaymentSourceAvailablePayoutMethods'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceAvailablePayoutMethods' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "instant" -> PaymentSourceAvailablePayoutMethods'EnumInstant
            | val GHC.Classes.== "standard" -> PaymentSourceAvailablePayoutMethods'EnumStandard
            | GHC.Base.otherwise -> PaymentSourceAvailablePayoutMethods'Other val
      )

-- | Defines the object schema located at @components.schemas.payment_source.anyOf.properties.business_profile.anyOf@ in the specification.
--
-- Business information about the account.
data PaymentSourceBusinessProfile'
  = PaymentSourceBusinessProfile'
      { -- | mcc: [The merchant category code for the account](https:\/\/stripe.com\/docs\/connect\/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'Mcc :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | name: The customer-facing business name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | product_description: Internal-only description of the product sold or service provided by the business. It\'s used by Stripe for risk and underwriting purposes.
        --
        -- Constraints:
        --
        -- * Maximum length of 40000
        paymentSourceBusinessProfile'ProductDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | support_address: A publicly available mailing address for sending support issues to.
        paymentSourceBusinessProfile'SupportAddress :: (GHC.Maybe.Maybe PaymentSourceBusinessProfile'SupportAddress'),
        -- | support_email: A publicly available email address for sending support issues to.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'SupportEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | support_phone: A publicly available phone number to call with support issues.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'SupportPhone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | support_url: A publicly available website for handling support issues.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'SupportUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | url: The business\'s publicly available website.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceBusinessProfile' where
  toJSON obj = Data.Aeson.Types.Internal.object ("mcc" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'Mcc obj : "name" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'Name obj : "product_description" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'ProductDescription obj : "support_address" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress obj : "support_email" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportEmail obj : "support_phone" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportPhone obj : "support_url" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportUrl obj : "url" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'Url obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("mcc" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'Mcc obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'Name obj) GHC.Base.<> (("product_description" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'ProductDescription obj) GHC.Base.<> (("support_address" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress obj) GHC.Base.<> (("support_email" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportEmail obj) GHC.Base.<> (("support_phone" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportPhone obj) GHC.Base.<> (("support_url" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportUrl obj) GHC.Base.<> ("url" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'Url obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceBusinessProfile' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceBusinessProfile'" (\obj -> (((((((GHC.Base.pure PaymentSourceBusinessProfile' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "mcc")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product_description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "support_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))

-- | Create a new 'PaymentSourceBusinessProfile'' with all required fields.
mkPaymentSourceBusinessProfile' :: PaymentSourceBusinessProfile'
mkPaymentSourceBusinessProfile' =
  PaymentSourceBusinessProfile'
    { paymentSourceBusinessProfile'Mcc = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'Name = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'ProductDescription = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'SupportAddress = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'SupportEmail = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'SupportPhone = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'SupportUrl = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'Url = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_source.anyOf.properties.business_profile.anyOf.properties.support_address.anyOf@ in the specification.
--
-- A publicly available mailing address for sending support issues to.
data PaymentSourceBusinessProfile'SupportAddress'
  = PaymentSourceBusinessProfile'SupportAddress'
      { -- | city: City, district, suburb, town, or village.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'SupportAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'SupportAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line1: Address line 1 (e.g., street, PO Box, or company name).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'SupportAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'SupportAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | postal_code: ZIP or postal code.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'SupportAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | state: State, county, province, or region.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceBusinessProfile'SupportAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceBusinessProfile'SupportAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'City obj : "country" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'Country obj : "line1" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'State obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= paymentSourceBusinessProfile'SupportAddress'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceBusinessProfile'SupportAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceBusinessProfile'SupportAddress'" (\obj -> (((((GHC.Base.pure PaymentSourceBusinessProfile'SupportAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'PaymentSourceBusinessProfile'SupportAddress'' with all required fields.
mkPaymentSourceBusinessProfile'SupportAddress' :: PaymentSourceBusinessProfile'SupportAddress'
mkPaymentSourceBusinessProfile'SupportAddress' =
  PaymentSourceBusinessProfile'SupportAddress'
    { paymentSourceBusinessProfile'SupportAddress'City = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'SupportAddress'Country = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'SupportAddress'Line1 = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'SupportAddress'Line2 = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'SupportAddress'PostalCode = GHC.Maybe.Nothing,
      paymentSourceBusinessProfile'SupportAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.payment_source.anyOf.properties.business_type@ in the specification.
--
-- The business type.
data PaymentSourceBusinessType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentSourceBusinessType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentSourceBusinessType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"company"@
    PaymentSourceBusinessType'EnumCompany
  | -- | Represents the JSON value @"government_entity"@
    PaymentSourceBusinessType'EnumGovernmentEntity
  | -- | Represents the JSON value @"individual"@
    PaymentSourceBusinessType'EnumIndividual
  | -- | Represents the JSON value @"non_profit"@
    PaymentSourceBusinessType'EnumNonProfit
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceBusinessType' where
  toJSON (PaymentSourceBusinessType'Other val) = val
  toJSON (PaymentSourceBusinessType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentSourceBusinessType'EnumCompany) = "company"
  toJSON (PaymentSourceBusinessType'EnumGovernmentEntity) = "government_entity"
  toJSON (PaymentSourceBusinessType'EnumIndividual) = "individual"
  toJSON (PaymentSourceBusinessType'EnumNonProfit) = "non_profit"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceBusinessType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "company" -> PaymentSourceBusinessType'EnumCompany
            | val GHC.Classes.== "government_entity" -> PaymentSourceBusinessType'EnumGovernmentEntity
            | val GHC.Classes.== "individual" -> PaymentSourceBusinessType'EnumIndividual
            | val GHC.Classes.== "non_profit" -> PaymentSourceBusinessType'EnumNonProfit
            | GHC.Base.otherwise -> PaymentSourceBusinessType'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.payment_source.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer associated with this Alipay Account.
data PaymentSourceCustomer'Variants
  = PaymentSourceCustomer'Customer Customer
  | PaymentSourceCustomer'DeletedCustomer DeletedCustomer
  | PaymentSourceCustomer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceCustomer'Variants where
  toJSON (PaymentSourceCustomer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentSourceCustomer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentSourceCustomer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceCustomer'Variants where
  parseJSON val = case (PaymentSourceCustomer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentSourceCustomer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentSourceCustomer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.payment_source.anyOf.properties.external_accounts@ in the specification.
--
-- External accounts (bank accounts and debit cards) currently attached to this account
data PaymentSourceExternalAccounts'
  = PaymentSourceExternalAccounts'
      { -- | data: The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
        paymentSourceExternalAccounts'Data :: ([PaymentSourceExternalAccounts'Data']),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        paymentSourceExternalAccounts'HasMore :: GHC.Types.Bool,
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceExternalAccounts' where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data obj : "has_more" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'HasMore obj : "url" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceExternalAccounts' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceExternalAccounts'" (\obj -> ((GHC.Base.pure PaymentSourceExternalAccounts' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'PaymentSourceExternalAccounts'' with all required fields.
mkPaymentSourceExternalAccounts' ::
  -- | 'paymentSourceExternalAccounts'Data'
  [PaymentSourceExternalAccounts'Data'] ->
  -- | 'paymentSourceExternalAccounts'HasMore'
  GHC.Types.Bool ->
  -- | 'paymentSourceExternalAccounts'Url'
  Data.Text.Internal.Text ->
  PaymentSourceExternalAccounts'
mkPaymentSourceExternalAccounts' paymentSourceExternalAccounts'Data paymentSourceExternalAccounts'HasMore paymentSourceExternalAccounts'Url =
  PaymentSourceExternalAccounts'
    { paymentSourceExternalAccounts'Data = paymentSourceExternalAccounts'Data,
      paymentSourceExternalAccounts'HasMore = paymentSourceExternalAccounts'HasMore,
      paymentSourceExternalAccounts'Url = paymentSourceExternalAccounts'Url
    }

-- | Defines the object schema located at @components.schemas.payment_source.anyOf.properties.external_accounts.properties.data.items.anyOf@ in the specification.
data PaymentSourceExternalAccounts'Data'
  = PaymentSourceExternalAccounts'Data'
      { -- | account: The ID of the account that the bank account is associated with.
        paymentSourceExternalAccounts'Data'Account :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'Data'Account'Variants),
        -- | account_holder_name: The name of the person or business that owns the bank account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AccountHolderName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | account_holder_type: The type of entity that holds the account. This can be either \`individual\` or \`company\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AccountHolderType :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_city: City\/District\/Suburb\/Town\/Village.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AddressCity :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_country: Billing address country, if provided when creating card.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AddressCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line1: Address line 1 (Street address\/PO Box\/Company name).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AddressLine1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line1_check: If \`address_line1\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AddressLine1Check :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_line2: Address line 2 (Apartment\/Suite\/Unit\/Building).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AddressLine2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_state: State\/County\/Province\/Region.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AddressState :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_zip: ZIP or postal code.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AddressZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | address_zip_check: If \`address_zip\` was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'AddressZipCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | available_payout_methods: A set of available payout methods for this card. Will be either \`[\"standard\"]\` or \`[\"standard\", \"instant\"]\`. Only values from this set should be passed as the \`method\` when creating a transfer.
        paymentSourceExternalAccounts'Data'AvailablePayoutMethods :: (GHC.Maybe.Maybe ([PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'])),
        -- | bank_name: Name of the bank associated with the routing number (e.g., \`WELLS FARGO\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'BankName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | brand: Card brand. Can be \`American Express\`, \`Diners Club\`, \`Discover\`, \`JCB\`, \`MasterCard\`, \`UnionPay\`, \`Visa\`, or \`Unknown\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'Brand :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter ISO code representing the country the bank account is located in.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | currency: Three-letter [ISO code for the currency](https:\/\/stripe.com\/docs\/payouts) paid out to the bank account.
        paymentSourceExternalAccounts'Data'Currency :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | customer: The ID of the customer that the bank account is associated with.
        paymentSourceExternalAccounts'Data'Customer :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'Data'Customer'Variants),
        -- | cvc_check: If a CVC was provided, results of the check: \`pass\`, \`fail\`, \`unavailable\`, or \`unchecked\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'CvcCheck :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | default_for_currency: Whether this bank account is the default external account for its currency.
        paymentSourceExternalAccounts'Data'DefaultForCurrency :: (GHC.Maybe.Maybe GHC.Types.Bool),
        -- | dynamic_last4: (For tokenized numbers only.) The last four digits of the device account number.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'DynamicLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | exp_month: Two-digit number representing the card\'s expiration month.
        paymentSourceExternalAccounts'Data'ExpMonth :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | exp_year: Four-digit number representing the card\'s expiration year.
        paymentSourceExternalAccounts'Data'ExpYear :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'Fingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | funding: Card funding type. Can be \`credit\`, \`debit\`, \`prepaid\`, or \`unknown\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'Funding :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | last4: The last four digits of the bank account number.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'Last4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        paymentSourceExternalAccounts'Data'Metadata :: (GHC.Maybe.Maybe Data.Aeson.Types.Internal.Object),
        -- | name: Cardholder name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | recipient: The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
        paymentSourceExternalAccounts'Data'Recipient :: (GHC.Maybe.Maybe PaymentSourceExternalAccounts'Data'Recipient'Variants),
        -- | routing_number: The routing transit number for the bank account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'RoutingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | status: For bank accounts, possible values are \`new\`, \`validated\`, \`verified\`, \`verification_failed\`, or \`errored\`. A bank account that hasn\'t had any activity or validation performed is \`new\`. If Stripe can determine that the bank account exists, its status will be \`validated\`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be \`verified\`. If the verification failed for any reason, such as microdeposit failure, the status will be \`verification_failed\`. If a transfer sent to this bank account fails, we\'ll set the status to \`errored\` and will not continue to send transfers until the bank details are updated.
        --
        -- For external accounts, possible values are \`new\` and \`errored\`. Validations aren\'t run against external accounts because they\'re only used for payouts. This means the other statuses don\'t apply. If a transfer fails, the status is set to \`errored\` and transfers are stopped until account details are updated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'Status :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | tokenization_method: If the card number is tokenized, this is the method that was used. Can be \`amex_express_checkout\`, \`android_pay\` (includes Google Pay), \`apple_pay\`, \`masterpass\`, \`visa_checkout\`, or null.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceExternalAccounts'Data'TokenizationMethod :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceExternalAccounts'Data' where
  toJSON obj = Data.Aeson.Types.Internal.object ("account" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Account obj : "account_holder_name" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AccountHolderName obj : "account_holder_type" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AccountHolderType obj : "address_city" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressCity obj : "address_country" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressCountry obj : "address_line1" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressLine1 obj : "address_line1_check" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressLine1Check obj : "address_line2" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressLine2 obj : "address_state" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressState obj : "address_zip" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressZip obj : "address_zip_check" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressZipCheck obj : "available_payout_methods" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AvailablePayoutMethods obj : "bank_name" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'BankName obj : "brand" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Brand obj : "country" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Country obj : "currency" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Currency obj : "customer" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Customer obj : "cvc_check" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'CvcCheck obj : "default_for_currency" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'DefaultForCurrency obj : "dynamic_last4" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'DynamicLast4 obj : "exp_month" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'ExpMonth obj : "exp_year" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'ExpYear obj : "fingerprint" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Fingerprint obj : "funding" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Funding obj : "id" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Id obj : "last4" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Last4 obj : "metadata" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Metadata obj : "name" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Name obj : "recipient" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Recipient obj : "routing_number" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'RoutingNumber obj : "status" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Status obj : "tokenization_method" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'TokenizationMethod obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("account" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Account obj) GHC.Base.<> (("account_holder_name" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AccountHolderName obj) GHC.Base.<> (("account_holder_type" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AccountHolderType obj) GHC.Base.<> (("address_city" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressCity obj) GHC.Base.<> (("address_country" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressCountry obj) GHC.Base.<> (("address_line1" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressLine1 obj) GHC.Base.<> (("address_line1_check" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressLine1Check obj) GHC.Base.<> (("address_line2" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressLine2 obj) GHC.Base.<> (("address_state" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressState obj) GHC.Base.<> (("address_zip" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressZip obj) GHC.Base.<> (("address_zip_check" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AddressZipCheck obj) GHC.Base.<> (("available_payout_methods" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'AvailablePayoutMethods obj) GHC.Base.<> (("bank_name" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'BankName obj) GHC.Base.<> (("brand" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Brand obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Country obj) GHC.Base.<> (("currency" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Currency obj) GHC.Base.<> (("customer" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Customer obj) GHC.Base.<> (("cvc_check" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'CvcCheck obj) GHC.Base.<> (("default_for_currency" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'DefaultForCurrency obj) GHC.Base.<> (("dynamic_last4" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'DynamicLast4 obj) GHC.Base.<> (("exp_month" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'ExpMonth obj) GHC.Base.<> (("exp_year" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'ExpYear obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Fingerprint obj) GHC.Base.<> (("funding" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Funding obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Id obj) GHC.Base.<> (("last4" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Last4 obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Metadata obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Name obj) GHC.Base.<> (("recipient" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Recipient obj) GHC.Base.<> (("routing_number" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'RoutingNumber obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'Status obj) GHC.Base.<> (("tokenization_method" Data.Aeson.Types.ToJSON..= paymentSourceExternalAccounts'Data'TokenizationMethod obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "bank_account")))))))))))))))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceExternalAccounts'Data' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceExternalAccounts'Data'" (\obj -> (((((((((((((((((((((((((((((((GHC.Base.pure PaymentSourceExternalAccounts'Data' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "account_holder_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line1_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_state")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address_zip_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "available_payout_methods")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "brand")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "cvc_check")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "default_for_currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dynamic_last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_month")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "exp_year")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "funding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "recipient")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "routing_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tokenization_method"))

-- | Create a new 'PaymentSourceExternalAccounts'Data'' with all required fields.
mkPaymentSourceExternalAccounts'Data' :: PaymentSourceExternalAccounts'Data'
mkPaymentSourceExternalAccounts'Data' =
  PaymentSourceExternalAccounts'Data'
    { paymentSourceExternalAccounts'Data'Account = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AccountHolderName = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AccountHolderType = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AddressCity = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AddressCountry = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AddressLine1 = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AddressLine1Check = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AddressLine2 = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AddressState = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AddressZip = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AddressZipCheck = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'AvailablePayoutMethods = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'BankName = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Brand = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Country = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Currency = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Customer = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'CvcCheck = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'DefaultForCurrency = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'DynamicLast4 = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'ExpMonth = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'ExpYear = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Fingerprint = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Funding = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Id = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Last4 = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Metadata = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Name = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Recipient = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'RoutingNumber = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'Status = GHC.Maybe.Nothing,
      paymentSourceExternalAccounts'Data'TokenizationMethod = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.payment_source.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.account.anyOf@ in the specification.
--
-- The ID of the account that the bank account is associated with.
data PaymentSourceExternalAccounts'Data'Account'Variants
  = PaymentSourceExternalAccounts'Data'Account'Account Account
  | PaymentSourceExternalAccounts'Data'Account'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceExternalAccounts'Data'Account'Variants where
  toJSON (PaymentSourceExternalAccounts'Data'Account'Account a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentSourceExternalAccounts'Data'Account'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceExternalAccounts'Data'Account'Variants where
  parseJSON val = case (PaymentSourceExternalAccounts'Data'Account'Account Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentSourceExternalAccounts'Data'Account'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema located at @components.schemas.payment_source.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.available_payout_methods.items@ in the specification.
data PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"instant"@
    PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumInstant
  | -- | Represents the JSON value @"standard"@
    PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceExternalAccounts'Data'AvailablePayoutMethods' where
  toJSON (PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'Other val) = val
  toJSON (PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumInstant) = "instant"
  toJSON (PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceExternalAccounts'Data'AvailablePayoutMethods' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "instant" -> PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumInstant
            | val GHC.Classes.== "standard" -> PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'EnumStandard
            | GHC.Base.otherwise -> PaymentSourceExternalAccounts'Data'AvailablePayoutMethods'Other val
      )

-- | Defines the oneOf schema located at @components.schemas.payment_source.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.customer.anyOf@ in the specification.
--
-- The ID of the customer that the bank account is associated with.
data PaymentSourceExternalAccounts'Data'Customer'Variants
  = PaymentSourceExternalAccounts'Data'Customer'Customer Customer
  | PaymentSourceExternalAccounts'Data'Customer'DeletedCustomer DeletedCustomer
  | PaymentSourceExternalAccounts'Data'Customer'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceExternalAccounts'Data'Customer'Variants where
  toJSON (PaymentSourceExternalAccounts'Data'Customer'Customer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentSourceExternalAccounts'Data'Customer'DeletedCustomer a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentSourceExternalAccounts'Data'Customer'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceExternalAccounts'Data'Customer'Variants where
  parseJSON val = case (PaymentSourceExternalAccounts'Data'Customer'Customer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentSourceExternalAccounts'Data'Customer'DeletedCustomer Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentSourceExternalAccounts'Data'Customer'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched")) of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.payment_source.anyOf.properties.external_accounts.properties.data.items.anyOf.properties.recipient.anyOf@ in the specification.
--
-- The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
data PaymentSourceExternalAccounts'Data'Recipient'Variants
  = PaymentSourceExternalAccounts'Data'Recipient'Recipient Recipient
  | PaymentSourceExternalAccounts'Data'Recipient'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceExternalAccounts'Data'Recipient'Variants where
  toJSON (PaymentSourceExternalAccounts'Data'Recipient'Recipient a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentSourceExternalAccounts'Data'Recipient'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceExternalAccounts'Data'Recipient'Variants where
  parseJSON val = case (PaymentSourceExternalAccounts'Data'Recipient'Recipient Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentSourceExternalAccounts'Data'Recipient'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.payment_source.anyOf.properties.owner.anyOf@ in the specification.
--
-- Information about the owner of the payment instrument that may be used or required by particular source types.
data PaymentSourceOwner'
  = PaymentSourceOwner'
      { -- | address: Owner\'s address.
        paymentSourceOwner'Address :: (GHC.Maybe.Maybe PaymentSourceOwner'Address'),
        -- | email: Owner\'s email address.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'Email :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | name: Owner\'s full name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'Name :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | phone: Owner\'s phone number (including extension).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'Phone :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | verified_address: Verified owner\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
        paymentSourceOwner'VerifiedAddress :: (GHC.Maybe.Maybe PaymentSourceOwner'VerifiedAddress'),
        -- | verified_email: Verified owner\'s email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'VerifiedEmail :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | verified_name: Verified owner\'s full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'VerifiedName :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | verified_phone: Verified owner\'s phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'VerifiedPhone :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceOwner' where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address obj : "email" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Email obj : "name" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Name obj : "phone" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Phone obj : "verified_address" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress obj : "verified_email" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedEmail obj : "verified_name" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedName obj : "verified_phone" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedPhone obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address obj) GHC.Base.<> (("email" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Email obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Name obj) GHC.Base.<> (("phone" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Phone obj) GHC.Base.<> (("verified_address" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress obj) GHC.Base.<> (("verified_email" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedEmail obj) GHC.Base.<> (("verified_name" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedName obj) GHC.Base.<> ("verified_phone" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedPhone obj))))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceOwner' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceOwner'" (\obj -> (((((((GHC.Base.pure PaymentSourceOwner' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "phone")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_email")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "verified_phone"))

-- | Create a new 'PaymentSourceOwner'' with all required fields.
mkPaymentSourceOwner' :: PaymentSourceOwner'
mkPaymentSourceOwner' =
  PaymentSourceOwner'
    { paymentSourceOwner'Address = GHC.Maybe.Nothing,
      paymentSourceOwner'Email = GHC.Maybe.Nothing,
      paymentSourceOwner'Name = GHC.Maybe.Nothing,
      paymentSourceOwner'Phone = GHC.Maybe.Nothing,
      paymentSourceOwner'VerifiedAddress = GHC.Maybe.Nothing,
      paymentSourceOwner'VerifiedEmail = GHC.Maybe.Nothing,
      paymentSourceOwner'VerifiedName = GHC.Maybe.Nothing,
      paymentSourceOwner'VerifiedPhone = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_source.anyOf.properties.owner.anyOf.properties.address.anyOf@ in the specification.
--
-- Owner\\\'s address.
data PaymentSourceOwner'Address'
  = PaymentSourceOwner'Address'
      { -- | city: City, district, suburb, town, or village.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'Address'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'Address'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line1: Address line 1 (e.g., street, PO Box, or company name).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'Address'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'Address'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | postal_code: ZIP or postal code.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'Address'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | state: State, county, province, or region.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'Address'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceOwner'Address' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'City obj : "country" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'Country obj : "line1" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'State obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= paymentSourceOwner'Address'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceOwner'Address' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceOwner'Address'" (\obj -> (((((GHC.Base.pure PaymentSourceOwner'Address' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'PaymentSourceOwner'Address'' with all required fields.
mkPaymentSourceOwner'Address' :: PaymentSourceOwner'Address'
mkPaymentSourceOwner'Address' =
  PaymentSourceOwner'Address'
    { paymentSourceOwner'Address'City = GHC.Maybe.Nothing,
      paymentSourceOwner'Address'Country = GHC.Maybe.Nothing,
      paymentSourceOwner'Address'Line1 = GHC.Maybe.Nothing,
      paymentSourceOwner'Address'Line2 = GHC.Maybe.Nothing,
      paymentSourceOwner'Address'PostalCode = GHC.Maybe.Nothing,
      paymentSourceOwner'Address'State = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_source.anyOf.properties.owner.anyOf.properties.verified_address.anyOf@ in the specification.
--
-- Verified owner\\\'s address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
data PaymentSourceOwner'VerifiedAddress'
  = PaymentSourceOwner'VerifiedAddress'
      { -- | city: City, district, suburb, town, or village.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'VerifiedAddress'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter country code ([ISO 3166-1 alpha-2](https:\/\/en.wikipedia.org\/wiki\/ISO_3166-1_alpha-2)).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'VerifiedAddress'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line1: Address line 1 (e.g., street, PO Box, or company name).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'VerifiedAddress'Line1 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | line2: Address line 2 (e.g., apartment, suite, unit, or building).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'VerifiedAddress'Line2 :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | postal_code: ZIP or postal code.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'VerifiedAddress'PostalCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | state: State, county, province, or region.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceOwner'VerifiedAddress'State :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceOwner'VerifiedAddress' where
  toJSON obj = Data.Aeson.Types.Internal.object ("city" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'City obj : "country" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'Country obj : "line1" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'Line1 obj : "line2" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'Line2 obj : "postal_code" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'PostalCode obj : "state" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'State obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("city" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'City obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'Country obj) GHC.Base.<> (("line1" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'Line1 obj) GHC.Base.<> (("line2" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'Line2 obj) GHC.Base.<> (("postal_code" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'PostalCode obj) GHC.Base.<> ("state" Data.Aeson.Types.ToJSON..= paymentSourceOwner'VerifiedAddress'State obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceOwner'VerifiedAddress' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceOwner'VerifiedAddress'" (\obj -> (((((GHC.Base.pure PaymentSourceOwner'VerifiedAddress' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line1")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "line2")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "postal_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "state"))

-- | Create a new 'PaymentSourceOwner'VerifiedAddress'' with all required fields.
mkPaymentSourceOwner'VerifiedAddress' :: PaymentSourceOwner'VerifiedAddress'
mkPaymentSourceOwner'VerifiedAddress' =
  PaymentSourceOwner'VerifiedAddress'
    { paymentSourceOwner'VerifiedAddress'City = GHC.Maybe.Nothing,
      paymentSourceOwner'VerifiedAddress'Country = GHC.Maybe.Nothing,
      paymentSourceOwner'VerifiedAddress'Line1 = GHC.Maybe.Nothing,
      paymentSourceOwner'VerifiedAddress'Line2 = GHC.Maybe.Nothing,
      paymentSourceOwner'VerifiedAddress'PostalCode = GHC.Maybe.Nothing,
      paymentSourceOwner'VerifiedAddress'State = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.payment_source.anyOf.properties.recipient.anyOf@ in the specification.
--
-- The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead.
data PaymentSourceRecipient'Variants
  = PaymentSourceRecipient'Recipient Recipient
  | PaymentSourceRecipient'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceRecipient'Variants where
  toJSON (PaymentSourceRecipient'Recipient a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentSourceRecipient'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceRecipient'Variants where
  parseJSON val = case (PaymentSourceRecipient'Recipient Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentSourceRecipient'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the object schema located at @components.schemas.payment_source.anyOf.properties.settings.anyOf@ in the specification.
--
-- Options for customizing how the account functions within Stripe.
data PaymentSourceSettings'
  = PaymentSourceSettings'
      { -- | branding:
        paymentSourceSettings'Branding :: (GHC.Maybe.Maybe AccountBrandingSettings),
        -- | card_payments:
        paymentSourceSettings'CardPayments :: (GHC.Maybe.Maybe AccountCardPaymentsSettings),
        -- | dashboard:
        paymentSourceSettings'Dashboard :: (GHC.Maybe.Maybe AccountDashboardSettings),
        -- | payments:
        paymentSourceSettings'Payments :: (GHC.Maybe.Maybe AccountPaymentsSettings),
        -- | payouts:
        paymentSourceSettings'Payouts :: (GHC.Maybe.Maybe AccountPayoutSettings)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceSettings' where
  toJSON obj = Data.Aeson.Types.Internal.object ("branding" Data.Aeson.Types.ToJSON..= paymentSourceSettings'Branding obj : "card_payments" Data.Aeson.Types.ToJSON..= paymentSourceSettings'CardPayments obj : "dashboard" Data.Aeson.Types.ToJSON..= paymentSourceSettings'Dashboard obj : "payments" Data.Aeson.Types.ToJSON..= paymentSourceSettings'Payments obj : "payouts" Data.Aeson.Types.ToJSON..= paymentSourceSettings'Payouts obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("branding" Data.Aeson.Types.ToJSON..= paymentSourceSettings'Branding obj) GHC.Base.<> (("card_payments" Data.Aeson.Types.ToJSON..= paymentSourceSettings'CardPayments obj) GHC.Base.<> (("dashboard" Data.Aeson.Types.ToJSON..= paymentSourceSettings'Dashboard obj) GHC.Base.<> (("payments" Data.Aeson.Types.ToJSON..= paymentSourceSettings'Payments obj) GHC.Base.<> ("payouts" Data.Aeson.Types.ToJSON..= paymentSourceSettings'Payouts obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceSettings' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceSettings'" (\obj -> ((((GHC.Base.pure PaymentSourceSettings' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "branding")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "card_payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "dashboard")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payments")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payouts"))

-- | Create a new 'PaymentSourceSettings'' with all required fields.
mkPaymentSourceSettings' :: PaymentSourceSettings'
mkPaymentSourceSettings' =
  PaymentSourceSettings'
    { paymentSourceSettings'Branding = GHC.Maybe.Nothing,
      paymentSourceSettings'CardPayments = GHC.Maybe.Nothing,
      paymentSourceSettings'Dashboard = GHC.Maybe.Nothing,
      paymentSourceSettings'Payments = GHC.Maybe.Nothing,
      paymentSourceSettings'Payouts = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_source.anyOf.properties.transactions@ in the specification.
--
-- A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
data PaymentSourceTransactions'
  = PaymentSourceTransactions'
      { -- | data: Details about each object.
        paymentSourceTransactions'Data :: ([BitcoinTransaction]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        paymentSourceTransactions'HasMore :: GHC.Types.Bool,
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentSourceTransactions'Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceTransactions' where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= paymentSourceTransactions'Data obj : "has_more" Data.Aeson.Types.ToJSON..= paymentSourceTransactions'HasMore obj : "url" Data.Aeson.Types.ToJSON..= paymentSourceTransactions'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= paymentSourceTransactions'Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= paymentSourceTransactions'HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= paymentSourceTransactions'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceTransactions' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentSourceTransactions'" (\obj -> ((GHC.Base.pure PaymentSourceTransactions' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'PaymentSourceTransactions'' with all required fields.
mkPaymentSourceTransactions' ::
  -- | 'paymentSourceTransactions'Data'
  [BitcoinTransaction] ->
  -- | 'paymentSourceTransactions'HasMore'
  GHC.Types.Bool ->
  -- | 'paymentSourceTransactions'Url'
  Data.Text.Internal.Text ->
  PaymentSourceTransactions'
mkPaymentSourceTransactions' paymentSourceTransactions'Data paymentSourceTransactions'HasMore paymentSourceTransactions'Url =
  PaymentSourceTransactions'
    { paymentSourceTransactions'Data = paymentSourceTransactions'Data,
      paymentSourceTransactions'HasMore = paymentSourceTransactions'HasMore,
      paymentSourceTransactions'Url = paymentSourceTransactions'Url
    }

-- | Defines the enum schema located at @components.schemas.payment_source.anyOf.properties.type@ in the specification.
--
-- The Stripe account type. Can be \`standard\`, \`express\`, or \`custom\`.
data PaymentSourceType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    PaymentSourceType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    PaymentSourceType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"custom"@
    PaymentSourceType'EnumCustom
  | -- | Represents the JSON value @"express"@
    PaymentSourceType'EnumExpress
  | -- | Represents the JSON value @"standard"@
    PaymentSourceType'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentSourceType' where
  toJSON (PaymentSourceType'Other val) = val
  toJSON (PaymentSourceType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (PaymentSourceType'EnumCustom) = "custom"
  toJSON (PaymentSourceType'EnumExpress) = "express"
  toJSON (PaymentSourceType'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON PaymentSourceType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "custom" -> PaymentSourceType'EnumCustom
            | val GHC.Classes.== "express" -> PaymentSourceType'EnumExpress
            | val GHC.Classes.== "standard" -> PaymentSourceType'EnumStandard
            | GHC.Base.otherwise -> PaymentSourceType'Other val
      )
