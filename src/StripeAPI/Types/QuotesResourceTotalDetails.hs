{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema QuotesResourceTotalDetails
module StripeAPI.Types.QuotesResourceTotalDetails where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceTotalDetailsResourceBreakdown
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.quotes_resource_total_details@ in the specification.
data QuotesResourceTotalDetails = QuotesResourceTotalDetails
  { -- | amount_discount: This is the sum of all the discounts.
    quotesResourceTotalDetailsAmountDiscount :: GHC.Types.Int,
    -- | amount_shipping: This is the sum of all the shipping amounts.
    quotesResourceTotalDetailsAmountShipping :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | amount_tax: This is the sum of all the tax amounts.
    quotesResourceTotalDetailsAmountTax :: GHC.Types.Int,
    -- | breakdown:
    quotesResourceTotalDetailsBreakdown :: (GHC.Maybe.Maybe QuotesResourceTotalDetailsResourceBreakdown)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON QuotesResourceTotalDetails where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount_discount" Data.Aeson.Types.ToJSON..= quotesResourceTotalDetailsAmountDiscount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_shipping" Data.Aeson.Types.ToJSON..=)) (quotesResourceTotalDetailsAmountShipping obj) : ["amount_tax" Data.Aeson.Types.ToJSON..= quotesResourceTotalDetailsAmountTax obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("breakdown" Data.Aeson.Types.ToJSON..=)) (quotesResourceTotalDetailsBreakdown obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount_discount" Data.Aeson.Types.ToJSON..= quotesResourceTotalDetailsAmountDiscount obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_shipping" Data.Aeson.Types.ToJSON..=)) (quotesResourceTotalDetailsAmountShipping obj) : ["amount_tax" Data.Aeson.Types.ToJSON..= quotesResourceTotalDetailsAmountTax obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("breakdown" Data.Aeson.Types.ToJSON..=)) (quotesResourceTotalDetailsBreakdown obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON QuotesResourceTotalDetails where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "QuotesResourceTotalDetails" (\obj -> (((GHC.Base.pure QuotesResourceTotalDetails GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_discount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_shipping")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "breakdown"))

-- | Create a new 'QuotesResourceTotalDetails' with all required fields.
mkQuotesResourceTotalDetails ::
  -- | 'quotesResourceTotalDetailsAmountDiscount'
  GHC.Types.Int ->
  -- | 'quotesResourceTotalDetailsAmountTax'
  GHC.Types.Int ->
  QuotesResourceTotalDetails
mkQuotesResourceTotalDetails quotesResourceTotalDetailsAmountDiscount quotesResourceTotalDetailsAmountTax =
  QuotesResourceTotalDetails
    { quotesResourceTotalDetailsAmountDiscount = quotesResourceTotalDetailsAmountDiscount,
      quotesResourceTotalDetailsAmountShipping = GHC.Maybe.Nothing,
      quotesResourceTotalDetailsAmountTax = quotesResourceTotalDetailsAmountTax,
      quotesResourceTotalDetailsBreakdown = GHC.Maybe.Nothing
    }
