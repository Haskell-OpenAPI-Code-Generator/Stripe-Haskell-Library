{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema SetupAttemptPaymentMethodDetailsCardPresent
module StripeAPI.Types.SetupAttemptPaymentMethodDetailsCardPresent where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentMethod
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.setup_attempt_payment_method_details_card_present@ in the specification.
data SetupAttemptPaymentMethodDetailsCardPresent = SetupAttemptPaymentMethodDetailsCardPresent
  { -- | generated_card: The ID of the Card PaymentMethod which was generated by this SetupAttempt.
    setupAttemptPaymentMethodDetailsCardPresentGeneratedCard :: (GHC.Maybe.Maybe SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON SetupAttemptPaymentMethodDetailsCardPresent where
  toJSON obj = Data.Aeson.Types.Internal.object ("generated_card" Data.Aeson.Types.ToJSON..= setupAttemptPaymentMethodDetailsCardPresentGeneratedCard obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs ("generated_card" Data.Aeson.Types.ToJSON..= setupAttemptPaymentMethodDetailsCardPresentGeneratedCard obj)

instance Data.Aeson.Types.FromJSON.FromJSON SetupAttemptPaymentMethodDetailsCardPresent where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "SetupAttemptPaymentMethodDetailsCardPresent" (\obj -> GHC.Base.pure SetupAttemptPaymentMethodDetailsCardPresent GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "generated_card"))

-- | Create a new 'SetupAttemptPaymentMethodDetailsCardPresent' with all required fields.
mkSetupAttemptPaymentMethodDetailsCardPresent :: SetupAttemptPaymentMethodDetailsCardPresent
mkSetupAttemptPaymentMethodDetailsCardPresent = SetupAttemptPaymentMethodDetailsCardPresent {setupAttemptPaymentMethodDetailsCardPresentGeneratedCard = GHC.Maybe.Nothing}

-- | Defines the oneOf schema located at @components.schemas.setup_attempt_payment_method_details_card_present.properties.generated_card.anyOf@ in the specification.
--
-- The ID of the Card PaymentMethod which was generated by this SetupAttempt.
data SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'Variants
  = SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'Text Data.Text.Internal.Text
  | SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'PaymentMethod PaymentMethod
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'Variants where
  toJSON (SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'PaymentMethod a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'Variants where
  parseJSON val = case (SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((SetupAttemptPaymentMethodDetailsCardPresentGeneratedCard'PaymentMethod Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
