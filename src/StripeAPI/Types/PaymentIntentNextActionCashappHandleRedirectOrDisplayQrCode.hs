{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
module StripeAPI.Types.PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.PaymentIntentNextActionCashappQrCode
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code@ in the specification.
data PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode = PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
  { -- | hosted_instructions_url: The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeHostedInstructionsUrl :: Data.Text.Internal.Text,
    -- | mobile_auth_url: The url for mobile redirect based auth
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeMobileAuthUrl :: Data.Text.Internal.Text,
    -- | qr_code:
    paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeQrCode :: PaymentIntentNextActionCashappQrCode
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["hosted_instructions_url" Data.Aeson.Types.ToJSON..= paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeHostedInstructionsUrl obj] : ["mobile_auth_url" Data.Aeson.Types.ToJSON..= paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeMobileAuthUrl obj] : ["qr_code" Data.Aeson.Types.ToJSON..= paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeQrCode obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["hosted_instructions_url" Data.Aeson.Types.ToJSON..= paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeHostedInstructionsUrl obj] : ["mobile_auth_url" Data.Aeson.Types.ToJSON..= paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeMobileAuthUrl obj] : ["qr_code" Data.Aeson.Types.ToJSON..= paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeQrCode obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode" (\obj -> ((GHC.Base.pure PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "hosted_instructions_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "mobile_auth_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "qr_code"))

-- | Create a new 'PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode' with all required fields.
mkPaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode ::
  -- | 'paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeHostedInstructionsUrl'
  Data.Text.Internal.Text ->
  -- | 'paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeMobileAuthUrl'
  Data.Text.Internal.Text ->
  -- | 'paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeQrCode'
  PaymentIntentNextActionCashappQrCode ->
  PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
mkPaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeHostedInstructionsUrl paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeMobileAuthUrl paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeQrCode =
  PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
    { paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeHostedInstructionsUrl = paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeHostedInstructionsUrl,
      paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeMobileAuthUrl = paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeMobileAuthUrl,
      paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeQrCode = paymentIntentNextActionCashappHandleRedirectOrDisplayQrCodeQrCode
    }
