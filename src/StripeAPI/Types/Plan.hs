{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Plan
module StripeAPI.Types.Plan where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.DeletedProduct
import {-# SOURCE #-} StripeAPI.Types.PlanTier
import {-# SOURCE #-} StripeAPI.Types.Product
import {-# SOURCE #-} StripeAPI.Types.TransformUsage
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema plan
--
-- Plans define the base price, currency, and billing cycle for subscriptions.
-- For example, you might have a \<currency>5\<\/currency>\/month plan
-- that provides limited access to your products, and a
-- \<currency>15\<\/currency>\/month plan that allows full access.
--
-- Related guide: [Managing Products and Plans](https:\/\/stripe.com\/docs\/billing\/subscriptions\/products-and-plans).
data Plan
  = Plan
      { -- | active: Whether the plan is currently available for new subscriptions.
        planActive :: GHC.Types.Bool,
        -- | aggregate_usage: Specifies a usage aggregation strategy for plans of \`usage_type=metered\`. Allowed values are \`sum\` for summing up all usage during a period, \`last_during_period\` for using the last usage record reported within a period, \`last_ever\` for using the last usage record ever (across period bounds) or \`max\` which uses the usage record with the maximum reported usage during a period. Defaults to \`sum\`.
        planAggregateUsage :: (GHC.Maybe.Maybe PlanAggregateUsage'),
        -- | amount: The amount in %s to be charged on the interval specified.
        planAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | amount_decimal: Same as \`amount\`, but contains a decimal value with at most 12 decimal places.
        planAmountDecimal :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | billing_scheme: Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`amount\`) will be charged per unit in \`quantity\` (for plans with \`usage_type=licensed\`), or per unit of total usage (for plans with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
        planBillingScheme :: (GHC.Maybe.Maybe PlanBillingScheme'),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        planCreated :: GHC.Types.Int,
        -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
        planCurrency :: Data.Text.Internal.Text,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        planId :: Data.Text.Internal.Text,
        -- | interval: The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
        planInterval :: PlanInterval',
        -- | interval_count: The number of intervals (specified in the \`interval\` attribute) between subscription billings. For example, \`interval=month\` and \`interval_count=3\` bills every 3 months.
        planIntervalCount :: GHC.Types.Int,
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        planLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        planMetadata :: Data.Aeson.Types.Internal.Object,
        -- | nickname: A brief description of the plan, hidden from customers.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        planNickname :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        planObject :: PlanObject',
        -- | product: The product whose pricing this plan determines.
        planProduct :: (GHC.Maybe.Maybe PlanProduct'Variants),
        -- | tiers: Each element represents a pricing tier. This parameter requires \`billing_scheme\` to be set to \`tiered\`. See also the documentation for \`billing_scheme\`.
        planTiers :: (GHC.Maybe.Maybe ([PlanTier])),
        -- | tiers_mode: Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
        planTiersMode :: (GHC.Maybe.Maybe PlanTiersMode'),
        -- | transform_usage: Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \`tiers\`.
        planTransformUsage :: (GHC.Maybe.Maybe PlanTransformUsage'),
        -- | trial_period_days: Default number of trial days when subscribing a customer to this plan using [\`trial_from_plan=true\`](https:\/\/stripe.com\/docs\/api\#create_subscription-trial_from_plan).
        planTrialPeriodDays :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | usage_type: Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
        planUsageType :: PlanUsageType'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Plan where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "active" (planActive obj) : (Data.Aeson..=) "aggregate_usage" (planAggregateUsage obj) : (Data.Aeson..=) "amount" (planAmount obj) : (Data.Aeson..=) "amount_decimal" (planAmountDecimal obj) : (Data.Aeson..=) "billing_scheme" (planBillingScheme obj) : (Data.Aeson..=) "created" (planCreated obj) : (Data.Aeson..=) "currency" (planCurrency obj) : (Data.Aeson..=) "id" (planId obj) : (Data.Aeson..=) "interval" (planInterval obj) : (Data.Aeson..=) "interval_count" (planIntervalCount obj) : (Data.Aeson..=) "livemode" (planLivemode obj) : (Data.Aeson..=) "metadata" (planMetadata obj) : (Data.Aeson..=) "nickname" (planNickname obj) : (Data.Aeson..=) "object" (planObject obj) : (Data.Aeson..=) "product" (planProduct obj) : (Data.Aeson..=) "tiers" (planTiers obj) : (Data.Aeson..=) "tiers_mode" (planTiersMode obj) : (Data.Aeson..=) "transform_usage" (planTransformUsage obj) : (Data.Aeson..=) "trial_period_days" (planTrialPeriodDays obj) : (Data.Aeson..=) "usage_type" (planUsageType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "active" (planActive obj) GHC.Base.<> ((Data.Aeson..=) "aggregate_usage" (planAggregateUsage obj) GHC.Base.<> ((Data.Aeson..=) "amount" (planAmount obj) GHC.Base.<> ((Data.Aeson..=) "amount_decimal" (planAmountDecimal obj) GHC.Base.<> ((Data.Aeson..=) "billing_scheme" (planBillingScheme obj) GHC.Base.<> ((Data.Aeson..=) "created" (planCreated obj) GHC.Base.<> ((Data.Aeson..=) "currency" (planCurrency obj) GHC.Base.<> ((Data.Aeson..=) "id" (planId obj) GHC.Base.<> ((Data.Aeson..=) "interval" (planInterval obj) GHC.Base.<> ((Data.Aeson..=) "interval_count" (planIntervalCount obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (planLivemode obj) GHC.Base.<> ((Data.Aeson..=) "metadata" (planMetadata obj) GHC.Base.<> ((Data.Aeson..=) "nickname" (planNickname obj) GHC.Base.<> ((Data.Aeson..=) "object" (planObject obj) GHC.Base.<> ((Data.Aeson..=) "product" (planProduct obj) GHC.Base.<> ((Data.Aeson..=) "tiers" (planTiers obj) GHC.Base.<> ((Data.Aeson..=) "tiers_mode" (planTiersMode obj) GHC.Base.<> ((Data.Aeson..=) "transform_usage" (planTransformUsage obj) GHC.Base.<> ((Data.Aeson..=) "trial_period_days" (planTrialPeriodDays obj) GHC.Base.<> (Data.Aeson..=) "usage_type" (planUsageType obj))))))))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Plan where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Plan" (\obj -> (((((((((((((((((((GHC.Base.pure Plan GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "aggregate_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "amount_decimal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_scheme")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "interval_count")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "nickname")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "product")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tiers_mode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "transform_usage")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "trial_period_days")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "usage_type"))

-- | Defines the enum schema planAggregate_usage\'
--
-- Specifies a usage aggregation strategy for plans of \`usage_type=metered\`. Allowed values are \`sum\` for summing up all usage during a period, \`last_during_period\` for using the last usage record reported within a period, \`last_ever\` for using the last usage record ever (across period bounds) or \`max\` which uses the usage record with the maximum reported usage during a period. Defaults to \`sum\`.
data PlanAggregateUsage'
  = PlanAggregateUsage'EnumOther Data.Aeson.Types.Internal.Value
  | PlanAggregateUsage'EnumTyped Data.Text.Internal.Text
  | PlanAggregateUsage'EnumStringLastDuringPeriod
  | PlanAggregateUsage'EnumStringLastEver
  | PlanAggregateUsage'EnumStringMax
  | PlanAggregateUsage'EnumStringSum
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanAggregateUsage' where
  toJSON (PlanAggregateUsage'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanAggregateUsage'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanAggregateUsage'EnumStringLastDuringPeriod) = "last_during_period"
  toJSON (PlanAggregateUsage'EnumStringLastEver) = "last_ever"
  toJSON (PlanAggregateUsage'EnumStringMax) = "max"
  toJSON (PlanAggregateUsage'EnumStringSum) = "sum"

instance Data.Aeson.Types.FromJSON.FromJSON PlanAggregateUsage' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "last_during_period" -> PlanAggregateUsage'EnumStringLastDuringPeriod
            | val GHC.Classes.== "last_ever" -> PlanAggregateUsage'EnumStringLastEver
            | val GHC.Classes.== "max" -> PlanAggregateUsage'EnumStringMax
            | val GHC.Classes.== "sum" -> PlanAggregateUsage'EnumStringSum
            | GHC.Base.otherwise -> PlanAggregateUsage'EnumOther val
      )

-- | Defines the enum schema planBilling_scheme\'
--
-- Describes how to compute the price per period. Either \`per_unit\` or \`tiered\`. \`per_unit\` indicates that the fixed amount (specified in \`amount\`) will be charged per unit in \`quantity\` (for plans with \`usage_type=licensed\`), or per unit of total usage (for plans with \`usage_type=metered\`). \`tiered\` indicates that the unit pricing will be computed using a tiering strategy as defined using the \`tiers\` and \`tiers_mode\` attributes.
data PlanBillingScheme'
  = PlanBillingScheme'EnumOther Data.Aeson.Types.Internal.Value
  | PlanBillingScheme'EnumTyped Data.Text.Internal.Text
  | PlanBillingScheme'EnumStringPerUnit
  | PlanBillingScheme'EnumStringTiered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanBillingScheme' where
  toJSON (PlanBillingScheme'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanBillingScheme'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanBillingScheme'EnumStringPerUnit) = "per_unit"
  toJSON (PlanBillingScheme'EnumStringTiered) = "tiered"

instance Data.Aeson.Types.FromJSON.FromJSON PlanBillingScheme' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "per_unit" -> PlanBillingScheme'EnumStringPerUnit
            | val GHC.Classes.== "tiered" -> PlanBillingScheme'EnumStringTiered
            | GHC.Base.otherwise -> PlanBillingScheme'EnumOther val
      )

-- | Defines the enum schema planInterval\'
--
-- The frequency at which a subscription is billed. One of \`day\`, \`week\`, \`month\` or \`year\`.
data PlanInterval'
  = PlanInterval'EnumOther Data.Aeson.Types.Internal.Value
  | PlanInterval'EnumTyped Data.Text.Internal.Text
  | PlanInterval'EnumStringDay
  | PlanInterval'EnumStringMonth
  | PlanInterval'EnumStringWeek
  | PlanInterval'EnumStringYear
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanInterval' where
  toJSON (PlanInterval'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanInterval'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanInterval'EnumStringDay) = "day"
  toJSON (PlanInterval'EnumStringMonth) = "month"
  toJSON (PlanInterval'EnumStringWeek) = "week"
  toJSON (PlanInterval'EnumStringYear) = "year"

instance Data.Aeson.Types.FromJSON.FromJSON PlanInterval' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "day" -> PlanInterval'EnumStringDay
            | val GHC.Classes.== "month" -> PlanInterval'EnumStringMonth
            | val GHC.Classes.== "week" -> PlanInterval'EnumStringWeek
            | val GHC.Classes.== "year" -> PlanInterval'EnumStringYear
            | GHC.Base.otherwise -> PlanInterval'EnumOther val
      )

-- | Defines the enum schema planObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data PlanObject'
  = PlanObject'EnumOther Data.Aeson.Types.Internal.Value
  | PlanObject'EnumTyped Data.Text.Internal.Text
  | PlanObject'EnumStringPlan
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanObject' where
  toJSON (PlanObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanObject'EnumStringPlan) = "plan"

instance Data.Aeson.Types.FromJSON.FromJSON PlanObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "plan" -> PlanObject'EnumStringPlan
            | GHC.Base.otherwise -> PlanObject'EnumOther val
      )

-- | Define the one-of schema planProduct\'
--
-- The product whose pricing this plan determines.
data PlanProduct'Variants
  = PlanProduct'DeletedProduct DeletedProduct
  | PlanProduct'Product Product
  | PlanProduct'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanProduct'Variants where
  toJSON (PlanProduct'DeletedProduct a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PlanProduct'Product a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PlanProduct'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PlanProduct'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PlanProduct'DeletedProduct a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PlanProduct'Product a
      Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
        Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ PlanProduct'Text a
        Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema planTiers_mode\'
--
-- Defines if the tiering price should be \`graduated\` or \`volume\` based. In \`volume\`-based tiering, the maximum quantity within a period determines the per unit price. In \`graduated\` tiering, pricing can change as the quantity grows.
data PlanTiersMode'
  = PlanTiersMode'EnumOther Data.Aeson.Types.Internal.Value
  | PlanTiersMode'EnumTyped Data.Text.Internal.Text
  | PlanTiersMode'EnumStringGraduated
  | PlanTiersMode'EnumStringVolume
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanTiersMode' where
  toJSON (PlanTiersMode'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanTiersMode'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanTiersMode'EnumStringGraduated) = "graduated"
  toJSON (PlanTiersMode'EnumStringVolume) = "volume"

instance Data.Aeson.Types.FromJSON.FromJSON PlanTiersMode' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "graduated" -> PlanTiersMode'EnumStringGraduated
            | val GHC.Classes.== "volume" -> PlanTiersMode'EnumStringVolume
            | GHC.Base.otherwise -> PlanTiersMode'EnumOther val
      )

-- | Defines the data type for the schema planTransform_usage\'
--
-- Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with \\\`tiers\\\`.
data PlanTransformUsage'
  = PlanTransformUsage'
      { -- | divide_by: Divide usage by this number.
        planTransformUsage'DivideBy :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | round: After division, either round the result \`up\` or \`down\`.
        planTransformUsage'Round :: (GHC.Maybe.Maybe PlanTransformUsage'Round')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PlanTransformUsage' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "divide_by" (planTransformUsage'DivideBy obj) : (Data.Aeson..=) "round" (planTransformUsage'Round obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "divide_by" (planTransformUsage'DivideBy obj) GHC.Base.<> (Data.Aeson..=) "round" (planTransformUsage'Round obj))

instance Data.Aeson.Types.FromJSON.FromJSON PlanTransformUsage' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PlanTransformUsage'" (\obj -> (GHC.Base.pure PlanTransformUsage' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "divide_by")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "round"))

-- | Defines the enum schema planTransform_usage\'Round\'
--
-- After division, either round the result \`up\` or \`down\`.
data PlanTransformUsage'Round'
  = PlanTransformUsage'Round'EnumOther Data.Aeson.Types.Internal.Value
  | PlanTransformUsage'Round'EnumTyped Data.Text.Internal.Text
  | PlanTransformUsage'Round'EnumStringDown
  | PlanTransformUsage'Round'EnumStringUp
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanTransformUsage'Round' where
  toJSON (PlanTransformUsage'Round'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanTransformUsage'Round'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanTransformUsage'Round'EnumStringDown) = "down"
  toJSON (PlanTransformUsage'Round'EnumStringUp) = "up"

instance Data.Aeson.Types.FromJSON.FromJSON PlanTransformUsage'Round' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "down" -> PlanTransformUsage'Round'EnumStringDown
            | val GHC.Classes.== "up" -> PlanTransformUsage'Round'EnumStringUp
            | GHC.Base.otherwise -> PlanTransformUsage'Round'EnumOther val
      )

-- | Defines the enum schema planUsage_type\'
--
-- Configures how the quantity per period should be determined. Can be either \`metered\` or \`licensed\`. \`licensed\` automatically bills the \`quantity\` set when adding it to a subscription. \`metered\` aggregates the total usage based on usage records. Defaults to \`licensed\`.
data PlanUsageType'
  = PlanUsageType'EnumOther Data.Aeson.Types.Internal.Value
  | PlanUsageType'EnumTyped Data.Text.Internal.Text
  | PlanUsageType'EnumStringLicensed
  | PlanUsageType'EnumStringMetered
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PlanUsageType' where
  toJSON (PlanUsageType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanUsageType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (PlanUsageType'EnumStringLicensed) = "licensed"
  toJSON (PlanUsageType'EnumStringMetered) = "metered"

instance Data.Aeson.Types.FromJSON.FromJSON PlanUsageType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "licensed" -> PlanUsageType'EnumStringLicensed
            | val GHC.Classes.== "metered" -> PlanUsageType'EnumStringMetered
            | GHC.Base.otherwise -> PlanUsageType'EnumOther val
      )
