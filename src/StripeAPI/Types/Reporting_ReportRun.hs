{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Reporting_ReportRun
module StripeAPI.Types.Reporting_ReportRun where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.File
import {-# SOURCE #-} StripeAPI.Types.FileLink
import {-# SOURCE #-} StripeAPI.Types.FinancialReportingFinanceReportRunRunParameters
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.reporting.report_run@ in the specification.
--
-- The Report Run object represents an instance of a report type generated with
-- specific run parameters. Once the object is created, Stripe begins processing the report.
-- When the report has finished running, it will give you a reference to a file
-- where you can retrieve your results. For an overview, see
-- [API Access to Reports](https:\/\/stripe.com\/docs\/reporting\/statements\/api).
--
-- Note that reports can only be run based on your live-mode data (not test-mode
-- data), and thus related requests must be made with a
-- [live-mode API key](https:\/\/stripe.com\/docs\/keys\#test-live-modes).
data Reporting'reportRun
  = Reporting'reportRun
      { -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        reporting'reportRunCreated :: GHC.Types.Int,
        -- | error: If something should go wrong during the run, a message about the failure (populated when
        --  \`status=failed\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunError :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunId :: Data.Text.Internal.Text,
        -- | livemode: Always \`true\`: reports can only be run on live-mode data.
        reporting'reportRunLivemode :: GHC.Types.Bool,
        -- | parameters:
        reporting'reportRunParameters :: FinancialReportingFinanceReportRunRunParameters,
        -- | report_type: The ID of the [report type](https:\/\/stripe.com\/docs\/reporting\/statements\/api\#report-types) to run, such as \`\"balance.summary.1\"\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunReportType :: Data.Text.Internal.Text,
        -- | result: The file object representing the result of the report run (populated when
        --  \`status=succeeded\`).
        reporting'reportRunResult :: (GHC.Maybe.Maybe Reporting'reportRunResult'),
        -- | status: Status of this report run. This will be \`pending\` when the run is initially created.
        --  When the run finishes, this will be set to \`succeeded\` and the \`result\` field will be populated.
        --  Rarely, we may encounter an error, at which point this will be set to \`failed\` and the \`error\` field will be populated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunStatus :: Data.Text.Internal.Text,
        -- | succeeded_at: Timestamp at which this run successfully finished (populated when
        --  \`status=succeeded\`). Measured in seconds since the Unix epoch.
        reporting'reportRunSucceededAt :: (GHC.Maybe.Maybe GHC.Types.Int)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Reporting'reportRun where
  toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= reporting'reportRunCreated obj : "error" Data.Aeson.Types.ToJSON..= reporting'reportRunError obj : "id" Data.Aeson.Types.ToJSON..= reporting'reportRunId obj : "livemode" Data.Aeson.Types.ToJSON..= reporting'reportRunLivemode obj : "parameters" Data.Aeson.Types.ToJSON..= reporting'reportRunParameters obj : "report_type" Data.Aeson.Types.ToJSON..= reporting'reportRunReportType obj : "result" Data.Aeson.Types.ToJSON..= reporting'reportRunResult obj : "status" Data.Aeson.Types.ToJSON..= reporting'reportRunStatus obj : "succeeded_at" Data.Aeson.Types.ToJSON..= reporting'reportRunSucceededAt obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reporting.report_run" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= reporting'reportRunCreated obj) GHC.Base.<> (("error" Data.Aeson.Types.ToJSON..= reporting'reportRunError obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= reporting'reportRunId obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= reporting'reportRunLivemode obj) GHC.Base.<> (("parameters" Data.Aeson.Types.ToJSON..= reporting'reportRunParameters obj) GHC.Base.<> (("report_type" Data.Aeson.Types.ToJSON..= reporting'reportRunReportType obj) GHC.Base.<> (("result" Data.Aeson.Types.ToJSON..= reporting'reportRunResult obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= reporting'reportRunStatus obj) GHC.Base.<> (("succeeded_at" Data.Aeson.Types.ToJSON..= reporting'reportRunSucceededAt obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "reporting.report_run"))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Reporting'reportRun where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Reporting'reportRun" (\obj -> ((((((((GHC.Base.pure Reporting'reportRun GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "error")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "parameters")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "report_type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "result")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "succeeded_at"))

-- | Create a new 'Reporting'reportRun' with all required fields.
mkReporting'reportRun ::
  -- | 'reporting'reportRunCreated'
  GHC.Types.Int ->
  -- | 'reporting'reportRunId'
  Data.Text.Internal.Text ->
  -- | 'reporting'reportRunLivemode'
  GHC.Types.Bool ->
  -- | 'reporting'reportRunParameters'
  FinancialReportingFinanceReportRunRunParameters ->
  -- | 'reporting'reportRunReportType'
  Data.Text.Internal.Text ->
  -- | 'reporting'reportRunStatus'
  Data.Text.Internal.Text ->
  Reporting'reportRun
mkReporting'reportRun reporting'reportRunCreated reporting'reportRunId reporting'reportRunLivemode reporting'reportRunParameters reporting'reportRunReportType reporting'reportRunStatus =
  Reporting'reportRun
    { reporting'reportRunCreated = reporting'reportRunCreated,
      reporting'reportRunError = GHC.Maybe.Nothing,
      reporting'reportRunId = reporting'reportRunId,
      reporting'reportRunLivemode = reporting'reportRunLivemode,
      reporting'reportRunParameters = reporting'reportRunParameters,
      reporting'reportRunReportType = reporting'reportRunReportType,
      reporting'reportRunResult = GHC.Maybe.Nothing,
      reporting'reportRunStatus = reporting'reportRunStatus,
      reporting'reportRunSucceededAt = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.reporting.report_run.properties.result.anyOf@ in the specification.
--
-- The file object representing the result of the report run (populated when
--  \\\`status=succeeded\\\`).
data Reporting'reportRunResult'
  = Reporting'reportRunResult'
      { -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        reporting'reportRunResult'Created :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | filename: A filename for the file, suitable for saving to a filesystem.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunResult'Filename :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunResult'Id :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | links: A list of [file links](https:\/\/stripe.com\/docs\/api\#file_links) that point at this file.
        reporting'reportRunResult'Links :: (GHC.Maybe.Maybe Reporting'reportRunResult'Links'),
        -- | purpose: The purpose of the file. Possible values are \`additional_verification\`, \`business_icon\`, \`business_logo\`, \`customer_signature\`, \`dispute_evidence\`, \`finance_report_run\`, \`identity_document\`, \`pci_document\`, \`sigma_scheduled_query\`, or \`tax_document_user_upload\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunResult'Purpose :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | size: The size in bytes of the file object.
        reporting'reportRunResult'Size :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | title: A user friendly title for the document.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunResult'Title :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | type: The type of the file returned (e.g., \`csv\`, \`pdf\`, \`jpg\`, or \`png\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunResult'Type :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | url: The URL from which the file can be downloaded using your live secret API key.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunResult'Url :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Reporting'reportRunResult' where
  toJSON obj = Data.Aeson.Types.Internal.object ("created" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Created obj : "filename" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Filename obj : "id" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Id obj : "links" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Links obj : "purpose" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Purpose obj : "size" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Size obj : "title" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Title obj : "type" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Type obj : "url" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "file" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("created" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Created obj) GHC.Base.<> (("filename" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Filename obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Id obj) GHC.Base.<> (("links" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Links obj) GHC.Base.<> (("purpose" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Purpose obj) GHC.Base.<> (("size" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Size obj) GHC.Base.<> (("title" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Title obj) GHC.Base.<> (("type" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Type obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "file"))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Reporting'reportRunResult' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Reporting'reportRunResult'" (\obj -> ((((((((GHC.Base.pure Reporting'reportRunResult' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "filename")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "links")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "purpose")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "size")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "title")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "type")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "url"))

-- | Create a new 'Reporting'reportRunResult'' with all required fields.
mkReporting'reportRunResult' :: Reporting'reportRunResult'
mkReporting'reportRunResult' =
  Reporting'reportRunResult'
    { reporting'reportRunResult'Created = GHC.Maybe.Nothing,
      reporting'reportRunResult'Filename = GHC.Maybe.Nothing,
      reporting'reportRunResult'Id = GHC.Maybe.Nothing,
      reporting'reportRunResult'Links = GHC.Maybe.Nothing,
      reporting'reportRunResult'Purpose = GHC.Maybe.Nothing,
      reporting'reportRunResult'Size = GHC.Maybe.Nothing,
      reporting'reportRunResult'Title = GHC.Maybe.Nothing,
      reporting'reportRunResult'Type = GHC.Maybe.Nothing,
      reporting'reportRunResult'Url = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.reporting.report_run.properties.result.anyOf.properties.links@ in the specification.
--
-- A list of [file links](https:\/\/stripe.com\/docs\/api\#file_links) that point at this file.
data Reporting'reportRunResult'Links'
  = Reporting'reportRunResult'Links'
      { -- | data: Details about each object.
        reporting'reportRunResult'Links'Data :: ([FileLink]),
        -- | has_more: True if this list has another page of items after this one that can be fetched.
        reporting'reportRunResult'Links'HasMore :: GHC.Types.Bool,
        -- | url: The URL where this list can be accessed.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reporting'reportRunResult'Links'Url :: Data.Text.Internal.Text
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Reporting'reportRunResult'Links' where
  toJSON obj = Data.Aeson.Types.Internal.object ("data" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Links'Data obj : "has_more" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Links'HasMore obj : "url" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Links'Url obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("data" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Links'Data obj) GHC.Base.<> (("has_more" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Links'HasMore obj) GHC.Base.<> (("url" Data.Aeson.Types.ToJSON..= reporting'reportRunResult'Links'Url obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"))))

instance Data.Aeson.Types.FromJSON.FromJSON Reporting'reportRunResult'Links' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Reporting'reportRunResult'Links'" (\obj -> ((GHC.Base.pure Reporting'reportRunResult'Links' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'Reporting'reportRunResult'Links'' with all required fields.
mkReporting'reportRunResult'Links' ::
  -- | 'reporting'reportRunResult'Links'Data'
  [FileLink] ->
  -- | 'reporting'reportRunResult'Links'HasMore'
  GHC.Types.Bool ->
  -- | 'reporting'reportRunResult'Links'Url'
  Data.Text.Internal.Text ->
  Reporting'reportRunResult'Links'
mkReporting'reportRunResult'Links' reporting'reportRunResult'Links'Data reporting'reportRunResult'Links'HasMore reporting'reportRunResult'Links'Url =
  Reporting'reportRunResult'Links'
    { reporting'reportRunResult'Links'Data = reporting'reportRunResult'Links'Data,
      reporting'reportRunResult'Links'HasMore = reporting'reportRunResult'Links'HasMore,
      reporting'reportRunResult'Links'Url = reporting'reportRunResult'Links'Url
    }
