{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingTransactionReceiptData
module StripeAPI.Types.IssuingTransactionReceiptData where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_transaction_receipt_data@ in the specification.
data IssuingTransactionReceiptData = IssuingTransactionReceiptData
  { -- | description: The description of the item. The maximum length of this field is 26 characters.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingTransactionReceiptDataDescription :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | quantity: The quantity of the item.
    issuingTransactionReceiptDataQuantity :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Double)),
    -- | total: The total for this line item in cents.
    issuingTransactionReceiptDataTotal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int)),
    -- | unit_cost: The unit cost of the item in cents.
    issuingTransactionReceiptDataUnitCost :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable GHC.Types.Int))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingTransactionReceiptData where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (issuingTransactionReceiptDataDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (issuingTransactionReceiptDataQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total" Data.Aeson.Types.ToJSON..=)) (issuingTransactionReceiptDataTotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_cost" Data.Aeson.Types.ToJSON..=)) (issuingTransactionReceiptDataUnitCost obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("description" Data.Aeson.Types.ToJSON..=)) (issuingTransactionReceiptDataDescription obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("quantity" Data.Aeson.Types.ToJSON..=)) (issuingTransactionReceiptDataQuantity obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("total" Data.Aeson.Types.ToJSON..=)) (issuingTransactionReceiptDataTotal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("unit_cost" Data.Aeson.Types.ToJSON..=)) (issuingTransactionReceiptDataUnitCost obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingTransactionReceiptData where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingTransactionReceiptData" (\obj -> (((GHC.Base.pure IssuingTransactionReceiptData GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "quantity")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "unit_cost"))

-- | Create a new 'IssuingTransactionReceiptData' with all required fields.
mkIssuingTransactionReceiptData :: IssuingTransactionReceiptData
mkIssuingTransactionReceiptData =
  IssuingTransactionReceiptData
    { issuingTransactionReceiptDataDescription = GHC.Maybe.Nothing,
      issuingTransactionReceiptDataQuantity = GHC.Maybe.Nothing,
      issuingTransactionReceiptDataTotal = GHC.Maybe.Nothing,
      issuingTransactionReceiptDataUnitCost = GHC.Maybe.Nothing
    }
