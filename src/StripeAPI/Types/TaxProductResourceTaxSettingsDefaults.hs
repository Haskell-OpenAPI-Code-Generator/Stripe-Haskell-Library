{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TaxProductResourceTaxSettingsDefaults
module StripeAPI.Types.TaxProductResourceTaxSettingsDefaults where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax_product_resource_tax_settings_defaults@ in the specification.
data TaxProductResourceTaxSettingsDefaults = TaxProductResourceTaxSettingsDefaults
  { -- | tax_behavior: Default [tax behavior](https:\/\/stripe.com\/docs\/tax\/products-prices-tax-categories-tax-behavior\#tax-behavior) used to specify whether the price is considered inclusive of taxes or exclusive of taxes. If the item\'s price has a tax behavior set, it will take precedence over the default tax behavior.
    taxProductResourceTaxSettingsDefaultsTaxBehavior :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullable)),
    -- | tax_code: Default [tax code](https:\/\/stripe.com\/docs\/tax\/tax-categories) used to classify your products and prices.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    taxProductResourceTaxSettingsDefaultsTaxCode :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxSettingsDefaults where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxSettingsDefaultsTaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxSettingsDefaultsTaxCode obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxSettingsDefaultsTaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (taxProductResourceTaxSettingsDefaultsTaxCode obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxSettingsDefaults where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxProductResourceTaxSettingsDefaults" (\obj -> (GHC.Base.pure TaxProductResourceTaxSettingsDefaults GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_code"))

-- | Create a new 'TaxProductResourceTaxSettingsDefaults' with all required fields.
mkTaxProductResourceTaxSettingsDefaults :: TaxProductResourceTaxSettingsDefaults
mkTaxProductResourceTaxSettingsDefaults =
  TaxProductResourceTaxSettingsDefaults
    { taxProductResourceTaxSettingsDefaultsTaxBehavior = GHC.Maybe.Nothing,
      taxProductResourceTaxSettingsDefaultsTaxCode = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.tax_product_resource_tax_settings_defaults.properties.tax_behavior@ in the specification.
--
-- Default [tax behavior](https:\/\/stripe.com\/docs\/tax\/products-prices-tax-categories-tax-behavior\#tax-behavior) used to specify whether the price is considered inclusive of taxes or exclusive of taxes. If the item\'s price has a tax behavior set, it will take precedence over the default tax behavior.
data TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullable
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableOther Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableTyped Data.Text.Internal.Text
  | -- | Represents the JSON value @"exclusive"@
    TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableEnumExclusive
  | -- | Represents the JSON value @"inclusive"@
    TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableEnumInclusive
  | -- | Represents the JSON value @"inferred_by_currency"@
    TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableEnumInferredByCurrency
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullable where
  toJSON (TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableOther val) = val
  toJSON (TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableTyped val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableEnumExclusive) = "exclusive"
  toJSON (TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableEnumInclusive) = "inclusive"
  toJSON (TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableEnumInferredByCurrency) = "inferred_by_currency"

instance Data.Aeson.Types.FromJSON.FromJSON TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullable where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "exclusive" -> TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableEnumExclusive
            | val GHC.Classes.== "inclusive" -> TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableEnumInclusive
            | val GHC.Classes.== "inferred_by_currency" -> TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableEnumInferredByCurrency
            | GHC.Base.otherwise -> TaxProductResourceTaxSettingsDefaultsTaxBehavior'NonNullableOther val
      )
