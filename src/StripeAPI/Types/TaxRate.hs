{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema TaxRate
module StripeAPI.Types.TaxRate where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax_rate@ in the specification.
--
-- Tax rates can be applied to invoices and subscriptions to collect tax.
--
-- Related guide: [Tax Rates](https:\/\/stripe.com\/docs\/billing\/taxes\/tax-rates).
data TaxRate
  = TaxRate
      { -- | active: Defaults to \`true\`. When set to \`false\`, this tax rate cannot be applied to objects in the API, but will still be applied to subscriptions and invoices that already have it set.
        taxRateActive :: GHC.Types.Bool,
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        taxRateCreated :: GHC.Types.Int,
        -- | description: An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxRateDescription :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | display_name: The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxRateDisplayName :: Data.Text.Internal.Text,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxRateId :: Data.Text.Internal.Text,
        -- | inclusive: This specifies if the tax rate is inclusive or exclusive.
        taxRateInclusive :: GHC.Types.Bool,
        -- | jurisdiction: The jurisdiction for the tax rate.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        taxRateJurisdiction :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        taxRateLivemode :: GHC.Types.Bool,
        -- | metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        taxRateMetadata :: Data.Aeson.Types.Internal.Object,
        -- | percentage: This represents the tax rate percent out of 100.
        taxRatePercentage :: GHC.Types.Double
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TaxRate where
  toJSON obj = Data.Aeson.Types.Internal.object ("active" Data.Aeson.Types.ToJSON..= taxRateActive obj : "created" Data.Aeson.Types.ToJSON..= taxRateCreated obj : "description" Data.Aeson.Types.ToJSON..= taxRateDescription obj : "display_name" Data.Aeson.Types.ToJSON..= taxRateDisplayName obj : "id" Data.Aeson.Types.ToJSON..= taxRateId obj : "inclusive" Data.Aeson.Types.ToJSON..= taxRateInclusive obj : "jurisdiction" Data.Aeson.Types.ToJSON..= taxRateJurisdiction obj : "livemode" Data.Aeson.Types.ToJSON..= taxRateLivemode obj : "metadata" Data.Aeson.Types.ToJSON..= taxRateMetadata obj : "percentage" Data.Aeson.Types.ToJSON..= taxRatePercentage obj : "object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax_rate" : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("active" Data.Aeson.Types.ToJSON..= taxRateActive obj) GHC.Base.<> (("created" Data.Aeson.Types.ToJSON..= taxRateCreated obj) GHC.Base.<> (("description" Data.Aeson.Types.ToJSON..= taxRateDescription obj) GHC.Base.<> (("display_name" Data.Aeson.Types.ToJSON..= taxRateDisplayName obj) GHC.Base.<> (("id" Data.Aeson.Types.ToJSON..= taxRateId obj) GHC.Base.<> (("inclusive" Data.Aeson.Types.ToJSON..= taxRateInclusive obj) GHC.Base.<> (("jurisdiction" Data.Aeson.Types.ToJSON..= taxRateJurisdiction obj) GHC.Base.<> (("livemode" Data.Aeson.Types.ToJSON..= taxRateLivemode obj) GHC.Base.<> (("metadata" Data.Aeson.Types.ToJSON..= taxRateMetadata obj) GHC.Base.<> (("percentage" Data.Aeson.Types.ToJSON..= taxRatePercentage obj) GHC.Base.<> ("object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax_rate")))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON TaxRate where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TaxRate" (\obj -> (((((((((GHC.Base.pure TaxRate GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "active")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "description")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "display_name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "inclusive")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "jurisdiction")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "percentage"))

-- | Create a new 'TaxRate' with all required fields.
mkTaxRate ::
  -- | 'taxRateActive'
  GHC.Types.Bool ->
  -- | 'taxRateCreated'
  GHC.Types.Int ->
  -- | 'taxRateDisplayName'
  Data.Text.Internal.Text ->
  -- | 'taxRateId'
  Data.Text.Internal.Text ->
  -- | 'taxRateInclusive'
  GHC.Types.Bool ->
  -- | 'taxRateLivemode'
  GHC.Types.Bool ->
  -- | 'taxRateMetadata'
  Data.Aeson.Types.Internal.Object ->
  -- | 'taxRatePercentage'
  GHC.Types.Double ->
  TaxRate
mkTaxRate taxRateActive taxRateCreated taxRateDisplayName taxRateId taxRateInclusive taxRateLivemode taxRateMetadata taxRatePercentage =
  TaxRate
    { taxRateActive = taxRateActive,
      taxRateCreated = taxRateCreated,
      taxRateDescription = GHC.Maybe.Nothing,
      taxRateDisplayName = taxRateDisplayName,
      taxRateId = taxRateId,
      taxRateInclusive = taxRateInclusive,
      taxRateJurisdiction = GHC.Maybe.Nothing,
      taxRateLivemode = taxRateLivemode,
      taxRateMetadata = taxRateMetadata,
      taxRatePercentage = taxRatePercentage
    }
