-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE MultiWayIf #-}

-- | Contains the types generated from the schema CashBalance
module StripeAPI.Types.CashBalance where

import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe
import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.CustomerBalanceCustomerBalanceSettings

-- | Defines the object schema located at @components.schemas.cash_balance@ in the specification.
-- 
-- A customer\'s \`Cash balance\` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.
data CashBalance = CashBalance {
  -- | available: A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0.
  cashBalanceAvailable :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object))
  -- | customer: The ID of the customer whose cash balance this object represents.
  -- 
  -- Constraints:
  -- 
  -- * Maximum length of 5000
  , cashBalanceCustomer :: Data.Text.Internal.Text
  -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
  , cashBalanceLivemode :: GHC.Types.Bool
  -- | settings: 
  , cashBalanceSettings :: CustomerBalanceCustomerBalanceSettings
  } deriving (GHC.Show.Show
  , GHC.Classes.Eq)
instance Data.Aeson.Types.ToJSON.ToJSON CashBalance
    where toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available" Data.Aeson.Types.ToJSON..=)) (cashBalanceAvailable obj) : ["customer" Data.Aeson.Types.ToJSON..= cashBalanceCustomer obj] : ["livemode" Data.Aeson.Types.ToJSON..= cashBalanceLivemode obj] : ["settings" Data.Aeson.Types.ToJSON..= cashBalanceSettings obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "cash_balance"] : GHC.Base.mempty))
          toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("available" Data.Aeson.Types.ToJSON..=)) (cashBalanceAvailable obj) : ["customer" Data.Aeson.Types.ToJSON..= cashBalanceCustomer obj] : ["livemode" Data.Aeson.Types.ToJSON..= cashBalanceLivemode obj] : ["settings" Data.Aeson.Types.ToJSON..= cashBalanceSettings obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "cash_balance"] : GHC.Base.mempty)))
instance Data.Aeson.Types.FromJSON.FromJSON CashBalance
    where parseJSON = Data.Aeson.Types.FromJSON.withObject "CashBalance" (\obj -> (((GHC.Base.pure CashBalance GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "available")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "settings"))
-- | Create a new 'CashBalance' with all required fields.
mkCashBalance :: Data.Text.Internal.Text -- ^ 'cashBalanceCustomer'
  -> GHC.Types.Bool -- ^ 'cashBalanceLivemode'
  -> CustomerBalanceCustomerBalanceSettings -- ^ 'cashBalanceSettings'
  -> CashBalance
mkCashBalance cashBalanceCustomer cashBalanceLivemode cashBalanceSettings = CashBalance{cashBalanceAvailable = GHC.Maybe.Nothing,
                                                                                        cashBalanceCustomer = cashBalanceCustomer,
                                                                                        cashBalanceLivemode = cashBalanceLivemode,
                                                                                        cashBalanceSettings = cashBalanceSettings}
