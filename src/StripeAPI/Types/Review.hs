{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema Review
module StripeAPI.Types.Review where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Charge
import {-# SOURCE #-} StripeAPI.Types.PaymentIntent
import {-# SOURCE #-} StripeAPI.Types.RadarReviewResourceLocation
import {-# SOURCE #-} StripeAPI.Types.RadarReviewResourceSession
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema review
--
-- Reviews can be used to supplement automated fraud detection with human expertise.
--
-- Learn more about [Radar](\/radar) and reviewing payments
-- [here](https:\/\/stripe.com\/docs\/radar\/reviews).
data Review
  = Review
      { -- | billing_zip: The ZIP or postal code of the card used, if applicable.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewBillingZip :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | charge: The charge associated with this review.
        reviewCharge :: (GHC.Maybe.Maybe ReviewCharge'Variants),
        -- | closed_reason: The reason the review was closed, or null if it has not yet been closed. One of \`approved\`, \`refunded\`, \`refunded_as_fraud\`, or \`disputed\`.
        reviewClosedReason :: (GHC.Maybe.Maybe ReviewClosedReason'),
        -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
        reviewCreated :: GHC.Types.Int,
        -- | id: Unique identifier for the object.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewId :: Data.Text.Internal.Text,
        -- | ip_address: The IP address where the payment originated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewIpAddress :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | ip_address_location: Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
        reviewIpAddressLocation :: (GHC.Maybe.Maybe ReviewIpAddressLocation'),
        -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
        reviewLivemode :: GHC.Types.Bool,
        -- | object: String representing the object\'s type. Objects of the same type share the same value.
        reviewObject :: ReviewObject',
        -- | open: If \`true\`, the review needs action.
        reviewOpen :: GHC.Types.Bool,
        -- | opened_reason: The reason the review was opened. One of \`rule\` or \`manual\`.
        reviewOpenedReason :: ReviewOpenedReason',
        -- | payment_intent: The PaymentIntent ID associated with this review, if one exists.
        reviewPaymentIntent :: (GHC.Maybe.Maybe ReviewPaymentIntent'Variants),
        -- | reason: The reason the review is currently open or closed. One of \`rule\`, \`manual\`, \`approved\`, \`refunded\`, \`refunded_as_fraud\`, or \`disputed\`.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewReason :: Data.Text.Internal.Text,
        -- | session: Information related to the browsing session of the user who initiated the payment.
        reviewSession :: (GHC.Maybe.Maybe ReviewSession')
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Review where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "billing_zip" (reviewBillingZip obj) : (Data.Aeson..=) "charge" (reviewCharge obj) : (Data.Aeson..=) "closed_reason" (reviewClosedReason obj) : (Data.Aeson..=) "created" (reviewCreated obj) : (Data.Aeson..=) "id" (reviewId obj) : (Data.Aeson..=) "ip_address" (reviewIpAddress obj) : (Data.Aeson..=) "ip_address_location" (reviewIpAddressLocation obj) : (Data.Aeson..=) "livemode" (reviewLivemode obj) : (Data.Aeson..=) "object" (reviewObject obj) : (Data.Aeson..=) "open" (reviewOpen obj) : (Data.Aeson..=) "opened_reason" (reviewOpenedReason obj) : (Data.Aeson..=) "payment_intent" (reviewPaymentIntent obj) : (Data.Aeson..=) "reason" (reviewReason obj) : (Data.Aeson..=) "session" (reviewSession obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "billing_zip" (reviewBillingZip obj) GHC.Base.<> ((Data.Aeson..=) "charge" (reviewCharge obj) GHC.Base.<> ((Data.Aeson..=) "closed_reason" (reviewClosedReason obj) GHC.Base.<> ((Data.Aeson..=) "created" (reviewCreated obj) GHC.Base.<> ((Data.Aeson..=) "id" (reviewId obj) GHC.Base.<> ((Data.Aeson..=) "ip_address" (reviewIpAddress obj) GHC.Base.<> ((Data.Aeson..=) "ip_address_location" (reviewIpAddressLocation obj) GHC.Base.<> ((Data.Aeson..=) "livemode" (reviewLivemode obj) GHC.Base.<> ((Data.Aeson..=) "object" (reviewObject obj) GHC.Base.<> ((Data.Aeson..=) "open" (reviewOpen obj) GHC.Base.<> ((Data.Aeson..=) "opened_reason" (reviewOpenedReason obj) GHC.Base.<> ((Data.Aeson..=) "payment_intent" (reviewPaymentIntent obj) GHC.Base.<> ((Data.Aeson..=) "reason" (reviewReason obj) GHC.Base.<> (Data.Aeson..=) "session" (reviewSession obj))))))))))))))

instance Data.Aeson.Types.FromJSON.FromJSON Review where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Review" (\obj -> (((((((((((((GHC.Base.pure Review GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "billing_zip")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "closed_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "ip_address_location")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "object")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "open")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "opened_reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "payment_intent")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reason")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "session"))

-- | Define the one-of schema reviewCharge\'
--
-- The charge associated with this review.
data ReviewCharge'Variants
  = ReviewCharge'Charge Charge
  | ReviewCharge'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ReviewCharge'Variants where
  toJSON (ReviewCharge'Charge a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ReviewCharge'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ReviewCharge'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ ReviewCharge'Charge a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ ReviewCharge'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the enum schema reviewClosed_reason\'
--
-- The reason the review was closed, or null if it has not yet been closed. One of \`approved\`, \`refunded\`, \`refunded_as_fraud\`, or \`disputed\`.
data ReviewClosedReason'
  = ReviewClosedReason'EnumOther Data.Aeson.Types.Internal.Value
  | ReviewClosedReason'EnumTyped Data.Text.Internal.Text
  | ReviewClosedReason'EnumStringApproved
  | ReviewClosedReason'EnumStringDisputed
  | ReviewClosedReason'EnumStringRefunded
  | ReviewClosedReason'EnumStringRefundedAsFraud
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ReviewClosedReason' where
  toJSON (ReviewClosedReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (ReviewClosedReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (ReviewClosedReason'EnumStringApproved) = "approved"
  toJSON (ReviewClosedReason'EnumStringDisputed) = "disputed"
  toJSON (ReviewClosedReason'EnumStringRefunded) = "refunded"
  toJSON (ReviewClosedReason'EnumStringRefundedAsFraud) = "refunded_as_fraud"

instance Data.Aeson.Types.FromJSON.FromJSON ReviewClosedReason' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "approved" -> ReviewClosedReason'EnumStringApproved
            | val GHC.Classes.== "disputed" -> ReviewClosedReason'EnumStringDisputed
            | val GHC.Classes.== "refunded" -> ReviewClosedReason'EnumStringRefunded
            | val GHC.Classes.== "refunded_as_fraud" -> ReviewClosedReason'EnumStringRefundedAsFraud
            | GHC.Base.otherwise -> ReviewClosedReason'EnumOther val
      )

-- | Defines the data type for the schema reviewIp_address_location\'
--
-- Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
data ReviewIpAddressLocation'
  = ReviewIpAddressLocation'
      { -- | city: The city where the payment originated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewIpAddressLocation'City :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter ISO code representing the country where the payment originated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewIpAddressLocation'Country :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | latitude: The geographic latitude where the payment originated.
        reviewIpAddressLocation'Latitude :: (GHC.Maybe.Maybe GHC.Types.Double),
        -- | longitude: The geographic longitude where the payment originated.
        reviewIpAddressLocation'Longitude :: (GHC.Maybe.Maybe GHC.Types.Double),
        -- | region: The state\/county\/province\/region where the payment originated.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewIpAddressLocation'Region :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ReviewIpAddressLocation' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "city" (reviewIpAddressLocation'City obj) : (Data.Aeson..=) "country" (reviewIpAddressLocation'Country obj) : (Data.Aeson..=) "latitude" (reviewIpAddressLocation'Latitude obj) : (Data.Aeson..=) "longitude" (reviewIpAddressLocation'Longitude obj) : (Data.Aeson..=) "region" (reviewIpAddressLocation'Region obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "city" (reviewIpAddressLocation'City obj) GHC.Base.<> ((Data.Aeson..=) "country" (reviewIpAddressLocation'Country obj) GHC.Base.<> ((Data.Aeson..=) "latitude" (reviewIpAddressLocation'Latitude obj) GHC.Base.<> ((Data.Aeson..=) "longitude" (reviewIpAddressLocation'Longitude obj) GHC.Base.<> (Data.Aeson..=) "region" (reviewIpAddressLocation'Region obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON ReviewIpAddressLocation' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ReviewIpAddressLocation'" (\obj -> ((((GHC.Base.pure ReviewIpAddressLocation' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "city")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "latitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "longitude")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "region"))

-- | Defines the enum schema reviewObject\'
--
-- String representing the object\'s type. Objects of the same type share the same value.
data ReviewObject'
  = ReviewObject'EnumOther Data.Aeson.Types.Internal.Value
  | ReviewObject'EnumTyped Data.Text.Internal.Text
  | ReviewObject'EnumStringReview
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ReviewObject' where
  toJSON (ReviewObject'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (ReviewObject'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (ReviewObject'EnumStringReview) = "review"

instance Data.Aeson.Types.FromJSON.FromJSON ReviewObject' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "review" -> ReviewObject'EnumStringReview
            | GHC.Base.otherwise -> ReviewObject'EnumOther val
      )

-- | Defines the enum schema reviewOpened_reason\'
--
-- The reason the review was opened. One of \`rule\` or \`manual\`.
data ReviewOpenedReason'
  = ReviewOpenedReason'EnumOther Data.Aeson.Types.Internal.Value
  | ReviewOpenedReason'EnumTyped Data.Text.Internal.Text
  | ReviewOpenedReason'EnumStringManual
  | ReviewOpenedReason'EnumStringRule
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ReviewOpenedReason' where
  toJSON (ReviewOpenedReason'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (ReviewOpenedReason'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (ReviewOpenedReason'EnumStringManual) = "manual"
  toJSON (ReviewOpenedReason'EnumStringRule) = "rule"

instance Data.Aeson.Types.FromJSON.FromJSON ReviewOpenedReason' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "manual" -> ReviewOpenedReason'EnumStringManual
            | val GHC.Classes.== "rule" -> ReviewOpenedReason'EnumStringRule
            | GHC.Base.otherwise -> ReviewOpenedReason'EnumOther val
      )

-- | Define the one-of schema reviewPayment_intent\'
--
-- The PaymentIntent ID associated with this review, if one exists.
data ReviewPaymentIntent'Variants
  = ReviewPaymentIntent'PaymentIntent PaymentIntent
  | ReviewPaymentIntent'Text Data.Text.Internal.Text
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON ReviewPaymentIntent'Variants where
  toJSON (ReviewPaymentIntent'PaymentIntent a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (ReviewPaymentIntent'Text a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON ReviewPaymentIntent'Variants where
  parseJSON val = case Data.Aeson.Types.FromJSON.fromJSON val of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ ReviewPaymentIntent'PaymentIntent a
    Data.Aeson.Types.Internal.Error _ -> case Data.Aeson.Types.FromJSON.fromJSON val of
      Data.Aeson.Types.Internal.Success a -> GHC.Base.pure GHC.Base.$ ReviewPaymentIntent'Text a
      Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the data type for the schema reviewSession\'
--
-- Information related to the browsing session of the user who initiated the payment.
data ReviewSession'
  = ReviewSession'
      { -- | browser: The browser used in this browser session (e.g., \`Chrome\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewSession'Browser :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | device: Information about the device used for the browser session (e.g., \`Samsung SM-G930T\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewSession'Device :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | platform: The platform for the browser session (e.g., \`Macintosh\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewSession'Platform :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | version: The version for the browser session (e.g., \`61.0.3163.100\`).
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        reviewSession'Version :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON ReviewSession' where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "browser" (reviewSession'Browser obj) : (Data.Aeson..=) "device" (reviewSession'Device obj) : (Data.Aeson..=) "platform" (reviewSession'Platform obj) : (Data.Aeson..=) "version" (reviewSession'Version obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "browser" (reviewSession'Browser obj) GHC.Base.<> ((Data.Aeson..=) "device" (reviewSession'Device obj) GHC.Base.<> ((Data.Aeson..=) "platform" (reviewSession'Platform obj) GHC.Base.<> (Data.Aeson..=) "version" (reviewSession'Version obj))))

instance Data.Aeson.Types.FromJSON.FromJSON ReviewSession' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "ReviewSession'" (\obj -> (((GHC.Base.pure ReviewSession' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "browser")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "device")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "platform")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "version"))
