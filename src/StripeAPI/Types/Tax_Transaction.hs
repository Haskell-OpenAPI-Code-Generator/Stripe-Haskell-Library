{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema Tax_Transaction
module StripeAPI.Types.Tax_Transaction where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.TaxProductResourceCustomerDetails
import {-# SOURCE #-} StripeAPI.Types.TaxProductResourceTaxTransactionResourceReversal
import {-# SOURCE #-} StripeAPI.Types.TaxProductResourceTaxTransactionShippingCost
import {-# SOURCE #-} StripeAPI.Types.Tax_TransactionLineItem
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.tax.transaction@ in the specification.
--
-- A Tax Transaction records the tax collected from or refunded to your customer.
--
-- Related guide: [Calculate tax in your custom payment flow](https:\/\/stripe.com\/docs\/tax\/custom\#tax-transaction)
data Tax'transaction = Tax'transaction
  { -- | created: Time at which the object was created. Measured in seconds since the Unix epoch.
    tax'transactionCreated :: GHC.Types.Int,
    -- | currency: Three-letter [ISO currency code](https:\/\/www.iso.org\/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https:\/\/stripe.com\/docs\/currencies).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionCurrency :: Data.Text.Internal.Text,
    -- | customer: The ID of an existing [Customer](https:\/\/stripe.com\/docs\/api\/customers\/object) used for the resource.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionCustomer :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text)),
    -- | customer_details:
    tax'transactionCustomerDetails :: TaxProductResourceCustomerDetails,
    -- | id: Unique identifier for the transaction.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionId :: Data.Text.Internal.Text,
    -- | line_items: The tax collected or refunded, by line item.
    tax'transactionLineItems :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Tax'transactionLineItems'NonNullable)),
    -- | livemode: Has the value \`true\` if the object exists in live mode or the value \`false\` if the object exists in test mode.
    tax'transactionLivemode :: GHC.Types.Bool,
    -- | metadata: Set of [key-value pairs](https:\/\/stripe.com\/docs\/api\/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    tax'transactionMetadata :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Aeson.Types.Internal.Object)),
    -- | reference: A custom unique identifier, such as \'myOrder_123\'.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionReference :: Data.Text.Internal.Text,
    -- | reversal: If \`type=reversal\`, contains information about what was reversed.
    tax'transactionReversal :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Tax'transactionReversal'NonNullable)),
    -- | shipping_cost: The shipping cost details for the transaction.
    tax'transactionShippingCost :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Tax'transactionShippingCost'NonNullable)),
    -- | tax_date: Timestamp of date at which the tax rules and rates in effect applies for the calculation.
    tax'transactionTaxDate :: GHC.Types.Int,
    -- | type: If \`reversal\`, this transaction reverses an earlier transaction.
    tax'transactionType :: Tax'transactionType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transaction where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= tax'transactionCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= tax'transactionCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (tax'transactionCustomer obj) : ["customer_details" Data.Aeson.Types.ToJSON..= tax'transactionCustomerDetails obj] : ["id" Data.Aeson.Types.ToJSON..= tax'transactionId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItems obj) : ["livemode" Data.Aeson.Types.ToJSON..= tax'transactionLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (tax'transactionMetadata obj) : ["reference" Data.Aeson.Types.ToJSON..= tax'transactionReference obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reversal" Data.Aeson.Types.ToJSON..=)) (tax'transactionReversal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_cost" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost obj) : ["tax_date" Data.Aeson.Types.ToJSON..= tax'transactionTaxDate obj] : ["type" Data.Aeson.Types.ToJSON..= tax'transactionType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax.transaction"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["created" Data.Aeson.Types.ToJSON..= tax'transactionCreated obj] : ["currency" Data.Aeson.Types.ToJSON..= tax'transactionCurrency obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("customer" Data.Aeson.Types.ToJSON..=)) (tax'transactionCustomer obj) : ["customer_details" Data.Aeson.Types.ToJSON..= tax'transactionCustomerDetails obj] : ["id" Data.Aeson.Types.ToJSON..= tax'transactionId obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (tax'transactionLineItems obj) : ["livemode" Data.Aeson.Types.ToJSON..= tax'transactionLivemode obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("metadata" Data.Aeson.Types.ToJSON..=)) (tax'transactionMetadata obj) : ["reference" Data.Aeson.Types.ToJSON..= tax'transactionReference obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("reversal" Data.Aeson.Types.ToJSON..=)) (tax'transactionReversal obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_cost" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost obj) : ["tax_date" Data.Aeson.Types.ToJSON..= tax'transactionTaxDate obj] : ["type" Data.Aeson.Types.ToJSON..= tax'transactionType obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "tax.transaction"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transaction where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Tax'transaction" (\obj -> ((((((((((((GHC.Base.pure Tax'transaction GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "created")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "currency")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "customer")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "customer_details")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "id")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "livemode")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "metadata")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "reference")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "reversal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shipping_cost")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "tax_date")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'Tax'transaction' with all required fields.
mkTax'transaction ::
  -- | 'tax'transactionCreated'
  GHC.Types.Int ->
  -- | 'tax'transactionCurrency'
  Data.Text.Internal.Text ->
  -- | 'tax'transactionCustomerDetails'
  TaxProductResourceCustomerDetails ->
  -- | 'tax'transactionId'
  Data.Text.Internal.Text ->
  -- | 'tax'transactionLivemode'
  GHC.Types.Bool ->
  -- | 'tax'transactionReference'
  Data.Text.Internal.Text ->
  -- | 'tax'transactionTaxDate'
  GHC.Types.Int ->
  -- | 'tax'transactionType'
  Tax'transactionType' ->
  Tax'transaction
mkTax'transaction tax'transactionCreated tax'transactionCurrency tax'transactionCustomerDetails tax'transactionId tax'transactionLivemode tax'transactionReference tax'transactionTaxDate tax'transactionType =
  Tax'transaction
    { tax'transactionCreated = tax'transactionCreated,
      tax'transactionCurrency = tax'transactionCurrency,
      tax'transactionCustomer = GHC.Maybe.Nothing,
      tax'transactionCustomerDetails = tax'transactionCustomerDetails,
      tax'transactionId = tax'transactionId,
      tax'transactionLineItems = GHC.Maybe.Nothing,
      tax'transactionLivemode = tax'transactionLivemode,
      tax'transactionMetadata = GHC.Maybe.Nothing,
      tax'transactionReference = tax'transactionReference,
      tax'transactionReversal = GHC.Maybe.Nothing,
      tax'transactionShippingCost = GHC.Maybe.Nothing,
      tax'transactionTaxDate = tax'transactionTaxDate,
      tax'transactionType = tax'transactionType
    }

-- | Defines the object schema located at @components.schemas.tax.transaction.properties.line_items@ in the specification.
--
-- The tax collected or refunded, by line item.
data Tax'transactionLineItems'NonNullable = Tax'transactionLineItems'NonNullable
  { -- | data: Details about each object.
    tax'transactionLineItems'NonNullableData :: ([Tax'transactionLineItem]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    tax'transactionLineItems'NonNullableHasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    -- * Must match pattern \'^\/v1\/tax\/transactions\/[^\/]+\/line_items\'
    tax'transactionLineItems'NonNullableUrl :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transactionLineItems'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= tax'transactionLineItems'NonNullableData obj] : ["has_more" Data.Aeson.Types.ToJSON..= tax'transactionLineItems'NonNullableHasMore obj] : ["url" Data.Aeson.Types.ToJSON..= tax'transactionLineItems'NonNullableUrl obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= tax'transactionLineItems'NonNullableData obj] : ["has_more" Data.Aeson.Types.ToJSON..= tax'transactionLineItems'NonNullableHasMore obj] : ["url" Data.Aeson.Types.ToJSON..= tax'transactionLineItems'NonNullableUrl obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transactionLineItems'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Tax'transactionLineItems'NonNullable" (\obj -> ((GHC.Base.pure Tax'transactionLineItems'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'Tax'transactionLineItems'NonNullable' with all required fields.
mkTax'transactionLineItems'NonNullable ::
  -- | 'tax'transactionLineItems'NonNullableData'
  [Tax'transactionLineItem] ->
  -- | 'tax'transactionLineItems'NonNullableHasMore'
  GHC.Types.Bool ->
  -- | 'tax'transactionLineItems'NonNullableUrl'
  Data.Text.Internal.Text ->
  Tax'transactionLineItems'NonNullable
mkTax'transactionLineItems'NonNullable tax'transactionLineItems'NonNullableData tax'transactionLineItems'NonNullableHasMore tax'transactionLineItems'NonNullableUrl =
  Tax'transactionLineItems'NonNullable
    { tax'transactionLineItems'NonNullableData = tax'transactionLineItems'NonNullableData,
      tax'transactionLineItems'NonNullableHasMore = tax'transactionLineItems'NonNullableHasMore,
      tax'transactionLineItems'NonNullableUrl = tax'transactionLineItems'NonNullableUrl
    }

-- | Defines the object schema located at @components.schemas.tax.transaction.properties.reversal.anyOf@ in the specification.
--
-- If \\\`type=reversal\\\`, contains information about what was reversed.
data Tax'transactionReversal'NonNullable = Tax'transactionReversal'NonNullable
  { -- | original_transaction: The \`id\` of the reversed \`Transaction\` object.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionReversal'NonNullableOriginalTransaction :: (GHC.Maybe.Maybe (StripeAPI.Common.Nullable Data.Text.Internal.Text))
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transactionReversal'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_transaction" Data.Aeson.Types.ToJSON..=)) (tax'transactionReversal'NonNullableOriginalTransaction obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("original_transaction" Data.Aeson.Types.ToJSON..=)) (tax'transactionReversal'NonNullableOriginalTransaction obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transactionReversal'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Tax'transactionReversal'NonNullable" (\obj -> GHC.Base.pure Tax'transactionReversal'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "original_transaction"))

-- | Create a new 'Tax'transactionReversal'NonNullable' with all required fields.
mkTax'transactionReversal'NonNullable :: Tax'transactionReversal'NonNullable
mkTax'transactionReversal'NonNullable = Tax'transactionReversal'NonNullable {tax'transactionReversal'NonNullableOriginalTransaction = GHC.Maybe.Nothing}

-- | Defines the object schema located at @components.schemas.tax.transaction.properties.shipping_cost.anyOf@ in the specification.
--
-- The shipping cost details for the transaction.
data Tax'transactionShippingCost'NonNullable = Tax'transactionShippingCost'NonNullable
  { -- | amount: The shipping amount in integer cents. If \`tax_behavior=inclusive\`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
    tax'transactionShippingCost'NonNullableAmount :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | amount_tax: The amount of tax calculated for shipping, in integer cents.
    tax'transactionShippingCost'NonNullableAmountTax :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | shipping_rate: The ID of an existing [ShippingRate](https:\/\/stripe.com\/docs\/api\/shipping_rates\/object).
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionShippingCost'NonNullableShippingRate :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tax_behavior: Specifies whether the \`amount\` includes taxes. If \`tax_behavior=inclusive\`, then the amount includes taxes.
    tax'transactionShippingCost'NonNullableTaxBehavior :: (GHC.Maybe.Maybe Tax'transactionShippingCost'NonNullableTaxBehavior'),
    -- | tax_code: The [tax code](https:\/\/stripe.com\/docs\/tax\/tax-categories) ID used for shipping.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    tax'transactionShippingCost'NonNullableTaxCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transactionShippingCost'NonNullable where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_tax" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableAmountTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_rate" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableShippingRate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableTaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableTaxCode obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableAmount obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_tax" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableAmountTax obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("shipping_rate" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableShippingRate obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_behavior" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableTaxBehavior obj) : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("tax_code" Data.Aeson.Types.ToJSON..=)) (tax'transactionShippingCost'NonNullableTaxCode obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transactionShippingCost'NonNullable where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "Tax'transactionShippingCost'NonNullable" (\obj -> ((((GHC.Base.pure Tax'transactionShippingCost'NonNullable GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_tax")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "shipping_rate")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_behavior")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "tax_code"))

-- | Create a new 'Tax'transactionShippingCost'NonNullable' with all required fields.
mkTax'transactionShippingCost'NonNullable :: Tax'transactionShippingCost'NonNullable
mkTax'transactionShippingCost'NonNullable =
  Tax'transactionShippingCost'NonNullable
    { tax'transactionShippingCost'NonNullableAmount = GHC.Maybe.Nothing,
      tax'transactionShippingCost'NonNullableAmountTax = GHC.Maybe.Nothing,
      tax'transactionShippingCost'NonNullableShippingRate = GHC.Maybe.Nothing,
      tax'transactionShippingCost'NonNullableTaxBehavior = GHC.Maybe.Nothing,
      tax'transactionShippingCost'NonNullableTaxCode = GHC.Maybe.Nothing
    }

-- | Defines the enum schema located at @components.schemas.tax.transaction.properties.shipping_cost.anyOf.properties.tax_behavior@ in the specification.
--
-- Specifies whether the \`amount\` includes taxes. If \`tax_behavior=inclusive\`, then the amount includes taxes.
data Tax'transactionShippingCost'NonNullableTaxBehavior'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Tax'transactionShippingCost'NonNullableTaxBehavior'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Tax'transactionShippingCost'NonNullableTaxBehavior'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"exclusive"@
    Tax'transactionShippingCost'NonNullableTaxBehavior'EnumExclusive
  | -- | Represents the JSON value @"inclusive"@
    Tax'transactionShippingCost'NonNullableTaxBehavior'EnumInclusive
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transactionShippingCost'NonNullableTaxBehavior' where
  toJSON (Tax'transactionShippingCost'NonNullableTaxBehavior'Other val) = val
  toJSON (Tax'transactionShippingCost'NonNullableTaxBehavior'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Tax'transactionShippingCost'NonNullableTaxBehavior'EnumExclusive) = "exclusive"
  toJSON (Tax'transactionShippingCost'NonNullableTaxBehavior'EnumInclusive) = "inclusive"

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transactionShippingCost'NonNullableTaxBehavior' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "exclusive" -> Tax'transactionShippingCost'NonNullableTaxBehavior'EnumExclusive
            | val GHC.Classes.== "inclusive" -> Tax'transactionShippingCost'NonNullableTaxBehavior'EnumInclusive
            | GHC.Base.otherwise -> Tax'transactionShippingCost'NonNullableTaxBehavior'Other val
      )

-- | Defines the enum schema located at @components.schemas.tax.transaction.properties.type@ in the specification.
--
-- If \`reversal\`, this transaction reverses an earlier transaction.
data Tax'transactionType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    Tax'transactionType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    Tax'transactionType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"reversal"@
    Tax'transactionType'EnumReversal
  | -- | Represents the JSON value @"transaction"@
    Tax'transactionType'EnumTransaction
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON Tax'transactionType' where
  toJSON (Tax'transactionType'Other val) = val
  toJSON (Tax'transactionType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (Tax'transactionType'EnumReversal) = "reversal"
  toJSON (Tax'transactionType'EnumTransaction) = "transaction"

instance Data.Aeson.Types.FromJSON.FromJSON Tax'transactionType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "reversal" -> Tax'transactionType'EnumReversal
            | val GHC.Classes.== "transaction" -> Tax'transactionType'EnumTransaction
            | GHC.Base.otherwise -> Tax'transactionType'Other val
      )
