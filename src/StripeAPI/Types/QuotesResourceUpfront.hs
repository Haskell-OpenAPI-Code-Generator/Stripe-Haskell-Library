{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema QuotesResourceUpfront
module StripeAPI.Types.QuotesResourceUpfront where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Item
import {-# SOURCE #-} StripeAPI.Types.QuotesResourceTotalDetails
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.quotes_resource_upfront@ in the specification.
data QuotesResourceUpfront = QuotesResourceUpfront
  { -- | amount_subtotal: Total before any discounts or taxes are applied.
    quotesResourceUpfrontAmountSubtotal :: GHC.Types.Int,
    -- | amount_total: Total after discounts and taxes are applied.
    quotesResourceUpfrontAmountTotal :: GHC.Types.Int,
    -- | line_items: The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
    quotesResourceUpfrontLineItems :: (GHC.Maybe.Maybe QuotesResourceUpfrontLineItems'),
    -- | total_details:
    quotesResourceUpfrontTotalDetails :: QuotesResourceTotalDetails
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON QuotesResourceUpfront where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["amount_subtotal" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontAmountSubtotal obj] : ["amount_total" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontAmountTotal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (quotesResourceUpfrontLineItems obj) : ["total_details" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontTotalDetails obj] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["amount_subtotal" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontAmountSubtotal obj] : ["amount_total" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontAmountTotal obj] : Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("line_items" Data.Aeson.Types.ToJSON..=)) (quotesResourceUpfrontLineItems obj) : ["total_details" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontTotalDetails obj] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON QuotesResourceUpfront where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "QuotesResourceUpfront" (\obj -> (((GHC.Base.pure QuotesResourceUpfront GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_subtotal")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "amount_total")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "line_items")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "total_details"))

-- | Create a new 'QuotesResourceUpfront' with all required fields.
mkQuotesResourceUpfront ::
  -- | 'quotesResourceUpfrontAmountSubtotal'
  GHC.Types.Int ->
  -- | 'quotesResourceUpfrontAmountTotal'
  GHC.Types.Int ->
  -- | 'quotesResourceUpfrontTotalDetails'
  QuotesResourceTotalDetails ->
  QuotesResourceUpfront
mkQuotesResourceUpfront quotesResourceUpfrontAmountSubtotal quotesResourceUpfrontAmountTotal quotesResourceUpfrontTotalDetails =
  QuotesResourceUpfront
    { quotesResourceUpfrontAmountSubtotal = quotesResourceUpfrontAmountSubtotal,
      quotesResourceUpfrontAmountTotal = quotesResourceUpfrontAmountTotal,
      quotesResourceUpfrontLineItems = GHC.Maybe.Nothing,
      quotesResourceUpfrontTotalDetails = quotesResourceUpfrontTotalDetails
    }

-- | Defines the object schema located at @components.schemas.quotes_resource_upfront.properties.line_items@ in the specification.
--
-- The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
data QuotesResourceUpfrontLineItems' = QuotesResourceUpfrontLineItems'
  { -- | data: Details about each object.
    quotesResourceUpfrontLineItems'Data :: ([Item]),
    -- | has_more: True if this list has another page of items after this one that can be fetched.
    quotesResourceUpfrontLineItems'HasMore :: GHC.Types.Bool,
    -- | url: The URL where this list can be accessed.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    quotesResourceUpfrontLineItems'Url :: Data.Text.Internal.Text
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON QuotesResourceUpfrontLineItems' where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontLineItems'Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontLineItems'HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontLineItems'Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (["data" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontLineItems'Data obj] : ["has_more" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontLineItems'HasMore obj] : ["url" Data.Aeson.Types.ToJSON..= quotesResourceUpfrontLineItems'Url obj] : ["object" Data.Aeson.Types.ToJSON..= Data.Aeson.Types.Internal.String "list"] : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON QuotesResourceUpfrontLineItems' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "QuotesResourceUpfrontLineItems'" (\obj -> ((GHC.Base.pure QuotesResourceUpfrontLineItems' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "data")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "has_more")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "url"))

-- | Create a new 'QuotesResourceUpfrontLineItems'' with all required fields.
mkQuotesResourceUpfrontLineItems' ::
  -- | 'quotesResourceUpfrontLineItems'Data'
  [Item] ->
  -- | 'quotesResourceUpfrontLineItems'HasMore'
  GHC.Types.Bool ->
  -- | 'quotesResourceUpfrontLineItems'Url'
  Data.Text.Internal.Text ->
  QuotesResourceUpfrontLineItems'
mkQuotesResourceUpfrontLineItems' quotesResourceUpfrontLineItems'Data quotesResourceUpfrontLineItems'HasMore quotesResourceUpfrontLineItems'Url =
  QuotesResourceUpfrontLineItems'
    { quotesResourceUpfrontLineItems'Data = quotesResourceUpfrontLineItems'Data,
      quotesResourceUpfrontLineItems'HasMore = quotesResourceUpfrontLineItems'HasMore,
      quotesResourceUpfrontLineItems'Url = quotesResourceUpfrontLineItems'Url
    }
