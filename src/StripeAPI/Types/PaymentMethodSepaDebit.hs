{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema PaymentMethodSepaDebit
module StripeAPI.Types.PaymentMethodSepaDebit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Charge
import {-# SOURCE #-} StripeAPI.Types.SepaDebitGeneratedFrom
import {-# SOURCE #-} StripeAPI.Types.SetupAttempt
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_sepa_debit@ in the specification.
data PaymentMethodSepaDebit = PaymentMethodSepaDebit
  { -- | bank_code: Bank code of bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodSepaDebitBankCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | branch_code: Branch code of bank associated with the bank account.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodSepaDebitBranchCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | country: Two-letter ISO code representing the country the bank account is located in.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodSepaDebitCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodSepaDebitFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | generated_from: Information about the object that generated this PaymentMethod.
    paymentMethodSepaDebitGeneratedFrom :: (GHC.Maybe.Maybe PaymentMethodSepaDebitGeneratedFrom'),
    -- | last4: Last four characters of the IBAN.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    paymentMethodSepaDebitLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodSepaDebit where
  toJSON obj = Data.Aeson.Types.Internal.object ("bank_code" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitBankCode obj : "branch_code" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitBranchCode obj : "country" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitCountry obj : "fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitFingerprint obj : "generated_from" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitGeneratedFrom obj : "last4" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitLast4 obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bank_code" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitBankCode obj) GHC.Base.<> (("branch_code" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitBranchCode obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitCountry obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitFingerprint obj) GHC.Base.<> (("generated_from" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitGeneratedFrom obj) GHC.Base.<> ("last4" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitLast4 obj))))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodSepaDebit where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodSepaDebit" (\obj -> (((((GHC.Base.pure PaymentMethodSepaDebit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "branch_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "generated_from")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4"))

-- | Create a new 'PaymentMethodSepaDebit' with all required fields.
mkPaymentMethodSepaDebit :: PaymentMethodSepaDebit
mkPaymentMethodSepaDebit =
  PaymentMethodSepaDebit
    { paymentMethodSepaDebitBankCode = GHC.Maybe.Nothing,
      paymentMethodSepaDebitBranchCode = GHC.Maybe.Nothing,
      paymentMethodSepaDebitCountry = GHC.Maybe.Nothing,
      paymentMethodSepaDebitFingerprint = GHC.Maybe.Nothing,
      paymentMethodSepaDebitGeneratedFrom = GHC.Maybe.Nothing,
      paymentMethodSepaDebitLast4 = GHC.Maybe.Nothing
    }

-- | Defines the object schema located at @components.schemas.payment_method_sepa_debit.properties.generated_from.anyOf@ in the specification.
--
-- Information about the object that generated this PaymentMethod.
data PaymentMethodSepaDebitGeneratedFrom' = PaymentMethodSepaDebitGeneratedFrom'
  { -- | charge: The ID of the Charge that generated this PaymentMethod, if any.
    paymentMethodSepaDebitGeneratedFrom'Charge :: (GHC.Maybe.Maybe PaymentMethodSepaDebitGeneratedFrom'Charge'Variants),
    -- | setup_attempt: The ID of the SetupAttempt that generated this PaymentMethod, if any.
    paymentMethodSepaDebitGeneratedFrom'SetupAttempt :: (GHC.Maybe.Maybe PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'Variants)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodSepaDebitGeneratedFrom' where
  toJSON obj = Data.Aeson.Types.Internal.object ("charge" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitGeneratedFrom'Charge obj : "setup_attempt" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitGeneratedFrom'SetupAttempt obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("charge" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitGeneratedFrom'Charge obj) GHC.Base.<> ("setup_attempt" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitGeneratedFrom'SetupAttempt obj))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodSepaDebitGeneratedFrom' where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodSepaDebitGeneratedFrom'" (\obj -> (GHC.Base.pure PaymentMethodSepaDebitGeneratedFrom' GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "charge")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "setup_attempt"))

-- | Create a new 'PaymentMethodSepaDebitGeneratedFrom'' with all required fields.
mkPaymentMethodSepaDebitGeneratedFrom' :: PaymentMethodSepaDebitGeneratedFrom'
mkPaymentMethodSepaDebitGeneratedFrom' =
  PaymentMethodSepaDebitGeneratedFrom'
    { paymentMethodSepaDebitGeneratedFrom'Charge = GHC.Maybe.Nothing,
      paymentMethodSepaDebitGeneratedFrom'SetupAttempt = GHC.Maybe.Nothing
    }

-- | Defines the oneOf schema located at @components.schemas.payment_method_sepa_debit.properties.generated_from.anyOf.properties.charge.anyOf@ in the specification.
--
-- The ID of the Charge that generated this PaymentMethod, if any.
data PaymentMethodSepaDebitGeneratedFrom'Charge'Variants
  = PaymentMethodSepaDebitGeneratedFrom'Charge'Text Data.Text.Internal.Text
  | PaymentMethodSepaDebitGeneratedFrom'Charge'Charge Charge
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodSepaDebitGeneratedFrom'Charge'Variants where
  toJSON (PaymentMethodSepaDebitGeneratedFrom'Charge'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentMethodSepaDebitGeneratedFrom'Charge'Charge a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodSepaDebitGeneratedFrom'Charge'Variants where
  parseJSON val = case (PaymentMethodSepaDebitGeneratedFrom'Charge'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentMethodSepaDebitGeneratedFrom'Charge'Charge Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a

-- | Defines the oneOf schema located at @components.schemas.payment_method_sepa_debit.properties.generated_from.anyOf.properties.setup_attempt.anyOf@ in the specification.
--
-- The ID of the SetupAttempt that generated this PaymentMethod, if any.
data PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'Variants
  = PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'Text Data.Text.Internal.Text
  | PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'SetupAttempt SetupAttempt
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'Variants where
  toJSON (PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'Text a) = Data.Aeson.Types.ToJSON.toJSON a
  toJSON (PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'SetupAttempt a) = Data.Aeson.Types.ToJSON.toJSON a

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'Variants where
  parseJSON val = case (PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'Text Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> ((PaymentMethodSepaDebitGeneratedFrom'SetupAttempt'SetupAttempt Data.Functor.<$> Data.Aeson.Types.FromJSON.fromJSON val) GHC.Base.<|> Data.Aeson.Types.Internal.Error "No variant matched") of
    Data.Aeson.Types.Internal.Success a -> GHC.Base.pure a
    Data.Aeson.Types.Internal.Error a -> Control.Monad.Fail.fail a
