{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema PaymentMethodSepaDebit
module StripeAPI.Types.PaymentMethodSepaDebit where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.payment_method_sepa_debit@ in the specification.
data PaymentMethodSepaDebit
  = PaymentMethodSepaDebit
      { -- | bank_code: Bank code of bank associated with the bank account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodSepaDebitBankCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | branch_code: Branch code of bank associated with the bank account.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodSepaDebitBranchCode :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | country: Two-letter ISO code representing the country the bank account is located in.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodSepaDebitCountry :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | fingerprint: Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodSepaDebitFingerprint :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | last4: Last four characters of the IBAN.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        paymentMethodSepaDebitLast4 :: (GHC.Maybe.Maybe Data.Text.Internal.Text)
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON PaymentMethodSepaDebit where
  toJSON obj = Data.Aeson.Types.Internal.object ("bank_code" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitBankCode obj : "branch_code" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitBranchCode obj : "country" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitCountry obj : "fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitFingerprint obj : "last4" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitLast4 obj : [])
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("bank_code" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitBankCode obj) GHC.Base.<> (("branch_code" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitBranchCode obj) GHC.Base.<> (("country" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitCountry obj) GHC.Base.<> (("fingerprint" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitFingerprint obj) GHC.Base.<> ("last4" Data.Aeson.Types.ToJSON..= paymentMethodSepaDebitLast4 obj)))))

instance Data.Aeson.Types.FromJSON.FromJSON PaymentMethodSepaDebit where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "PaymentMethodSepaDebit" (\obj -> ((((GHC.Base.pure PaymentMethodSepaDebit GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "bank_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "branch_code")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "country")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "fingerprint")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "last4"))

-- | Create a new 'PaymentMethodSepaDebit' with all required fields.
mkPaymentMethodSepaDebit :: PaymentMethodSepaDebit
mkPaymentMethodSepaDebit =
  PaymentMethodSepaDebit
    { paymentMethodSepaDebitBankCode = GHC.Maybe.Nothing,
      paymentMethodSepaDebitBranchCode = GHC.Maybe.Nothing,
      paymentMethodSepaDebitCountry = GHC.Maybe.Nothing,
      paymentMethodSepaDebitFingerprint = GHC.Maybe.Nothing,
      paymentMethodSepaDebitLast4 = GHC.Maybe.Nothing
    }
