{-# LANGUAGE MultiWayIf #-}
{-# LANGUAGE OverloadedStrings #-}

-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.

-- | Contains the types generated from the schema IssuingCardShipping
module StripeAPI.Types.IssuingCardShipping where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Address
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the data type for the schema issuing_card_shipping
data IssuingCardShipping
  = IssuingCardShipping
      { -- | address:
        issuingCardShippingAddress :: Address,
        -- | carrier: The delivery company that shipped a card.
        issuingCardShippingCarrier :: (GHC.Maybe.Maybe IssuingCardShippingCarrier'),
        -- | eta: A unix timestamp representing a best estimate of when the card will be delivered.
        issuingCardShippingEta :: (GHC.Maybe.Maybe GHC.Types.Int),
        -- | name: Recipient name.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingCardShippingName :: Data.Text.Internal.Text,
        -- | speed: Shipment speed.
        issuingCardShippingSpeed :: IssuingCardShippingSpeed',
        -- | status: The delivery status of the card.
        issuingCardShippingStatus :: (GHC.Maybe.Maybe IssuingCardShippingStatus'),
        -- | tracking_number: A tracking number for a card shipment.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingCardShippingTrackingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | tracking_url: A link to the shipping carrier\'s site where you can view detailed information about a card shipment.
        --
        -- Constraints:
        --
        -- * Maximum length of 5000
        issuingCardShippingTrackingUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
        -- | type: Packaging options.
        issuingCardShippingType :: IssuingCardShippingType'
      }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShipping where
  toJSON obj = Data.Aeson.object ((Data.Aeson..=) "address" (issuingCardShippingAddress obj) : (Data.Aeson..=) "carrier" (issuingCardShippingCarrier obj) : (Data.Aeson..=) "eta" (issuingCardShippingEta obj) : (Data.Aeson..=) "name" (issuingCardShippingName obj) : (Data.Aeson..=) "speed" (issuingCardShippingSpeed obj) : (Data.Aeson..=) "status" (issuingCardShippingStatus obj) : (Data.Aeson..=) "tracking_number" (issuingCardShippingTrackingNumber obj) : (Data.Aeson..=) "tracking_url" (issuingCardShippingTrackingUrl obj) : (Data.Aeson..=) "type" (issuingCardShippingType obj) : [])
  toEncoding obj = Data.Aeson.pairs ((Data.Aeson..=) "address" (issuingCardShippingAddress obj) GHC.Base.<> ((Data.Aeson..=) "carrier" (issuingCardShippingCarrier obj) GHC.Base.<> ((Data.Aeson..=) "eta" (issuingCardShippingEta obj) GHC.Base.<> ((Data.Aeson..=) "name" (issuingCardShippingName obj) GHC.Base.<> ((Data.Aeson..=) "speed" (issuingCardShippingSpeed obj) GHC.Base.<> ((Data.Aeson..=) "status" (issuingCardShippingStatus obj) GHC.Base.<> ((Data.Aeson..=) "tracking_number" (issuingCardShippingTrackingNumber obj) GHC.Base.<> ((Data.Aeson..=) "tracking_url" (issuingCardShippingTrackingUrl obj) GHC.Base.<> (Data.Aeson..=) "type" (issuingCardShippingType obj)))))))))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShipping where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardShipping" (\obj -> ((((((((GHC.Base.pure IssuingCardShipping GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eta")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "speed")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Defines the enum schema issuing_card_shippingCarrier\'
--
-- The delivery company that shipped a card.
data IssuingCardShippingCarrier'
  = IssuingCardShippingCarrier'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingCardShippingCarrier'EnumTyped Data.Text.Internal.Text
  | IssuingCardShippingCarrier'EnumStringFedex
  | IssuingCardShippingCarrier'EnumStringUsps
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingCarrier' where
  toJSON (IssuingCardShippingCarrier'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardShippingCarrier'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardShippingCarrier'EnumStringFedex) = "fedex"
  toJSON (IssuingCardShippingCarrier'EnumStringUsps) = "usps"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingCarrier' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "fedex" -> IssuingCardShippingCarrier'EnumStringFedex
            | val GHC.Classes.== "usps" -> IssuingCardShippingCarrier'EnumStringUsps
            | GHC.Base.otherwise -> IssuingCardShippingCarrier'EnumOther val
      )

-- | Defines the enum schema issuing_card_shippingSpeed\'
--
-- Shipment speed.
data IssuingCardShippingSpeed'
  = IssuingCardShippingSpeed'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingCardShippingSpeed'EnumTyped Data.Text.Internal.Text
  | IssuingCardShippingSpeed'EnumStringExpress
  | IssuingCardShippingSpeed'EnumStringOvernight
  | IssuingCardShippingSpeed'EnumStringStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingSpeed' where
  toJSON (IssuingCardShippingSpeed'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardShippingSpeed'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardShippingSpeed'EnumStringExpress) = "express"
  toJSON (IssuingCardShippingSpeed'EnumStringOvernight) = "overnight"
  toJSON (IssuingCardShippingSpeed'EnumStringStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingSpeed' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "express" -> IssuingCardShippingSpeed'EnumStringExpress
            | val GHC.Classes.== "overnight" -> IssuingCardShippingSpeed'EnumStringOvernight
            | val GHC.Classes.== "standard" -> IssuingCardShippingSpeed'EnumStringStandard
            | GHC.Base.otherwise -> IssuingCardShippingSpeed'EnumOther val
      )

-- | Defines the enum schema issuing_card_shippingStatus\'
--
-- The delivery status of the card.
data IssuingCardShippingStatus'
  = IssuingCardShippingStatus'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingCardShippingStatus'EnumTyped Data.Text.Internal.Text
  | IssuingCardShippingStatus'EnumStringCanceled
  | IssuingCardShippingStatus'EnumStringDelivered
  | IssuingCardShippingStatus'EnumStringFailure
  | IssuingCardShippingStatus'EnumStringPending
  | IssuingCardShippingStatus'EnumStringReturned
  | IssuingCardShippingStatus'EnumStringShipped
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingStatus' where
  toJSON (IssuingCardShippingStatus'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardShippingStatus'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardShippingStatus'EnumStringCanceled) = "canceled"
  toJSON (IssuingCardShippingStatus'EnumStringDelivered) = "delivered"
  toJSON (IssuingCardShippingStatus'EnumStringFailure) = "failure"
  toJSON (IssuingCardShippingStatus'EnumStringPending) = "pending"
  toJSON (IssuingCardShippingStatus'EnumStringReturned) = "returned"
  toJSON (IssuingCardShippingStatus'EnumStringShipped) = "shipped"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "canceled" -> IssuingCardShippingStatus'EnumStringCanceled
            | val GHC.Classes.== "delivered" -> IssuingCardShippingStatus'EnumStringDelivered
            | val GHC.Classes.== "failure" -> IssuingCardShippingStatus'EnumStringFailure
            | val GHC.Classes.== "pending" -> IssuingCardShippingStatus'EnumStringPending
            | val GHC.Classes.== "returned" -> IssuingCardShippingStatus'EnumStringReturned
            | val GHC.Classes.== "shipped" -> IssuingCardShippingStatus'EnumStringShipped
            | GHC.Base.otherwise -> IssuingCardShippingStatus'EnumOther val
      )

-- | Defines the enum schema issuing_card_shippingType\'
--
-- Packaging options.
data IssuingCardShippingType'
  = IssuingCardShippingType'EnumOther Data.Aeson.Types.Internal.Value
  | IssuingCardShippingType'EnumTyped Data.Text.Internal.Text
  | IssuingCardShippingType'EnumStringBulk
  | IssuingCardShippingType'EnumStringIndividual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingType' where
  toJSON (IssuingCardShippingType'EnumOther patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardShippingType'EnumTyped patternName) = Data.Aeson.Types.ToJSON.toJSON patternName
  toJSON (IssuingCardShippingType'EnumStringBulk) = "bulk"
  toJSON (IssuingCardShippingType'EnumStringIndividual) = "individual"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingType' where
  parseJSON val =
    GHC.Base.pure
      ( if  | val GHC.Classes.== "bulk" -> IssuingCardShippingType'EnumStringBulk
            | val GHC.Classes.== "individual" -> IssuingCardShippingType'EnumStringIndividual
            | GHC.Base.otherwise -> IssuingCardShippingType'EnumOther val
      )
