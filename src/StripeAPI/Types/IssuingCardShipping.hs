{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema IssuingCardShipping
module StripeAPI.Types.IssuingCardShipping where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString.Char8
import qualified Data.ByteString.Char8 as Data.ByteString.Internal
import qualified Data.Functor
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import {-# SOURCE #-} StripeAPI.Types.Address
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.issuing_card_shipping@ in the specification.
data IssuingCardShipping = IssuingCardShipping
  { -- | address:
    issuingCardShippingAddress :: Address,
    -- | carrier: The delivery company that shipped a card.
    issuingCardShippingCarrier :: (GHC.Maybe.Maybe IssuingCardShippingCarrier'),
    -- | eta: A unix timestamp representing a best estimate of when the card will be delivered.
    issuingCardShippingEta :: (GHC.Maybe.Maybe GHC.Types.Int),
    -- | name: Recipient name.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardShippingName :: Data.Text.Internal.Text,
    -- | service: Shipment service, such as \`standard\` or \`express\`.
    issuingCardShippingService :: IssuingCardShippingService',
    -- | status: The delivery status of the card.
    issuingCardShippingStatus :: (GHC.Maybe.Maybe IssuingCardShippingStatus'),
    -- | tracking_number: A tracking number for a card shipment.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardShippingTrackingNumber :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | tracking_url: A link to the shipping carrier\'s site where you can view detailed information about a card shipment.
    --
    -- Constraints:
    --
    -- * Maximum length of 5000
    issuingCardShippingTrackingUrl :: (GHC.Maybe.Maybe Data.Text.Internal.Text),
    -- | type: Packaging options.
    issuingCardShippingType :: IssuingCardShippingType'
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShipping where
  toJSON obj = Data.Aeson.Types.Internal.object ("address" Data.Aeson.Types.ToJSON..= issuingCardShippingAddress obj : "carrier" Data.Aeson.Types.ToJSON..= issuingCardShippingCarrier obj : "eta" Data.Aeson.Types.ToJSON..= issuingCardShippingEta obj : "name" Data.Aeson.Types.ToJSON..= issuingCardShippingName obj : "service" Data.Aeson.Types.ToJSON..= issuingCardShippingService obj : "status" Data.Aeson.Types.ToJSON..= issuingCardShippingStatus obj : "tracking_number" Data.Aeson.Types.ToJSON..= issuingCardShippingTrackingNumber obj : "tracking_url" Data.Aeson.Types.ToJSON..= issuingCardShippingTrackingUrl obj : "type" Data.Aeson.Types.ToJSON..= issuingCardShippingType obj : GHC.Base.mempty)
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (("address" Data.Aeson.Types.ToJSON..= issuingCardShippingAddress obj) GHC.Base.<> (("carrier" Data.Aeson.Types.ToJSON..= issuingCardShippingCarrier obj) GHC.Base.<> (("eta" Data.Aeson.Types.ToJSON..= issuingCardShippingEta obj) GHC.Base.<> (("name" Data.Aeson.Types.ToJSON..= issuingCardShippingName obj) GHC.Base.<> (("service" Data.Aeson.Types.ToJSON..= issuingCardShippingService obj) GHC.Base.<> (("status" Data.Aeson.Types.ToJSON..= issuingCardShippingStatus obj) GHC.Base.<> (("tracking_number" Data.Aeson.Types.ToJSON..= issuingCardShippingTrackingNumber obj) GHC.Base.<> (("tracking_url" Data.Aeson.Types.ToJSON..= issuingCardShippingTrackingUrl obj) GHC.Base.<> ("type" Data.Aeson.Types.ToJSON..= issuingCardShippingType obj)))))))))

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShipping where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "IssuingCardShipping" (\obj -> ((((((((GHC.Base.pure IssuingCardShipping GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "address")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "carrier")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "eta")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "name")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "service")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "status")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_number")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:? "tracking_url")) GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..: "type"))

-- | Create a new 'IssuingCardShipping' with all required fields.
mkIssuingCardShipping ::
  -- | 'issuingCardShippingAddress'
  Address ->
  -- | 'issuingCardShippingName'
  Data.Text.Internal.Text ->
  -- | 'issuingCardShippingService'
  IssuingCardShippingService' ->
  -- | 'issuingCardShippingType'
  IssuingCardShippingType' ->
  IssuingCardShipping
mkIssuingCardShipping issuingCardShippingAddress issuingCardShippingName issuingCardShippingService issuingCardShippingType =
  IssuingCardShipping
    { issuingCardShippingAddress = issuingCardShippingAddress,
      issuingCardShippingCarrier = GHC.Maybe.Nothing,
      issuingCardShippingEta = GHC.Maybe.Nothing,
      issuingCardShippingName = issuingCardShippingName,
      issuingCardShippingService = issuingCardShippingService,
      issuingCardShippingStatus = GHC.Maybe.Nothing,
      issuingCardShippingTrackingNumber = GHC.Maybe.Nothing,
      issuingCardShippingTrackingUrl = GHC.Maybe.Nothing,
      issuingCardShippingType = issuingCardShippingType
    }

-- | Defines the enum schema located at @components.schemas.issuing_card_shipping.properties.carrier@ in the specification.
--
-- The delivery company that shipped a card.
data IssuingCardShippingCarrier'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingCardShippingCarrier'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingCardShippingCarrier'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"dhl"@
    IssuingCardShippingCarrier'EnumDhl
  | -- | Represents the JSON value @"fedex"@
    IssuingCardShippingCarrier'EnumFedex
  | -- | Represents the JSON value @"royal_mail"@
    IssuingCardShippingCarrier'EnumRoyalMail
  | -- | Represents the JSON value @"usps"@
    IssuingCardShippingCarrier'EnumUsps
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingCarrier' where
  toJSON (IssuingCardShippingCarrier'Other val) = val
  toJSON (IssuingCardShippingCarrier'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingCardShippingCarrier'EnumDhl) = "dhl"
  toJSON (IssuingCardShippingCarrier'EnumFedex) = "fedex"
  toJSON (IssuingCardShippingCarrier'EnumRoyalMail) = "royal_mail"
  toJSON (IssuingCardShippingCarrier'EnumUsps) = "usps"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingCarrier' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "dhl" -> IssuingCardShippingCarrier'EnumDhl
            | val GHC.Classes.== "fedex" -> IssuingCardShippingCarrier'EnumFedex
            | val GHC.Classes.== "royal_mail" -> IssuingCardShippingCarrier'EnumRoyalMail
            | val GHC.Classes.== "usps" -> IssuingCardShippingCarrier'EnumUsps
            | GHC.Base.otherwise -> IssuingCardShippingCarrier'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing_card_shipping.properties.service@ in the specification.
--
-- Shipment service, such as \`standard\` or \`express\`.
data IssuingCardShippingService'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingCardShippingService'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingCardShippingService'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"express"@
    IssuingCardShippingService'EnumExpress
  | -- | Represents the JSON value @"priority"@
    IssuingCardShippingService'EnumPriority
  | -- | Represents the JSON value @"standard"@
    IssuingCardShippingService'EnumStandard
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingService' where
  toJSON (IssuingCardShippingService'Other val) = val
  toJSON (IssuingCardShippingService'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingCardShippingService'EnumExpress) = "express"
  toJSON (IssuingCardShippingService'EnumPriority) = "priority"
  toJSON (IssuingCardShippingService'EnumStandard) = "standard"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingService' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "express" -> IssuingCardShippingService'EnumExpress
            | val GHC.Classes.== "priority" -> IssuingCardShippingService'EnumPriority
            | val GHC.Classes.== "standard" -> IssuingCardShippingService'EnumStandard
            | GHC.Base.otherwise -> IssuingCardShippingService'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing_card_shipping.properties.status@ in the specification.
--
-- The delivery status of the card.
data IssuingCardShippingStatus'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingCardShippingStatus'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingCardShippingStatus'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"canceled"@
    IssuingCardShippingStatus'EnumCanceled
  | -- | Represents the JSON value @"delivered"@
    IssuingCardShippingStatus'EnumDelivered
  | -- | Represents the JSON value @"failure"@
    IssuingCardShippingStatus'EnumFailure
  | -- | Represents the JSON value @"pending"@
    IssuingCardShippingStatus'EnumPending
  | -- | Represents the JSON value @"returned"@
    IssuingCardShippingStatus'EnumReturned
  | -- | Represents the JSON value @"shipped"@
    IssuingCardShippingStatus'EnumShipped
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingStatus' where
  toJSON (IssuingCardShippingStatus'Other val) = val
  toJSON (IssuingCardShippingStatus'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingCardShippingStatus'EnumCanceled) = "canceled"
  toJSON (IssuingCardShippingStatus'EnumDelivered) = "delivered"
  toJSON (IssuingCardShippingStatus'EnumFailure) = "failure"
  toJSON (IssuingCardShippingStatus'EnumPending) = "pending"
  toJSON (IssuingCardShippingStatus'EnumReturned) = "returned"
  toJSON (IssuingCardShippingStatus'EnumShipped) = "shipped"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingStatus' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "canceled" -> IssuingCardShippingStatus'EnumCanceled
            | val GHC.Classes.== "delivered" -> IssuingCardShippingStatus'EnumDelivered
            | val GHC.Classes.== "failure" -> IssuingCardShippingStatus'EnumFailure
            | val GHC.Classes.== "pending" -> IssuingCardShippingStatus'EnumPending
            | val GHC.Classes.== "returned" -> IssuingCardShippingStatus'EnumReturned
            | val GHC.Classes.== "shipped" -> IssuingCardShippingStatus'EnumShipped
            | GHC.Base.otherwise -> IssuingCardShippingStatus'Other val
      )

-- | Defines the enum schema located at @components.schemas.issuing_card_shipping.properties.type@ in the specification.
--
-- Packaging options.
data IssuingCardShippingType'
  = -- | This case is used if the value encountered during decoding does not match any of the provided cases in the specification.
    IssuingCardShippingType'Other Data.Aeson.Types.Internal.Value
  | -- | This constructor can be used to send values to the server which are not present in the specification yet.
    IssuingCardShippingType'Typed Data.Text.Internal.Text
  | -- | Represents the JSON value @"bulk"@
    IssuingCardShippingType'EnumBulk
  | -- | Represents the JSON value @"individual"@
    IssuingCardShippingType'EnumIndividual
  deriving (GHC.Show.Show, GHC.Classes.Eq)

instance Data.Aeson.Types.ToJSON.ToJSON IssuingCardShippingType' where
  toJSON (IssuingCardShippingType'Other val) = val
  toJSON (IssuingCardShippingType'Typed val) = Data.Aeson.Types.ToJSON.toJSON val
  toJSON (IssuingCardShippingType'EnumBulk) = "bulk"
  toJSON (IssuingCardShippingType'EnumIndividual) = "individual"

instance Data.Aeson.Types.FromJSON.FromJSON IssuingCardShippingType' where
  parseJSON val =
    GHC.Base.pure
      ( if
            | val GHC.Classes.== "bulk" -> IssuingCardShippingType'EnumBulk
            | val GHC.Classes.== "individual" -> IssuingCardShippingType'EnumIndividual
            | GHC.Base.otherwise -> IssuingCardShippingType'Other val
      )
