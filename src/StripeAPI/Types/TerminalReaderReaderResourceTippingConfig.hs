{-# LANGUAGE MultiWayIf #-}
-- CHANGE WITH CAUTION: This is a generated code file generated by https://github.com/Haskell-OpenAPI-Code-Generator/Haskell-OpenAPI-Client-Code-Generator.
{-# LANGUAGE OverloadedStrings #-}

-- | Contains the types generated from the schema TerminalReaderReaderResourceTippingConfig
module StripeAPI.Types.TerminalReaderReaderResourceTippingConfig where

import qualified Control.Monad.Fail
import qualified Data.Aeson
import qualified Data.Aeson as Data.Aeson.Encoding.Internal
import qualified Data.Aeson as Data.Aeson.Types
import qualified Data.Aeson as Data.Aeson.Types.FromJSON
import qualified Data.Aeson as Data.Aeson.Types.Internal
import qualified Data.Aeson as Data.Aeson.Types.ToJSON
import qualified Data.ByteString
import qualified Data.ByteString as Data.ByteString.Internal
import qualified Data.Foldable
import qualified Data.Functor
import qualified Data.Maybe
import qualified Data.Scientific
import qualified Data.Text
import qualified Data.Text as Data.Text.Internal
import qualified Data.Time.Calendar as Data.Time.Calendar.Days
import qualified Data.Time.LocalTime as Data.Time.LocalTime.Internal.ZonedTime
import qualified GHC.Base
import qualified GHC.Classes
import qualified GHC.Int
import qualified GHC.Show
import qualified GHC.Types
import qualified StripeAPI.Common
import StripeAPI.TypeAlias
import qualified Prelude as GHC.Integer.Type
import qualified Prelude as GHC.Maybe

-- | Defines the object schema located at @components.schemas.terminal_reader_reader_resource_tipping_config@ in the specification.
--
-- Represents a per-transaction tipping configuration
data TerminalReaderReaderResourceTippingConfig = TerminalReaderReaderResourceTippingConfig
  { -- | amount_eligible: Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent \$1.00 or 100 to represent Â¥100, a zero-decimal currency).
    terminalReaderReaderResourceTippingConfigAmountEligible :: (GHC.Maybe.Maybe GHC.Types.Int)
  }
  deriving
    ( GHC.Show.Show,
      GHC.Classes.Eq
    )

instance Data.Aeson.Types.ToJSON.ToJSON TerminalReaderReaderResourceTippingConfig where
  toJSON obj = Data.Aeson.Types.Internal.object (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_eligible" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceTippingConfigAmountEligible obj) : GHC.Base.mempty))
  toEncoding obj = Data.Aeson.Encoding.Internal.pairs (GHC.Base.mconcat (Data.Foldable.concat (Data.Maybe.maybe GHC.Base.mempty (GHC.Base.pure GHC.Base.. ("amount_eligible" Data.Aeson.Types.ToJSON..=)) (terminalReaderReaderResourceTippingConfigAmountEligible obj) : GHC.Base.mempty)))

instance Data.Aeson.Types.FromJSON.FromJSON TerminalReaderReaderResourceTippingConfig where
  parseJSON = Data.Aeson.Types.FromJSON.withObject "TerminalReaderReaderResourceTippingConfig" (\obj -> GHC.Base.pure TerminalReaderReaderResourceTippingConfig GHC.Base.<*> (obj Data.Aeson.Types.FromJSON..:! "amount_eligible"))

-- | Create a new 'TerminalReaderReaderResourceTippingConfig' with all required fields.
mkTerminalReaderReaderResourceTippingConfig :: TerminalReaderReaderResourceTippingConfig
mkTerminalReaderReaderResourceTippingConfig = TerminalReaderReaderResourceTippingConfig {terminalReaderReaderResourceTippingConfigAmountEligible = GHC.Maybe.Nothing}
